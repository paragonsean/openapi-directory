/**
 * User API
 * The Vonage Business Cloud User API enables you to retrieve information about users.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationErrorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationErrorsResponse::OAIValidationErrorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationErrorsResponse::OAIValidationErrorsResponse() {
    this->initializeModel();
}

OAIValidationErrorsResponse::~OAIValidationErrorsResponse() {}

void OAIValidationErrorsResponse::initializeModel() {

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_invalid_parameters_isSet = false;
    m_invalid_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIValidationErrorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationErrorsResponse::fromJsonObject(QJsonObject json) {

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_invalid_parameters_isValid = ::OpenAPI::fromJsonValue(m_invalid_parameters, json[QString("invalid_parameters")]);
    m_invalid_parameters_isSet = !json[QString("invalid_parameters")].isNull() && m_invalid_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIValidationErrorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationErrorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_invalid_parameters.size() > 0) {
        obj.insert(QString("invalid_parameters"), ::OpenAPI::toJsonValue(m_invalid_parameters));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIValidationErrorsResponse::getInstance() const {
    return m_instance;
}
void OAIValidationErrorsResponse::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIValidationErrorsResponse::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIValidationErrorsResponse::is_instance_Valid() const{
    return m_instance_isValid;
}

QList<OAIDetailedInvalidParam> OAIValidationErrorsResponse::getInvalidParameters() const {
    return m_invalid_parameters;
}
void OAIValidationErrorsResponse::setInvalidParameters(const QList<OAIDetailedInvalidParam> &invalid_parameters) {
    m_invalid_parameters = invalid_parameters;
    m_invalid_parameters_isSet = true;
}

bool OAIValidationErrorsResponse::is_invalid_parameters_Set() const{
    return m_invalid_parameters_isSet;
}

bool OAIValidationErrorsResponse::is_invalid_parameters_Valid() const{
    return m_invalid_parameters_isValid;
}

double OAIValidationErrorsResponse::getStatus() const {
    return m_status;
}
void OAIValidationErrorsResponse::setStatus(const double &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIValidationErrorsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIValidationErrorsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIValidationErrorsResponse::getTitle() const {
    return m_title;
}
void OAIValidationErrorsResponse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIValidationErrorsResponse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIValidationErrorsResponse::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIValidationErrorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationErrorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
