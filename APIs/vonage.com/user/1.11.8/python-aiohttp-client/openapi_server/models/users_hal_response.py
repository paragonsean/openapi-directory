# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.users_embedded_object import UsersEmbeddedObject
from openapi_server import util


class UsersHalResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: UsersEmbeddedObject=None, links: Links=None, page: float=None, page_size: float=None, total_items: float=None, total_pages: float=None):
        """UsersHalResponse - a model defined in OpenAPI

        :param embedded: The embedded of this UsersHalResponse.
        :param links: The links of this UsersHalResponse.
        :param page: The page of this UsersHalResponse.
        :param page_size: The page_size of this UsersHalResponse.
        :param total_items: The total_items of this UsersHalResponse.
        :param total_pages: The total_pages of this UsersHalResponse.
        """
        self.openapi_types = {
            'embedded': UsersEmbeddedObject,
            'links': Links,
            'page': float,
            'page_size': float,
            'total_items': float,
            'total_pages': float
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'page': 'page',
            'page_size': 'page_size',
            'total_items': 'total_items',
            'total_pages': 'total_pages'
        }

        self._embedded = embedded
        self._links = links
        self._page = page
        self._page_size = page_size
        self._total_items = total_items
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersHalResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsersHalResponse of this UsersHalResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this UsersHalResponse.


        :return: The embedded of this UsersHalResponse.
        :rtype: UsersEmbeddedObject
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this UsersHalResponse.


        :param embedded: The embedded of this UsersHalResponse.
        :type embedded: UsersEmbeddedObject
        """

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this UsersHalResponse.


        :return: The links of this UsersHalResponse.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this UsersHalResponse.


        :param links: The links of this UsersHalResponse.
        :type links: Links
        """

        self._links = links

    @property
    def page(self):
        """Gets the page of this UsersHalResponse.

        Current page number

        :return: The page of this UsersHalResponse.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this UsersHalResponse.

        Current page number

        :param page: The page of this UsersHalResponse.
        :type page: float
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this UsersHalResponse.

        Number of records per page

        :return: The page_size of this UsersHalResponse.
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this UsersHalResponse.

        Number of records per page

        :param page_size: The page_size of this UsersHalResponse.
        :type page_size: float
        """

        self._page_size = page_size

    @property
    def total_items(self):
        """Gets the total_items of this UsersHalResponse.

        Total number of records

        :return: The total_items of this UsersHalResponse.
        :rtype: float
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this UsersHalResponse.

        Total number of records

        :param total_items: The total_items of this UsersHalResponse.
        :type total_items: float
        """

        self._total_items = total_items

    @property
    def total_pages(self):
        """Gets the total_pages of this UsersHalResponse.

        Total number of pages

        :return: The total_pages of this UsersHalResponse.
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this UsersHalResponse.

        Total number of pages

        :param total_pages: The total_pages of this UsersHalResponse.
        :type total_pages: float
        """

        self._total_pages = total_pages
