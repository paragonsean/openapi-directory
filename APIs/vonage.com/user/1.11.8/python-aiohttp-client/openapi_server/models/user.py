# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.user_extension import UserExtension
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_numbers: List[Contact]=None, email: str=None, extensions: List[UserExtension]=None, first_name: str=None, id: float=None, last_name: str=None, login_name: str=None):
        """User - a model defined in OpenAPI

        :param contact_numbers: The contact_numbers of this User.
        :param email: The email of this User.
        :param extensions: The extensions of this User.
        :param first_name: The first_name of this User.
        :param id: The id of this User.
        :param last_name: The last_name of this User.
        :param login_name: The login_name of this User.
        """
        self.openapi_types = {
            'contact_numbers': List[Contact],
            'email': str,
            'extensions': List[UserExtension],
            'first_name': str,
            'id': float,
            'last_name': str,
            'login_name': str
        }

        self.attribute_map = {
            'contact_numbers': 'contact_numbers',
            'email': 'email',
            'extensions': 'extensions',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'login_name': 'login_name'
        }

        self._contact_numbers = contact_numbers
        self._email = email
        self._extensions = extensions
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._login_name = login_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_numbers(self):
        """Gets the contact_numbers of this User.

        Collection of contact objects

        :return: The contact_numbers of this User.
        :rtype: List[Contact]
        """
        return self._contact_numbers

    @contact_numbers.setter
    def contact_numbers(self, contact_numbers):
        """Sets the contact_numbers of this User.

        Collection of contact objects

        :param contact_numbers: The contact_numbers of this User.
        :type contact_numbers: List[Contact]
        """

        self._contact_numbers = contact_numbers

    @property
    def email(self):
        """Gets the email of this User.

        Email address of the user

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email address of the user

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def extensions(self):
        """Gets the extensions of this User.

        Collection of extension objects

        :return: The extensions of this User.
        :rtype: List[UserExtension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this User.

        Collection of extension objects

        :param extensions: The extensions of this User.
        :type extensions: List[UserExtension]
        """

        self._extensions = extensions

    @property
    def first_name(self):
        """Gets the first_name of this User.

        First name of the user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of the user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.

        Unique identifier of the user

        :return: The id of this User.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Unique identifier of the user

        :param id: The id of this User.
        :type id: float
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this User.

        Last name of the user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of the user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def login_name(self):
        """Gets the login_name of this User.

        Login name of the user

        :return: The login_name of this User.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this User.

        Login name of the user

        :param login_name: The login_name of this User.
        :type login_name: str
        """

        self._login_name = login_name
