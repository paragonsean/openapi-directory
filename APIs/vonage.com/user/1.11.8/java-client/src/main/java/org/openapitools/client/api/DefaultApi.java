/*
 * User API
 * The Vonage Business Cloud User API enables you to retrieve information about users.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.UserHalResponse;
import org.openapitools.client.model.UsersHalResponse;
import org.openapitools.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userCtrlGetUserByID
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param userId The Vonage Business Cloud user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCtrlGetUserByIDCall(String accountId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/accounts/{account_id}/users/{user_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCtrlGetUserByIDValidateBeforeCall(String accountId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling userCtrlGetUserByID(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userCtrlGetUserByID(Async)");
        }

        return userCtrlGetUserByIDCall(accountId, userId, _callback);

    }

    /**
     * Get user data by account ID and user ID
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param userId The Vonage Business Cloud user ID (required)
     * @return UserHalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public UserHalResponse userCtrlGetUserByID(String accountId, BigDecimal userId) throws ApiException {
        ApiResponse<UserHalResponse> localVarResp = userCtrlGetUserByIDWithHttpInfo(accountId, userId);
        return localVarResp.getData();
    }

    /**
     * Get user data by account ID and user ID
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param userId The Vonage Business Cloud user ID (required)
     * @return ApiResponse&lt;UserHalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserHalResponse> userCtrlGetUserByIDWithHttpInfo(String accountId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = userCtrlGetUserByIDValidateBeforeCall(accountId, userId, null);
        Type localVarReturnType = new TypeToken<UserHalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user data by account ID and user ID (asynchronously)
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param userId The Vonage Business Cloud user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCtrlGetUserByIDAsync(String accountId, BigDecimal userId, final ApiCallback<UserHalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCtrlGetUserByIDValidateBeforeCall(accountId, userId, _callback);
        Type localVarReturnType = new TypeToken<UserHalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCtrlGetUsers
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param pageSize Number of records per page (optional)
     * @param page Current page number (optional)
     * @param firstName Filter by first name (optional)
     * @param lastName Filter by last name (optional)
     * @param loginName Filter by login name (optional)
     * @param email Filter by email address (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters given </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCtrlGetUsersCall(String accountId, BigDecimal pageSize, BigDecimal page, String firstName, String lastName, String loginName, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/accounts/{account_id}/users"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("first_name", firstName));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_name", lastName));
        }

        if (loginName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login_name", loginName));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCtrlGetUsersValidateBeforeCall(String accountId, BigDecimal pageSize, BigDecimal page, String firstName, String lastName, String loginName, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling userCtrlGetUsers(Async)");
        }

        return userCtrlGetUsersCall(accountId, pageSize, page, firstName, lastName, loginName, email, _callback);

    }

    /**
     * Get account users data by account ID
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param pageSize Number of records per page (optional)
     * @param page Current page number (optional)
     * @param firstName Filter by first name (optional)
     * @param lastName Filter by last name (optional)
     * @param loginName Filter by login name (optional)
     * @param email Filter by email address (optional)
     * @return UsersHalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters given </td><td>  -  </td></tr>
     </table>
     */
    public UsersHalResponse userCtrlGetUsers(String accountId, BigDecimal pageSize, BigDecimal page, String firstName, String lastName, String loginName, String email) throws ApiException {
        ApiResponse<UsersHalResponse> localVarResp = userCtrlGetUsersWithHttpInfo(accountId, pageSize, page, firstName, lastName, loginName, email);
        return localVarResp.getData();
    }

    /**
     * Get account users data by account ID
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param pageSize Number of records per page (optional)
     * @param page Current page number (optional)
     * @param firstName Filter by first name (optional)
     * @param lastName Filter by last name (optional)
     * @param loginName Filter by login name (optional)
     * @param email Filter by email address (optional)
     * @return ApiResponse&lt;UsersHalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters given </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersHalResponse> userCtrlGetUsersWithHttpInfo(String accountId, BigDecimal pageSize, BigDecimal page, String firstName, String lastName, String loginName, String email) throws ApiException {
        okhttp3.Call localVarCall = userCtrlGetUsersValidateBeforeCall(accountId, pageSize, page, firstName, lastName, loginName, email, null);
        Type localVarReturnType = new TypeToken<UsersHalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account users data by account ID (asynchronously)
     * 
     * @param accountId The Vonage Business Cloud account ID (required)
     * @param pageSize Number of records per page (optional)
     * @param page Current page number (optional)
     * @param firstName Filter by first name (optional)
     * @param lastName Filter by last name (optional)
     * @param loginName Filter by login name (optional)
     * @param email Filter by email address (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters given </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userCtrlGetUsersAsync(String accountId, BigDecimal pageSize, BigDecimal page, String firstName, String lastName, String loginName, String email, final ApiCallback<UsersHalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCtrlGetUsersValidateBeforeCall(accountId, pageSize, page, firstName, lastName, loginName, email, _callback);
        Type localVarReturnType = new TypeToken<UsersHalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
