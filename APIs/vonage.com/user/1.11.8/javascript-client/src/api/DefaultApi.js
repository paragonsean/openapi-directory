/**
 * User API
 * The Vonage Business Cloud User API enables you to retrieve information about users.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import UserHalResponse from '../model/UserHalResponse';
import UsersHalResponse from '../model/UsersHalResponse';
import ValidationErrorsResponse from '../model/ValidationErrorsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.11.8
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userCtrlGetUserByID operation.
     * @callback module:api/DefaultApi~userCtrlGetUserByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserHalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user data by account ID and user ID
     * @param {String} accountId The Vonage Business Cloud account ID
     * @param {Number} userId The Vonage Business Cloud user ID
     * @param {module:api/DefaultApi~userCtrlGetUserByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserHalResponse}
     */
    userCtrlGetUserByID(accountId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling userCtrlGetUserByID");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userCtrlGetUserByID");
      }

      let pathParams = {
        'account_id': accountId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserHalResponse;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCtrlGetUsers operation.
     * @callback module:api/DefaultApi~userCtrlGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersHalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account users data by account ID
     * @param {String} accountId The Vonage Business Cloud account ID
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] Number of records per page
     * @param {Number} [page] Current page number
     * @param {String} [firstName] Filter by first name
     * @param {String} [lastName] Filter by last name
     * @param {String} [loginName] Filter by login name
     * @param {String} [email] Filter by email address
     * @param {module:api/DefaultApi~userCtrlGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersHalResponse}
     */
    userCtrlGetUsers(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling userCtrlGetUsers");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
        'page_size': opts['pageSize'],
        'page': opts['page'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'login_name': opts['loginName'],
        'email': opts['email']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersHalResponse;
      return this.apiClient.callApi(
        '/api/accounts/{account_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
