# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, id: float=None, name: str=None, status: str=None):
        """Account - a model defined in OpenAPI

        :param address: The address of this Account.
        :param id: The id of this Account.
        :param name: The name of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'address': Address,
            'id': float,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'name': 'name',
            'status': 'status'
        }

        self._address = address
        self._id = id
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Account.


        :return: The address of this Account.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Account.


        :param address: The address of this Account.
        :type address: Address
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this Account.

        Unique identifier of the account

        :return: The id of this Account.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Unique identifier of the account

        :param id: The id of this Account.
        :type id: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.

        Name of the account

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of the account

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Account.

        Status of the account

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        Status of the account

        :param status: The status of this Account.
        :type status: str
        """

        self._status = status
