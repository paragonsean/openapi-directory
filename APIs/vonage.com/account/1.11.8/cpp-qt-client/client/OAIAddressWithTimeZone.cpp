/**
 * Account API
 * The Vonage Business Cloud Account API enables you to retrieve information about accounts.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressWithTimeZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressWithTimeZone::OAIAddressWithTimeZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressWithTimeZone::OAIAddressWithTimeZone() {
    this->initializeModel();
}

OAIAddressWithTimeZone::~OAIAddressWithTimeZone() {}

void OAIAddressWithTimeZone::initializeModel() {

    m_address_1_isSet = false;
    m_address_1_isValid = false;

    m_address_2_isSet = false;
    m_address_2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIAddressWithTimeZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressWithTimeZone::fromJsonObject(QJsonObject json) {

    m_address_1_isValid = ::OpenAPI::fromJsonValue(m_address_1, json[QString("address_1")]);
    m_address_1_isSet = !json[QString("address_1")].isNull() && m_address_1_isValid;

    m_address_2_isValid = ::OpenAPI::fromJsonValue(m_address_2, json[QString("address_2")]);
    m_address_2_isSet = !json[QString("address_2")].isNull() && m_address_2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;
}

QString OAIAddressWithTimeZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressWithTimeZone::asJsonObject() const {
    QJsonObject obj;
    if (m_address_1_isSet) {
        obj.insert(QString("address_1"), ::OpenAPI::toJsonValue(m_address_1));
    }
    if (m_address_2_isSet) {
        obj.insert(QString("address_2"), ::OpenAPI::toJsonValue(m_address_2));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIAddressWithTimeZone::getAddress1() const {
    return m_address_1;
}
void OAIAddressWithTimeZone::setAddress1(const QString &address_1) {
    m_address_1 = address_1;
    m_address_1_isSet = true;
}

bool OAIAddressWithTimeZone::is_address_1_Set() const{
    return m_address_1_isSet;
}

bool OAIAddressWithTimeZone::is_address_1_Valid() const{
    return m_address_1_isValid;
}

QString OAIAddressWithTimeZone::getAddress2() const {
    return m_address_2;
}
void OAIAddressWithTimeZone::setAddress2(const QString &address_2) {
    m_address_2 = address_2;
    m_address_2_isSet = true;
}

bool OAIAddressWithTimeZone::is_address_2_Set() const{
    return m_address_2_isSet;
}

bool OAIAddressWithTimeZone::is_address_2_Valid() const{
    return m_address_2_isValid;
}

QString OAIAddressWithTimeZone::getCity() const {
    return m_city;
}
void OAIAddressWithTimeZone::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddressWithTimeZone::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddressWithTimeZone::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddressWithTimeZone::getCountry() const {
    return m_country;
}
void OAIAddressWithTimeZone::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddressWithTimeZone::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddressWithTimeZone::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddressWithTimeZone::getPostalCode() const {
    return m_postal_code;
}
void OAIAddressWithTimeZone::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddressWithTimeZone::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddressWithTimeZone::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddressWithTimeZone::getState() const {
    return m_state;
}
void OAIAddressWithTimeZone::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddressWithTimeZone::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddressWithTimeZone::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddressWithTimeZone::getTimeZone() const {
    return m_time_zone;
}
void OAIAddressWithTimeZone::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIAddressWithTimeZone::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIAddressWithTimeZone::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIAddressWithTimeZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressWithTimeZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
