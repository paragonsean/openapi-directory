/**
 * Account API
 * The Vonage Business Cloud Account API enables you to retrieve information about accounts.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationsHalResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationsHalResponse::OAILocationsHalResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationsHalResponse::OAILocationsHalResponse() {
    this->initializeModel();
}

OAILocationsHalResponse::~OAILocationsHalResponse() {}

void OAILocationsHalResponse::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAILocationsHalResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationsHalResponse::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("total_items")]);
    m_total_items_isSet = !json[QString("total_items")].isNull() && m_total_items_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("total_pages")]);
    m_total_pages_isSet = !json[QString("total_pages")].isNull() && m_total_pages_isValid;
}

QString OAILocationsHalResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationsHalResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("total_items"), ::OpenAPI::toJsonValue(m_total_items));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("total_pages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

OAILocationsEmbeddedObject OAILocationsHalResponse::getEmbedded() const {
    return m__embedded;
}
void OAILocationsHalResponse::setEmbedded(const OAILocationsEmbeddedObject &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAILocationsHalResponse::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAILocationsHalResponse::is__embedded_Valid() const{
    return m__embedded_isValid;
}

OAILinks OAILocationsHalResponse::getLinks() const {
    return m__links;
}
void OAILocationsHalResponse::setLinks(const OAILinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAILocationsHalResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAILocationsHalResponse::is__links_Valid() const{
    return m__links_isValid;
}

double OAILocationsHalResponse::getPage() const {
    return m_page;
}
void OAILocationsHalResponse::setPage(const double &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAILocationsHalResponse::is_page_Set() const{
    return m_page_isSet;
}

bool OAILocationsHalResponse::is_page_Valid() const{
    return m_page_isValid;
}

double OAILocationsHalResponse::getPageSize() const {
    return m_page_size;
}
void OAILocationsHalResponse::setPageSize(const double &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAILocationsHalResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAILocationsHalResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

double OAILocationsHalResponse::getTotalItems() const {
    return m_total_items;
}
void OAILocationsHalResponse::setTotalItems(const double &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAILocationsHalResponse::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAILocationsHalResponse::is_total_items_Valid() const{
    return m_total_items_isValid;
}

double OAILocationsHalResponse::getTotalPages() const {
    return m_total_pages;
}
void OAILocationsHalResponse::setTotalPages(const double &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAILocationsHalResponse::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAILocationsHalResponse::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAILocationsHalResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationsHalResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
