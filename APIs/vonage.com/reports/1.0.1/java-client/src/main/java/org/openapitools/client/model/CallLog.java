/*
 * Reports API
 * The Vonage Business Cloud Reports API enables you to retrieve call logs for your account.  Your application must subscribe to the Reports API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:08.930255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallLog {
  public static final String SERIALIZED_NAME_CHARGE = "charge";
  @SerializedName(SERIALIZED_NAME_CHARGE)
  private BigDecimal charge;

  public static final String SERIALIZED_NAME_DESTINATION_DEVICE_NAME = "destination_device_name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DEVICE_NAME)
  private String destinationDeviceName;

  public static final String SERIALIZED_NAME_DESTINATION_EXTENSION = "destination_extension";
  @SerializedName(SERIALIZED_NAME_DESTINATION_EXTENSION)
  private BigDecimal destinationExtension;

  public static final String SERIALIZED_NAME_DESTINATION_SIP_ID = "destination_sip_id";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SIP_ID)
  private String destinationSipId;

  public static final String SERIALIZED_NAME_DESTINATION_USER = "destination_user";
  @SerializedName(SERIALIZED_NAME_DESTINATION_USER)
  private String destinationUser;

  public static final String SERIALIZED_NAME_DESTINATION_USER_FULL_NAME = "destination_user_full_name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_USER_FULL_NAME)
  private String destinationUserFullName;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IN_NETWORK = "in_network";
  @SerializedName(SERIALIZED_NAME_IN_NETWORK)
  private Boolean inNetwork;

  public static final String SERIALIZED_NAME_INTERNATIONAL = "international";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL)
  private Boolean international;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private BigDecimal length;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  public static final String SERIALIZED_NAME_RECORDED = "recorded";
  @SerializedName(SERIALIZED_NAME_RECORDED)
  private Boolean recorded;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_SOURCE_DEVICE_NAME = "source_device_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEVICE_NAME)
  private String sourceDeviceName;

  public static final String SERIALIZED_NAME_SOURCE_EXTENSION = "source_extension";
  @SerializedName(SERIALIZED_NAME_SOURCE_EXTENSION)
  private BigDecimal sourceExtension;

  public static final String SERIALIZED_NAME_SOURCE_SIP_ID = "source_sip_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_SIP_ID)
  private String sourceSipId;

  public static final String SERIALIZED_NAME_SOURCE_USER = "source_user";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER)
  private String sourceUser;

  public static final String SERIALIZED_NAME_SOURCE_USER_FULL_NAME = "source_user_full_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_USER_FULL_NAME)
  private String sourceUserFullName;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public CallLog() {
  }

  public CallLog charge(BigDecimal charge) {
    this.charge = charge;
    return this;
  }

  /**
   * Amount charged for the call
   * @return charge
   */
  @javax.annotation.Nullable
  public BigDecimal getCharge() {
    return charge;
  }

  public void setCharge(BigDecimal charge) {
    this.charge = charge;
  }


  public CallLog destinationDeviceName(String destinationDeviceName) {
    this.destinationDeviceName = destinationDeviceName;
    return this;
  }

  /**
   * Name of the destination device of the call
   * @return destinationDeviceName
   */
  @javax.annotation.Nullable
  public String getDestinationDeviceName() {
    return destinationDeviceName;
  }

  public void setDestinationDeviceName(String destinationDeviceName) {
    this.destinationDeviceName = destinationDeviceName;
  }


  public CallLog destinationExtension(BigDecimal destinationExtension) {
    this.destinationExtension = destinationExtension;
    return this;
  }

  /**
   * Destination extension of the call
   * @return destinationExtension
   */
  @javax.annotation.Nullable
  public BigDecimal getDestinationExtension() {
    return destinationExtension;
  }

  public void setDestinationExtension(BigDecimal destinationExtension) {
    this.destinationExtension = destinationExtension;
  }


  public CallLog destinationSipId(String destinationSipId) {
    this.destinationSipId = destinationSipId;
    return this;
  }

  /**
   * SIP ID of the destination device of the call
   * @return destinationSipId
   */
  @javax.annotation.Nullable
  public String getDestinationSipId() {
    return destinationSipId;
  }

  public void setDestinationSipId(String destinationSipId) {
    this.destinationSipId = destinationSipId;
  }


  public CallLog destinationUser(String destinationUser) {
    this.destinationUser = destinationUser;
    return this;
  }

  /**
   * Destination user of the call
   * @return destinationUser
   */
  @javax.annotation.Nullable
  public String getDestinationUser() {
    return destinationUser;
  }

  public void setDestinationUser(String destinationUser) {
    this.destinationUser = destinationUser;
  }


  public CallLog destinationUserFullName(String destinationUserFullName) {
    this.destinationUserFullName = destinationUserFullName;
    return this;
  }

  /**
   * Full name of the destination user of the call
   * @return destinationUserFullName
   */
  @javax.annotation.Nullable
  public String getDestinationUserFullName() {
    return destinationUserFullName;
  }

  public void setDestinationUserFullName(String destinationUserFullName) {
    this.destinationUserFullName = destinationUserFullName;
  }


  public CallLog direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Direction of the call
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public CallLog end(String end) {
    this.end = end;
    return this;
  }

  /**
   * End time of the call
   * @return end
   */
  @javax.annotation.Nullable
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public CallLog from(String from) {
    this.from = from;
    return this;
  }

  /**
   * Source number of the call
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CallLog id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the call
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CallLog inNetwork(Boolean inNetwork) {
    this.inNetwork = inNetwork;
    return this;
  }

  /**
   * Indicates if call was on/off network
   * @return inNetwork
   */
  @javax.annotation.Nullable
  public Boolean getInNetwork() {
    return inNetwork;
  }

  public void setInNetwork(Boolean inNetwork) {
    this.inNetwork = inNetwork;
  }


  public CallLog international(Boolean international) {
    this.international = international;
    return this;
  }

  /**
   * Indicates if call was international
   * @return international
   */
  @javax.annotation.Nullable
  public Boolean getInternational() {
    return international;
  }

  public void setInternational(Boolean international) {
    this.international = international;
  }


  public CallLog length(BigDecimal length) {
    this.length = length;
    return this;
  }

  /**
   * Duration of the call in seconds
   * @return length
   */
  @javax.annotation.Nullable
  public BigDecimal getLength() {
    return length;
  }

  public void setLength(BigDecimal length) {
    this.length = length;
  }


  public CallLog rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Rate charged for the call
   * @return rate
   */
  @javax.annotation.Nullable
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public CallLog recorded(Boolean recorded) {
    this.recorded = recorded;
    return this;
  }

  /**
   * Indicates if call was recorded
   * @return recorded
   */
  @javax.annotation.Nullable
  public Boolean getRecorded() {
    return recorded;
  }

  public void setRecorded(Boolean recorded) {
    this.recorded = recorded;
  }


  public CallLog result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Result of the call
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public CallLog sourceDeviceName(String sourceDeviceName) {
    this.sourceDeviceName = sourceDeviceName;
    return this;
  }

  /**
   * Name of the source device of the call
   * @return sourceDeviceName
   */
  @javax.annotation.Nullable
  public String getSourceDeviceName() {
    return sourceDeviceName;
  }

  public void setSourceDeviceName(String sourceDeviceName) {
    this.sourceDeviceName = sourceDeviceName;
  }


  public CallLog sourceExtension(BigDecimal sourceExtension) {
    this.sourceExtension = sourceExtension;
    return this;
  }

  /**
   * Source extension of the call
   * @return sourceExtension
   */
  @javax.annotation.Nullable
  public BigDecimal getSourceExtension() {
    return sourceExtension;
  }

  public void setSourceExtension(BigDecimal sourceExtension) {
    this.sourceExtension = sourceExtension;
  }


  public CallLog sourceSipId(String sourceSipId) {
    this.sourceSipId = sourceSipId;
    return this;
  }

  /**
   * SIP ID of the source device of the call
   * @return sourceSipId
   */
  @javax.annotation.Nullable
  public String getSourceSipId() {
    return sourceSipId;
  }

  public void setSourceSipId(String sourceSipId) {
    this.sourceSipId = sourceSipId;
  }


  public CallLog sourceUser(String sourceUser) {
    this.sourceUser = sourceUser;
    return this;
  }

  /**
   * Source user of the call
   * @return sourceUser
   */
  @javax.annotation.Nullable
  public String getSourceUser() {
    return sourceUser;
  }

  public void setSourceUser(String sourceUser) {
    this.sourceUser = sourceUser;
  }


  public CallLog sourceUserFullName(String sourceUserFullName) {
    this.sourceUserFullName = sourceUserFullName;
    return this;
  }

  /**
   * Full name of the source user of the call
   * @return sourceUserFullName
   */
  @javax.annotation.Nullable
  public String getSourceUserFullName() {
    return sourceUserFullName;
  }

  public void setSourceUserFullName(String sourceUserFullName) {
    this.sourceUserFullName = sourceUserFullName;
  }


  public CallLog start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Start time of the call
   * @return start
   */
  @javax.annotation.Nullable
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public CallLog to(String to) {
    this.to = to;
    return this;
  }

  /**
   * Destination number of the call
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallLog callLog = (CallLog) o;
    return Objects.equals(this.charge, callLog.charge) &&
        Objects.equals(this.destinationDeviceName, callLog.destinationDeviceName) &&
        Objects.equals(this.destinationExtension, callLog.destinationExtension) &&
        Objects.equals(this.destinationSipId, callLog.destinationSipId) &&
        Objects.equals(this.destinationUser, callLog.destinationUser) &&
        Objects.equals(this.destinationUserFullName, callLog.destinationUserFullName) &&
        Objects.equals(this.direction, callLog.direction) &&
        Objects.equals(this.end, callLog.end) &&
        Objects.equals(this.from, callLog.from) &&
        Objects.equals(this.id, callLog.id) &&
        Objects.equals(this.inNetwork, callLog.inNetwork) &&
        Objects.equals(this.international, callLog.international) &&
        Objects.equals(this.length, callLog.length) &&
        Objects.equals(this.rate, callLog.rate) &&
        Objects.equals(this.recorded, callLog.recorded) &&
        Objects.equals(this.result, callLog.result) &&
        Objects.equals(this.sourceDeviceName, callLog.sourceDeviceName) &&
        Objects.equals(this.sourceExtension, callLog.sourceExtension) &&
        Objects.equals(this.sourceSipId, callLog.sourceSipId) &&
        Objects.equals(this.sourceUser, callLog.sourceUser) &&
        Objects.equals(this.sourceUserFullName, callLog.sourceUserFullName) &&
        Objects.equals(this.start, callLog.start) &&
        Objects.equals(this.to, callLog.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charge, destinationDeviceName, destinationExtension, destinationSipId, destinationUser, destinationUserFullName, direction, end, from, id, inNetwork, international, length, rate, recorded, result, sourceDeviceName, sourceExtension, sourceSipId, sourceUser, sourceUserFullName, start, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallLog {\n");
    sb.append("    charge: ").append(toIndentedString(charge)).append("\n");
    sb.append("    destinationDeviceName: ").append(toIndentedString(destinationDeviceName)).append("\n");
    sb.append("    destinationExtension: ").append(toIndentedString(destinationExtension)).append("\n");
    sb.append("    destinationSipId: ").append(toIndentedString(destinationSipId)).append("\n");
    sb.append("    destinationUser: ").append(toIndentedString(destinationUser)).append("\n");
    sb.append("    destinationUserFullName: ").append(toIndentedString(destinationUserFullName)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inNetwork: ").append(toIndentedString(inNetwork)).append("\n");
    sb.append("    international: ").append(toIndentedString(international)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    recorded: ").append(toIndentedString(recorded)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    sourceDeviceName: ").append(toIndentedString(sourceDeviceName)).append("\n");
    sb.append("    sourceExtension: ").append(toIndentedString(sourceExtension)).append("\n");
    sb.append("    sourceSipId: ").append(toIndentedString(sourceSipId)).append("\n");
    sb.append("    sourceUser: ").append(toIndentedString(sourceUser)).append("\n");
    sb.append("    sourceUserFullName: ").append(toIndentedString(sourceUserFullName)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charge");
    openapiFields.add("destination_device_name");
    openapiFields.add("destination_extension");
    openapiFields.add("destination_sip_id");
    openapiFields.add("destination_user");
    openapiFields.add("destination_user_full_name");
    openapiFields.add("direction");
    openapiFields.add("end");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("in_network");
    openapiFields.add("international");
    openapiFields.add("length");
    openapiFields.add("rate");
    openapiFields.add("recorded");
    openapiFields.add("result");
    openapiFields.add("source_device_name");
    openapiFields.add("source_extension");
    openapiFields.add("source_sip_id");
    openapiFields.add("source_user");
    openapiFields.add("source_user_full_name");
    openapiFields.add("start");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallLog is not found in the empty JSON string", CallLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination_device_name") != null && !jsonObj.get("destination_device_name").isJsonNull()) && !jsonObj.get("destination_device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_device_name").toString()));
      }
      if ((jsonObj.get("destination_sip_id") != null && !jsonObj.get("destination_sip_id").isJsonNull()) && !jsonObj.get("destination_sip_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_sip_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_sip_id").toString()));
      }
      if ((jsonObj.get("destination_user") != null && !jsonObj.get("destination_user").isJsonNull()) && !jsonObj.get("destination_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_user").toString()));
      }
      if ((jsonObj.get("destination_user_full_name") != null && !jsonObj.get("destination_user_full_name").isJsonNull()) && !jsonObj.get("destination_user_full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_user_full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_user_full_name").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) && !jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("source_device_name") != null && !jsonObj.get("source_device_name").isJsonNull()) && !jsonObj.get("source_device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_device_name").toString()));
      }
      if ((jsonObj.get("source_sip_id") != null && !jsonObj.get("source_sip_id").isJsonNull()) && !jsonObj.get("source_sip_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_sip_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_sip_id").toString()));
      }
      if ((jsonObj.get("source_user") != null && !jsonObj.get("source_user").isJsonNull()) && !jsonObj.get("source_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_user").toString()));
      }
      if ((jsonObj.get("source_user_full_name") != null && !jsonObj.get("source_user_full_name").isJsonNull()) && !jsonObj.get("source_user_full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_user_full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_user_full_name").toString()));
      }
      if ((jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) && !jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallLog.class));

       return (TypeAdapter<T>) new TypeAdapter<CallLog>() {
           @Override
           public void write(JsonWriter out, CallLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallLog
   * @throws IOException if the JSON string is invalid with respect to CallLog
   */
  public static CallLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallLog.class);
  }

  /**
   * Convert an instance of CallLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

