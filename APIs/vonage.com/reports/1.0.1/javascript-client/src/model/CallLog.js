/**
 * Reports API
 * The Vonage Business Cloud Reports API enables you to retrieve call logs for your account.  Your application must subscribe to the Reports API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallLog model module.
 * @module model/CallLog
 * @version 1.0.1
 */
class CallLog {
    /**
     * Constructs a new <code>CallLog</code>.
     * @alias module:model/CallLog
     */
    constructor() { 
        
        CallLog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallLog} obj Optional instance to populate.
     * @return {module:model/CallLog} The populated <code>CallLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallLog();

            if (data.hasOwnProperty('charge')) {
                obj['charge'] = ApiClient.convertToType(data['charge'], 'Number');
            }
            if (data.hasOwnProperty('destination_device_name')) {
                obj['destination_device_name'] = ApiClient.convertToType(data['destination_device_name'], 'String');
            }
            if (data.hasOwnProperty('destination_extension')) {
                obj['destination_extension'] = ApiClient.convertToType(data['destination_extension'], 'Number');
            }
            if (data.hasOwnProperty('destination_sip_id')) {
                obj['destination_sip_id'] = ApiClient.convertToType(data['destination_sip_id'], 'String');
            }
            if (data.hasOwnProperty('destination_user')) {
                obj['destination_user'] = ApiClient.convertToType(data['destination_user'], 'String');
            }
            if (data.hasOwnProperty('destination_user_full_name')) {
                obj['destination_user_full_name'] = ApiClient.convertToType(data['destination_user_full_name'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('in_network')) {
                obj['in_network'] = ApiClient.convertToType(data['in_network'], 'Boolean');
            }
            if (data.hasOwnProperty('international')) {
                obj['international'] = ApiClient.convertToType(data['international'], 'Boolean');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('recorded')) {
                obj['recorded'] = ApiClient.convertToType(data['recorded'], 'Boolean');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('source_device_name')) {
                obj['source_device_name'] = ApiClient.convertToType(data['source_device_name'], 'String');
            }
            if (data.hasOwnProperty('source_extension')) {
                obj['source_extension'] = ApiClient.convertToType(data['source_extension'], 'Number');
            }
            if (data.hasOwnProperty('source_sip_id')) {
                obj['source_sip_id'] = ApiClient.convertToType(data['source_sip_id'], 'String');
            }
            if (data.hasOwnProperty('source_user')) {
                obj['source_user'] = ApiClient.convertToType(data['source_user'], 'String');
            }
            if (data.hasOwnProperty('source_user_full_name')) {
                obj['source_user_full_name'] = ApiClient.convertToType(data['source_user_full_name'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallLog</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destination_device_name'] && !(typeof data['destination_device_name'] === 'string' || data['destination_device_name'] instanceof String)) {
            throw new Error("Expected the field `destination_device_name` to be a primitive type in the JSON string but got " + data['destination_device_name']);
        }
        // ensure the json data is a string
        if (data['destination_sip_id'] && !(typeof data['destination_sip_id'] === 'string' || data['destination_sip_id'] instanceof String)) {
            throw new Error("Expected the field `destination_sip_id` to be a primitive type in the JSON string but got " + data['destination_sip_id']);
        }
        // ensure the json data is a string
        if (data['destination_user'] && !(typeof data['destination_user'] === 'string' || data['destination_user'] instanceof String)) {
            throw new Error("Expected the field `destination_user` to be a primitive type in the JSON string but got " + data['destination_user']);
        }
        // ensure the json data is a string
        if (data['destination_user_full_name'] && !(typeof data['destination_user_full_name'] === 'string' || data['destination_user_full_name'] instanceof String)) {
            throw new Error("Expected the field `destination_user_full_name` to be a primitive type in the JSON string but got " + data['destination_user_full_name']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['source_device_name'] && !(typeof data['source_device_name'] === 'string' || data['source_device_name'] instanceof String)) {
            throw new Error("Expected the field `source_device_name` to be a primitive type in the JSON string but got " + data['source_device_name']);
        }
        // ensure the json data is a string
        if (data['source_sip_id'] && !(typeof data['source_sip_id'] === 'string' || data['source_sip_id'] instanceof String)) {
            throw new Error("Expected the field `source_sip_id` to be a primitive type in the JSON string but got " + data['source_sip_id']);
        }
        // ensure the json data is a string
        if (data['source_user'] && !(typeof data['source_user'] === 'string' || data['source_user'] instanceof String)) {
            throw new Error("Expected the field `source_user` to be a primitive type in the JSON string but got " + data['source_user']);
        }
        // ensure the json data is a string
        if (data['source_user_full_name'] && !(typeof data['source_user_full_name'] === 'string' || data['source_user_full_name'] instanceof String)) {
            throw new Error("Expected the field `source_user_full_name` to be a primitive type in the JSON string but got " + data['source_user_full_name']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * Amount charged for the call
 * @member {Number} charge
 */
CallLog.prototype['charge'] = undefined;

/**
 * Name of the destination device of the call
 * @member {String} destination_device_name
 */
CallLog.prototype['destination_device_name'] = undefined;

/**
 * Destination extension of the call
 * @member {Number} destination_extension
 */
CallLog.prototype['destination_extension'] = undefined;

/**
 * SIP ID of the destination device of the call
 * @member {String} destination_sip_id
 */
CallLog.prototype['destination_sip_id'] = undefined;

/**
 * Destination user of the call
 * @member {String} destination_user
 */
CallLog.prototype['destination_user'] = undefined;

/**
 * Full name of the destination user of the call
 * @member {String} destination_user_full_name
 */
CallLog.prototype['destination_user_full_name'] = undefined;

/**
 * Direction of the call
 * @member {String} direction
 */
CallLog.prototype['direction'] = undefined;

/**
 * End time of the call
 * @member {String} end
 */
CallLog.prototype['end'] = undefined;

/**
 * Source number of the call
 * @member {String} from
 */
CallLog.prototype['from'] = undefined;

/**
 * Unique identifier of the call
 * @member {String} id
 */
CallLog.prototype['id'] = undefined;

/**
 * Indicates if call was on/off network
 * @member {Boolean} in_network
 */
CallLog.prototype['in_network'] = undefined;

/**
 * Indicates if call was international
 * @member {Boolean} international
 */
CallLog.prototype['international'] = undefined;

/**
 * Duration of the call in seconds
 * @member {Number} length
 */
CallLog.prototype['length'] = undefined;

/**
 * Rate charged for the call
 * @member {Number} rate
 */
CallLog.prototype['rate'] = undefined;

/**
 * Indicates if call was recorded
 * @member {Boolean} recorded
 */
CallLog.prototype['recorded'] = undefined;

/**
 * Result of the call
 * @member {String} result
 */
CallLog.prototype['result'] = undefined;

/**
 * Name of the source device of the call
 * @member {String} source_device_name
 */
CallLog.prototype['source_device_name'] = undefined;

/**
 * Source extension of the call
 * @member {Number} source_extension
 */
CallLog.prototype['source_extension'] = undefined;

/**
 * SIP ID of the source device of the call
 * @member {String} source_sip_id
 */
CallLog.prototype['source_sip_id'] = undefined;

/**
 * Source user of the call
 * @member {String} source_user
 */
CallLog.prototype['source_user'] = undefined;

/**
 * Full name of the source user of the call
 * @member {String} source_user_full_name
 */
CallLog.prototype['source_user_full_name'] = undefined;

/**
 * Start time of the call
 * @member {String} start
 */
CallLog.prototype['start'] = undefined;

/**
 * Destination number of the call
 * @member {String} to
 */
CallLog.prototype['to'] = undefined;






export default CallLog;

