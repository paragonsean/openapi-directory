/**
 * Reports API
 * The Vonage Business Cloud Reports API enables you to retrieve call logs for your account.  Your application must subscribe to the Reports API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallLog::OAICallLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallLog::OAICallLog() {
    this->initializeModel();
}

OAICallLog::~OAICallLog() {}

void OAICallLog::initializeModel() {

    m_charge_isSet = false;
    m_charge_isValid = false;

    m_destination_device_name_isSet = false;
    m_destination_device_name_isValid = false;

    m_destination_extension_isSet = false;
    m_destination_extension_isValid = false;

    m_destination_sip_id_isSet = false;
    m_destination_sip_id_isValid = false;

    m_destination_user_isSet = false;
    m_destination_user_isValid = false;

    m_destination_user_full_name_isSet = false;
    m_destination_user_full_name_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_network_isSet = false;
    m_in_network_isValid = false;

    m_international_isSet = false;
    m_international_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_recorded_isSet = false;
    m_recorded_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_source_device_name_isSet = false;
    m_source_device_name_isValid = false;

    m_source_extension_isSet = false;
    m_source_extension_isValid = false;

    m_source_sip_id_isSet = false;
    m_source_sip_id_isValid = false;

    m_source_user_isSet = false;
    m_source_user_isValid = false;

    m_source_user_full_name_isSet = false;
    m_source_user_full_name_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAICallLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallLog::fromJsonObject(QJsonObject json) {

    m_charge_isValid = ::OpenAPI::fromJsonValue(m_charge, json[QString("charge")]);
    m_charge_isSet = !json[QString("charge")].isNull() && m_charge_isValid;

    m_destination_device_name_isValid = ::OpenAPI::fromJsonValue(m_destination_device_name, json[QString("destination_device_name")]);
    m_destination_device_name_isSet = !json[QString("destination_device_name")].isNull() && m_destination_device_name_isValid;

    m_destination_extension_isValid = ::OpenAPI::fromJsonValue(m_destination_extension, json[QString("destination_extension")]);
    m_destination_extension_isSet = !json[QString("destination_extension")].isNull() && m_destination_extension_isValid;

    m_destination_sip_id_isValid = ::OpenAPI::fromJsonValue(m_destination_sip_id, json[QString("destination_sip_id")]);
    m_destination_sip_id_isSet = !json[QString("destination_sip_id")].isNull() && m_destination_sip_id_isValid;

    m_destination_user_isValid = ::OpenAPI::fromJsonValue(m_destination_user, json[QString("destination_user")]);
    m_destination_user_isSet = !json[QString("destination_user")].isNull() && m_destination_user_isValid;

    m_destination_user_full_name_isValid = ::OpenAPI::fromJsonValue(m_destination_user_full_name, json[QString("destination_user_full_name")]);
    m_destination_user_full_name_isSet = !json[QString("destination_user_full_name")].isNull() && m_destination_user_full_name_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_network_isValid = ::OpenAPI::fromJsonValue(m_in_network, json[QString("in_network")]);
    m_in_network_isSet = !json[QString("in_network")].isNull() && m_in_network_isValid;

    m_international_isValid = ::OpenAPI::fromJsonValue(m_international, json[QString("international")]);
    m_international_isSet = !json[QString("international")].isNull() && m_international_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_recorded_isValid = ::OpenAPI::fromJsonValue(m_recorded, json[QString("recorded")]);
    m_recorded_isSet = !json[QString("recorded")].isNull() && m_recorded_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_source_device_name_isValid = ::OpenAPI::fromJsonValue(m_source_device_name, json[QString("source_device_name")]);
    m_source_device_name_isSet = !json[QString("source_device_name")].isNull() && m_source_device_name_isValid;

    m_source_extension_isValid = ::OpenAPI::fromJsonValue(m_source_extension, json[QString("source_extension")]);
    m_source_extension_isSet = !json[QString("source_extension")].isNull() && m_source_extension_isValid;

    m_source_sip_id_isValid = ::OpenAPI::fromJsonValue(m_source_sip_id, json[QString("source_sip_id")]);
    m_source_sip_id_isSet = !json[QString("source_sip_id")].isNull() && m_source_sip_id_isValid;

    m_source_user_isValid = ::OpenAPI::fromJsonValue(m_source_user, json[QString("source_user")]);
    m_source_user_isSet = !json[QString("source_user")].isNull() && m_source_user_isValid;

    m_source_user_full_name_isValid = ::OpenAPI::fromJsonValue(m_source_user_full_name, json[QString("source_user_full_name")]);
    m_source_user_full_name_isSet = !json[QString("source_user_full_name")].isNull() && m_source_user_full_name_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAICallLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallLog::asJsonObject() const {
    QJsonObject obj;
    if (m_charge_isSet) {
        obj.insert(QString("charge"), ::OpenAPI::toJsonValue(m_charge));
    }
    if (m_destination_device_name_isSet) {
        obj.insert(QString("destination_device_name"), ::OpenAPI::toJsonValue(m_destination_device_name));
    }
    if (m_destination_extension_isSet) {
        obj.insert(QString("destination_extension"), ::OpenAPI::toJsonValue(m_destination_extension));
    }
    if (m_destination_sip_id_isSet) {
        obj.insert(QString("destination_sip_id"), ::OpenAPI::toJsonValue(m_destination_sip_id));
    }
    if (m_destination_user_isSet) {
        obj.insert(QString("destination_user"), ::OpenAPI::toJsonValue(m_destination_user));
    }
    if (m_destination_user_full_name_isSet) {
        obj.insert(QString("destination_user_full_name"), ::OpenAPI::toJsonValue(m_destination_user_full_name));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_network_isSet) {
        obj.insert(QString("in_network"), ::OpenAPI::toJsonValue(m_in_network));
    }
    if (m_international_isSet) {
        obj.insert(QString("international"), ::OpenAPI::toJsonValue(m_international));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_recorded_isSet) {
        obj.insert(QString("recorded"), ::OpenAPI::toJsonValue(m_recorded));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_source_device_name_isSet) {
        obj.insert(QString("source_device_name"), ::OpenAPI::toJsonValue(m_source_device_name));
    }
    if (m_source_extension_isSet) {
        obj.insert(QString("source_extension"), ::OpenAPI::toJsonValue(m_source_extension));
    }
    if (m_source_sip_id_isSet) {
        obj.insert(QString("source_sip_id"), ::OpenAPI::toJsonValue(m_source_sip_id));
    }
    if (m_source_user_isSet) {
        obj.insert(QString("source_user"), ::OpenAPI::toJsonValue(m_source_user));
    }
    if (m_source_user_full_name_isSet) {
        obj.insert(QString("source_user_full_name"), ::OpenAPI::toJsonValue(m_source_user_full_name));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

double OAICallLog::getCharge() const {
    return m_charge;
}
void OAICallLog::setCharge(const double &charge) {
    m_charge = charge;
    m_charge_isSet = true;
}

bool OAICallLog::is_charge_Set() const{
    return m_charge_isSet;
}

bool OAICallLog::is_charge_Valid() const{
    return m_charge_isValid;
}

QString OAICallLog::getDestinationDeviceName() const {
    return m_destination_device_name;
}
void OAICallLog::setDestinationDeviceName(const QString &destination_device_name) {
    m_destination_device_name = destination_device_name;
    m_destination_device_name_isSet = true;
}

bool OAICallLog::is_destination_device_name_Set() const{
    return m_destination_device_name_isSet;
}

bool OAICallLog::is_destination_device_name_Valid() const{
    return m_destination_device_name_isValid;
}

double OAICallLog::getDestinationExtension() const {
    return m_destination_extension;
}
void OAICallLog::setDestinationExtension(const double &destination_extension) {
    m_destination_extension = destination_extension;
    m_destination_extension_isSet = true;
}

bool OAICallLog::is_destination_extension_Set() const{
    return m_destination_extension_isSet;
}

bool OAICallLog::is_destination_extension_Valid() const{
    return m_destination_extension_isValid;
}

QString OAICallLog::getDestinationSipId() const {
    return m_destination_sip_id;
}
void OAICallLog::setDestinationSipId(const QString &destination_sip_id) {
    m_destination_sip_id = destination_sip_id;
    m_destination_sip_id_isSet = true;
}

bool OAICallLog::is_destination_sip_id_Set() const{
    return m_destination_sip_id_isSet;
}

bool OAICallLog::is_destination_sip_id_Valid() const{
    return m_destination_sip_id_isValid;
}

QString OAICallLog::getDestinationUser() const {
    return m_destination_user;
}
void OAICallLog::setDestinationUser(const QString &destination_user) {
    m_destination_user = destination_user;
    m_destination_user_isSet = true;
}

bool OAICallLog::is_destination_user_Set() const{
    return m_destination_user_isSet;
}

bool OAICallLog::is_destination_user_Valid() const{
    return m_destination_user_isValid;
}

QString OAICallLog::getDestinationUserFullName() const {
    return m_destination_user_full_name;
}
void OAICallLog::setDestinationUserFullName(const QString &destination_user_full_name) {
    m_destination_user_full_name = destination_user_full_name;
    m_destination_user_full_name_isSet = true;
}

bool OAICallLog::is_destination_user_full_name_Set() const{
    return m_destination_user_full_name_isSet;
}

bool OAICallLog::is_destination_user_full_name_Valid() const{
    return m_destination_user_full_name_isValid;
}

QString OAICallLog::getDirection() const {
    return m_direction;
}
void OAICallLog::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICallLog::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICallLog::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAICallLog::getEnd() const {
    return m_end;
}
void OAICallLog::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAICallLog::is_end_Set() const{
    return m_end_isSet;
}

bool OAICallLog::is_end_Valid() const{
    return m_end_isValid;
}

QString OAICallLog::getFrom() const {
    return m_from;
}
void OAICallLog::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICallLog::is_from_Set() const{
    return m_from_isSet;
}

bool OAICallLog::is_from_Valid() const{
    return m_from_isValid;
}

QString OAICallLog::getId() const {
    return m_id;
}
void OAICallLog::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICallLog::is_id_Set() const{
    return m_id_isSet;
}

bool OAICallLog::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICallLog::isInNetwork() const {
    return m_in_network;
}
void OAICallLog::setInNetwork(const bool &in_network) {
    m_in_network = in_network;
    m_in_network_isSet = true;
}

bool OAICallLog::is_in_network_Set() const{
    return m_in_network_isSet;
}

bool OAICallLog::is_in_network_Valid() const{
    return m_in_network_isValid;
}

bool OAICallLog::isInternational() const {
    return m_international;
}
void OAICallLog::setInternational(const bool &international) {
    m_international = international;
    m_international_isSet = true;
}

bool OAICallLog::is_international_Set() const{
    return m_international_isSet;
}

bool OAICallLog::is_international_Valid() const{
    return m_international_isValid;
}

double OAICallLog::getLength() const {
    return m_length;
}
void OAICallLog::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAICallLog::is_length_Set() const{
    return m_length_isSet;
}

bool OAICallLog::is_length_Valid() const{
    return m_length_isValid;
}

double OAICallLog::getRate() const {
    return m_rate;
}
void OAICallLog::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICallLog::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICallLog::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAICallLog::isRecorded() const {
    return m_recorded;
}
void OAICallLog::setRecorded(const bool &recorded) {
    m_recorded = recorded;
    m_recorded_isSet = true;
}

bool OAICallLog::is_recorded_Set() const{
    return m_recorded_isSet;
}

bool OAICallLog::is_recorded_Valid() const{
    return m_recorded_isValid;
}

QString OAICallLog::getResult() const {
    return m_result;
}
void OAICallLog::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAICallLog::is_result_Set() const{
    return m_result_isSet;
}

bool OAICallLog::is_result_Valid() const{
    return m_result_isValid;
}

QString OAICallLog::getSourceDeviceName() const {
    return m_source_device_name;
}
void OAICallLog::setSourceDeviceName(const QString &source_device_name) {
    m_source_device_name = source_device_name;
    m_source_device_name_isSet = true;
}

bool OAICallLog::is_source_device_name_Set() const{
    return m_source_device_name_isSet;
}

bool OAICallLog::is_source_device_name_Valid() const{
    return m_source_device_name_isValid;
}

double OAICallLog::getSourceExtension() const {
    return m_source_extension;
}
void OAICallLog::setSourceExtension(const double &source_extension) {
    m_source_extension = source_extension;
    m_source_extension_isSet = true;
}

bool OAICallLog::is_source_extension_Set() const{
    return m_source_extension_isSet;
}

bool OAICallLog::is_source_extension_Valid() const{
    return m_source_extension_isValid;
}

QString OAICallLog::getSourceSipId() const {
    return m_source_sip_id;
}
void OAICallLog::setSourceSipId(const QString &source_sip_id) {
    m_source_sip_id = source_sip_id;
    m_source_sip_id_isSet = true;
}

bool OAICallLog::is_source_sip_id_Set() const{
    return m_source_sip_id_isSet;
}

bool OAICallLog::is_source_sip_id_Valid() const{
    return m_source_sip_id_isValid;
}

QString OAICallLog::getSourceUser() const {
    return m_source_user;
}
void OAICallLog::setSourceUser(const QString &source_user) {
    m_source_user = source_user;
    m_source_user_isSet = true;
}

bool OAICallLog::is_source_user_Set() const{
    return m_source_user_isSet;
}

bool OAICallLog::is_source_user_Valid() const{
    return m_source_user_isValid;
}

QString OAICallLog::getSourceUserFullName() const {
    return m_source_user_full_name;
}
void OAICallLog::setSourceUserFullName(const QString &source_user_full_name) {
    m_source_user_full_name = source_user_full_name;
    m_source_user_full_name_isSet = true;
}

bool OAICallLog::is_source_user_full_name_Set() const{
    return m_source_user_full_name_isSet;
}

bool OAICallLog::is_source_user_full_name_Valid() const{
    return m_source_user_full_name_isValid;
}

QString OAICallLog::getStart() const {
    return m_start;
}
void OAICallLog::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAICallLog::is_start_Set() const{
    return m_start_isSet;
}

bool OAICallLog::is_start_Valid() const{
    return m_start_isValid;
}

QString OAICallLog::getTo() const {
    return m_to;
}
void OAICallLog::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICallLog::is_to_Set() const{
    return m_to_isSet;
}

bool OAICallLog::is_to_Valid() const{
    return m_to_isValid;
}

bool OAICallLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_sip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_user_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recorded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_sip_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_user_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
