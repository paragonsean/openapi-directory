/*
 * Extension API
 * The Vonage Business Cloud Extension API enables you to retrieve information about extensions.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BasicUser;
import org.openapitools.client.model.DID;
import org.openapitools.client.model.Line;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndUserRoute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:45.526925-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndUserRoute {
  public static final String SERIALIZED_NAME_BLOCK_CALLER_ID = "block_caller_id";
  @SerializedName(SERIALIZED_NAME_BLOCK_CALLER_ID)
  private Boolean blockCallerId;

  public static final String SERIALIZED_NAME_CALLER_ID = "caller_id";
  @SerializedName(SERIALIZED_NAME_CALLER_ID)
  private String callerId;

  public static final String SERIALIZED_NAME_DIDS = "dids";
  @SerializedName(SERIALIZED_NAME_DIDS)
  private List<DID> dids = new ArrayList<>();

  public static final String SERIALIZED_NAME_DND_ENABLED = "dnd_enabled";
  @SerializedName(SERIALIZED_NAME_DND_ENABLED)
  private Boolean dndEnabled;

  public static final String SERIALIZED_NAME_EXTENSION_HANDSETS = "extension_handsets";
  @SerializedName(SERIALIZED_NAME_EXTENSION_HANDSETS)
  private List<Line> extensionHandsets = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_NUMBER = "extension_number";
  @SerializedName(SERIALIZED_NAME_EXTENSION_NUMBER)
  private String extensionNumber;

  public static final String SERIALIZED_NAME_LOCATION_ID = "location_id";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private BigDecimal locationId;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private BasicUser user;

  public static final String SERIALIZED_NAME_VTT_ENABLED = "vtt_enabled";
  @SerializedName(SERIALIZED_NAME_VTT_ENABLED)
  private Boolean vttEnabled;

  public EndUserRoute() {
  }

  public EndUserRoute blockCallerId(Boolean blockCallerId) {
    this.blockCallerId = blockCallerId;
    return this;
  }

  /**
   * Block Caller ID status of the extension
   * @return blockCallerId
   */
  @javax.annotation.Nullable
  public Boolean getBlockCallerId() {
    return blockCallerId;
  }

  public void setBlockCallerId(Boolean blockCallerId) {
    this.blockCallerId = blockCallerId;
  }


  public EndUserRoute callerId(String callerId) {
    this.callerId = callerId;
    return this;
  }

  /**
   * Caller ID of the extension
   * @return callerId
   */
  @javax.annotation.Nullable
  public String getCallerId() {
    return callerId;
  }

  public void setCallerId(String callerId) {
    this.callerId = callerId;
  }


  public EndUserRoute dids(List<DID> dids) {
    this.dids = dids;
    return this;
  }

  public EndUserRoute addDidsItem(DID didsItem) {
    if (this.dids == null) {
      this.dids = new ArrayList<>();
    }
    this.dids.add(didsItem);
    return this;
  }

  /**
   * Collection of phone numbers assigned to the extension
   * @return dids
   */
  @javax.annotation.Nullable
  public List<DID> getDids() {
    return dids;
  }

  public void setDids(List<DID> dids) {
    this.dids = dids;
  }


  public EndUserRoute dndEnabled(Boolean dndEnabled) {
    this.dndEnabled = dndEnabled;
    return this;
  }

  /**
   * Do Not Disturb status of the extension
   * @return dndEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDndEnabled() {
    return dndEnabled;
  }

  public void setDndEnabled(Boolean dndEnabled) {
    this.dndEnabled = dndEnabled;
  }


  public EndUserRoute extensionHandsets(List<Line> extensionHandsets) {
    this.extensionHandsets = extensionHandsets;
    return this;
  }

  public EndUserRoute addExtensionHandsetsItem(Line extensionHandsetsItem) {
    if (this.extensionHandsets == null) {
      this.extensionHandsets = new ArrayList<>();
    }
    this.extensionHandsets.add(extensionHandsetsItem);
    return this;
  }

  /**
   * Collection of handsets assigned to the extension
   * @return extensionHandsets
   */
  @javax.annotation.Nullable
  public List<Line> getExtensionHandsets() {
    return extensionHandsets;
  }

  public void setExtensionHandsets(List<Line> extensionHandsets) {
    this.extensionHandsets = extensionHandsets;
  }


  public EndUserRoute extensionNumber(String extensionNumber) {
    this.extensionNumber = extensionNumber;
    return this;
  }

  /**
   * Extension number
   * @return extensionNumber
   */
  @javax.annotation.Nullable
  public String getExtensionNumber() {
    return extensionNumber;
  }

  public void setExtensionNumber(String extensionNumber) {
    this.extensionNumber = extensionNumber;
  }


  public EndUserRoute locationId(BigDecimal locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Unique identifier of the assigned location
   * @return locationId
   */
  @javax.annotation.Nullable
  public BigDecimal getLocationId() {
    return locationId;
  }

  public void setLocationId(BigDecimal locationId) {
    this.locationId = locationId;
  }


  public EndUserRoute user(BasicUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public BasicUser getUser() {
    return user;
  }

  public void setUser(BasicUser user) {
    this.user = user;
  }


  public EndUserRoute vttEnabled(Boolean vttEnabled) {
    this.vttEnabled = vttEnabled;
    return this;
  }

  /**
   * Voicemail transcription status of the location
   * @return vttEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVttEnabled() {
    return vttEnabled;
  }

  public void setVttEnabled(Boolean vttEnabled) {
    this.vttEnabled = vttEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndUserRoute endUserRoute = (EndUserRoute) o;
    return Objects.equals(this.blockCallerId, endUserRoute.blockCallerId) &&
        Objects.equals(this.callerId, endUserRoute.callerId) &&
        Objects.equals(this.dids, endUserRoute.dids) &&
        Objects.equals(this.dndEnabled, endUserRoute.dndEnabled) &&
        Objects.equals(this.extensionHandsets, endUserRoute.extensionHandsets) &&
        Objects.equals(this.extensionNumber, endUserRoute.extensionNumber) &&
        Objects.equals(this.locationId, endUserRoute.locationId) &&
        Objects.equals(this.user, endUserRoute.user) &&
        Objects.equals(this.vttEnabled, endUserRoute.vttEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockCallerId, callerId, dids, dndEnabled, extensionHandsets, extensionNumber, locationId, user, vttEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndUserRoute {\n");
    sb.append("    blockCallerId: ").append(toIndentedString(blockCallerId)).append("\n");
    sb.append("    callerId: ").append(toIndentedString(callerId)).append("\n");
    sb.append("    dids: ").append(toIndentedString(dids)).append("\n");
    sb.append("    dndEnabled: ").append(toIndentedString(dndEnabled)).append("\n");
    sb.append("    extensionHandsets: ").append(toIndentedString(extensionHandsets)).append("\n");
    sb.append("    extensionNumber: ").append(toIndentedString(extensionNumber)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vttEnabled: ").append(toIndentedString(vttEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_caller_id");
    openapiFields.add("caller_id");
    openapiFields.add("dids");
    openapiFields.add("dnd_enabled");
    openapiFields.add("extension_handsets");
    openapiFields.add("extension_number");
    openapiFields.add("location_id");
    openapiFields.add("user");
    openapiFields.add("vtt_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndUserRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndUserRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndUserRoute is not found in the empty JSON string", EndUserRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndUserRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndUserRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caller_id") != null && !jsonObj.get("caller_id").isJsonNull()) && !jsonObj.get("caller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller_id").toString()));
      }
      if (jsonObj.get("dids") != null && !jsonObj.get("dids").isJsonNull()) {
        JsonArray jsonArraydids = jsonObj.getAsJsonArray("dids");
        if (jsonArraydids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dids` to be an array in the JSON string but got `%s`", jsonObj.get("dids").toString()));
          }

          // validate the optional field `dids` (array)
          for (int i = 0; i < jsonArraydids.size(); i++) {
            DID.validateJsonElement(jsonArraydids.get(i));
          };
        }
      }
      if (jsonObj.get("extension_handsets") != null && !jsonObj.get("extension_handsets").isJsonNull()) {
        JsonArray jsonArrayextensionHandsets = jsonObj.getAsJsonArray("extension_handsets");
        if (jsonArrayextensionHandsets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extension_handsets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extension_handsets` to be an array in the JSON string but got `%s`", jsonObj.get("extension_handsets").toString()));
          }

          // validate the optional field `extension_handsets` (array)
          for (int i = 0; i < jsonArrayextensionHandsets.size(); i++) {
            Line.validateJsonElement(jsonArrayextensionHandsets.get(i));
          };
        }
      }
      if ((jsonObj.get("extension_number") != null && !jsonObj.get("extension_number").isJsonNull()) && !jsonObj.get("extension_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension_number").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        BasicUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndUserRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndUserRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndUserRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndUserRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<EndUserRoute>() {
           @Override
           public void write(JsonWriter out, EndUserRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndUserRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndUserRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndUserRoute
   * @throws IOException if the JSON string is invalid with respect to EndUserRoute
   */
  public static EndUserRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndUserRoute.class);
  }

  /**
   * Convert an instance of EndUserRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

