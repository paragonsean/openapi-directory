# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_user import BasicUser
from openapi_server.models.did import DID
from openapi_server.models.line import Line
from openapi_server import util


class EndUserRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_caller_id: bool=None, caller_id: str=None, dids: List[DID]=None, dnd_enabled: bool=None, extension_handsets: List[Line]=None, extension_number: str=None, location_id: float=None, user: BasicUser=None, vtt_enabled: bool=None):
        """EndUserRoute - a model defined in OpenAPI

        :param block_caller_id: The block_caller_id of this EndUserRoute.
        :param caller_id: The caller_id of this EndUserRoute.
        :param dids: The dids of this EndUserRoute.
        :param dnd_enabled: The dnd_enabled of this EndUserRoute.
        :param extension_handsets: The extension_handsets of this EndUserRoute.
        :param extension_number: The extension_number of this EndUserRoute.
        :param location_id: The location_id of this EndUserRoute.
        :param user: The user of this EndUserRoute.
        :param vtt_enabled: The vtt_enabled of this EndUserRoute.
        """
        self.openapi_types = {
            'block_caller_id': bool,
            'caller_id': str,
            'dids': List[DID],
            'dnd_enabled': bool,
            'extension_handsets': List[Line],
            'extension_number': str,
            'location_id': float,
            'user': BasicUser,
            'vtt_enabled': bool
        }

        self.attribute_map = {
            'block_caller_id': 'block_caller_id',
            'caller_id': 'caller_id',
            'dids': 'dids',
            'dnd_enabled': 'dnd_enabled',
            'extension_handsets': 'extension_handsets',
            'extension_number': 'extension_number',
            'location_id': 'location_id',
            'user': 'user',
            'vtt_enabled': 'vtt_enabled'
        }

        self._block_caller_id = block_caller_id
        self._caller_id = caller_id
        self._dids = dids
        self._dnd_enabled = dnd_enabled
        self._extension_handsets = extension_handsets
        self._extension_number = extension_number
        self._location_id = location_id
        self._user = user
        self._vtt_enabled = vtt_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndUserRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndUserRoute of this EndUserRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_caller_id(self):
        """Gets the block_caller_id of this EndUserRoute.

        Block Caller ID status of the extension

        :return: The block_caller_id of this EndUserRoute.
        :rtype: bool
        """
        return self._block_caller_id

    @block_caller_id.setter
    def block_caller_id(self, block_caller_id):
        """Sets the block_caller_id of this EndUserRoute.

        Block Caller ID status of the extension

        :param block_caller_id: The block_caller_id of this EndUserRoute.
        :type block_caller_id: bool
        """

        self._block_caller_id = block_caller_id

    @property
    def caller_id(self):
        """Gets the caller_id of this EndUserRoute.

        Caller ID of the extension

        :return: The caller_id of this EndUserRoute.
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this EndUserRoute.

        Caller ID of the extension

        :param caller_id: The caller_id of this EndUserRoute.
        :type caller_id: str
        """

        self._caller_id = caller_id

    @property
    def dids(self):
        """Gets the dids of this EndUserRoute.

        Collection of phone numbers assigned to the extension

        :return: The dids of this EndUserRoute.
        :rtype: List[DID]
        """
        return self._dids

    @dids.setter
    def dids(self, dids):
        """Sets the dids of this EndUserRoute.

        Collection of phone numbers assigned to the extension

        :param dids: The dids of this EndUserRoute.
        :type dids: List[DID]
        """

        self._dids = dids

    @property
    def dnd_enabled(self):
        """Gets the dnd_enabled of this EndUserRoute.

        Do Not Disturb status of the extension

        :return: The dnd_enabled of this EndUserRoute.
        :rtype: bool
        """
        return self._dnd_enabled

    @dnd_enabled.setter
    def dnd_enabled(self, dnd_enabled):
        """Sets the dnd_enabled of this EndUserRoute.

        Do Not Disturb status of the extension

        :param dnd_enabled: The dnd_enabled of this EndUserRoute.
        :type dnd_enabled: bool
        """

        self._dnd_enabled = dnd_enabled

    @property
    def extension_handsets(self):
        """Gets the extension_handsets of this EndUserRoute.

        Collection of handsets assigned to the extension

        :return: The extension_handsets of this EndUserRoute.
        :rtype: List[Line]
        """
        return self._extension_handsets

    @extension_handsets.setter
    def extension_handsets(self, extension_handsets):
        """Sets the extension_handsets of this EndUserRoute.

        Collection of handsets assigned to the extension

        :param extension_handsets: The extension_handsets of this EndUserRoute.
        :type extension_handsets: List[Line]
        """

        self._extension_handsets = extension_handsets

    @property
    def extension_number(self):
        """Gets the extension_number of this EndUserRoute.

        Extension number

        :return: The extension_number of this EndUserRoute.
        :rtype: str
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this EndUserRoute.

        Extension number

        :param extension_number: The extension_number of this EndUserRoute.
        :type extension_number: str
        """

        self._extension_number = extension_number

    @property
    def location_id(self):
        """Gets the location_id of this EndUserRoute.

        Unique identifier of the assigned location

        :return: The location_id of this EndUserRoute.
        :rtype: float
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EndUserRoute.

        Unique identifier of the assigned location

        :param location_id: The location_id of this EndUserRoute.
        :type location_id: float
        """

        self._location_id = location_id

    @property
    def user(self):
        """Gets the user of this EndUserRoute.


        :return: The user of this EndUserRoute.
        :rtype: BasicUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EndUserRoute.


        :param user: The user of this EndUserRoute.
        :type user: BasicUser
        """

        self._user = user

    @property
    def vtt_enabled(self):
        """Gets the vtt_enabled of this EndUserRoute.

        Voicemail transcription status of the location

        :return: The vtt_enabled of this EndUserRoute.
        :rtype: bool
        """
        return self._vtt_enabled

    @vtt_enabled.setter
    def vtt_enabled(self, vtt_enabled):
        """Sets the vtt_enabled of this EndUserRoute.

        Voicemail transcription status of the location

        :param vtt_enabled: The vtt_enabled of this EndUserRoute.
        :type vtt_enabled: bool
        """

        self._vtt_enabled = vtt_enabled
