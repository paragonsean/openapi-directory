/**
 * Extension API
 * The Vonage Business Cloud Extension API enables you to retrieve information about extensions.  Your application must subscribe to the Provisioning API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.11.8
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndUserRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndUserRoute::OAIEndUserRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndUserRoute::OAIEndUserRoute() {
    this->initializeModel();
}

OAIEndUserRoute::~OAIEndUserRoute() {}

void OAIEndUserRoute::initializeModel() {

    m_block_caller_id_isSet = false;
    m_block_caller_id_isValid = false;

    m_caller_id_isSet = false;
    m_caller_id_isValid = false;

    m_dids_isSet = false;
    m_dids_isValid = false;

    m_dnd_enabled_isSet = false;
    m_dnd_enabled_isValid = false;

    m_extension_handsets_isSet = false;
    m_extension_handsets_isValid = false;

    m_extension_number_isSet = false;
    m_extension_number_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vtt_enabled_isSet = false;
    m_vtt_enabled_isValid = false;
}

void OAIEndUserRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndUserRoute::fromJsonObject(QJsonObject json) {

    m_block_caller_id_isValid = ::OpenAPI::fromJsonValue(m_block_caller_id, json[QString("block_caller_id")]);
    m_block_caller_id_isSet = !json[QString("block_caller_id")].isNull() && m_block_caller_id_isValid;

    m_caller_id_isValid = ::OpenAPI::fromJsonValue(m_caller_id, json[QString("caller_id")]);
    m_caller_id_isSet = !json[QString("caller_id")].isNull() && m_caller_id_isValid;

    m_dids_isValid = ::OpenAPI::fromJsonValue(m_dids, json[QString("dids")]);
    m_dids_isSet = !json[QString("dids")].isNull() && m_dids_isValid;

    m_dnd_enabled_isValid = ::OpenAPI::fromJsonValue(m_dnd_enabled, json[QString("dnd_enabled")]);
    m_dnd_enabled_isSet = !json[QString("dnd_enabled")].isNull() && m_dnd_enabled_isValid;

    m_extension_handsets_isValid = ::OpenAPI::fromJsonValue(m_extension_handsets, json[QString("extension_handsets")]);
    m_extension_handsets_isSet = !json[QString("extension_handsets")].isNull() && m_extension_handsets_isValid;

    m_extension_number_isValid = ::OpenAPI::fromJsonValue(m_extension_number, json[QString("extension_number")]);
    m_extension_number_isSet = !json[QString("extension_number")].isNull() && m_extension_number_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vtt_enabled_isValid = ::OpenAPI::fromJsonValue(m_vtt_enabled, json[QString("vtt_enabled")]);
    m_vtt_enabled_isSet = !json[QString("vtt_enabled")].isNull() && m_vtt_enabled_isValid;
}

QString OAIEndUserRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndUserRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_block_caller_id_isSet) {
        obj.insert(QString("block_caller_id"), ::OpenAPI::toJsonValue(m_block_caller_id));
    }
    if (m_caller_id_isSet) {
        obj.insert(QString("caller_id"), ::OpenAPI::toJsonValue(m_caller_id));
    }
    if (m_dids.size() > 0) {
        obj.insert(QString("dids"), ::OpenAPI::toJsonValue(m_dids));
    }
    if (m_dnd_enabled_isSet) {
        obj.insert(QString("dnd_enabled"), ::OpenAPI::toJsonValue(m_dnd_enabled));
    }
    if (m_extension_handsets.size() > 0) {
        obj.insert(QString("extension_handsets"), ::OpenAPI::toJsonValue(m_extension_handsets));
    }
    if (m_extension_number_isSet) {
        obj.insert(QString("extension_number"), ::OpenAPI::toJsonValue(m_extension_number));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vtt_enabled_isSet) {
        obj.insert(QString("vtt_enabled"), ::OpenAPI::toJsonValue(m_vtt_enabled));
    }
    return obj;
}

bool OAIEndUserRoute::isBlockCallerId() const {
    return m_block_caller_id;
}
void OAIEndUserRoute::setBlockCallerId(const bool &block_caller_id) {
    m_block_caller_id = block_caller_id;
    m_block_caller_id_isSet = true;
}

bool OAIEndUserRoute::is_block_caller_id_Set() const{
    return m_block_caller_id_isSet;
}

bool OAIEndUserRoute::is_block_caller_id_Valid() const{
    return m_block_caller_id_isValid;
}

QString OAIEndUserRoute::getCallerId() const {
    return m_caller_id;
}
void OAIEndUserRoute::setCallerId(const QString &caller_id) {
    m_caller_id = caller_id;
    m_caller_id_isSet = true;
}

bool OAIEndUserRoute::is_caller_id_Set() const{
    return m_caller_id_isSet;
}

bool OAIEndUserRoute::is_caller_id_Valid() const{
    return m_caller_id_isValid;
}

QList<OAIDID> OAIEndUserRoute::getDids() const {
    return m_dids;
}
void OAIEndUserRoute::setDids(const QList<OAIDID> &dids) {
    m_dids = dids;
    m_dids_isSet = true;
}

bool OAIEndUserRoute::is_dids_Set() const{
    return m_dids_isSet;
}

bool OAIEndUserRoute::is_dids_Valid() const{
    return m_dids_isValid;
}

bool OAIEndUserRoute::isDndEnabled() const {
    return m_dnd_enabled;
}
void OAIEndUserRoute::setDndEnabled(const bool &dnd_enabled) {
    m_dnd_enabled = dnd_enabled;
    m_dnd_enabled_isSet = true;
}

bool OAIEndUserRoute::is_dnd_enabled_Set() const{
    return m_dnd_enabled_isSet;
}

bool OAIEndUserRoute::is_dnd_enabled_Valid() const{
    return m_dnd_enabled_isValid;
}

QList<OAILine> OAIEndUserRoute::getExtensionHandsets() const {
    return m_extension_handsets;
}
void OAIEndUserRoute::setExtensionHandsets(const QList<OAILine> &extension_handsets) {
    m_extension_handsets = extension_handsets;
    m_extension_handsets_isSet = true;
}

bool OAIEndUserRoute::is_extension_handsets_Set() const{
    return m_extension_handsets_isSet;
}

bool OAIEndUserRoute::is_extension_handsets_Valid() const{
    return m_extension_handsets_isValid;
}

QString OAIEndUserRoute::getExtensionNumber() const {
    return m_extension_number;
}
void OAIEndUserRoute::setExtensionNumber(const QString &extension_number) {
    m_extension_number = extension_number;
    m_extension_number_isSet = true;
}

bool OAIEndUserRoute::is_extension_number_Set() const{
    return m_extension_number_isSet;
}

bool OAIEndUserRoute::is_extension_number_Valid() const{
    return m_extension_number_isValid;
}

double OAIEndUserRoute::getLocationId() const {
    return m_location_id;
}
void OAIEndUserRoute::setLocationId(const double &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIEndUserRoute::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIEndUserRoute::is_location_id_Valid() const{
    return m_location_id_isValid;
}

OAIBasicUser OAIEndUserRoute::getUser() const {
    return m_user;
}
void OAIEndUserRoute::setUser(const OAIBasicUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEndUserRoute::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEndUserRoute::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEndUserRoute::isVttEnabled() const {
    return m_vtt_enabled;
}
void OAIEndUserRoute::setVttEnabled(const bool &vtt_enabled) {
    m_vtt_enabled = vtt_enabled;
    m_vtt_enabled_isSet = true;
}

bool OAIEndUserRoute::is_vtt_enabled_Set() const{
    return m_vtt_enabled_isSet;
}

bool OAIEndUserRoute::is_vtt_enabled_Valid() const{
    return m_vtt_enabled_isValid;
}

bool OAIEndUserRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_caller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnd_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_handsets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vtt_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndUserRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
