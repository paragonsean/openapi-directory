/*
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Webhook;
import org.openapitools.client.model.WebhookCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createWebhook
     * @param webhookCreate Webhook create parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookCall(WebhookCreate webhookCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookCreate;

        // create path and map variables
        String localVarPath = "/self/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(WebhookCreate webhookCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookCreate' is set
        if (webhookCreate == null) {
            throw new ApiException("Missing the required parameter 'webhookCreate' when calling createWebhook(Async)");
        }

        return createWebhookCall(webhookCreate, _callback);

    }

    /**
     * Create a new webhook subscription
     * 
     * @param webhookCreate Webhook create parameters (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public Webhook createWebhook(WebhookCreate webhookCreate) throws ApiException {
        ApiResponse<Webhook> localVarResp = createWebhookWithHttpInfo(webhookCreate);
        return localVarResp.getData();
    }

    /**
     * Create a new webhook subscription
     * 
     * @param webhookCreate Webhook create parameters (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> createWebhookWithHttpInfo(WebhookCreate webhookCreate) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhookCreate, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new webhook subscription (asynchronously)
     * 
     * @param webhookCreate Webhook create parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebhookAsync(WebhookCreate webhookCreate, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhookCreate, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destroyWebhook
     * @param id Unique identifier of the webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyWebhookCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destroyWebhookValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling destroyWebhook(Async)");
        }

        return destroyWebhookCall(id, _callback);

    }

    /**
     * Remove a web hook
     * 
     * @param id Unique identifier of the webhook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public void destroyWebhook(String id) throws ApiException {
        destroyWebhookWithHttpInfo(id);
    }

    /**
     * Remove a web hook
     * 
     * @param id Unique identifier of the webhook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> destroyWebhookWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = destroyWebhookValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a web hook (asynchronously)
     * 
     * @param id Unique identifier of the webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destroyWebhookAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = destroyWebhookValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhooks
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhooksCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhooksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listWebhooksCall(_callback);

    }

    /**
     * List web hooks
     * 
     * @return List&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public List<Webhook> listWebhooks() throws ApiException {
        ApiResponse<List<Webhook>> localVarResp = listWebhooksWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List web hooks
     * 
     * @return ApiResponse&lt;List&lt;Webhook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Webhook>> listWebhooksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List web hooks (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhooksAsync(final ApiCallback<List<Webhook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhooksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Webhook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renewWebhook
     * @param id Webhook ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewWebhookCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/webhooks/{id}/renew"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewWebhookValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renewWebhook(Async)");
        }

        return renewWebhookCall(id, _callback);

    }

    /**
     * Renews a web hook
     * 
     * @param id Webhook ID (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public Webhook renewWebhook(String id) throws ApiException {
        ApiResponse<Webhook> localVarResp = renewWebhookWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Renews a web hook
     * 
     * @param id Webhook ID (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> renewWebhookWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = renewWebhookValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renews a web hook (asynchronously)
     * 
     * @param id Webhook ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewWebhookAsync(String id, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewWebhookValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewWebhook
     * @param id Unique identifier of the webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewWebhookCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewWebhookValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling viewWebhook(Async)");
        }

        return viewWebhookCall(id, _callback);

    }

    /**
     * Get web hook details
     * 
     * @param id Unique identifier of the webhook (required)
     * @return Webhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public Webhook viewWebhook(String id) throws ApiException {
        ApiResponse<Webhook> localVarResp = viewWebhookWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get web hook details
     * 
     * @param id Unique identifier of the webhook (required)
     * @return ApiResponse&lt;Webhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webhook> viewWebhookWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = viewWebhookValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get web hook details (asynchronously)
     * 
     * @param id Unique identifier of the webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: The client should not repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized: Invalid access token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: The user has no rights to access the resource(s) </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Timeout: The client may repeat the request without modifications </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Bad Gateway </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewWebhookAsync(String id, final ApiCallback<Webhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewWebhookValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Webhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
