/*
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebhookStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Webhook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:53:51.957799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Webhook {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
  public enum EventsEnum {
    CALL("CALL");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String value) {
      for (EventsEnum b : EventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<EventsEnum> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private String expireAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Metadata policy for the webhook
   */
  @JsonAdapter(MetadataPolicyEnum.Adapter.class)
  public enum MetadataPolicyEnum {
    NONE("NONE"),
    
    HEADER("HEADER"),
    
    BODY("BODY");

    private String value;

    MetadataPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetadataPolicyEnum fromValue(String value) {
      for (MetadataPolicyEnum b : MetadataPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetadataPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetadataPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetadataPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetadataPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetadataPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METADATA_POLICY = "metadataPolicy";
  @SerializedName(SERIALIZED_NAME_METADATA_POLICY)
  private MetadataPolicyEnum metadataPolicy;

  public static final String SERIALIZED_NAME_PURGE_AT = "purgeAt";
  @SerializedName(SERIALIZED_NAME_PURGE_AT)
  private String purgeAt;

  public static final String SERIALIZED_NAME_RENEWED_AT = "renewedAt";
  @SerializedName(SERIALIZED_NAME_RENEWED_AT)
  private String renewedAt;

  /**
   * Signing algorithm for the webhook
   */
  @JsonAdapter(SigningAlgoEnum.Adapter.class)
  public enum SigningAlgoEnum {
    HMAC_SHA256("HMAC_SHA256"),
    
    NONE("NONE");

    private String value;

    SigningAlgoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SigningAlgoEnum fromValue(String value) {
      for (SigningAlgoEnum b : SigningAlgoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SigningAlgoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SigningAlgoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SigningAlgoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SigningAlgoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SigningAlgoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNING_ALGO = "signingAlgo";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGO)
  private SigningAlgoEnum signingAlgo;

  public static final String SERIALIZED_NAME_SIGNING_KEY = "signingKey";
  @SerializedName(SERIALIZED_NAME_SIGNING_KEY)
  private String signingKey;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private WebhookStatistics statistics;

  /**
   * Status for the webhook
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    PAUSED("PAUSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Webhook() {
  }

  public Webhook accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Unique identifier of the account
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Webhook createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created time for the webhook
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Webhook events(List<EventsEnum> events) {
    this.events = events;
    return this;
  }

  public Webhook addEventsItem(EventsEnum eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Subscribed events for the webhook
   * @return events
   */
  @javax.annotation.Nullable
  public List<EventsEnum> getEvents() {
    return events;
  }

  public void setEvents(List<EventsEnum> events) {
    this.events = events;
  }


  public Webhook expireAt(String expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration time for the webhook
   * @return expireAt
   */
  @javax.annotation.Nullable
  public String getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(String expireAt) {
    this.expireAt = expireAt;
  }


  public Webhook id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the webhook
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Webhook metadataPolicy(MetadataPolicyEnum metadataPolicy) {
    this.metadataPolicy = metadataPolicy;
    return this;
  }

  /**
   * Metadata policy for the webhook
   * @return metadataPolicy
   */
  @javax.annotation.Nullable
  public MetadataPolicyEnum getMetadataPolicy() {
    return metadataPolicy;
  }

  public void setMetadataPolicy(MetadataPolicyEnum metadataPolicy) {
    this.metadataPolicy = metadataPolicy;
  }


  public Webhook purgeAt(String purgeAt) {
    this.purgeAt = purgeAt;
    return this;
  }

  /**
   * Scheduled purge time for the webhook
   * @return purgeAt
   */
  @javax.annotation.Nullable
  public String getPurgeAt() {
    return purgeAt;
  }

  public void setPurgeAt(String purgeAt) {
    this.purgeAt = purgeAt;
  }


  public Webhook renewedAt(String renewedAt) {
    this.renewedAt = renewedAt;
    return this;
  }

  /**
   * Last renewed time for the webhook
   * @return renewedAt
   */
  @javax.annotation.Nullable
  public String getRenewedAt() {
    return renewedAt;
  }

  public void setRenewedAt(String renewedAt) {
    this.renewedAt = renewedAt;
  }


  public Webhook signingAlgo(SigningAlgoEnum signingAlgo) {
    this.signingAlgo = signingAlgo;
    return this;
  }

  /**
   * Signing algorithm for the webhook
   * @return signingAlgo
   */
  @javax.annotation.Nullable
  public SigningAlgoEnum getSigningAlgo() {
    return signingAlgo;
  }

  public void setSigningAlgo(SigningAlgoEnum signingAlgo) {
    this.signingAlgo = signingAlgo;
  }


  public Webhook signingKey(String signingKey) {
    this.signingKey = signingKey;
    return this;
  }

  /**
   * Signing key for the webhook
   * @return signingKey
   */
  @javax.annotation.Nullable
  public String getSigningKey() {
    return signingKey;
  }

  public void setSigningKey(String signingKey) {
    this.signingKey = signingKey;
  }


  public Webhook statistics(WebhookStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public WebhookStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(WebhookStatistics statistics) {
    this.statistics = statistics;
  }


  public Webhook status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status for the webhook
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Webhook url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Destination URL for events
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Webhook userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier of the user
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.accountId, webhook.accountId) &&
        Objects.equals(this.createdAt, webhook.createdAt) &&
        Objects.equals(this.events, webhook.events) &&
        Objects.equals(this.expireAt, webhook.expireAt) &&
        Objects.equals(this.id, webhook.id) &&
        Objects.equals(this.metadataPolicy, webhook.metadataPolicy) &&
        Objects.equals(this.purgeAt, webhook.purgeAt) &&
        Objects.equals(this.renewedAt, webhook.renewedAt) &&
        Objects.equals(this.signingAlgo, webhook.signingAlgo) &&
        Objects.equals(this.signingKey, webhook.signingKey) &&
        Objects.equals(this.statistics, webhook.statistics) &&
        Objects.equals(this.status, webhook.status) &&
        Objects.equals(this.url, webhook.url) &&
        Objects.equals(this.userId, webhook.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, createdAt, events, expireAt, id, metadataPolicy, purgeAt, renewedAt, signingAlgo, signingKey, statistics, status, url, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadataPolicy: ").append(toIndentedString(metadataPolicy)).append("\n");
    sb.append("    purgeAt: ").append(toIndentedString(purgeAt)).append("\n");
    sb.append("    renewedAt: ").append(toIndentedString(renewedAt)).append("\n");
    sb.append("    signingAlgo: ").append(toIndentedString(signingAlgo)).append("\n");
    sb.append("    signingKey: ").append(toIndentedString(signingKey)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("createdAt");
    openapiFields.add("events");
    openapiFields.add("expireAt");
    openapiFields.add("id");
    openapiFields.add("metadataPolicy");
    openapiFields.add("purgeAt");
    openapiFields.add("renewedAt");
    openapiFields.add("signingAlgo");
    openapiFields.add("signingKey");
    openapiFields.add("statistics");
    openapiFields.add("status");
    openapiFields.add("url");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Webhook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Webhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webhook is not found in the empty JSON string", Webhook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Webhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webhook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if ((jsonObj.get("expireAt") != null && !jsonObj.get("expireAt").isJsonNull()) && !jsonObj.get("expireAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireAt").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("metadataPolicy") != null && !jsonObj.get("metadataPolicy").isJsonNull()) && !jsonObj.get("metadataPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataPolicy").toString()));
      }
      // validate the optional field `metadataPolicy`
      if (jsonObj.get("metadataPolicy") != null && !jsonObj.get("metadataPolicy").isJsonNull()) {
        MetadataPolicyEnum.validateJsonElement(jsonObj.get("metadataPolicy"));
      }
      if ((jsonObj.get("purgeAt") != null && !jsonObj.get("purgeAt").isJsonNull()) && !jsonObj.get("purgeAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purgeAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purgeAt").toString()));
      }
      if ((jsonObj.get("renewedAt") != null && !jsonObj.get("renewedAt").isJsonNull()) && !jsonObj.get("renewedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewedAt").toString()));
      }
      if ((jsonObj.get("signingAlgo") != null && !jsonObj.get("signingAlgo").isJsonNull()) && !jsonObj.get("signingAlgo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingAlgo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingAlgo").toString()));
      }
      // validate the optional field `signingAlgo`
      if (jsonObj.get("signingAlgo") != null && !jsonObj.get("signingAlgo").isJsonNull()) {
        SigningAlgoEnum.validateJsonElement(jsonObj.get("signingAlgo"));
      }
      if ((jsonObj.get("signingKey") != null && !jsonObj.get("signingKey").isJsonNull()) && !jsonObj.get("signingKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingKey").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        WebhookStatistics.validateJsonElement(jsonObj.get("statistics"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webhook.class));

       return (TypeAdapter<T>) new TypeAdapter<Webhook>() {
           @Override
           public void write(JsonWriter out, Webhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webhook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Webhook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Webhook
   * @throws IOException if the JSON string is invalid with respect to Webhook
   */
  public static Webhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webhook.class);
  }

  /**
   * Convert an instance of Webhook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

