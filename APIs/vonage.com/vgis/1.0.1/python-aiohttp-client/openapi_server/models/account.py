# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_ucis_inner import AccountUcisInner
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, org: str=None, status: str=None, ucis: List[AccountUcisInner]=None):
        """Account - a model defined in OpenAPI

        :param id: The id of this Account.
        :param name: The name of this Account.
        :param org: The org of this Account.
        :param status: The status of this Account.
        :param ucis: The ucis of this Account.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'org': str,
            'status': str,
            'ucis': List[AccountUcisInner]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'org': 'org',
            'status': 'status',
            'ucis': 'ucis'
        }

        self._id = id
        self._name = name
        self._org = org
        self._status = status
        self._ucis = ucis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Account.

        Unique identifier of the account

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Unique identifier of the account

        :param id: The id of this Account.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Account.

        Name of the account

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of the account

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def org(self):
        """Gets the org of this Account.

        Organization of the account

        :return: The org of this Account.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this Account.

        Organization of the account

        :param org: The org of this Account.
        :type org: str
        """

        self._org = org

    @property
    def status(self):
        """Gets the status of this Account.

        Status of the account

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        Status of the account

        :param status: The status of this Account.
        :type status: str
        """
        allowed_values = ["PENDING", "ACTIVE", "DELETED", "ARCHIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ucis(self):
        """Gets the ucis of this Account.


        :return: The ucis of this Account.
        :rtype: List[AccountUcisInner]
        """
        return self._ucis

    @ucis.setter
    def ucis(self, ucis):
        """Sets the ucis of this Account.


        :param ucis: The ucis of this Account.
        :type ucis: List[AccountUcisInner]
        """

        self._ucis = ucis
