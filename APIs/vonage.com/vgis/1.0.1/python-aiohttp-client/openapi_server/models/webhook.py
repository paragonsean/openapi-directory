# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_statistics import WebhookStatistics
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, created_at: str=None, events: List[str]=None, expire_at: str=None, id: str=None, metadata_policy: str=None, purge_at: str=None, renewed_at: str=None, signing_algo: str=None, signing_key: str=None, statistics: WebhookStatistics=None, status: str=None, url: str=None, user_id: str=None):
        """Webhook - a model defined in OpenAPI

        :param account_id: The account_id of this Webhook.
        :param created_at: The created_at of this Webhook.
        :param events: The events of this Webhook.
        :param expire_at: The expire_at of this Webhook.
        :param id: The id of this Webhook.
        :param metadata_policy: The metadata_policy of this Webhook.
        :param purge_at: The purge_at of this Webhook.
        :param renewed_at: The renewed_at of this Webhook.
        :param signing_algo: The signing_algo of this Webhook.
        :param signing_key: The signing_key of this Webhook.
        :param statistics: The statistics of this Webhook.
        :param status: The status of this Webhook.
        :param url: The url of this Webhook.
        :param user_id: The user_id of this Webhook.
        """
        self.openapi_types = {
            'account_id': str,
            'created_at': str,
            'events': List[str],
            'expire_at': str,
            'id': str,
            'metadata_policy': str,
            'purge_at': str,
            'renewed_at': str,
            'signing_algo': str,
            'signing_key': str,
            'statistics': WebhookStatistics,
            'status': str,
            'url': str,
            'user_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'created_at': 'createdAt',
            'events': 'events',
            'expire_at': 'expireAt',
            'id': 'id',
            'metadata_policy': 'metadataPolicy',
            'purge_at': 'purgeAt',
            'renewed_at': 'renewedAt',
            'signing_algo': 'signingAlgo',
            'signing_key': 'signingKey',
            'statistics': 'statistics',
            'status': 'status',
            'url': 'url',
            'user_id': 'userId'
        }

        self._account_id = account_id
        self._created_at = created_at
        self._events = events
        self._expire_at = expire_at
        self._id = id
        self._metadata_policy = metadata_policy
        self._purge_at = purge_at
        self._renewed_at = renewed_at
        self._signing_algo = signing_algo
        self._signing_key = signing_key
        self._statistics = statistics
        self._status = status
        self._url = url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Webhook.

        Unique identifier of the account

        :return: The account_id of this Webhook.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Webhook.

        Unique identifier of the account

        :param account_id: The account_id of this Webhook.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this Webhook.

        Created time for the webhook

        :return: The created_at of this Webhook.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Webhook.

        Created time for the webhook

        :param created_at: The created_at of this Webhook.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def events(self):
        """Gets the events of this Webhook.

        Subscribed events for the webhook

        :return: The events of this Webhook.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Webhook.

        Subscribed events for the webhook

        :param events: The events of this Webhook.
        :type events: List[str]
        """
        allowed_values = ["CALL"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def expire_at(self):
        """Gets the expire_at of this Webhook.

        Expiration time for the webhook

        :return: The expire_at of this Webhook.
        :rtype: str
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Webhook.

        Expiration time for the webhook

        :param expire_at: The expire_at of this Webhook.
        :type expire_at: str
        """

        self._expire_at = expire_at

    @property
    def id(self):
        """Gets the id of this Webhook.

        Unique identifier for the webhook

        :return: The id of this Webhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        Unique identifier for the webhook

        :param id: The id of this Webhook.
        :type id: str
        """

        self._id = id

    @property
    def metadata_policy(self):
        """Gets the metadata_policy of this Webhook.

        Metadata policy for the webhook

        :return: The metadata_policy of this Webhook.
        :rtype: str
        """
        return self._metadata_policy

    @metadata_policy.setter
    def metadata_policy(self, metadata_policy):
        """Sets the metadata_policy of this Webhook.

        Metadata policy for the webhook

        :param metadata_policy: The metadata_policy of this Webhook.
        :type metadata_policy: str
        """
        allowed_values = ["NONE", "HEADER", "BODY"]  # noqa: E501
        if metadata_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_policy` ({0}), must be one of {1}"
                .format(metadata_policy, allowed_values)
            )

        self._metadata_policy = metadata_policy

    @property
    def purge_at(self):
        """Gets the purge_at of this Webhook.

        Scheduled purge time for the webhook

        :return: The purge_at of this Webhook.
        :rtype: str
        """
        return self._purge_at

    @purge_at.setter
    def purge_at(self, purge_at):
        """Sets the purge_at of this Webhook.

        Scheduled purge time for the webhook

        :param purge_at: The purge_at of this Webhook.
        :type purge_at: str
        """

        self._purge_at = purge_at

    @property
    def renewed_at(self):
        """Gets the renewed_at of this Webhook.

        Last renewed time for the webhook

        :return: The renewed_at of this Webhook.
        :rtype: str
        """
        return self._renewed_at

    @renewed_at.setter
    def renewed_at(self, renewed_at):
        """Sets the renewed_at of this Webhook.

        Last renewed time for the webhook

        :param renewed_at: The renewed_at of this Webhook.
        :type renewed_at: str
        """

        self._renewed_at = renewed_at

    @property
    def signing_algo(self):
        """Gets the signing_algo of this Webhook.

        Signing algorithm for the webhook

        :return: The signing_algo of this Webhook.
        :rtype: str
        """
        return self._signing_algo

    @signing_algo.setter
    def signing_algo(self, signing_algo):
        """Sets the signing_algo of this Webhook.

        Signing algorithm for the webhook

        :param signing_algo: The signing_algo of this Webhook.
        :type signing_algo: str
        """
        allowed_values = ["HMAC_SHA256", "NONE"]  # noqa: E501
        if signing_algo not in allowed_values:
            raise ValueError(
                "Invalid value for `signing_algo` ({0}), must be one of {1}"
                .format(signing_algo, allowed_values)
            )

        self._signing_algo = signing_algo

    @property
    def signing_key(self):
        """Gets the signing_key of this Webhook.

        Signing key for the webhook

        :return: The signing_key of this Webhook.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this Webhook.

        Signing key for the webhook

        :param signing_key: The signing_key of this Webhook.
        :type signing_key: str
        """

        self._signing_key = signing_key

    @property
    def statistics(self):
        """Gets the statistics of this Webhook.


        :return: The statistics of this Webhook.
        :rtype: WebhookStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this Webhook.


        :param statistics: The statistics of this Webhook.
        :type statistics: WebhookStatistics
        """

        self._statistics = statistics

    @property
    def status(self):
        """Gets the status of this Webhook.

        Status for the webhook

        :return: The status of this Webhook.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Webhook.

        Status for the webhook

        :param status: The status of this Webhook.
        :type status: str
        """
        allowed_values = ["ACTIVE", "PAUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this Webhook.

        Destination URL for events

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        Destination URL for events

        :param url: The url of this Webhook.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this Webhook.

        Unique identifier of the user

        :return: The user_id of this Webhook.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Webhook.

        Unique identifier of the user

        :param user_id: The user_id of this Webhook.
        :type user_id: str
        """

        self._user_id = user_id
