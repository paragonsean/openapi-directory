# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, metadata_policy: str=None, signing_algo: str=None, signing_key: str=None, url: str=None):
        """WebhookCreate - a model defined in OpenAPI

        :param events: The events of this WebhookCreate.
        :param metadata_policy: The metadata_policy of this WebhookCreate.
        :param signing_algo: The signing_algo of this WebhookCreate.
        :param signing_key: The signing_key of this WebhookCreate.
        :param url: The url of this WebhookCreate.
        """
        self.openapi_types = {
            'events': List[str],
            'metadata_policy': str,
            'signing_algo': str,
            'signing_key': str,
            'url': str
        }

        self.attribute_map = {
            'events': 'events',
            'metadata_policy': 'metadataPolicy',
            'signing_algo': 'signingAlgo',
            'signing_key': 'signingKey',
            'url': 'url'
        }

        self._events = events
        self._metadata_policy = metadata_policy
        self._signing_algo = signing_algo
        self._signing_key = signing_key
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookCreate of this WebhookCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this WebhookCreate.

        Events to subscribe to the webhook

        :return: The events of this WebhookCreate.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhookCreate.

        Events to subscribe to the webhook

        :param events: The events of this WebhookCreate.
        :type events: List[str]
        """
        allowed_values = ["CALL"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def metadata_policy(self):
        """Gets the metadata_policy of this WebhookCreate.

        Metadata policy for the webhook

        :return: The metadata_policy of this WebhookCreate.
        :rtype: str
        """
        return self._metadata_policy

    @metadata_policy.setter
    def metadata_policy(self, metadata_policy):
        """Sets the metadata_policy of this WebhookCreate.

        Metadata policy for the webhook

        :param metadata_policy: The metadata_policy of this WebhookCreate.
        :type metadata_policy: str
        """
        allowed_values = ["NONE", "HEADER", "BODY"]  # noqa: E501
        if metadata_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_policy` ({0}), must be one of {1}"
                .format(metadata_policy, allowed_values)
            )

        self._metadata_policy = metadata_policy

    @property
    def signing_algo(self):
        """Gets the signing_algo of this WebhookCreate.

        Signing algorithm for the webhook

        :return: The signing_algo of this WebhookCreate.
        :rtype: str
        """
        return self._signing_algo

    @signing_algo.setter
    def signing_algo(self, signing_algo):
        """Sets the signing_algo of this WebhookCreate.

        Signing algorithm for the webhook

        :param signing_algo: The signing_algo of this WebhookCreate.
        :type signing_algo: str
        """
        allowed_values = ["HMAC_SHA256"]  # noqa: E501
        if signing_algo not in allowed_values:
            raise ValueError(
                "Invalid value for `signing_algo` ({0}), must be one of {1}"
                .format(signing_algo, allowed_values)
            )

        self._signing_algo = signing_algo

    @property
    def signing_key(self):
        """Gets the signing_key of this WebhookCreate.

        Signing key for the webhook

        :return: The signing_key of this WebhookCreate.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this WebhookCreate.

        Signing key for the webhook

        :param signing_key: The signing_key of this WebhookCreate.
        :type signing_key: str
        """

        self._signing_key = signing_key

    @property
    def url(self):
        """Gets the url of this WebhookCreate.

        Destination URL for events

        :return: The url of this WebhookCreate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookCreate.

        Destination URL for events

        :param url: The url of this WebhookCreate.
        :type url: str
        """

        self._url = url
