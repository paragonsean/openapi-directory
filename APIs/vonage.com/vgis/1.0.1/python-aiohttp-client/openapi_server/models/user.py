# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_roles_inner import UserRolesInner
from openapi_server.models.user_ucis_inner import UserUcisInner
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, acount_label: str=None, contact_number: str=None, email_address: str=None, first_name: str=None, id: int=None, last_name: str=None, roles: List[UserRolesInner]=None, status: str=None, ucis: List[UserUcisInner]=None):
        """User - a model defined in OpenAPI

        :param account_id: The account_id of this User.
        :param acount_label: The acount_label of this User.
        :param contact_number: The contact_number of this User.
        :param email_address: The email_address of this User.
        :param first_name: The first_name of this User.
        :param id: The id of this User.
        :param last_name: The last_name of this User.
        :param roles: The roles of this User.
        :param status: The status of this User.
        :param ucis: The ucis of this User.
        """
        self.openapi_types = {
            'account_id': int,
            'acount_label': str,
            'contact_number': str,
            'email_address': str,
            'first_name': str,
            'id': int,
            'last_name': str,
            'roles': List[UserRolesInner],
            'status': str,
            'ucis': List[UserUcisInner]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'acount_label': 'acountLabel',
            'contact_number': 'contactNumber',
            'email_address': 'emailAddress',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'roles': 'roles',
            'status': 'status',
            'ucis': 'ucis'
        }

        self._account_id = account_id
        self._acount_label = acount_label
        self._contact_number = contact_number
        self._email_address = email_address
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._roles = roles
        self._status = status
        self._ucis = ucis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this User.

        Unique identifier of the user's account

        :return: The account_id of this User.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.

        Unique identifier of the user's account

        :param account_id: The account_id of this User.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def acount_label(self):
        """Gets the acount_label of this User.

        The name of the user's account

        :return: The acount_label of this User.
        :rtype: str
        """
        return self._acount_label

    @acount_label.setter
    def acount_label(self, acount_label):
        """Sets the acount_label of this User.

        The name of the user's account

        :param acount_label: The acount_label of this User.
        :type acount_label: str
        """

        self._acount_label = acount_label

    @property
    def contact_number(self):
        """Gets the contact_number of this User.

        Contact number of the user

        :return: The contact_number of this User.
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this User.

        Contact number of the user

        :param contact_number: The contact_number of this User.
        :type contact_number: str
        """

        self._contact_number = contact_number

    @property
    def email_address(self):
        """Gets the email_address of this User.

        Email address of the user

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        Email address of the user

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this User.

        First name of the user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of the user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.

        Unique identifier of the user

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Unique identifier of the user

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this User.

        Last name of the user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of the user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def roles(self):
        """Gets the roles of this User.


        :return: The roles of this User.
        :rtype: List[UserRolesInner]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.
        :type roles: List[UserRolesInner]
        """

        self._roles = roles

    @property
    def status(self):
        """Gets the status of this User.

        Status of the user

        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Status of the user

        :param status: The status of this User.
        :type status: str
        """
        allowed_values = ["PENDING", "ACTIVE", "DELETED", "ARCHIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ucis(self):
        """Gets the ucis of this User.


        :return: The ucis of this User.
        :rtype: List[UserUcisInner]
        """
        return self._ucis

    @ucis.setter
    def ucis(self, ucis):
        """Sets the ucis of this User.


        :param ucis: The ucis of this User.
        :type ucis: List[UserUcisInner]
        """

        self._ucis = ucis
