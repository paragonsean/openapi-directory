# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, answer_time: date=None, caller_id: str=None, direction: str=None, duration: int=None, end_time: date=None, external_id: str=None, id: int=None, phone_number: str=None, sms_data: str=None, start_time: date=None, state: str=None, type: str=None, uci_id: int=None, user_id: int=None):
        """Event - a model defined in OpenAPI

        :param account_id: The account_id of this Event.
        :param answer_time: The answer_time of this Event.
        :param caller_id: The caller_id of this Event.
        :param direction: The direction of this Event.
        :param duration: The duration of this Event.
        :param end_time: The end_time of this Event.
        :param external_id: The external_id of this Event.
        :param id: The id of this Event.
        :param phone_number: The phone_number of this Event.
        :param sms_data: The sms_data of this Event.
        :param start_time: The start_time of this Event.
        :param state: The state of this Event.
        :param type: The type of this Event.
        :param uci_id: The uci_id of this Event.
        :param user_id: The user_id of this Event.
        """
        self.openapi_types = {
            'account_id': int,
            'answer_time': date,
            'caller_id': str,
            'direction': str,
            'duration': int,
            'end_time': date,
            'external_id': str,
            'id': int,
            'phone_number': str,
            'sms_data': str,
            'start_time': date,
            'state': str,
            'type': str,
            'uci_id': int,
            'user_id': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'answer_time': 'answerTime',
            'caller_id': 'callerId',
            'direction': 'direction',
            'duration': 'duration',
            'end_time': 'endTime',
            'external_id': 'externalId',
            'id': 'id',
            'phone_number': 'phoneNumber',
            'sms_data': 'smsData',
            'start_time': 'startTime',
            'state': 'state',
            'type': 'type',
            'uci_id': 'uciId',
            'user_id': 'userId'
        }

        self._account_id = account_id
        self._answer_time = answer_time
        self._caller_id = caller_id
        self._direction = direction
        self._duration = duration
        self._end_time = end_time
        self._external_id = external_id
        self._id = id
        self._phone_number = phone_number
        self._sms_data = sms_data
        self._start_time = start_time
        self._state = state
        self._type = type
        self._uci_id = uci_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Event.

        Unique identifier of the account

        :return: The account_id of this Event.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Event.

        Unique identifier of the account

        :param account_id: The account_id of this Event.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def answer_time(self):
        """Gets the answer_time of this Event.

        Time to answer the event

        :return: The answer_time of this Event.
        :rtype: date
        """
        return self._answer_time

    @answer_time.setter
    def answer_time(self, answer_time):
        """Sets the answer_time of this Event.

        Time to answer the event

        :param answer_time: The answer_time of this Event.
        :type answer_time: date
        """

        self._answer_time = answer_time

    @property
    def caller_id(self):
        """Gets the caller_id of this Event.

        Remote caller ID

        :return: The caller_id of this Event.
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """Sets the caller_id of this Event.

        Remote caller ID

        :param caller_id: The caller_id of this Event.
        :type caller_id: str
        """

        self._caller_id = caller_id

    @property
    def direction(self):
        """Gets the direction of this Event.

        Direction of the event

        :return: The direction of this Event.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Event.

        Direction of the event

        :param direction: The direction of this Event.
        :type direction: str
        """
        allowed_values = ["INBOUND", "OUTBOUND"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this Event.

        Duration of the call in milliseconds

        :return: The duration of this Event.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Event.

        Duration of the call in milliseconds

        :param duration: The duration of this Event.
        :type duration: int
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this Event.

        End time of the event

        :return: The end_time of this Event.
        :rtype: date
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Event.

        End time of the event

        :param end_time: The end_time of this Event.
        :type end_time: date
        """

        self._end_time = end_time

    @property
    def external_id(self):
        """Gets the external_id of this Event.

        External identifier of the event

        :return: The external_id of this Event.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Event.

        External identifier of the event

        :param external_id: The external_id of this Event.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Event.

        Unique identifier of the event

        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Unique identifier of the event

        :param id: The id of this Event.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def phone_number(self):
        """Gets the phone_number of this Event.

        Unique identifier of the account

        :return: The phone_number of this Event.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Event.

        Unique identifier of the account

        :param phone_number: The phone_number of this Event.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def sms_data(self):
        """Gets the sms_data of this Event.


        :return: The sms_data of this Event.
        :rtype: str
        """
        return self._sms_data

    @sms_data.setter
    def sms_data(self, sms_data):
        """Sets the sms_data of this Event.


        :param sms_data: The sms_data of this Event.
        :type sms_data: str
        """

        self._sms_data = sms_data

    @property
    def start_time(self):
        """Gets the start_time of this Event.

        Start time of the event

        :return: The start_time of this Event.
        :rtype: date
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Event.

        Start time of the event

        :param start_time: The start_time of this Event.
        :type start_time: date
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Event.

        Status of the event

        :return: The state of this Event.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.

        Status of the event

        :param state: The state of this Event.
        :type state: str
        """
        allowed_values = ["INITIALIZING", "RINGING", "ACTIVE", "HELD", "REMOTE_HELD", "DETACHED", "REJECTED", "CANCELLED", "ANSWERED", "MISSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Event.

        Record type

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        Record type

        :param type: The type of this Event.
        :type type: str
        """
        allowed_values = ["CALL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uci_id(self):
        """Gets the uci_id of this Event.

        Unique identifier of communications provider

        :return: The uci_id of this Event.
        :rtype: int
        """
        return self._uci_id

    @uci_id.setter
    def uci_id(self, uci_id):
        """Sets the uci_id of this Event.

        Unique identifier of communications provider

        :param uci_id: The uci_id of this Event.
        :type uci_id: int
        """
        if uci_id is None:
            raise ValueError("Invalid value for `uci_id`, must not be `None`")

        self._uci_id = uci_id

    @property
    def user_id(self):
        """Gets the user_id of this Event.

        Unique identifier of the user

        :return: The user_id of this Event.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Event.

        Unique identifier of the user

        :param user_id: The user_id of this Event.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
