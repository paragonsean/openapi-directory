/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIWebhook.h"
#include "OAIWebhookCreate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_webhook_create OAIWebhookCreate [required]
    */
    virtual void createWebhook(const OAIWebhookCreate &oai_webhook_create);

    /**
    * @param[in]  id QString [required]
    */
    virtual void destroyWebhook(const QString &id);


    virtual void listWebhooks();

    /**
    * @param[in]  id QString [required]
    */
    virtual void renewWebhook(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void viewWebhook(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWebhookCallback(OAIHttpRequestWorker *worker);
    void destroyWebhookCallback(OAIHttpRequestWorker *worker);
    void listWebhooksCallback(OAIHttpRequestWorker *worker);
    void renewWebhookCallback(OAIHttpRequestWorker *worker);
    void viewWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWebhookSignal(OAIWebhook summary);
    void destroyWebhookSignal();
    void listWebhooksSignal(QList<OAIWebhook> summary);
    void renewWebhookSignal(OAIWebhook summary);
    void viewWebhookSignal(OAIWebhook summary);


    void createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void destroyWebhookSignalFull(OAIHttpRequestWorker *worker);
    void listWebhooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebhook> summary);
    void renewWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void viewWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalError() instead")
    void createWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyWebhookSignalError() instead")
    void destroyWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void destroyWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebhooksSignalError() instead")
    void listWebhooksSignalE(QList<OAIWebhook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebhooksSignalError(QList<OAIWebhook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewWebhookSignalError() instead")
    void renewWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renewWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewWebhookSignalError() instead")
    void viewWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWebhookSignalErrorFull() instead")
    void createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyWebhookSignalErrorFull() instead")
    void destroyWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWebhooksSignalErrorFull() instead")
    void listWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewWebhookSignalErrorFull() instead")
    void renewWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renewWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewWebhookSignalErrorFull() instead")
    void viewWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
