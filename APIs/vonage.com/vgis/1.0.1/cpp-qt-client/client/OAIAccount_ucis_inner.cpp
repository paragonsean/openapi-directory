/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount_ucis_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount_ucis_inner::OAIAccount_ucis_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount_ucis_inner::OAIAccount_ucis_inner() {
    this->initializeModel();
}

OAIAccount_ucis_inner::~OAIAccount_ucis_inner() {}

void OAIAccount_ucis_inner::initializeModel() {

    m_health_isSet = false;
    m_health_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_ucp_account_id_isSet = false;
    m_ucp_account_id_isValid = false;

    m_ucp_label_isSet = false;
    m_ucp_label_isValid = false;
}

void OAIAccount_ucis_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount_ucis_inner::fromJsonObject(QJsonObject json) {

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_ucp_account_id_isValid = ::OpenAPI::fromJsonValue(m_ucp_account_id, json[QString("ucpAccountId")]);
    m_ucp_account_id_isSet = !json[QString("ucpAccountId")].isNull() && m_ucp_account_id_isValid;

    m_ucp_label_isValid = ::OpenAPI::fromJsonValue(m_ucp_label, json[QString("ucpLabel")]);
    m_ucp_label_isSet = !json[QString("ucpLabel")].isNull() && m_ucp_label_isValid;
}

QString OAIAccount_ucis_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount_ucis_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_health.isSet()) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ucp_account_id_isSet) {
        obj.insert(QString("ucpAccountId"), ::OpenAPI::toJsonValue(m_ucp_account_id));
    }
    if (m_ucp_label_isSet) {
        obj.insert(QString("ucpLabel"), ::OpenAPI::toJsonValue(m_ucp_label));
    }
    return obj;
}

OAIAccount_ucis_inner_health OAIAccount_ucis_inner::getHealth() const {
    return m_health;
}
void OAIAccount_ucis_inner::setHealth(const OAIAccount_ucis_inner_health &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIAccount_ucis_inner::is_health_Set() const{
    return m_health_isSet;
}

bool OAIAccount_ucis_inner::is_health_Valid() const{
    return m_health_isValid;
}

qint64 OAIAccount_ucis_inner::getId() const {
    return m_id;
}
void OAIAccount_ucis_inner::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount_ucis_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount_ucis_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccount_ucis_inner::getType() const {
    return m_type;
}
void OAIAccount_ucis_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount_ucis_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount_ucis_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAccount_ucis_inner::getUcpAccountId() const {
    return m_ucp_account_id;
}
void OAIAccount_ucis_inner::setUcpAccountId(const QString &ucp_account_id) {
    m_ucp_account_id = ucp_account_id;
    m_ucp_account_id_isSet = true;
}

bool OAIAccount_ucis_inner::is_ucp_account_id_Set() const{
    return m_ucp_account_id_isSet;
}

bool OAIAccount_ucis_inner::is_ucp_account_id_Valid() const{
    return m_ucp_account_id_isValid;
}

QString OAIAccount_ucis_inner::getUcpLabel() const {
    return m_ucp_label;
}
void OAIAccount_ucis_inner::setUcpLabel(const QString &ucp_label) {
    m_ucp_label = ucp_label;
    m_ucp_label_isSet = true;
}

bool OAIAccount_ucis_inner::is_ucp_label_Set() const{
    return m_ucp_label_isSet;
}

bool OAIAccount_ucis_inner::is_ucp_label_Valid() const{
    return m_ucp_label_isValid;
}

bool OAIAccount_ucis_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ucp_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ucp_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount_ucis_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
