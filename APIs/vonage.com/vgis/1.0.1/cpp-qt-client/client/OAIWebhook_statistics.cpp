/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_statistics::OAIWebhook_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_statistics::OAIWebhook_statistics() {
    this->initializeModel();
}

OAIWebhook_statistics::~OAIWebhook_statistics() {}

void OAIWebhook_statistics::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_total_attempts_isSet = false;
    m_total_attempts_isValid = false;

    m_total_failures_isSet = false;
    m_total_failures_isValid = false;

    m_total_successes_isSet = false;
    m_total_successes_isValid = false;
}

void OAIWebhook_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_statistics::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_total_attempts_isValid = ::OpenAPI::fromJsonValue(m_total_attempts, json[QString("totalAttempts")]);
    m_total_attempts_isSet = !json[QString("totalAttempts")].isNull() && m_total_attempts_isValid;

    m_total_failures_isValid = ::OpenAPI::fromJsonValue(m_total_failures, json[QString("totalFailures")]);
    m_total_failures_isSet = !json[QString("totalFailures")].isNull() && m_total_failures_isValid;

    m_total_successes_isValid = ::OpenAPI::fromJsonValue(m_total_successes, json[QString("totalSuccesses")]);
    m_total_successes_isSet = !json[QString("totalSuccesses")].isNull() && m_total_successes_isValid;
}

QString OAIWebhook_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_total_attempts_isSet) {
        obj.insert(QString("totalAttempts"), ::OpenAPI::toJsonValue(m_total_attempts));
    }
    if (m_total_failures_isSet) {
        obj.insert(QString("totalFailures"), ::OpenAPI::toJsonValue(m_total_failures));
    }
    if (m_total_successes_isSet) {
        obj.insert(QString("totalSuccesses"), ::OpenAPI::toJsonValue(m_total_successes));
    }
    return obj;
}

bool OAIWebhook_statistics::isFailed() const {
    return m_failed;
}
void OAIWebhook_statistics::setFailed(const bool &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIWebhook_statistics::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIWebhook_statistics::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIWebhook_statistics::getTotalAttempts() const {
    return m_total_attempts;
}
void OAIWebhook_statistics::setTotalAttempts(const qint32 &total_attempts) {
    m_total_attempts = total_attempts;
    m_total_attempts_isSet = true;
}

bool OAIWebhook_statistics::is_total_attempts_Set() const{
    return m_total_attempts_isSet;
}

bool OAIWebhook_statistics::is_total_attempts_Valid() const{
    return m_total_attempts_isValid;
}

qint32 OAIWebhook_statistics::getTotalFailures() const {
    return m_total_failures;
}
void OAIWebhook_statistics::setTotalFailures(const qint32 &total_failures) {
    m_total_failures = total_failures;
    m_total_failures_isSet = true;
}

bool OAIWebhook_statistics::is_total_failures_Set() const{
    return m_total_failures_isSet;
}

bool OAIWebhook_statistics::is_total_failures_Valid() const{
    return m_total_failures_isValid;
}

qint32 OAIWebhook_statistics::getTotalSuccesses() const {
    return m_total_successes;
}
void OAIWebhook_statistics::setTotalSuccesses(const qint32 &total_successes) {
    m_total_successes = total_successes;
    m_total_successes_isSet = true;
}

bool OAIWebhook_statistics::is_total_successes_Set() const{
    return m_total_successes_isSet;
}

bool OAIWebhook_statistics::is_total_successes_Valid() const{
    return m_total_successes_isValid;
}

bool OAIWebhook_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_failures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_successes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
