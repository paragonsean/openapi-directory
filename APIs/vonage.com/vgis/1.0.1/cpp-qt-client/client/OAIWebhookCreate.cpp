/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookCreate::OAIWebhookCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookCreate::OAIWebhookCreate() {
    this->initializeModel();
}

OAIWebhookCreate::~OAIWebhookCreate() {}

void OAIWebhookCreate::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_metadata_policy_isSet = false;
    m_metadata_policy_isValid = false;

    m_signing_algo_isSet = false;
    m_signing_algo_isValid = false;

    m_signing_key_isSet = false;
    m_signing_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhookCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookCreate::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_metadata_policy_isValid = ::OpenAPI::fromJsonValue(m_metadata_policy, json[QString("metadataPolicy")]);
    m_metadata_policy_isSet = !json[QString("metadataPolicy")].isNull() && m_metadata_policy_isValid;

    m_signing_algo_isValid = ::OpenAPI::fromJsonValue(m_signing_algo, json[QString("signingAlgo")]);
    m_signing_algo_isSet = !json[QString("signingAlgo")].isNull() && m_signing_algo_isValid;

    m_signing_key_isValid = ::OpenAPI::fromJsonValue(m_signing_key, json[QString("signingKey")]);
    m_signing_key_isSet = !json[QString("signingKey")].isNull() && m_signing_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhookCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_metadata_policy_isSet) {
        obj.insert(QString("metadataPolicy"), ::OpenAPI::toJsonValue(m_metadata_policy));
    }
    if (m_signing_algo_isSet) {
        obj.insert(QString("signingAlgo"), ::OpenAPI::toJsonValue(m_signing_algo));
    }
    if (m_signing_key_isSet) {
        obj.insert(QString("signingKey"), ::OpenAPI::toJsonValue(m_signing_key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAIWebhookCreate::getEvents() const {
    return m_events;
}
void OAIWebhookCreate::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhookCreate::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhookCreate::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIWebhookCreate::getMetadataPolicy() const {
    return m_metadata_policy;
}
void OAIWebhookCreate::setMetadataPolicy(const QString &metadata_policy) {
    m_metadata_policy = metadata_policy;
    m_metadata_policy_isSet = true;
}

bool OAIWebhookCreate::is_metadata_policy_Set() const{
    return m_metadata_policy_isSet;
}

bool OAIWebhookCreate::is_metadata_policy_Valid() const{
    return m_metadata_policy_isValid;
}

QString OAIWebhookCreate::getSigningAlgo() const {
    return m_signing_algo;
}
void OAIWebhookCreate::setSigningAlgo(const QString &signing_algo) {
    m_signing_algo = signing_algo;
    m_signing_algo_isSet = true;
}

bool OAIWebhookCreate::is_signing_algo_Set() const{
    return m_signing_algo_isSet;
}

bool OAIWebhookCreate::is_signing_algo_Valid() const{
    return m_signing_algo_isValid;
}

QString OAIWebhookCreate::getSigningKey() const {
    return m_signing_key;
}
void OAIWebhookCreate::setSigningKey(const QString &signing_key) {
    m_signing_key = signing_key;
    m_signing_key_isSet = true;
}

bool OAIWebhookCreate::is_signing_key_Set() const{
    return m_signing_key_isSet;
}

bool OAIWebhookCreate::is_signing_key_Valid() const{
    return m_signing_key_isValid;
}

QString OAIWebhookCreate::getUrl() const {
    return m_url;
}
void OAIWebhookCreate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhookCreate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhookCreate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhookCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
