/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_answer_time_isSet = false;
    m_answer_time_isValid = false;

    m_caller_id_isSet = false;
    m_caller_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_sms_data_isSet = false;
    m_sms_data_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uci_id_isSet = false;
    m_uci_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_answer_time_isValid = ::OpenAPI::fromJsonValue(m_answer_time, json[QString("answerTime")]);
    m_answer_time_isSet = !json[QString("answerTime")].isNull() && m_answer_time_isValid;

    m_caller_id_isValid = ::OpenAPI::fromJsonValue(m_caller_id, json[QString("callerId")]);
    m_caller_id_isSet = !json[QString("callerId")].isNull() && m_caller_id_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_sms_data_isValid = ::OpenAPI::fromJsonValue(m_sms_data, json[QString("smsData")]);
    m_sms_data_isSet = !json[QString("smsData")].isNull() && m_sms_data_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uci_id_isValid = ::OpenAPI::fromJsonValue(m_uci_id, json[QString("uciId")]);
    m_uci_id_isSet = !json[QString("uciId")].isNull() && m_uci_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_answer_time_isSet) {
        obj.insert(QString("answerTime"), ::OpenAPI::toJsonValue(m_answer_time));
    }
    if (m_caller_id_isSet) {
        obj.insert(QString("callerId"), ::OpenAPI::toJsonValue(m_caller_id));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_sms_data_isSet) {
        obj.insert(QString("smsData"), ::OpenAPI::toJsonValue(m_sms_data));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uci_id_isSet) {
        obj.insert(QString("uciId"), ::OpenAPI::toJsonValue(m_uci_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIEvent::getAccountId() const {
    return m_account_id;
}
void OAIEvent::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIEvent::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIEvent::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDate OAIEvent::getAnswerTime() const {
    return m_answer_time;
}
void OAIEvent::setAnswerTime(const QDate &answer_time) {
    m_answer_time = answer_time;
    m_answer_time_isSet = true;
}

bool OAIEvent::is_answer_time_Set() const{
    return m_answer_time_isSet;
}

bool OAIEvent::is_answer_time_Valid() const{
    return m_answer_time_isValid;
}

QString OAIEvent::getCallerId() const {
    return m_caller_id;
}
void OAIEvent::setCallerId(const QString &caller_id) {
    m_caller_id = caller_id;
    m_caller_id_isSet = true;
}

bool OAIEvent::is_caller_id_Set() const{
    return m_caller_id_isSet;
}

bool OAIEvent::is_caller_id_Valid() const{
    return m_caller_id_isValid;
}

QString OAIEvent::getDirection() const {
    return m_direction;
}
void OAIEvent::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIEvent::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIEvent::is_direction_Valid() const{
    return m_direction_isValid;
}

qint64 OAIEvent::getDuration() const {
    return m_duration;
}
void OAIEvent::setDuration(const qint64 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIEvent::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIEvent::is_duration_Valid() const{
    return m_duration_isValid;
}

QDate OAIEvent::getEndTime() const {
    return m_end_time;
}
void OAIEvent::setEndTime(const QDate &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIEvent::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIEvent::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIEvent::getExternalId() const {
    return m_external_id;
}
void OAIEvent::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIEvent::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIEvent::is_external_id_Valid() const{
    return m_external_id_isValid;
}

qint64 OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvent::getPhoneNumber() const {
    return m_phone_number;
}
void OAIEvent::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIEvent::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIEvent::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIEvent::getSmsData() const {
    return m_sms_data;
}
void OAIEvent::setSmsData(const QString &sms_data) {
    m_sms_data = sms_data;
    m_sms_data_isSet = true;
}

bool OAIEvent::is_sms_data_Set() const{
    return m_sms_data_isSet;
}

bool OAIEvent::is_sms_data_Valid() const{
    return m_sms_data_isValid;
}

QDate OAIEvent::getStartTime() const {
    return m_start_time;
}
void OAIEvent::setStartTime(const QDate &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEvent::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEvent::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIEvent::getState() const {
    return m_state;
}
void OAIEvent::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEvent::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEvent::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIEvent::getType() const {
    return m_type;
}
void OAIEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIEvent::getUciId() const {
    return m_uci_id;
}
void OAIEvent::setUciId(const qint64 &uci_id) {
    m_uci_id = uci_id;
    m_uci_id_isSet = true;
}

bool OAIEvent::is_uci_id_Set() const{
    return m_uci_id_isSet;
}

bool OAIEvent::is_uci_id_Valid() const{
    return m_uci_id_isValid;
}

qint64 OAIEvent::getUserId() const {
    return m_user_id;
}
void OAIEvent::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uci_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_direction_isValid && m_id_isValid && m_phone_number_isValid && m_start_time_isValid && m_state_isValid && m_type_isValid && m_uci_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
