/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook::OAIWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook::OAIWebhook() {
    this->initializeModel();
}

OAIWebhook::~OAIWebhook() {}

void OAIWebhook::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_policy_isSet = false;
    m_metadata_policy_isValid = false;

    m_purge_at_isSet = false;
    m_purge_at_isValid = false;

    m_renewed_at_isSet = false;
    m_renewed_at_isValid = false;

    m_signing_algo_isSet = false;
    m_signing_algo_isValid = false;

    m_signing_key_isSet = false;
    m_signing_key_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_policy_isValid = ::OpenAPI::fromJsonValue(m_metadata_policy, json[QString("metadataPolicy")]);
    m_metadata_policy_isSet = !json[QString("metadataPolicy")].isNull() && m_metadata_policy_isValid;

    m_purge_at_isValid = ::OpenAPI::fromJsonValue(m_purge_at, json[QString("purgeAt")]);
    m_purge_at_isSet = !json[QString("purgeAt")].isNull() && m_purge_at_isValid;

    m_renewed_at_isValid = ::OpenAPI::fromJsonValue(m_renewed_at, json[QString("renewedAt")]);
    m_renewed_at_isSet = !json[QString("renewedAt")].isNull() && m_renewed_at_isValid;

    m_signing_algo_isValid = ::OpenAPI::fromJsonValue(m_signing_algo, json[QString("signingAlgo")]);
    m_signing_algo_isSet = !json[QString("signingAlgo")].isNull() && m_signing_algo_isValid;

    m_signing_key_isValid = ::OpenAPI::fromJsonValue(m_signing_key, json[QString("signingKey")]);
    m_signing_key_isSet = !json[QString("signingKey")].isNull() && m_signing_key_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_policy_isSet) {
        obj.insert(QString("metadataPolicy"), ::OpenAPI::toJsonValue(m_metadata_policy));
    }
    if (m_purge_at_isSet) {
        obj.insert(QString("purgeAt"), ::OpenAPI::toJsonValue(m_purge_at));
    }
    if (m_renewed_at_isSet) {
        obj.insert(QString("renewedAt"), ::OpenAPI::toJsonValue(m_renewed_at));
    }
    if (m_signing_algo_isSet) {
        obj.insert(QString("signingAlgo"), ::OpenAPI::toJsonValue(m_signing_algo));
    }
    if (m_signing_key_isSet) {
        obj.insert(QString("signingKey"), ::OpenAPI::toJsonValue(m_signing_key));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIWebhook::getAccountId() const {
    return m_account_id;
}
void OAIWebhook::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIWebhook::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIWebhook::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIWebhook::getCreatedAt() const {
    return m_created_at;
}
void OAIWebhook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWebhook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIWebhook::getEvents() const {
    return m_events;
}
void OAIWebhook::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhook::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIWebhook::getExpireAt() const {
    return m_expire_at;
}
void OAIWebhook::setExpireAt(const QString &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIWebhook::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIWebhook::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

QString OAIWebhook::getId() const {
    return m_id;
}
void OAIWebhook::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhook::getMetadataPolicy() const {
    return m_metadata_policy;
}
void OAIWebhook::setMetadataPolicy(const QString &metadata_policy) {
    m_metadata_policy = metadata_policy;
    m_metadata_policy_isSet = true;
}

bool OAIWebhook::is_metadata_policy_Set() const{
    return m_metadata_policy_isSet;
}

bool OAIWebhook::is_metadata_policy_Valid() const{
    return m_metadata_policy_isValid;
}

QString OAIWebhook::getPurgeAt() const {
    return m_purge_at;
}
void OAIWebhook::setPurgeAt(const QString &purge_at) {
    m_purge_at = purge_at;
    m_purge_at_isSet = true;
}

bool OAIWebhook::is_purge_at_Set() const{
    return m_purge_at_isSet;
}

bool OAIWebhook::is_purge_at_Valid() const{
    return m_purge_at_isValid;
}

QString OAIWebhook::getRenewedAt() const {
    return m_renewed_at;
}
void OAIWebhook::setRenewedAt(const QString &renewed_at) {
    m_renewed_at = renewed_at;
    m_renewed_at_isSet = true;
}

bool OAIWebhook::is_renewed_at_Set() const{
    return m_renewed_at_isSet;
}

bool OAIWebhook::is_renewed_at_Valid() const{
    return m_renewed_at_isValid;
}

QString OAIWebhook::getSigningAlgo() const {
    return m_signing_algo;
}
void OAIWebhook::setSigningAlgo(const QString &signing_algo) {
    m_signing_algo = signing_algo;
    m_signing_algo_isSet = true;
}

bool OAIWebhook::is_signing_algo_Set() const{
    return m_signing_algo_isSet;
}

bool OAIWebhook::is_signing_algo_Valid() const{
    return m_signing_algo_isValid;
}

QString OAIWebhook::getSigningKey() const {
    return m_signing_key;
}
void OAIWebhook::setSigningKey(const QString &signing_key) {
    m_signing_key = signing_key;
    m_signing_key_isSet = true;
}

bool OAIWebhook::is_signing_key_Set() const{
    return m_signing_key_isSet;
}

bool OAIWebhook::is_signing_key_Valid() const{
    return m_signing_key_isValid;
}

OAIWebhook_statistics OAIWebhook::getStatistics() const {
    return m_statistics;
}
void OAIWebhook::setStatistics(const OAIWebhook_statistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIWebhook::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIWebhook::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QString OAIWebhook::getStatus() const {
    return m_status;
}
void OAIWebhook::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebhook::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebhook::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWebhook::getUrl() const {
    return m_url;
}
void OAIWebhook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebhook::getUserId() const {
    return m_user_id;
}
void OAIWebhook::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWebhook::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWebhook::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purge_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
