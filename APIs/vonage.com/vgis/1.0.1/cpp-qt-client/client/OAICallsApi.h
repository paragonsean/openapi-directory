/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICallsApi_H
#define OAI_OAICallsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICall.h"
#include "OAICallCreate.h"
#include "OAICallTransfer.h"
#include "OAIErrorResponse.h"
#include "OAIEventsCount.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICallsApi : public QObject {
    Q_OBJECT

public:
    OAICallsApi(const int timeOut = 0);
    ~OAICallsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void callAnswer(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void callHold(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_call_transfer OAICallTransfer [required]
    */
    virtual void callTransfer(const QString &id, const OAICallTransfer &oai_call_transfer);

    /**
    * @param[in]  id QString [required]
    */
    virtual void callUnold(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void callVMTransfer(const QString &id);

    /**
    * @param[in]  oai_call_create OAICallCreate [required]
    */
    virtual void createCall(const OAICallCreate &oai_call_create);

    /**
    * @param[in]  id QString [required]
    */
    virtual void destroyCall(const QString &id);

    /**
    * @param[in]  from_date qint32 [optional]
    * @param[in]  to_date qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  states QString [optional]
    */
    virtual void getCallsCount(const ::OpenAPI::OptionalParam<qint32> &from_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getRoles(const QString &id);

    /**
    * @param[in]  from_date qint32 [optional]
    * @param[in]  to_date qint32 [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  states QString [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void listCalls(const ::OpenAPI::OptionalParam<qint32> &from_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_date = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void callAnswerCallback(OAIHttpRequestWorker *worker);
    void callHoldCallback(OAIHttpRequestWorker *worker);
    void callTransferCallback(OAIHttpRequestWorker *worker);
    void callUnoldCallback(OAIHttpRequestWorker *worker);
    void callVMTransferCallback(OAIHttpRequestWorker *worker);
    void createCallCallback(OAIHttpRequestWorker *worker);
    void destroyCallCallback(OAIHttpRequestWorker *worker);
    void getCallsCountCallback(OAIHttpRequestWorker *worker);
    void getRolesCallback(OAIHttpRequestWorker *worker);
    void listCallsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void callAnswerSignal(OAICall summary);
    void callHoldSignal(OAICall summary);
    void callTransferSignal(OAICall summary);
    void callUnoldSignal(OAICall summary);
    void callVMTransferSignal(OAICall summary);
    void createCallSignal(QList<OAICall> summary);
    void destroyCallSignal(QList<OAICall> summary);
    void getCallsCountSignal(OAIEventsCount summary);
    void getRolesSignal(QList<OAICall> summary);
    void listCallsSignal(QList<OAICall> summary);


    void callAnswerSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void callHoldSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void callTransferSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void callUnoldSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void callVMTransferSignalFull(OAIHttpRequestWorker *worker, OAICall summary);
    void createCallSignalFull(OAIHttpRequestWorker *worker, QList<OAICall> summary);
    void destroyCallSignalFull(OAIHttpRequestWorker *worker, QList<OAICall> summary);
    void getCallsCountSignalFull(OAIHttpRequestWorker *worker, OAIEventsCount summary);
    void getRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAICall> summary);
    void listCallsSignalFull(OAIHttpRequestWorker *worker, QList<OAICall> summary);

    Q_DECL_DEPRECATED_X("Use callAnswerSignalError() instead")
    void callAnswerSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void callAnswerSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callHoldSignalError() instead")
    void callHoldSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void callHoldSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callTransferSignalError() instead")
    void callTransferSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void callTransferSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callUnoldSignalError() instead")
    void callUnoldSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void callUnoldSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callVMTransferSignalError() instead")
    void callVMTransferSignalE(OAICall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void callVMTransferSignalError(OAICall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCallSignalError() instead")
    void createCallSignalE(QList<OAICall> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalError(QList<OAICall> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyCallSignalError() instead")
    void destroyCallSignalE(QList<OAICall> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyCallSignalError(QList<OAICall> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallsCountSignalError() instead")
    void getCallsCountSignalE(OAIEventsCount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallsCountSignalError(OAIEventsCount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesSignalError() instead")
    void getRolesSignalE(QList<OAICall> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesSignalError(QList<OAICall> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallsSignalError() instead")
    void listCallsSignalE(QList<OAICall> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallsSignalError(QList<OAICall> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use callAnswerSignalErrorFull() instead")
    void callAnswerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callAnswerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callHoldSignalErrorFull() instead")
    void callHoldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callHoldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callTransferSignalErrorFull() instead")
    void callTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callUnoldSignalErrorFull() instead")
    void callUnoldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callUnoldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use callVMTransferSignalErrorFull() instead")
    void callVMTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void callVMTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCallSignalErrorFull() instead")
    void createCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyCallSignalErrorFull() instead")
    void destroyCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCallsCountSignalErrorFull() instead")
    void getCallsCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCallsCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRolesSignalErrorFull() instead")
    void getRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCallsSignalErrorFull() instead")
    void listCallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
