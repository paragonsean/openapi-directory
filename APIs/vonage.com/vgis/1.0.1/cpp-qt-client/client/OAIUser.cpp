/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_acount_label_isSet = false;
    m_acount_label_isValid = false;

    m_contact_number_isSet = false;
    m_contact_number_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_ucis_isSet = false;
    m_ucis_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_acount_label_isValid = ::OpenAPI::fromJsonValue(m_acount_label, json[QString("acountLabel")]);
    m_acount_label_isSet = !json[QString("acountLabel")].isNull() && m_acount_label_isValid;

    m_contact_number_isValid = ::OpenAPI::fromJsonValue(m_contact_number, json[QString("contactNumber")]);
    m_contact_number_isSet = !json[QString("contactNumber")].isNull() && m_contact_number_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_ucis_isValid = ::OpenAPI::fromJsonValue(m_ucis, json[QString("ucis")]);
    m_ucis_isSet = !json[QString("ucis")].isNull() && m_ucis_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_acount_label_isSet) {
        obj.insert(QString("acountLabel"), ::OpenAPI::toJsonValue(m_acount_label));
    }
    if (m_contact_number_isSet) {
        obj.insert(QString("contactNumber"), ::OpenAPI::toJsonValue(m_contact_number));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_ucis.size() > 0) {
        obj.insert(QString("ucis"), ::OpenAPI::toJsonValue(m_ucis));
    }
    return obj;
}

qint32 OAIUser::getAccountId() const {
    return m_account_id;
}
void OAIUser::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUser::getAcountLabel() const {
    return m_acount_label;
}
void OAIUser::setAcountLabel(const QString &acount_label) {
    m_acount_label = acount_label;
    m_acount_label_isSet = true;
}

bool OAIUser::is_acount_label_Set() const{
    return m_acount_label_isSet;
}

bool OAIUser::is_acount_label_Valid() const{
    return m_acount_label_isValid;
}

QString OAIUser::getContactNumber() const {
    return m_contact_number;
}
void OAIUser::setContactNumber(const QString &contact_number) {
    m_contact_number = contact_number;
    m_contact_number_isSet = true;
}

bool OAIUser::is_contact_number_Set() const{
    return m_contact_number_isSet;
}

bool OAIUser::is_contact_number_Valid() const{
    return m_contact_number_isValid;
}

QString OAIUser::getEmailAddress() const {
    return m_email_address;
}
void OAIUser::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUser::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUser::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QList<OAIUser_roles_inner> OAIUser::getRoles() const {
    return m_roles;
}
void OAIUser::setRoles(const QList<OAIUser_roles_inner> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUser::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUser::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUser::getStatus() const {
    return m_status;
}
void OAIUser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUser::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIUser_ucis_inner> OAIUser::getUcis() const {
    return m_ucis;
}
void OAIUser::setUcis(const QList<OAIUser_ucis_inner> &ucis) {
    m_ucis = ucis;
    m_ucis_isSet = true;
}

bool OAIUser::is_ucis_Set() const{
    return m_ucis_isSet;
}

bool OAIUser::is_ucis_Valid() const{
    return m_ucis_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acount_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ucis.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
