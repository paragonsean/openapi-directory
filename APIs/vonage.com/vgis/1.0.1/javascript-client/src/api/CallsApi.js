/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Call from '../model/Call';
import CallCreate from '../model/CallCreate';
import CallTransfer from '../model/CallTransfer';
import ErrorResponse from '../model/ErrorResponse';
import EventsCount from '../model/EventsCount';

/**
* Calls service.
* @module api/CallsApi
* @version 1.0.1
*/
export default class CallsApi {

    /**
    * Constructs a new CallsApi. 
    * @alias module:api/CallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callAnswer operation.
     * @callback module:api/CallsApi~callAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer call (On supported devices)
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~callAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    callAnswer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callAnswer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/self/calls/{id}/answer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callHold operation.
     * @callback module:api/CallsApi~callHoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put call on hold
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~callHoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    callHold(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callHold");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/self/calls/{id}/hold', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callTransfer operation.
     * @callback module:api/CallsApi~callTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer call
     * @param {String} id Unique identifier of the call
     * @param {module:model/CallTransfer} callTransfer Call transfer parameters
     * @param {module:api/CallsApi~callTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    callTransfer(id, callTransfer, callback) {
      let postBody = callTransfer;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callTransfer");
      }
      // verify the required parameter 'callTransfer' is set
      if (callTransfer === undefined || callTransfer === null) {
        throw new Error("Missing the required parameter 'callTransfer' when calling callTransfer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/self/calls/{id}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callUnold operation.
     * @callback module:api/CallsApi~callUnoldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unhold
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~callUnoldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    callUnold(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callUnold");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/self/calls/{id}/hold', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callVMTransfer operation.
     * @callback module:api/CallsApi~callVMTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send call to voicemail
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~callVMTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    callVMTransfer(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callVMTransfer");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/self/calls/{id}/vmtransfer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCall operation.
     * @callback module:api/CallsApi~createCallCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Call>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Place a call
     * @param {module:model/CallCreate} callCreate Place call parameters
     * @param {module:api/CallsApi~createCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Call>}
     */
    createCall(callCreate, callback) {
      let postBody = callCreate;
      // verify the required parameter 'callCreate' is set
      if (callCreate === undefined || callCreate === null) {
        throw new Error("Missing the required parameter 'callCreate' when calling createCall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Call];
      return this.apiClient.callApi(
        '/self/calls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyCall operation.
     * @callback module:api/CallsApi~destroyCallCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Call>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * End a call
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~destroyCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Call>}
     */
    destroyCall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyCall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Call];
      return this.apiClient.callApi(
        '/self/calls/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallsCount operation.
     * @callback module:api/CallsApi~getCallsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get calls count
     * @param {Object} opts Optional parameters
     * @param {Number} [fromDate] Return calls that occurred after this point in time
     * @param {Number} [toDate] Return calls that occurred before this point in time
     * @param {module:model/String} [direction] Filter by call direction. For multiple criteria, seperate values by a comma.
     * @param {module:model/String} [states = 'ACTIVE')] Filter calls by state. For multiple criteria, seperate values by a comma.
     * @param {module:api/CallsApi~getCallsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsCount}
     */
    getCallsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'direction': opts['direction'],
        'states': opts['states']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsCount;
      return this.apiClient.callApi(
        '/self/calls/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoles operation.
     * @callback module:api/CallsApi~getRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Call>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a call
     * @param {String} id Unique identifier of the call
     * @param {module:api/CallsApi~getRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Call>}
     */
    getRoles(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Call];
      return this.apiClient.callApi(
        '/self/calls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCalls operation.
     * @callback module:api/CallsApi~listCallsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Call>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List active calls
     * Lists currently active calls
     * @param {Object} opts Optional parameters
     * @param {Number} [fromDate] Return calls that occurred after this point in time
     * @param {Number} [toDate] Return calls that occurred before this point in time
     * @param {module:model/String} [direction] Filter by call direction. For multiple criteria, seperate values by a comma.
     * @param {module:model/String} [states = 'ACTIVE')] Filter calls by state. For multiple criteria, seperate values by a comma.
     * @param {Number} [offset] Page number of calls to return
     * @param {Number} [size = 20)] Return this amount of calls in the response
     * @param {module:model/String} [order = 'ASC')] Sort in either ascending or descending order
     * @param {String} [sort] Sort calls by property
     * @param {module:api/CallsApi~listCallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Call>}
     */
    listCalls(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'direction': opts['direction'],
        'states': opts['states'],
        'offset': opts['offset'],
        'size': opts['size'],
        'order': opts['order'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Call];
      return this.apiClient.callApi(
        '/self/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
