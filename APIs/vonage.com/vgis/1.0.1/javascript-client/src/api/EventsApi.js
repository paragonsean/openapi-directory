/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Event from '../model/Event';
import EventsCount from '../model/EventsCount';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.1
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEvent operation.
     * @callback module:api/EventsApi~getEventCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event
     * @param {String} id Unique identifier of the event
     * @param {module:api/EventsApi~getEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getEvent(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/self/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsCount operation.
     * @callback module:api/EventsApi~getEventsCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events count
     * @param {Object} opts Optional parameters
     * @param {Number} [fromDate] Return events that occurred after this point in time
     * @param {Number} [toDate] Return events that occurred before this point in time
     * @param {module:model/String} [direction] Filter by event direction
     * @param {module:model/String} [states] Filter events by state
     * @param {module:api/EventsApi~getEventsCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsCount}
     */
    getEventsCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'direction': opts['direction'],
        'states': opts['states']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventsCount;
      return this.apiClient.callApi(
        '/self/events/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEvents operation.
     * @callback module:api/EventsApi~listEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List events
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [types] Record type
     * @param {Number} [fromDate] Return events that occurred after this point in time
     * @param {Number} [toDate] Return events that occurred before this point in time
     * @param {module:model/String} [direction] Filter by event direction
     * @param {module:model/String} [states] Filter events by state
     * @param {Number} [offset] Page number of events to return
     * @param {Number} [size = 20)] Return this amount of events in the response
     * @param {module:model/String} [order = 'ASC')] Sort in either ascending or descending order'
     * @param {String} [sort] Sort events by property
     * @param {module:api/EventsApi~listEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    listEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'types': opts['types'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'direction': opts['direction'],
        'states': opts['states'],
        'offset': opts['offset'],
        'size': opts['size'],
        'order': opts['order'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/self/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
