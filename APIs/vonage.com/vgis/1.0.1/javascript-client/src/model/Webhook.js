/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebhookStatistics from './WebhookStatistics';

/**
 * The Webhook model module.
 * @module model/Webhook
 * @version 1.0.1
 */
class Webhook {
    /**
     * Constructs a new <code>Webhook</code>.
     * @alias module:model/Webhook
     */
    constructor() { 
        
        Webhook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webhook} obj Optional instance to populate.
     * @return {module:model/Webhook} The populated <code>Webhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webhook();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadataPolicy')) {
                obj['metadataPolicy'] = ApiClient.convertToType(data['metadataPolicy'], 'String');
            }
            if (data.hasOwnProperty('purgeAt')) {
                obj['purgeAt'] = ApiClient.convertToType(data['purgeAt'], 'String');
            }
            if (data.hasOwnProperty('renewedAt')) {
                obj['renewedAt'] = ApiClient.convertToType(data['renewedAt'], 'String');
            }
            if (data.hasOwnProperty('signingAlgo')) {
                obj['signingAlgo'] = ApiClient.convertToType(data['signingAlgo'], 'String');
            }
            if (data.hasOwnProperty('signingKey')) {
                obj['signingKey'] = ApiClient.convertToType(data['signingKey'], 'String');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = WebhookStatistics.constructFromObject(data['statistics']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webhook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['expireAt'] && !(typeof data['expireAt'] === 'string' || data['expireAt'] instanceof String)) {
            throw new Error("Expected the field `expireAt` to be a primitive type in the JSON string but got " + data['expireAt']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['metadataPolicy'] && !(typeof data['metadataPolicy'] === 'string' || data['metadataPolicy'] instanceof String)) {
            throw new Error("Expected the field `metadataPolicy` to be a primitive type in the JSON string but got " + data['metadataPolicy']);
        }
        // ensure the json data is a string
        if (data['purgeAt'] && !(typeof data['purgeAt'] === 'string' || data['purgeAt'] instanceof String)) {
            throw new Error("Expected the field `purgeAt` to be a primitive type in the JSON string but got " + data['purgeAt']);
        }
        // ensure the json data is a string
        if (data['renewedAt'] && !(typeof data['renewedAt'] === 'string' || data['renewedAt'] instanceof String)) {
            throw new Error("Expected the field `renewedAt` to be a primitive type in the JSON string but got " + data['renewedAt']);
        }
        // ensure the json data is a string
        if (data['signingAlgo'] && !(typeof data['signingAlgo'] === 'string' || data['signingAlgo'] instanceof String)) {
            throw new Error("Expected the field `signingAlgo` to be a primitive type in the JSON string but got " + data['signingAlgo']);
        }
        // ensure the json data is a string
        if (data['signingKey'] && !(typeof data['signingKey'] === 'string' || data['signingKey'] instanceof String)) {
            throw new Error("Expected the field `signingKey` to be a primitive type in the JSON string but got " + data['signingKey']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          WebhookStatistics.validateJSON(data['statistics']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Unique identifier of the account
 * @member {String} accountId
 */
Webhook.prototype['accountId'] = undefined;

/**
 * Created time for the webhook
 * @member {String} createdAt
 */
Webhook.prototype['createdAt'] = undefined;

/**
 * Subscribed events for the webhook
 * @member {Array.<module:model/Webhook.EventsEnum>} events
 */
Webhook.prototype['events'] = undefined;

/**
 * Expiration time for the webhook
 * @member {String} expireAt
 */
Webhook.prototype['expireAt'] = undefined;

/**
 * Unique identifier for the webhook
 * @member {String} id
 */
Webhook.prototype['id'] = undefined;

/**
 * Metadata policy for the webhook
 * @member {module:model/Webhook.MetadataPolicyEnum} metadataPolicy
 */
Webhook.prototype['metadataPolicy'] = undefined;

/**
 * Scheduled purge time for the webhook
 * @member {String} purgeAt
 */
Webhook.prototype['purgeAt'] = undefined;

/**
 * Last renewed time for the webhook
 * @member {String} renewedAt
 */
Webhook.prototype['renewedAt'] = undefined;

/**
 * Signing algorithm for the webhook
 * @member {module:model/Webhook.SigningAlgoEnum} signingAlgo
 */
Webhook.prototype['signingAlgo'] = undefined;

/**
 * Signing key for the webhook
 * @member {String} signingKey
 */
Webhook.prototype['signingKey'] = undefined;

/**
 * @member {module:model/WebhookStatistics} statistics
 */
Webhook.prototype['statistics'] = undefined;

/**
 * Status for the webhook
 * @member {module:model/Webhook.StatusEnum} status
 */
Webhook.prototype['status'] = undefined;

/**
 * Destination URL for events
 * @member {String} url
 */
Webhook.prototype['url'] = undefined;

/**
 * Unique identifier of the user
 * @member {String} userId
 */
Webhook.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>events</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['EventsEnum'] = {

    /**
     * value: "CALL"
     * @const
     */
    "CALL": "CALL"
};


/**
 * Allowed values for the <code>metadataPolicy</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['MetadataPolicyEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "HEADER"
     * @const
     */
    "HEADER": "HEADER",

    /**
     * value: "BODY"
     * @const
     */
    "BODY": "BODY"
};


/**
 * Allowed values for the <code>signingAlgo</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['SigningAlgoEnum'] = {

    /**
     * value: "HMAC_SHA256"
     * @const
     */
    "HMAC_SHA256": "HMAC_SHA256",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Webhook['StatusEnum'] = {

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED"
};



export default Webhook;

