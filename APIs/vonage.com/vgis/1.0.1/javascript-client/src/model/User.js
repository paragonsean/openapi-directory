/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserRolesInner from './UserRolesInner';
import UserUcisInner from './UserUcisInner';

/**
 * The User model module.
 * @module model/User
 * @version 1.0.1
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('acountLabel')) {
                obj['acountLabel'] = ApiClient.convertToType(data['acountLabel'], 'String');
            }
            if (data.hasOwnProperty('contactNumber')) {
                obj['contactNumber'] = ApiClient.convertToType(data['contactNumber'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [UserRolesInner]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('ucis')) {
                obj['ucis'] = ApiClient.convertToType(data['ucis'], [UserUcisInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acountLabel'] && !(typeof data['acountLabel'] === 'string' || data['acountLabel'] instanceof String)) {
            throw new Error("Expected the field `acountLabel` to be a primitive type in the JSON string but got " + data['acountLabel']);
        }
        // ensure the json data is a string
        if (data['contactNumber'] && !(typeof data['contactNumber'] === 'string' || data['contactNumber'] instanceof String)) {
            throw new Error("Expected the field `contactNumber` to be a primitive type in the JSON string but got " + data['contactNumber']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                UserRolesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['ucis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ucis'])) {
                throw new Error("Expected the field `ucis` to be an array in the JSON data but got " + data['ucis']);
            }
            // validate the optional field `ucis` (array)
            for (const item of data['ucis']) {
                UserUcisInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique identifier of the user's account
 * @member {Number} accountId
 */
User.prototype['accountId'] = undefined;

/**
 * The name of the user's account
 * @member {String} acountLabel
 */
User.prototype['acountLabel'] = undefined;

/**
 * Contact number of the user
 * @member {String} contactNumber
 */
User.prototype['contactNumber'] = undefined;

/**
 * Email address of the user
 * @member {String} emailAddress
 */
User.prototype['emailAddress'] = undefined;

/**
 * First name of the user
 * @member {String} firstName
 */
User.prototype['firstName'] = undefined;

/**
 * Unique identifier of the user
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * Last name of the user
 * @member {String} lastName
 */
User.prototype['lastName'] = undefined;

/**
 * @member {Array.<module:model/UserRolesInner>} roles
 */
User.prototype['roles'] = undefined;

/**
 * Status of the user
 * @member {module:model/User.StatusEnum} status
 */
User.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/UserUcisInner>} ucis
 */
User.prototype['ucis'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
User['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED"
};



export default User;

