/**
 * Vonage Integration Suite
 * The Vonage Integration Suite API enables call control and webhooks for call events.  Your application must subscribe to the VonageIntegrationSuite API suite to use this API. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: gunifydevops@vonage.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.1
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     * @param accountId {Number} Unique identifier of the account
     * @param direction {module:model/Event.DirectionEnum} Direction of the event
     * @param id {Number} Unique identifier of the event
     * @param phoneNumber {String} Unique identifier of the account
     * @param startTime {Date} Start time of the event
     * @param state {module:model/Event.StateEnum} Status of the event
     * @param type {module:model/Event.TypeEnum} Record type
     * @param uciId {Number} Unique identifier of communications provider
     * @param userId {Number} Unique identifier of the user
     */
    constructor(accountId, direction, id, phoneNumber, startTime, state, type, uciId, userId) { 
        
        Event.initialize(this, accountId, direction, id, phoneNumber, startTime, state, type, uciId, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, direction, id, phoneNumber, startTime, state, type, uciId, userId) { 
        obj['accountId'] = accountId;
        obj['direction'] = direction;
        obj['id'] = id;
        obj['phoneNumber'] = phoneNumber;
        obj['startTime'] = startTime;
        obj['state'] = state;
        obj['type'] = type;
        obj['uciId'] = uciId;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('answerTime')) {
                obj['answerTime'] = ApiClient.convertToType(data['answerTime'], 'Date');
            }
            if (data.hasOwnProperty('callerId')) {
                obj['callerId'] = ApiClient.convertToType(data['callerId'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('smsData')) {
                obj['smsData'] = ApiClient.convertToType(data['smsData'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uciId')) {
                obj['uciId'] = ApiClient.convertToType(data['uciId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callerId'] && !(typeof data['callerId'] === 'string' || data['callerId'] instanceof String)) {
            throw new Error("Expected the field `callerId` to be a primitive type in the JSON string but got " + data['callerId']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['smsData'] && !(typeof data['smsData'] === 'string' || data['smsData'] instanceof String)) {
            throw new Error("Expected the field `smsData` to be a primitive type in the JSON string but got " + data['smsData']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Event.RequiredProperties = ["accountId", "direction", "id", "phoneNumber", "startTime", "state", "type", "uciId", "userId"];

/**
 * Unique identifier of the account
 * @member {Number} accountId
 */
Event.prototype['accountId'] = undefined;

/**
 * Time to answer the event
 * @member {Date} answerTime
 */
Event.prototype['answerTime'] = undefined;

/**
 * Remote caller ID
 * @member {String} callerId
 */
Event.prototype['callerId'] = undefined;

/**
 * Direction of the event
 * @member {module:model/Event.DirectionEnum} direction
 */
Event.prototype['direction'] = undefined;

/**
 * Duration of the call in milliseconds
 * @member {Number} duration
 */
Event.prototype['duration'] = undefined;

/**
 * End time of the event
 * @member {Date} endTime
 */
Event.prototype['endTime'] = undefined;

/**
 * External identifier of the event
 * @member {String} externalId
 */
Event.prototype['externalId'] = undefined;

/**
 * Unique identifier of the event
 * @member {Number} id
 */
Event.prototype['id'] = undefined;

/**
 * Unique identifier of the account
 * @member {String} phoneNumber
 */
Event.prototype['phoneNumber'] = undefined;

/**
 * @member {String} smsData
 */
Event.prototype['smsData'] = undefined;

/**
 * Start time of the event
 * @member {Date} startTime
 */
Event.prototype['startTime'] = undefined;

/**
 * Status of the event
 * @member {module:model/Event.StateEnum} state
 */
Event.prototype['state'] = undefined;

/**
 * Record type
 * @member {module:model/Event.TypeEnum} type
 */
Event.prototype['type'] = undefined;

/**
 * Unique identifier of communications provider
 * @member {Number} uciId
 */
Event.prototype['uciId'] = undefined;

/**
 * Unique identifier of the user
 * @member {Number} userId
 */
Event.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
Event['DirectionEnum'] = {

    /**
     * value: "INBOUND"
     * @const
     */
    "INBOUND": "INBOUND",

    /**
     * value: "OUTBOUND"
     * @const
     */
    "OUTBOUND": "OUTBOUND"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Event['StateEnum'] = {

    /**
     * value: "INITIALIZING"
     * @const
     */
    "INITIALIZING": "INITIALIZING",

    /**
     * value: "RINGING"
     * @const
     */
    "RINGING": "RINGING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "HELD"
     * @const
     */
    "HELD": "HELD",

    /**
     * value: "REMOTE_HELD"
     * @const
     */
    "REMOTE_HELD": "REMOTE_HELD",

    /**
     * value: "DETACHED"
     * @const
     */
    "DETACHED": "DETACHED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "ANSWERED"
     * @const
     */
    "ANSWERED": "ANSWERED",

    /**
     * value: "MISSED"
     * @const
     */
    "MISSED": "MISSED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Event['TypeEnum'] = {

    /**
     * value: "CALL"
     * @const
     */
    "CALL": "CALL"
};



export default Event;

