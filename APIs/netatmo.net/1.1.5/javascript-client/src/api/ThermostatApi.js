/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NAMeasureResponse from '../model/NAMeasureResponse';
import NANewScheduleResponse from '../model/NANewScheduleResponse';
import NAOkResponse from '../model/NAOkResponse';
import NAThermProgram from '../model/NAThermProgram';
import NAThermostatDataResponse from '../model/NAThermostatDataResponse';

/**
* Thermostat service.
* @module api/ThermostatApi
* @version 1.1.5
*/
export default class ThermostatApi {

    /**
    * Constructs a new ThermostatApi. 
    * @alias module:api/ThermostatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createnewschedule operation.
     * @callback module:api/ThermostatApi~createnewscheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NANewScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method createnewschedule creates a new schedule stored in the backup list.
     * @param {String} deviceId The relay id
     * @param {String} moduleId The thermostat id
     * @param {module:model/NAThermProgram} nAThermProgram The thermostat program (zones and timetable)
     * @param {module:api/ThermostatApi~createnewscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NANewScheduleResponse}
     */
    createnewschedule(deviceId, moduleId, nAThermProgram, callback) {
      let postBody = nAThermProgram;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling createnewschedule");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling createnewschedule");
      }
      // verify the required parameter 'nAThermProgram' is set
      if (nAThermProgram === undefined || nAThermProgram === null) {
        throw new Error("Missing the required parameter 'nAThermProgram' when calling createnewschedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': moduleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = NANewScheduleResponse;
      return this.apiClient.callApi(
        '/createnewschedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getmeasure_0 operation.
     * @callback module:api/ThermostatApi~getmeasure_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/NAMeasureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method getmeasure returns the measurements of a device or a module. 
     * @param {String} deviceId Id of the device whose module's measurements you want to retrieve. This _id can be found in the user's devices field.
     * @param {module:model/String} scale Defines the time interval between two measurements. Possible values : max -> every value stored will be returned 30min -> 1 value every 30 minutes 1hour -> 1 value every hour 3hours -> 1 value every 3 hours 1day -> 1 value per day 1week -> 1 value per week 1month -> 1 value per month 
     * @param {Array.<module:model/String>} type Measures you are interested in. Data you can request depends on the scale. **For Weather Station:**   * max -> Temperature (°C), CO2 (ppm), Humidity (%), Pressure (mbar), Noise (db), Rain (mm), WindStrength (km/h), WindAngle (angles), Guststrength (km/h), GustAngle (angles)   * 30min, 1hour, 3hours -> Same as above + min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain, date_max_gust   * 1day, 1week, 1month -> Same as above + date_min_temp, date_max_temp, date_min_hum, date_max_hum, date_min_pressure, date_max_pressure, date_min_noise, date_max_noise, date_min_co2, date_max_co2  **For Thermostat:**   * max -> temperature (°C), sp_temperature (°C), boileron (sec), boileroff (sec)   * 30min, 1hour, 3hours -> temperature, sp_temperature, min_temp, max_temp, sum_boiler_on, sum_boiler_off   * 1day, 1week, 1month -> temperature, min_temp, date_min_temp, max_temp, sum_boiler_on, sum_boiler_off 
     * @param {Object} opts Optional parameters
     * @param {String} [moduleId] If you don't specify any module_id you will retrieve the device's measurements. If you specify a module_id you will retrieve the module's measurements.
     * @param {Number} [dateBegin] Starting timestamp (utc) of the requested measurements. Please note measurement retrieving is limited to 1024 measurements. 
     * @param {String} [dateEnd] Ending timestamp (utc) of the request measurements. If you want only the last measurement, do not provide date_begin, and set date_end to `last`. 
     * @param {Number} [limit] Limits the number of measurements returned (default & max is 1024)
     * @param {Boolean} [optimize] Allows you to choose the format of the answer. If you build a mobile app and bandwith usage is an issue, use `optimize = true`. Use `optimize = false`, for an easier parse. In this case, values are indexed by sorted timestamp. Example of un-optimized response : ```json {\"status\": \"ok\",    \"body\": {     \"1347575400\": [18.3,39],     \"1347586200\": [20.6,48]   }, \"time_exec\": 0.012136936187744} ``` If optimize is set true, measurements are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time: ```json {\"status\": \"ok\",   \"body\": [     {\"beg_time\": 1347575400,      \"step_time\": 10800,      \"value\":          [[18.3,39],         [ 20.6,48]]     }], \"time_exec\": 0.014238119125366} ``` Default value is `true`. 
     * @param {Boolean} [realTime] In scales higher than max, since the data is aggregated, the timestamps returned are by default offset by +(scale/2). For instance, if you ask for measurements at a daily scale, you will receive data timestamped at 12:00 if real_time is set to `false` (default case), and timestamped at 00:00 if real_time is set to `true`. NB : The servers always store data with real_time set to `true` and data are offset by this parameter AFTER having being time-filtered, thus you could have data after date_end if real_time is set to `false`. 
     * @param {module:api/ThermostatApi~getmeasure_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAMeasureResponse}
     */
    getmeasure_0(deviceId, scale, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getmeasure_0");
      }
      // verify the required parameter 'scale' is set
      if (scale === undefined || scale === null) {
        throw new Error("Missing the required parameter 'scale' when calling getmeasure_0");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getmeasure_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': opts['moduleId'],
        'scale': scale,
        'type': this.apiClient.buildCollectionParam(type, 'csv'),
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'limit': opts['limit'],
        'optimize': opts['optimize'],
        'real_time': opts['realTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAMeasureResponse;
      return this.apiClient.callApi(
        '/getmeasure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getthermostatsdata operation.
     * @callback module:api/ThermostatApi~getthermostatsdataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAThermostatDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method getthermostatsdata returns information about user's thermostats such as their last measurements.
     * @param {Object} opts Optional parameters
     * @param {String} [deviceId] Id of the device you want to retrieve information of
     * @param {module:api/ThermostatApi~getthermostatsdataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAThermostatDataResponse}
     */
    getthermostatsdata(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'device_id': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAThermostatDataResponse;
      return this.apiClient.callApi(
        '/getthermostatsdata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setthermpoint operation.
     * @callback module:api/ThermostatApi~setthermpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAOkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method setthermpoint changes the Thermostat manual temperature setpoint.
     * @param {String} deviceId The relay id
     * @param {String} moduleId The thermostat id
     * @param {module:model/String} setpointMode Chosen setpoint_mode
     * @param {Object} opts Optional parameters
     * @param {Number} [setpointEndtime] When using the manual or max setpoint_mode, this parameter defines when the setpoint expires.
     * @param {Number} [setpointTemp] When using the manual setpoint_mode, this parameter defines the temperature setpoint (in Celcius) to use.
     * @param {module:api/ThermostatApi~setthermpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAOkResponse}
     */
    setthermpoint(deviceId, moduleId, setpointMode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling setthermpoint");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling setthermpoint");
      }
      // verify the required parameter 'setpointMode' is set
      if (setpointMode === undefined || setpointMode === null) {
        throw new Error("Missing the required parameter 'setpointMode' when calling setthermpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': moduleId,
        'setpoint_mode': setpointMode,
        'setpoint_endtime': opts['setpointEndtime'],
        'setpoint_temp': opts['setpointTemp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAOkResponse;
      return this.apiClient.callApi(
        '/setthermpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the switchschedule operation.
     * @callback module:api/ThermostatApi~switchscheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAOkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method switchschedule switches the Thermostat's schedule to another existing schedule.
     * @param {String} deviceId The relay id
     * @param {String} moduleId The thermostat id
     * @param {String} scheduleId The schedule id. It can be found in the getthermstate response, under the keys `therm_program_backup` and `therm_program`. 
     * @param {module:api/ThermostatApi~switchscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAOkResponse}
     */
    switchschedule(deviceId, moduleId, scheduleId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling switchschedule");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling switchschedule");
      }
      // verify the required parameter 'scheduleId' is set
      if (scheduleId === undefined || scheduleId === null) {
        throw new Error("Missing the required parameter 'scheduleId' when calling switchschedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': moduleId,
        'schedule_id': scheduleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAOkResponse;
      return this.apiClient.callApi(
        '/switchschedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncschedule operation.
     * @callback module:api/ThermostatApi~syncscheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAOkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method syncschedule changes the Thermostat weekly schedule.
     * @param {String} deviceId The relay id
     * @param {String} moduleId The thermostat id
     * @param {module:model/NAThermProgram} nAThermProgram The thermostat program (zones, timetable and name)
     * @param {module:api/ThermostatApi~syncscheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAOkResponse}
     */
    syncschedule(deviceId, moduleId, nAThermProgram, callback) {
      let postBody = nAThermProgram;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling syncschedule");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling syncschedule");
      }
      // verify the required parameter 'nAThermProgram' is set
      if (nAThermProgram === undefined || nAThermProgram === null) {
        throw new Error("Missing the required parameter 'nAThermProgram' when calling syncschedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': moduleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = NAOkResponse;
      return this.apiClient.callApi(
        '/syncschedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
