/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NAMeasureResponse from '../model/NAMeasureResponse';
import NAPublicDataResponse from '../model/NAPublicDataResponse';

/**
* Public service.
* @module api/PublicApi
* @version 1.1.5
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getmeasure_2 operation.
     * @callback module:api/PublicApi~getmeasure_2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/NAMeasureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method getmeasure returns the measurements of a device or a module. 
     * @param {String} deviceId Id of the device whose module's measurements you want to retrieve. This _id can be found in the user's devices field.
     * @param {module:model/String} scale Defines the time interval between two measurements. Possible values : max -> every value stored will be returned 30min -> 1 value every 30 minutes 1hour -> 1 value every hour 3hours -> 1 value every 3 hours 1day -> 1 value per day 1week -> 1 value per week 1month -> 1 value per month 
     * @param {Array.<module:model/String>} type Measures you are interested in. Data you can request depends on the scale. **For Weather Station:**   * max -> Temperature (°C), CO2 (ppm), Humidity (%), Pressure (mbar), Noise (db), Rain (mm), WindStrength (km/h), WindAngle (angles), Guststrength (km/h), GustAngle (angles)   * 30min, 1hour, 3hours -> Same as above + min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain, date_max_gust   * 1day, 1week, 1month -> Same as above + date_min_temp, date_max_temp, date_min_hum, date_max_hum, date_min_pressure, date_max_pressure, date_min_noise, date_max_noise, date_min_co2, date_max_co2  **For Thermostat:**   * max -> temperature (°C), sp_temperature (°C), boileron (sec), boileroff (sec)   * 30min, 1hour, 3hours -> temperature, sp_temperature, min_temp, max_temp, sum_boiler_on, sum_boiler_off   * 1day, 1week, 1month -> temperature, min_temp, date_min_temp, max_temp, sum_boiler_on, sum_boiler_off 
     * @param {Object} opts Optional parameters
     * @param {String} [moduleId] If you don't specify any module_id you will retrieve the device's measurements. If you specify a module_id you will retrieve the module's measurements.
     * @param {Number} [dateBegin] Starting timestamp (utc) of the requested measurements. Please note measurement retrieving is limited to 1024 measurements. 
     * @param {String} [dateEnd] Ending timestamp (utc) of the request measurements. If you want only the last measurement, do not provide date_begin, and set date_end to `last`. 
     * @param {Number} [limit] Limits the number of measurements returned (default & max is 1024)
     * @param {Boolean} [optimize] Allows you to choose the format of the answer. If you build a mobile app and bandwith usage is an issue, use `optimize = true`. Use `optimize = false`, for an easier parse. In this case, values are indexed by sorted timestamp. Example of un-optimized response : ```json {\"status\": \"ok\",    \"body\": {     \"1347575400\": [18.3,39],     \"1347586200\": [20.6,48]   }, \"time_exec\": 0.012136936187744} ``` If optimize is set true, measurements are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time: ```json {\"status\": \"ok\",   \"body\": [     {\"beg_time\": 1347575400,      \"step_time\": 10800,      \"value\":          [[18.3,39],         [ 20.6,48]]     }], \"time_exec\": 0.014238119125366} ``` Default value is `true`. 
     * @param {Boolean} [realTime] In scales higher than max, since the data is aggregated, the timestamps returned are by default offset by +(scale/2). For instance, if you ask for measurements at a daily scale, you will receive data timestamped at 12:00 if real_time is set to `false` (default case), and timestamped at 00:00 if real_time is set to `true`. NB : The servers always store data with real_time set to `true` and data are offset by this parameter AFTER having being time-filtered, thus you could have data after date_end if real_time is set to `false`. 
     * @param {module:api/PublicApi~getmeasure_2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAMeasureResponse}
     */
    getmeasure_2(deviceId, scale, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getmeasure_2");
      }
      // verify the required parameter 'scale' is set
      if (scale === undefined || scale === null) {
        throw new Error("Missing the required parameter 'scale' when calling getmeasure_2");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getmeasure_2");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': opts['moduleId'],
        'scale': scale,
        'type': this.apiClient.buildCollectionParam(type, 'csv'),
        'date_begin': opts['dateBegin'],
        'date_end': opts['dateEnd'],
        'limit': opts['limit'],
        'optimize': opts['optimize'],
        'real_time': opts['realTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAMeasureResponse;
      return this.apiClient.callApi(
        '/getmeasure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpublicdata operation.
     * @callback module:api/PublicApi~getpublicdataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAPublicDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves publicly shared weather data from Outdoor Modules within a predefined area.
     * @param {Number} latNe Latitude of the north east corner of the requested area. -85 <= lat_ne <= 85 and lat_ne>lat_sw
     * @param {Number} lonNe Longitude of the north east corner of the requested area. -180 <= lon_ne <= 180 and lon_ne>lon_sw
     * @param {Number} latSw Latitude of the south west corner of the requested area. -85 <= lat_sw <= 85
     * @param {Number} lonSw Longitude of the south west corner of the requested area. -180 <= lon_sw <= 180
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [requiredData] To filter stations based on relevant measurements you want (e.g. rain will only return stations with rain gauges). Default is no filter. You can find all measurements available on the Thermostat page.
     * @param {Boolean} [filter] True to exclude stations with abnormal temperature measures. Default is false.
     * @param {module:api/PublicApi~getpublicdataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAPublicDataResponse}
     */
    getpublicdata(latNe, lonNe, latSw, lonSw, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'latNe' is set
      if (latNe === undefined || latNe === null) {
        throw new Error("Missing the required parameter 'latNe' when calling getpublicdata");
      }
      // verify the required parameter 'lonNe' is set
      if (lonNe === undefined || lonNe === null) {
        throw new Error("Missing the required parameter 'lonNe' when calling getpublicdata");
      }
      // verify the required parameter 'latSw' is set
      if (latSw === undefined || latSw === null) {
        throw new Error("Missing the required parameter 'latSw' when calling getpublicdata");
      }
      // verify the required parameter 'lonSw' is set
      if (lonSw === undefined || lonSw === null) {
        throw new Error("Missing the required parameter 'lonSw' when calling getpublicdata");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat_ne': latNe,
        'lon_ne': lonNe,
        'lat_sw': latSw,
        'lon_sw': lonSw,
        'required_data': this.apiClient.buildCollectionParam(opts['requiredData'], 'csv'),
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAPublicDataResponse;
      return this.apiClient.callApi(
        '/getpublicdata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
