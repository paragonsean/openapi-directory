/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NADeviceListResponse from '../model/NADeviceListResponse';
import NAThermStateResponse from '../model/NAThermStateResponse';
import NAUserResponse from '../model/NAUserResponse';

/**
* Deprecated service.
* @module api/DeprecatedApi
* @version 1.1.5
*/
export default class DeprecatedApi {

    /**
    * Constructs a new DeprecatedApi. 
    * @alias module:api/DeprecatedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicelist operation.
     * @callback module:api/DeprecatedApi~devicelistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NADeviceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method devicelist returns the list of devices owned by the user, and their modules. A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [appType] Defines which device type will be returned by devicelist. It could be app_thermostat or app_station (by default if not provided)
     * @param {String} [deviceId] Specify a device_id if you want to retrieve only this device informations.
     * @param {Boolean} [getFavorites = false)] When set to \"true\", the favorite devices of the user are returned. This flag is available only if the devices requested are Weather Stations.
     * @param {module:api/DeprecatedApi~devicelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NADeviceListResponse}
     */
    devicelist(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'app_type': opts['appType'],
        'device_id': opts['deviceId'],
        'get_favorites': opts['getFavorites']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NADeviceListResponse;
      return this.apiClient.callApi(
        '/devicelist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getthermstate operation.
     * @callback module:api/DeprecatedApi~getthermstateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAThermStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint.
     * @param {String} deviceId The relay id
     * @param {String} moduleId The thermostat id
     * @param {module:api/DeprecatedApi~getthermstateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAThermStateResponse}
     */
    getthermstate(deviceId, moduleId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getthermstate");
      }
      // verify the required parameter 'moduleId' is set
      if (moduleId === undefined || moduleId === null) {
        throw new Error("Missing the required parameter 'moduleId' when calling getthermstate");
      }

      let pathParams = {
      };
      let queryParams = {
        'device_id': deviceId,
        'module_id': moduleId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAThermStateResponse;
      return this.apiClient.callApi(
        '/getthermstate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getuser operation.
     * @callback module:api/DeprecatedApi~getuserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The method getuser returns information about a user such as prefered language, prefered units, and list of devices. 
     * @param {module:api/DeprecatedApi~getuserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAUserResponse}
     */
    getuser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAUserResponse;
      return this.apiClient.callApi(
        '/getuser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
