/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NAWelcomeEventResponse from '../model/NAWelcomeEventResponse';
import NAWelcomeHomeDataResponse from '../model/NAWelcomeHomeDataResponse';
import NAWelcomePersonsAwayResponse from '../model/NAWelcomePersonsAwayResponse';
import NAWelcomePersonsHomeResponse from '../model/NAWelcomePersonsHomeResponse';
import NAWelcomeWebhookResponse from '../model/NAWelcomeWebhookResponse';

/**
* Welcome service.
* @module api/WelcomeApi
* @version 1.1.5
*/
export default class WelcomeApi {

    /**
    * Constructs a new WelcomeApi. 
    * @alias module:api/WelcomeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addwebhook operation.
     * @callback module:api/WelcomeApi~addwebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Links a callback url to a user. 
     * @param {String} url Your webhook callback url
     * @param {String} appType Webhooks are only available for Welcome, enter app_camera.
     * @param {module:api/WelcomeApi~addwebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeWebhookResponse}
     */
    addwebhook(url, appType, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling addwebhook");
      }
      // verify the required parameter 'appType' is set
      if (appType === undefined || appType === null) {
        throw new Error("Missing the required parameter 'appType' when calling addwebhook");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'app_type': appType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeWebhookResponse;
      return this.apiClient.callApi(
        '/addwebhook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dropwebhook operation.
     * @callback module:api/WelcomeApi~dropwebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dissociates a webhook from a user. 
     * @param {String} appType For Welcome, use app_camera
     * @param {module:api/WelcomeApi~dropwebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeWebhookResponse}
     */
    dropwebhook(appType, callback) {
      let postBody = null;
      // verify the required parameter 'appType' is set
      if (appType === undefined || appType === null) {
        throw new Error("Missing the required parameter 'appType' when calling dropwebhook");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_type': appType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeWebhookResponse;
      return this.apiClient.callApi(
        '/dropwebhook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getcamerapicture operation.
     * @callback module:api/WelcomeApi~getcamerapictureCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the snapshot associated to an event. 
     * @param {String} imageId id of the image (can be retrieved as 'id' in 'face' in Gethomedata, or as 'id' in 'snapshot' in Getnextevents, Getlasteventof and Geteventsuntil)
     * @param {String} key Security key to access snapshots.
     * @param {module:api/WelcomeApi~getcamerapictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getcamerapicture(imageId, key, callback) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getcamerapicture");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getcamerapicture");
      }

      let pathParams = {
      };
      let queryParams = {
        'image_id': imageId,
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/getcamerapicture', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geteventsuntil operation.
     * @callback module:api/WelcomeApi~geteventsuntilCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the snapshot associated to an event. 
     * @param {String} homeId ID of the Home you're interested in
     * @param {String} eventId Your request will retrieve all the events until this one
     * @param {module:api/WelcomeApi~geteventsuntilCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeEventResponse}
     */
    geteventsuntil(homeId, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'homeId' is set
      if (homeId === undefined || homeId === null) {
        throw new Error("Missing the required parameter 'homeId' when calling geteventsuntil");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling geteventsuntil");
      }

      let pathParams = {
      };
      let queryParams = {
        'home_id': homeId,
        'event_id': eventId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeEventResponse;
      return this.apiClient.callApi(
        '/geteventsuntil', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gethomedata operation.
     * @callback module:api/WelcomeApi~gethomedataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeHomeDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about users homes and cameras. 
     * @param {Object} opts Optional parameters
     * @param {String} [homeId] Specify if you're looking for the events of a specific Home.
     * @param {Number} [size] Number of events to retrieve. Default is `30`.
     * @param {module:api/WelcomeApi~gethomedataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeHomeDataResponse}
     */
    gethomedata(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'home_id': opts['homeId'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeHomeDataResponse;
      return this.apiClient.callApi(
        '/gethomedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getlasteventof operation.
     * @callback module:api/WelcomeApi~getlasteventofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns most recent events. 
     * @param {String} homeId ID of the Home you're interested in
     * @param {String} personId Your request will retrieve all events of the given home until the most recent event of the given person
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number of events to retrieve. Default is 30.
     * @param {module:api/WelcomeApi~getlasteventofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeEventResponse}
     */
    getlasteventof(homeId, personId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'homeId' is set
      if (homeId === undefined || homeId === null) {
        throw new Error("Missing the required parameter 'homeId' when calling getlasteventof");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling getlasteventof");
      }

      let pathParams = {
      };
      let queryParams = {
        'home_id': homeId,
        'person_id': personId,
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeEventResponse;
      return this.apiClient.callApi(
        '/getlasteventof', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getnextevents operation.
     * @callback module:api/WelcomeApi~getnexteventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomeEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns previous events. 
     * @param {String} homeId ID of the Home you're interested in
     * @param {String} eventId Your request will retrieve events occured before this one
     * @param {Object} opts Optional parameters
     * @param {Number} [size] Number of events to retrieve. Default is 30.
     * @param {module:api/WelcomeApi~getnexteventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomeEventResponse}
     */
    getnextevents(homeId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'homeId' is set
      if (homeId === undefined || homeId === null) {
        throw new Error("Missing the required parameter 'homeId' when calling getnextevents");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getnextevents");
      }

      let pathParams = {
      };
      let queryParams = {
        'home_id': homeId,
        'event_id': eventId,
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomeEventResponse;
      return this.apiClient.callApi(
        '/getnextevents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setpersonsaway operation.
     * @callback module:api/WelcomeApi~setpersonsawayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomePersonsAwayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the user’s timeline. 
     * @param {String} homeId ID of the Home you're interested in
     * @param {Object} opts Optional parameters
     * @param {String} [personId] If a person_id is specified, that person will be set as 'Away'. If no person_id is specified, the Home will be set as 'Empty'.
     * @param {module:api/WelcomeApi~setpersonsawayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomePersonsAwayResponse}
     */
    setpersonsaway(homeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'homeId' is set
      if (homeId === undefined || homeId === null) {
        throw new Error("Missing the required parameter 'homeId' when calling setpersonsaway");
      }

      let pathParams = {
      };
      let queryParams = {
        'home_id': homeId,
        'person_id': opts['personId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomePersonsAwayResponse;
      return this.apiClient.callApi(
        '/setpersonsaway', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setpersonshome operation.
     * @callback module:api/WelcomeApi~setpersonshomeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NAWelcomePersonsHomeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a person as 'At home'. 
     * @param {String} homeId ID of the Home you're interested in
     * @param {String} personIds List of persons IDs
     * @param {module:api/WelcomeApi~setpersonshomeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NAWelcomePersonsHomeResponse}
     */
    setpersonshome(homeId, personIds, callback) {
      let postBody = null;
      // verify the required parameter 'homeId' is set
      if (homeId === undefined || homeId === null) {
        throw new Error("Missing the required parameter 'homeId' when calling setpersonshome");
      }
      // verify the required parameter 'personIds' is set
      if (personIds === undefined || personIds === null) {
        throw new Error("Missing the required parameter 'personIds' when calling setpersonshome");
      }

      let pathParams = {
      };
      let queryParams = {
        'home_id': homeId,
        'person_ids': personIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['code_oauth', 'password_oauth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NAWelcomePersonsHomeResponse;
      return this.apiClient.callApi(
        '/setpersonshome', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
