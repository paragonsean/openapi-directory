/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NADashboardData from './NADashboardData';
import NADate from './NADate';
import NAHeatingSystem from './NAHeatingSystem';
import NAHouseModel from './NAHouseModel';
import NAObject from './NAObject';
import NAPlace from './NAPlace';
import NAThermProgram from './NAThermProgram';

/**
 * The NADevice model module.
 * @module model/NADevice
 * @version 1.1.5
 */
class NADevice {
    /**
     * Constructs a new <code>NADevice</code>.
     * @alias module:model/NADevice
     */
    constructor() { 
        
        NADevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NADevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NADevice} obj Optional instance to populate.
     * @return {module:model/NADevice} The populated <code>NADevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NADevice();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('behavior')) {
                obj['behavior'] = ApiClient.convertToType(data['behavior'], 'Number');
            }
            if (data.hasOwnProperty('cipher_id')) {
                obj['cipher_id'] = ApiClient.convertToType(data['cipher_id'], 'String');
            }
            if (data.hasOwnProperty('dashboard_data')) {
                obj['dashboard_data'] = NADashboardData.constructFromObject(data['dashboard_data']);
            }
            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], ['String']);
            }
            if (data.hasOwnProperty('date_setup')) {
                obj['date_setup'] = NADate.constructFromObject(data['date_setup']);
            }
            if (data.hasOwnProperty('firmware')) {
                obj['firmware'] = ApiClient.convertToType(data['firmware'], 'Number');
            }
            if (data.hasOwnProperty('first_pid_avail')) {
                obj['first_pid_avail'] = ApiClient.convertToType(data['first_pid_avail'], 'Boolean');
            }
            if (data.hasOwnProperty('heating_system')) {
                obj['heating_system'] = NAHeatingSystem.constructFromObject(data['heating_system']);
            }
            if (data.hasOwnProperty('house_model')) {
                obj['house_model'] = NAHouseModel.constructFromObject(data['house_model']);
            }
            if (data.hasOwnProperty('hw_version')) {
                obj['hw_version'] = ApiClient.convertToType(data['hw_version'], 'Number');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('last_fw_update')) {
                obj['last_fw_update'] = ApiClient.convertToType(data['last_fw_update'], 'Number');
            }
            if (data.hasOwnProperty('last_radio_store')) {
                obj['last_radio_store'] = ApiClient.convertToType(data['last_radio_store'], 'Number');
            }
            if (data.hasOwnProperty('last_status_store')) {
                obj['last_status_store'] = ApiClient.convertToType(data['last_status_store'], 'Number');
            }
            if (data.hasOwnProperty('last_upgrade')) {
                obj['last_upgrade'] = ApiClient.convertToType(data['last_upgrade'], 'Number');
            }
            if (data.hasOwnProperty('module_name')) {
                obj['module_name'] = ApiClient.convertToType(data['module_name'], 'String');
            }
            if (data.hasOwnProperty('modules')) {
                obj['modules'] = ApiClient.convertToType(data['modules'], ['String']);
            }
            if (data.hasOwnProperty('new_feature_avail')) {
                obj['new_feature_avail'] = ApiClient.convertToType(data['new_feature_avail'], 'Boolean');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = NAPlace.constructFromObject(data['place']);
            }
            if (data.hasOwnProperty('public_ext_data')) {
                obj['public_ext_data'] = ApiClient.convertToType(data['public_ext_data'], 'Boolean');
            }
            if (data.hasOwnProperty('setpoint')) {
                obj['setpoint'] = ApiClient.convertToType(data['setpoint'], Object);
            }
            if (data.hasOwnProperty('setpoint_default_duration')) {
                obj['setpoint_default_duration'] = ApiClient.convertToType(data['setpoint_default_duration'], 'Number');
            }
            if (data.hasOwnProperty('setpoint_order')) {
                obj['setpoint_order'] = ApiClient.convertToType(data['setpoint_order'], {'String': [NAObject]});
            }
            if (data.hasOwnProperty('station_name')) {
                obj['station_name'] = ApiClient.convertToType(data['station_name'], 'String');
            }
            if (data.hasOwnProperty('therm_program')) {
                obj['therm_program'] = ApiClient.convertToType(data['therm_program'], {'String': NAThermProgram});
            }
            if (data.hasOwnProperty('therm_program_backup')) {
                obj['therm_program_backup'] = ApiClient.convertToType(data['therm_program_backup'], {'String': [NAThermProgram]});
            }
            if (data.hasOwnProperty('therm_program_order')) {
                obj['therm_program_order'] = ApiClient.convertToType(data['therm_program_order'], {'String': [NAObject]});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('udp_conn')) {
                obj['udp_conn'] = ApiClient.convertToType(data['udp_conn'], 'Boolean');
            }
            if (data.hasOwnProperty('user_owner')) {
                obj['user_owner'] = ApiClient.convertToType(data['user_owner'], ['String']);
            }
            if (data.hasOwnProperty('wifi_status')) {
                obj['wifi_status'] = ApiClient.convertToType(data['wifi_status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NADevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NADevice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // ensure the json data is a string
        if (data['cipher_id'] && !(typeof data['cipher_id'] === 'string' || data['cipher_id'] instanceof String)) {
            throw new Error("Expected the field `cipher_id` to be a primitive type in the JSON string but got " + data['cipher_id']);
        }
        // validate the optional field `dashboard_data`
        if (data['dashboard_data']) { // data not null
          NADashboardData.validateJSON(data['dashboard_data']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['data_type'])) {
            throw new Error("Expected the field `data_type` to be an array in the JSON data but got " + data['data_type']);
        }
        // validate the optional field `date_setup`
        if (data['date_setup']) { // data not null
          NADate.validateJSON(data['date_setup']);
        }
        // validate the optional field `heating_system`
        if (data['heating_system']) { // data not null
          NAHeatingSystem.validateJSON(data['heating_system']);
        }
        // validate the optional field `house_model`
        if (data['house_model']) { // data not null
          NAHouseModel.validateJSON(data['house_model']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['module_name'] && !(typeof data['module_name'] === 'string' || data['module_name'] instanceof String)) {
            throw new Error("Expected the field `module_name` to be a primitive type in the JSON string but got " + data['module_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modules'])) {
            throw new Error("Expected the field `modules` to be an array in the JSON data but got " + data['modules']);
        }
        // validate the optional field `place`
        if (data['place']) { // data not null
          NAPlace.validateJSON(data['place']);
        }
        // ensure the json data is a string
        if (data['station_name'] && !(typeof data['station_name'] === 'string' || data['station_name'] instanceof String)) {
            throw new Error("Expected the field `station_name` to be a primitive type in the JSON string but got " + data['station_name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['user_owner'])) {
            throw new Error("Expected the field `user_owner` to be an array in the JSON data but got " + data['user_owner']);
        }

        return true;
    }


}



/**
 * @member {String} _id
 */
NADevice.prototype['_id'] = undefined;

/**
 * @member {Number} behavior
 */
NADevice.prototype['behavior'] = undefined;

/**
 * @member {String} cipher_id
 */
NADevice.prototype['cipher_id'] = undefined;

/**
 * @member {module:model/NADashboardData} dashboard_data
 */
NADevice.prototype['dashboard_data'] = undefined;

/**
 * @member {Array.<String>} data_type
 */
NADevice.prototype['data_type'] = undefined;

/**
 * @member {module:model/NADate} date_setup
 */
NADevice.prototype['date_setup'] = undefined;

/**
 * @member {Number} firmware
 */
NADevice.prototype['firmware'] = undefined;

/**
 * @member {Boolean} first_pid_avail
 */
NADevice.prototype['first_pid_avail'] = undefined;

/**
 * @member {module:model/NAHeatingSystem} heating_system
 */
NADevice.prototype['heating_system'] = undefined;

/**
 * @member {module:model/NAHouseModel} house_model
 */
NADevice.prototype['house_model'] = undefined;

/**
 * @member {Number} hw_version
 */
NADevice.prototype['hw_version'] = undefined;

/**
 * @member {String} ip
 */
NADevice.prototype['ip'] = undefined;

/**
 * @member {Number} last_fw_update
 */
NADevice.prototype['last_fw_update'] = undefined;

/**
 * @member {Number} last_radio_store
 */
NADevice.prototype['last_radio_store'] = undefined;

/**
 * @member {Number} last_status_store
 */
NADevice.prototype['last_status_store'] = undefined;

/**
 * @member {Number} last_upgrade
 */
NADevice.prototype['last_upgrade'] = undefined;

/**
 * @member {String} module_name
 */
NADevice.prototype['module_name'] = undefined;

/**
 * It lists which modules are linked with this device
 * @member {Array.<String>} modules
 */
NADevice.prototype['modules'] = undefined;

/**
 * @member {Boolean} new_feature_avail
 */
NADevice.prototype['new_feature_avail'] = undefined;

/**
 * @member {module:model/NAPlace} place
 */
NADevice.prototype['place'] = undefined;

/**
 * @member {Boolean} public_ext_data
 */
NADevice.prototype['public_ext_data'] = undefined;

/**
 * @member {Object} setpoint
 */
NADevice.prototype['setpoint'] = undefined;

/**
 * @member {Number} setpoint_default_duration
 */
NADevice.prototype['setpoint_default_duration'] = undefined;

/**
 * @member {Object.<String, Array.<module:model/NAObject>>} setpoint_order
 */
NADevice.prototype['setpoint_order'] = undefined;

/**
 * @member {String} station_name
 */
NADevice.prototype['station_name'] = undefined;

/**
 * @member {Object.<String, module:model/NAThermProgram>} therm_program
 */
NADevice.prototype['therm_program'] = undefined;

/**
 * @member {Object.<String, Array.<module:model/NAThermProgram>>} therm_program_backup
 */
NADevice.prototype['therm_program_backup'] = undefined;

/**
 * @member {Object.<String, Array.<module:model/NAObject>>} therm_program_order
 */
NADevice.prototype['therm_program_order'] = undefined;

/**
 * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
 * @member {String} type
 */
NADevice.prototype['type'] = undefined;

/**
 * @member {Boolean} udp_conn
 */
NADevice.prototype['udp_conn'] = undefined;

/**
 * @member {Array.<String>} user_owner
 */
NADevice.prototype['user_owner'] = undefined;

/**
 * It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 
 * @member {Number} wifi_status
 */
NADevice.prototype['wifi_status'] = undefined;






export default NADevice;

