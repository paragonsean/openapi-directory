/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NASetpoint from './NASetpoint';
import NASetpointLog from './NASetpointLog';
import NAThermMeasure from './NAThermMeasure';
import NAThermProgram from './NAThermProgram';

/**
 * The NAThermostat model module.
 * @module model/NAThermostat
 * @version 1.1.5
 */
class NAThermostat {
    /**
     * Constructs a new <code>NAThermostat</code>.
     * @alias module:model/NAThermostat
     */
    constructor() { 
        
        NAThermostat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NAThermostat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NAThermostat} obj Optional instance to populate.
     * @return {module:model/NAThermostat} The populated <code>NAThermostat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NAThermostat();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('battery_percent')) {
                obj['battery_percent'] = ApiClient.convertToType(data['battery_percent'], 'Number');
            }
            if (data.hasOwnProperty('battery_vp')) {
                obj['battery_vp'] = ApiClient.convertToType(data['battery_vp'], 'Number');
            }
            if (data.hasOwnProperty('firmware')) {
                obj['firmware'] = ApiClient.convertToType(data['firmware'], 'Number');
            }
            if (data.hasOwnProperty('last_message')) {
                obj['last_message'] = ApiClient.convertToType(data['last_message'], 'Number');
            }
            if (data.hasOwnProperty('last_therm_seen')) {
                obj['last_therm_seen'] = ApiClient.convertToType(data['last_therm_seen'], 'Number');
            }
            if (data.hasOwnProperty('measured')) {
                obj['measured'] = NAThermMeasure.constructFromObject(data['measured']);
            }
            if (data.hasOwnProperty('module_name')) {
                obj['module_name'] = ApiClient.convertToType(data['module_name'], 'String');
            }
            if (data.hasOwnProperty('rf_status')) {
                obj['rf_status'] = ApiClient.convertToType(data['rf_status'], 'Number');
            }
            if (data.hasOwnProperty('setpoint')) {
                obj['setpoint'] = NASetpoint.constructFromObject(data['setpoint']);
            }
            if (data.hasOwnProperty('setpoint_history')) {
                obj['setpoint_history'] = ApiClient.convertToType(data['setpoint_history'], [NASetpointLog]);
            }
            if (data.hasOwnProperty('setpoint_order')) {
                obj['setpoint_order'] = NASetpoint.constructFromObject(data['setpoint_order']);
            }
            if (data.hasOwnProperty('therm_orientation')) {
                obj['therm_orientation'] = ApiClient.convertToType(data['therm_orientation'], 'Number');
            }
            if (data.hasOwnProperty('therm_program_list')) {
                obj['therm_program_list'] = ApiClient.convertToType(data['therm_program_list'], [NAThermProgram]);
            }
            if (data.hasOwnProperty('therm_relay_cmd')) {
                obj['therm_relay_cmd'] = ApiClient.convertToType(data['therm_relay_cmd'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NAThermostat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NAThermostat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_id'] && !(typeof data['_id'] === 'string' || data['_id'] instanceof String)) {
            throw new Error("Expected the field `_id` to be a primitive type in the JSON string but got " + data['_id']);
        }
        // validate the optional field `measured`
        if (data['measured']) { // data not null
          NAThermMeasure.validateJSON(data['measured']);
        }
        // ensure the json data is a string
        if (data['module_name'] && !(typeof data['module_name'] === 'string' || data['module_name'] instanceof String)) {
            throw new Error("Expected the field `module_name` to be a primitive type in the JSON string but got " + data['module_name']);
        }
        // validate the optional field `setpoint`
        if (data['setpoint']) { // data not null
          NASetpoint.validateJSON(data['setpoint']);
        }
        if (data['setpoint_history']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['setpoint_history'])) {
                throw new Error("Expected the field `setpoint_history` to be an array in the JSON data but got " + data['setpoint_history']);
            }
            // validate the optional field `setpoint_history` (array)
            for (const item of data['setpoint_history']) {
                NASetpointLog.validateJSON(item);
            };
        }
        // validate the optional field `setpoint_order`
        if (data['setpoint_order']) { // data not null
          NASetpoint.validateJSON(data['setpoint_order']);
        }
        if (data['therm_program_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['therm_program_list'])) {
                throw new Error("Expected the field `therm_program_list` to be an array in the JSON data but got " + data['therm_program_list']);
            }
            // validate the optional field `therm_program_list` (array)
            for (const item of data['therm_program_list']) {
                NAThermProgram.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} _id
 */
NAThermostat.prototype['_id'] = undefined;

/**
 * It contains the current battery level in percentage.
 * @member {Number} battery_percent
 */
NAThermostat.prototype['battery_percent'] = undefined;

/**
 * It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 
 * @member {Number} battery_vp
 */
NAThermostat.prototype['battery_vp'] = undefined;

/**
 * @member {Number} firmware
 */
NAThermostat.prototype['firmware'] = undefined;

/**
 * @member {Number} last_message
 */
NAThermostat.prototype['last_message'] = undefined;

/**
 * @member {Number} last_therm_seen
 */
NAThermostat.prototype['last_therm_seen'] = undefined;

/**
 * @member {module:model/NAThermMeasure} measured
 */
NAThermostat.prototype['measured'] = undefined;

/**
 * @member {String} module_name
 */
NAThermostat.prototype['module_name'] = undefined;

/**
 * \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 
 * @member {Number} rf_status
 */
NAThermostat.prototype['rf_status'] = undefined;

/**
 * @member {module:model/NASetpoint} setpoint
 */
NAThermostat.prototype['setpoint'] = undefined;

/**
 * The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered.
 * @member {Array.<module:model/NASetpointLog>} setpoint_history
 */
NAThermostat.prototype['setpoint_history'] = undefined;

/**
 * @member {module:model/NASetpoint} setpoint_order
 */
NAThermostat.prototype['setpoint_order'] = undefined;

/**
 * @member {Number} therm_orientation
 */
NAThermostat.prototype['therm_orientation'] = undefined;

/**
 * List of the weekly heating planning used by the thermostat
 * @member {Array.<module:model/NAThermProgram>} therm_program_list
 */
NAThermostat.prototype['therm_program_list'] = undefined;

/**
 * @member {Number} therm_relay_cmd
 */
NAThermostat.prototype['therm_relay_cmd'] = undefined;

/**
 * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
 * @member {String} type
 */
NAThermostat.prototype['type'] = undefined;






export default NAThermostat;

