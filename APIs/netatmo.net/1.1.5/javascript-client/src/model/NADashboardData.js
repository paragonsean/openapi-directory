/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NADashboardData model module.
 * @module model/NADashboardData
 * @version 1.1.5
 */
class NADashboardData {
    /**
     * Constructs a new <code>NADashboardData</code>.
     * @alias module:model/NADashboardData
     */
    constructor() { 
        
        NADashboardData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NADashboardData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NADashboardData} obj Optional instance to populate.
     * @return {module:model/NADashboardData} The populated <code>NADashboardData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NADashboardData();

            if (data.hasOwnProperty('AbsolutePressure')) {
                obj['AbsolutePressure'] = ApiClient.convertToType(data['AbsolutePressure'], 'Number');
            }
            if (data.hasOwnProperty('BoilerOff')) {
                obj['BoilerOff'] = ApiClient.convertToType(data['BoilerOff'], 'Number');
            }
            if (data.hasOwnProperty('BoilerOn')) {
                obj['BoilerOn'] = ApiClient.convertToType(data['BoilerOn'], 'Number');
            }
            if (data.hasOwnProperty('CO2')) {
                obj['CO2'] = ApiClient.convertToType(data['CO2'], 'Number');
            }
            if (data.hasOwnProperty('GustAngle')) {
                obj['GustAngle'] = ApiClient.convertToType(data['GustAngle'], 'Number');
            }
            if (data.hasOwnProperty('GustStrength')) {
                obj['GustStrength'] = ApiClient.convertToType(data['GustStrength'], 'Number');
            }
            if (data.hasOwnProperty('Humidity')) {
                obj['Humidity'] = ApiClient.convertToType(data['Humidity'], 'Number');
            }
            if (data.hasOwnProperty('Noise')) {
                obj['Noise'] = ApiClient.convertToType(data['Noise'], 'Number');
            }
            if (data.hasOwnProperty('Pressure')) {
                obj['Pressure'] = ApiClient.convertToType(data['Pressure'], 'Number');
            }
            if (data.hasOwnProperty('Rain')) {
                obj['Rain'] = ApiClient.convertToType(data['Rain'], 'Number');
            }
            if (data.hasOwnProperty('Temperature')) {
                obj['Temperature'] = ApiClient.convertToType(data['Temperature'], 'Number');
            }
            if (data.hasOwnProperty('WindAngle')) {
                obj['WindAngle'] = ApiClient.convertToType(data['WindAngle'], 'Number');
            }
            if (data.hasOwnProperty('WindStrength')) {
                obj['WindStrength'] = ApiClient.convertToType(data['WindStrength'], 'Number');
            }
            if (data.hasOwnProperty('date_max_temp')) {
                obj['date_max_temp'] = ApiClient.convertToType(data['date_max_temp'], 'Number');
            }
            if (data.hasOwnProperty('date_max_wind_str')) {
                obj['date_max_wind_str'] = ApiClient.convertToType(data['date_max_wind_str'], 'Number');
            }
            if (data.hasOwnProperty('date_min_temp')) {
                obj['date_min_temp'] = ApiClient.convertToType(data['date_min_temp'], 'Number');
            }
            if (data.hasOwnProperty('device_id')) {
                obj['device_id'] = ApiClient.convertToType(data['device_id'], 'Number');
            }
            if (data.hasOwnProperty('health_idx')) {
                obj['health_idx'] = ApiClient.convertToType(data['health_idx'], 'Number');
            }
            if (data.hasOwnProperty('max_temp')) {
                obj['max_temp'] = ApiClient.convertToType(data['max_temp'], 'Number');
            }
            if (data.hasOwnProperty('max_wind_str')) {
                obj['max_wind_str'] = ApiClient.convertToType(data['max_wind_str'], 'Number');
            }
            if (data.hasOwnProperty('min_temp')) {
                obj['min_temp'] = ApiClient.convertToType(data['min_temp'], 'Number');
            }
            if (data.hasOwnProperty('pressure_trend')) {
                obj['pressure_trend'] = ApiClient.convertToType(data['pressure_trend'], 'String');
            }
            if (data.hasOwnProperty('sum_rain_1')) {
                obj['sum_rain_1'] = ApiClient.convertToType(data['sum_rain_1'], 'Number');
            }
            if (data.hasOwnProperty('sum_rain_24')) {
                obj['sum_rain_24'] = ApiClient.convertToType(data['sum_rain_24'], 'Number');
            }
            if (data.hasOwnProperty('temp_trend')) {
                obj['temp_trend'] = ApiClient.convertToType(data['temp_trend'], 'String');
            }
            if (data.hasOwnProperty('time_utc')) {
                obj['time_utc'] = ApiClient.convertToType(data['time_utc'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NADashboardData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NADashboardData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pressure_trend'] && !(typeof data['pressure_trend'] === 'string' || data['pressure_trend'] instanceof String)) {
            throw new Error("Expected the field `pressure_trend` to be a primitive type in the JSON string but got " + data['pressure_trend']);
        }
        // ensure the json data is a string
        if (data['temp_trend'] && !(typeof data['temp_trend'] === 'string' || data['temp_trend'] instanceof String)) {
            throw new Error("Expected the field `temp_trend` to be a primitive type in the JSON string but got " + data['temp_trend']);
        }

        return true;
    }


}



/**
 * Real measured pressure @ time_utc (in mb)
 * @member {Number} AbsolutePressure
 */
NADashboardData.prototype['AbsolutePressure'] = undefined;

/**
 * @member {Number} BoilerOff
 */
NADashboardData.prototype['BoilerOff'] = undefined;

/**
 * @member {Number} BoilerOn
 */
NADashboardData.prototype['BoilerOn'] = undefined;

/**
 * Last Co2 measured @ time_utc (in ppm)
 * @member {Number} CO2
 */
NADashboardData.prototype['CO2'] = undefined;

/**
 * Direction of the last 5 min highest gust wind
 * @member {Number} GustAngle
 */
NADashboardData.prototype['GustAngle'] = undefined;

/**
 * Speed of the last 5 min highest gust wind
 * @member {Number} GustStrength
 */
NADashboardData.prototype['GustStrength'] = undefined;

/**
 * Last humidity measured @ time_utc (in %)
 * @member {Number} Humidity
 */
NADashboardData.prototype['Humidity'] = undefined;

/**
 * Last noise measured @ time_utc (in db)
 * @member {Number} Noise
 */
NADashboardData.prototype['Noise'] = undefined;

/**
 * Last Sea level pressure measured @ time_utc (in mb)
 * @member {Number} Pressure
 */
NADashboardData.prototype['Pressure'] = undefined;

/**
 * Last rain measured (in mm)
 * @member {Number} Rain
 */
NADashboardData.prototype['Rain'] = undefined;

/**
 * Last temperature measure @ time_utc (in °C)
 * @member {Number} Temperature
 */
NADashboardData.prototype['Temperature'] = undefined;

/**
 * Current 5 min average wind direction measured @ time_utc (in °)
 * @member {Number} WindAngle
 */
NADashboardData.prototype['WindAngle'] = undefined;

/**
 * Current 5 min average wind speed measured @ time_utc (in km/h)
 * @member {Number} WindStrength
 */
NADashboardData.prototype['WindStrength'] = undefined;

/**
 * Timestamp when max temperature was measured
 * @member {Number} date_max_temp
 */
NADashboardData.prototype['date_max_temp'] = undefined;

/**
 * Timestamp when max wind strength was measured
 * @member {Number} date_max_wind_str
 */
NADashboardData.prototype['date_max_wind_str'] = undefined;

/**
 * Timestamp when min temperature was measured
 * @member {Number} date_min_temp
 */
NADashboardData.prototype['date_min_temp'] = undefined;

/**
 * @member {Number} device_id
 */
NADashboardData.prototype['device_id'] = undefined;

/**
 * Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy
 * @member {Number} health_idx
 */
NADashboardData.prototype['health_idx'] = undefined;

/**
 * Min temperature of the day (measured @ date_min_temp)
 * @member {Number} max_temp
 */
NADashboardData.prototype['max_temp'] = undefined;

/**
 * @member {Number} max_wind_str
 */
NADashboardData.prototype['max_wind_str'] = undefined;

/**
 * Max temperature of the day (measured @ date_max_temp)
 * @member {Number} min_temp
 */
NADashboardData.prototype['min_temp'] = undefined;

/**
 * Pressure evolution trend
 * @member {String} pressure_trend
 */
NADashboardData.prototype['pressure_trend'] = undefined;

/**
 * Amount of rain in last hour
 * @member {Number} sum_rain_1
 */
NADashboardData.prototype['sum_rain_1'] = undefined;

/**
 * Amount of rain today
 * @member {Number} sum_rain_24
 */
NADashboardData.prototype['sum_rain_24'] = undefined;

/**
 * Temperature evolution trend
 * @member {String} temp_trend
 */
NADashboardData.prototype['temp_trend'] = undefined;

/**
 * @member {Number} time_utc
 */
NADashboardData.prototype['time_utc'] = undefined;






export default NADashboardData;

