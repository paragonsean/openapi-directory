/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Netatmo);
  }
}(this, function(expect, Netatmo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Netatmo.NAThermStateBody();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NAThermStateBody', function() {
    it('should create an instance of NAThermStateBody', function() {
      // uncomment below and update the code to test NAThermStateBody
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be.a(Netatmo.NAThermStateBody);
    });

    it('should have the property batteryPercent (base name: "battery_percent")', function() {
      // uncomment below and update the code to test the property batteryPercent
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property batteryVp (base name: "battery_vp")', function() {
      // uncomment below and update the code to test the property batteryVp
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property lastPlugSeen (base name: "last_plug_seen")', function() {
      // uncomment below and update the code to test the property lastPlugSeen
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property lastThermSeen (base name: "last_therm_seen")', function() {
      // uncomment below and update the code to test the property lastThermSeen
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property measured (base name: "measured")', function() {
      // uncomment below and update the code to test the property measured
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property plugConnectedBoiler (base name: "plug_connected_boiler")', function() {
      // uncomment below and update the code to test the property plugConnectedBoiler
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property rfStatus (base name: "rf_status")', function() {
      // uncomment below and update the code to test the property rfStatus
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property setpoint (base name: "setpoint")', function() {
      // uncomment below and update the code to test the property setpoint
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property setpointOrder (base name: "setpoint_order")', function() {
      // uncomment below and update the code to test the property setpointOrder
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property thermOrientation (base name: "therm_orientation")', function() {
      // uncomment below and update the code to test the property thermOrientation
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property thermProgram (base name: "therm_program")', function() {
      // uncomment below and update the code to test the property thermProgram
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property thermProgramBackup (base name: "therm_program_backup")', function() {
      // uncomment below and update the code to test the property thermProgramBackup
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property thermProgramOrder (base name: "therm_program_order")', function() {
      // uncomment below and update the code to test the property thermProgramOrder
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property thermRelayCmd (base name: "therm_relay_cmd")', function() {
      // uncomment below and update the code to test the property thermRelayCmd
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property udpConn (base name: "udp_conn")', function() {
      // uncomment below and update the code to test the property udpConn
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

    it('should have the property wifiStatus (base name: "wifi_status")', function() {
      // uncomment below and update the code to test the property wifiStatus
      //var instance = new Netatmo.NAThermStateBody();
      //expect(instance).to.be();
    });

  });

}));
