/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Netatmo);
  }
}(this, function(expect, Netatmo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Netatmo.NAPlace();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NAPlace', function() {
    it('should create an instance of NAPlace', function() {
      // uncomment below and update the code to test NAPlace
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be.a(Netatmo.NAPlace);
    });

    it('should have the property altitude (base name: "altitude")', function() {
      // uncomment below and update the code to test the property altitude
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property fromIp (base name: "from_ip")', function() {
      // uncomment below and update the code to test the property fromIp
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property improveLocProposed (base name: "improveLocProposed")', function() {
      // uncomment below and update the code to test the property improveLocProposed
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

    it('should have the property trustLocation (base name: "trust_location")', function() {
      // uncomment below and update the code to test the property trustLocation
      //var instance = new Netatmo.NAPlace();
      //expect(instance).to.be();
    });

  });

}));
