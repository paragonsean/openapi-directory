/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Netatmo);
  }
}(this, function(expect, Netatmo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Netatmo.NAHouseModel();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NAHouseModel', function() {
    it('should create an instance of NAHouseModel', function() {
      // uncomment below and update the code to test NAHouseModel
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be.a(Netatmo.NAHouseModel);
    });

    it('should have the property algoType (base name: "algo_type")', function() {
      // uncomment below and update the code to test the property algoType
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property ca (base name: "ca")', function() {
      // uncomment below and update the code to test the property ca
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property extTemps (base name: "ext_temps")', function() {
      // uncomment below and update the code to test the property extTemps
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property firstAnticipateAvail (base name: "first_anticipate_avail")', function() {
      // uncomment below and update the code to test the property firstAnticipateAvail
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property firstPidAvail (base name: "first_pid_avail")', function() {
      // uncomment below and update the code to test the property firstPidAvail
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property gefs (base name: "gefs")', function() {
      // uncomment below and update the code to test the property gefs
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property inUse (base name: "in_use")', function() {
      // uncomment below and update the code to test the property inUse
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property lastComputeTry (base name: "last_compute_try")', function() {
      // uncomment below and update the code to test the property lastComputeTry
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property linkStation (base name: "link_station")', function() {
      // uncomment below and update the code to test the property linkStation
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property pidAlgo (base name: "pid_algo")', function() {
      // uncomment below and update the code to test the property pidAlgo
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property preferedAlgoType (base name: "prefered_algo_type")', function() {
      // uncomment below and update the code to test the property preferedAlgoType
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property simpleAlgo (base name: "simple_algo")', function() {
      // uncomment below and update the code to test the property simpleAlgo
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property station (base name: "station")', function() {
      // uncomment below and update the code to test the property station
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property stationFirsttimeAnticipate (base name: "station_firsttime_anticipate")', function() {
      // uncomment below and update the code to test the property stationFirsttimeAnticipate
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "time")', function() {
      // uncomment below and update the code to test the property time
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property timeAlgoChanged (base name: "time_algo_changed")', function() {
      // uncomment below and update the code to test the property timeAlgoChanged
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

    it('should have the property timePidComputed (base name: "time_pid_computed")', function() {
      // uncomment below and update the code to test the property timePidComputed
      //var instance = new Netatmo.NAHouseModel();
      //expect(instance).to.be();
    });

  });

}));
