/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Netatmo);
  }
}(this, function(expect, Netatmo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Netatmo.NAMain();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NAMain', function() {
    it('should create an instance of NAMain', function() {
      // uncomment below and update the code to test NAMain
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be.a(Netatmo.NAMain);
    });

    it('should have the property id (base name: "_id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property cipherId (base name: "cipher_id")', function() {
      // uncomment below and update the code to test the property cipherId
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property co2Calibrating (base name: "co2_calibrating")', function() {
      // uncomment below and update the code to test the property co2Calibrating
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property dashboardData (base name: "dashboard_data")', function() {
      // uncomment below and update the code to test the property dashboardData
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property dataType (base name: "data_type")', function() {
      // uncomment below and update the code to test the property dataType
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property dateSetup (base name: "date_setup")', function() {
      // uncomment below and update the code to test the property dateSetup
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property favorite (base name: "favorite")', function() {
      // uncomment below and update the code to test the property favorite
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property firmware (base name: "firmware")', function() {
      // uncomment below and update the code to test the property firmware
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property lastSetup (base name: "last_setup")', function() {
      // uncomment below and update the code to test the property lastSetup
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property lastStatusStore (base name: "last_status_store")', function() {
      // uncomment below and update the code to test the property lastStatusStore
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property lastUpgrade (base name: "last_upgrade")', function() {
      // uncomment below and update the code to test the property lastUpgrade
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property moduleName (base name: "module_name")', function() {
      // uncomment below and update the code to test the property moduleName
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property modules (base name: "modules")', function() {
      // uncomment below and update the code to test the property modules
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property place (base name: "place")', function() {
      // uncomment below and update the code to test the property place
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property reachable (base name: "reachable")', function() {
      // uncomment below and update the code to test the property reachable
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "read_only")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property stationName (base name: "station_name")', function() {
      // uncomment below and update the code to test the property stationName
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

    it('should have the property wifiStatus (base name: "wifi_status")', function() {
      // uncomment below and update the code to test the property wifiStatus
      //var instance = new Netatmo.NAMain();
      //expect(instance).to.be();
    });

  });

}));
