/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Netatmo);
  }
}(this, function(expect, Netatmo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Netatmo.NAUserAdministrative();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NAUserAdministrative', function() {
    it('should create an instance of NAUserAdministrative', function() {
      // uncomment below and update the code to test NAUserAdministrative
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be.a(Netatmo.NAUserAdministrative);
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property feelLikeAlgo (base name: "feel_like_algo")', function() {
      // uncomment below and update the code to test the property feelLikeAlgo
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property lang (base name: "lang")', function() {
      // uncomment below and update the code to test the property lang
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property pressureunit (base name: "pressureunit")', function() {
      // uncomment below and update the code to test the property pressureunit
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property regLocale (base name: "reg_locale")', function() {
      // uncomment below and update the code to test the property regLocale
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property unit (base name: "unit")', function() {
      // uncomment below and update the code to test the property unit
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

    it('should have the property windunit (base name: "windunit")', function() {
      // uncomment below and update the code to test the property windunit
      //var instance = new Netatmo.NAUserAdministrative();
      //expect(instance).to.be();
    });

  });

}));
