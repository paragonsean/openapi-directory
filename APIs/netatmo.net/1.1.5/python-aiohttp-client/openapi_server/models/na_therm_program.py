# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_time_table_item import NATimeTableItem
from openapi_server.models.na_zone import NAZone
from openapi_server import util


class NAThermProgram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, program_id: str=None, selected: bool=None, timetable: List[NATimeTableItem]=None, zones: List[NAZone]=None):
        """NAThermProgram - a model defined in OpenAPI

        :param name: The name of this NAThermProgram.
        :param program_id: The program_id of this NAThermProgram.
        :param selected: The selected of this NAThermProgram.
        :param timetable: The timetable of this NAThermProgram.
        :param zones: The zones of this NAThermProgram.
        """
        self.openapi_types = {
            'name': str,
            'program_id': str,
            'selected': bool,
            'timetable': List[NATimeTableItem],
            'zones': List[NAZone]
        }

        self.attribute_map = {
            'name': 'name',
            'program_id': 'program_id',
            'selected': 'selected',
            'timetable': 'timetable',
            'zones': 'zones'
        }

        self._name = name
        self._program_id = program_id
        self._selected = selected
        self._timetable = timetable
        self._zones = zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAThermProgram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAThermProgram of this NAThermProgram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NAThermProgram.


        :return: The name of this NAThermProgram.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NAThermProgram.


        :param name: The name of this NAThermProgram.
        :type name: str
        """

        self._name = name

    @property
    def program_id(self):
        """Gets the program_id of this NAThermProgram.


        :return: The program_id of this NAThermProgram.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this NAThermProgram.


        :param program_id: The program_id of this NAThermProgram.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def selected(self):
        """Gets the selected of this NAThermProgram.


        :return: The selected of this NAThermProgram.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this NAThermProgram.


        :param selected: The selected of this NAThermProgram.
        :type selected: bool
        """

        self._selected = selected

    @property
    def timetable(self):
        """Gets the timetable of this NAThermProgram.


        :return: The timetable of this NAThermProgram.
        :rtype: List[NATimeTableItem]
        """
        return self._timetable

    @timetable.setter
    def timetable(self, timetable):
        """Sets the timetable of this NAThermProgram.


        :param timetable: The timetable of this NAThermProgram.
        :type timetable: List[NATimeTableItem]
        """

        self._timetable = timetable

    @property
    def zones(self):
        """Gets the zones of this NAThermProgram.


        :return: The zones of this NAThermProgram.
        :rtype: List[NAZone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this NAThermProgram.


        :param zones: The zones of this NAThermProgram.
        :type zones: List[NAZone]
        """

        self._zones = zones
