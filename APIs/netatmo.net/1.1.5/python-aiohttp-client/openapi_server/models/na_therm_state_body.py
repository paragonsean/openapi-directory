# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_setpoint import NASetpoint
from openapi_server.models.na_therm_measure import NAThermMeasure
from openapi_server.models.na_therm_program import NAThermProgram
from openapi_server import util


class NAThermStateBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery_percent: int=None, battery_vp: int=None, last_plug_seen: int=None, last_therm_seen: int=None, measured: NAThermMeasure=None, plug_connected_boiler: int=None, rf_status: int=None, setpoint: NASetpoint=None, setpoint_order: NASetpoint=None, therm_orientation: int=None, therm_program: NAThermProgram=None, therm_program_backup: List[NAThermProgram]=None, therm_program_order: NAThermProgram=None, therm_relay_cmd: int=None, udp_conn: bool=None, wifi_status: int=None):
        """NAThermStateBody - a model defined in OpenAPI

        :param battery_percent: The battery_percent of this NAThermStateBody.
        :param battery_vp: The battery_vp of this NAThermStateBody.
        :param last_plug_seen: The last_plug_seen of this NAThermStateBody.
        :param last_therm_seen: The last_therm_seen of this NAThermStateBody.
        :param measured: The measured of this NAThermStateBody.
        :param plug_connected_boiler: The plug_connected_boiler of this NAThermStateBody.
        :param rf_status: The rf_status of this NAThermStateBody.
        :param setpoint: The setpoint of this NAThermStateBody.
        :param setpoint_order: The setpoint_order of this NAThermStateBody.
        :param therm_orientation: The therm_orientation of this NAThermStateBody.
        :param therm_program: The therm_program of this NAThermStateBody.
        :param therm_program_backup: The therm_program_backup of this NAThermStateBody.
        :param therm_program_order: The therm_program_order of this NAThermStateBody.
        :param therm_relay_cmd: The therm_relay_cmd of this NAThermStateBody.
        :param udp_conn: The udp_conn of this NAThermStateBody.
        :param wifi_status: The wifi_status of this NAThermStateBody.
        """
        self.openapi_types = {
            'battery_percent': int,
            'battery_vp': int,
            'last_plug_seen': int,
            'last_therm_seen': int,
            'measured': NAThermMeasure,
            'plug_connected_boiler': int,
            'rf_status': int,
            'setpoint': NASetpoint,
            'setpoint_order': NASetpoint,
            'therm_orientation': int,
            'therm_program': NAThermProgram,
            'therm_program_backup': List[NAThermProgram],
            'therm_program_order': NAThermProgram,
            'therm_relay_cmd': int,
            'udp_conn': bool,
            'wifi_status': int
        }

        self.attribute_map = {
            'battery_percent': 'battery_percent',
            'battery_vp': 'battery_vp',
            'last_plug_seen': 'last_plug_seen',
            'last_therm_seen': 'last_therm_seen',
            'measured': 'measured',
            'plug_connected_boiler': 'plug_connected_boiler',
            'rf_status': 'rf_status',
            'setpoint': 'setpoint',
            'setpoint_order': 'setpoint_order',
            'therm_orientation': 'therm_orientation',
            'therm_program': 'therm_program',
            'therm_program_backup': 'therm_program_backup',
            'therm_program_order': 'therm_program_order',
            'therm_relay_cmd': 'therm_relay_cmd',
            'udp_conn': 'udp_conn',
            'wifi_status': 'wifi_status'
        }

        self._battery_percent = battery_percent
        self._battery_vp = battery_vp
        self._last_plug_seen = last_plug_seen
        self._last_therm_seen = last_therm_seen
        self._measured = measured
        self._plug_connected_boiler = plug_connected_boiler
        self._rf_status = rf_status
        self._setpoint = setpoint
        self._setpoint_order = setpoint_order
        self._therm_orientation = therm_orientation
        self._therm_program = therm_program
        self._therm_program_backup = therm_program_backup
        self._therm_program_order = therm_program_order
        self._therm_relay_cmd = therm_relay_cmd
        self._udp_conn = udp_conn
        self._wifi_status = wifi_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAThermStateBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAThermStateBody of this NAThermStateBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery_percent(self):
        """Gets the battery_percent of this NAThermStateBody.

        It contains the current battery level in percentage.

        :return: The battery_percent of this NAThermStateBody.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent):
        """Sets the battery_percent of this NAThermStateBody.

        It contains the current battery level in percentage.

        :param battery_percent: The battery_percent of this NAThermStateBody.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def battery_vp(self):
        """Gets the battery_vp of this NAThermStateBody.


        :return: The battery_vp of this NAThermStateBody.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """Sets the battery_vp of this NAThermStateBody.


        :param battery_vp: The battery_vp of this NAThermStateBody.
        :type battery_vp: int
        """

        self._battery_vp = battery_vp

    @property
    def last_plug_seen(self):
        """Gets the last_plug_seen of this NAThermStateBody.


        :return: The last_plug_seen of this NAThermStateBody.
        :rtype: int
        """
        return self._last_plug_seen

    @last_plug_seen.setter
    def last_plug_seen(self, last_plug_seen):
        """Sets the last_plug_seen of this NAThermStateBody.


        :param last_plug_seen: The last_plug_seen of this NAThermStateBody.
        :type last_plug_seen: int
        """

        self._last_plug_seen = last_plug_seen

    @property
    def last_therm_seen(self):
        """Gets the last_therm_seen of this NAThermStateBody.


        :return: The last_therm_seen of this NAThermStateBody.
        :rtype: int
        """
        return self._last_therm_seen

    @last_therm_seen.setter
    def last_therm_seen(self, last_therm_seen):
        """Sets the last_therm_seen of this NAThermStateBody.


        :param last_therm_seen: The last_therm_seen of this NAThermStateBody.
        :type last_therm_seen: int
        """

        self._last_therm_seen = last_therm_seen

    @property
    def measured(self):
        """Gets the measured of this NAThermStateBody.


        :return: The measured of this NAThermStateBody.
        :rtype: NAThermMeasure
        """
        return self._measured

    @measured.setter
    def measured(self, measured):
        """Sets the measured of this NAThermStateBody.


        :param measured: The measured of this NAThermStateBody.
        :type measured: NAThermMeasure
        """

        self._measured = measured

    @property
    def plug_connected_boiler(self):
        """Gets the plug_connected_boiler of this NAThermStateBody.


        :return: The plug_connected_boiler of this NAThermStateBody.
        :rtype: int
        """
        return self._plug_connected_boiler

    @plug_connected_boiler.setter
    def plug_connected_boiler(self, plug_connected_boiler):
        """Sets the plug_connected_boiler of this NAThermStateBody.


        :param plug_connected_boiler: The plug_connected_boiler of this NAThermStateBody.
        :type plug_connected_boiler: int
        """

        self._plug_connected_boiler = plug_connected_boiler

    @property
    def rf_status(self):
        """Gets the rf_status of this NAThermStateBody.


        :return: The rf_status of this NAThermStateBody.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """Sets the rf_status of this NAThermStateBody.


        :param rf_status: The rf_status of this NAThermStateBody.
        :type rf_status: int
        """

        self._rf_status = rf_status

    @property
    def setpoint(self):
        """Gets the setpoint of this NAThermStateBody.


        :return: The setpoint of this NAThermStateBody.
        :rtype: NASetpoint
        """
        return self._setpoint

    @setpoint.setter
    def setpoint(self, setpoint):
        """Sets the setpoint of this NAThermStateBody.


        :param setpoint: The setpoint of this NAThermStateBody.
        :type setpoint: NASetpoint
        """

        self._setpoint = setpoint

    @property
    def setpoint_order(self):
        """Gets the setpoint_order of this NAThermStateBody.


        :return: The setpoint_order of this NAThermStateBody.
        :rtype: NASetpoint
        """
        return self._setpoint_order

    @setpoint_order.setter
    def setpoint_order(self, setpoint_order):
        """Sets the setpoint_order of this NAThermStateBody.


        :param setpoint_order: The setpoint_order of this NAThermStateBody.
        :type setpoint_order: NASetpoint
        """

        self._setpoint_order = setpoint_order

    @property
    def therm_orientation(self):
        """Gets the therm_orientation of this NAThermStateBody.


        :return: The therm_orientation of this NAThermStateBody.
        :rtype: int
        """
        return self._therm_orientation

    @therm_orientation.setter
    def therm_orientation(self, therm_orientation):
        """Sets the therm_orientation of this NAThermStateBody.


        :param therm_orientation: The therm_orientation of this NAThermStateBody.
        :type therm_orientation: int
        """

        self._therm_orientation = therm_orientation

    @property
    def therm_program(self):
        """Gets the therm_program of this NAThermStateBody.


        :return: The therm_program of this NAThermStateBody.
        :rtype: NAThermProgram
        """
        return self._therm_program

    @therm_program.setter
    def therm_program(self, therm_program):
        """Sets the therm_program of this NAThermStateBody.


        :param therm_program: The therm_program of this NAThermStateBody.
        :type therm_program: NAThermProgram
        """

        self._therm_program = therm_program

    @property
    def therm_program_backup(self):
        """Gets the therm_program_backup of this NAThermStateBody.


        :return: The therm_program_backup of this NAThermStateBody.
        :rtype: List[NAThermProgram]
        """
        return self._therm_program_backup

    @therm_program_backup.setter
    def therm_program_backup(self, therm_program_backup):
        """Sets the therm_program_backup of this NAThermStateBody.


        :param therm_program_backup: The therm_program_backup of this NAThermStateBody.
        :type therm_program_backup: List[NAThermProgram]
        """

        self._therm_program_backup = therm_program_backup

    @property
    def therm_program_order(self):
        """Gets the therm_program_order of this NAThermStateBody.


        :return: The therm_program_order of this NAThermStateBody.
        :rtype: NAThermProgram
        """
        return self._therm_program_order

    @therm_program_order.setter
    def therm_program_order(self, therm_program_order):
        """Sets the therm_program_order of this NAThermStateBody.


        :param therm_program_order: The therm_program_order of this NAThermStateBody.
        :type therm_program_order: NAThermProgram
        """

        self._therm_program_order = therm_program_order

    @property
    def therm_relay_cmd(self):
        """Gets the therm_relay_cmd of this NAThermStateBody.


        :return: The therm_relay_cmd of this NAThermStateBody.
        :rtype: int
        """
        return self._therm_relay_cmd

    @therm_relay_cmd.setter
    def therm_relay_cmd(self, therm_relay_cmd):
        """Sets the therm_relay_cmd of this NAThermStateBody.


        :param therm_relay_cmd: The therm_relay_cmd of this NAThermStateBody.
        :type therm_relay_cmd: int
        """

        self._therm_relay_cmd = therm_relay_cmd

    @property
    def udp_conn(self):
        """Gets the udp_conn of this NAThermStateBody.


        :return: The udp_conn of this NAThermStateBody.
        :rtype: bool
        """
        return self._udp_conn

    @udp_conn.setter
    def udp_conn(self, udp_conn):
        """Sets the udp_conn of this NAThermStateBody.


        :param udp_conn: The udp_conn of this NAThermStateBody.
        :type udp_conn: bool
        """

        self._udp_conn = udp_conn

    @property
    def wifi_status(self):
        """Gets the wifi_status of this NAThermStateBody.


        :return: The wifi_status of this NAThermStateBody.
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """Sets the wifi_status of this NAThermStateBody.


        :param wifi_status: The wifi_status of this NAThermStateBody.
        :type wifi_status: int
        """

        self._wifi_status = wifi_status
