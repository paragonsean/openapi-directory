# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAMeasure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gust_angle: float=None, gust_strength: float=None, rain_24h: float=None, rain_60min: float=None, rain_live: float=None, rain_utc: int=None, res: Dict[str, List[float]]=None, type: List[str]=None, wind_angle: float=None, wind_strength: float=None, wind_timeutc: int=None):
        """NAMeasure - a model defined in OpenAPI

        :param gust_angle: The gust_angle of this NAMeasure.
        :param gust_strength: The gust_strength of this NAMeasure.
        :param rain_24h: The rain_24h of this NAMeasure.
        :param rain_60min: The rain_60min of this NAMeasure.
        :param rain_live: The rain_live of this NAMeasure.
        :param rain_utc: The rain_utc of this NAMeasure.
        :param res: The res of this NAMeasure.
        :param type: The type of this NAMeasure.
        :param wind_angle: The wind_angle of this NAMeasure.
        :param wind_strength: The wind_strength of this NAMeasure.
        :param wind_timeutc: The wind_timeutc of this NAMeasure.
        """
        self.openapi_types = {
            'gust_angle': float,
            'gust_strength': float,
            'rain_24h': float,
            'rain_60min': float,
            'rain_live': float,
            'rain_utc': int,
            'res': Dict[str, List[float]],
            'type': List[str],
            'wind_angle': float,
            'wind_strength': float,
            'wind_timeutc': int
        }

        self.attribute_map = {
            'gust_angle': 'gust_angle',
            'gust_strength': 'gust_strength',
            'rain_24h': 'rain_24h',
            'rain_60min': 'rain_60min',
            'rain_live': 'rain_live',
            'rain_utc': 'rain_utc',
            'res': 'res',
            'type': 'type',
            'wind_angle': 'wind_angle',
            'wind_strength': 'wind_strength',
            'wind_timeutc': 'wind_timeutc&quot;'
        }

        self._gust_angle = gust_angle
        self._gust_strength = gust_strength
        self._rain_24h = rain_24h
        self._rain_60min = rain_60min
        self._rain_live = rain_live
        self._rain_utc = rain_utc
        self._res = res
        self._type = type
        self._wind_angle = wind_angle
        self._wind_strength = wind_strength
        self._wind_timeutc = wind_timeutc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAMeasure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAMeasure of this NAMeasure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gust_angle(self):
        """Gets the gust_angle of this NAMeasure.


        :return: The gust_angle of this NAMeasure.
        :rtype: float
        """
        return self._gust_angle

    @gust_angle.setter
    def gust_angle(self, gust_angle):
        """Sets the gust_angle of this NAMeasure.


        :param gust_angle: The gust_angle of this NAMeasure.
        :type gust_angle: float
        """

        self._gust_angle = gust_angle

    @property
    def gust_strength(self):
        """Gets the gust_strength of this NAMeasure.


        :return: The gust_strength of this NAMeasure.
        :rtype: float
        """
        return self._gust_strength

    @gust_strength.setter
    def gust_strength(self, gust_strength):
        """Sets the gust_strength of this NAMeasure.


        :param gust_strength: The gust_strength of this NAMeasure.
        :type gust_strength: float
        """

        self._gust_strength = gust_strength

    @property
    def rain_24h(self):
        """Gets the rain_24h of this NAMeasure.


        :return: The rain_24h of this NAMeasure.
        :rtype: float
        """
        return self._rain_24h

    @rain_24h.setter
    def rain_24h(self, rain_24h):
        """Sets the rain_24h of this NAMeasure.


        :param rain_24h: The rain_24h of this NAMeasure.
        :type rain_24h: float
        """

        self._rain_24h = rain_24h

    @property
    def rain_60min(self):
        """Gets the rain_60min of this NAMeasure.


        :return: The rain_60min of this NAMeasure.
        :rtype: float
        """
        return self._rain_60min

    @rain_60min.setter
    def rain_60min(self, rain_60min):
        """Sets the rain_60min of this NAMeasure.


        :param rain_60min: The rain_60min of this NAMeasure.
        :type rain_60min: float
        """

        self._rain_60min = rain_60min

    @property
    def rain_live(self):
        """Gets the rain_live of this NAMeasure.


        :return: The rain_live of this NAMeasure.
        :rtype: float
        """
        return self._rain_live

    @rain_live.setter
    def rain_live(self, rain_live):
        """Sets the rain_live of this NAMeasure.


        :param rain_live: The rain_live of this NAMeasure.
        :type rain_live: float
        """

        self._rain_live = rain_live

    @property
    def rain_utc(self):
        """Gets the rain_utc of this NAMeasure.


        :return: The rain_utc of this NAMeasure.
        :rtype: int
        """
        return self._rain_utc

    @rain_utc.setter
    def rain_utc(self, rain_utc):
        """Sets the rain_utc of this NAMeasure.


        :param rain_utc: The rain_utc of this NAMeasure.
        :type rain_utc: int
        """

        self._rain_utc = rain_utc

    @property
    def res(self):
        """Gets the res of this NAMeasure.


        :return: The res of this NAMeasure.
        :rtype: Dict[str, List[float]]
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this NAMeasure.


        :param res: The res of this NAMeasure.
        :type res: Dict[str, List[float]]
        """

        self._res = res

    @property
    def type(self):
        """Gets the type of this NAMeasure.


        :return: The type of this NAMeasure.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAMeasure.


        :param type: The type of this NAMeasure.
        :type type: List[str]
        """

        self._type = type

    @property
    def wind_angle(self):
        """Gets the wind_angle of this NAMeasure.


        :return: The wind_angle of this NAMeasure.
        :rtype: float
        """
        return self._wind_angle

    @wind_angle.setter
    def wind_angle(self, wind_angle):
        """Sets the wind_angle of this NAMeasure.


        :param wind_angle: The wind_angle of this NAMeasure.
        :type wind_angle: float
        """

        self._wind_angle = wind_angle

    @property
    def wind_strength(self):
        """Gets the wind_strength of this NAMeasure.


        :return: The wind_strength of this NAMeasure.
        :rtype: float
        """
        return self._wind_strength

    @wind_strength.setter
    def wind_strength(self, wind_strength):
        """Sets the wind_strength of this NAMeasure.


        :param wind_strength: The wind_strength of this NAMeasure.
        :type wind_strength: float
        """

        self._wind_strength = wind_strength

    @property
    def wind_timeutc(self):
        """Gets the wind_timeutc of this NAMeasure.


        :return: The wind_timeutc of this NAMeasure.
        :rtype: int
        """
        return self._wind_timeutc

    @wind_timeutc.setter
    def wind_timeutc(self, wind_timeutc):
        """Sets the wind_timeutc of this NAMeasure.


        :param wind_timeutc: The wind_timeutc of this NAMeasure.
        :type wind_timeutc: int
        """

        self._wind_timeutc = wind_timeutc
