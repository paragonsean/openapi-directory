# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAUserAdministrative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, feel_like_algo: str=None, lang: str=None, pressureunit: str=None, reg_locale: str=None, unit: str=None, windunit: str=None):
        """NAUserAdministrative - a model defined in OpenAPI

        :param country: The country of this NAUserAdministrative.
        :param feel_like_algo: The feel_like_algo of this NAUserAdministrative.
        :param lang: The lang of this NAUserAdministrative.
        :param pressureunit: The pressureunit of this NAUserAdministrative.
        :param reg_locale: The reg_locale of this NAUserAdministrative.
        :param unit: The unit of this NAUserAdministrative.
        :param windunit: The windunit of this NAUserAdministrative.
        """
        self.openapi_types = {
            'country': str,
            'feel_like_algo': str,
            'lang': str,
            'pressureunit': str,
            'reg_locale': str,
            'unit': str,
            'windunit': str
        }

        self.attribute_map = {
            'country': 'country',
            'feel_like_algo': 'feel_like_algo',
            'lang': 'lang',
            'pressureunit': 'pressureunit',
            'reg_locale': 'reg_locale',
            'unit': 'unit',
            'windunit': 'windunit'
        }

        self._country = country
        self._feel_like_algo = feel_like_algo
        self._lang = lang
        self._pressureunit = pressureunit
        self._reg_locale = reg_locale
        self._unit = unit
        self._windunit = windunit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAUserAdministrative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAUserAdministrative of this NAUserAdministrative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this NAUserAdministrative.

        user country

        :return: The country of this NAUserAdministrative.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NAUserAdministrative.

        user country

        :param country: The country of this NAUserAdministrative.
        :type country: str
        """

        self._country = country

    @property
    def feel_like_algo(self):
        """Gets the feel_like_algo of this NAUserAdministrative.

        algorithm used to compute feel like temperature, 0 -> humidex, 1 -> heat-index

        :return: The feel_like_algo of this NAUserAdministrative.
        :rtype: str
        """
        return self._feel_like_algo

    @feel_like_algo.setter
    def feel_like_algo(self, feel_like_algo):
        """Sets the feel_like_algo of this NAUserAdministrative.

        algorithm used to compute feel like temperature, 0 -> humidex, 1 -> heat-index

        :param feel_like_algo: The feel_like_algo of this NAUserAdministrative.
        :type feel_like_algo: str
        """

        self._feel_like_algo = feel_like_algo

    @property
    def lang(self):
        """Gets the lang of this NAUserAdministrative.

        user locale

        :return: The lang of this NAUserAdministrative.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this NAUserAdministrative.

        user locale

        :param lang: The lang of this NAUserAdministrative.
        :type lang: str
        """

        self._lang = lang

    @property
    def pressureunit(self):
        """Gets the pressureunit of this NAUserAdministrative.

        0 -> mbar, 1 -> inHg, 2 -> mmHg

        :return: The pressureunit of this NAUserAdministrative.
        :rtype: str
        """
        return self._pressureunit

    @pressureunit.setter
    def pressureunit(self, pressureunit):
        """Sets the pressureunit of this NAUserAdministrative.

        0 -> mbar, 1 -> inHg, 2 -> mmHg

        :param pressureunit: The pressureunit of this NAUserAdministrative.
        :type pressureunit: str
        """

        self._pressureunit = pressureunit

    @property
    def reg_locale(self):
        """Gets the reg_locale of this NAUserAdministrative.

        user regional preferences (used for displaying date)

        :return: The reg_locale of this NAUserAdministrative.
        :rtype: str
        """
        return self._reg_locale

    @reg_locale.setter
    def reg_locale(self, reg_locale):
        """Sets the reg_locale of this NAUserAdministrative.

        user regional preferences (used for displaying date)

        :param reg_locale: The reg_locale of this NAUserAdministrative.
        :type reg_locale: str
        """

        self._reg_locale = reg_locale

    @property
    def unit(self):
        """Gets the unit of this NAUserAdministrative.

        0 -> metric system, 1 -> imperial system

        :return: The unit of this NAUserAdministrative.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this NAUserAdministrative.

        0 -> metric system, 1 -> imperial system

        :param unit: The unit of this NAUserAdministrative.
        :type unit: str
        """

        self._unit = unit

    @property
    def windunit(self):
        """Gets the windunit of this NAUserAdministrative.

        0 -> kph, 1 -> mph, 2 -> ms, 3 -> beaufort, 4 -> knot

        :return: The windunit of this NAUserAdministrative.
        :rtype: str
        """
        return self._windunit

    @windunit.setter
    def windunit(self, windunit):
        """Sets the windunit of this NAUserAdministrative.

        0 -> kph, 1 -> mph, 2 -> ms, 3 -> beaufort, 4 -> knot

        :param windunit: The windunit of this NAUserAdministrative.
        :type windunit: str
        """

        self._windunit = windunit
