# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAStation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lag_down: int=None, lag_up: int=None, off_overshoot: float=None, on_overshoot: float=None, pk: int=None, tau: int=None):
        """NAStation - a model defined in OpenAPI

        :param lag_down: The lag_down of this NAStation.
        :param lag_up: The lag_up of this NAStation.
        :param off_overshoot: The off_overshoot of this NAStation.
        :param on_overshoot: The on_overshoot of this NAStation.
        :param pk: The pk of this NAStation.
        :param tau: The tau of this NAStation.
        """
        self.openapi_types = {
            'lag_down': int,
            'lag_up': int,
            'off_overshoot': float,
            'on_overshoot': float,
            'pk': int,
            'tau': int
        }

        self.attribute_map = {
            'lag_down': 'lag_down',
            'lag_up': 'lag_up',
            'off_overshoot': 'off_overshoot',
            'on_overshoot': 'on_overshoot',
            'pk': 'pk',
            'tau': 'tau'
        }

        self._lag_down = lag_down
        self._lag_up = lag_up
        self._off_overshoot = off_overshoot
        self._on_overshoot = on_overshoot
        self._pk = pk
        self._tau = tau

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAStation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAStation of this NAStation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lag_down(self):
        """Gets the lag_down of this NAStation.


        :return: The lag_down of this NAStation.
        :rtype: int
        """
        return self._lag_down

    @lag_down.setter
    def lag_down(self, lag_down):
        """Sets the lag_down of this NAStation.


        :param lag_down: The lag_down of this NAStation.
        :type lag_down: int
        """

        self._lag_down = lag_down

    @property
    def lag_up(self):
        """Gets the lag_up of this NAStation.


        :return: The lag_up of this NAStation.
        :rtype: int
        """
        return self._lag_up

    @lag_up.setter
    def lag_up(self, lag_up):
        """Sets the lag_up of this NAStation.


        :param lag_up: The lag_up of this NAStation.
        :type lag_up: int
        """

        self._lag_up = lag_up

    @property
    def off_overshoot(self):
        """Gets the off_overshoot of this NAStation.


        :return: The off_overshoot of this NAStation.
        :rtype: float
        """
        return self._off_overshoot

    @off_overshoot.setter
    def off_overshoot(self, off_overshoot):
        """Sets the off_overshoot of this NAStation.


        :param off_overshoot: The off_overshoot of this NAStation.
        :type off_overshoot: float
        """

        self._off_overshoot = off_overshoot

    @property
    def on_overshoot(self):
        """Gets the on_overshoot of this NAStation.


        :return: The on_overshoot of this NAStation.
        :rtype: float
        """
        return self._on_overshoot

    @on_overshoot.setter
    def on_overshoot(self, on_overshoot):
        """Sets the on_overshoot of this NAStation.


        :param on_overshoot: The on_overshoot of this NAStation.
        :type on_overshoot: float
        """

        self._on_overshoot = on_overshoot

    @property
    def pk(self):
        """Gets the pk of this NAStation.


        :return: The pk of this NAStation.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this NAStation.


        :param pk: The pk of this NAStation.
        :type pk: int
        """

        self._pk = pk

    @property
    def tau(self):
        """Gets the tau of this NAStation.


        :return: The tau of this NAStation.
        :rtype: int
        """
        return self._tau

    @tau.setter
    def tau(self, tau):
        """Sets the tau of this NAStation.


        :param tau: The tau of this NAStation.
        :type tau: int
        """

        self._tau = tau
