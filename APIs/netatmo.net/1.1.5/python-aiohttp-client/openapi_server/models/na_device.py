# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_dashboard_data import NADashboardData
from openapi_server.models.na_date import NADate
from openapi_server.models.na_heating_system import NAHeatingSystem
from openapi_server.models.na_house_model import NAHouseModel
from openapi_server.models.na_object import NAObject
from openapi_server.models.na_place import NAPlace
from openapi_server.models.na_therm_program import NAThermProgram
from openapi_server import util


class NADevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, behavior: int=None, cipher_id: str=None, dashboard_data: NADashboardData=None, data_type: List[str]=None, date_setup: NADate=None, firmware: int=None, first_pid_avail: bool=None, heating_system: NAHeatingSystem=None, house_model: NAHouseModel=None, hw_version: int=None, ip: str=None, last_fw_update: int=None, last_radio_store: int=None, last_status_store: int=None, last_upgrade: int=None, module_name: str=None, modules: List[str]=None, new_feature_avail: bool=None, place: NAPlace=None, public_ext_data: bool=None, setpoint: object=None, setpoint_default_duration: int=None, setpoint_order: Dict[str, List[NAObject]]=None, station_name: str=None, therm_program: Dict[str, NAThermProgram]=None, therm_program_backup: Dict[str, List[NAThermProgram]]=None, therm_program_order: Dict[str, List[NAObject]]=None, type: str=None, udp_conn: bool=None, user_owner: List[str]=None, wifi_status: int=None):
        """NADevice - a model defined in OpenAPI

        :param id: The id of this NADevice.
        :param behavior: The behavior of this NADevice.
        :param cipher_id: The cipher_id of this NADevice.
        :param dashboard_data: The dashboard_data of this NADevice.
        :param data_type: The data_type of this NADevice.
        :param date_setup: The date_setup of this NADevice.
        :param firmware: The firmware of this NADevice.
        :param first_pid_avail: The first_pid_avail of this NADevice.
        :param heating_system: The heating_system of this NADevice.
        :param house_model: The house_model of this NADevice.
        :param hw_version: The hw_version of this NADevice.
        :param ip: The ip of this NADevice.
        :param last_fw_update: The last_fw_update of this NADevice.
        :param last_radio_store: The last_radio_store of this NADevice.
        :param last_status_store: The last_status_store of this NADevice.
        :param last_upgrade: The last_upgrade of this NADevice.
        :param module_name: The module_name of this NADevice.
        :param modules: The modules of this NADevice.
        :param new_feature_avail: The new_feature_avail of this NADevice.
        :param place: The place of this NADevice.
        :param public_ext_data: The public_ext_data of this NADevice.
        :param setpoint: The setpoint of this NADevice.
        :param setpoint_default_duration: The setpoint_default_duration of this NADevice.
        :param setpoint_order: The setpoint_order of this NADevice.
        :param station_name: The station_name of this NADevice.
        :param therm_program: The therm_program of this NADevice.
        :param therm_program_backup: The therm_program_backup of this NADevice.
        :param therm_program_order: The therm_program_order of this NADevice.
        :param type: The type of this NADevice.
        :param udp_conn: The udp_conn of this NADevice.
        :param user_owner: The user_owner of this NADevice.
        :param wifi_status: The wifi_status of this NADevice.
        """
        self.openapi_types = {
            'id': str,
            'behavior': int,
            'cipher_id': str,
            'dashboard_data': NADashboardData,
            'data_type': List[str],
            'date_setup': NADate,
            'firmware': int,
            'first_pid_avail': bool,
            'heating_system': NAHeatingSystem,
            'house_model': NAHouseModel,
            'hw_version': int,
            'ip': str,
            'last_fw_update': int,
            'last_radio_store': int,
            'last_status_store': int,
            'last_upgrade': int,
            'module_name': str,
            'modules': List[str],
            'new_feature_avail': bool,
            'place': NAPlace,
            'public_ext_data': bool,
            'setpoint': object,
            'setpoint_default_duration': int,
            'setpoint_order': Dict[str, List[NAObject]],
            'station_name': str,
            'therm_program': Dict[str, NAThermProgram],
            'therm_program_backup': Dict[str, List[NAThermProgram]],
            'therm_program_order': Dict[str, List[NAObject]],
            'type': str,
            'udp_conn': bool,
            'user_owner': List[str],
            'wifi_status': int
        }

        self.attribute_map = {
            'id': '_id',
            'behavior': 'behavior',
            'cipher_id': 'cipher_id',
            'dashboard_data': 'dashboard_data',
            'data_type': 'data_type',
            'date_setup': 'date_setup',
            'firmware': 'firmware',
            'first_pid_avail': 'first_pid_avail',
            'heating_system': 'heating_system',
            'house_model': 'house_model',
            'hw_version': 'hw_version',
            'ip': 'ip',
            'last_fw_update': 'last_fw_update',
            'last_radio_store': 'last_radio_store',
            'last_status_store': 'last_status_store',
            'last_upgrade': 'last_upgrade',
            'module_name': 'module_name',
            'modules': 'modules',
            'new_feature_avail': 'new_feature_avail',
            'place': 'place',
            'public_ext_data': 'public_ext_data',
            'setpoint': 'setpoint',
            'setpoint_default_duration': 'setpoint_default_duration',
            'setpoint_order': 'setpoint_order',
            'station_name': 'station_name',
            'therm_program': 'therm_program',
            'therm_program_backup': 'therm_program_backup',
            'therm_program_order': 'therm_program_order',
            'type': 'type',
            'udp_conn': 'udp_conn',
            'user_owner': 'user_owner',
            'wifi_status': 'wifi_status'
        }

        self._id = id
        self._behavior = behavior
        self._cipher_id = cipher_id
        self._dashboard_data = dashboard_data
        self._data_type = data_type
        self._date_setup = date_setup
        self._firmware = firmware
        self._first_pid_avail = first_pid_avail
        self._heating_system = heating_system
        self._house_model = house_model
        self._hw_version = hw_version
        self._ip = ip
        self._last_fw_update = last_fw_update
        self._last_radio_store = last_radio_store
        self._last_status_store = last_status_store
        self._last_upgrade = last_upgrade
        self._module_name = module_name
        self._modules = modules
        self._new_feature_avail = new_feature_avail
        self._place = place
        self._public_ext_data = public_ext_data
        self._setpoint = setpoint
        self._setpoint_default_duration = setpoint_default_duration
        self._setpoint_order = setpoint_order
        self._station_name = station_name
        self._therm_program = therm_program
        self._therm_program_backup = therm_program_backup
        self._therm_program_order = therm_program_order
        self._type = type
        self._udp_conn = udp_conn
        self._user_owner = user_owner
        self._wifi_status = wifi_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NADevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NADevice of this NADevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NADevice.


        :return: The id of this NADevice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NADevice.


        :param id: The id of this NADevice.
        :type id: str
        """

        self._id = id

    @property
    def behavior(self):
        """Gets the behavior of this NADevice.


        :return: The behavior of this NADevice.
        :rtype: int
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this NADevice.


        :param behavior: The behavior of this NADevice.
        :type behavior: int
        """

        self._behavior = behavior

    @property
    def cipher_id(self):
        """Gets the cipher_id of this NADevice.


        :return: The cipher_id of this NADevice.
        :rtype: str
        """
        return self._cipher_id

    @cipher_id.setter
    def cipher_id(self, cipher_id):
        """Sets the cipher_id of this NADevice.


        :param cipher_id: The cipher_id of this NADevice.
        :type cipher_id: str
        """

        self._cipher_id = cipher_id

    @property
    def dashboard_data(self):
        """Gets the dashboard_data of this NADevice.


        :return: The dashboard_data of this NADevice.
        :rtype: NADashboardData
        """
        return self._dashboard_data

    @dashboard_data.setter
    def dashboard_data(self, dashboard_data):
        """Sets the dashboard_data of this NADevice.


        :param dashboard_data: The dashboard_data of this NADevice.
        :type dashboard_data: NADashboardData
        """

        self._dashboard_data = dashboard_data

    @property
    def data_type(self):
        """Gets the data_type of this NADevice.


        :return: The data_type of this NADevice.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NADevice.


        :param data_type: The data_type of this NADevice.
        :type data_type: List[str]
        """

        self._data_type = data_type

    @property
    def date_setup(self):
        """Gets the date_setup of this NADevice.


        :return: The date_setup of this NADevice.
        :rtype: NADate
        """
        return self._date_setup

    @date_setup.setter
    def date_setup(self, date_setup):
        """Sets the date_setup of this NADevice.


        :param date_setup: The date_setup of this NADevice.
        :type date_setup: NADate
        """

        self._date_setup = date_setup

    @property
    def firmware(self):
        """Gets the firmware of this NADevice.


        :return: The firmware of this NADevice.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NADevice.


        :param firmware: The firmware of this NADevice.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def first_pid_avail(self):
        """Gets the first_pid_avail of this NADevice.


        :return: The first_pid_avail of this NADevice.
        :rtype: bool
        """
        return self._first_pid_avail

    @first_pid_avail.setter
    def first_pid_avail(self, first_pid_avail):
        """Sets the first_pid_avail of this NADevice.


        :param first_pid_avail: The first_pid_avail of this NADevice.
        :type first_pid_avail: bool
        """

        self._first_pid_avail = first_pid_avail

    @property
    def heating_system(self):
        """Gets the heating_system of this NADevice.


        :return: The heating_system of this NADevice.
        :rtype: NAHeatingSystem
        """
        return self._heating_system

    @heating_system.setter
    def heating_system(self, heating_system):
        """Sets the heating_system of this NADevice.


        :param heating_system: The heating_system of this NADevice.
        :type heating_system: NAHeatingSystem
        """

        self._heating_system = heating_system

    @property
    def house_model(self):
        """Gets the house_model of this NADevice.


        :return: The house_model of this NADevice.
        :rtype: NAHouseModel
        """
        return self._house_model

    @house_model.setter
    def house_model(self, house_model):
        """Sets the house_model of this NADevice.


        :param house_model: The house_model of this NADevice.
        :type house_model: NAHouseModel
        """

        self._house_model = house_model

    @property
    def hw_version(self):
        """Gets the hw_version of this NADevice.


        :return: The hw_version of this NADevice.
        :rtype: int
        """
        return self._hw_version

    @hw_version.setter
    def hw_version(self, hw_version):
        """Sets the hw_version of this NADevice.


        :param hw_version: The hw_version of this NADevice.
        :type hw_version: int
        """

        self._hw_version = hw_version

    @property
    def ip(self):
        """Gets the ip of this NADevice.


        :return: The ip of this NADevice.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this NADevice.


        :param ip: The ip of this NADevice.
        :type ip: str
        """

        self._ip = ip

    @property
    def last_fw_update(self):
        """Gets the last_fw_update of this NADevice.


        :return: The last_fw_update of this NADevice.
        :rtype: int
        """
        return self._last_fw_update

    @last_fw_update.setter
    def last_fw_update(self, last_fw_update):
        """Sets the last_fw_update of this NADevice.


        :param last_fw_update: The last_fw_update of this NADevice.
        :type last_fw_update: int
        """

        self._last_fw_update = last_fw_update

    @property
    def last_radio_store(self):
        """Gets the last_radio_store of this NADevice.


        :return: The last_radio_store of this NADevice.
        :rtype: int
        """
        return self._last_radio_store

    @last_radio_store.setter
    def last_radio_store(self, last_radio_store):
        """Sets the last_radio_store of this NADevice.


        :param last_radio_store: The last_radio_store of this NADevice.
        :type last_radio_store: int
        """

        self._last_radio_store = last_radio_store

    @property
    def last_status_store(self):
        """Gets the last_status_store of this NADevice.


        :return: The last_status_store of this NADevice.
        :rtype: int
        """
        return self._last_status_store

    @last_status_store.setter
    def last_status_store(self, last_status_store):
        """Sets the last_status_store of this NADevice.


        :param last_status_store: The last_status_store of this NADevice.
        :type last_status_store: int
        """

        self._last_status_store = last_status_store

    @property
    def last_upgrade(self):
        """Gets the last_upgrade of this NADevice.


        :return: The last_upgrade of this NADevice.
        :rtype: int
        """
        return self._last_upgrade

    @last_upgrade.setter
    def last_upgrade(self, last_upgrade):
        """Sets the last_upgrade of this NADevice.


        :param last_upgrade: The last_upgrade of this NADevice.
        :type last_upgrade: int
        """

        self._last_upgrade = last_upgrade

    @property
    def module_name(self):
        """Gets the module_name of this NADevice.


        :return: The module_name of this NADevice.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this NADevice.


        :param module_name: The module_name of this NADevice.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def modules(self):
        """Gets the modules of this NADevice.

        It lists which modules are linked with this device

        :return: The modules of this NADevice.
        :rtype: List[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this NADevice.

        It lists which modules are linked with this device

        :param modules: The modules of this NADevice.
        :type modules: List[str]
        """

        self._modules = modules

    @property
    def new_feature_avail(self):
        """Gets the new_feature_avail of this NADevice.


        :return: The new_feature_avail of this NADevice.
        :rtype: bool
        """
        return self._new_feature_avail

    @new_feature_avail.setter
    def new_feature_avail(self, new_feature_avail):
        """Sets the new_feature_avail of this NADevice.


        :param new_feature_avail: The new_feature_avail of this NADevice.
        :type new_feature_avail: bool
        """

        self._new_feature_avail = new_feature_avail

    @property
    def place(self):
        """Gets the place of this NADevice.


        :return: The place of this NADevice.
        :rtype: NAPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this NADevice.


        :param place: The place of this NADevice.
        :type place: NAPlace
        """

        self._place = place

    @property
    def public_ext_data(self):
        """Gets the public_ext_data of this NADevice.


        :return: The public_ext_data of this NADevice.
        :rtype: bool
        """
        return self._public_ext_data

    @public_ext_data.setter
    def public_ext_data(self, public_ext_data):
        """Sets the public_ext_data of this NADevice.


        :param public_ext_data: The public_ext_data of this NADevice.
        :type public_ext_data: bool
        """

        self._public_ext_data = public_ext_data

    @property
    def setpoint(self):
        """Gets the setpoint of this NADevice.


        :return: The setpoint of this NADevice.
        :rtype: object
        """
        return self._setpoint

    @setpoint.setter
    def setpoint(self, setpoint):
        """Sets the setpoint of this NADevice.


        :param setpoint: The setpoint of this NADevice.
        :type setpoint: object
        """

        self._setpoint = setpoint

    @property
    def setpoint_default_duration(self):
        """Gets the setpoint_default_duration of this NADevice.


        :return: The setpoint_default_duration of this NADevice.
        :rtype: int
        """
        return self._setpoint_default_duration

    @setpoint_default_duration.setter
    def setpoint_default_duration(self, setpoint_default_duration):
        """Sets the setpoint_default_duration of this NADevice.


        :param setpoint_default_duration: The setpoint_default_duration of this NADevice.
        :type setpoint_default_duration: int
        """

        self._setpoint_default_duration = setpoint_default_duration

    @property
    def setpoint_order(self):
        """Gets the setpoint_order of this NADevice.


        :return: The setpoint_order of this NADevice.
        :rtype: Dict[str, List[NAObject]]
        """
        return self._setpoint_order

    @setpoint_order.setter
    def setpoint_order(self, setpoint_order):
        """Sets the setpoint_order of this NADevice.


        :param setpoint_order: The setpoint_order of this NADevice.
        :type setpoint_order: Dict[str, List[NAObject]]
        """

        self._setpoint_order = setpoint_order

    @property
    def station_name(self):
        """Gets the station_name of this NADevice.


        :return: The station_name of this NADevice.
        :rtype: str
        """
        return self._station_name

    @station_name.setter
    def station_name(self, station_name):
        """Sets the station_name of this NADevice.


        :param station_name: The station_name of this NADevice.
        :type station_name: str
        """

        self._station_name = station_name

    @property
    def therm_program(self):
        """Gets the therm_program of this NADevice.


        :return: The therm_program of this NADevice.
        :rtype: Dict[str, NAThermProgram]
        """
        return self._therm_program

    @therm_program.setter
    def therm_program(self, therm_program):
        """Sets the therm_program of this NADevice.


        :param therm_program: The therm_program of this NADevice.
        :type therm_program: Dict[str, NAThermProgram]
        """

        self._therm_program = therm_program

    @property
    def therm_program_backup(self):
        """Gets the therm_program_backup of this NADevice.


        :return: The therm_program_backup of this NADevice.
        :rtype: Dict[str, List[NAThermProgram]]
        """
        return self._therm_program_backup

    @therm_program_backup.setter
    def therm_program_backup(self, therm_program_backup):
        """Sets the therm_program_backup of this NADevice.


        :param therm_program_backup: The therm_program_backup of this NADevice.
        :type therm_program_backup: Dict[str, List[NAThermProgram]]
        """

        self._therm_program_backup = therm_program_backup

    @property
    def therm_program_order(self):
        """Gets the therm_program_order of this NADevice.


        :return: The therm_program_order of this NADevice.
        :rtype: Dict[str, List[NAObject]]
        """
        return self._therm_program_order

    @therm_program_order.setter
    def therm_program_order(self, therm_program_order):
        """Sets the therm_program_order of this NADevice.


        :param therm_program_order: The therm_program_order of this NADevice.
        :type therm_program_order: Dict[str, List[NAObject]]
        """

        self._therm_program_order = therm_program_order

    @property
    def type(self):
        """Gets the type of this NADevice.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NADevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NADevice.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NADevice.
        :type type: str
        """

        self._type = type

    @property
    def udp_conn(self):
        """Gets the udp_conn of this NADevice.


        :return: The udp_conn of this NADevice.
        :rtype: bool
        """
        return self._udp_conn

    @udp_conn.setter
    def udp_conn(self, udp_conn):
        """Sets the udp_conn of this NADevice.


        :param udp_conn: The udp_conn of this NADevice.
        :type udp_conn: bool
        """

        self._udp_conn = udp_conn

    @property
    def user_owner(self):
        """Gets the user_owner of this NADevice.


        :return: The user_owner of this NADevice.
        :rtype: List[str]
        """
        return self._user_owner

    @user_owner.setter
    def user_owner(self, user_owner):
        """Sets the user_owner of this NADevice.


        :param user_owner: The user_owner of this NADevice.
        :type user_owner: List[str]
        """

        self._user_owner = user_owner

    @property
    def wifi_status(self):
        """Gets the wifi_status of this NADevice.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :return: The wifi_status of this NADevice.
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """Sets the wifi_status of this NADevice.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :param wifi_status: The wifi_status of this NADevice.
        :type wifi_status: int
        """

        self._wifi_status = wifi_status
