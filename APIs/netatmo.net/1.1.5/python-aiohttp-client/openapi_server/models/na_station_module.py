# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_dashboard_data import NADashboardData
from openapi_server import util


class NAStationModule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, battery_percent: int=None, battery_vp: int=None, dashboard_data: NADashboardData=None, data_type: List[str]=None, firmware: int=None, last_message: int=None, last_seen: int=None, last_setup: int=None, module_name: str=None, reachable: bool=None, rf_status: int=None, type: str=None):
        """NAStationModule - a model defined in OpenAPI

        :param id: The id of this NAStationModule.
        :param battery_percent: The battery_percent of this NAStationModule.
        :param battery_vp: The battery_vp of this NAStationModule.
        :param dashboard_data: The dashboard_data of this NAStationModule.
        :param data_type: The data_type of this NAStationModule.
        :param firmware: The firmware of this NAStationModule.
        :param last_message: The last_message of this NAStationModule.
        :param last_seen: The last_seen of this NAStationModule.
        :param last_setup: The last_setup of this NAStationModule.
        :param module_name: The module_name of this NAStationModule.
        :param reachable: The reachable of this NAStationModule.
        :param rf_status: The rf_status of this NAStationModule.
        :param type: The type of this NAStationModule.
        """
        self.openapi_types = {
            'id': str,
            'battery_percent': int,
            'battery_vp': int,
            'dashboard_data': NADashboardData,
            'data_type': List[str],
            'firmware': int,
            'last_message': int,
            'last_seen': int,
            'last_setup': int,
            'module_name': str,
            'reachable': bool,
            'rf_status': int,
            'type': str
        }

        self.attribute_map = {
            'id': '_id',
            'battery_percent': 'battery_percent',
            'battery_vp': 'battery_vp',
            'dashboard_data': 'dashboard_data',
            'data_type': 'data_type',
            'firmware': 'firmware',
            'last_message': 'last_message',
            'last_seen': 'last_seen',
            'last_setup': 'last_setup',
            'module_name': 'module_name',
            'reachable': 'reachable',
            'rf_status': 'rf_status',
            'type': 'type'
        }

        self._id = id
        self._battery_percent = battery_percent
        self._battery_vp = battery_vp
        self._dashboard_data = dashboard_data
        self._data_type = data_type
        self._firmware = firmware
        self._last_message = last_message
        self._last_seen = last_seen
        self._last_setup = last_setup
        self._module_name = module_name
        self._reachable = reachable
        self._rf_status = rf_status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAStationModule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAStationModule of this NAStationModule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAStationModule.


        :return: The id of this NAStationModule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAStationModule.


        :param id: The id of this NAStationModule.
        :type id: str
        """

        self._id = id

    @property
    def battery_percent(self):
        """Gets the battery_percent of this NAStationModule.

        It contains the current battery level in percentage.

        :return: The battery_percent of this NAStationModule.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent):
        """Sets the battery_percent of this NAStationModule.

        It contains the current battery level in percentage.

        :param battery_percent: The battery_percent of this NAStationModule.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def battery_vp(self):
        """Gets the battery_vp of this NAStationModule.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :return: The battery_vp of this NAStationModule.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """Sets the battery_vp of this NAStationModule.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :param battery_vp: The battery_vp of this NAStationModule.
        :type battery_vp: int
        """

        self._battery_vp = battery_vp

    @property
    def dashboard_data(self):
        """Gets the dashboard_data of this NAStationModule.


        :return: The dashboard_data of this NAStationModule.
        :rtype: NADashboardData
        """
        return self._dashboard_data

    @dashboard_data.setter
    def dashboard_data(self, dashboard_data):
        """Sets the dashboard_data of this NAStationModule.


        :param dashboard_data: The dashboard_data of this NAStationModule.
        :type dashboard_data: NADashboardData
        """

        self._dashboard_data = dashboard_data

    @property
    def data_type(self):
        """Gets the data_type of this NAStationModule.


        :return: The data_type of this NAStationModule.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NAStationModule.


        :param data_type: The data_type of this NAStationModule.
        :type data_type: List[str]
        """

        self._data_type = data_type

    @property
    def firmware(self):
        """Gets the firmware of this NAStationModule.


        :return: The firmware of this NAStationModule.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NAStationModule.


        :param firmware: The firmware of this NAStationModule.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def last_message(self):
        """Gets the last_message of this NAStationModule.


        :return: The last_message of this NAStationModule.
        :rtype: int
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this NAStationModule.


        :param last_message: The last_message of this NAStationModule.
        :type last_message: int
        """

        self._last_message = last_message

    @property
    def last_seen(self):
        """Gets the last_seen of this NAStationModule.


        :return: The last_seen of this NAStationModule.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this NAStationModule.


        :param last_seen: The last_seen of this NAStationModule.
        :type last_seen: int
        """

        self._last_seen = last_seen

    @property
    def last_setup(self):
        """Gets the last_setup of this NAStationModule.


        :return: The last_setup of this NAStationModule.
        :rtype: int
        """
        return self._last_setup

    @last_setup.setter
    def last_setup(self, last_setup):
        """Sets the last_setup of this NAStationModule.


        :param last_setup: The last_setup of this NAStationModule.
        :type last_setup: int
        """

        self._last_setup = last_setup

    @property
    def module_name(self):
        """Gets the module_name of this NAStationModule.


        :return: The module_name of this NAStationModule.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this NAStationModule.


        :param module_name: The module_name of this NAStationModule.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def reachable(self):
        """Gets the reachable of this NAStationModule.

        true when the station was seen by the Netatmo cloud within the last 4 hours

        :return: The reachable of this NAStationModule.
        :rtype: bool
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this NAStationModule.

        true when the station was seen by the Netatmo cloud within the last 4 hours

        :param reachable: The reachable of this NAStationModule.
        :type reachable: bool
        """

        self._reachable = reachable

    @property
    def rf_status(self):
        """Gets the rf_status of this NAStationModule.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :return: The rf_status of this NAStationModule.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """Sets the rf_status of this NAStationModule.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :param rf_status: The rf_status of this NAStationModule.
        :type rf_status: int
        """

        self._rf_status = rf_status

    @property
    def type(self):
        """Gets the type of this NAStationModule.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NAStationModule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAStationModule.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NAStationModule.
        :type type: str
        """

        self._type = type
