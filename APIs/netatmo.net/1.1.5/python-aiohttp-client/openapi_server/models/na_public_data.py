# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_measure import NAMeasure
from openapi_server.models.na_place import NAPlace
from openapi_server import util


class NAPublicData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, mark: int=None, measures: Dict[str, NAMeasure]=None, module_types: Dict[str, str]=None, modules: List[str]=None, place: NAPlace=None):
        """NAPublicData - a model defined in OpenAPI

        :param id: The id of this NAPublicData.
        :param mark: The mark of this NAPublicData.
        :param measures: The measures of this NAPublicData.
        :param module_types: The module_types of this NAPublicData.
        :param modules: The modules of this NAPublicData.
        :param place: The place of this NAPublicData.
        """
        self.openapi_types = {
            'id': str,
            'mark': int,
            'measures': Dict[str, NAMeasure],
            'module_types': Dict[str, str],
            'modules': List[str],
            'place': NAPlace
        }

        self.attribute_map = {
            'id': '_id',
            'mark': 'mark',
            'measures': 'measures',
            'module_types': 'module_types',
            'modules': 'modules',
            'place': 'place'
        }

        self._id = id
        self._mark = mark
        self._measures = measures
        self._module_types = module_types
        self._modules = modules
        self._place = place

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAPublicData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAPublicData of this NAPublicData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAPublicData.

        id of the station

        :return: The id of this NAPublicData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAPublicData.

        id of the station

        :param id: The id of this NAPublicData.
        :type id: str
        """

        self._id = id

    @property
    def mark(self):
        """Gets the mark of this NAPublicData.


        :return: The mark of this NAPublicData.
        :rtype: int
        """
        return self._mark

    @mark.setter
    def mark(self, mark):
        """Sets the mark of this NAPublicData.


        :param mark: The mark of this NAPublicData.
        :type mark: int
        """

        self._mark = mark

    @property
    def measures(self):
        """Gets the measures of this NAPublicData.


        :return: The measures of this NAPublicData.
        :rtype: Dict[str, NAMeasure]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this NAPublicData.


        :param measures: The measures of this NAPublicData.
        :type measures: Dict[str, NAMeasure]
        """

        self._measures = measures

    @property
    def module_types(self):
        """Gets the module_types of this NAPublicData.

        Latest measurements of the station, organized by module

        :return: The module_types of this NAPublicData.
        :rtype: Dict[str, str]
        """
        return self._module_types

    @module_types.setter
    def module_types(self, module_types):
        """Sets the module_types of this NAPublicData.

        Latest measurements of the station, organized by module

        :param module_types: The module_types of this NAPublicData.
        :type module_types: Dict[str, str]
        """

        self._module_types = module_types

    @property
    def modules(self):
        """Gets the modules of this NAPublicData.


        :return: The modules of this NAPublicData.
        :rtype: List[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this NAPublicData.


        :param modules: The modules of this NAPublicData.
        :type modules: List[str]
        """

        self._modules = modules

    @property
    def place(self):
        """Gets the place of this NAPublicData.


        :return: The place of this NAPublicData.
        :rtype: NAPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this NAPublicData.


        :param place: The place of this NAPublicData.
        :type place: NAPlace
        """

        self._place = place
