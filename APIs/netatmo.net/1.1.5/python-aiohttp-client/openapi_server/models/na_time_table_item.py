# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NATimeTableItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, m_offset: int=None):
        """NATimeTableItem - a model defined in OpenAPI

        :param id: The id of this NATimeTableItem.
        :param m_offset: The m_offset of this NATimeTableItem.
        """
        self.openapi_types = {
            'id': int,
            'm_offset': int
        }

        self.attribute_map = {
            'id': 'id',
            'm_offset': 'm_offset'
        }

        self._id = id
        self._m_offset = m_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NATimeTableItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NATimeTableItem of this NATimeTableItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NATimeTableItem.


        :return: The id of this NATimeTableItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NATimeTableItem.


        :param id: The id of this NATimeTableItem.
        :type id: int
        """

        self._id = id

    @property
    def m_offset(self):
        """Gets the m_offset of this NATimeTableItem.


        :return: The m_offset of this NATimeTableItem.
        :rtype: int
        """
        return self._m_offset

    @m_offset.setter
    def m_offset(self, m_offset):
        """Sets the m_offset of this NATimeTableItem.


        :param m_offset: The m_offset of this NATimeTableItem.
        :type m_offset: int
        """

        self._m_offset = m_offset
