# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAWelcomeModule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery_percent: int=None, id: str=None, last_activity: int=None, name: str=None, rf: str=None, status: str=None, type: str=None):
        """NAWelcomeModule - a model defined in OpenAPI

        :param battery_percent: The battery_percent of this NAWelcomeModule.
        :param id: The id of this NAWelcomeModule.
        :param last_activity: The last_activity of this NAWelcomeModule.
        :param name: The name of this NAWelcomeModule.
        :param rf: The rf of this NAWelcomeModule.
        :param status: The status of this NAWelcomeModule.
        :param type: The type of this NAWelcomeModule.
        """
        self.openapi_types = {
            'battery_percent': int,
            'id': str,
            'last_activity': int,
            'name': str,
            'rf': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'battery_percent': 'battery_percent',
            'id': 'id',
            'last_activity': 'last_activity',
            'name': 'name',
            'rf': 'rf',
            'status': 'status',
            'type': 'type'
        }

        self._battery_percent = battery_percent
        self._id = id
        self._last_activity = last_activity
        self._name = name
        self._rf = rf
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAWelcomeModule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAWelcomeModule of this NAWelcomeModule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery_percent(self):
        """Gets the battery_percent of this NAWelcomeModule.

        remaining battery percentage

        :return: The battery_percent of this NAWelcomeModule.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent):
        """Sets the battery_percent of this NAWelcomeModule.

        remaining battery percentage

        :param battery_percent: The battery_percent of this NAWelcomeModule.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def id(self):
        """Gets the id of this NAWelcomeModule.

        mac address of the module

        :return: The id of this NAWelcomeModule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAWelcomeModule.

        mac address of the module

        :param id: The id of this NAWelcomeModule.
        :type id: str
        """

        self._id = id

    @property
    def last_activity(self):
        """Gets the last_activity of this NAWelcomeModule.

        Timestamp of last move detected by the module

        :return: The last_activity of this NAWelcomeModule.
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this NAWelcomeModule.

        Timestamp of last move detected by the module

        :param last_activity: The last_activity of this NAWelcomeModule.
        :type last_activity: int
        """

        self._last_activity = last_activity

    @property
    def name(self):
        """Gets the name of this NAWelcomeModule.

        name of the module (given by the user)

        :return: The name of this NAWelcomeModule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NAWelcomeModule.

        name of the module (given by the user)

        :param name: The name of this NAWelcomeModule.
        :type name: str
        """

        self._name = name

    @property
    def rf(self):
        """Gets the rf of this NAWelcomeModule.

        Radio status

        :return: The rf of this NAWelcomeModule.
        :rtype: str
        """
        return self._rf

    @rf.setter
    def rf(self, rf):
        """Sets the rf of this NAWelcomeModule.

        Radio status

        :param rf: The rf of this NAWelcomeModule.
        :type rf: str
        """

        self._rf = rf

    @property
    def status(self):
        """Gets the status of this NAWelcomeModule.

        status of the module

        :return: The status of this NAWelcomeModule.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NAWelcomeModule.

        status of the module

        :param status: The status of this NAWelcomeModule.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this NAWelcomeModule.

        NACamDoorTag for tags

        :return: The type of this NAWelcomeModule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAWelcomeModule.

        NACamDoorTag for tags

        :param type: The type of this NAWelcomeModule.
        :type type: str
        """

        self._type = type
