# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_setpoint import NASetpoint
from openapi_server.models.na_setpoint_log import NASetpointLog
from openapi_server.models.na_therm_measure import NAThermMeasure
from openapi_server.models.na_therm_program import NAThermProgram
from openapi_server import util


class NAThermostat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, battery_percent: int=None, battery_vp: int=None, firmware: int=None, last_message: int=None, last_therm_seen: int=None, measured: NAThermMeasure=None, module_name: str=None, rf_status: int=None, setpoint: NASetpoint=None, setpoint_history: List[NASetpointLog]=None, setpoint_order: NASetpoint=None, therm_orientation: int=None, therm_program_list: List[NAThermProgram]=None, therm_relay_cmd: int=None, type: str=None):
        """NAThermostat - a model defined in OpenAPI

        :param id: The id of this NAThermostat.
        :param battery_percent: The battery_percent of this NAThermostat.
        :param battery_vp: The battery_vp of this NAThermostat.
        :param firmware: The firmware of this NAThermostat.
        :param last_message: The last_message of this NAThermostat.
        :param last_therm_seen: The last_therm_seen of this NAThermostat.
        :param measured: The measured of this NAThermostat.
        :param module_name: The module_name of this NAThermostat.
        :param rf_status: The rf_status of this NAThermostat.
        :param setpoint: The setpoint of this NAThermostat.
        :param setpoint_history: The setpoint_history of this NAThermostat.
        :param setpoint_order: The setpoint_order of this NAThermostat.
        :param therm_orientation: The therm_orientation of this NAThermostat.
        :param therm_program_list: The therm_program_list of this NAThermostat.
        :param therm_relay_cmd: The therm_relay_cmd of this NAThermostat.
        :param type: The type of this NAThermostat.
        """
        self.openapi_types = {
            'id': str,
            'battery_percent': int,
            'battery_vp': int,
            'firmware': int,
            'last_message': int,
            'last_therm_seen': int,
            'measured': NAThermMeasure,
            'module_name': str,
            'rf_status': int,
            'setpoint': NASetpoint,
            'setpoint_history': List[NASetpointLog],
            'setpoint_order': NASetpoint,
            'therm_orientation': int,
            'therm_program_list': List[NAThermProgram],
            'therm_relay_cmd': int,
            'type': str
        }

        self.attribute_map = {
            'id': '_id',
            'battery_percent': 'battery_percent',
            'battery_vp': 'battery_vp',
            'firmware': 'firmware',
            'last_message': 'last_message',
            'last_therm_seen': 'last_therm_seen',
            'measured': 'measured',
            'module_name': 'module_name',
            'rf_status': 'rf_status',
            'setpoint': 'setpoint',
            'setpoint_history': 'setpoint_history',
            'setpoint_order': 'setpoint_order',
            'therm_orientation': 'therm_orientation',
            'therm_program_list': 'therm_program_list',
            'therm_relay_cmd': 'therm_relay_cmd',
            'type': 'type'
        }

        self._id = id
        self._battery_percent = battery_percent
        self._battery_vp = battery_vp
        self._firmware = firmware
        self._last_message = last_message
        self._last_therm_seen = last_therm_seen
        self._measured = measured
        self._module_name = module_name
        self._rf_status = rf_status
        self._setpoint = setpoint
        self._setpoint_history = setpoint_history
        self._setpoint_order = setpoint_order
        self._therm_orientation = therm_orientation
        self._therm_program_list = therm_program_list
        self._therm_relay_cmd = therm_relay_cmd
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAThermostat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAThermostat of this NAThermostat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAThermostat.


        :return: The id of this NAThermostat.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAThermostat.


        :param id: The id of this NAThermostat.
        :type id: str
        """

        self._id = id

    @property
    def battery_percent(self):
        """Gets the battery_percent of this NAThermostat.

        It contains the current battery level in percentage.

        :return: The battery_percent of this NAThermostat.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent):
        """Sets the battery_percent of this NAThermostat.

        It contains the current battery level in percentage.

        :param battery_percent: The battery_percent of this NAThermostat.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def battery_vp(self):
        """Gets the battery_vp of this NAThermostat.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :return: The battery_vp of this NAThermostat.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """Sets the battery_vp of this NAThermostat.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :param battery_vp: The battery_vp of this NAThermostat.
        :type battery_vp: int
        """

        self._battery_vp = battery_vp

    @property
    def firmware(self):
        """Gets the firmware of this NAThermostat.


        :return: The firmware of this NAThermostat.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NAThermostat.


        :param firmware: The firmware of this NAThermostat.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def last_message(self):
        """Gets the last_message of this NAThermostat.


        :return: The last_message of this NAThermostat.
        :rtype: int
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this NAThermostat.


        :param last_message: The last_message of this NAThermostat.
        :type last_message: int
        """

        self._last_message = last_message

    @property
    def last_therm_seen(self):
        """Gets the last_therm_seen of this NAThermostat.


        :return: The last_therm_seen of this NAThermostat.
        :rtype: int
        """
        return self._last_therm_seen

    @last_therm_seen.setter
    def last_therm_seen(self, last_therm_seen):
        """Sets the last_therm_seen of this NAThermostat.


        :param last_therm_seen: The last_therm_seen of this NAThermostat.
        :type last_therm_seen: int
        """

        self._last_therm_seen = last_therm_seen

    @property
    def measured(self):
        """Gets the measured of this NAThermostat.


        :return: The measured of this NAThermostat.
        :rtype: NAThermMeasure
        """
        return self._measured

    @measured.setter
    def measured(self, measured):
        """Sets the measured of this NAThermostat.


        :param measured: The measured of this NAThermostat.
        :type measured: NAThermMeasure
        """

        self._measured = measured

    @property
    def module_name(self):
        """Gets the module_name of this NAThermostat.


        :return: The module_name of this NAThermostat.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this NAThermostat.


        :param module_name: The module_name of this NAThermostat.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def rf_status(self):
        """Gets the rf_status of this NAThermostat.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :return: The rf_status of this NAThermostat.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """Sets the rf_status of this NAThermostat.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :param rf_status: The rf_status of this NAThermostat.
        :type rf_status: int
        """

        self._rf_status = rf_status

    @property
    def setpoint(self):
        """Gets the setpoint of this NAThermostat.


        :return: The setpoint of this NAThermostat.
        :rtype: NASetpoint
        """
        return self._setpoint

    @setpoint.setter
    def setpoint(self, setpoint):
        """Sets the setpoint of this NAThermostat.


        :param setpoint: The setpoint of this NAThermostat.
        :type setpoint: NASetpoint
        """

        self._setpoint = setpoint

    @property
    def setpoint_history(self):
        """Gets the setpoint_history of this NAThermostat.

        The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered.

        :return: The setpoint_history of this NAThermostat.
        :rtype: List[NASetpointLog]
        """
        return self._setpoint_history

    @setpoint_history.setter
    def setpoint_history(self, setpoint_history):
        """Sets the setpoint_history of this NAThermostat.

        The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered.

        :param setpoint_history: The setpoint_history of this NAThermostat.
        :type setpoint_history: List[NASetpointLog]
        """

        self._setpoint_history = setpoint_history

    @property
    def setpoint_order(self):
        """Gets the setpoint_order of this NAThermostat.


        :return: The setpoint_order of this NAThermostat.
        :rtype: NASetpoint
        """
        return self._setpoint_order

    @setpoint_order.setter
    def setpoint_order(self, setpoint_order):
        """Sets the setpoint_order of this NAThermostat.


        :param setpoint_order: The setpoint_order of this NAThermostat.
        :type setpoint_order: NASetpoint
        """

        self._setpoint_order = setpoint_order

    @property
    def therm_orientation(self):
        """Gets the therm_orientation of this NAThermostat.


        :return: The therm_orientation of this NAThermostat.
        :rtype: int
        """
        return self._therm_orientation

    @therm_orientation.setter
    def therm_orientation(self, therm_orientation):
        """Sets the therm_orientation of this NAThermostat.


        :param therm_orientation: The therm_orientation of this NAThermostat.
        :type therm_orientation: int
        """

        self._therm_orientation = therm_orientation

    @property
    def therm_program_list(self):
        """Gets the therm_program_list of this NAThermostat.

        List of the weekly heating planning used by the thermostat

        :return: The therm_program_list of this NAThermostat.
        :rtype: List[NAThermProgram]
        """
        return self._therm_program_list

    @therm_program_list.setter
    def therm_program_list(self, therm_program_list):
        """Sets the therm_program_list of this NAThermostat.

        List of the weekly heating planning used by the thermostat

        :param therm_program_list: The therm_program_list of this NAThermostat.
        :type therm_program_list: List[NAThermProgram]
        """

        self._therm_program_list = therm_program_list

    @property
    def therm_relay_cmd(self):
        """Gets the therm_relay_cmd of this NAThermostat.


        :return: The therm_relay_cmd of this NAThermostat.
        :rtype: int
        """
        return self._therm_relay_cmd

    @therm_relay_cmd.setter
    def therm_relay_cmd(self, therm_relay_cmd):
        """Sets the therm_relay_cmd of this NAThermostat.


        :param therm_relay_cmd: The therm_relay_cmd of this NAThermostat.
        :type therm_relay_cmd: int
        """

        self._therm_relay_cmd = therm_relay_cmd

    @property
    def type(self):
        """Gets the type of this NAThermostat.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NAThermostat.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAThermostat.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NAThermostat.
        :type type: str
        """

        self._type = type
