# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_welcome_face import NAWelcomeFace
from openapi_server import util


class NAWelcomePerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face: NAWelcomeFace=None, id: str=None, last_seen: int=None, out_of_sight: bool=None, pseudo: str=None):
        """NAWelcomePerson - a model defined in OpenAPI

        :param face: The face of this NAWelcomePerson.
        :param id: The id of this NAWelcomePerson.
        :param last_seen: The last_seen of this NAWelcomePerson.
        :param out_of_sight: The out_of_sight of this NAWelcomePerson.
        :param pseudo: The pseudo of this NAWelcomePerson.
        """
        self.openapi_types = {
            'face': NAWelcomeFace,
            'id': str,
            'last_seen': int,
            'out_of_sight': bool,
            'pseudo': str
        }

        self.attribute_map = {
            'face': 'face',
            'id': 'id',
            'last_seen': 'last_seen',
            'out_of_sight': 'out_of_sight',
            'pseudo': 'pseudo'
        }

        self._face = face
        self._id = id
        self._last_seen = last_seen
        self._out_of_sight = out_of_sight
        self._pseudo = pseudo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAWelcomePerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAWelcomePerson of this NAWelcomePerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face(self):
        """Gets the face of this NAWelcomePerson.


        :return: The face of this NAWelcomePerson.
        :rtype: NAWelcomeFace
        """
        return self._face

    @face.setter
    def face(self, face):
        """Sets the face of this NAWelcomePerson.


        :param face: The face of this NAWelcomePerson.
        :type face: NAWelcomeFace
        """

        self._face = face

    @property
    def id(self):
        """Gets the id of this NAWelcomePerson.

        Id of the person.

        :return: The id of this NAWelcomePerson.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAWelcomePerson.

        Id of the person.

        :param id: The id of this NAWelcomePerson.
        :type id: str
        """

        self._id = id

    @property
    def last_seen(self):
        """Gets the last_seen of this NAWelcomePerson.

        Time at which the person was last seen.

        :return: The last_seen of this NAWelcomePerson.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this NAWelcomePerson.

        Time at which the person was last seen.

        :param last_seen: The last_seen of this NAWelcomePerson.
        :type last_seen: int
        """

        self._last_seen = last_seen

    @property
    def out_of_sight(self):
        """Gets the out_of_sight of this NAWelcomePerson.

        True if the Person is out of sight.

        :return: The out_of_sight of this NAWelcomePerson.
        :rtype: bool
        """
        return self._out_of_sight

    @out_of_sight.setter
    def out_of_sight(self, out_of_sight):
        """Sets the out_of_sight of this NAWelcomePerson.

        True if the Person is out of sight.

        :param out_of_sight: The out_of_sight of this NAWelcomePerson.
        :type out_of_sight: bool
        """

        self._out_of_sight = out_of_sight

    @property
    def pseudo(self):
        """Gets the pseudo of this NAWelcomePerson.

        Name of the person, if pseudo is missing, person is unknown.

        :return: The pseudo of this NAWelcomePerson.
        :rtype: str
        """
        return self._pseudo

    @pseudo.setter
    def pseudo(self, pseudo):
        """Sets the pseudo of this NAWelcomePerson.

        Name of the person, if pseudo is missing, person is unknown.

        :param pseudo: The pseudo of this NAWelcomePerson.
        :type pseudo: str
        """

        self._pseudo = pseudo
