# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_dashboard_data import NADashboardData
from openapi_server.models.na_date import NADate
from openapi_server import util


class NAModule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, battery_percent: int=None, battery_vp: int=None, dashboard_data: NADashboardData=None, data_type: List[str]=None, date_setup: NADate=None, firmware: int=None, last_message: int=None, last_seen: int=None, main_device: str=None, module_name: str=None, public_ext_data: bool=None, rf_status: int=None, therm_orientation: int=None, therm_relay_cmd: int=None, type: str=None):
        """NAModule - a model defined in OpenAPI

        :param id: The id of this NAModule.
        :param battery_percent: The battery_percent of this NAModule.
        :param battery_vp: The battery_vp of this NAModule.
        :param dashboard_data: The dashboard_data of this NAModule.
        :param data_type: The data_type of this NAModule.
        :param date_setup: The date_setup of this NAModule.
        :param firmware: The firmware of this NAModule.
        :param last_message: The last_message of this NAModule.
        :param last_seen: The last_seen of this NAModule.
        :param main_device: The main_device of this NAModule.
        :param module_name: The module_name of this NAModule.
        :param public_ext_data: The public_ext_data of this NAModule.
        :param rf_status: The rf_status of this NAModule.
        :param therm_orientation: The therm_orientation of this NAModule.
        :param therm_relay_cmd: The therm_relay_cmd of this NAModule.
        :param type: The type of this NAModule.
        """
        self.openapi_types = {
            'id': str,
            'battery_percent': int,
            'battery_vp': int,
            'dashboard_data': NADashboardData,
            'data_type': List[str],
            'date_setup': NADate,
            'firmware': int,
            'last_message': int,
            'last_seen': int,
            'main_device': str,
            'module_name': str,
            'public_ext_data': bool,
            'rf_status': int,
            'therm_orientation': int,
            'therm_relay_cmd': int,
            'type': str
        }

        self.attribute_map = {
            'id': '_id',
            'battery_percent': 'battery_percent',
            'battery_vp': 'battery_vp',
            'dashboard_data': 'dashboard_data',
            'data_type': 'data_type',
            'date_setup': 'date_setup',
            'firmware': 'firmware',
            'last_message': 'last_message',
            'last_seen': 'last_seen',
            'main_device': 'main_device',
            'module_name': 'module_name',
            'public_ext_data': 'public_ext_data',
            'rf_status': 'rf_status',
            'therm_orientation': 'therm_orientation',
            'therm_relay_cmd': 'therm_relay_cmd',
            'type': 'type'
        }

        self._id = id
        self._battery_percent = battery_percent
        self._battery_vp = battery_vp
        self._dashboard_data = dashboard_data
        self._data_type = data_type
        self._date_setup = date_setup
        self._firmware = firmware
        self._last_message = last_message
        self._last_seen = last_seen
        self._main_device = main_device
        self._module_name = module_name
        self._public_ext_data = public_ext_data
        self._rf_status = rf_status
        self._therm_orientation = therm_orientation
        self._therm_relay_cmd = therm_relay_cmd
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAModule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAModule of this NAModule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAModule.


        :return: The id of this NAModule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAModule.


        :param id: The id of this NAModule.
        :type id: str
        """

        self._id = id

    @property
    def battery_percent(self):
        """Gets the battery_percent of this NAModule.

        It contains the current battery level in percentage.

        :return: The battery_percent of this NAModule.
        :rtype: int
        """
        return self._battery_percent

    @battery_percent.setter
    def battery_percent(self, battery_percent):
        """Sets the battery_percent of this NAModule.

        It contains the current battery level in percentage.

        :param battery_percent: The battery_percent of this NAModule.
        :type battery_percent: int
        """

        self._battery_percent = battery_percent

    @property
    def battery_vp(self):
        """Gets the battery_vp of this NAModule.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :return: The battery_vp of this NAModule.
        :rtype: int
        """
        return self._battery_vp

    @battery_vp.setter
    def battery_vp(self, battery_vp):
        """Sets the battery_vp of this NAModule.

        It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \"Indoor module Battery range: 6000 ... 4200\" | INDOOR_BATTERY_LEVEL_FULL = 5640 INDOOR_BATTERY_LEVEL_HIGH = 5280 INDOOR_BATTERY_LEVEL_MEDIUM = 4920 INDOOR_BATTERY_LEVEL_LOW = 4560 \"Below 4560: very low\" |      \"Raingauge and outdoor module Battery range: 6000 ... 3600\" | BATTERY_LEVEL_FULL = 5500 BATTERY_LEVEL_HIGH = 5000 BATTERY_LEVEL_MEDIUM = 4500 BATTERY_LEVEL_LOW = 4000 \"Below 4000: very low\" |      \"Thermostat Battery range: 4500 ... 3000\" | THERMOSTAT_BATTERY_LEVEL_FULL = 4100 THERMOSTAT_BATTERY_LEVEL_HIGH = 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300 THERMOSTAT_BATTERY_LEVEL_LOW = 3000 \"Below 3000: very low\" 

        :param battery_vp: The battery_vp of this NAModule.
        :type battery_vp: int
        """

        self._battery_vp = battery_vp

    @property
    def dashboard_data(self):
        """Gets the dashboard_data of this NAModule.


        :return: The dashboard_data of this NAModule.
        :rtype: NADashboardData
        """
        return self._dashboard_data

    @dashboard_data.setter
    def dashboard_data(self, dashboard_data):
        """Sets the dashboard_data of this NAModule.


        :param dashboard_data: The dashboard_data of this NAModule.
        :type dashboard_data: NADashboardData
        """

        self._dashboard_data = dashboard_data

    @property
    def data_type(self):
        """Gets the data_type of this NAModule.


        :return: The data_type of this NAModule.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NAModule.


        :param data_type: The data_type of this NAModule.
        :type data_type: List[str]
        """

        self._data_type = data_type

    @property
    def date_setup(self):
        """Gets the date_setup of this NAModule.


        :return: The date_setup of this NAModule.
        :rtype: NADate
        """
        return self._date_setup

    @date_setup.setter
    def date_setup(self, date_setup):
        """Sets the date_setup of this NAModule.


        :param date_setup: The date_setup of this NAModule.
        :type date_setup: NADate
        """

        self._date_setup = date_setup

    @property
    def firmware(self):
        """Gets the firmware of this NAModule.


        :return: The firmware of this NAModule.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NAModule.


        :param firmware: The firmware of this NAModule.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def last_message(self):
        """Gets the last_message of this NAModule.


        :return: The last_message of this NAModule.
        :rtype: int
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this NAModule.


        :param last_message: The last_message of this NAModule.
        :type last_message: int
        """

        self._last_message = last_message

    @property
    def last_seen(self):
        """Gets the last_seen of this NAModule.


        :return: The last_seen of this NAModule.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this NAModule.


        :param last_seen: The last_seen of this NAModule.
        :type last_seen: int
        """

        self._last_seen = last_seen

    @property
    def main_device(self):
        """Gets the main_device of this NAModule.


        :return: The main_device of this NAModule.
        :rtype: str
        """
        return self._main_device

    @main_device.setter
    def main_device(self, main_device):
        """Sets the main_device of this NAModule.


        :param main_device: The main_device of this NAModule.
        :type main_device: str
        """

        self._main_device = main_device

    @property
    def module_name(self):
        """Gets the module_name of this NAModule.


        :return: The module_name of this NAModule.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this NAModule.


        :param module_name: The module_name of this NAModule.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def public_ext_data(self):
        """Gets the public_ext_data of this NAModule.


        :return: The public_ext_data of this NAModule.
        :rtype: bool
        """
        return self._public_ext_data

    @public_ext_data.setter
    def public_ext_data(self, public_ext_data):
        """Sets the public_ext_data of this NAModule.


        :param public_ext_data: The public_ext_data of this NAModule.
        :type public_ext_data: bool
        """

        self._public_ext_data = public_ext_data

    @property
    def rf_status(self):
        """Gets the rf_status of this NAModule.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :return: The rf_status of this NAModule.
        :rtype: int
        """
        return self._rf_status

    @rf_status.setter
    def rf_status(self, rf_status):
        """Sets the rf_status of this NAModule.

        \"It contains the current radio status. The different thresholds to take into account are :\" | RADIO_THRESHOLD_SIGNAL_LOW = 90  RADIO_THRESHOLD_SIGNAL_MEDIUM = 80 RADIO_THRESHOLD_SIGNAL_HIGH = 70 RADIO_THRESHOLD_SIGNAL_FULL = 60 

        :param rf_status: The rf_status of this NAModule.
        :type rf_status: int
        """

        self._rf_status = rf_status

    @property
    def therm_orientation(self):
        """Gets the therm_orientation of this NAModule.


        :return: The therm_orientation of this NAModule.
        :rtype: int
        """
        return self._therm_orientation

    @therm_orientation.setter
    def therm_orientation(self, therm_orientation):
        """Sets the therm_orientation of this NAModule.


        :param therm_orientation: The therm_orientation of this NAModule.
        :type therm_orientation: int
        """

        self._therm_orientation = therm_orientation

    @property
    def therm_relay_cmd(self):
        """Gets the therm_relay_cmd of this NAModule.


        :return: The therm_relay_cmd of this NAModule.
        :rtype: int
        """
        return self._therm_relay_cmd

    @therm_relay_cmd.setter
    def therm_relay_cmd(self, therm_relay_cmd):
        """Sets the therm_relay_cmd of this NAModule.


        :param therm_relay_cmd: The therm_relay_cmd of this NAModule.
        :type therm_relay_cmd: int
        """

        self._therm_relay_cmd = therm_relay_cmd

    @property
    def type(self):
        """Gets the type of this NAModule.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NAModule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAModule.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NAModule.
        :type type: str
        """

        self._type = type
