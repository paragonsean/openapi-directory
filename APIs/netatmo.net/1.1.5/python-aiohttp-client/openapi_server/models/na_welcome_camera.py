# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAWelcomeCamera(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alim_status: str=None, id: str=None, is_local: bool=None, light_mode_status: str=None, name: str=None, sd_status: str=None, status: str=None, type: str=None, vpn_url: str=None):
        """NAWelcomeCamera - a model defined in OpenAPI

        :param alim_status: The alim_status of this NAWelcomeCamera.
        :param id: The id of this NAWelcomeCamera.
        :param is_local: The is_local of this NAWelcomeCamera.
        :param light_mode_status: The light_mode_status of this NAWelcomeCamera.
        :param name: The name of this NAWelcomeCamera.
        :param sd_status: The sd_status of this NAWelcomeCamera.
        :param status: The status of this NAWelcomeCamera.
        :param type: The type of this NAWelcomeCamera.
        :param vpn_url: The vpn_url of this NAWelcomeCamera.
        """
        self.openapi_types = {
            'alim_status': str,
            'id': str,
            'is_local': bool,
            'light_mode_status': str,
            'name': str,
            'sd_status': str,
            'status': str,
            'type': str,
            'vpn_url': str
        }

        self.attribute_map = {
            'alim_status': 'alim_status',
            'id': 'id',
            'is_local': 'is_local',
            'light_mode_status': 'light_mode_status',
            'name': 'name',
            'sd_status': 'sd_status',
            'status': 'status',
            'type': 'type',
            'vpn_url': 'vpn_url'
        }

        self._alim_status = alim_status
        self._id = id
        self._is_local = is_local
        self._light_mode_status = light_mode_status
        self._name = name
        self._sd_status = sd_status
        self._status = status
        self._type = type
        self._vpn_url = vpn_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAWelcomeCamera':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAWelcomeCamera of this NAWelcomeCamera.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alim_status(self):
        """Gets the alim_status of this NAWelcomeCamera.

        If power supply is ok (on/off)

        :return: The alim_status of this NAWelcomeCamera.
        :rtype: str
        """
        return self._alim_status

    @alim_status.setter
    def alim_status(self, alim_status):
        """Sets the alim_status of this NAWelcomeCamera.

        If power supply is ok (on/off)

        :param alim_status: The alim_status of this NAWelcomeCamera.
        :type alim_status: str
        """

        self._alim_status = alim_status

    @property
    def id(self):
        """Gets the id of this NAWelcomeCamera.

        Id of the camera

        :return: The id of this NAWelcomeCamera.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAWelcomeCamera.

        Id of the camera

        :param id: The id of this NAWelcomeCamera.
        :type id: str
        """

        self._id = id

    @property
    def is_local(self):
        """Gets the is_local of this NAWelcomeCamera.

        Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)

        :return: The is_local of this NAWelcomeCamera.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this NAWelcomeCamera.

        Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)

        :param is_local: The is_local of this NAWelcomeCamera.
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def light_mode_status(self):
        """Gets the light_mode_status of this NAWelcomeCamera.

        State of (flood-)light

        :return: The light_mode_status of this NAWelcomeCamera.
        :rtype: str
        """
        return self._light_mode_status

    @light_mode_status.setter
    def light_mode_status(self, light_mode_status):
        """Sets the light_mode_status of this NAWelcomeCamera.

        State of (flood-)light

        :param light_mode_status: The light_mode_status of this NAWelcomeCamera.
        :type light_mode_status: str
        """
        allowed_values = ["true", "false", "auto"]  # noqa: E501
        if light_mode_status not in allowed_values:
            raise ValueError(
                "Invalid value for `light_mode_status` ({0}), must be one of {1}"
                .format(light_mode_status, allowed_values)
            )

        self._light_mode_status = light_mode_status

    @property
    def name(self):
        """Gets the name of this NAWelcomeCamera.

        Name of the camera

        :return: The name of this NAWelcomeCamera.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NAWelcomeCamera.

        Name of the camera

        :param name: The name of this NAWelcomeCamera.
        :type name: str
        """

        self._name = name

    @property
    def sd_status(self):
        """Gets the sd_status of this NAWelcomeCamera.

        If SD card status is ok (on/off)

        :return: The sd_status of this NAWelcomeCamera.
        :rtype: str
        """
        return self._sd_status

    @sd_status.setter
    def sd_status(self, sd_status):
        """Sets the sd_status of this NAWelcomeCamera.

        If SD card status is ok (on/off)

        :param sd_status: The sd_status of this NAWelcomeCamera.
        :type sd_status: str
        """

        self._sd_status = sd_status

    @property
    def status(self):
        """Gets the status of this NAWelcomeCamera.

        If camera is monitoring (on/off)

        :return: The status of this NAWelcomeCamera.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NAWelcomeCamera.

        If camera is monitoring (on/off)

        :param status: The status of this NAWelcomeCamera.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this NAWelcomeCamera.

        Type of the camera

        :return: The type of this NAWelcomeCamera.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAWelcomeCamera.

        Type of the camera

        :param type: The type of this NAWelcomeCamera.
        :type type: str
        """

        self._type = type

    @property
    def vpn_url(self):
        """Gets the vpn_url of this NAWelcomeCamera.

        Only for scope access_camera. Address of the camera

        :return: The vpn_url of this NAWelcomeCamera.
        :rtype: str
        """
        return self._vpn_url

    @vpn_url.setter
    def vpn_url(self, vpn_url):
        """Sets the vpn_url of this NAWelcomeCamera.

        Only for scope access_camera. Address of the camera

        :param vpn_url: The vpn_url of this NAWelcomeCamera.
        :type vpn_url: str
        """

        self._vpn_url = vpn_url
