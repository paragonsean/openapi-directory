# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_place import NAPlace
from openapi_server.models.na_thermostat import NAThermostat
from openapi_server.models.na_year_month import NAYearMonth
from openapi_server import util


class NAPlug(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, firmware: int=None, last_bilan: NAYearMonth=None, last_plug_seen: int=None, last_status_store: int=None, modules: List[NAThermostat]=None, place: NAPlace=None, plug_connected_boiler: int=None, station_name: str=None, syncing: bool=None, type: str=None, udp_conn: bool=None, wifi_status: int=None):
        """NAPlug - a model defined in OpenAPI

        :param id: The id of this NAPlug.
        :param firmware: The firmware of this NAPlug.
        :param last_bilan: The last_bilan of this NAPlug.
        :param last_plug_seen: The last_plug_seen of this NAPlug.
        :param last_status_store: The last_status_store of this NAPlug.
        :param modules: The modules of this NAPlug.
        :param place: The place of this NAPlug.
        :param plug_connected_boiler: The plug_connected_boiler of this NAPlug.
        :param station_name: The station_name of this NAPlug.
        :param syncing: The syncing of this NAPlug.
        :param type: The type of this NAPlug.
        :param udp_conn: The udp_conn of this NAPlug.
        :param wifi_status: The wifi_status of this NAPlug.
        """
        self.openapi_types = {
            'id': str,
            'firmware': int,
            'last_bilan': NAYearMonth,
            'last_plug_seen': int,
            'last_status_store': int,
            'modules': List[NAThermostat],
            'place': NAPlace,
            'plug_connected_boiler': int,
            'station_name': str,
            'syncing': bool,
            'type': str,
            'udp_conn': bool,
            'wifi_status': int
        }

        self.attribute_map = {
            'id': '_id',
            'firmware': 'firmware',
            'last_bilan': 'last_bilan',
            'last_plug_seen': 'last_plug_seen',
            'last_status_store': 'last_status_store',
            'modules': 'modules',
            'place': 'place',
            'plug_connected_boiler': 'plug_connected_boiler',
            'station_name': 'station_name',
            'syncing': 'syncing',
            'type': 'type',
            'udp_conn': 'udp_conn',
            'wifi_status': 'wifi_status'
        }

        self._id = id
        self._firmware = firmware
        self._last_bilan = last_bilan
        self._last_plug_seen = last_plug_seen
        self._last_status_store = last_status_store
        self._modules = modules
        self._place = place
        self._plug_connected_boiler = plug_connected_boiler
        self._station_name = station_name
        self._syncing = syncing
        self._type = type
        self._udp_conn = udp_conn
        self._wifi_status = wifi_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAPlug':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAPlug of this NAPlug.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAPlug.


        :return: The id of this NAPlug.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAPlug.


        :param id: The id of this NAPlug.
        :type id: str
        """

        self._id = id

    @property
    def firmware(self):
        """Gets the firmware of this NAPlug.


        :return: The firmware of this NAPlug.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NAPlug.


        :param firmware: The firmware of this NAPlug.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def last_bilan(self):
        """Gets the last_bilan of this NAPlug.


        :return: The last_bilan of this NAPlug.
        :rtype: NAYearMonth
        """
        return self._last_bilan

    @last_bilan.setter
    def last_bilan(self, last_bilan):
        """Sets the last_bilan of this NAPlug.


        :param last_bilan: The last_bilan of this NAPlug.
        :type last_bilan: NAYearMonth
        """

        self._last_bilan = last_bilan

    @property
    def last_plug_seen(self):
        """Gets the last_plug_seen of this NAPlug.


        :return: The last_plug_seen of this NAPlug.
        :rtype: int
        """
        return self._last_plug_seen

    @last_plug_seen.setter
    def last_plug_seen(self, last_plug_seen):
        """Sets the last_plug_seen of this NAPlug.


        :param last_plug_seen: The last_plug_seen of this NAPlug.
        :type last_plug_seen: int
        """

        self._last_plug_seen = last_plug_seen

    @property
    def last_status_store(self):
        """Gets the last_status_store of this NAPlug.


        :return: The last_status_store of this NAPlug.
        :rtype: int
        """
        return self._last_status_store

    @last_status_store.setter
    def last_status_store(self, last_status_store):
        """Sets the last_status_store of this NAPlug.


        :param last_status_store: The last_status_store of this NAPlug.
        :type last_status_store: int
        """

        self._last_status_store = last_status_store

    @property
    def modules(self):
        """Gets the modules of this NAPlug.


        :return: The modules of this NAPlug.
        :rtype: List[NAThermostat]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this NAPlug.


        :param modules: The modules of this NAPlug.
        :type modules: List[NAThermostat]
        """

        self._modules = modules

    @property
    def place(self):
        """Gets the place of this NAPlug.


        :return: The place of this NAPlug.
        :rtype: NAPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this NAPlug.


        :param place: The place of this NAPlug.
        :type place: NAPlace
        """

        self._place = place

    @property
    def plug_connected_boiler(self):
        """Gets the plug_connected_boiler of this NAPlug.


        :return: The plug_connected_boiler of this NAPlug.
        :rtype: int
        """
        return self._plug_connected_boiler

    @plug_connected_boiler.setter
    def plug_connected_boiler(self, plug_connected_boiler):
        """Sets the plug_connected_boiler of this NAPlug.


        :param plug_connected_boiler: The plug_connected_boiler of this NAPlug.
        :type plug_connected_boiler: int
        """

        self._plug_connected_boiler = plug_connected_boiler

    @property
    def station_name(self):
        """Gets the station_name of this NAPlug.


        :return: The station_name of this NAPlug.
        :rtype: str
        """
        return self._station_name

    @station_name.setter
    def station_name(self, station_name):
        """Sets the station_name of this NAPlug.


        :param station_name: The station_name of this NAPlug.
        :type station_name: str
        """

        self._station_name = station_name

    @property
    def syncing(self):
        """Gets the syncing of this NAPlug.


        :return: The syncing of this NAPlug.
        :rtype: bool
        """
        return self._syncing

    @syncing.setter
    def syncing(self, syncing):
        """Sets the syncing of this NAPlug.


        :param syncing: The syncing of this NAPlug.
        :type syncing: bool
        """

        self._syncing = syncing

    @property
    def type(self):
        """Gets the type of this NAPlug.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NAPlug.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAPlug.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NAPlug.
        :type type: str
        """

        self._type = type

    @property
    def udp_conn(self):
        """Gets the udp_conn of this NAPlug.


        :return: The udp_conn of this NAPlug.
        :rtype: bool
        """
        return self._udp_conn

    @udp_conn.setter
    def udp_conn(self, udp_conn):
        """Sets the udp_conn of this NAPlug.


        :param udp_conn: The udp_conn of this NAPlug.
        :type udp_conn: bool
        """

        self._udp_conn = udp_conn

    @property
    def wifi_status(self):
        """Gets the wifi_status of this NAPlug.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :return: The wifi_status of this NAPlug.
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """Sets the wifi_status of this NAPlug.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :param wifi_status: The wifi_status of this NAPlug.
        :type wifi_status: int
        """

        self._wifi_status = wifi_status
