# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_welcome_snapshot import NAWelcomeSnapshot
from openapi_server.models.na_welcome_sub_event import NAWelcomeSubEvent
from openapi_server import util


class NAWelcomeEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, camera_id: str=None, category: str=None, event_list: List[NAWelcomeSubEvent]=None, id: str=None, is_arrival: bool=None, message: str=None, person_id: str=None, snapshot: NAWelcomeSnapshot=None, sub_type: int=None, time: int=None, type: str=None, video_id: str=None, video_status: str=None):
        """NAWelcomeEvent - a model defined in OpenAPI

        :param camera_id: The camera_id of this NAWelcomeEvent.
        :param category: The category of this NAWelcomeEvent.
        :param event_list: The event_list of this NAWelcomeEvent.
        :param id: The id of this NAWelcomeEvent.
        :param is_arrival: The is_arrival of this NAWelcomeEvent.
        :param message: The message of this NAWelcomeEvent.
        :param person_id: The person_id of this NAWelcomeEvent.
        :param snapshot: The snapshot of this NAWelcomeEvent.
        :param sub_type: The sub_type of this NAWelcomeEvent.
        :param time: The time of this NAWelcomeEvent.
        :param type: The type of this NAWelcomeEvent.
        :param video_id: The video_id of this NAWelcomeEvent.
        :param video_status: The video_status of this NAWelcomeEvent.
        """
        self.openapi_types = {
            'camera_id': str,
            'category': str,
            'event_list': List[NAWelcomeSubEvent],
            'id': str,
            'is_arrival': bool,
            'message': str,
            'person_id': str,
            'snapshot': NAWelcomeSnapshot,
            'sub_type': int,
            'time': int,
            'type': str,
            'video_id': str,
            'video_status': str
        }

        self.attribute_map = {
            'camera_id': 'camera_id',
            'category': 'category',
            'event_list': 'event_list',
            'id': 'id',
            'is_arrival': 'is_arrival',
            'message': 'message',
            'person_id': 'person_id',
            'snapshot': 'snapshot',
            'sub_type': 'sub_type',
            'time': 'time',
            'type': 'type',
            'video_id': 'video_id',
            'video_status': 'video_status'
        }

        self._camera_id = camera_id
        self._category = category
        self._event_list = event_list
        self._id = id
        self._is_arrival = is_arrival
        self._message = message
        self._person_id = person_id
        self._snapshot = snapshot
        self._sub_type = sub_type
        self._time = time
        self._type = type
        self._video_id = video_id
        self._video_status = video_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAWelcomeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAWelcomeEvent of this NAWelcomeEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def camera_id(self):
        """Gets the camera_id of this NAWelcomeEvent.

        Camera that detected the event

        :return: The camera_id of this NAWelcomeEvent.
        :rtype: str
        """
        return self._camera_id

    @camera_id.setter
    def camera_id(self, camera_id):
        """Sets the camera_id of this NAWelcomeEvent.

        Camera that detected the event

        :param camera_id: The camera_id of this NAWelcomeEvent.
        :type camera_id: str
        """

        self._camera_id = camera_id

    @property
    def category(self):
        """Gets the category of this NAWelcomeEvent.

        Type of the detected object.

        :return: The category of this NAWelcomeEvent.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NAWelcomeEvent.

        Type of the detected object.

        :param category: The category of this NAWelcomeEvent.
        :type category: str
        """
        allowed_values = ["human", "animal", "vehicle"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def event_list(self):
        """Gets the event_list of this NAWelcomeEvent.


        :return: The event_list of this NAWelcomeEvent.
        :rtype: List[NAWelcomeSubEvent]
        """
        return self._event_list

    @event_list.setter
    def event_list(self, event_list):
        """Sets the event_list of this NAWelcomeEvent.


        :param event_list: The event_list of this NAWelcomeEvent.
        :type event_list: List[NAWelcomeSubEvent]
        """

        self._event_list = event_list

    @property
    def id(self):
        """Gets the id of this NAWelcomeEvent.

        Identifier of the event

        :return: The id of this NAWelcomeEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAWelcomeEvent.

        Identifier of the event

        :param id: The id of this NAWelcomeEvent.
        :type id: str
        """

        self._id = id

    @property
    def is_arrival(self):
        """Gets the is_arrival of this NAWelcomeEvent.

        If person was considered away before being seen during this event

        :return: The is_arrival of this NAWelcomeEvent.
        :rtype: bool
        """
        return self._is_arrival

    @is_arrival.setter
    def is_arrival(self, is_arrival):
        """Sets the is_arrival of this NAWelcomeEvent.

        If person was considered away before being seen during this event

        :param is_arrival: The is_arrival of this NAWelcomeEvent.
        :type is_arrival: bool
        """

        self._is_arrival = is_arrival

    @property
    def message(self):
        """Gets the message of this NAWelcomeEvent.

        User facing event description

        :return: The message of this NAWelcomeEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NAWelcomeEvent.

        User facing event description

        :param message: The message of this NAWelcomeEvent.
        :type message: str
        """

        self._message = message

    @property
    def person_id(self):
        """Gets the person_id of this NAWelcomeEvent.

        Id of the person the event is about (if any)

        :return: The person_id of this NAWelcomeEvent.
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this NAWelcomeEvent.

        Id of the person the event is about (if any)

        :param person_id: The person_id of this NAWelcomeEvent.
        :type person_id: str
        """

        self._person_id = person_id

    @property
    def snapshot(self):
        """Gets the snapshot of this NAWelcomeEvent.


        :return: The snapshot of this NAWelcomeEvent.
        :rtype: NAWelcomeSnapshot
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this NAWelcomeEvent.


        :param snapshot: The snapshot of this NAWelcomeEvent.
        :type snapshot: NAWelcomeSnapshot
        """

        self._snapshot = snapshot

    @property
    def sub_type(self):
        """Gets the sub_type of this NAWelcomeEvent.

        Subtypes of SD and Alim events. Go to Welcome page for further details.

        :return: The sub_type of this NAWelcomeEvent.
        :rtype: int
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this NAWelcomeEvent.

        Subtypes of SD and Alim events. Go to Welcome page for further details.

        :param sub_type: The sub_type of this NAWelcomeEvent.
        :type sub_type: int
        """

        self._sub_type = sub_type

    @property
    def time(self):
        """Gets the time of this NAWelcomeEvent.

        Time of occurence of event

        :return: The time of this NAWelcomeEvent.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NAWelcomeEvent.

        Time of occurence of event

        :param time: The time of this NAWelcomeEvent.
        :type time: int
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this NAWelcomeEvent.

        Type of events. Go to the Welcome page for further details.

        :return: The type of this NAWelcomeEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAWelcomeEvent.

        Type of events. Go to the Welcome page for further details.

        :param type: The type of this NAWelcomeEvent.
        :type type: str
        """

        self._type = type

    @property
    def video_id(self):
        """Gets the video_id of this NAWelcomeEvent.

        Identifier of the video

        :return: The video_id of this NAWelcomeEvent.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """Sets the video_id of this NAWelcomeEvent.

        Identifier of the video

        :param video_id: The video_id of this NAWelcomeEvent.
        :type video_id: str
        """

        self._video_id = video_id

    @property
    def video_status(self):
        """Gets the video_status of this NAWelcomeEvent.

        Status of the video (recording, deleted or available)

        :return: The video_status of this NAWelcomeEvent.
        :rtype: str
        """
        return self._video_status

    @video_status.setter
    def video_status(self, video_status):
        """Sets the video_status of this NAWelcomeEvent.

        Status of the video (recording, deleted or available)

        :param video_status: The video_status of this NAWelcomeEvent.
        :type video_status: str
        """

        self._video_status = video_status
