# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_welcome_snapshot import NAWelcomeSnapshot
from openapi_server import util


class NAWelcomeSubEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message: str=None, offset: int=None, snapshot: NAWelcomeSnapshot=None, time: int=None, type: str=None):
        """NAWelcomeSubEvent - a model defined in OpenAPI

        :param id: The id of this NAWelcomeSubEvent.
        :param message: The message of this NAWelcomeSubEvent.
        :param offset: The offset of this NAWelcomeSubEvent.
        :param snapshot: The snapshot of this NAWelcomeSubEvent.
        :param time: The time of this NAWelcomeSubEvent.
        :param type: The type of this NAWelcomeSubEvent.
        """
        self.openapi_types = {
            'id': str,
            'message': str,
            'offset': int,
            'snapshot': NAWelcomeSnapshot,
            'time': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'message': 'message',
            'offset': 'offset',
            'snapshot': 'snapshot',
            'time': 'time',
            'type': 'type'
        }

        self._id = id
        self._message = message
        self._offset = offset
        self._snapshot = snapshot
        self._time = time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAWelcomeSubEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAWelcomeSubEvent of this NAWelcomeSubEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAWelcomeSubEvent.

        Identifier of the sub event

        :return: The id of this NAWelcomeSubEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAWelcomeSubEvent.

        Identifier of the sub event

        :param id: The id of this NAWelcomeSubEvent.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this NAWelcomeSubEvent.

        User facing sub event description

        :return: The message of this NAWelcomeSubEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NAWelcomeSubEvent.

        User facing sub event description

        :param message: The message of this NAWelcomeSubEvent.
        :type message: str
        """

        self._message = message

    @property
    def offset(self):
        """Gets the offset of this NAWelcomeSubEvent.


        :return: The offset of this NAWelcomeSubEvent.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this NAWelcomeSubEvent.


        :param offset: The offset of this NAWelcomeSubEvent.
        :type offset: int
        """

        self._offset = offset

    @property
    def snapshot(self):
        """Gets the snapshot of this NAWelcomeSubEvent.


        :return: The snapshot of this NAWelcomeSubEvent.
        :rtype: NAWelcomeSnapshot
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this NAWelcomeSubEvent.


        :param snapshot: The snapshot of this NAWelcomeSubEvent.
        :type snapshot: NAWelcomeSnapshot
        """

        self._snapshot = snapshot

    @property
    def time(self):
        """Gets the time of this NAWelcomeSubEvent.

        Time of occurence of the sub event

        :return: The time of this NAWelcomeSubEvent.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NAWelcomeSubEvent.

        Time of occurence of the sub event

        :param time: The time of this NAWelcomeSubEvent.
        :type time: int
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this NAWelcomeSubEvent.

        Type of the detected object.

        :return: The type of this NAWelcomeSubEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAWelcomeSubEvent.

        Type of the detected object.

        :param type: The type of this NAWelcomeSubEvent.
        :type type: str
        """
        allowed_values = ["human", "animal", "vehicle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
