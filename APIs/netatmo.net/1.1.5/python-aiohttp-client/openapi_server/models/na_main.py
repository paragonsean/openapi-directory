# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_dashboard_data import NADashboardData
from openapi_server.models.na_place import NAPlace
from openapi_server.models.na_station_module import NAStationModule
from openapi_server import util


class NAMain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, cipher_id: str=None, co2_calibrating: bool=None, dashboard_data: NADashboardData=None, data_type: List[str]=None, date_setup: int=None, favorite: bool=None, firmware: int=None, last_setup: int=None, last_status_store: int=None, last_upgrade: int=None, module_name: str=None, modules: List[NAStationModule]=None, place: NAPlace=None, reachable: bool=None, read_only: bool=None, station_name: str=None, type: str=None, wifi_status: int=None):
        """NAMain - a model defined in OpenAPI

        :param id: The id of this NAMain.
        :param cipher_id: The cipher_id of this NAMain.
        :param co2_calibrating: The co2_calibrating of this NAMain.
        :param dashboard_data: The dashboard_data of this NAMain.
        :param data_type: The data_type of this NAMain.
        :param date_setup: The date_setup of this NAMain.
        :param favorite: The favorite of this NAMain.
        :param firmware: The firmware of this NAMain.
        :param last_setup: The last_setup of this NAMain.
        :param last_status_store: The last_status_store of this NAMain.
        :param last_upgrade: The last_upgrade of this NAMain.
        :param module_name: The module_name of this NAMain.
        :param modules: The modules of this NAMain.
        :param place: The place of this NAMain.
        :param reachable: The reachable of this NAMain.
        :param read_only: The read_only of this NAMain.
        :param station_name: The station_name of this NAMain.
        :param type: The type of this NAMain.
        :param wifi_status: The wifi_status of this NAMain.
        """
        self.openapi_types = {
            'id': str,
            'cipher_id': str,
            'co2_calibrating': bool,
            'dashboard_data': NADashboardData,
            'data_type': List[str],
            'date_setup': int,
            'favorite': bool,
            'firmware': int,
            'last_setup': int,
            'last_status_store': int,
            'last_upgrade': int,
            'module_name': str,
            'modules': List[NAStationModule],
            'place': NAPlace,
            'reachable': bool,
            'read_only': bool,
            'station_name': str,
            'type': str,
            'wifi_status': int
        }

        self.attribute_map = {
            'id': '_id',
            'cipher_id': 'cipher_id',
            'co2_calibrating': 'co2_calibrating',
            'dashboard_data': 'dashboard_data',
            'data_type': 'data_type',
            'date_setup': 'date_setup',
            'favorite': 'favorite',
            'firmware': 'firmware',
            'last_setup': 'last_setup',
            'last_status_store': 'last_status_store',
            'last_upgrade': 'last_upgrade',
            'module_name': 'module_name',
            'modules': 'modules',
            'place': 'place',
            'reachable': 'reachable',
            'read_only': 'read_only',
            'station_name': 'station_name',
            'type': 'type',
            'wifi_status': 'wifi_status'
        }

        self._id = id
        self._cipher_id = cipher_id
        self._co2_calibrating = co2_calibrating
        self._dashboard_data = dashboard_data
        self._data_type = data_type
        self._date_setup = date_setup
        self._favorite = favorite
        self._firmware = firmware
        self._last_setup = last_setup
        self._last_status_store = last_status_store
        self._last_upgrade = last_upgrade
        self._module_name = module_name
        self._modules = modules
        self._place = place
        self._reachable = reachable
        self._read_only = read_only
        self._station_name = station_name
        self._type = type
        self._wifi_status = wifi_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAMain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAMain of this NAMain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAMain.


        :return: The id of this NAMain.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAMain.


        :param id: The id of this NAMain.
        :type id: str
        """

        self._id = id

    @property
    def cipher_id(self):
        """Gets the cipher_id of this NAMain.


        :return: The cipher_id of this NAMain.
        :rtype: str
        """
        return self._cipher_id

    @cipher_id.setter
    def cipher_id(self, cipher_id):
        """Sets the cipher_id of this NAMain.


        :param cipher_id: The cipher_id of this NAMain.
        :type cipher_id: str
        """

        self._cipher_id = cipher_id

    @property
    def co2_calibrating(self):
        """Gets the co2_calibrating of this NAMain.


        :return: The co2_calibrating of this NAMain.
        :rtype: bool
        """
        return self._co2_calibrating

    @co2_calibrating.setter
    def co2_calibrating(self, co2_calibrating):
        """Sets the co2_calibrating of this NAMain.


        :param co2_calibrating: The co2_calibrating of this NAMain.
        :type co2_calibrating: bool
        """

        self._co2_calibrating = co2_calibrating

    @property
    def dashboard_data(self):
        """Gets the dashboard_data of this NAMain.


        :return: The dashboard_data of this NAMain.
        :rtype: NADashboardData
        """
        return self._dashboard_data

    @dashboard_data.setter
    def dashboard_data(self, dashboard_data):
        """Sets the dashboard_data of this NAMain.


        :param dashboard_data: The dashboard_data of this NAMain.
        :type dashboard_data: NADashboardData
        """

        self._dashboard_data = dashboard_data

    @property
    def data_type(self):
        """Gets the data_type of this NAMain.


        :return: The data_type of this NAMain.
        :rtype: List[str]
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this NAMain.


        :param data_type: The data_type of this NAMain.
        :type data_type: List[str]
        """

        self._data_type = data_type

    @property
    def date_setup(self):
        """Gets the date_setup of this NAMain.


        :return: The date_setup of this NAMain.
        :rtype: int
        """
        return self._date_setup

    @date_setup.setter
    def date_setup(self, date_setup):
        """Sets the date_setup of this NAMain.


        :param date_setup: The date_setup of this NAMain.
        :type date_setup: int
        """

        self._date_setup = date_setup

    @property
    def favorite(self):
        """Gets the favorite of this NAMain.

        true when the device is a user favorite and not owned by them

        :return: The favorite of this NAMain.
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this NAMain.

        true when the device is a user favorite and not owned by them

        :param favorite: The favorite of this NAMain.
        :type favorite: bool
        """

        self._favorite = favorite

    @property
    def firmware(self):
        """Gets the firmware of this NAMain.


        :return: The firmware of this NAMain.
        :rtype: int
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this NAMain.


        :param firmware: The firmware of this NAMain.
        :type firmware: int
        """

        self._firmware = firmware

    @property
    def last_setup(self):
        """Gets the last_setup of this NAMain.


        :return: The last_setup of this NAMain.
        :rtype: int
        """
        return self._last_setup

    @last_setup.setter
    def last_setup(self, last_setup):
        """Sets the last_setup of this NAMain.


        :param last_setup: The last_setup of this NAMain.
        :type last_setup: int
        """

        self._last_setup = last_setup

    @property
    def last_status_store(self):
        """Gets the last_status_store of this NAMain.


        :return: The last_status_store of this NAMain.
        :rtype: int
        """
        return self._last_status_store

    @last_status_store.setter
    def last_status_store(self, last_status_store):
        """Sets the last_status_store of this NAMain.


        :param last_status_store: The last_status_store of this NAMain.
        :type last_status_store: int
        """

        self._last_status_store = last_status_store

    @property
    def last_upgrade(self):
        """Gets the last_upgrade of this NAMain.


        :return: The last_upgrade of this NAMain.
        :rtype: int
        """
        return self._last_upgrade

    @last_upgrade.setter
    def last_upgrade(self, last_upgrade):
        """Sets the last_upgrade of this NAMain.


        :param last_upgrade: The last_upgrade of this NAMain.
        :type last_upgrade: int
        """

        self._last_upgrade = last_upgrade

    @property
    def module_name(self):
        """Gets the module_name of this NAMain.


        :return: The module_name of this NAMain.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this NAMain.


        :param module_name: The module_name of this NAMain.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def modules(self):
        """Gets the modules of this NAMain.


        :return: The modules of this NAMain.
        :rtype: List[NAStationModule]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this NAMain.


        :param modules: The modules of this NAMain.
        :type modules: List[NAStationModule]
        """

        self._modules = modules

    @property
    def place(self):
        """Gets the place of this NAMain.


        :return: The place of this NAMain.
        :rtype: NAPlace
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this NAMain.


        :param place: The place of this NAMain.
        :type place: NAPlace
        """

        self._place = place

    @property
    def reachable(self):
        """Gets the reachable of this NAMain.

        true when the station was seen by the Netatmo cloud within the last 4 hours

        :return: The reachable of this NAMain.
        :rtype: bool
        """
        return self._reachable

    @reachable.setter
    def reachable(self, reachable):
        """Sets the reachable of this NAMain.

        true when the station was seen by the Netatmo cloud within the last 4 hours

        :param reachable: The reachable of this NAMain.
        :type reachable: bool
        """

        self._reachable = reachable

    @property
    def read_only(self):
        """Gets the read_only of this NAMain.

        true when the user was invited to (or has favorited) a station, false when the user owns it

        :return: The read_only of this NAMain.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this NAMain.

        true when the user was invited to (or has favorited) a station, false when the user owns it

        :param read_only: The read_only of this NAMain.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def station_name(self):
        """Gets the station_name of this NAMain.


        :return: The station_name of this NAMain.
        :rtype: str
        """
        return self._station_name

    @station_name.setter
    def station_name(self, station_name):
        """Sets the station_name of this NAMain.


        :param station_name: The station_name of this NAMain.
        :type station_name: str
        """

        self._station_name = station_name

    @property
    def type(self):
        """Gets the type of this NAMain.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :return: The type of this NAMain.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NAMain.

        Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 

        :param type: The type of this NAMain.
        :type type: str
        """

        self._type = type

    @property
    def wifi_status(self):
        """Gets the wifi_status of this NAMain.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :return: The wifi_status of this NAMain.
        :rtype: int
        """
        return self._wifi_status

    @wifi_status.setter
    def wifi_status(self, wifi_status):
        """Sets the wifi_status of this NAMain.

        It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 = 86 bad signal RSSI_THRESHOLD_1 = 71 middle quality signal RSSI_THRESHOLD_2 = 56 good signal 

        :param wifi_status: The wifi_status of this NAMain.
        :type wifi_status: int
        """

        self._wifi_status = wifi_status
