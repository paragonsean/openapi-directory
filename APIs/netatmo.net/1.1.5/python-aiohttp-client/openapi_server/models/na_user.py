# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.na_date import NADate
from openapi_server.models.na_user_administrative import NAUserAdministrative
from openapi_server import util


class NAUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, administrative: NAUserAdministrative=None, date_creation: NADate=None, devices: List[str]=None, friend_devices: List[str]=None, mail: str=None, timeline_not_read: int=None, timeline_size: int=None):
        """NAUser - a model defined in OpenAPI

        :param id: The id of this NAUser.
        :param administrative: The administrative of this NAUser.
        :param date_creation: The date_creation of this NAUser.
        :param devices: The devices of this NAUser.
        :param friend_devices: The friend_devices of this NAUser.
        :param mail: The mail of this NAUser.
        :param timeline_not_read: The timeline_not_read of this NAUser.
        :param timeline_size: The timeline_size of this NAUser.
        """
        self.openapi_types = {
            'id': str,
            'administrative': NAUserAdministrative,
            'date_creation': NADate,
            'devices': List[str],
            'friend_devices': List[str],
            'mail': str,
            'timeline_not_read': int,
            'timeline_size': int
        }

        self.attribute_map = {
            'id': '_id',
            'administrative': 'administrative',
            'date_creation': 'date_creation',
            'devices': 'devices',
            'friend_devices': 'friend_devices',
            'mail': 'mail',
            'timeline_not_read': 'timeline_not_read',
            'timeline_size': 'timeline_size'
        }

        self._id = id
        self._administrative = administrative
        self._date_creation = date_creation
        self._devices = devices
        self._friend_devices = friend_devices
        self._mail = mail
        self._timeline_not_read = timeline_not_read
        self._timeline_size = timeline_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAUser of this NAUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NAUser.


        :return: The id of this NAUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NAUser.


        :param id: The id of this NAUser.
        :type id: str
        """

        self._id = id

    @property
    def administrative(self):
        """Gets the administrative of this NAUser.


        :return: The administrative of this NAUser.
        :rtype: NAUserAdministrative
        """
        return self._administrative

    @administrative.setter
    def administrative(self, administrative):
        """Sets the administrative of this NAUser.


        :param administrative: The administrative of this NAUser.
        :type administrative: NAUserAdministrative
        """

        self._administrative = administrative

    @property
    def date_creation(self):
        """Gets the date_creation of this NAUser.


        :return: The date_creation of this NAUser.
        :rtype: NADate
        """
        return self._date_creation

    @date_creation.setter
    def date_creation(self, date_creation):
        """Sets the date_creation of this NAUser.


        :param date_creation: The date_creation of this NAUser.
        :type date_creation: NADate
        """

        self._date_creation = date_creation

    @property
    def devices(self):
        """Gets the devices of this NAUser.

        An array of string containing the ids of the devices owned by the user

        :return: The devices of this NAUser.
        :rtype: List[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this NAUser.

        An array of string containing the ids of the devices owned by the user

        :param devices: The devices of this NAUser.
        :type devices: List[str]
        """

        self._devices = devices

    @property
    def friend_devices(self):
        """Gets the friend_devices of this NAUser.

        An array of string containing the ids of the devices on which the user has a \"guest\" access 

        :return: The friend_devices of this NAUser.
        :rtype: List[str]
        """
        return self._friend_devices

    @friend_devices.setter
    def friend_devices(self, friend_devices):
        """Sets the friend_devices of this NAUser.

        An array of string containing the ids of the devices on which the user has a \"guest\" access 

        :param friend_devices: The friend_devices of this NAUser.
        :type friend_devices: List[str]
        """

        self._friend_devices = friend_devices

    @property
    def mail(self):
        """Gets the mail of this NAUser.


        :return: The mail of this NAUser.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this NAUser.


        :param mail: The mail of this NAUser.
        :type mail: str
        """

        self._mail = mail

    @property
    def timeline_not_read(self):
        """Gets the timeline_not_read of this NAUser.


        :return: The timeline_not_read of this NAUser.
        :rtype: int
        """
        return self._timeline_not_read

    @timeline_not_read.setter
    def timeline_not_read(self, timeline_not_read):
        """Sets the timeline_not_read of this NAUser.


        :param timeline_not_read: The timeline_not_read of this NAUser.
        :type timeline_not_read: int
        """

        self._timeline_not_read = timeline_not_read

    @property
    def timeline_size(self):
        """Gets the timeline_size of this NAUser.


        :return: The timeline_size of this NAUser.
        :rtype: int
        """
        return self._timeline_size

    @timeline_size.setter
    def timeline_size(self, timeline_size):
        """Sets the timeline_size of this NAUser.


        :param timeline_size: The timeline_size of this NAUser.
        :type timeline_size: int
        """

        self._timeline_size = timeline_size
