# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NAPlace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude: float=None, city: str=None, country: str=None, from_ip: bool=None, improve_loc_proposed: bool=None, location: List[float]=None, timezone: str=None, trust_location: bool=None):
        """NAPlace - a model defined in OpenAPI

        :param altitude: The altitude of this NAPlace.
        :param city: The city of this NAPlace.
        :param country: The country of this NAPlace.
        :param from_ip: The from_ip of this NAPlace.
        :param improve_loc_proposed: The improve_loc_proposed of this NAPlace.
        :param location: The location of this NAPlace.
        :param timezone: The timezone of this NAPlace.
        :param trust_location: The trust_location of this NAPlace.
        """
        self.openapi_types = {
            'altitude': float,
            'city': str,
            'country': str,
            'from_ip': bool,
            'improve_loc_proposed': bool,
            'location': List[float],
            'timezone': str,
            'trust_location': bool
        }

        self.attribute_map = {
            'altitude': 'altitude',
            'city': 'city',
            'country': 'country',
            'from_ip': 'from_ip',
            'improve_loc_proposed': 'improveLocProposed',
            'location': 'location',
            'timezone': 'timezone',
            'trust_location': 'trust_location'
        }

        self._altitude = altitude
        self._city = city
        self._country = country
        self._from_ip = from_ip
        self._improve_loc_proposed = improve_loc_proposed
        self._location = location
        self._timezone = timezone
        self._trust_location = trust_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NAPlace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NAPlace of this NAPlace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude(self):
        """Gets the altitude of this NAPlace.


        :return: The altitude of this NAPlace.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this NAPlace.


        :param altitude: The altitude of this NAPlace.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def city(self):
        """Gets the city of this NAPlace.


        :return: The city of this NAPlace.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this NAPlace.


        :param city: The city of this NAPlace.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this NAPlace.


        :return: The country of this NAPlace.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this NAPlace.


        :param country: The country of this NAPlace.
        :type country: str
        """

        self._country = country

    @property
    def from_ip(self):
        """Gets the from_ip of this NAPlace.


        :return: The from_ip of this NAPlace.
        :rtype: bool
        """
        return self._from_ip

    @from_ip.setter
    def from_ip(self, from_ip):
        """Sets the from_ip of this NAPlace.


        :param from_ip: The from_ip of this NAPlace.
        :type from_ip: bool
        """

        self._from_ip = from_ip

    @property
    def improve_loc_proposed(self):
        """Gets the improve_loc_proposed of this NAPlace.


        :return: The improve_loc_proposed of this NAPlace.
        :rtype: bool
        """
        return self._improve_loc_proposed

    @improve_loc_proposed.setter
    def improve_loc_proposed(self, improve_loc_proposed):
        """Sets the improve_loc_proposed of this NAPlace.


        :param improve_loc_proposed: The improve_loc_proposed of this NAPlace.
        :type improve_loc_proposed: bool
        """

        self._improve_loc_proposed = improve_loc_proposed

    @property
    def location(self):
        """Gets the location of this NAPlace.


        :return: The location of this NAPlace.
        :rtype: List[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NAPlace.


        :param location: The location of this NAPlace.
        :type location: List[float]
        """

        self._location = location

    @property
    def timezone(self):
        """Gets the timezone of this NAPlace.


        :return: The timezone of this NAPlace.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this NAPlace.


        :param timezone: The timezone of this NAPlace.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def trust_location(self):
        """Gets the trust_location of this NAPlace.


        :return: The trust_location of this NAPlace.
        :rtype: bool
        """
        return self._trust_location

    @trust_location.setter
    def trust_location(self, trust_location):
        """Sets the trust_location of this NAPlace.


        :param trust_location: The trust_location of this NAPlace.
        :type trust_location: bool
        """

        self._trust_location = trust_location
