# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NADashboardData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_pressure: float=None, boiler_off: int=None, boiler_on: int=None, co2: float=None, gust_angle: int=None, gust_strength: int=None, humidity: float=None, noise: float=None, pressure: float=None, rain: float=None, temperature: float=None, wind_angle: int=None, wind_strength: int=None, date_max_temp: int=None, date_max_wind_str: int=None, date_min_temp: int=None, device_id: float=None, health_idx: int=None, max_temp: float=None, max_wind_str: int=None, min_temp: float=None, pressure_trend: str=None, sum_rain_1: float=None, sum_rain_24: float=None, temp_trend: str=None, time_utc: int=None):
        """NADashboardData - a model defined in OpenAPI

        :param absolute_pressure: The absolute_pressure of this NADashboardData.
        :param boiler_off: The boiler_off of this NADashboardData.
        :param boiler_on: The boiler_on of this NADashboardData.
        :param co2: The co2 of this NADashboardData.
        :param gust_angle: The gust_angle of this NADashboardData.
        :param gust_strength: The gust_strength of this NADashboardData.
        :param humidity: The humidity of this NADashboardData.
        :param noise: The noise of this NADashboardData.
        :param pressure: The pressure of this NADashboardData.
        :param rain: The rain of this NADashboardData.
        :param temperature: The temperature of this NADashboardData.
        :param wind_angle: The wind_angle of this NADashboardData.
        :param wind_strength: The wind_strength of this NADashboardData.
        :param date_max_temp: The date_max_temp of this NADashboardData.
        :param date_max_wind_str: The date_max_wind_str of this NADashboardData.
        :param date_min_temp: The date_min_temp of this NADashboardData.
        :param device_id: The device_id of this NADashboardData.
        :param health_idx: The health_idx of this NADashboardData.
        :param max_temp: The max_temp of this NADashboardData.
        :param max_wind_str: The max_wind_str of this NADashboardData.
        :param min_temp: The min_temp of this NADashboardData.
        :param pressure_trend: The pressure_trend of this NADashboardData.
        :param sum_rain_1: The sum_rain_1 of this NADashboardData.
        :param sum_rain_24: The sum_rain_24 of this NADashboardData.
        :param temp_trend: The temp_trend of this NADashboardData.
        :param time_utc: The time_utc of this NADashboardData.
        """
        self.openapi_types = {
            'absolute_pressure': float,
            'boiler_off': int,
            'boiler_on': int,
            'co2': float,
            'gust_angle': int,
            'gust_strength': int,
            'humidity': float,
            'noise': float,
            'pressure': float,
            'rain': float,
            'temperature': float,
            'wind_angle': int,
            'wind_strength': int,
            'date_max_temp': int,
            'date_max_wind_str': int,
            'date_min_temp': int,
            'device_id': float,
            'health_idx': int,
            'max_temp': float,
            'max_wind_str': int,
            'min_temp': float,
            'pressure_trend': str,
            'sum_rain_1': float,
            'sum_rain_24': float,
            'temp_trend': str,
            'time_utc': int
        }

        self.attribute_map = {
            'absolute_pressure': 'AbsolutePressure',
            'boiler_off': 'BoilerOff',
            'boiler_on': 'BoilerOn',
            'co2': 'CO2',
            'gust_angle': 'GustAngle',
            'gust_strength': 'GustStrength',
            'humidity': 'Humidity',
            'noise': 'Noise',
            'pressure': 'Pressure',
            'rain': 'Rain',
            'temperature': 'Temperature',
            'wind_angle': 'WindAngle',
            'wind_strength': 'WindStrength',
            'date_max_temp': 'date_max_temp',
            'date_max_wind_str': 'date_max_wind_str',
            'date_min_temp': 'date_min_temp',
            'device_id': 'device_id',
            'health_idx': 'health_idx',
            'max_temp': 'max_temp',
            'max_wind_str': 'max_wind_str',
            'min_temp': 'min_temp',
            'pressure_trend': 'pressure_trend',
            'sum_rain_1': 'sum_rain_1',
            'sum_rain_24': 'sum_rain_24',
            'temp_trend': 'temp_trend',
            'time_utc': 'time_utc'
        }

        self._absolute_pressure = absolute_pressure
        self._boiler_off = boiler_off
        self._boiler_on = boiler_on
        self._co2 = co2
        self._gust_angle = gust_angle
        self._gust_strength = gust_strength
        self._humidity = humidity
        self._noise = noise
        self._pressure = pressure
        self._rain = rain
        self._temperature = temperature
        self._wind_angle = wind_angle
        self._wind_strength = wind_strength
        self._date_max_temp = date_max_temp
        self._date_max_wind_str = date_max_wind_str
        self._date_min_temp = date_min_temp
        self._device_id = device_id
        self._health_idx = health_idx
        self._max_temp = max_temp
        self._max_wind_str = max_wind_str
        self._min_temp = min_temp
        self._pressure_trend = pressure_trend
        self._sum_rain_1 = sum_rain_1
        self._sum_rain_24 = sum_rain_24
        self._temp_trend = temp_trend
        self._time_utc = time_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NADashboardData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NADashboardData of this NADashboardData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_pressure(self):
        """Gets the absolute_pressure of this NADashboardData.

        Real measured pressure @ time_utc (in mb)

        :return: The absolute_pressure of this NADashboardData.
        :rtype: float
        """
        return self._absolute_pressure

    @absolute_pressure.setter
    def absolute_pressure(self, absolute_pressure):
        """Sets the absolute_pressure of this NADashboardData.

        Real measured pressure @ time_utc (in mb)

        :param absolute_pressure: The absolute_pressure of this NADashboardData.
        :type absolute_pressure: float
        """

        self._absolute_pressure = absolute_pressure

    @property
    def boiler_off(self):
        """Gets the boiler_off of this NADashboardData.


        :return: The boiler_off of this NADashboardData.
        :rtype: int
        """
        return self._boiler_off

    @boiler_off.setter
    def boiler_off(self, boiler_off):
        """Sets the boiler_off of this NADashboardData.


        :param boiler_off: The boiler_off of this NADashboardData.
        :type boiler_off: int
        """

        self._boiler_off = boiler_off

    @property
    def boiler_on(self):
        """Gets the boiler_on of this NADashboardData.


        :return: The boiler_on of this NADashboardData.
        :rtype: int
        """
        return self._boiler_on

    @boiler_on.setter
    def boiler_on(self, boiler_on):
        """Sets the boiler_on of this NADashboardData.


        :param boiler_on: The boiler_on of this NADashboardData.
        :type boiler_on: int
        """

        self._boiler_on = boiler_on

    @property
    def co2(self):
        """Gets the co2 of this NADashboardData.

        Last Co2 measured @ time_utc (in ppm)

        :return: The co2 of this NADashboardData.
        :rtype: float
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """Sets the co2 of this NADashboardData.

        Last Co2 measured @ time_utc (in ppm)

        :param co2: The co2 of this NADashboardData.
        :type co2: float
        """

        self._co2 = co2

    @property
    def gust_angle(self):
        """Gets the gust_angle of this NADashboardData.

        Direction of the last 5 min highest gust wind

        :return: The gust_angle of this NADashboardData.
        :rtype: int
        """
        return self._gust_angle

    @gust_angle.setter
    def gust_angle(self, gust_angle):
        """Sets the gust_angle of this NADashboardData.

        Direction of the last 5 min highest gust wind

        :param gust_angle: The gust_angle of this NADashboardData.
        :type gust_angle: int
        """

        self._gust_angle = gust_angle

    @property
    def gust_strength(self):
        """Gets the gust_strength of this NADashboardData.

        Speed of the last 5 min highest gust wind

        :return: The gust_strength of this NADashboardData.
        :rtype: int
        """
        return self._gust_strength

    @gust_strength.setter
    def gust_strength(self, gust_strength):
        """Sets the gust_strength of this NADashboardData.

        Speed of the last 5 min highest gust wind

        :param gust_strength: The gust_strength of this NADashboardData.
        :type gust_strength: int
        """

        self._gust_strength = gust_strength

    @property
    def humidity(self):
        """Gets the humidity of this NADashboardData.

        Last humidity measured @ time_utc (in %)

        :return: The humidity of this NADashboardData.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this NADashboardData.

        Last humidity measured @ time_utc (in %)

        :param humidity: The humidity of this NADashboardData.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def noise(self):
        """Gets the noise of this NADashboardData.

        Last noise measured @ time_utc (in db)

        :return: The noise of this NADashboardData.
        :rtype: float
        """
        return self._noise

    @noise.setter
    def noise(self, noise):
        """Sets the noise of this NADashboardData.

        Last noise measured @ time_utc (in db)

        :param noise: The noise of this NADashboardData.
        :type noise: float
        """

        self._noise = noise

    @property
    def pressure(self):
        """Gets the pressure of this NADashboardData.

        Last Sea level pressure measured @ time_utc (in mb)

        :return: The pressure of this NADashboardData.
        :rtype: float
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this NADashboardData.

        Last Sea level pressure measured @ time_utc (in mb)

        :param pressure: The pressure of this NADashboardData.
        :type pressure: float
        """

        self._pressure = pressure

    @property
    def rain(self):
        """Gets the rain of this NADashboardData.

        Last rain measured (in mm)

        :return: The rain of this NADashboardData.
        :rtype: float
        """
        return self._rain

    @rain.setter
    def rain(self, rain):
        """Sets the rain of this NADashboardData.

        Last rain measured (in mm)

        :param rain: The rain of this NADashboardData.
        :type rain: float
        """

        self._rain = rain

    @property
    def temperature(self):
        """Gets the temperature of this NADashboardData.

        Last temperature measure @ time_utc (in °C)

        :return: The temperature of this NADashboardData.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this NADashboardData.

        Last temperature measure @ time_utc (in °C)

        :param temperature: The temperature of this NADashboardData.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def wind_angle(self):
        """Gets the wind_angle of this NADashboardData.

        Current 5 min average wind direction measured @ time_utc (in °)

        :return: The wind_angle of this NADashboardData.
        :rtype: int
        """
        return self._wind_angle

    @wind_angle.setter
    def wind_angle(self, wind_angle):
        """Sets the wind_angle of this NADashboardData.

        Current 5 min average wind direction measured @ time_utc (in °)

        :param wind_angle: The wind_angle of this NADashboardData.
        :type wind_angle: int
        """

        self._wind_angle = wind_angle

    @property
    def wind_strength(self):
        """Gets the wind_strength of this NADashboardData.

        Current 5 min average wind speed measured @ time_utc (in km/h)

        :return: The wind_strength of this NADashboardData.
        :rtype: int
        """
        return self._wind_strength

    @wind_strength.setter
    def wind_strength(self, wind_strength):
        """Sets the wind_strength of this NADashboardData.

        Current 5 min average wind speed measured @ time_utc (in km/h)

        :param wind_strength: The wind_strength of this NADashboardData.
        :type wind_strength: int
        """

        self._wind_strength = wind_strength

    @property
    def date_max_temp(self):
        """Gets the date_max_temp of this NADashboardData.

        Timestamp when max temperature was measured

        :return: The date_max_temp of this NADashboardData.
        :rtype: int
        """
        return self._date_max_temp

    @date_max_temp.setter
    def date_max_temp(self, date_max_temp):
        """Sets the date_max_temp of this NADashboardData.

        Timestamp when max temperature was measured

        :param date_max_temp: The date_max_temp of this NADashboardData.
        :type date_max_temp: int
        """

        self._date_max_temp = date_max_temp

    @property
    def date_max_wind_str(self):
        """Gets the date_max_wind_str of this NADashboardData.

        Timestamp when max wind strength was measured

        :return: The date_max_wind_str of this NADashboardData.
        :rtype: int
        """
        return self._date_max_wind_str

    @date_max_wind_str.setter
    def date_max_wind_str(self, date_max_wind_str):
        """Sets the date_max_wind_str of this NADashboardData.

        Timestamp when max wind strength was measured

        :param date_max_wind_str: The date_max_wind_str of this NADashboardData.
        :type date_max_wind_str: int
        """

        self._date_max_wind_str = date_max_wind_str

    @property
    def date_min_temp(self):
        """Gets the date_min_temp of this NADashboardData.

        Timestamp when min temperature was measured

        :return: The date_min_temp of this NADashboardData.
        :rtype: int
        """
        return self._date_min_temp

    @date_min_temp.setter
    def date_min_temp(self, date_min_temp):
        """Sets the date_min_temp of this NADashboardData.

        Timestamp when min temperature was measured

        :param date_min_temp: The date_min_temp of this NADashboardData.
        :type date_min_temp: int
        """

        self._date_min_temp = date_min_temp

    @property
    def device_id(self):
        """Gets the device_id of this NADashboardData.


        :return: The device_id of this NADashboardData.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this NADashboardData.


        :param device_id: The device_id of this NADashboardData.
        :type device_id: float
        """

        self._device_id = device_id

    @property
    def health_idx(self):
        """Gets the health_idx of this NADashboardData.

        Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy

        :return: The health_idx of this NADashboardData.
        :rtype: int
        """
        return self._health_idx

    @health_idx.setter
    def health_idx(self, health_idx):
        """Sets the health_idx of this NADashboardData.

        Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy

        :param health_idx: The health_idx of this NADashboardData.
        :type health_idx: int
        """

        self._health_idx = health_idx

    @property
    def max_temp(self):
        """Gets the max_temp of this NADashboardData.

        Min temperature of the day (measured @ date_min_temp)

        :return: The max_temp of this NADashboardData.
        :rtype: float
        """
        return self._max_temp

    @max_temp.setter
    def max_temp(self, max_temp):
        """Sets the max_temp of this NADashboardData.

        Min temperature of the day (measured @ date_min_temp)

        :param max_temp: The max_temp of this NADashboardData.
        :type max_temp: float
        """

        self._max_temp = max_temp

    @property
    def max_wind_str(self):
        """Gets the max_wind_str of this NADashboardData.


        :return: The max_wind_str of this NADashboardData.
        :rtype: int
        """
        return self._max_wind_str

    @max_wind_str.setter
    def max_wind_str(self, max_wind_str):
        """Sets the max_wind_str of this NADashboardData.


        :param max_wind_str: The max_wind_str of this NADashboardData.
        :type max_wind_str: int
        """

        self._max_wind_str = max_wind_str

    @property
    def min_temp(self):
        """Gets the min_temp of this NADashboardData.

        Max temperature of the day (measured @ date_max_temp)

        :return: The min_temp of this NADashboardData.
        :rtype: float
        """
        return self._min_temp

    @min_temp.setter
    def min_temp(self, min_temp):
        """Sets the min_temp of this NADashboardData.

        Max temperature of the day (measured @ date_max_temp)

        :param min_temp: The min_temp of this NADashboardData.
        :type min_temp: float
        """

        self._min_temp = min_temp

    @property
    def pressure_trend(self):
        """Gets the pressure_trend of this NADashboardData.

        Pressure evolution trend

        :return: The pressure_trend of this NADashboardData.
        :rtype: str
        """
        return self._pressure_trend

    @pressure_trend.setter
    def pressure_trend(self, pressure_trend):
        """Sets the pressure_trend of this NADashboardData.

        Pressure evolution trend

        :param pressure_trend: The pressure_trend of this NADashboardData.
        :type pressure_trend: str
        """

        self._pressure_trend = pressure_trend

    @property
    def sum_rain_1(self):
        """Gets the sum_rain_1 of this NADashboardData.

        Amount of rain in last hour

        :return: The sum_rain_1 of this NADashboardData.
        :rtype: float
        """
        return self._sum_rain_1

    @sum_rain_1.setter
    def sum_rain_1(self, sum_rain_1):
        """Sets the sum_rain_1 of this NADashboardData.

        Amount of rain in last hour

        :param sum_rain_1: The sum_rain_1 of this NADashboardData.
        :type sum_rain_1: float
        """

        self._sum_rain_1 = sum_rain_1

    @property
    def sum_rain_24(self):
        """Gets the sum_rain_24 of this NADashboardData.

        Amount of rain today

        :return: The sum_rain_24 of this NADashboardData.
        :rtype: float
        """
        return self._sum_rain_24

    @sum_rain_24.setter
    def sum_rain_24(self, sum_rain_24):
        """Sets the sum_rain_24 of this NADashboardData.

        Amount of rain today

        :param sum_rain_24: The sum_rain_24 of this NADashboardData.
        :type sum_rain_24: float
        """

        self._sum_rain_24 = sum_rain_24

    @property
    def temp_trend(self):
        """Gets the temp_trend of this NADashboardData.

        Temperature evolution trend

        :return: The temp_trend of this NADashboardData.
        :rtype: str
        """
        return self._temp_trend

    @temp_trend.setter
    def temp_trend(self, temp_trend):
        """Sets the temp_trend of this NADashboardData.

        Temperature evolution trend

        :param temp_trend: The temp_trend of this NADashboardData.
        :type temp_trend: str
        """

        self._temp_trend = temp_trend

    @property
    def time_utc(self):
        """Gets the time_utc of this NADashboardData.


        :return: The time_utc of this NADashboardData.
        :rtype: int
        """
        return self._time_utc

    @time_utc.setter
    def time_utc(self, time_utc):
        """Sets the time_utc of this NADashboardData.


        :param time_utc: The time_utc of this NADashboardData.
        :type time_utc: int
        """

        self._time_utc = time_utc
