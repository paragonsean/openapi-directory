/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAUser::OAINAUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAUser::OAINAUser() {
    this->initializeModel();
}

OAINAUser::~OAINAUser() {}

void OAINAUser::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_administrative_isSet = false;
    m_administrative_isValid = false;

    m_date_creation_isSet = false;
    m_date_creation_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_friend_devices_isSet = false;
    m_friend_devices_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_timeline_not_read_isSet = false;
    m_timeline_not_read_isValid = false;

    m_timeline_size_isSet = false;
    m_timeline_size_isValid = false;
}

void OAINAUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAUser::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_administrative_isValid = ::OpenAPI::fromJsonValue(m_administrative, json[QString("administrative")]);
    m_administrative_isSet = !json[QString("administrative")].isNull() && m_administrative_isValid;

    m_date_creation_isValid = ::OpenAPI::fromJsonValue(m_date_creation, json[QString("date_creation")]);
    m_date_creation_isSet = !json[QString("date_creation")].isNull() && m_date_creation_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_friend_devices_isValid = ::OpenAPI::fromJsonValue(m_friend_devices, json[QString("friend_devices")]);
    m_friend_devices_isSet = !json[QString("friend_devices")].isNull() && m_friend_devices_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_timeline_not_read_isValid = ::OpenAPI::fromJsonValue(m_timeline_not_read, json[QString("timeline_not_read")]);
    m_timeline_not_read_isSet = !json[QString("timeline_not_read")].isNull() && m_timeline_not_read_isValid;

    m_timeline_size_isValid = ::OpenAPI::fromJsonValue(m_timeline_size, json[QString("timeline_size")]);
    m_timeline_size_isSet = !json[QString("timeline_size")].isNull() && m_timeline_size_isValid;
}

QString OAINAUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAUser::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_administrative.isSet()) {
        obj.insert(QString("administrative"), ::OpenAPI::toJsonValue(m_administrative));
    }
    if (m_date_creation.isSet()) {
        obj.insert(QString("date_creation"), ::OpenAPI::toJsonValue(m_date_creation));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_friend_devices.size() > 0) {
        obj.insert(QString("friend_devices"), ::OpenAPI::toJsonValue(m_friend_devices));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_timeline_not_read_isSet) {
        obj.insert(QString("timeline_not_read"), ::OpenAPI::toJsonValue(m_timeline_not_read));
    }
    if (m_timeline_size_isSet) {
        obj.insert(QString("timeline_size"), ::OpenAPI::toJsonValue(m_timeline_size));
    }
    return obj;
}

QString OAINAUser::getId() const {
    return m__id;
}
void OAINAUser::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAUser::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAUser::is__id_Valid() const{
    return m__id_isValid;
}

OAINAUserAdministrative OAINAUser::getAdministrative() const {
    return m_administrative;
}
void OAINAUser::setAdministrative(const OAINAUserAdministrative &administrative) {
    m_administrative = administrative;
    m_administrative_isSet = true;
}

bool OAINAUser::is_administrative_Set() const{
    return m_administrative_isSet;
}

bool OAINAUser::is_administrative_Valid() const{
    return m_administrative_isValid;
}

OAINADate OAINAUser::getDateCreation() const {
    return m_date_creation;
}
void OAINAUser::setDateCreation(const OAINADate &date_creation) {
    m_date_creation = date_creation;
    m_date_creation_isSet = true;
}

bool OAINAUser::is_date_creation_Set() const{
    return m_date_creation_isSet;
}

bool OAINAUser::is_date_creation_Valid() const{
    return m_date_creation_isValid;
}

QList<QString> OAINAUser::getDevices() const {
    return m_devices;
}
void OAINAUser::setDevices(const QList<QString> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAINAUser::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAINAUser::is_devices_Valid() const{
    return m_devices_isValid;
}

QList<QString> OAINAUser::getFriendDevices() const {
    return m_friend_devices;
}
void OAINAUser::setFriendDevices(const QList<QString> &friend_devices) {
    m_friend_devices = friend_devices;
    m_friend_devices_isSet = true;
}

bool OAINAUser::is_friend_devices_Set() const{
    return m_friend_devices_isSet;
}

bool OAINAUser::is_friend_devices_Valid() const{
    return m_friend_devices_isValid;
}

QString OAINAUser::getMail() const {
    return m_mail;
}
void OAINAUser::setMail(const QString &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAINAUser::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAINAUser::is_mail_Valid() const{
    return m_mail_isValid;
}

qint32 OAINAUser::getTimelineNotRead() const {
    return m_timeline_not_read;
}
void OAINAUser::setTimelineNotRead(const qint32 &timeline_not_read) {
    m_timeline_not_read = timeline_not_read;
    m_timeline_not_read_isSet = true;
}

bool OAINAUser::is_timeline_not_read_Set() const{
    return m_timeline_not_read_isSet;
}

bool OAINAUser::is_timeline_not_read_Valid() const{
    return m_timeline_not_read_isValid;
}

qint32 OAINAUser::getTimelineSize() const {
    return m_timeline_size;
}
void OAINAUser::setTimelineSize(const qint32 &timeline_size) {
    m_timeline_size = timeline_size;
    m_timeline_size_isSet = true;
}

bool OAINAUser::is_timeline_size_Set() const{
    return m_timeline_size_isSet;
}

bool OAINAUser::is_timeline_size_Valid() const{
    return m_timeline_size_isValid;
}

bool OAINAUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_creation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friend_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_not_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
