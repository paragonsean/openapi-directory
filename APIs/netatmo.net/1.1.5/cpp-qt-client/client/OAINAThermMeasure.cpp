/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAThermMeasure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAThermMeasure::OAINAThermMeasure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAThermMeasure::OAINAThermMeasure() {
    this->initializeModel();
}

OAINAThermMeasure::~OAINAThermMeasure() {}

void OAINAThermMeasure::initializeModel() {

    m_setpoint_temp_isSet = false;
    m_setpoint_temp_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAINAThermMeasure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAThermMeasure::fromJsonObject(QJsonObject json) {

    m_setpoint_temp_isValid = ::OpenAPI::fromJsonValue(m_setpoint_temp, json[QString("setpoint_temp")]);
    m_setpoint_temp_isSet = !json[QString("setpoint_temp")].isNull() && m_setpoint_temp_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAINAThermMeasure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAThermMeasure::asJsonObject() const {
    QJsonObject obj;
    if (m_setpoint_temp_isSet) {
        obj.insert(QString("setpoint_temp"), ::OpenAPI::toJsonValue(m_setpoint_temp));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

float OAINAThermMeasure::getSetpointTemp() const {
    return m_setpoint_temp;
}
void OAINAThermMeasure::setSetpointTemp(const float &setpoint_temp) {
    m_setpoint_temp = setpoint_temp;
    m_setpoint_temp_isSet = true;
}

bool OAINAThermMeasure::is_setpoint_temp_Set() const{
    return m_setpoint_temp_isSet;
}

bool OAINAThermMeasure::is_setpoint_temp_Valid() const{
    return m_setpoint_temp_isValid;
}

float OAINAThermMeasure::getTemperature() const {
    return m_temperature;
}
void OAINAThermMeasure::setTemperature(const float &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAINAThermMeasure::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAINAThermMeasure::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint32 OAINAThermMeasure::getTime() const {
    return m_time;
}
void OAINAThermMeasure::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAINAThermMeasure::is_time_Set() const{
    return m_time_isSet;
}

bool OAINAThermMeasure::is_time_Valid() const{
    return m_time_isValid;
}

bool OAINAThermMeasure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_setpoint_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAThermMeasure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
