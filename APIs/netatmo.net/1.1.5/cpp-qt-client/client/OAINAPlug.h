/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAPlug.h
 *
 * 
 */

#ifndef OAINAPlug_H
#define OAINAPlug_H

#include <QJsonObject>

#include "OAINAPlace.h"
#include "OAINAThermostat.h"
#include "OAINAYearMonth.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINAYearMonth;
class OAINAThermostat;
class OAINAPlace;

class OAINAPlug : public OAIObject {
public:
    OAINAPlug();
    OAINAPlug(QString json);
    ~OAINAPlug() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &_id);
    bool is__id_Set() const;
    bool is__id_Valid() const;

    qint32 getFirmware() const;
    void setFirmware(const qint32 &firmware);
    bool is_firmware_Set() const;
    bool is_firmware_Valid() const;

    OAINAYearMonth getLastBilan() const;
    void setLastBilan(const OAINAYearMonth &last_bilan);
    bool is_last_bilan_Set() const;
    bool is_last_bilan_Valid() const;

    qint32 getLastPlugSeen() const;
    void setLastPlugSeen(const qint32 &last_plug_seen);
    bool is_last_plug_seen_Set() const;
    bool is_last_plug_seen_Valid() const;

    qint32 getLastStatusStore() const;
    void setLastStatusStore(const qint32 &last_status_store);
    bool is_last_status_store_Set() const;
    bool is_last_status_store_Valid() const;

    QList<OAINAThermostat> getModules() const;
    void setModules(const QList<OAINAThermostat> &modules);
    bool is_modules_Set() const;
    bool is_modules_Valid() const;

    OAINAPlace getPlace() const;
    void setPlace(const OAINAPlace &place);
    bool is_place_Set() const;
    bool is_place_Valid() const;

    qint32 getPlugConnectedBoiler() const;
    void setPlugConnectedBoiler(const qint32 &plug_connected_boiler);
    bool is_plug_connected_boiler_Set() const;
    bool is_plug_connected_boiler_Valid() const;

    QString getStationName() const;
    void setStationName(const QString &station_name);
    bool is_station_name_Set() const;
    bool is_station_name_Valid() const;

    bool isSyncing() const;
    void setSyncing(const bool &syncing);
    bool is_syncing_Set() const;
    bool is_syncing_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isUdpConn() const;
    void setUdpConn(const bool &udp_conn);
    bool is_udp_conn_Set() const;
    bool is_udp_conn_Valid() const;

    qint32 getWifiStatus() const;
    void setWifiStatus(const qint32 &wifi_status);
    bool is_wifi_status_Set() const;
    bool is_wifi_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__id;
    bool m__id_isSet;
    bool m__id_isValid;

    qint32 m_firmware;
    bool m_firmware_isSet;
    bool m_firmware_isValid;

    OAINAYearMonth m_last_bilan;
    bool m_last_bilan_isSet;
    bool m_last_bilan_isValid;

    qint32 m_last_plug_seen;
    bool m_last_plug_seen_isSet;
    bool m_last_plug_seen_isValid;

    qint32 m_last_status_store;
    bool m_last_status_store_isSet;
    bool m_last_status_store_isValid;

    QList<OAINAThermostat> m_modules;
    bool m_modules_isSet;
    bool m_modules_isValid;

    OAINAPlace m_place;
    bool m_place_isSet;
    bool m_place_isValid;

    qint32 m_plug_connected_boiler;
    bool m_plug_connected_boiler_isSet;
    bool m_plug_connected_boiler_isValid;

    QString m_station_name;
    bool m_station_name_isSet;
    bool m_station_name_isValid;

    bool m_syncing;
    bool m_syncing_isSet;
    bool m_syncing_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_udp_conn;
    bool m_udp_conn_isSet;
    bool m_udp_conn_isValid;

    qint32 m_wifi_status;
    bool m_wifi_status_isSet;
    bool m_wifi_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAPlug)

#endif // OAINAPlug_H
