/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAMain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAMain::OAINAMain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAMain::OAINAMain() {
    this->initializeModel();
}

OAINAMain::~OAINAMain() {}

void OAINAMain::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_cipher_id_isSet = false;
    m_cipher_id_isValid = false;

    m_co2_calibrating_isSet = false;
    m_co2_calibrating_isValid = false;

    m_dashboard_data_isSet = false;
    m_dashboard_data_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_date_setup_isSet = false;
    m_date_setup_isValid = false;

    m_favorite_isSet = false;
    m_favorite_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_last_setup_isSet = false;
    m_last_setup_isValid = false;

    m_last_status_store_isSet = false;
    m_last_status_store_isValid = false;

    m_last_upgrade_isSet = false;
    m_last_upgrade_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_reachable_isSet = false;
    m_reachable_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_station_name_isSet = false;
    m_station_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wifi_status_isSet = false;
    m_wifi_status_isValid = false;
}

void OAINAMain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAMain::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_cipher_id_isValid = ::OpenAPI::fromJsonValue(m_cipher_id, json[QString("cipher_id")]);
    m_cipher_id_isSet = !json[QString("cipher_id")].isNull() && m_cipher_id_isValid;

    m_co2_calibrating_isValid = ::OpenAPI::fromJsonValue(m_co2_calibrating, json[QString("co2_calibrating")]);
    m_co2_calibrating_isSet = !json[QString("co2_calibrating")].isNull() && m_co2_calibrating_isValid;

    m_dashboard_data_isValid = ::OpenAPI::fromJsonValue(m_dashboard_data, json[QString("dashboard_data")]);
    m_dashboard_data_isSet = !json[QString("dashboard_data")].isNull() && m_dashboard_data_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_date_setup_isValid = ::OpenAPI::fromJsonValue(m_date_setup, json[QString("date_setup")]);
    m_date_setup_isSet = !json[QString("date_setup")].isNull() && m_date_setup_isValid;

    m_favorite_isValid = ::OpenAPI::fromJsonValue(m_favorite, json[QString("favorite")]);
    m_favorite_isSet = !json[QString("favorite")].isNull() && m_favorite_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_last_setup_isValid = ::OpenAPI::fromJsonValue(m_last_setup, json[QString("last_setup")]);
    m_last_setup_isSet = !json[QString("last_setup")].isNull() && m_last_setup_isValid;

    m_last_status_store_isValid = ::OpenAPI::fromJsonValue(m_last_status_store, json[QString("last_status_store")]);
    m_last_status_store_isSet = !json[QString("last_status_store")].isNull() && m_last_status_store_isValid;

    m_last_upgrade_isValid = ::OpenAPI::fromJsonValue(m_last_upgrade, json[QString("last_upgrade")]);
    m_last_upgrade_isSet = !json[QString("last_upgrade")].isNull() && m_last_upgrade_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("module_name")]);
    m_module_name_isSet = !json[QString("module_name")].isNull() && m_module_name_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_reachable_isValid = ::OpenAPI::fromJsonValue(m_reachable, json[QString("reachable")]);
    m_reachable_isSet = !json[QString("reachable")].isNull() && m_reachable_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;

    m_station_name_isValid = ::OpenAPI::fromJsonValue(m_station_name, json[QString("station_name")]);
    m_station_name_isSet = !json[QString("station_name")].isNull() && m_station_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wifi_status_isValid = ::OpenAPI::fromJsonValue(m_wifi_status, json[QString("wifi_status")]);
    m_wifi_status_isSet = !json[QString("wifi_status")].isNull() && m_wifi_status_isValid;
}

QString OAINAMain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAMain::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_cipher_id_isSet) {
        obj.insert(QString("cipher_id"), ::OpenAPI::toJsonValue(m_cipher_id));
    }
    if (m_co2_calibrating_isSet) {
        obj.insert(QString("co2_calibrating"), ::OpenAPI::toJsonValue(m_co2_calibrating));
    }
    if (m_dashboard_data.isSet()) {
        obj.insert(QString("dashboard_data"), ::OpenAPI::toJsonValue(m_dashboard_data));
    }
    if (m_data_type.size() > 0) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_date_setup_isSet) {
        obj.insert(QString("date_setup"), ::OpenAPI::toJsonValue(m_date_setup));
    }
    if (m_favorite_isSet) {
        obj.insert(QString("favorite"), ::OpenAPI::toJsonValue(m_favorite));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_last_setup_isSet) {
        obj.insert(QString("last_setup"), ::OpenAPI::toJsonValue(m_last_setup));
    }
    if (m_last_status_store_isSet) {
        obj.insert(QString("last_status_store"), ::OpenAPI::toJsonValue(m_last_status_store));
    }
    if (m_last_upgrade_isSet) {
        obj.insert(QString("last_upgrade"), ::OpenAPI::toJsonValue(m_last_upgrade));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("module_name"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_reachable_isSet) {
        obj.insert(QString("reachable"), ::OpenAPI::toJsonValue(m_reachable));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_station_name_isSet) {
        obj.insert(QString("station_name"), ::OpenAPI::toJsonValue(m_station_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wifi_status_isSet) {
        obj.insert(QString("wifi_status"), ::OpenAPI::toJsonValue(m_wifi_status));
    }
    return obj;
}

QString OAINAMain::getId() const {
    return m__id;
}
void OAINAMain::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAMain::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAMain::is__id_Valid() const{
    return m__id_isValid;
}

QString OAINAMain::getCipherId() const {
    return m_cipher_id;
}
void OAINAMain::setCipherId(const QString &cipher_id) {
    m_cipher_id = cipher_id;
    m_cipher_id_isSet = true;
}

bool OAINAMain::is_cipher_id_Set() const{
    return m_cipher_id_isSet;
}

bool OAINAMain::is_cipher_id_Valid() const{
    return m_cipher_id_isValid;
}

bool OAINAMain::isCo2Calibrating() const {
    return m_co2_calibrating;
}
void OAINAMain::setCo2Calibrating(const bool &co2_calibrating) {
    m_co2_calibrating = co2_calibrating;
    m_co2_calibrating_isSet = true;
}

bool OAINAMain::is_co2_calibrating_Set() const{
    return m_co2_calibrating_isSet;
}

bool OAINAMain::is_co2_calibrating_Valid() const{
    return m_co2_calibrating_isValid;
}

OAINADashboardData OAINAMain::getDashboardData() const {
    return m_dashboard_data;
}
void OAINAMain::setDashboardData(const OAINADashboardData &dashboard_data) {
    m_dashboard_data = dashboard_data;
    m_dashboard_data_isSet = true;
}

bool OAINAMain::is_dashboard_data_Set() const{
    return m_dashboard_data_isSet;
}

bool OAINAMain::is_dashboard_data_Valid() const{
    return m_dashboard_data_isValid;
}

QList<QString> OAINAMain::getDataType() const {
    return m_data_type;
}
void OAINAMain::setDataType(const QList<QString> &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAINAMain::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAINAMain::is_data_type_Valid() const{
    return m_data_type_isValid;
}

qint32 OAINAMain::getDateSetup() const {
    return m_date_setup;
}
void OAINAMain::setDateSetup(const qint32 &date_setup) {
    m_date_setup = date_setup;
    m_date_setup_isSet = true;
}

bool OAINAMain::is_date_setup_Set() const{
    return m_date_setup_isSet;
}

bool OAINAMain::is_date_setup_Valid() const{
    return m_date_setup_isValid;
}

bool OAINAMain::isFavorite() const {
    return m_favorite;
}
void OAINAMain::setFavorite(const bool &favorite) {
    m_favorite = favorite;
    m_favorite_isSet = true;
}

bool OAINAMain::is_favorite_Set() const{
    return m_favorite_isSet;
}

bool OAINAMain::is_favorite_Valid() const{
    return m_favorite_isValid;
}

qint32 OAINAMain::getFirmware() const {
    return m_firmware;
}
void OAINAMain::setFirmware(const qint32 &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAINAMain::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAINAMain::is_firmware_Valid() const{
    return m_firmware_isValid;
}

qint32 OAINAMain::getLastSetup() const {
    return m_last_setup;
}
void OAINAMain::setLastSetup(const qint32 &last_setup) {
    m_last_setup = last_setup;
    m_last_setup_isSet = true;
}

bool OAINAMain::is_last_setup_Set() const{
    return m_last_setup_isSet;
}

bool OAINAMain::is_last_setup_Valid() const{
    return m_last_setup_isValid;
}

qint32 OAINAMain::getLastStatusStore() const {
    return m_last_status_store;
}
void OAINAMain::setLastStatusStore(const qint32 &last_status_store) {
    m_last_status_store = last_status_store;
    m_last_status_store_isSet = true;
}

bool OAINAMain::is_last_status_store_Set() const{
    return m_last_status_store_isSet;
}

bool OAINAMain::is_last_status_store_Valid() const{
    return m_last_status_store_isValid;
}

qint32 OAINAMain::getLastUpgrade() const {
    return m_last_upgrade;
}
void OAINAMain::setLastUpgrade(const qint32 &last_upgrade) {
    m_last_upgrade = last_upgrade;
    m_last_upgrade_isSet = true;
}

bool OAINAMain::is_last_upgrade_Set() const{
    return m_last_upgrade_isSet;
}

bool OAINAMain::is_last_upgrade_Valid() const{
    return m_last_upgrade_isValid;
}

QString OAINAMain::getModuleName() const {
    return m_module_name;
}
void OAINAMain::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAINAMain::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAINAMain::is_module_name_Valid() const{
    return m_module_name_isValid;
}

QList<OAINAStationModule> OAINAMain::getModules() const {
    return m_modules;
}
void OAINAMain::setModules(const QList<OAINAStationModule> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAINAMain::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAINAMain::is_modules_Valid() const{
    return m_modules_isValid;
}

OAINAPlace OAINAMain::getPlace() const {
    return m_place;
}
void OAINAMain::setPlace(const OAINAPlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAINAMain::is_place_Set() const{
    return m_place_isSet;
}

bool OAINAMain::is_place_Valid() const{
    return m_place_isValid;
}

bool OAINAMain::isReachable() const {
    return m_reachable;
}
void OAINAMain::setReachable(const bool &reachable) {
    m_reachable = reachable;
    m_reachable_isSet = true;
}

bool OAINAMain::is_reachable_Set() const{
    return m_reachable_isSet;
}

bool OAINAMain::is_reachable_Valid() const{
    return m_reachable_isValid;
}

bool OAINAMain::isReadOnly() const {
    return m_read_only;
}
void OAINAMain::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAINAMain::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAINAMain::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAINAMain::getStationName() const {
    return m_station_name;
}
void OAINAMain::setStationName(const QString &station_name) {
    m_station_name = station_name;
    m_station_name_isSet = true;
}

bool OAINAMain::is_station_name_Set() const{
    return m_station_name_isSet;
}

bool OAINAMain::is_station_name_Valid() const{
    return m_station_name_isValid;
}

QString OAINAMain::getType() const {
    return m_type;
}
void OAINAMain::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAMain::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAMain::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAINAMain::getWifiStatus() const {
    return m_wifi_status;
}
void OAINAMain::setWifiStatus(const qint32 &wifi_status) {
    m_wifi_status = wifi_status;
    m_wifi_status_isSet = true;
}

bool OAINAMain::is_wifi_status_Set() const{
    return m_wifi_status_isSet;
}

bool OAINAMain::is_wifi_status_Valid() const{
    return m_wifi_status_isValid;
}

bool OAINAMain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cipher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_calibrating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAMain::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
