/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINADashboardData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINADashboardData::OAINADashboardData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINADashboardData::OAINADashboardData() {
    this->initializeModel();
}

OAINADashboardData::~OAINADashboardData() {}

void OAINADashboardData::initializeModel() {

    m_absolute_pressure_isSet = false;
    m_absolute_pressure_isValid = false;

    m_boiler_off_isSet = false;
    m_boiler_off_isValid = false;

    m_boiler_on_isSet = false;
    m_boiler_on_isValid = false;

    m_co2_isSet = false;
    m_co2_isValid = false;

    m_gust_angle_isSet = false;
    m_gust_angle_isValid = false;

    m_gust_strength_isSet = false;
    m_gust_strength_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_noise_isSet = false;
    m_noise_isValid = false;

    m_pressure_isSet = false;
    m_pressure_isValid = false;

    m_rain_isSet = false;
    m_rain_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_wind_angle_isSet = false;
    m_wind_angle_isValid = false;

    m_wind_strength_isSet = false;
    m_wind_strength_isValid = false;

    m_date_max_temp_isSet = false;
    m_date_max_temp_isValid = false;

    m_date_max_wind_str_isSet = false;
    m_date_max_wind_str_isValid = false;

    m_date_min_temp_isSet = false;
    m_date_min_temp_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_health_idx_isSet = false;
    m_health_idx_isValid = false;

    m_max_temp_isSet = false;
    m_max_temp_isValid = false;

    m_max_wind_str_isSet = false;
    m_max_wind_str_isValid = false;

    m_min_temp_isSet = false;
    m_min_temp_isValid = false;

    m_pressure_trend_isSet = false;
    m_pressure_trend_isValid = false;

    m_sum_rain_1_isSet = false;
    m_sum_rain_1_isValid = false;

    m_sum_rain_24_isSet = false;
    m_sum_rain_24_isValid = false;

    m_temp_trend_isSet = false;
    m_temp_trend_isValid = false;

    m_time_utc_isSet = false;
    m_time_utc_isValid = false;
}

void OAINADashboardData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINADashboardData::fromJsonObject(QJsonObject json) {

    m_absolute_pressure_isValid = ::OpenAPI::fromJsonValue(m_absolute_pressure, json[QString("AbsolutePressure")]);
    m_absolute_pressure_isSet = !json[QString("AbsolutePressure")].isNull() && m_absolute_pressure_isValid;

    m_boiler_off_isValid = ::OpenAPI::fromJsonValue(m_boiler_off, json[QString("BoilerOff")]);
    m_boiler_off_isSet = !json[QString("BoilerOff")].isNull() && m_boiler_off_isValid;

    m_boiler_on_isValid = ::OpenAPI::fromJsonValue(m_boiler_on, json[QString("BoilerOn")]);
    m_boiler_on_isSet = !json[QString("BoilerOn")].isNull() && m_boiler_on_isValid;

    m_co2_isValid = ::OpenAPI::fromJsonValue(m_co2, json[QString("CO2")]);
    m_co2_isSet = !json[QString("CO2")].isNull() && m_co2_isValid;

    m_gust_angle_isValid = ::OpenAPI::fromJsonValue(m_gust_angle, json[QString("GustAngle")]);
    m_gust_angle_isSet = !json[QString("GustAngle")].isNull() && m_gust_angle_isValid;

    m_gust_strength_isValid = ::OpenAPI::fromJsonValue(m_gust_strength, json[QString("GustStrength")]);
    m_gust_strength_isSet = !json[QString("GustStrength")].isNull() && m_gust_strength_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("Humidity")]);
    m_humidity_isSet = !json[QString("Humidity")].isNull() && m_humidity_isValid;

    m_noise_isValid = ::OpenAPI::fromJsonValue(m_noise, json[QString("Noise")]);
    m_noise_isSet = !json[QString("Noise")].isNull() && m_noise_isValid;

    m_pressure_isValid = ::OpenAPI::fromJsonValue(m_pressure, json[QString("Pressure")]);
    m_pressure_isSet = !json[QString("Pressure")].isNull() && m_pressure_isValid;

    m_rain_isValid = ::OpenAPI::fromJsonValue(m_rain, json[QString("Rain")]);
    m_rain_isSet = !json[QString("Rain")].isNull() && m_rain_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_wind_angle_isValid = ::OpenAPI::fromJsonValue(m_wind_angle, json[QString("WindAngle")]);
    m_wind_angle_isSet = !json[QString("WindAngle")].isNull() && m_wind_angle_isValid;

    m_wind_strength_isValid = ::OpenAPI::fromJsonValue(m_wind_strength, json[QString("WindStrength")]);
    m_wind_strength_isSet = !json[QString("WindStrength")].isNull() && m_wind_strength_isValid;

    m_date_max_temp_isValid = ::OpenAPI::fromJsonValue(m_date_max_temp, json[QString("date_max_temp")]);
    m_date_max_temp_isSet = !json[QString("date_max_temp")].isNull() && m_date_max_temp_isValid;

    m_date_max_wind_str_isValid = ::OpenAPI::fromJsonValue(m_date_max_wind_str, json[QString("date_max_wind_str")]);
    m_date_max_wind_str_isSet = !json[QString("date_max_wind_str")].isNull() && m_date_max_wind_str_isValid;

    m_date_min_temp_isValid = ::OpenAPI::fromJsonValue(m_date_min_temp, json[QString("date_min_temp")]);
    m_date_min_temp_isSet = !json[QString("date_min_temp")].isNull() && m_date_min_temp_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_health_idx_isValid = ::OpenAPI::fromJsonValue(m_health_idx, json[QString("health_idx")]);
    m_health_idx_isSet = !json[QString("health_idx")].isNull() && m_health_idx_isValid;

    m_max_temp_isValid = ::OpenAPI::fromJsonValue(m_max_temp, json[QString("max_temp")]);
    m_max_temp_isSet = !json[QString("max_temp")].isNull() && m_max_temp_isValid;

    m_max_wind_str_isValid = ::OpenAPI::fromJsonValue(m_max_wind_str, json[QString("max_wind_str")]);
    m_max_wind_str_isSet = !json[QString("max_wind_str")].isNull() && m_max_wind_str_isValid;

    m_min_temp_isValid = ::OpenAPI::fromJsonValue(m_min_temp, json[QString("min_temp")]);
    m_min_temp_isSet = !json[QString("min_temp")].isNull() && m_min_temp_isValid;

    m_pressure_trend_isValid = ::OpenAPI::fromJsonValue(m_pressure_trend, json[QString("pressure_trend")]);
    m_pressure_trend_isSet = !json[QString("pressure_trend")].isNull() && m_pressure_trend_isValid;

    m_sum_rain_1_isValid = ::OpenAPI::fromJsonValue(m_sum_rain_1, json[QString("sum_rain_1")]);
    m_sum_rain_1_isSet = !json[QString("sum_rain_1")].isNull() && m_sum_rain_1_isValid;

    m_sum_rain_24_isValid = ::OpenAPI::fromJsonValue(m_sum_rain_24, json[QString("sum_rain_24")]);
    m_sum_rain_24_isSet = !json[QString("sum_rain_24")].isNull() && m_sum_rain_24_isValid;

    m_temp_trend_isValid = ::OpenAPI::fromJsonValue(m_temp_trend, json[QString("temp_trend")]);
    m_temp_trend_isSet = !json[QString("temp_trend")].isNull() && m_temp_trend_isValid;

    m_time_utc_isValid = ::OpenAPI::fromJsonValue(m_time_utc, json[QString("time_utc")]);
    m_time_utc_isSet = !json[QString("time_utc")].isNull() && m_time_utc_isValid;
}

QString OAINADashboardData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINADashboardData::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_pressure_isSet) {
        obj.insert(QString("AbsolutePressure"), ::OpenAPI::toJsonValue(m_absolute_pressure));
    }
    if (m_boiler_off_isSet) {
        obj.insert(QString("BoilerOff"), ::OpenAPI::toJsonValue(m_boiler_off));
    }
    if (m_boiler_on_isSet) {
        obj.insert(QString("BoilerOn"), ::OpenAPI::toJsonValue(m_boiler_on));
    }
    if (m_co2_isSet) {
        obj.insert(QString("CO2"), ::OpenAPI::toJsonValue(m_co2));
    }
    if (m_gust_angle_isSet) {
        obj.insert(QString("GustAngle"), ::OpenAPI::toJsonValue(m_gust_angle));
    }
    if (m_gust_strength_isSet) {
        obj.insert(QString("GustStrength"), ::OpenAPI::toJsonValue(m_gust_strength));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("Humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_noise_isSet) {
        obj.insert(QString("Noise"), ::OpenAPI::toJsonValue(m_noise));
    }
    if (m_pressure_isSet) {
        obj.insert(QString("Pressure"), ::OpenAPI::toJsonValue(m_pressure));
    }
    if (m_rain_isSet) {
        obj.insert(QString("Rain"), ::OpenAPI::toJsonValue(m_rain));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_wind_angle_isSet) {
        obj.insert(QString("WindAngle"), ::OpenAPI::toJsonValue(m_wind_angle));
    }
    if (m_wind_strength_isSet) {
        obj.insert(QString("WindStrength"), ::OpenAPI::toJsonValue(m_wind_strength));
    }
    if (m_date_max_temp_isSet) {
        obj.insert(QString("date_max_temp"), ::OpenAPI::toJsonValue(m_date_max_temp));
    }
    if (m_date_max_wind_str_isSet) {
        obj.insert(QString("date_max_wind_str"), ::OpenAPI::toJsonValue(m_date_max_wind_str));
    }
    if (m_date_min_temp_isSet) {
        obj.insert(QString("date_min_temp"), ::OpenAPI::toJsonValue(m_date_min_temp));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_health_idx_isSet) {
        obj.insert(QString("health_idx"), ::OpenAPI::toJsonValue(m_health_idx));
    }
    if (m_max_temp_isSet) {
        obj.insert(QString("max_temp"), ::OpenAPI::toJsonValue(m_max_temp));
    }
    if (m_max_wind_str_isSet) {
        obj.insert(QString("max_wind_str"), ::OpenAPI::toJsonValue(m_max_wind_str));
    }
    if (m_min_temp_isSet) {
        obj.insert(QString("min_temp"), ::OpenAPI::toJsonValue(m_min_temp));
    }
    if (m_pressure_trend_isSet) {
        obj.insert(QString("pressure_trend"), ::OpenAPI::toJsonValue(m_pressure_trend));
    }
    if (m_sum_rain_1_isSet) {
        obj.insert(QString("sum_rain_1"), ::OpenAPI::toJsonValue(m_sum_rain_1));
    }
    if (m_sum_rain_24_isSet) {
        obj.insert(QString("sum_rain_24"), ::OpenAPI::toJsonValue(m_sum_rain_24));
    }
    if (m_temp_trend_isSet) {
        obj.insert(QString("temp_trend"), ::OpenAPI::toJsonValue(m_temp_trend));
    }
    if (m_time_utc_isSet) {
        obj.insert(QString("time_utc"), ::OpenAPI::toJsonValue(m_time_utc));
    }
    return obj;
}

float OAINADashboardData::getAbsolutePressure() const {
    return m_absolute_pressure;
}
void OAINADashboardData::setAbsolutePressure(const float &absolute_pressure) {
    m_absolute_pressure = absolute_pressure;
    m_absolute_pressure_isSet = true;
}

bool OAINADashboardData::is_absolute_pressure_Set() const{
    return m_absolute_pressure_isSet;
}

bool OAINADashboardData::is_absolute_pressure_Valid() const{
    return m_absolute_pressure_isValid;
}

qint32 OAINADashboardData::getBoilerOff() const {
    return m_boiler_off;
}
void OAINADashboardData::setBoilerOff(const qint32 &boiler_off) {
    m_boiler_off = boiler_off;
    m_boiler_off_isSet = true;
}

bool OAINADashboardData::is_boiler_off_Set() const{
    return m_boiler_off_isSet;
}

bool OAINADashboardData::is_boiler_off_Valid() const{
    return m_boiler_off_isValid;
}

qint32 OAINADashboardData::getBoilerOn() const {
    return m_boiler_on;
}
void OAINADashboardData::setBoilerOn(const qint32 &boiler_on) {
    m_boiler_on = boiler_on;
    m_boiler_on_isSet = true;
}

bool OAINADashboardData::is_boiler_on_Set() const{
    return m_boiler_on_isSet;
}

bool OAINADashboardData::is_boiler_on_Valid() const{
    return m_boiler_on_isValid;
}

float OAINADashboardData::getCo2() const {
    return m_co2;
}
void OAINADashboardData::setCo2(const float &co2) {
    m_co2 = co2;
    m_co2_isSet = true;
}

bool OAINADashboardData::is_co2_Set() const{
    return m_co2_isSet;
}

bool OAINADashboardData::is_co2_Valid() const{
    return m_co2_isValid;
}

qint32 OAINADashboardData::getGustAngle() const {
    return m_gust_angle;
}
void OAINADashboardData::setGustAngle(const qint32 &gust_angle) {
    m_gust_angle = gust_angle;
    m_gust_angle_isSet = true;
}

bool OAINADashboardData::is_gust_angle_Set() const{
    return m_gust_angle_isSet;
}

bool OAINADashboardData::is_gust_angle_Valid() const{
    return m_gust_angle_isValid;
}

qint32 OAINADashboardData::getGustStrength() const {
    return m_gust_strength;
}
void OAINADashboardData::setGustStrength(const qint32 &gust_strength) {
    m_gust_strength = gust_strength;
    m_gust_strength_isSet = true;
}

bool OAINADashboardData::is_gust_strength_Set() const{
    return m_gust_strength_isSet;
}

bool OAINADashboardData::is_gust_strength_Valid() const{
    return m_gust_strength_isValid;
}

float OAINADashboardData::getHumidity() const {
    return m_humidity;
}
void OAINADashboardData::setHumidity(const float &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAINADashboardData::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAINADashboardData::is_humidity_Valid() const{
    return m_humidity_isValid;
}

float OAINADashboardData::getNoise() const {
    return m_noise;
}
void OAINADashboardData::setNoise(const float &noise) {
    m_noise = noise;
    m_noise_isSet = true;
}

bool OAINADashboardData::is_noise_Set() const{
    return m_noise_isSet;
}

bool OAINADashboardData::is_noise_Valid() const{
    return m_noise_isValid;
}

float OAINADashboardData::getPressure() const {
    return m_pressure;
}
void OAINADashboardData::setPressure(const float &pressure) {
    m_pressure = pressure;
    m_pressure_isSet = true;
}

bool OAINADashboardData::is_pressure_Set() const{
    return m_pressure_isSet;
}

bool OAINADashboardData::is_pressure_Valid() const{
    return m_pressure_isValid;
}

float OAINADashboardData::getRain() const {
    return m_rain;
}
void OAINADashboardData::setRain(const float &rain) {
    m_rain = rain;
    m_rain_isSet = true;
}

bool OAINADashboardData::is_rain_Set() const{
    return m_rain_isSet;
}

bool OAINADashboardData::is_rain_Valid() const{
    return m_rain_isValid;
}

float OAINADashboardData::getTemperature() const {
    return m_temperature;
}
void OAINADashboardData::setTemperature(const float &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAINADashboardData::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAINADashboardData::is_temperature_Valid() const{
    return m_temperature_isValid;
}

qint32 OAINADashboardData::getWindAngle() const {
    return m_wind_angle;
}
void OAINADashboardData::setWindAngle(const qint32 &wind_angle) {
    m_wind_angle = wind_angle;
    m_wind_angle_isSet = true;
}

bool OAINADashboardData::is_wind_angle_Set() const{
    return m_wind_angle_isSet;
}

bool OAINADashboardData::is_wind_angle_Valid() const{
    return m_wind_angle_isValid;
}

qint32 OAINADashboardData::getWindStrength() const {
    return m_wind_strength;
}
void OAINADashboardData::setWindStrength(const qint32 &wind_strength) {
    m_wind_strength = wind_strength;
    m_wind_strength_isSet = true;
}

bool OAINADashboardData::is_wind_strength_Set() const{
    return m_wind_strength_isSet;
}

bool OAINADashboardData::is_wind_strength_Valid() const{
    return m_wind_strength_isValid;
}

qint32 OAINADashboardData::getDateMaxTemp() const {
    return m_date_max_temp;
}
void OAINADashboardData::setDateMaxTemp(const qint32 &date_max_temp) {
    m_date_max_temp = date_max_temp;
    m_date_max_temp_isSet = true;
}

bool OAINADashboardData::is_date_max_temp_Set() const{
    return m_date_max_temp_isSet;
}

bool OAINADashboardData::is_date_max_temp_Valid() const{
    return m_date_max_temp_isValid;
}

qint32 OAINADashboardData::getDateMaxWindStr() const {
    return m_date_max_wind_str;
}
void OAINADashboardData::setDateMaxWindStr(const qint32 &date_max_wind_str) {
    m_date_max_wind_str = date_max_wind_str;
    m_date_max_wind_str_isSet = true;
}

bool OAINADashboardData::is_date_max_wind_str_Set() const{
    return m_date_max_wind_str_isSet;
}

bool OAINADashboardData::is_date_max_wind_str_Valid() const{
    return m_date_max_wind_str_isValid;
}

qint32 OAINADashboardData::getDateMinTemp() const {
    return m_date_min_temp;
}
void OAINADashboardData::setDateMinTemp(const qint32 &date_min_temp) {
    m_date_min_temp = date_min_temp;
    m_date_min_temp_isSet = true;
}

bool OAINADashboardData::is_date_min_temp_Set() const{
    return m_date_min_temp_isSet;
}

bool OAINADashboardData::is_date_min_temp_Valid() const{
    return m_date_min_temp_isValid;
}

float OAINADashboardData::getDeviceId() const {
    return m_device_id;
}
void OAINADashboardData::setDeviceId(const float &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAINADashboardData::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAINADashboardData::is_device_id_Valid() const{
    return m_device_id_isValid;
}

qint32 OAINADashboardData::getHealthIdx() const {
    return m_health_idx;
}
void OAINADashboardData::setHealthIdx(const qint32 &health_idx) {
    m_health_idx = health_idx;
    m_health_idx_isSet = true;
}

bool OAINADashboardData::is_health_idx_Set() const{
    return m_health_idx_isSet;
}

bool OAINADashboardData::is_health_idx_Valid() const{
    return m_health_idx_isValid;
}

float OAINADashboardData::getMaxTemp() const {
    return m_max_temp;
}
void OAINADashboardData::setMaxTemp(const float &max_temp) {
    m_max_temp = max_temp;
    m_max_temp_isSet = true;
}

bool OAINADashboardData::is_max_temp_Set() const{
    return m_max_temp_isSet;
}

bool OAINADashboardData::is_max_temp_Valid() const{
    return m_max_temp_isValid;
}

qint32 OAINADashboardData::getMaxWindStr() const {
    return m_max_wind_str;
}
void OAINADashboardData::setMaxWindStr(const qint32 &max_wind_str) {
    m_max_wind_str = max_wind_str;
    m_max_wind_str_isSet = true;
}

bool OAINADashboardData::is_max_wind_str_Set() const{
    return m_max_wind_str_isSet;
}

bool OAINADashboardData::is_max_wind_str_Valid() const{
    return m_max_wind_str_isValid;
}

float OAINADashboardData::getMinTemp() const {
    return m_min_temp;
}
void OAINADashboardData::setMinTemp(const float &min_temp) {
    m_min_temp = min_temp;
    m_min_temp_isSet = true;
}

bool OAINADashboardData::is_min_temp_Set() const{
    return m_min_temp_isSet;
}

bool OAINADashboardData::is_min_temp_Valid() const{
    return m_min_temp_isValid;
}

QString OAINADashboardData::getPressureTrend() const {
    return m_pressure_trend;
}
void OAINADashboardData::setPressureTrend(const QString &pressure_trend) {
    m_pressure_trend = pressure_trend;
    m_pressure_trend_isSet = true;
}

bool OAINADashboardData::is_pressure_trend_Set() const{
    return m_pressure_trend_isSet;
}

bool OAINADashboardData::is_pressure_trend_Valid() const{
    return m_pressure_trend_isValid;
}

float OAINADashboardData::getSumRain1() const {
    return m_sum_rain_1;
}
void OAINADashboardData::setSumRain1(const float &sum_rain_1) {
    m_sum_rain_1 = sum_rain_1;
    m_sum_rain_1_isSet = true;
}

bool OAINADashboardData::is_sum_rain_1_Set() const{
    return m_sum_rain_1_isSet;
}

bool OAINADashboardData::is_sum_rain_1_Valid() const{
    return m_sum_rain_1_isValid;
}

float OAINADashboardData::getSumRain24() const {
    return m_sum_rain_24;
}
void OAINADashboardData::setSumRain24(const float &sum_rain_24) {
    m_sum_rain_24 = sum_rain_24;
    m_sum_rain_24_isSet = true;
}

bool OAINADashboardData::is_sum_rain_24_Set() const{
    return m_sum_rain_24_isSet;
}

bool OAINADashboardData::is_sum_rain_24_Valid() const{
    return m_sum_rain_24_isValid;
}

QString OAINADashboardData::getTempTrend() const {
    return m_temp_trend;
}
void OAINADashboardData::setTempTrend(const QString &temp_trend) {
    m_temp_trend = temp_trend;
    m_temp_trend_isSet = true;
}

bool OAINADashboardData::is_temp_trend_Set() const{
    return m_temp_trend_isSet;
}

bool OAINADashboardData::is_temp_trend_Valid() const{
    return m_temp_trend_isValid;
}

qint32 OAINADashboardData::getTimeUtc() const {
    return m_time_utc;
}
void OAINADashboardData::setTimeUtc(const qint32 &time_utc) {
    m_time_utc = time_utc;
    m_time_utc_isSet = true;
}

bool OAINADashboardData::is_time_utc_Set() const{
    return m_time_utc_isSet;
}

bool OAINADashboardData::is_time_utc_Valid() const{
    return m_time_utc_isValid;
}

bool OAINADashboardData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boiler_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boiler_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gust_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gust_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_noise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_max_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_max_wind_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_min_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_idx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wind_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pressure_trend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_rain_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_rain_24_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_trend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINADashboardData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
