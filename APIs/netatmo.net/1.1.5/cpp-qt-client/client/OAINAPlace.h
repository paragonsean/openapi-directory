/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAPlace.h
 *
 * 
 */

#ifndef OAINAPlace_H
#define OAINAPlace_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINAPlace : public OAIObject {
public:
    OAINAPlace();
    OAINAPlace(QString json);
    ~OAINAPlace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAltitude() const;
    void setAltitude(const float &altitude);
    bool is_altitude_Set() const;
    bool is_altitude_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    bool isFromIp() const;
    void setFromIp(const bool &from_ip);
    bool is_from_ip_Set() const;
    bool is_from_ip_Valid() const;

    bool isImproveLocProposed() const;
    void setImproveLocProposed(const bool &improve_loc_proposed);
    bool is_improve_loc_proposed_Set() const;
    bool is_improve_loc_proposed_Valid() const;

    QList<double> getLocation() const;
    void setLocation(const QList<double> &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    bool isTrustLocation() const;
    void setTrustLocation(const bool &trust_location);
    bool is_trust_location_Set() const;
    bool is_trust_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_altitude;
    bool m_altitude_isSet;
    bool m_altitude_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    bool m_from_ip;
    bool m_from_ip_isSet;
    bool m_from_ip_isValid;

    bool m_improve_loc_proposed;
    bool m_improve_loc_proposed_isSet;
    bool m_improve_loc_proposed_isValid;

    QList<double> m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    bool m_trust_location;
    bool m_trust_location_isSet;
    bool m_trust_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAPlace)

#endif // OAINAPlace_H
