/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAMeasureBodyElem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAMeasureBodyElem::OAINAMeasureBodyElem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAMeasureBodyElem::OAINAMeasureBodyElem() {
    this->initializeModel();
}

OAINAMeasureBodyElem::~OAINAMeasureBodyElem() {}

void OAINAMeasureBodyElem::initializeModel() {

    m_beg_time_isSet = false;
    m_beg_time_isValid = false;

    m_step_time_isSet = false;
    m_step_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAINAMeasureBodyElem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAMeasureBodyElem::fromJsonObject(QJsonObject json) {

    m_beg_time_isValid = ::OpenAPI::fromJsonValue(m_beg_time, json[QString("beg_time")]);
    m_beg_time_isSet = !json[QString("beg_time")].isNull() && m_beg_time_isValid;

    m_step_time_isValid = ::OpenAPI::fromJsonValue(m_step_time, json[QString("step_time")]);
    m_step_time_isSet = !json[QString("step_time")].isNull() && m_step_time_isValid;

    if(json["value"].isArray()){
        auto arr = json["value"].toArray();
        m_value_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<float> item;
                m_value_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_value_isSet = !jval.isNull() && m_value_isValid;
                m_value.push_back(item);
            }
        }
    }
}

QString OAINAMeasureBodyElem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAMeasureBodyElem::asJsonObject() const {
    QJsonObject obj;
    if (m_beg_time_isSet) {
        obj.insert(QString("beg_time"), ::OpenAPI::toJsonValue(m_beg_time));
    }
    if (m_step_time_isSet) {
        obj.insert(QString("step_time"), ::OpenAPI::toJsonValue(m_step_time));
    }
    if (m_value.size() > 0) {
        
        obj.insert(QString("value"), toJsonValue(m_value));
    }
    return obj;
}

qint32 OAINAMeasureBodyElem::getBegTime() const {
    return m_beg_time;
}
void OAINAMeasureBodyElem::setBegTime(const qint32 &beg_time) {
    m_beg_time = beg_time;
    m_beg_time_isSet = true;
}

bool OAINAMeasureBodyElem::is_beg_time_Set() const{
    return m_beg_time_isSet;
}

bool OAINAMeasureBodyElem::is_beg_time_Valid() const{
    return m_beg_time_isValid;
}

qint32 OAINAMeasureBodyElem::getStepTime() const {
    return m_step_time;
}
void OAINAMeasureBodyElem::setStepTime(const qint32 &step_time) {
    m_step_time = step_time;
    m_step_time_isSet = true;
}

bool OAINAMeasureBodyElem::is_step_time_Set() const{
    return m_step_time_isSet;
}

bool OAINAMeasureBodyElem::is_step_time_Valid() const{
    return m_step_time_isValid;
}

QList<QList<float>> OAINAMeasureBodyElem::getValue() const {
    return m_value;
}
void OAINAMeasureBodyElem::setValue(const QList<QList<float>> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAINAMeasureBodyElem::is_value_Set() const{
    return m_value_isSet;
}

bool OAINAMeasureBodyElem::is_value_Valid() const{
    return m_value_isValid;
}

bool OAINAMeasureBodyElem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beg_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAMeasureBodyElem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
