/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAStation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAStation::OAINAStation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAStation::OAINAStation() {
    this->initializeModel();
}

OAINAStation::~OAINAStation() {}

void OAINAStation::initializeModel() {

    m_lag_down_isSet = false;
    m_lag_down_isValid = false;

    m_lag_up_isSet = false;
    m_lag_up_isValid = false;

    m_off_overshoot_isSet = false;
    m_off_overshoot_isValid = false;

    m_on_overshoot_isSet = false;
    m_on_overshoot_isValid = false;

    m_pk_isSet = false;
    m_pk_isValid = false;

    m_tau_isSet = false;
    m_tau_isValid = false;
}

void OAINAStation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAStation::fromJsonObject(QJsonObject json) {

    m_lag_down_isValid = ::OpenAPI::fromJsonValue(m_lag_down, json[QString("lag_down")]);
    m_lag_down_isSet = !json[QString("lag_down")].isNull() && m_lag_down_isValid;

    m_lag_up_isValid = ::OpenAPI::fromJsonValue(m_lag_up, json[QString("lag_up")]);
    m_lag_up_isSet = !json[QString("lag_up")].isNull() && m_lag_up_isValid;

    m_off_overshoot_isValid = ::OpenAPI::fromJsonValue(m_off_overshoot, json[QString("off_overshoot")]);
    m_off_overshoot_isSet = !json[QString("off_overshoot")].isNull() && m_off_overshoot_isValid;

    m_on_overshoot_isValid = ::OpenAPI::fromJsonValue(m_on_overshoot, json[QString("on_overshoot")]);
    m_on_overshoot_isSet = !json[QString("on_overshoot")].isNull() && m_on_overshoot_isValid;

    m_pk_isValid = ::OpenAPI::fromJsonValue(m_pk, json[QString("pk")]);
    m_pk_isSet = !json[QString("pk")].isNull() && m_pk_isValid;

    m_tau_isValid = ::OpenAPI::fromJsonValue(m_tau, json[QString("tau")]);
    m_tau_isSet = !json[QString("tau")].isNull() && m_tau_isValid;
}

QString OAINAStation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAStation::asJsonObject() const {
    QJsonObject obj;
    if (m_lag_down_isSet) {
        obj.insert(QString("lag_down"), ::OpenAPI::toJsonValue(m_lag_down));
    }
    if (m_lag_up_isSet) {
        obj.insert(QString("lag_up"), ::OpenAPI::toJsonValue(m_lag_up));
    }
    if (m_off_overshoot_isSet) {
        obj.insert(QString("off_overshoot"), ::OpenAPI::toJsonValue(m_off_overshoot));
    }
    if (m_on_overshoot_isSet) {
        obj.insert(QString("on_overshoot"), ::OpenAPI::toJsonValue(m_on_overshoot));
    }
    if (m_pk_isSet) {
        obj.insert(QString("pk"), ::OpenAPI::toJsonValue(m_pk));
    }
    if (m_tau_isSet) {
        obj.insert(QString("tau"), ::OpenAPI::toJsonValue(m_tau));
    }
    return obj;
}

qint32 OAINAStation::getLagDown() const {
    return m_lag_down;
}
void OAINAStation::setLagDown(const qint32 &lag_down) {
    m_lag_down = lag_down;
    m_lag_down_isSet = true;
}

bool OAINAStation::is_lag_down_Set() const{
    return m_lag_down_isSet;
}

bool OAINAStation::is_lag_down_Valid() const{
    return m_lag_down_isValid;
}

qint32 OAINAStation::getLagUp() const {
    return m_lag_up;
}
void OAINAStation::setLagUp(const qint32 &lag_up) {
    m_lag_up = lag_up;
    m_lag_up_isSet = true;
}

bool OAINAStation::is_lag_up_Set() const{
    return m_lag_up_isSet;
}

bool OAINAStation::is_lag_up_Valid() const{
    return m_lag_up_isValid;
}

float OAINAStation::getOffOvershoot() const {
    return m_off_overshoot;
}
void OAINAStation::setOffOvershoot(const float &off_overshoot) {
    m_off_overshoot = off_overshoot;
    m_off_overshoot_isSet = true;
}

bool OAINAStation::is_off_overshoot_Set() const{
    return m_off_overshoot_isSet;
}

bool OAINAStation::is_off_overshoot_Valid() const{
    return m_off_overshoot_isValid;
}

float OAINAStation::getOnOvershoot() const {
    return m_on_overshoot;
}
void OAINAStation::setOnOvershoot(const float &on_overshoot) {
    m_on_overshoot = on_overshoot;
    m_on_overshoot_isSet = true;
}

bool OAINAStation::is_on_overshoot_Set() const{
    return m_on_overshoot_isSet;
}

bool OAINAStation::is_on_overshoot_Valid() const{
    return m_on_overshoot_isValid;
}

qint32 OAINAStation::getPk() const {
    return m_pk;
}
void OAINAStation::setPk(const qint32 &pk) {
    m_pk = pk;
    m_pk_isSet = true;
}

bool OAINAStation::is_pk_Set() const{
    return m_pk_isSet;
}

bool OAINAStation::is_pk_Valid() const{
    return m_pk_isValid;
}

qint32 OAINAStation::getTau() const {
    return m_tau;
}
void OAINAStation::setTau(const qint32 &tau) {
    m_tau = tau;
    m_tau_isSet = true;
}

bool OAINAStation::is_tau_Set() const{
    return m_tau_isSet;
}

bool OAINAStation::is_tau_Valid() const{
    return m_tau_isValid;
}

bool OAINAStation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lag_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lag_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_overshoot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_overshoot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tau_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAStation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
