/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINADashboardData.h
 *
 * 
 */

#ifndef OAINADashboardData_H
#define OAINADashboardData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINADashboardData : public OAIObject {
public:
    OAINADashboardData();
    OAINADashboardData(QString json);
    ~OAINADashboardData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAbsolutePressure() const;
    void setAbsolutePressure(const float &absolute_pressure);
    bool is_absolute_pressure_Set() const;
    bool is_absolute_pressure_Valid() const;

    qint32 getBoilerOff() const;
    void setBoilerOff(const qint32 &boiler_off);
    bool is_boiler_off_Set() const;
    bool is_boiler_off_Valid() const;

    qint32 getBoilerOn() const;
    void setBoilerOn(const qint32 &boiler_on);
    bool is_boiler_on_Set() const;
    bool is_boiler_on_Valid() const;

    float getCo2() const;
    void setCo2(const float &co2);
    bool is_co2_Set() const;
    bool is_co2_Valid() const;

    qint32 getGustAngle() const;
    void setGustAngle(const qint32 &gust_angle);
    bool is_gust_angle_Set() const;
    bool is_gust_angle_Valid() const;

    qint32 getGustStrength() const;
    void setGustStrength(const qint32 &gust_strength);
    bool is_gust_strength_Set() const;
    bool is_gust_strength_Valid() const;

    float getHumidity() const;
    void setHumidity(const float &humidity);
    bool is_humidity_Set() const;
    bool is_humidity_Valid() const;

    float getNoise() const;
    void setNoise(const float &noise);
    bool is_noise_Set() const;
    bool is_noise_Valid() const;

    float getPressure() const;
    void setPressure(const float &pressure);
    bool is_pressure_Set() const;
    bool is_pressure_Valid() const;

    float getRain() const;
    void setRain(const float &rain);
    bool is_rain_Set() const;
    bool is_rain_Valid() const;

    float getTemperature() const;
    void setTemperature(const float &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    qint32 getWindAngle() const;
    void setWindAngle(const qint32 &wind_angle);
    bool is_wind_angle_Set() const;
    bool is_wind_angle_Valid() const;

    qint32 getWindStrength() const;
    void setWindStrength(const qint32 &wind_strength);
    bool is_wind_strength_Set() const;
    bool is_wind_strength_Valid() const;

    qint32 getDateMaxTemp() const;
    void setDateMaxTemp(const qint32 &date_max_temp);
    bool is_date_max_temp_Set() const;
    bool is_date_max_temp_Valid() const;

    qint32 getDateMaxWindStr() const;
    void setDateMaxWindStr(const qint32 &date_max_wind_str);
    bool is_date_max_wind_str_Set() const;
    bool is_date_max_wind_str_Valid() const;

    qint32 getDateMinTemp() const;
    void setDateMinTemp(const qint32 &date_min_temp);
    bool is_date_min_temp_Set() const;
    bool is_date_min_temp_Valid() const;

    float getDeviceId() const;
    void setDeviceId(const float &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    qint32 getHealthIdx() const;
    void setHealthIdx(const qint32 &health_idx);
    bool is_health_idx_Set() const;
    bool is_health_idx_Valid() const;

    float getMaxTemp() const;
    void setMaxTemp(const float &max_temp);
    bool is_max_temp_Set() const;
    bool is_max_temp_Valid() const;

    qint32 getMaxWindStr() const;
    void setMaxWindStr(const qint32 &max_wind_str);
    bool is_max_wind_str_Set() const;
    bool is_max_wind_str_Valid() const;

    float getMinTemp() const;
    void setMinTemp(const float &min_temp);
    bool is_min_temp_Set() const;
    bool is_min_temp_Valid() const;

    QString getPressureTrend() const;
    void setPressureTrend(const QString &pressure_trend);
    bool is_pressure_trend_Set() const;
    bool is_pressure_trend_Valid() const;

    float getSumRain1() const;
    void setSumRain1(const float &sum_rain_1);
    bool is_sum_rain_1_Set() const;
    bool is_sum_rain_1_Valid() const;

    float getSumRain24() const;
    void setSumRain24(const float &sum_rain_24);
    bool is_sum_rain_24_Set() const;
    bool is_sum_rain_24_Valid() const;

    QString getTempTrend() const;
    void setTempTrend(const QString &temp_trend);
    bool is_temp_trend_Set() const;
    bool is_temp_trend_Valid() const;

    qint32 getTimeUtc() const;
    void setTimeUtc(const qint32 &time_utc);
    bool is_time_utc_Set() const;
    bool is_time_utc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_absolute_pressure;
    bool m_absolute_pressure_isSet;
    bool m_absolute_pressure_isValid;

    qint32 m_boiler_off;
    bool m_boiler_off_isSet;
    bool m_boiler_off_isValid;

    qint32 m_boiler_on;
    bool m_boiler_on_isSet;
    bool m_boiler_on_isValid;

    float m_co2;
    bool m_co2_isSet;
    bool m_co2_isValid;

    qint32 m_gust_angle;
    bool m_gust_angle_isSet;
    bool m_gust_angle_isValid;

    qint32 m_gust_strength;
    bool m_gust_strength_isSet;
    bool m_gust_strength_isValid;

    float m_humidity;
    bool m_humidity_isSet;
    bool m_humidity_isValid;

    float m_noise;
    bool m_noise_isSet;
    bool m_noise_isValid;

    float m_pressure;
    bool m_pressure_isSet;
    bool m_pressure_isValid;

    float m_rain;
    bool m_rain_isSet;
    bool m_rain_isValid;

    float m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    qint32 m_wind_angle;
    bool m_wind_angle_isSet;
    bool m_wind_angle_isValid;

    qint32 m_wind_strength;
    bool m_wind_strength_isSet;
    bool m_wind_strength_isValid;

    qint32 m_date_max_temp;
    bool m_date_max_temp_isSet;
    bool m_date_max_temp_isValid;

    qint32 m_date_max_wind_str;
    bool m_date_max_wind_str_isSet;
    bool m_date_max_wind_str_isValid;

    qint32 m_date_min_temp;
    bool m_date_min_temp_isSet;
    bool m_date_min_temp_isValid;

    float m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    qint32 m_health_idx;
    bool m_health_idx_isSet;
    bool m_health_idx_isValid;

    float m_max_temp;
    bool m_max_temp_isSet;
    bool m_max_temp_isValid;

    qint32 m_max_wind_str;
    bool m_max_wind_str_isSet;
    bool m_max_wind_str_isValid;

    float m_min_temp;
    bool m_min_temp_isSet;
    bool m_min_temp_isValid;

    QString m_pressure_trend;
    bool m_pressure_trend_isSet;
    bool m_pressure_trend_isValid;

    float m_sum_rain_1;
    bool m_sum_rain_1_isSet;
    bool m_sum_rain_1_isValid;

    float m_sum_rain_24;
    bool m_sum_rain_24_isSet;
    bool m_sum_rain_24_isValid;

    QString m_temp_trend;
    bool m_temp_trend_isSet;
    bool m_temp_trend_isValid;

    qint32 m_time_utc;
    bool m_time_utc_isSet;
    bool m_time_utc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINADashboardData)

#endif // OAINADashboardData_H
