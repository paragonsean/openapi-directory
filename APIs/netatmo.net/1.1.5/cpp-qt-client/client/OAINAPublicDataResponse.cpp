/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAPublicDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAPublicDataResponse::OAINAPublicDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAPublicDataResponse::OAINAPublicDataResponse() {
    this->initializeModel();
}

OAINAPublicDataResponse::~OAINAPublicDataResponse() {}

void OAINAPublicDataResponse::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_exec_isSet = false;
    m_time_exec_isValid = false;

    m_time_server_isSet = false;
    m_time_server_isValid = false;
}

void OAINAPublicDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAPublicDataResponse::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_exec_isValid = ::OpenAPI::fromJsonValue(m_time_exec, json[QString("time_exec")]);
    m_time_exec_isSet = !json[QString("time_exec")].isNull() && m_time_exec_isValid;

    m_time_server_isValid = ::OpenAPI::fromJsonValue(m_time_server, json[QString("time_server")]);
    m_time_server_isSet = !json[QString("time_server")].isNull() && m_time_server_isValid;
}

QString OAINAPublicDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAPublicDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body.size() > 0) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_exec_isSet) {
        obj.insert(QString("time_exec"), ::OpenAPI::toJsonValue(m_time_exec));
    }
    if (m_time_server_isSet) {
        obj.insert(QString("time_server"), ::OpenAPI::toJsonValue(m_time_server));
    }
    return obj;
}

QList<OAINAPublicData> OAINAPublicDataResponse::getBody() const {
    return m_body;
}
void OAINAPublicDataResponse::setBody(const QList<OAINAPublicData> &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINAPublicDataResponse::is_body_Set() const{
    return m_body_isSet;
}

bool OAINAPublicDataResponse::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINAPublicDataResponse::getStatus() const {
    return m_status;
}
void OAINAPublicDataResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINAPublicDataResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAINAPublicDataResponse::is_status_Valid() const{
    return m_status_isValid;
}

double OAINAPublicDataResponse::getTimeExec() const {
    return m_time_exec;
}
void OAINAPublicDataResponse::setTimeExec(const double &time_exec) {
    m_time_exec = time_exec;
    m_time_exec_isSet = true;
}

bool OAINAPublicDataResponse::is_time_exec_Set() const{
    return m_time_exec_isSet;
}

bool OAINAPublicDataResponse::is_time_exec_Valid() const{
    return m_time_exec_isValid;
}

qint32 OAINAPublicDataResponse::getTimeServer() const {
    return m_time_server;
}
void OAINAPublicDataResponse::setTimeServer(const qint32 &time_server) {
    m_time_server = time_server;
    m_time_server_isSet = true;
}

bool OAINAPublicDataResponse::is_time_server_Set() const{
    return m_time_server_isSet;
}

bool OAINAPublicDataResponse::is_time_server_Valid() const{
    return m_time_server_isValid;
}

bool OAINAPublicDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_exec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAPublicDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
