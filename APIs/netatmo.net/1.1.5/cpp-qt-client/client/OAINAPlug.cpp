/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAPlug.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAPlug::OAINAPlug(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAPlug::OAINAPlug() {
    this->initializeModel();
}

OAINAPlug::~OAINAPlug() {}

void OAINAPlug::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_last_bilan_isSet = false;
    m_last_bilan_isValid = false;

    m_last_plug_seen_isSet = false;
    m_last_plug_seen_isValid = false;

    m_last_status_store_isSet = false;
    m_last_status_store_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_plug_connected_boiler_isSet = false;
    m_plug_connected_boiler_isValid = false;

    m_station_name_isSet = false;
    m_station_name_isValid = false;

    m_syncing_isSet = false;
    m_syncing_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_udp_conn_isSet = false;
    m_udp_conn_isValid = false;

    m_wifi_status_isSet = false;
    m_wifi_status_isValid = false;
}

void OAINAPlug::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAPlug::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_last_bilan_isValid = ::OpenAPI::fromJsonValue(m_last_bilan, json[QString("last_bilan")]);
    m_last_bilan_isSet = !json[QString("last_bilan")].isNull() && m_last_bilan_isValid;

    m_last_plug_seen_isValid = ::OpenAPI::fromJsonValue(m_last_plug_seen, json[QString("last_plug_seen")]);
    m_last_plug_seen_isSet = !json[QString("last_plug_seen")].isNull() && m_last_plug_seen_isValid;

    m_last_status_store_isValid = ::OpenAPI::fromJsonValue(m_last_status_store, json[QString("last_status_store")]);
    m_last_status_store_isSet = !json[QString("last_status_store")].isNull() && m_last_status_store_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_plug_connected_boiler_isValid = ::OpenAPI::fromJsonValue(m_plug_connected_boiler, json[QString("plug_connected_boiler")]);
    m_plug_connected_boiler_isSet = !json[QString("plug_connected_boiler")].isNull() && m_plug_connected_boiler_isValid;

    m_station_name_isValid = ::OpenAPI::fromJsonValue(m_station_name, json[QString("station_name")]);
    m_station_name_isSet = !json[QString("station_name")].isNull() && m_station_name_isValid;

    m_syncing_isValid = ::OpenAPI::fromJsonValue(m_syncing, json[QString("syncing")]);
    m_syncing_isSet = !json[QString("syncing")].isNull() && m_syncing_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_udp_conn_isValid = ::OpenAPI::fromJsonValue(m_udp_conn, json[QString("udp_conn")]);
    m_udp_conn_isSet = !json[QString("udp_conn")].isNull() && m_udp_conn_isValid;

    m_wifi_status_isValid = ::OpenAPI::fromJsonValue(m_wifi_status, json[QString("wifi_status")]);
    m_wifi_status_isSet = !json[QString("wifi_status")].isNull() && m_wifi_status_isValid;
}

QString OAINAPlug::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAPlug::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_last_bilan.isSet()) {
        obj.insert(QString("last_bilan"), ::OpenAPI::toJsonValue(m_last_bilan));
    }
    if (m_last_plug_seen_isSet) {
        obj.insert(QString("last_plug_seen"), ::OpenAPI::toJsonValue(m_last_plug_seen));
    }
    if (m_last_status_store_isSet) {
        obj.insert(QString("last_status_store"), ::OpenAPI::toJsonValue(m_last_status_store));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_plug_connected_boiler_isSet) {
        obj.insert(QString("plug_connected_boiler"), ::OpenAPI::toJsonValue(m_plug_connected_boiler));
    }
    if (m_station_name_isSet) {
        obj.insert(QString("station_name"), ::OpenAPI::toJsonValue(m_station_name));
    }
    if (m_syncing_isSet) {
        obj.insert(QString("syncing"), ::OpenAPI::toJsonValue(m_syncing));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_udp_conn_isSet) {
        obj.insert(QString("udp_conn"), ::OpenAPI::toJsonValue(m_udp_conn));
    }
    if (m_wifi_status_isSet) {
        obj.insert(QString("wifi_status"), ::OpenAPI::toJsonValue(m_wifi_status));
    }
    return obj;
}

QString OAINAPlug::getId() const {
    return m__id;
}
void OAINAPlug::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAPlug::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAPlug::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAINAPlug::getFirmware() const {
    return m_firmware;
}
void OAINAPlug::setFirmware(const qint32 &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAINAPlug::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAINAPlug::is_firmware_Valid() const{
    return m_firmware_isValid;
}

OAINAYearMonth OAINAPlug::getLastBilan() const {
    return m_last_bilan;
}
void OAINAPlug::setLastBilan(const OAINAYearMonth &last_bilan) {
    m_last_bilan = last_bilan;
    m_last_bilan_isSet = true;
}

bool OAINAPlug::is_last_bilan_Set() const{
    return m_last_bilan_isSet;
}

bool OAINAPlug::is_last_bilan_Valid() const{
    return m_last_bilan_isValid;
}

qint32 OAINAPlug::getLastPlugSeen() const {
    return m_last_plug_seen;
}
void OAINAPlug::setLastPlugSeen(const qint32 &last_plug_seen) {
    m_last_plug_seen = last_plug_seen;
    m_last_plug_seen_isSet = true;
}

bool OAINAPlug::is_last_plug_seen_Set() const{
    return m_last_plug_seen_isSet;
}

bool OAINAPlug::is_last_plug_seen_Valid() const{
    return m_last_plug_seen_isValid;
}

qint32 OAINAPlug::getLastStatusStore() const {
    return m_last_status_store;
}
void OAINAPlug::setLastStatusStore(const qint32 &last_status_store) {
    m_last_status_store = last_status_store;
    m_last_status_store_isSet = true;
}

bool OAINAPlug::is_last_status_store_Set() const{
    return m_last_status_store_isSet;
}

bool OAINAPlug::is_last_status_store_Valid() const{
    return m_last_status_store_isValid;
}

QList<OAINAThermostat> OAINAPlug::getModules() const {
    return m_modules;
}
void OAINAPlug::setModules(const QList<OAINAThermostat> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAINAPlug::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAINAPlug::is_modules_Valid() const{
    return m_modules_isValid;
}

OAINAPlace OAINAPlug::getPlace() const {
    return m_place;
}
void OAINAPlug::setPlace(const OAINAPlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAINAPlug::is_place_Set() const{
    return m_place_isSet;
}

bool OAINAPlug::is_place_Valid() const{
    return m_place_isValid;
}

qint32 OAINAPlug::getPlugConnectedBoiler() const {
    return m_plug_connected_boiler;
}
void OAINAPlug::setPlugConnectedBoiler(const qint32 &plug_connected_boiler) {
    m_plug_connected_boiler = plug_connected_boiler;
    m_plug_connected_boiler_isSet = true;
}

bool OAINAPlug::is_plug_connected_boiler_Set() const{
    return m_plug_connected_boiler_isSet;
}

bool OAINAPlug::is_plug_connected_boiler_Valid() const{
    return m_plug_connected_boiler_isValid;
}

QString OAINAPlug::getStationName() const {
    return m_station_name;
}
void OAINAPlug::setStationName(const QString &station_name) {
    m_station_name = station_name;
    m_station_name_isSet = true;
}

bool OAINAPlug::is_station_name_Set() const{
    return m_station_name_isSet;
}

bool OAINAPlug::is_station_name_Valid() const{
    return m_station_name_isValid;
}

bool OAINAPlug::isSyncing() const {
    return m_syncing;
}
void OAINAPlug::setSyncing(const bool &syncing) {
    m_syncing = syncing;
    m_syncing_isSet = true;
}

bool OAINAPlug::is_syncing_Set() const{
    return m_syncing_isSet;
}

bool OAINAPlug::is_syncing_Valid() const{
    return m_syncing_isValid;
}

QString OAINAPlug::getType() const {
    return m_type;
}
void OAINAPlug::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAPlug::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAPlug::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAPlug::isUdpConn() const {
    return m_udp_conn;
}
void OAINAPlug::setUdpConn(const bool &udp_conn) {
    m_udp_conn = udp_conn;
    m_udp_conn_isSet = true;
}

bool OAINAPlug::is_udp_conn_Set() const{
    return m_udp_conn_isSet;
}

bool OAINAPlug::is_udp_conn_Valid() const{
    return m_udp_conn_isValid;
}

qint32 OAINAPlug::getWifiStatus() const {
    return m_wifi_status;
}
void OAINAPlug::setWifiStatus(const qint32 &wifi_status) {
    m_wifi_status = wifi_status;
    m_wifi_status_isSet = true;
}

bool OAINAPlug::is_wifi_status_Set() const{
    return m_wifi_status_isSet;
}

bool OAINAPlug::is_wifi_status_Valid() const{
    return m_wifi_status_isValid;
}

bool OAINAPlug::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_bilan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_plug_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_connected_boiler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_conn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAPlug::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
