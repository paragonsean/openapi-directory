/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeCamera.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeCamera::OAINAWelcomeCamera(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeCamera::OAINAWelcomeCamera() {
    this->initializeModel();
}

OAINAWelcomeCamera::~OAINAWelcomeCamera() {}

void OAINAWelcomeCamera::initializeModel() {

    m_alim_status_isSet = false;
    m_alim_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_local_isSet = false;
    m_is_local_isValid = false;

    m_light_mode_status_isSet = false;
    m_light_mode_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sd_status_isSet = false;
    m_sd_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vpn_url_isSet = false;
    m_vpn_url_isValid = false;
}

void OAINAWelcomeCamera::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeCamera::fromJsonObject(QJsonObject json) {

    m_alim_status_isValid = ::OpenAPI::fromJsonValue(m_alim_status, json[QString("alim_status")]);
    m_alim_status_isSet = !json[QString("alim_status")].isNull() && m_alim_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_local_isValid = ::OpenAPI::fromJsonValue(m_is_local, json[QString("is_local")]);
    m_is_local_isSet = !json[QString("is_local")].isNull() && m_is_local_isValid;

    m_light_mode_status_isValid = ::OpenAPI::fromJsonValue(m_light_mode_status, json[QString("light_mode_status")]);
    m_light_mode_status_isSet = !json[QString("light_mode_status")].isNull() && m_light_mode_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sd_status_isValid = ::OpenAPI::fromJsonValue(m_sd_status, json[QString("sd_status")]);
    m_sd_status_isSet = !json[QString("sd_status")].isNull() && m_sd_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vpn_url_isValid = ::OpenAPI::fromJsonValue(m_vpn_url, json[QString("vpn_url")]);
    m_vpn_url_isSet = !json[QString("vpn_url")].isNull() && m_vpn_url_isValid;
}

QString OAINAWelcomeCamera::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeCamera::asJsonObject() const {
    QJsonObject obj;
    if (m_alim_status_isSet) {
        obj.insert(QString("alim_status"), ::OpenAPI::toJsonValue(m_alim_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_local_isSet) {
        obj.insert(QString("is_local"), ::OpenAPI::toJsonValue(m_is_local));
    }
    if (m_light_mode_status_isSet) {
        obj.insert(QString("light_mode_status"), ::OpenAPI::toJsonValue(m_light_mode_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sd_status_isSet) {
        obj.insert(QString("sd_status"), ::OpenAPI::toJsonValue(m_sd_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vpn_url_isSet) {
        obj.insert(QString("vpn_url"), ::OpenAPI::toJsonValue(m_vpn_url));
    }
    return obj;
}

QString OAINAWelcomeCamera::getAlimStatus() const {
    return m_alim_status;
}
void OAINAWelcomeCamera::setAlimStatus(const QString &alim_status) {
    m_alim_status = alim_status;
    m_alim_status_isSet = true;
}

bool OAINAWelcomeCamera::is_alim_status_Set() const{
    return m_alim_status_isSet;
}

bool OAINAWelcomeCamera::is_alim_status_Valid() const{
    return m_alim_status_isValid;
}

QString OAINAWelcomeCamera::getId() const {
    return m_id;
}
void OAINAWelcomeCamera::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeCamera::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeCamera::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINAWelcomeCamera::isIsLocal() const {
    return m_is_local;
}
void OAINAWelcomeCamera::setIsLocal(const bool &is_local) {
    m_is_local = is_local;
    m_is_local_isSet = true;
}

bool OAINAWelcomeCamera::is_is_local_Set() const{
    return m_is_local_isSet;
}

bool OAINAWelcomeCamera::is_is_local_Valid() const{
    return m_is_local_isValid;
}

QString OAINAWelcomeCamera::getLightModeStatus() const {
    return m_light_mode_status;
}
void OAINAWelcomeCamera::setLightModeStatus(const QString &light_mode_status) {
    m_light_mode_status = light_mode_status;
    m_light_mode_status_isSet = true;
}

bool OAINAWelcomeCamera::is_light_mode_status_Set() const{
    return m_light_mode_status_isSet;
}

bool OAINAWelcomeCamera::is_light_mode_status_Valid() const{
    return m_light_mode_status_isValid;
}

QString OAINAWelcomeCamera::getName() const {
    return m_name;
}
void OAINAWelcomeCamera::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINAWelcomeCamera::is_name_Set() const{
    return m_name_isSet;
}

bool OAINAWelcomeCamera::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINAWelcomeCamera::getSdStatus() const {
    return m_sd_status;
}
void OAINAWelcomeCamera::setSdStatus(const QString &sd_status) {
    m_sd_status = sd_status;
    m_sd_status_isSet = true;
}

bool OAINAWelcomeCamera::is_sd_status_Set() const{
    return m_sd_status_isSet;
}

bool OAINAWelcomeCamera::is_sd_status_Valid() const{
    return m_sd_status_isValid;
}

QString OAINAWelcomeCamera::getStatus() const {
    return m_status;
}
void OAINAWelcomeCamera::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINAWelcomeCamera::is_status_Set() const{
    return m_status_isSet;
}

bool OAINAWelcomeCamera::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINAWelcomeCamera::getType() const {
    return m_type;
}
void OAINAWelcomeCamera::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAWelcomeCamera::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAWelcomeCamera::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINAWelcomeCamera::getVpnUrl() const {
    return m_vpn_url;
}
void OAINAWelcomeCamera::setVpnUrl(const QString &vpn_url) {
    m_vpn_url = vpn_url;
    m_vpn_url_isSet = true;
}

bool OAINAWelcomeCamera::is_vpn_url_Set() const{
    return m_vpn_url_isSet;
}

bool OAINAWelcomeCamera::is_vpn_url_Valid() const{
    return m_vpn_url_isValid;
}

bool OAINAWelcomeCamera::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alim_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_light_mode_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sd_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeCamera::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
