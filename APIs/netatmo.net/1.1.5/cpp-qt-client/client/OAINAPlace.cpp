/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAPlace::OAINAPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAPlace::OAINAPlace() {
    this->initializeModel();
}

OAINAPlace::~OAINAPlace() {}

void OAINAPlace::initializeModel() {

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_from_ip_isSet = false;
    m_from_ip_isValid = false;

    m_improve_loc_proposed_isSet = false;
    m_improve_loc_proposed_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_trust_location_isSet = false;
    m_trust_location_isValid = false;
}

void OAINAPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAPlace::fromJsonObject(QJsonObject json) {

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_from_ip_isValid = ::OpenAPI::fromJsonValue(m_from_ip, json[QString("from_ip")]);
    m_from_ip_isSet = !json[QString("from_ip")].isNull() && m_from_ip_isValid;

    m_improve_loc_proposed_isValid = ::OpenAPI::fromJsonValue(m_improve_loc_proposed, json[QString("improveLocProposed")]);
    m_improve_loc_proposed_isSet = !json[QString("improveLocProposed")].isNull() && m_improve_loc_proposed_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_trust_location_isValid = ::OpenAPI::fromJsonValue(m_trust_location, json[QString("trust_location")]);
    m_trust_location_isSet = !json[QString("trust_location")].isNull() && m_trust_location_isValid;
}

QString OAINAPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_from_ip_isSet) {
        obj.insert(QString("from_ip"), ::OpenAPI::toJsonValue(m_from_ip));
    }
    if (m_improve_loc_proposed_isSet) {
        obj.insert(QString("improveLocProposed"), ::OpenAPI::toJsonValue(m_improve_loc_proposed));
    }
    if (m_location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_trust_location_isSet) {
        obj.insert(QString("trust_location"), ::OpenAPI::toJsonValue(m_trust_location));
    }
    return obj;
}

float OAINAPlace::getAltitude() const {
    return m_altitude;
}
void OAINAPlace::setAltitude(const float &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAINAPlace::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAINAPlace::is_altitude_Valid() const{
    return m_altitude_isValid;
}

QString OAINAPlace::getCity() const {
    return m_city;
}
void OAINAPlace::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINAPlace::is_city_Set() const{
    return m_city_isSet;
}

bool OAINAPlace::is_city_Valid() const{
    return m_city_isValid;
}

QString OAINAPlace::getCountry() const {
    return m_country;
}
void OAINAPlace::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINAPlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAINAPlace::is_country_Valid() const{
    return m_country_isValid;
}

bool OAINAPlace::isFromIp() const {
    return m_from_ip;
}
void OAINAPlace::setFromIp(const bool &from_ip) {
    m_from_ip = from_ip;
    m_from_ip_isSet = true;
}

bool OAINAPlace::is_from_ip_Set() const{
    return m_from_ip_isSet;
}

bool OAINAPlace::is_from_ip_Valid() const{
    return m_from_ip_isValid;
}

bool OAINAPlace::isImproveLocProposed() const {
    return m_improve_loc_proposed;
}
void OAINAPlace::setImproveLocProposed(const bool &improve_loc_proposed) {
    m_improve_loc_proposed = improve_loc_proposed;
    m_improve_loc_proposed_isSet = true;
}

bool OAINAPlace::is_improve_loc_proposed_Set() const{
    return m_improve_loc_proposed_isSet;
}

bool OAINAPlace::is_improve_loc_proposed_Valid() const{
    return m_improve_loc_proposed_isValid;
}

QList<double> OAINAPlace::getLocation() const {
    return m_location;
}
void OAINAPlace::setLocation(const QList<double> &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAINAPlace::is_location_Set() const{
    return m_location_isSet;
}

bool OAINAPlace::is_location_Valid() const{
    return m_location_isValid;
}

QString OAINAPlace::getTimezone() const {
    return m_timezone;
}
void OAINAPlace::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAINAPlace::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAINAPlace::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAINAPlace::isTrustLocation() const {
    return m_trust_location;
}
void OAINAPlace::setTrustLocation(const bool &trust_location) {
    m_trust_location = trust_location;
    m_trust_location_isSet = true;
}

bool OAINAPlace::is_trust_location_Set() const{
    return m_trust_location_isSet;
}

bool OAINAPlace::is_trust_location_Valid() const{
    return m_trust_location_isValid;
}

bool OAINAPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_improve_loc_proposed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
