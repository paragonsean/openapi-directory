/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeEvent::OAINAWelcomeEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeEvent::OAINAWelcomeEvent() {
    this->initializeModel();
}

OAINAWelcomeEvent::~OAINAWelcomeEvent() {}

void OAINAWelcomeEvent::initializeModel() {

    m_camera_id_isSet = false;
    m_camera_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_event_list_isSet = false;
    m_event_list_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_arrival_isSet = false;
    m_is_arrival_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_person_id_isSet = false;
    m_person_id_isValid = false;

    m_snapshot_isSet = false;
    m_snapshot_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;

    m_video_status_isSet = false;
    m_video_status_isValid = false;
}

void OAINAWelcomeEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeEvent::fromJsonObject(QJsonObject json) {

    m_camera_id_isValid = ::OpenAPI::fromJsonValue(m_camera_id, json[QString("camera_id")]);
    m_camera_id_isSet = !json[QString("camera_id")].isNull() && m_camera_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_event_list_isValid = ::OpenAPI::fromJsonValue(m_event_list, json[QString("event_list")]);
    m_event_list_isSet = !json[QString("event_list")].isNull() && m_event_list_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_arrival_isValid = ::OpenAPI::fromJsonValue(m_is_arrival, json[QString("is_arrival")]);
    m_is_arrival_isSet = !json[QString("is_arrival")].isNull() && m_is_arrival_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_person_id_isValid = ::OpenAPI::fromJsonValue(m_person_id, json[QString("person_id")]);
    m_person_id_isSet = !json[QString("person_id")].isNull() && m_person_id_isValid;

    m_snapshot_isValid = ::OpenAPI::fromJsonValue(m_snapshot, json[QString("snapshot")]);
    m_snapshot_isSet = !json[QString("snapshot")].isNull() && m_snapshot_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("sub_type")]);
    m_sub_type_isSet = !json[QString("sub_type")].isNull() && m_sub_type_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("video_id")]);
    m_video_id_isSet = !json[QString("video_id")].isNull() && m_video_id_isValid;

    m_video_status_isValid = ::OpenAPI::fromJsonValue(m_video_status, json[QString("video_status")]);
    m_video_status_isSet = !json[QString("video_status")].isNull() && m_video_status_isValid;
}

QString OAINAWelcomeEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_camera_id_isSet) {
        obj.insert(QString("camera_id"), ::OpenAPI::toJsonValue(m_camera_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_event_list.size() > 0) {
        obj.insert(QString("event_list"), ::OpenAPI::toJsonValue(m_event_list));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_arrival_isSet) {
        obj.insert(QString("is_arrival"), ::OpenAPI::toJsonValue(m_is_arrival));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_person_id_isSet) {
        obj.insert(QString("person_id"), ::OpenAPI::toJsonValue(m_person_id));
    }
    if (m_snapshot.isSet()) {
        obj.insert(QString("snapshot"), ::OpenAPI::toJsonValue(m_snapshot));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("sub_type"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("video_id"), ::OpenAPI::toJsonValue(m_video_id));
    }
    if (m_video_status_isSet) {
        obj.insert(QString("video_status"), ::OpenAPI::toJsonValue(m_video_status));
    }
    return obj;
}

QString OAINAWelcomeEvent::getCameraId() const {
    return m_camera_id;
}
void OAINAWelcomeEvent::setCameraId(const QString &camera_id) {
    m_camera_id = camera_id;
    m_camera_id_isSet = true;
}

bool OAINAWelcomeEvent::is_camera_id_Set() const{
    return m_camera_id_isSet;
}

bool OAINAWelcomeEvent::is_camera_id_Valid() const{
    return m_camera_id_isValid;
}

QString OAINAWelcomeEvent::getCategory() const {
    return m_category;
}
void OAINAWelcomeEvent::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAINAWelcomeEvent::is_category_Set() const{
    return m_category_isSet;
}

bool OAINAWelcomeEvent::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAINAWelcomeSubEvent> OAINAWelcomeEvent::getEventList() const {
    return m_event_list;
}
void OAINAWelcomeEvent::setEventList(const QList<OAINAWelcomeSubEvent> &event_list) {
    m_event_list = event_list;
    m_event_list_isSet = true;
}

bool OAINAWelcomeEvent::is_event_list_Set() const{
    return m_event_list_isSet;
}

bool OAINAWelcomeEvent::is_event_list_Valid() const{
    return m_event_list_isValid;
}

QString OAINAWelcomeEvent::getId() const {
    return m_id;
}
void OAINAWelcomeEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeEvent::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINAWelcomeEvent::isIsArrival() const {
    return m_is_arrival;
}
void OAINAWelcomeEvent::setIsArrival(const bool &is_arrival) {
    m_is_arrival = is_arrival;
    m_is_arrival_isSet = true;
}

bool OAINAWelcomeEvent::is_is_arrival_Set() const{
    return m_is_arrival_isSet;
}

bool OAINAWelcomeEvent::is_is_arrival_Valid() const{
    return m_is_arrival_isValid;
}

QString OAINAWelcomeEvent::getMessage() const {
    return m_message;
}
void OAINAWelcomeEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINAWelcomeEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAINAWelcomeEvent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAINAWelcomeEvent::getPersonId() const {
    return m_person_id;
}
void OAINAWelcomeEvent::setPersonId(const QString &person_id) {
    m_person_id = person_id;
    m_person_id_isSet = true;
}

bool OAINAWelcomeEvent::is_person_id_Set() const{
    return m_person_id_isSet;
}

bool OAINAWelcomeEvent::is_person_id_Valid() const{
    return m_person_id_isValid;
}

OAINAWelcomeSnapshot OAINAWelcomeEvent::getSnapshot() const {
    return m_snapshot;
}
void OAINAWelcomeEvent::setSnapshot(const OAINAWelcomeSnapshot &snapshot) {
    m_snapshot = snapshot;
    m_snapshot_isSet = true;
}

bool OAINAWelcomeEvent::is_snapshot_Set() const{
    return m_snapshot_isSet;
}

bool OAINAWelcomeEvent::is_snapshot_Valid() const{
    return m_snapshot_isValid;
}

qint32 OAINAWelcomeEvent::getSubType() const {
    return m_sub_type;
}
void OAINAWelcomeEvent::setSubType(const qint32 &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAINAWelcomeEvent::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAINAWelcomeEvent::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

qint32 OAINAWelcomeEvent::getTime() const {
    return m_time;
}
void OAINAWelcomeEvent::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAINAWelcomeEvent::is_time_Set() const{
    return m_time_isSet;
}

bool OAINAWelcomeEvent::is_time_Valid() const{
    return m_time_isValid;
}

QString OAINAWelcomeEvent::getType() const {
    return m_type;
}
void OAINAWelcomeEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAWelcomeEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAWelcomeEvent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINAWelcomeEvent::getVideoId() const {
    return m_video_id;
}
void OAINAWelcomeEvent::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAINAWelcomeEvent::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAINAWelcomeEvent::is_video_id_Valid() const{
    return m_video_id_isValid;
}

QString OAINAWelcomeEvent::getVideoStatus() const {
    return m_video_status;
}
void OAINAWelcomeEvent::setVideoStatus(const QString &video_status) {
    m_video_status = video_status;
    m_video_status_isSet = true;
}

bool OAINAWelcomeEvent::is_video_status_Set() const{
    return m_video_status_isSet;
}

bool OAINAWelcomeEvent::is_video_status_Valid() const{
    return m_video_status_isValid;
}

bool OAINAWelcomeEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_camera_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
