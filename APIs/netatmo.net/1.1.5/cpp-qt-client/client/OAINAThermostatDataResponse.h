/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAThermostatDataResponse.h
 *
 * 
 */

#ifndef OAINAThermostatDataResponse_H
#define OAINAThermostatDataResponse_H

#include <QJsonObject>

#include "OAINAThermostatDataBody.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINAThermostatDataBody;

class OAINAThermostatDataResponse : public OAIObject {
public:
    OAINAThermostatDataResponse();
    OAINAThermostatDataResponse(QString json);
    ~OAINAThermostatDataResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINAThermostatDataBody getBody() const;
    void setBody(const OAINAThermostatDataBody &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    double getTimeExec() const;
    void setTimeExec(const double &time_exec);
    bool is_time_exec_Set() const;
    bool is_time_exec_Valid() const;

    qint32 getTimeServer() const;
    void setTimeServer(const qint32 &time_server);
    bool is_time_server_Set() const;
    bool is_time_server_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINAThermostatDataBody m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    double m_time_exec;
    bool m_time_exec_isSet;
    bool m_time_exec_isValid;

    qint32 m_time_server;
    bool m_time_server_isSet;
    bool m_time_server_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAThermostatDataResponse)

#endif // OAINAThermostatDataResponse_H
