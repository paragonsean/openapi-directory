/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAZone::OAINAZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAZone::OAINAZone() {
    this->initializeModel();
}

OAINAZone::~OAINAZone() {}

void OAINAZone::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_temp_isSet = false;
    m_temp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINAZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAZone::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_temp_isValid = ::OpenAPI::fromJsonValue(m_temp, json[QString("temp")]);
    m_temp_isSet = !json[QString("temp")].isNull() && m_temp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINAZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAZone::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_temp_isSet) {
        obj.insert(QString("temp"), ::OpenAPI::toJsonValue(m_temp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAINAZone::getId() const {
    return m_id;
}
void OAINAZone::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAZone::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINAZone::getName() const {
    return m_name;
}
void OAINAZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINAZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAINAZone::is_name_Valid() const{
    return m_name_isValid;
}

float OAINAZone::getTemp() const {
    return m_temp;
}
void OAINAZone::setTemp(const float &temp) {
    m_temp = temp;
    m_temp_isSet = true;
}

bool OAINAZone::is_temp_Set() const{
    return m_temp_isSet;
}

bool OAINAZone::is_temp_Valid() const{
    return m_temp_isValid;
}

qint32 OAINAZone::getType() const {
    return m_type;
}
void OAINAZone::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAZone::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAZone::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
