/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAModule::OAINAModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAModule::OAINAModule() {
    this->initializeModel();
}

OAINAModule::~OAINAModule() {}

void OAINAModule::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_battery_percent_isSet = false;
    m_battery_percent_isValid = false;

    m_battery_vp_isSet = false;
    m_battery_vp_isValid = false;

    m_dashboard_data_isSet = false;
    m_dashboard_data_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_date_setup_isSet = false;
    m_date_setup_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_main_device_isSet = false;
    m_main_device_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_public_ext_data_isSet = false;
    m_public_ext_data_isValid = false;

    m_rf_status_isSet = false;
    m_rf_status_isValid = false;

    m_therm_orientation_isSet = false;
    m_therm_orientation_isValid = false;

    m_therm_relay_cmd_isSet = false;
    m_therm_relay_cmd_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINAModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAModule::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_battery_percent_isValid = ::OpenAPI::fromJsonValue(m_battery_percent, json[QString("battery_percent")]);
    m_battery_percent_isSet = !json[QString("battery_percent")].isNull() && m_battery_percent_isValid;

    m_battery_vp_isValid = ::OpenAPI::fromJsonValue(m_battery_vp, json[QString("battery_vp")]);
    m_battery_vp_isSet = !json[QString("battery_vp")].isNull() && m_battery_vp_isValid;

    m_dashboard_data_isValid = ::OpenAPI::fromJsonValue(m_dashboard_data, json[QString("dashboard_data")]);
    m_dashboard_data_isSet = !json[QString("dashboard_data")].isNull() && m_dashboard_data_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_date_setup_isValid = ::OpenAPI::fromJsonValue(m_date_setup, json[QString("date_setup")]);
    m_date_setup_isSet = !json[QString("date_setup")].isNull() && m_date_setup_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("last_message")]);
    m_last_message_isSet = !json[QString("last_message")].isNull() && m_last_message_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("last_seen")]);
    m_last_seen_isSet = !json[QString("last_seen")].isNull() && m_last_seen_isValid;

    m_main_device_isValid = ::OpenAPI::fromJsonValue(m_main_device, json[QString("main_device")]);
    m_main_device_isSet = !json[QString("main_device")].isNull() && m_main_device_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("module_name")]);
    m_module_name_isSet = !json[QString("module_name")].isNull() && m_module_name_isValid;

    m_public_ext_data_isValid = ::OpenAPI::fromJsonValue(m_public_ext_data, json[QString("public_ext_data")]);
    m_public_ext_data_isSet = !json[QString("public_ext_data")].isNull() && m_public_ext_data_isValid;

    m_rf_status_isValid = ::OpenAPI::fromJsonValue(m_rf_status, json[QString("rf_status")]);
    m_rf_status_isSet = !json[QString("rf_status")].isNull() && m_rf_status_isValid;

    m_therm_orientation_isValid = ::OpenAPI::fromJsonValue(m_therm_orientation, json[QString("therm_orientation")]);
    m_therm_orientation_isSet = !json[QString("therm_orientation")].isNull() && m_therm_orientation_isValid;

    m_therm_relay_cmd_isValid = ::OpenAPI::fromJsonValue(m_therm_relay_cmd, json[QString("therm_relay_cmd")]);
    m_therm_relay_cmd_isSet = !json[QString("therm_relay_cmd")].isNull() && m_therm_relay_cmd_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINAModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAModule::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_battery_percent_isSet) {
        obj.insert(QString("battery_percent"), ::OpenAPI::toJsonValue(m_battery_percent));
    }
    if (m_battery_vp_isSet) {
        obj.insert(QString("battery_vp"), ::OpenAPI::toJsonValue(m_battery_vp));
    }
    if (m_dashboard_data.isSet()) {
        obj.insert(QString("dashboard_data"), ::OpenAPI::toJsonValue(m_dashboard_data));
    }
    if (m_data_type.size() > 0) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_date_setup.isSet()) {
        obj.insert(QString("date_setup"), ::OpenAPI::toJsonValue(m_date_setup));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_last_message_isSet) {
        obj.insert(QString("last_message"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("last_seen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_main_device_isSet) {
        obj.insert(QString("main_device"), ::OpenAPI::toJsonValue(m_main_device));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("module_name"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_public_ext_data_isSet) {
        obj.insert(QString("public_ext_data"), ::OpenAPI::toJsonValue(m_public_ext_data));
    }
    if (m_rf_status_isSet) {
        obj.insert(QString("rf_status"), ::OpenAPI::toJsonValue(m_rf_status));
    }
    if (m_therm_orientation_isSet) {
        obj.insert(QString("therm_orientation"), ::OpenAPI::toJsonValue(m_therm_orientation));
    }
    if (m_therm_relay_cmd_isSet) {
        obj.insert(QString("therm_relay_cmd"), ::OpenAPI::toJsonValue(m_therm_relay_cmd));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINAModule::getId() const {
    return m__id;
}
void OAINAModule::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAModule::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAModule::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAINAModule::getBatteryPercent() const {
    return m_battery_percent;
}
void OAINAModule::setBatteryPercent(const qint32 &battery_percent) {
    m_battery_percent = battery_percent;
    m_battery_percent_isSet = true;
}

bool OAINAModule::is_battery_percent_Set() const{
    return m_battery_percent_isSet;
}

bool OAINAModule::is_battery_percent_Valid() const{
    return m_battery_percent_isValid;
}

qint32 OAINAModule::getBatteryVp() const {
    return m_battery_vp;
}
void OAINAModule::setBatteryVp(const qint32 &battery_vp) {
    m_battery_vp = battery_vp;
    m_battery_vp_isSet = true;
}

bool OAINAModule::is_battery_vp_Set() const{
    return m_battery_vp_isSet;
}

bool OAINAModule::is_battery_vp_Valid() const{
    return m_battery_vp_isValid;
}

OAINADashboardData OAINAModule::getDashboardData() const {
    return m_dashboard_data;
}
void OAINAModule::setDashboardData(const OAINADashboardData &dashboard_data) {
    m_dashboard_data = dashboard_data;
    m_dashboard_data_isSet = true;
}

bool OAINAModule::is_dashboard_data_Set() const{
    return m_dashboard_data_isSet;
}

bool OAINAModule::is_dashboard_data_Valid() const{
    return m_dashboard_data_isValid;
}

QList<QString> OAINAModule::getDataType() const {
    return m_data_type;
}
void OAINAModule::setDataType(const QList<QString> &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAINAModule::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAINAModule::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAINADate OAINAModule::getDateSetup() const {
    return m_date_setup;
}
void OAINAModule::setDateSetup(const OAINADate &date_setup) {
    m_date_setup = date_setup;
    m_date_setup_isSet = true;
}

bool OAINAModule::is_date_setup_Set() const{
    return m_date_setup_isSet;
}

bool OAINAModule::is_date_setup_Valid() const{
    return m_date_setup_isValid;
}

qint32 OAINAModule::getFirmware() const {
    return m_firmware;
}
void OAINAModule::setFirmware(const qint32 &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAINAModule::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAINAModule::is_firmware_Valid() const{
    return m_firmware_isValid;
}

qint32 OAINAModule::getLastMessage() const {
    return m_last_message;
}
void OAINAModule::setLastMessage(const qint32 &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAINAModule::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAINAModule::is_last_message_Valid() const{
    return m_last_message_isValid;
}

qint32 OAINAModule::getLastSeen() const {
    return m_last_seen;
}
void OAINAModule::setLastSeen(const qint32 &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAINAModule::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAINAModule::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

QString OAINAModule::getMainDevice() const {
    return m_main_device;
}
void OAINAModule::setMainDevice(const QString &main_device) {
    m_main_device = main_device;
    m_main_device_isSet = true;
}

bool OAINAModule::is_main_device_Set() const{
    return m_main_device_isSet;
}

bool OAINAModule::is_main_device_Valid() const{
    return m_main_device_isValid;
}

QString OAINAModule::getModuleName() const {
    return m_module_name;
}
void OAINAModule::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAINAModule::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAINAModule::is_module_name_Valid() const{
    return m_module_name_isValid;
}

bool OAINAModule::isPublicExtData() const {
    return m_public_ext_data;
}
void OAINAModule::setPublicExtData(const bool &public_ext_data) {
    m_public_ext_data = public_ext_data;
    m_public_ext_data_isSet = true;
}

bool OAINAModule::is_public_ext_data_Set() const{
    return m_public_ext_data_isSet;
}

bool OAINAModule::is_public_ext_data_Valid() const{
    return m_public_ext_data_isValid;
}

qint32 OAINAModule::getRfStatus() const {
    return m_rf_status;
}
void OAINAModule::setRfStatus(const qint32 &rf_status) {
    m_rf_status = rf_status;
    m_rf_status_isSet = true;
}

bool OAINAModule::is_rf_status_Set() const{
    return m_rf_status_isSet;
}

bool OAINAModule::is_rf_status_Valid() const{
    return m_rf_status_isValid;
}

qint32 OAINAModule::getThermOrientation() const {
    return m_therm_orientation;
}
void OAINAModule::setThermOrientation(const qint32 &therm_orientation) {
    m_therm_orientation = therm_orientation;
    m_therm_orientation_isSet = true;
}

bool OAINAModule::is_therm_orientation_Set() const{
    return m_therm_orientation_isSet;
}

bool OAINAModule::is_therm_orientation_Valid() const{
    return m_therm_orientation_isValid;
}

qint32 OAINAModule::getThermRelayCmd() const {
    return m_therm_relay_cmd;
}
void OAINAModule::setThermRelayCmd(const qint32 &therm_relay_cmd) {
    m_therm_relay_cmd = therm_relay_cmd;
    m_therm_relay_cmd_isSet = true;
}

bool OAINAModule::is_therm_relay_cmd_Set() const{
    return m_therm_relay_cmd_isSet;
}

bool OAINAModule::is_therm_relay_cmd_Valid() const{
    return m_therm_relay_cmd_isValid;
}

QString OAINAModule::getType() const {
    return m_type;
}
void OAINAModule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAModule::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAModule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_vp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_setup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ext_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_relay_cmd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
