/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAThermStateBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAThermStateBody::OAINAThermStateBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAThermStateBody::OAINAThermStateBody() {
    this->initializeModel();
}

OAINAThermStateBody::~OAINAThermStateBody() {}

void OAINAThermStateBody::initializeModel() {

    m_battery_percent_isSet = false;
    m_battery_percent_isValid = false;

    m_battery_vp_isSet = false;
    m_battery_vp_isValid = false;

    m_last_plug_seen_isSet = false;
    m_last_plug_seen_isValid = false;

    m_last_therm_seen_isSet = false;
    m_last_therm_seen_isValid = false;

    m_measured_isSet = false;
    m_measured_isValid = false;

    m_plug_connected_boiler_isSet = false;
    m_plug_connected_boiler_isValid = false;

    m_rf_status_isSet = false;
    m_rf_status_isValid = false;

    m_setpoint_isSet = false;
    m_setpoint_isValid = false;

    m_setpoint_order_isSet = false;
    m_setpoint_order_isValid = false;

    m_therm_orientation_isSet = false;
    m_therm_orientation_isValid = false;

    m_therm_program_isSet = false;
    m_therm_program_isValid = false;

    m_therm_program_backup_isSet = false;
    m_therm_program_backup_isValid = false;

    m_therm_program_order_isSet = false;
    m_therm_program_order_isValid = false;

    m_therm_relay_cmd_isSet = false;
    m_therm_relay_cmd_isValid = false;

    m_udp_conn_isSet = false;
    m_udp_conn_isValid = false;

    m_wifi_status_isSet = false;
    m_wifi_status_isValid = false;
}

void OAINAThermStateBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAThermStateBody::fromJsonObject(QJsonObject json) {

    m_battery_percent_isValid = ::OpenAPI::fromJsonValue(m_battery_percent, json[QString("battery_percent")]);
    m_battery_percent_isSet = !json[QString("battery_percent")].isNull() && m_battery_percent_isValid;

    m_battery_vp_isValid = ::OpenAPI::fromJsonValue(m_battery_vp, json[QString("battery_vp")]);
    m_battery_vp_isSet = !json[QString("battery_vp")].isNull() && m_battery_vp_isValid;

    m_last_plug_seen_isValid = ::OpenAPI::fromJsonValue(m_last_plug_seen, json[QString("last_plug_seen")]);
    m_last_plug_seen_isSet = !json[QString("last_plug_seen")].isNull() && m_last_plug_seen_isValid;

    m_last_therm_seen_isValid = ::OpenAPI::fromJsonValue(m_last_therm_seen, json[QString("last_therm_seen")]);
    m_last_therm_seen_isSet = !json[QString("last_therm_seen")].isNull() && m_last_therm_seen_isValid;

    m_measured_isValid = ::OpenAPI::fromJsonValue(m_measured, json[QString("measured")]);
    m_measured_isSet = !json[QString("measured")].isNull() && m_measured_isValid;

    m_plug_connected_boiler_isValid = ::OpenAPI::fromJsonValue(m_plug_connected_boiler, json[QString("plug_connected_boiler")]);
    m_plug_connected_boiler_isSet = !json[QString("plug_connected_boiler")].isNull() && m_plug_connected_boiler_isValid;

    m_rf_status_isValid = ::OpenAPI::fromJsonValue(m_rf_status, json[QString("rf_status")]);
    m_rf_status_isSet = !json[QString("rf_status")].isNull() && m_rf_status_isValid;

    m_setpoint_isValid = ::OpenAPI::fromJsonValue(m_setpoint, json[QString("setpoint")]);
    m_setpoint_isSet = !json[QString("setpoint")].isNull() && m_setpoint_isValid;

    m_setpoint_order_isValid = ::OpenAPI::fromJsonValue(m_setpoint_order, json[QString("setpoint_order")]);
    m_setpoint_order_isSet = !json[QString("setpoint_order")].isNull() && m_setpoint_order_isValid;

    m_therm_orientation_isValid = ::OpenAPI::fromJsonValue(m_therm_orientation, json[QString("therm_orientation")]);
    m_therm_orientation_isSet = !json[QString("therm_orientation")].isNull() && m_therm_orientation_isValid;

    m_therm_program_isValid = ::OpenAPI::fromJsonValue(m_therm_program, json[QString("therm_program")]);
    m_therm_program_isSet = !json[QString("therm_program")].isNull() && m_therm_program_isValid;

    m_therm_program_backup_isValid = ::OpenAPI::fromJsonValue(m_therm_program_backup, json[QString("therm_program_backup")]);
    m_therm_program_backup_isSet = !json[QString("therm_program_backup")].isNull() && m_therm_program_backup_isValid;

    m_therm_program_order_isValid = ::OpenAPI::fromJsonValue(m_therm_program_order, json[QString("therm_program_order")]);
    m_therm_program_order_isSet = !json[QString("therm_program_order")].isNull() && m_therm_program_order_isValid;

    m_therm_relay_cmd_isValid = ::OpenAPI::fromJsonValue(m_therm_relay_cmd, json[QString("therm_relay_cmd")]);
    m_therm_relay_cmd_isSet = !json[QString("therm_relay_cmd")].isNull() && m_therm_relay_cmd_isValid;

    m_udp_conn_isValid = ::OpenAPI::fromJsonValue(m_udp_conn, json[QString("udp_conn")]);
    m_udp_conn_isSet = !json[QString("udp_conn")].isNull() && m_udp_conn_isValid;

    m_wifi_status_isValid = ::OpenAPI::fromJsonValue(m_wifi_status, json[QString("wifi_status")]);
    m_wifi_status_isSet = !json[QString("wifi_status")].isNull() && m_wifi_status_isValid;
}

QString OAINAThermStateBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAThermStateBody::asJsonObject() const {
    QJsonObject obj;
    if (m_battery_percent_isSet) {
        obj.insert(QString("battery_percent"), ::OpenAPI::toJsonValue(m_battery_percent));
    }
    if (m_battery_vp_isSet) {
        obj.insert(QString("battery_vp"), ::OpenAPI::toJsonValue(m_battery_vp));
    }
    if (m_last_plug_seen_isSet) {
        obj.insert(QString("last_plug_seen"), ::OpenAPI::toJsonValue(m_last_plug_seen));
    }
    if (m_last_therm_seen_isSet) {
        obj.insert(QString("last_therm_seen"), ::OpenAPI::toJsonValue(m_last_therm_seen));
    }
    if (m_measured.isSet()) {
        obj.insert(QString("measured"), ::OpenAPI::toJsonValue(m_measured));
    }
    if (m_plug_connected_boiler_isSet) {
        obj.insert(QString("plug_connected_boiler"), ::OpenAPI::toJsonValue(m_plug_connected_boiler));
    }
    if (m_rf_status_isSet) {
        obj.insert(QString("rf_status"), ::OpenAPI::toJsonValue(m_rf_status));
    }
    if (m_setpoint.isSet()) {
        obj.insert(QString("setpoint"), ::OpenAPI::toJsonValue(m_setpoint));
    }
    if (m_setpoint_order.isSet()) {
        obj.insert(QString("setpoint_order"), ::OpenAPI::toJsonValue(m_setpoint_order));
    }
    if (m_therm_orientation_isSet) {
        obj.insert(QString("therm_orientation"), ::OpenAPI::toJsonValue(m_therm_orientation));
    }
    if (m_therm_program.isSet()) {
        obj.insert(QString("therm_program"), ::OpenAPI::toJsonValue(m_therm_program));
    }
    if (m_therm_program_backup.size() > 0) {
        obj.insert(QString("therm_program_backup"), ::OpenAPI::toJsonValue(m_therm_program_backup));
    }
    if (m_therm_program_order.isSet()) {
        obj.insert(QString("therm_program_order"), ::OpenAPI::toJsonValue(m_therm_program_order));
    }
    if (m_therm_relay_cmd_isSet) {
        obj.insert(QString("therm_relay_cmd"), ::OpenAPI::toJsonValue(m_therm_relay_cmd));
    }
    if (m_udp_conn_isSet) {
        obj.insert(QString("udp_conn"), ::OpenAPI::toJsonValue(m_udp_conn));
    }
    if (m_wifi_status_isSet) {
        obj.insert(QString("wifi_status"), ::OpenAPI::toJsonValue(m_wifi_status));
    }
    return obj;
}

qint32 OAINAThermStateBody::getBatteryPercent() const {
    return m_battery_percent;
}
void OAINAThermStateBody::setBatteryPercent(const qint32 &battery_percent) {
    m_battery_percent = battery_percent;
    m_battery_percent_isSet = true;
}

bool OAINAThermStateBody::is_battery_percent_Set() const{
    return m_battery_percent_isSet;
}

bool OAINAThermStateBody::is_battery_percent_Valid() const{
    return m_battery_percent_isValid;
}

qint32 OAINAThermStateBody::getBatteryVp() const {
    return m_battery_vp;
}
void OAINAThermStateBody::setBatteryVp(const qint32 &battery_vp) {
    m_battery_vp = battery_vp;
    m_battery_vp_isSet = true;
}

bool OAINAThermStateBody::is_battery_vp_Set() const{
    return m_battery_vp_isSet;
}

bool OAINAThermStateBody::is_battery_vp_Valid() const{
    return m_battery_vp_isValid;
}

qint32 OAINAThermStateBody::getLastPlugSeen() const {
    return m_last_plug_seen;
}
void OAINAThermStateBody::setLastPlugSeen(const qint32 &last_plug_seen) {
    m_last_plug_seen = last_plug_seen;
    m_last_plug_seen_isSet = true;
}

bool OAINAThermStateBody::is_last_plug_seen_Set() const{
    return m_last_plug_seen_isSet;
}

bool OAINAThermStateBody::is_last_plug_seen_Valid() const{
    return m_last_plug_seen_isValid;
}

qint32 OAINAThermStateBody::getLastThermSeen() const {
    return m_last_therm_seen;
}
void OAINAThermStateBody::setLastThermSeen(const qint32 &last_therm_seen) {
    m_last_therm_seen = last_therm_seen;
    m_last_therm_seen_isSet = true;
}

bool OAINAThermStateBody::is_last_therm_seen_Set() const{
    return m_last_therm_seen_isSet;
}

bool OAINAThermStateBody::is_last_therm_seen_Valid() const{
    return m_last_therm_seen_isValid;
}

OAINAThermMeasure OAINAThermStateBody::getMeasured() const {
    return m_measured;
}
void OAINAThermStateBody::setMeasured(const OAINAThermMeasure &measured) {
    m_measured = measured;
    m_measured_isSet = true;
}

bool OAINAThermStateBody::is_measured_Set() const{
    return m_measured_isSet;
}

bool OAINAThermStateBody::is_measured_Valid() const{
    return m_measured_isValid;
}

qint32 OAINAThermStateBody::getPlugConnectedBoiler() const {
    return m_plug_connected_boiler;
}
void OAINAThermStateBody::setPlugConnectedBoiler(const qint32 &plug_connected_boiler) {
    m_plug_connected_boiler = plug_connected_boiler;
    m_plug_connected_boiler_isSet = true;
}

bool OAINAThermStateBody::is_plug_connected_boiler_Set() const{
    return m_plug_connected_boiler_isSet;
}

bool OAINAThermStateBody::is_plug_connected_boiler_Valid() const{
    return m_plug_connected_boiler_isValid;
}

qint32 OAINAThermStateBody::getRfStatus() const {
    return m_rf_status;
}
void OAINAThermStateBody::setRfStatus(const qint32 &rf_status) {
    m_rf_status = rf_status;
    m_rf_status_isSet = true;
}

bool OAINAThermStateBody::is_rf_status_Set() const{
    return m_rf_status_isSet;
}

bool OAINAThermStateBody::is_rf_status_Valid() const{
    return m_rf_status_isValid;
}

OAINASetpoint OAINAThermStateBody::getSetpoint() const {
    return m_setpoint;
}
void OAINAThermStateBody::setSetpoint(const OAINASetpoint &setpoint) {
    m_setpoint = setpoint;
    m_setpoint_isSet = true;
}

bool OAINAThermStateBody::is_setpoint_Set() const{
    return m_setpoint_isSet;
}

bool OAINAThermStateBody::is_setpoint_Valid() const{
    return m_setpoint_isValid;
}

OAINASetpoint OAINAThermStateBody::getSetpointOrder() const {
    return m_setpoint_order;
}
void OAINAThermStateBody::setSetpointOrder(const OAINASetpoint &setpoint_order) {
    m_setpoint_order = setpoint_order;
    m_setpoint_order_isSet = true;
}

bool OAINAThermStateBody::is_setpoint_order_Set() const{
    return m_setpoint_order_isSet;
}

bool OAINAThermStateBody::is_setpoint_order_Valid() const{
    return m_setpoint_order_isValid;
}

qint32 OAINAThermStateBody::getThermOrientation() const {
    return m_therm_orientation;
}
void OAINAThermStateBody::setThermOrientation(const qint32 &therm_orientation) {
    m_therm_orientation = therm_orientation;
    m_therm_orientation_isSet = true;
}

bool OAINAThermStateBody::is_therm_orientation_Set() const{
    return m_therm_orientation_isSet;
}

bool OAINAThermStateBody::is_therm_orientation_Valid() const{
    return m_therm_orientation_isValid;
}

OAINAThermProgram OAINAThermStateBody::getThermProgram() const {
    return m_therm_program;
}
void OAINAThermStateBody::setThermProgram(const OAINAThermProgram &therm_program) {
    m_therm_program = therm_program;
    m_therm_program_isSet = true;
}

bool OAINAThermStateBody::is_therm_program_Set() const{
    return m_therm_program_isSet;
}

bool OAINAThermStateBody::is_therm_program_Valid() const{
    return m_therm_program_isValid;
}

QList<OAINAThermProgram> OAINAThermStateBody::getThermProgramBackup() const {
    return m_therm_program_backup;
}
void OAINAThermStateBody::setThermProgramBackup(const QList<OAINAThermProgram> &therm_program_backup) {
    m_therm_program_backup = therm_program_backup;
    m_therm_program_backup_isSet = true;
}

bool OAINAThermStateBody::is_therm_program_backup_Set() const{
    return m_therm_program_backup_isSet;
}

bool OAINAThermStateBody::is_therm_program_backup_Valid() const{
    return m_therm_program_backup_isValid;
}

OAINAThermProgram OAINAThermStateBody::getThermProgramOrder() const {
    return m_therm_program_order;
}
void OAINAThermStateBody::setThermProgramOrder(const OAINAThermProgram &therm_program_order) {
    m_therm_program_order = therm_program_order;
    m_therm_program_order_isSet = true;
}

bool OAINAThermStateBody::is_therm_program_order_Set() const{
    return m_therm_program_order_isSet;
}

bool OAINAThermStateBody::is_therm_program_order_Valid() const{
    return m_therm_program_order_isValid;
}

qint32 OAINAThermStateBody::getThermRelayCmd() const {
    return m_therm_relay_cmd;
}
void OAINAThermStateBody::setThermRelayCmd(const qint32 &therm_relay_cmd) {
    m_therm_relay_cmd = therm_relay_cmd;
    m_therm_relay_cmd_isSet = true;
}

bool OAINAThermStateBody::is_therm_relay_cmd_Set() const{
    return m_therm_relay_cmd_isSet;
}

bool OAINAThermStateBody::is_therm_relay_cmd_Valid() const{
    return m_therm_relay_cmd_isValid;
}

bool OAINAThermStateBody::isUdpConn() const {
    return m_udp_conn;
}
void OAINAThermStateBody::setUdpConn(const bool &udp_conn) {
    m_udp_conn = udp_conn;
    m_udp_conn_isSet = true;
}

bool OAINAThermStateBody::is_udp_conn_Set() const{
    return m_udp_conn_isSet;
}

bool OAINAThermStateBody::is_udp_conn_Valid() const{
    return m_udp_conn_isValid;
}

qint32 OAINAThermStateBody::getWifiStatus() const {
    return m_wifi_status;
}
void OAINAThermStateBody::setWifiStatus(const qint32 &wifi_status) {
    m_wifi_status = wifi_status;
    m_wifi_status_isSet = true;
}

bool OAINAThermStateBody::is_wifi_status_Set() const{
    return m_wifi_status_isSet;
}

bool OAINAThermStateBody::is_wifi_status_Valid() const{
    return m_wifi_status_isValid;
}

bool OAINAThermStateBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_battery_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_vp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_plug_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_therm_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measured.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plug_connected_boiler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setpoint_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_program.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_program_backup.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_program_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_therm_relay_cmd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udp_conn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAThermStateBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
