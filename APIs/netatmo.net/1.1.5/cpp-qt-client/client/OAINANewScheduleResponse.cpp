/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINANewScheduleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINANewScheduleResponse::OAINANewScheduleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINANewScheduleResponse::OAINANewScheduleResponse() {
    this->initializeModel();
}

OAINANewScheduleResponse::~OAINANewScheduleResponse() {}

void OAINANewScheduleResponse::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_exec_isSet = false;
    m_time_exec_isValid = false;

    m_time_server_isSet = false;
    m_time_server_isValid = false;
}

void OAINANewScheduleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINANewScheduleResponse::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_exec_isValid = ::OpenAPI::fromJsonValue(m_time_exec, json[QString("time_exec")]);
    m_time_exec_isSet = !json[QString("time_exec")].isNull() && m_time_exec_isValid;

    m_time_server_isValid = ::OpenAPI::fromJsonValue(m_time_server, json[QString("time_server")]);
    m_time_server_isSet = !json[QString("time_server")].isNull() && m_time_server_isValid;
}

QString OAINANewScheduleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINANewScheduleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_exec_isSet) {
        obj.insert(QString("time_exec"), ::OpenAPI::toJsonValue(m_time_exec));
    }
    if (m_time_server_isSet) {
        obj.insert(QString("time_server"), ::OpenAPI::toJsonValue(m_time_server));
    }
    return obj;
}

OAINANewScheduleBody OAINANewScheduleResponse::getBody() const {
    return m_body;
}
void OAINANewScheduleResponse::setBody(const OAINANewScheduleBody &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAINANewScheduleResponse::is_body_Set() const{
    return m_body_isSet;
}

bool OAINANewScheduleResponse::is_body_Valid() const{
    return m_body_isValid;
}

QString OAINANewScheduleResponse::getStatus() const {
    return m_status;
}
void OAINANewScheduleResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINANewScheduleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAINANewScheduleResponse::is_status_Valid() const{
    return m_status_isValid;
}

double OAINANewScheduleResponse::getTimeExec() const {
    return m_time_exec;
}
void OAINANewScheduleResponse::setTimeExec(const double &time_exec) {
    m_time_exec = time_exec;
    m_time_exec_isSet = true;
}

bool OAINANewScheduleResponse::is_time_exec_Set() const{
    return m_time_exec_isSet;
}

bool OAINANewScheduleResponse::is_time_exec_Valid() const{
    return m_time_exec_isValid;
}

qint32 OAINANewScheduleResponse::getTimeServer() const {
    return m_time_server;
}
void OAINANewScheduleResponse::setTimeServer(const qint32 &time_server) {
    m_time_server = time_server;
    m_time_server_isSet = true;
}

bool OAINANewScheduleResponse::is_time_server_Set() const{
    return m_time_server_isSet;
}

bool OAINANewScheduleResponse::is_time_server_Valid() const{
    return m_time_server_isValid;
}

bool OAINANewScheduleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_exec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINANewScheduleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
