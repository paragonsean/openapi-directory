/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAThermStateBody.h
 *
 * 
 */

#ifndef OAINAThermStateBody_H
#define OAINAThermStateBody_H

#include <QJsonObject>

#include "OAINASetpoint.h"
#include "OAINAThermMeasure.h"
#include "OAINAThermProgram.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINAThermMeasure;
class OAINASetpoint;
class OAINAThermProgram;

class OAINAThermStateBody : public OAIObject {
public:
    OAINAThermStateBody();
    OAINAThermStateBody(QString json);
    ~OAINAThermStateBody() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBatteryPercent() const;
    void setBatteryPercent(const qint32 &battery_percent);
    bool is_battery_percent_Set() const;
    bool is_battery_percent_Valid() const;

    qint32 getBatteryVp() const;
    void setBatteryVp(const qint32 &battery_vp);
    bool is_battery_vp_Set() const;
    bool is_battery_vp_Valid() const;

    qint32 getLastPlugSeen() const;
    void setLastPlugSeen(const qint32 &last_plug_seen);
    bool is_last_plug_seen_Set() const;
    bool is_last_plug_seen_Valid() const;

    qint32 getLastThermSeen() const;
    void setLastThermSeen(const qint32 &last_therm_seen);
    bool is_last_therm_seen_Set() const;
    bool is_last_therm_seen_Valid() const;

    OAINAThermMeasure getMeasured() const;
    void setMeasured(const OAINAThermMeasure &measured);
    bool is_measured_Set() const;
    bool is_measured_Valid() const;

    qint32 getPlugConnectedBoiler() const;
    void setPlugConnectedBoiler(const qint32 &plug_connected_boiler);
    bool is_plug_connected_boiler_Set() const;
    bool is_plug_connected_boiler_Valid() const;

    qint32 getRfStatus() const;
    void setRfStatus(const qint32 &rf_status);
    bool is_rf_status_Set() const;
    bool is_rf_status_Valid() const;

    OAINASetpoint getSetpoint() const;
    void setSetpoint(const OAINASetpoint &setpoint);
    bool is_setpoint_Set() const;
    bool is_setpoint_Valid() const;

    OAINASetpoint getSetpointOrder() const;
    void setSetpointOrder(const OAINASetpoint &setpoint_order);
    bool is_setpoint_order_Set() const;
    bool is_setpoint_order_Valid() const;

    qint32 getThermOrientation() const;
    void setThermOrientation(const qint32 &therm_orientation);
    bool is_therm_orientation_Set() const;
    bool is_therm_orientation_Valid() const;

    OAINAThermProgram getThermProgram() const;
    void setThermProgram(const OAINAThermProgram &therm_program);
    bool is_therm_program_Set() const;
    bool is_therm_program_Valid() const;

    QList<OAINAThermProgram> getThermProgramBackup() const;
    void setThermProgramBackup(const QList<OAINAThermProgram> &therm_program_backup);
    bool is_therm_program_backup_Set() const;
    bool is_therm_program_backup_Valid() const;

    OAINAThermProgram getThermProgramOrder() const;
    void setThermProgramOrder(const OAINAThermProgram &therm_program_order);
    bool is_therm_program_order_Set() const;
    bool is_therm_program_order_Valid() const;

    qint32 getThermRelayCmd() const;
    void setThermRelayCmd(const qint32 &therm_relay_cmd);
    bool is_therm_relay_cmd_Set() const;
    bool is_therm_relay_cmd_Valid() const;

    bool isUdpConn() const;
    void setUdpConn(const bool &udp_conn);
    bool is_udp_conn_Set() const;
    bool is_udp_conn_Valid() const;

    qint32 getWifiStatus() const;
    void setWifiStatus(const qint32 &wifi_status);
    bool is_wifi_status_Set() const;
    bool is_wifi_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_battery_percent;
    bool m_battery_percent_isSet;
    bool m_battery_percent_isValid;

    qint32 m_battery_vp;
    bool m_battery_vp_isSet;
    bool m_battery_vp_isValid;

    qint32 m_last_plug_seen;
    bool m_last_plug_seen_isSet;
    bool m_last_plug_seen_isValid;

    qint32 m_last_therm_seen;
    bool m_last_therm_seen_isSet;
    bool m_last_therm_seen_isValid;

    OAINAThermMeasure m_measured;
    bool m_measured_isSet;
    bool m_measured_isValid;

    qint32 m_plug_connected_boiler;
    bool m_plug_connected_boiler_isSet;
    bool m_plug_connected_boiler_isValid;

    qint32 m_rf_status;
    bool m_rf_status_isSet;
    bool m_rf_status_isValid;

    OAINASetpoint m_setpoint;
    bool m_setpoint_isSet;
    bool m_setpoint_isValid;

    OAINASetpoint m_setpoint_order;
    bool m_setpoint_order_isSet;
    bool m_setpoint_order_isValid;

    qint32 m_therm_orientation;
    bool m_therm_orientation_isSet;
    bool m_therm_orientation_isValid;

    OAINAThermProgram m_therm_program;
    bool m_therm_program_isSet;
    bool m_therm_program_isValid;

    QList<OAINAThermProgram> m_therm_program_backup;
    bool m_therm_program_backup_isSet;
    bool m_therm_program_backup_isValid;

    OAINAThermProgram m_therm_program_order;
    bool m_therm_program_order_isSet;
    bool m_therm_program_order_isValid;

    qint32 m_therm_relay_cmd;
    bool m_therm_relay_cmd_isSet;
    bool m_therm_relay_cmd_isValid;

    bool m_udp_conn;
    bool m_udp_conn_isSet;
    bool m_udp_conn_isValid;

    qint32 m_wifi_status;
    bool m_wifi_status_isSet;
    bool m_wifi_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAThermStateBody)

#endif // OAINAThermStateBody_H
