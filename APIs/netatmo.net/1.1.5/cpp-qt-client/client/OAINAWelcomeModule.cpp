/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeModule::OAINAWelcomeModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeModule::OAINAWelcomeModule() {
    this->initializeModel();
}

OAINAWelcomeModule::~OAINAWelcomeModule() {}

void OAINAWelcomeModule::initializeModel() {

    m_battery_percent_isSet = false;
    m_battery_percent_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_activity_isSet = false;
    m_last_activity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rf_isSet = false;
    m_rf_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINAWelcomeModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeModule::fromJsonObject(QJsonObject json) {

    m_battery_percent_isValid = ::OpenAPI::fromJsonValue(m_battery_percent, json[QString("battery_percent")]);
    m_battery_percent_isSet = !json[QString("battery_percent")].isNull() && m_battery_percent_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_activity_isValid = ::OpenAPI::fromJsonValue(m_last_activity, json[QString("last_activity")]);
    m_last_activity_isSet = !json[QString("last_activity")].isNull() && m_last_activity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rf_isValid = ::OpenAPI::fromJsonValue(m_rf, json[QString("rf")]);
    m_rf_isSet = !json[QString("rf")].isNull() && m_rf_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINAWelcomeModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeModule::asJsonObject() const {
    QJsonObject obj;
    if (m_battery_percent_isSet) {
        obj.insert(QString("battery_percent"), ::OpenAPI::toJsonValue(m_battery_percent));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_activity_isSet) {
        obj.insert(QString("last_activity"), ::OpenAPI::toJsonValue(m_last_activity));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rf_isSet) {
        obj.insert(QString("rf"), ::OpenAPI::toJsonValue(m_rf));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAINAWelcomeModule::getBatteryPercent() const {
    return m_battery_percent;
}
void OAINAWelcomeModule::setBatteryPercent(const qint32 &battery_percent) {
    m_battery_percent = battery_percent;
    m_battery_percent_isSet = true;
}

bool OAINAWelcomeModule::is_battery_percent_Set() const{
    return m_battery_percent_isSet;
}

bool OAINAWelcomeModule::is_battery_percent_Valid() const{
    return m_battery_percent_isValid;
}

QString OAINAWelcomeModule::getId() const {
    return m_id;
}
void OAINAWelcomeModule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeModule::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeModule::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAINAWelcomeModule::getLastActivity() const {
    return m_last_activity;
}
void OAINAWelcomeModule::setLastActivity(const qint32 &last_activity) {
    m_last_activity = last_activity;
    m_last_activity_isSet = true;
}

bool OAINAWelcomeModule::is_last_activity_Set() const{
    return m_last_activity_isSet;
}

bool OAINAWelcomeModule::is_last_activity_Valid() const{
    return m_last_activity_isValid;
}

QString OAINAWelcomeModule::getName() const {
    return m_name;
}
void OAINAWelcomeModule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINAWelcomeModule::is_name_Set() const{
    return m_name_isSet;
}

bool OAINAWelcomeModule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINAWelcomeModule::getRf() const {
    return m_rf;
}
void OAINAWelcomeModule::setRf(const QString &rf) {
    m_rf = rf;
    m_rf_isSet = true;
}

bool OAINAWelcomeModule::is_rf_Set() const{
    return m_rf_isSet;
}

bool OAINAWelcomeModule::is_rf_Valid() const{
    return m_rf_isValid;
}

QString OAINAWelcomeModule::getStatus() const {
    return m_status;
}
void OAINAWelcomeModule::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINAWelcomeModule::is_status_Set() const{
    return m_status_isSet;
}

bool OAINAWelcomeModule::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINAWelcomeModule::getType() const {
    return m_type;
}
void OAINAWelcomeModule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAWelcomeModule::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAWelcomeModule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAWelcomeModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_battery_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
