/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAThermProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAThermProgram::OAINAThermProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAThermProgram::OAINAThermProgram() {
    this->initializeModel();
}

OAINAThermProgram::~OAINAThermProgram() {}

void OAINAThermProgram::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_program_id_isSet = false;
    m_program_id_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_timetable_isSet = false;
    m_timetable_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAINAThermProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAThermProgram::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_program_id_isValid = ::OpenAPI::fromJsonValue(m_program_id, json[QString("program_id")]);
    m_program_id_isSet = !json[QString("program_id")].isNull() && m_program_id_isValid;

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_timetable_isValid = ::OpenAPI::fromJsonValue(m_timetable, json[QString("timetable")]);
    m_timetable_isSet = !json[QString("timetable")].isNull() && m_timetable_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAINAThermProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAThermProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_program_id_isSet) {
        obj.insert(QString("program_id"), ::OpenAPI::toJsonValue(m_program_id));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_timetable.size() > 0) {
        obj.insert(QString("timetable"), ::OpenAPI::toJsonValue(m_timetable));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QString OAINAThermProgram::getName() const {
    return m_name;
}
void OAINAThermProgram::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINAThermProgram::is_name_Set() const{
    return m_name_isSet;
}

bool OAINAThermProgram::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINAThermProgram::getProgramId() const {
    return m_program_id;
}
void OAINAThermProgram::setProgramId(const QString &program_id) {
    m_program_id = program_id;
    m_program_id_isSet = true;
}

bool OAINAThermProgram::is_program_id_Set() const{
    return m_program_id_isSet;
}

bool OAINAThermProgram::is_program_id_Valid() const{
    return m_program_id_isValid;
}

bool OAINAThermProgram::isSelected() const {
    return m_selected;
}
void OAINAThermProgram::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAINAThermProgram::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAINAThermProgram::is_selected_Valid() const{
    return m_selected_isValid;
}

QList<OAINATimeTableItem> OAINAThermProgram::getTimetable() const {
    return m_timetable;
}
void OAINAThermProgram::setTimetable(const QList<OAINATimeTableItem> &timetable) {
    m_timetable = timetable;
    m_timetable_isSet = true;
}

bool OAINAThermProgram::is_timetable_Set() const{
    return m_timetable_isSet;
}

bool OAINAThermProgram::is_timetable_Valid() const{
    return m_timetable_isValid;
}

QList<OAINAZone> OAINAThermProgram::getZones() const {
    return m_zones;
}
void OAINAThermProgram::setZones(const QList<OAINAZone> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAINAThermProgram::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAINAThermProgram::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAINAThermProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timetable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAThermProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
