/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAStationDataBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAStationDataBody::OAINAStationDataBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAStationDataBody::OAINAStationDataBody() {
    this->initializeModel();
}

OAINAStationDataBody::~OAINAStationDataBody() {}

void OAINAStationDataBody::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINAStationDataBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAStationDataBody::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINAStationDataBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAStationDataBody::asJsonObject() const {
    QJsonObject obj;
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAINAMain> OAINAStationDataBody::getDevices() const {
    return m_devices;
}
void OAINAStationDataBody::setDevices(const QList<OAINAMain> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAINAStationDataBody::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAINAStationDataBody::is_devices_Valid() const{
    return m_devices_isValid;
}

OAINAUser OAINAStationDataBody::getUser() const {
    return m_user;
}
void OAINAStationDataBody::setUser(const OAINAUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINAStationDataBody::is_user_Set() const{
    return m_user_isSet;
}

bool OAINAStationDataBody::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINAStationDataBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAStationDataBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
