/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAYearMonth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAYearMonth::OAINAYearMonth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAYearMonth::OAINAYearMonth() {
    this->initializeModel();
}

OAINAYearMonth::~OAINAYearMonth() {}

void OAINAYearMonth::initializeModel() {

    m_m_isSet = false;
    m_m_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAINAYearMonth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAYearMonth::fromJsonObject(QJsonObject json) {

    m_m_isValid = ::OpenAPI::fromJsonValue(m_m, json[QString("m")]);
    m_m_isSet = !json[QString("m")].isNull() && m_m_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAINAYearMonth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAYearMonth::asJsonObject() const {
    QJsonObject obj;
    if (m_m_isSet) {
        obj.insert(QString("m"), ::OpenAPI::toJsonValue(m_m));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

qint32 OAINAYearMonth::getM() const {
    return m_m;
}
void OAINAYearMonth::setM(const qint32 &m) {
    m_m = m;
    m_m_isSet = true;
}

bool OAINAYearMonth::is_m_Set() const{
    return m_m_isSet;
}

bool OAINAYearMonth::is_m_Valid() const{
    return m_m_isValid;
}

qint32 OAINAYearMonth::getY() const {
    return m_y;
}
void OAINAYearMonth::setY(const qint32 &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAINAYearMonth::is_y_Set() const{
    return m_y_isSet;
}

bool OAINAYearMonth::is_y_Valid() const{
    return m_y_isValid;
}

bool OAINAYearMonth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_m_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAYearMonth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
