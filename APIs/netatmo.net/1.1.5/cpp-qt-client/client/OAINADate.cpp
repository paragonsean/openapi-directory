/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINADate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINADate::OAINADate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINADate::OAINADate() {
    this->initializeModel();
}

OAINADate::~OAINADate() {}

void OAINADate::initializeModel() {

    m_sec_isSet = false;
    m_sec_isValid = false;

    m_usec_isSet = false;
    m_usec_isValid = false;
}

void OAINADate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINADate::fromJsonObject(QJsonObject json) {

    m_sec_isValid = ::OpenAPI::fromJsonValue(m_sec, json[QString("sec")]);
    m_sec_isSet = !json[QString("sec")].isNull() && m_sec_isValid;

    m_usec_isValid = ::OpenAPI::fromJsonValue(m_usec, json[QString("usec")]);
    m_usec_isSet = !json[QString("usec")].isNull() && m_usec_isValid;
}

QString OAINADate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINADate::asJsonObject() const {
    QJsonObject obj;
    if (m_sec_isSet) {
        obj.insert(QString("sec"), ::OpenAPI::toJsonValue(m_sec));
    }
    if (m_usec_isSet) {
        obj.insert(QString("usec"), ::OpenAPI::toJsonValue(m_usec));
    }
    return obj;
}

qint32 OAINADate::getSec() const {
    return m_sec;
}
void OAINADate::setSec(const qint32 &sec) {
    m_sec = sec;
    m_sec_isSet = true;
}

bool OAINADate::is_sec_Set() const{
    return m_sec_isSet;
}

bool OAINADate::is_sec_Valid() const{
    return m_sec_isValid;
}

qint32 OAINADate::getUsec() const {
    return m_usec;
}
void OAINADate::setUsec(const qint32 &usec) {
    m_usec = usec;
    m_usec_isSet = true;
}

bool OAINADate::is_usec_Set() const{
    return m_usec_isSet;
}

bool OAINADate::is_usec_Valid() const{
    return m_usec_isValid;
}

bool OAINADate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINADate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
