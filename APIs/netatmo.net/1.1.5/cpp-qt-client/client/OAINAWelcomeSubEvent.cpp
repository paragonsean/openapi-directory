/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeSubEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeSubEvent::OAINAWelcomeSubEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeSubEvent::OAINAWelcomeSubEvent() {
    this->initializeModel();
}

OAINAWelcomeSubEvent::~OAINAWelcomeSubEvent() {}

void OAINAWelcomeSubEvent::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_snapshot_isSet = false;
    m_snapshot_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINAWelcomeSubEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeSubEvent::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_snapshot_isValid = ::OpenAPI::fromJsonValue(m_snapshot, json[QString("snapshot")]);
    m_snapshot_isSet = !json[QString("snapshot")].isNull() && m_snapshot_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINAWelcomeSubEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeSubEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_snapshot.isSet()) {
        obj.insert(QString("snapshot"), ::OpenAPI::toJsonValue(m_snapshot));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINAWelcomeSubEvent::getId() const {
    return m_id;
}
void OAINAWelcomeSubEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeSubEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeSubEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINAWelcomeSubEvent::getMessage() const {
    return m_message;
}
void OAINAWelcomeSubEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINAWelcomeSubEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAINAWelcomeSubEvent::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAINAWelcomeSubEvent::getOffset() const {
    return m_offset;
}
void OAINAWelcomeSubEvent::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAINAWelcomeSubEvent::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAINAWelcomeSubEvent::is_offset_Valid() const{
    return m_offset_isValid;
}

OAINAWelcomeSnapshot OAINAWelcomeSubEvent::getSnapshot() const {
    return m_snapshot;
}
void OAINAWelcomeSubEvent::setSnapshot(const OAINAWelcomeSnapshot &snapshot) {
    m_snapshot = snapshot;
    m_snapshot_isSet = true;
}

bool OAINAWelcomeSubEvent::is_snapshot_Set() const{
    return m_snapshot_isSet;
}

bool OAINAWelcomeSubEvent::is_snapshot_Valid() const{
    return m_snapshot_isValid;
}

qint32 OAINAWelcomeSubEvent::getTime() const {
    return m_time;
}
void OAINAWelcomeSubEvent::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAINAWelcomeSubEvent::is_time_Set() const{
    return m_time_isSet;
}

bool OAINAWelcomeSubEvent::is_time_Valid() const{
    return m_time_isValid;
}

QString OAINAWelcomeSubEvent::getType() const {
    return m_type;
}
void OAINAWelcomeSubEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAWelcomeSubEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAWelcomeSubEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAWelcomeSubEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeSubEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
