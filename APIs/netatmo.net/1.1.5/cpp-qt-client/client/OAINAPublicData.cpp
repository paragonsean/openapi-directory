/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAPublicData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAPublicData::OAINAPublicData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAPublicData::OAINAPublicData() {
    this->initializeModel();
}

OAINAPublicData::~OAINAPublicData() {}

void OAINAPublicData::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_mark_isSet = false;
    m_mark_isValid = false;

    m_measures_isSet = false;
    m_measures_isValid = false;

    m_module_types_isSet = false;
    m_module_types_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;
}

void OAINAPublicData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAPublicData::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_mark_isValid = ::OpenAPI::fromJsonValue(m_mark, json[QString("mark")]);
    m_mark_isSet = !json[QString("mark")].isNull() && m_mark_isValid;

    m_measures_isValid = ::OpenAPI::fromJsonValue(m_measures, json[QString("measures")]);
    m_measures_isSet = !json[QString("measures")].isNull() && m_measures_isValid;

    m_module_types_isValid = ::OpenAPI::fromJsonValue(m_module_types, json[QString("module_types")]);
    m_module_types_isSet = !json[QString("module_types")].isNull() && m_module_types_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;
}

QString OAINAPublicData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAPublicData::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_mark_isSet) {
        obj.insert(QString("mark"), ::OpenAPI::toJsonValue(m_mark));
    }
    if (m_measures.size() > 0) {
        obj.insert(QString("measures"), ::OpenAPI::toJsonValue(m_measures));
    }
    if (m_module_types.size() > 0) {
        obj.insert(QString("module_types"), ::OpenAPI::toJsonValue(m_module_types));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    return obj;
}

QString OAINAPublicData::getId() const {
    return m__id;
}
void OAINAPublicData::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAPublicData::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAPublicData::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAINAPublicData::getMark() const {
    return m_mark;
}
void OAINAPublicData::setMark(const qint32 &mark) {
    m_mark = mark;
    m_mark_isSet = true;
}

bool OAINAPublicData::is_mark_Set() const{
    return m_mark_isSet;
}

bool OAINAPublicData::is_mark_Valid() const{
    return m_mark_isValid;
}

QMap<QString, OAINAMeasure> OAINAPublicData::getMeasures() const {
    return m_measures;
}
void OAINAPublicData::setMeasures(const QMap<QString, OAINAMeasure> &measures) {
    m_measures = measures;
    m_measures_isSet = true;
}

bool OAINAPublicData::is_measures_Set() const{
    return m_measures_isSet;
}

bool OAINAPublicData::is_measures_Valid() const{
    return m_measures_isValid;
}

QMap<QString, QString> OAINAPublicData::getModuleTypes() const {
    return m_module_types;
}
void OAINAPublicData::setModuleTypes(const QMap<QString, QString> &module_types) {
    m_module_types = module_types;
    m_module_types_isSet = true;
}

bool OAINAPublicData::is_module_types_Set() const{
    return m_module_types_isSet;
}

bool OAINAPublicData::is_module_types_Valid() const{
    return m_module_types_isValid;
}

QList<QString> OAINAPublicData::getModules() const {
    return m_modules;
}
void OAINAPublicData::setModules(const QList<QString> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAINAPublicData::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAINAPublicData::is_modules_Valid() const{
    return m_modules_isValid;
}

OAINAPlace OAINAPublicData::getPlace() const {
    return m_place;
}
void OAINAPublicData::setPlace(const OAINAPlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAINAPublicData::is_place_Set() const{
    return m_place_isSet;
}

bool OAINAPublicData::is_place_Valid() const{
    return m_place_isValid;
}

bool OAINAPublicData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAPublicData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
