/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeUser::OAINAWelcomeUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeUser::OAINAWelcomeUser() {
    this->initializeModel();
}

OAINAWelcomeUser::~OAINAWelcomeUser() {}

void OAINAWelcomeUser::initializeModel() {

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_reg_locale_isSet = false;
    m_reg_locale_isValid = false;
}

void OAINAWelcomeUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeUser::fromJsonObject(QJsonObject json) {

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_reg_locale_isValid = ::OpenAPI::fromJsonValue(m_reg_locale, json[QString("reg_locale")]);
    m_reg_locale_isSet = !json[QString("reg_locale")].isNull() && m_reg_locale_isValid;
}

QString OAINAWelcomeUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeUser::asJsonObject() const {
    QJsonObject obj;
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_reg_locale_isSet) {
        obj.insert(QString("reg_locale"), ::OpenAPI::toJsonValue(m_reg_locale));
    }
    return obj;
}

QString OAINAWelcomeUser::getLang() const {
    return m_lang;
}
void OAINAWelcomeUser::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAINAWelcomeUser::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAINAWelcomeUser::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAINAWelcomeUser::getRegLocale() const {
    return m_reg_locale;
}
void OAINAWelcomeUser::setRegLocale(const QString &reg_locale) {
    m_reg_locale = reg_locale;
    m_reg_locale_isSet = true;
}

bool OAINAWelcomeUser::is_reg_locale_Set() const{
    return m_reg_locale_isSet;
}

bool OAINAWelcomeUser::is_reg_locale_Valid() const{
    return m_reg_locale_isValid;
}

bool OAINAWelcomeUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
