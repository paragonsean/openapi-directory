/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAStation.h
 *
 * 
 */

#ifndef OAINAStation_H
#define OAINAStation_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINAStation : public OAIObject {
public:
    OAINAStation();
    OAINAStation(QString json);
    ~OAINAStation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getLagDown() const;
    void setLagDown(const qint32 &lag_down);
    bool is_lag_down_Set() const;
    bool is_lag_down_Valid() const;

    qint32 getLagUp() const;
    void setLagUp(const qint32 &lag_up);
    bool is_lag_up_Set() const;
    bool is_lag_up_Valid() const;

    float getOffOvershoot() const;
    void setOffOvershoot(const float &off_overshoot);
    bool is_off_overshoot_Set() const;
    bool is_off_overshoot_Valid() const;

    float getOnOvershoot() const;
    void setOnOvershoot(const float &on_overshoot);
    bool is_on_overshoot_Set() const;
    bool is_on_overshoot_Valid() const;

    qint32 getPk() const;
    void setPk(const qint32 &pk);
    bool is_pk_Set() const;
    bool is_pk_Valid() const;

    qint32 getTau() const;
    void setTau(const qint32 &tau);
    bool is_tau_Set() const;
    bool is_tau_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_lag_down;
    bool m_lag_down_isSet;
    bool m_lag_down_isValid;

    qint32 m_lag_up;
    bool m_lag_up_isSet;
    bool m_lag_up_isValid;

    float m_off_overshoot;
    bool m_off_overshoot_isSet;
    bool m_off_overshoot_isValid;

    float m_on_overshoot;
    bool m_on_overshoot_isSet;
    bool m_on_overshoot_isValid;

    qint32 m_pk;
    bool m_pk_isSet;
    bool m_pk_isValid;

    qint32 m_tau;
    bool m_tau_isSet;
    bool m_tau_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAStation)

#endif // OAINAStation_H
