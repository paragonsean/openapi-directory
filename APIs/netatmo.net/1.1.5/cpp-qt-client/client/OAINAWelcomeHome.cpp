/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeHome.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeHome::OAINAWelcomeHome(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeHome::OAINAWelcomeHome() {
    this->initializeModel();
}

OAINAWelcomeHome::~OAINAWelcomeHome() {}

void OAINAWelcomeHome::initializeModel() {

    m_cameras_isSet = false;
    m_cameras_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modules_isSet = false;
    m_modules_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_persons_isSet = false;
    m_persons_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;
}

void OAINAWelcomeHome::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeHome::fromJsonObject(QJsonObject json) {

    m_cameras_isValid = ::OpenAPI::fromJsonValue(m_cameras, json[QString("cameras")]);
    m_cameras_isSet = !json[QString("cameras")].isNull() && m_cameras_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modules_isValid = ::OpenAPI::fromJsonValue(m_modules, json[QString("modules")]);
    m_modules_isSet = !json[QString("modules")].isNull() && m_modules_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_persons_isValid = ::OpenAPI::fromJsonValue(m_persons, json[QString("persons")]);
    m_persons_isSet = !json[QString("persons")].isNull() && m_persons_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;
}

QString OAINAWelcomeHome::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeHome::asJsonObject() const {
    QJsonObject obj;
    if (m_cameras.size() > 0) {
        obj.insert(QString("cameras"), ::OpenAPI::toJsonValue(m_cameras));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modules.size() > 0) {
        obj.insert(QString("modules"), ::OpenAPI::toJsonValue(m_modules));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_persons.size() > 0) {
        obj.insert(QString("persons"), ::OpenAPI::toJsonValue(m_persons));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    return obj;
}

QList<OAINAWelcomeCamera> OAINAWelcomeHome::getCameras() const {
    return m_cameras;
}
void OAINAWelcomeHome::setCameras(const QList<OAINAWelcomeCamera> &cameras) {
    m_cameras = cameras;
    m_cameras_isSet = true;
}

bool OAINAWelcomeHome::is_cameras_Set() const{
    return m_cameras_isSet;
}

bool OAINAWelcomeHome::is_cameras_Valid() const{
    return m_cameras_isValid;
}

QList<OAINAWelcomeEvent> OAINAWelcomeHome::getEvents() const {
    return m_events;
}
void OAINAWelcomeHome::setEvents(const QList<OAINAWelcomeEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAINAWelcomeHome::is_events_Set() const{
    return m_events_isSet;
}

bool OAINAWelcomeHome::is_events_Valid() const{
    return m_events_isValid;
}

QString OAINAWelcomeHome::getId() const {
    return m_id;
}
void OAINAWelcomeHome::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeHome::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeHome::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAINAWelcomeModule> OAINAWelcomeHome::getModules() const {
    return m_modules;
}
void OAINAWelcomeHome::setModules(const QList<OAINAWelcomeModule> &modules) {
    m_modules = modules;
    m_modules_isSet = true;
}

bool OAINAWelcomeHome::is_modules_Set() const{
    return m_modules_isSet;
}

bool OAINAWelcomeHome::is_modules_Valid() const{
    return m_modules_isValid;
}

QString OAINAWelcomeHome::getName() const {
    return m_name;
}
void OAINAWelcomeHome::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINAWelcomeHome::is_name_Set() const{
    return m_name_isSet;
}

bool OAINAWelcomeHome::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINAWelcomePerson> OAINAWelcomeHome::getPersons() const {
    return m_persons;
}
void OAINAWelcomeHome::setPersons(const QList<OAINAWelcomePerson> &persons) {
    m_persons = persons;
    m_persons_isSet = true;
}

bool OAINAWelcomeHome::is_persons_Set() const{
    return m_persons_isSet;
}

bool OAINAWelcomeHome::is_persons_Valid() const{
    return m_persons_isValid;
}

OAINAWelcomePlace OAINAWelcomeHome::getPlace() const {
    return m_place;
}
void OAINAWelcomeHome::setPlace(const OAINAWelcomePlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAINAWelcomeHome::is_place_Set() const{
    return m_place_isSet;
}

bool OAINAWelcomeHome::is_place_Valid() const{
    return m_place_isValid;
}

bool OAINAWelcomeHome::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cameras.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeHome::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
