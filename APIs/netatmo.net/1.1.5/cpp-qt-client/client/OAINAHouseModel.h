/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAHouseModel.h
 *
 * 
 */

#ifndef OAINAHouseModel_H
#define OAINAHouseModel_H

#include <QJsonObject>

#include "OAINADate.h"
#include "OAINAHouseModelCa.h"
#include "OAINALinkStation.h"
#include "OAINAPidAlgo.h"
#include "OAINASimpleAlgo.h"
#include "OAINAStation.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINAHouseModelCa;
class OAINAStation;
class OAINADate;
class OAINALinkStation;
class OAINAPidAlgo;
class OAINASimpleAlgo;

class OAINAHouseModel : public OAIObject {
public:
    OAINAHouseModel();
    OAINAHouseModel(QString json);
    ~OAINAHouseModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlgoType() const;
    void setAlgoType(const QString &algo_type);
    bool is_algo_type_Set() const;
    bool is_algo_type_Valid() const;

    OAINAHouseModelCa getCa() const;
    void setCa(const OAINAHouseModelCa &ca);
    bool is_ca_Set() const;
    bool is_ca_Valid() const;

    QMap<QString, qint32> getExtTemps() const;
    void setExtTemps(const QMap<QString, qint32> &ext_temps);
    bool is_ext_temps_Set() const;
    bool is_ext_temps_Valid() const;

    bool isFirstAnticipateAvail() const;
    void setFirstAnticipateAvail(const bool &first_anticipate_avail);
    bool is_first_anticipate_avail_Set() const;
    bool is_first_anticipate_avail_Valid() const;

    bool isFirstPidAvail() const;
    void setFirstPidAvail(const bool &first_pid_avail);
    bool is_first_pid_avail_Set() const;
    bool is_first_pid_avail_Valid() const;

    OAINAStation getGefs() const;
    void setGefs(const OAINAStation &gefs);
    bool is_gefs_Set() const;
    bool is_gefs_Valid() const;

    QString getInUse() const;
    void setInUse(const QString &in_use);
    bool is_in_use_Set() const;
    bool is_in_use_Valid() const;

    OAINADate getLastComputeTry() const;
    void setLastComputeTry(const OAINADate &last_compute_try);
    bool is_last_compute_try_Set() const;
    bool is_last_compute_try_Valid() const;

    OAINALinkStation getLinkStation() const;
    void setLinkStation(const OAINALinkStation &link_station);
    bool is_link_station_Set() const;
    bool is_link_station_Valid() const;

    OAINAPidAlgo getPidAlgo() const;
    void setPidAlgo(const OAINAPidAlgo &pid_algo);
    bool is_pid_algo_Set() const;
    bool is_pid_algo_Valid() const;

    QString getPreferedAlgoType() const;
    void setPreferedAlgoType(const QString &prefered_algo_type);
    bool is_prefered_algo_type_Set() const;
    bool is_prefered_algo_type_Valid() const;

    OAINASimpleAlgo getSimpleAlgo() const;
    void setSimpleAlgo(const OAINASimpleAlgo &simple_algo);
    bool is_simple_algo_Set() const;
    bool is_simple_algo_Valid() const;

    OAINAStation getStation() const;
    void setStation(const OAINAStation &station);
    bool is_station_Set() const;
    bool is_station_Valid() const;

    bool isStationFirsttimeAnticipate() const;
    void setStationFirsttimeAnticipate(const bool &station_firsttime_anticipate);
    bool is_station_firsttime_anticipate_Set() const;
    bool is_station_firsttime_anticipate_Valid() const;

    OAINADate getTime() const;
    void setTime(const OAINADate &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    qint32 getTimeAlgoChanged() const;
    void setTimeAlgoChanged(const qint32 &time_algo_changed);
    bool is_time_algo_changed_Set() const;
    bool is_time_algo_changed_Valid() const;

    qint32 getTimePidComputed() const;
    void setTimePidComputed(const qint32 &time_pid_computed);
    bool is_time_pid_computed_Set() const;
    bool is_time_pid_computed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_algo_type;
    bool m_algo_type_isSet;
    bool m_algo_type_isValid;

    OAINAHouseModelCa m_ca;
    bool m_ca_isSet;
    bool m_ca_isValid;

    QMap<QString, qint32> m_ext_temps;
    bool m_ext_temps_isSet;
    bool m_ext_temps_isValid;

    bool m_first_anticipate_avail;
    bool m_first_anticipate_avail_isSet;
    bool m_first_anticipate_avail_isValid;

    bool m_first_pid_avail;
    bool m_first_pid_avail_isSet;
    bool m_first_pid_avail_isValid;

    OAINAStation m_gefs;
    bool m_gefs_isSet;
    bool m_gefs_isValid;

    QString m_in_use;
    bool m_in_use_isSet;
    bool m_in_use_isValid;

    OAINADate m_last_compute_try;
    bool m_last_compute_try_isSet;
    bool m_last_compute_try_isValid;

    OAINALinkStation m_link_station;
    bool m_link_station_isSet;
    bool m_link_station_isValid;

    OAINAPidAlgo m_pid_algo;
    bool m_pid_algo_isSet;
    bool m_pid_algo_isValid;

    QString m_prefered_algo_type;
    bool m_prefered_algo_type_isSet;
    bool m_prefered_algo_type_isValid;

    OAINASimpleAlgo m_simple_algo;
    bool m_simple_algo_isSet;
    bool m_simple_algo_isValid;

    OAINAStation m_station;
    bool m_station_isSet;
    bool m_station_isValid;

    bool m_station_firsttime_anticipate;
    bool m_station_firsttime_anticipate_isSet;
    bool m_station_firsttime_anticipate_isValid;

    OAINADate m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    qint32 m_time_algo_changed;
    bool m_time_algo_changed_isSet;
    bool m_time_algo_changed_isValid;

    qint32 m_time_pid_computed;
    bool m_time_pid_computed_isSet;
    bool m_time_pid_computed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAHouseModel)

#endif // OAINAHouseModel_H
