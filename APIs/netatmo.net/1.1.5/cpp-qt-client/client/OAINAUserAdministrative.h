/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAUserAdministrative.h
 *
 * 
 */

#ifndef OAINAUserAdministrative_H
#define OAINAUserAdministrative_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINAUserAdministrative : public OAIObject {
public:
    OAINAUserAdministrative();
    OAINAUserAdministrative(QString json);
    ~OAINAUserAdministrative() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getFeelLikeAlgo() const;
    void setFeelLikeAlgo(const QString &feel_like_algo);
    bool is_feel_like_algo_Set() const;
    bool is_feel_like_algo_Valid() const;

    QString getLang() const;
    void setLang(const QString &lang);
    bool is_lang_Set() const;
    bool is_lang_Valid() const;

    QString getPressureunit() const;
    void setPressureunit(const QString &pressureunit);
    bool is_pressureunit_Set() const;
    bool is_pressureunit_Valid() const;

    QString getRegLocale() const;
    void setRegLocale(const QString &reg_locale);
    bool is_reg_locale_Set() const;
    bool is_reg_locale_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    QString getWindunit() const;
    void setWindunit(const QString &windunit);
    bool is_windunit_Set() const;
    bool is_windunit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_feel_like_algo;
    bool m_feel_like_algo_isSet;
    bool m_feel_like_algo_isValid;

    QString m_lang;
    bool m_lang_isSet;
    bool m_lang_isValid;

    QString m_pressureunit;
    bool m_pressureunit_isSet;
    bool m_pressureunit_isValid;

    QString m_reg_locale;
    bool m_reg_locale_isSet;
    bool m_reg_locale_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    QString m_windunit;
    bool m_windunit_isSet;
    bool m_windunit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAUserAdministrative)

#endif // OAINAUserAdministrative_H
