/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAThermostat.h
 *
 * 
 */

#ifndef OAINAThermostat_H
#define OAINAThermostat_H

#include <QJsonObject>

#include "OAINASetpoint.h"
#include "OAINASetpointLog.h"
#include "OAINAThermMeasure.h"
#include "OAINAThermProgram.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINAThermMeasure;
class OAINASetpoint;
class OAINASetpointLog;
class OAINAThermProgram;

class OAINAThermostat : public OAIObject {
public:
    OAINAThermostat();
    OAINAThermostat(QString json);
    ~OAINAThermostat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &_id);
    bool is__id_Set() const;
    bool is__id_Valid() const;

    qint32 getBatteryPercent() const;
    void setBatteryPercent(const qint32 &battery_percent);
    bool is_battery_percent_Set() const;
    bool is_battery_percent_Valid() const;

    qint32 getBatteryVp() const;
    void setBatteryVp(const qint32 &battery_vp);
    bool is_battery_vp_Set() const;
    bool is_battery_vp_Valid() const;

    qint32 getFirmware() const;
    void setFirmware(const qint32 &firmware);
    bool is_firmware_Set() const;
    bool is_firmware_Valid() const;

    qint32 getLastMessage() const;
    void setLastMessage(const qint32 &last_message);
    bool is_last_message_Set() const;
    bool is_last_message_Valid() const;

    qint32 getLastThermSeen() const;
    void setLastThermSeen(const qint32 &last_therm_seen);
    bool is_last_therm_seen_Set() const;
    bool is_last_therm_seen_Valid() const;

    OAINAThermMeasure getMeasured() const;
    void setMeasured(const OAINAThermMeasure &measured);
    bool is_measured_Set() const;
    bool is_measured_Valid() const;

    QString getModuleName() const;
    void setModuleName(const QString &module_name);
    bool is_module_name_Set() const;
    bool is_module_name_Valid() const;

    qint32 getRfStatus() const;
    void setRfStatus(const qint32 &rf_status);
    bool is_rf_status_Set() const;
    bool is_rf_status_Valid() const;

    OAINASetpoint getSetpoint() const;
    void setSetpoint(const OAINASetpoint &setpoint);
    bool is_setpoint_Set() const;
    bool is_setpoint_Valid() const;

    QList<OAINASetpointLog> getSetpointHistory() const;
    void setSetpointHistory(const QList<OAINASetpointLog> &setpoint_history);
    bool is_setpoint_history_Set() const;
    bool is_setpoint_history_Valid() const;

    OAINASetpoint getSetpointOrder() const;
    void setSetpointOrder(const OAINASetpoint &setpoint_order);
    bool is_setpoint_order_Set() const;
    bool is_setpoint_order_Valid() const;

    qint32 getThermOrientation() const;
    void setThermOrientation(const qint32 &therm_orientation);
    bool is_therm_orientation_Set() const;
    bool is_therm_orientation_Valid() const;

    QList<OAINAThermProgram> getThermProgramList() const;
    void setThermProgramList(const QList<OAINAThermProgram> &therm_program_list);
    bool is_therm_program_list_Set() const;
    bool is_therm_program_list_Valid() const;

    qint32 getThermRelayCmd() const;
    void setThermRelayCmd(const qint32 &therm_relay_cmd);
    bool is_therm_relay_cmd_Set() const;
    bool is_therm_relay_cmd_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__id;
    bool m__id_isSet;
    bool m__id_isValid;

    qint32 m_battery_percent;
    bool m_battery_percent_isSet;
    bool m_battery_percent_isValid;

    qint32 m_battery_vp;
    bool m_battery_vp_isSet;
    bool m_battery_vp_isValid;

    qint32 m_firmware;
    bool m_firmware_isSet;
    bool m_firmware_isValid;

    qint32 m_last_message;
    bool m_last_message_isSet;
    bool m_last_message_isValid;

    qint32 m_last_therm_seen;
    bool m_last_therm_seen_isSet;
    bool m_last_therm_seen_isValid;

    OAINAThermMeasure m_measured;
    bool m_measured_isSet;
    bool m_measured_isValid;

    QString m_module_name;
    bool m_module_name_isSet;
    bool m_module_name_isValid;

    qint32 m_rf_status;
    bool m_rf_status_isSet;
    bool m_rf_status_isValid;

    OAINASetpoint m_setpoint;
    bool m_setpoint_isSet;
    bool m_setpoint_isValid;

    QList<OAINASetpointLog> m_setpoint_history;
    bool m_setpoint_history_isSet;
    bool m_setpoint_history_isValid;

    OAINASetpoint m_setpoint_order;
    bool m_setpoint_order_isSet;
    bool m_setpoint_order_isValid;

    qint32 m_therm_orientation;
    bool m_therm_orientation_isSet;
    bool m_therm_orientation_isValid;

    QList<OAINAThermProgram> m_therm_program_list;
    bool m_therm_program_list_isSet;
    bool m_therm_program_list_isValid;

    qint32 m_therm_relay_cmd;
    bool m_therm_relay_cmd_isSet;
    bool m_therm_relay_cmd_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAThermostat)

#endif // OAINAThermostat_H
