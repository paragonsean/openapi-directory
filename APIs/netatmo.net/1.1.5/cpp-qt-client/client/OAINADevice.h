/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINADevice.h
 *
 * 
 */

#ifndef OAINADevice_H
#define OAINADevice_H

#include <QJsonObject>

#include "OAINADashboardData.h"
#include "OAINADate.h"
#include "OAINAHeatingSystem.h"
#include "OAINAHouseModel.h"
#include "OAINAObject.h"
#include "OAINAPlace.h"
#include "OAINAThermProgram.h"
#include "OAIObject.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINADashboardData;
class OAINADate;
class OAINAHeatingSystem;
class OAINAHouseModel;
class OAINAPlace;
class OAINAObject;
class OAINAThermProgram;

class OAINADevice : public OAIObject {
public:
    OAINADevice();
    OAINADevice(QString json);
    ~OAINADevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &_id);
    bool is__id_Set() const;
    bool is__id_Valid() const;

    qint32 getBehavior() const;
    void setBehavior(const qint32 &behavior);
    bool is_behavior_Set() const;
    bool is_behavior_Valid() const;

    QString getCipherId() const;
    void setCipherId(const QString &cipher_id);
    bool is_cipher_id_Set() const;
    bool is_cipher_id_Valid() const;

    OAINADashboardData getDashboardData() const;
    void setDashboardData(const OAINADashboardData &dashboard_data);
    bool is_dashboard_data_Set() const;
    bool is_dashboard_data_Valid() const;

    QList<QString> getDataType() const;
    void setDataType(const QList<QString> &data_type);
    bool is_data_type_Set() const;
    bool is_data_type_Valid() const;

    OAINADate getDateSetup() const;
    void setDateSetup(const OAINADate &date_setup);
    bool is_date_setup_Set() const;
    bool is_date_setup_Valid() const;

    qint32 getFirmware() const;
    void setFirmware(const qint32 &firmware);
    bool is_firmware_Set() const;
    bool is_firmware_Valid() const;

    bool isFirstPidAvail() const;
    void setFirstPidAvail(const bool &first_pid_avail);
    bool is_first_pid_avail_Set() const;
    bool is_first_pid_avail_Valid() const;

    OAINAHeatingSystem getHeatingSystem() const;
    void setHeatingSystem(const OAINAHeatingSystem &heating_system);
    bool is_heating_system_Set() const;
    bool is_heating_system_Valid() const;

    OAINAHouseModel getHouseModel() const;
    void setHouseModel(const OAINAHouseModel &house_model);
    bool is_house_model_Set() const;
    bool is_house_model_Valid() const;

    qint32 getHwVersion() const;
    void setHwVersion(const qint32 &hw_version);
    bool is_hw_version_Set() const;
    bool is_hw_version_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    qint32 getLastFwUpdate() const;
    void setLastFwUpdate(const qint32 &last_fw_update);
    bool is_last_fw_update_Set() const;
    bool is_last_fw_update_Valid() const;

    qint32 getLastRadioStore() const;
    void setLastRadioStore(const qint32 &last_radio_store);
    bool is_last_radio_store_Set() const;
    bool is_last_radio_store_Valid() const;

    qint32 getLastStatusStore() const;
    void setLastStatusStore(const qint32 &last_status_store);
    bool is_last_status_store_Set() const;
    bool is_last_status_store_Valid() const;

    qint32 getLastUpgrade() const;
    void setLastUpgrade(const qint32 &last_upgrade);
    bool is_last_upgrade_Set() const;
    bool is_last_upgrade_Valid() const;

    QString getModuleName() const;
    void setModuleName(const QString &module_name);
    bool is_module_name_Set() const;
    bool is_module_name_Valid() const;

    QList<QString> getModules() const;
    void setModules(const QList<QString> &modules);
    bool is_modules_Set() const;
    bool is_modules_Valid() const;

    bool isNewFeatureAvail() const;
    void setNewFeatureAvail(const bool &new_feature_avail);
    bool is_new_feature_avail_Set() const;
    bool is_new_feature_avail_Valid() const;

    OAINAPlace getPlace() const;
    void setPlace(const OAINAPlace &place);
    bool is_place_Set() const;
    bool is_place_Valid() const;

    bool isPublicExtData() const;
    void setPublicExtData(const bool &public_ext_data);
    bool is_public_ext_data_Set() const;
    bool is_public_ext_data_Valid() const;

    OAIObject getSetpoint() const;
    void setSetpoint(const OAIObject &setpoint);
    bool is_setpoint_Set() const;
    bool is_setpoint_Valid() const;

    qint32 getSetpointDefaultDuration() const;
    void setSetpointDefaultDuration(const qint32 &setpoint_default_duration);
    bool is_setpoint_default_duration_Set() const;
    bool is_setpoint_default_duration_Valid() const;

    QMap<QString, QList<OAINAObject>> getSetpointOrder() const;
    void setSetpointOrder(const QMap<QString, QList<OAINAObject>> &setpoint_order);
    bool is_setpoint_order_Set() const;
    bool is_setpoint_order_Valid() const;

    QString getStationName() const;
    void setStationName(const QString &station_name);
    bool is_station_name_Set() const;
    bool is_station_name_Valid() const;

    QMap<QString, OAINAThermProgram> getThermProgram() const;
    void setThermProgram(const QMap<QString, OAINAThermProgram> &therm_program);
    bool is_therm_program_Set() const;
    bool is_therm_program_Valid() const;

    QMap<QString, QList<OAINAThermProgram>> getThermProgramBackup() const;
    void setThermProgramBackup(const QMap<QString, QList<OAINAThermProgram>> &therm_program_backup);
    bool is_therm_program_backup_Set() const;
    bool is_therm_program_backup_Valid() const;

    QMap<QString, QList<OAINAObject>> getThermProgramOrder() const;
    void setThermProgramOrder(const QMap<QString, QList<OAINAObject>> &therm_program_order);
    bool is_therm_program_order_Set() const;
    bool is_therm_program_order_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isUdpConn() const;
    void setUdpConn(const bool &udp_conn);
    bool is_udp_conn_Set() const;
    bool is_udp_conn_Valid() const;

    QList<QString> getUserOwner() const;
    void setUserOwner(const QList<QString> &user_owner);
    bool is_user_owner_Set() const;
    bool is_user_owner_Valid() const;

    qint32 getWifiStatus() const;
    void setWifiStatus(const qint32 &wifi_status);
    bool is_wifi_status_Set() const;
    bool is_wifi_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__id;
    bool m__id_isSet;
    bool m__id_isValid;

    qint32 m_behavior;
    bool m_behavior_isSet;
    bool m_behavior_isValid;

    QString m_cipher_id;
    bool m_cipher_id_isSet;
    bool m_cipher_id_isValid;

    OAINADashboardData m_dashboard_data;
    bool m_dashboard_data_isSet;
    bool m_dashboard_data_isValid;

    QList<QString> m_data_type;
    bool m_data_type_isSet;
    bool m_data_type_isValid;

    OAINADate m_date_setup;
    bool m_date_setup_isSet;
    bool m_date_setup_isValid;

    qint32 m_firmware;
    bool m_firmware_isSet;
    bool m_firmware_isValid;

    bool m_first_pid_avail;
    bool m_first_pid_avail_isSet;
    bool m_first_pid_avail_isValid;

    OAINAHeatingSystem m_heating_system;
    bool m_heating_system_isSet;
    bool m_heating_system_isValid;

    OAINAHouseModel m_house_model;
    bool m_house_model_isSet;
    bool m_house_model_isValid;

    qint32 m_hw_version;
    bool m_hw_version_isSet;
    bool m_hw_version_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    qint32 m_last_fw_update;
    bool m_last_fw_update_isSet;
    bool m_last_fw_update_isValid;

    qint32 m_last_radio_store;
    bool m_last_radio_store_isSet;
    bool m_last_radio_store_isValid;

    qint32 m_last_status_store;
    bool m_last_status_store_isSet;
    bool m_last_status_store_isValid;

    qint32 m_last_upgrade;
    bool m_last_upgrade_isSet;
    bool m_last_upgrade_isValid;

    QString m_module_name;
    bool m_module_name_isSet;
    bool m_module_name_isValid;

    QList<QString> m_modules;
    bool m_modules_isSet;
    bool m_modules_isValid;

    bool m_new_feature_avail;
    bool m_new_feature_avail_isSet;
    bool m_new_feature_avail_isValid;

    OAINAPlace m_place;
    bool m_place_isSet;
    bool m_place_isValid;

    bool m_public_ext_data;
    bool m_public_ext_data_isSet;
    bool m_public_ext_data_isValid;

    OAIObject m_setpoint;
    bool m_setpoint_isSet;
    bool m_setpoint_isValid;

    qint32 m_setpoint_default_duration;
    bool m_setpoint_default_duration_isSet;
    bool m_setpoint_default_duration_isValid;

    QMap<QString, QList<OAINAObject>> m_setpoint_order;
    bool m_setpoint_order_isSet;
    bool m_setpoint_order_isValid;

    QString m_station_name;
    bool m_station_name_isSet;
    bool m_station_name_isValid;

    QMap<QString, OAINAThermProgram> m_therm_program;
    bool m_therm_program_isSet;
    bool m_therm_program_isValid;

    QMap<QString, QList<OAINAThermProgram>> m_therm_program_backup;
    bool m_therm_program_backup_isSet;
    bool m_therm_program_backup_isValid;

    QMap<QString, QList<OAINAObject>> m_therm_program_order;
    bool m_therm_program_order_isSet;
    bool m_therm_program_order_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_udp_conn;
    bool m_udp_conn_isSet;
    bool m_udp_conn_isValid;

    QList<QString> m_user_owner;
    bool m_user_owner_isSet;
    bool m_user_owner_isValid;

    qint32 m_wifi_status;
    bool m_wifi_status_isSet;
    bool m_wifi_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINADevice)

#endif // OAINADevice_H
