/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAHeatingSystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAHeatingSystem::OAINAHeatingSystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAHeatingSystem::OAINAHeatingSystem() {
    this->initializeModel();
}

OAINAHeatingSystem::~OAINAHeatingSystem() {}

void OAINAHeatingSystem::initializeModel() {

    m_heating_energy_isSet = false;
    m_heating_energy_isValid = false;

    m_heating_system_window_seen_isSet = false;
    m_heating_system_window_seen_isValid = false;
}

void OAINAHeatingSystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAHeatingSystem::fromJsonObject(QJsonObject json) {

    m_heating_energy_isValid = ::OpenAPI::fromJsonValue(m_heating_energy, json[QString("heating_energy")]);
    m_heating_energy_isSet = !json[QString("heating_energy")].isNull() && m_heating_energy_isValid;

    m_heating_system_window_seen_isValid = ::OpenAPI::fromJsonValue(m_heating_system_window_seen, json[QString("heating_system_window_seen")]);
    m_heating_system_window_seen_isSet = !json[QString("heating_system_window_seen")].isNull() && m_heating_system_window_seen_isValid;
}

QString OAINAHeatingSystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAHeatingSystem::asJsonObject() const {
    QJsonObject obj;
    if (m_heating_energy_isSet) {
        obj.insert(QString("heating_energy"), ::OpenAPI::toJsonValue(m_heating_energy));
    }
    if (m_heating_system_window_seen_isSet) {
        obj.insert(QString("heating_system_window_seen"), ::OpenAPI::toJsonValue(m_heating_system_window_seen));
    }
    return obj;
}

QString OAINAHeatingSystem::getHeatingEnergy() const {
    return m_heating_energy;
}
void OAINAHeatingSystem::setHeatingEnergy(const QString &heating_energy) {
    m_heating_energy = heating_energy;
    m_heating_energy_isSet = true;
}

bool OAINAHeatingSystem::is_heating_energy_Set() const{
    return m_heating_energy_isSet;
}

bool OAINAHeatingSystem::is_heating_energy_Valid() const{
    return m_heating_energy_isValid;
}

bool OAINAHeatingSystem::isHeatingSystemWindowSeen() const {
    return m_heating_system_window_seen;
}
void OAINAHeatingSystem::setHeatingSystemWindowSeen(const bool &heating_system_window_seen) {
    m_heating_system_window_seen = heating_system_window_seen;
    m_heating_system_window_seen_isSet = true;
}

bool OAINAHeatingSystem::is_heating_system_window_seen_Set() const{
    return m_heating_system_window_seen_isSet;
}

bool OAINAHeatingSystem::is_heating_system_window_seen_Valid() const{
    return m_heating_system_window_seen_isValid;
}

bool OAINAHeatingSystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_heating_energy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heating_system_window_seen_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAHeatingSystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
