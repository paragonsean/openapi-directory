/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicApi_H
#define OAI_OAIPublicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINAMeasureResponse.h"
#include "OAINAPublicDataResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicApi : public QObject {
    Q_OBJECT

public:
    OAIPublicApi(const int timeOut = 0);
    ~OAIPublicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  scale QString [required]
    * @param[in]  type QList<QString> [required]
    * @param[in]  module_id QString [optional]
    * @param[in]  date_begin qint32 [optional]
    * @param[in]  date_end QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  optimize bool [optional]
    * @param[in]  real_time bool [optional]
    */
    virtual void getmeasure(const QString &device_id, const QString &scale, const QList<QString> &type, const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &date_begin = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &date_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &optimize = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &real_time = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  lat_ne qint32 [required]
    * @param[in]  lon_ne qint32 [required]
    * @param[in]  lat_sw qint32 [required]
    * @param[in]  lon_sw qint32 [required]
    * @param[in]  required_data QList<QString> [optional]
    * @param[in]  filter bool [optional]
    */
    virtual void getpublicdata(const qint32 &lat_ne, const qint32 &lon_ne, const qint32 &lat_sw, const qint32 &lon_sw, const ::OpenAPI::OptionalParam<QList<QString>> &required_data = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &filter = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getmeasureCallback(OAIHttpRequestWorker *worker);
    void getpublicdataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getmeasureSignal(OAINAMeasureResponse summary);
    void getpublicdataSignal(OAINAPublicDataResponse summary);


    void getmeasureSignalFull(OAIHttpRequestWorker *worker, OAINAMeasureResponse summary);
    void getpublicdataSignalFull(OAIHttpRequestWorker *worker, OAINAPublicDataResponse summary);

    Q_DECL_DEPRECATED_X("Use getmeasureSignalError() instead")
    void getmeasureSignalE(OAINAMeasureResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getmeasureSignalError(OAINAMeasureResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpublicdataSignalError() instead")
    void getpublicdataSignalE(OAINAPublicDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getpublicdataSignalError(OAINAPublicDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getmeasureSignalErrorFull() instead")
    void getmeasureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getmeasureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpublicdataSignalErrorFull() instead")
    void getpublicdataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpublicdataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
