/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINAMeasure.h
 *
 * 
 */

#ifndef OAINAMeasure_H
#define OAINAMeasure_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINAMeasure : public OAIObject {
public:
    OAINAMeasure();
    OAINAMeasure(QString json);
    ~OAINAMeasure() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getGustAngle() const;
    void setGustAngle(const double &gust_angle);
    bool is_gust_angle_Set() const;
    bool is_gust_angle_Valid() const;

    double getGustStrength() const;
    void setGustStrength(const double &gust_strength);
    bool is_gust_strength_Set() const;
    bool is_gust_strength_Valid() const;

    double getRain24h() const;
    void setRain24h(const double &rain_24h);
    bool is_rain_24h_Set() const;
    bool is_rain_24h_Valid() const;

    double getRain60min() const;
    void setRain60min(const double &rain_60min);
    bool is_rain_60min_Set() const;
    bool is_rain_60min_Valid() const;

    double getRainLive() const;
    void setRainLive(const double &rain_live);
    bool is_rain_live_Set() const;
    bool is_rain_live_Valid() const;

    qint64 getRainUtc() const;
    void setRainUtc(const qint64 &rain_utc);
    bool is_rain_utc_Set() const;
    bool is_rain_utc_Valid() const;

    QMap<QString, QList<double>> getRes() const;
    void setRes(const QMap<QString, QList<double>> &res);
    bool is_res_Set() const;
    bool is_res_Valid() const;

    QList<QString> getType() const;
    void setType(const QList<QString> &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    double getWindAngle() const;
    void setWindAngle(const double &wind_angle);
    bool is_wind_angle_Set() const;
    bool is_wind_angle_Valid() const;

    double getWindStrength() const;
    void setWindStrength(const double &wind_strength);
    bool is_wind_strength_Set() const;
    bool is_wind_strength_Valid() const;

    qint64 getWindTimeutc() const;
    void setWindTimeutc(const qint64 &wind_timeutc);
    bool is_wind_timeutc_Set() const;
    bool is_wind_timeutc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_gust_angle;
    bool m_gust_angle_isSet;
    bool m_gust_angle_isValid;

    double m_gust_strength;
    bool m_gust_strength_isSet;
    bool m_gust_strength_isValid;

    double m_rain_24h;
    bool m_rain_24h_isSet;
    bool m_rain_24h_isValid;

    double m_rain_60min;
    bool m_rain_60min_isSet;
    bool m_rain_60min_isValid;

    double m_rain_live;
    bool m_rain_live_isSet;
    bool m_rain_live_isValid;

    qint64 m_rain_utc;
    bool m_rain_utc_isSet;
    bool m_rain_utc_isValid;

    QMap<QString, QList<double>> m_res;
    bool m_res_isSet;
    bool m_res_isValid;

    QList<QString> m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    double m_wind_angle;
    bool m_wind_angle_isSet;
    bool m_wind_angle_isValid;

    double m_wind_strength;
    bool m_wind_strength_isSet;
    bool m_wind_strength_isValid;

    qint64 m_wind_timeutc;
    bool m_wind_timeutc_isSet;
    bool m_wind_timeutc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINAMeasure)

#endif // OAINAMeasure_H
