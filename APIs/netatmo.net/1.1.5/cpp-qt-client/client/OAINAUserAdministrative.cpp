/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAUserAdministrative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAUserAdministrative::OAINAUserAdministrative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAUserAdministrative::OAINAUserAdministrative() {
    this->initializeModel();
}

OAINAUserAdministrative::~OAINAUserAdministrative() {}

void OAINAUserAdministrative::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_feel_like_algo_isSet = false;
    m_feel_like_algo_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_pressureunit_isSet = false;
    m_pressureunit_isValid = false;

    m_reg_locale_isSet = false;
    m_reg_locale_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_windunit_isSet = false;
    m_windunit_isValid = false;
}

void OAINAUserAdministrative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAUserAdministrative::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_feel_like_algo_isValid = ::OpenAPI::fromJsonValue(m_feel_like_algo, json[QString("feel_like_algo")]);
    m_feel_like_algo_isSet = !json[QString("feel_like_algo")].isNull() && m_feel_like_algo_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_pressureunit_isValid = ::OpenAPI::fromJsonValue(m_pressureunit, json[QString("pressureunit")]);
    m_pressureunit_isSet = !json[QString("pressureunit")].isNull() && m_pressureunit_isValid;

    m_reg_locale_isValid = ::OpenAPI::fromJsonValue(m_reg_locale, json[QString("reg_locale")]);
    m_reg_locale_isSet = !json[QString("reg_locale")].isNull() && m_reg_locale_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_windunit_isValid = ::OpenAPI::fromJsonValue(m_windunit, json[QString("windunit")]);
    m_windunit_isSet = !json[QString("windunit")].isNull() && m_windunit_isValid;
}

QString OAINAUserAdministrative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAUserAdministrative::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_feel_like_algo_isSet) {
        obj.insert(QString("feel_like_algo"), ::OpenAPI::toJsonValue(m_feel_like_algo));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_pressureunit_isSet) {
        obj.insert(QString("pressureunit"), ::OpenAPI::toJsonValue(m_pressureunit));
    }
    if (m_reg_locale_isSet) {
        obj.insert(QString("reg_locale"), ::OpenAPI::toJsonValue(m_reg_locale));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_windunit_isSet) {
        obj.insert(QString("windunit"), ::OpenAPI::toJsonValue(m_windunit));
    }
    return obj;
}

QString OAINAUserAdministrative::getCountry() const {
    return m_country;
}
void OAINAUserAdministrative::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINAUserAdministrative::is_country_Set() const{
    return m_country_isSet;
}

bool OAINAUserAdministrative::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINAUserAdministrative::getFeelLikeAlgo() const {
    return m_feel_like_algo;
}
void OAINAUserAdministrative::setFeelLikeAlgo(const QString &feel_like_algo) {
    m_feel_like_algo = feel_like_algo;
    m_feel_like_algo_isSet = true;
}

bool OAINAUserAdministrative::is_feel_like_algo_Set() const{
    return m_feel_like_algo_isSet;
}

bool OAINAUserAdministrative::is_feel_like_algo_Valid() const{
    return m_feel_like_algo_isValid;
}

QString OAINAUserAdministrative::getLang() const {
    return m_lang;
}
void OAINAUserAdministrative::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAINAUserAdministrative::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAINAUserAdministrative::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAINAUserAdministrative::getPressureunit() const {
    return m_pressureunit;
}
void OAINAUserAdministrative::setPressureunit(const QString &pressureunit) {
    m_pressureunit = pressureunit;
    m_pressureunit_isSet = true;
}

bool OAINAUserAdministrative::is_pressureunit_Set() const{
    return m_pressureunit_isSet;
}

bool OAINAUserAdministrative::is_pressureunit_Valid() const{
    return m_pressureunit_isValid;
}

QString OAINAUserAdministrative::getRegLocale() const {
    return m_reg_locale;
}
void OAINAUserAdministrative::setRegLocale(const QString &reg_locale) {
    m_reg_locale = reg_locale;
    m_reg_locale_isSet = true;
}

bool OAINAUserAdministrative::is_reg_locale_Set() const{
    return m_reg_locale_isSet;
}

bool OAINAUserAdministrative::is_reg_locale_Valid() const{
    return m_reg_locale_isValid;
}

QString OAINAUserAdministrative::getUnit() const {
    return m_unit;
}
void OAINAUserAdministrative::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAINAUserAdministrative::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAINAUserAdministrative::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAINAUserAdministrative::getWindunit() const {
    return m_windunit;
}
void OAINAUserAdministrative::setWindunit(const QString &windunit) {
    m_windunit = windunit;
    m_windunit_isSet = true;
}

bool OAINAUserAdministrative::is_windunit_Set() const{
    return m_windunit_isSet;
}

bool OAINAUserAdministrative::is_windunit_Valid() const{
    return m_windunit_isValid;
}

bool OAINAUserAdministrative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feel_like_algo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pressureunit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windunit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAUserAdministrative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
