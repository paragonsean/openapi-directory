/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAStationModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAStationModule::OAINAStationModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAStationModule::OAINAStationModule() {
    this->initializeModel();
}

OAINAStationModule::~OAINAStationModule() {}

void OAINAStationModule::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_battery_percent_isSet = false;
    m_battery_percent_isValid = false;

    m_battery_vp_isSet = false;
    m_battery_vp_isValid = false;

    m_dashboard_data_isSet = false;
    m_dashboard_data_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_last_setup_isSet = false;
    m_last_setup_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_reachable_isSet = false;
    m_reachable_isValid = false;

    m_rf_status_isSet = false;
    m_rf_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINAStationModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAStationModule::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_battery_percent_isValid = ::OpenAPI::fromJsonValue(m_battery_percent, json[QString("battery_percent")]);
    m_battery_percent_isSet = !json[QString("battery_percent")].isNull() && m_battery_percent_isValid;

    m_battery_vp_isValid = ::OpenAPI::fromJsonValue(m_battery_vp, json[QString("battery_vp")]);
    m_battery_vp_isSet = !json[QString("battery_vp")].isNull() && m_battery_vp_isValid;

    m_dashboard_data_isValid = ::OpenAPI::fromJsonValue(m_dashboard_data, json[QString("dashboard_data")]);
    m_dashboard_data_isSet = !json[QString("dashboard_data")].isNull() && m_dashboard_data_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("data_type")]);
    m_data_type_isSet = !json[QString("data_type")].isNull() && m_data_type_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("last_message")]);
    m_last_message_isSet = !json[QString("last_message")].isNull() && m_last_message_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("last_seen")]);
    m_last_seen_isSet = !json[QString("last_seen")].isNull() && m_last_seen_isValid;

    m_last_setup_isValid = ::OpenAPI::fromJsonValue(m_last_setup, json[QString("last_setup")]);
    m_last_setup_isSet = !json[QString("last_setup")].isNull() && m_last_setup_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("module_name")]);
    m_module_name_isSet = !json[QString("module_name")].isNull() && m_module_name_isValid;

    m_reachable_isValid = ::OpenAPI::fromJsonValue(m_reachable, json[QString("reachable")]);
    m_reachable_isSet = !json[QString("reachable")].isNull() && m_reachable_isValid;

    m_rf_status_isValid = ::OpenAPI::fromJsonValue(m_rf_status, json[QString("rf_status")]);
    m_rf_status_isSet = !json[QString("rf_status")].isNull() && m_rf_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINAStationModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAStationModule::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_battery_percent_isSet) {
        obj.insert(QString("battery_percent"), ::OpenAPI::toJsonValue(m_battery_percent));
    }
    if (m_battery_vp_isSet) {
        obj.insert(QString("battery_vp"), ::OpenAPI::toJsonValue(m_battery_vp));
    }
    if (m_dashboard_data.isSet()) {
        obj.insert(QString("dashboard_data"), ::OpenAPI::toJsonValue(m_dashboard_data));
    }
    if (m_data_type.size() > 0) {
        obj.insert(QString("data_type"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_last_message_isSet) {
        obj.insert(QString("last_message"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("last_seen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_last_setup_isSet) {
        obj.insert(QString("last_setup"), ::OpenAPI::toJsonValue(m_last_setup));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("module_name"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_reachable_isSet) {
        obj.insert(QString("reachable"), ::OpenAPI::toJsonValue(m_reachable));
    }
    if (m_rf_status_isSet) {
        obj.insert(QString("rf_status"), ::OpenAPI::toJsonValue(m_rf_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAINAStationModule::getId() const {
    return m__id;
}
void OAINAStationModule::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAINAStationModule::is__id_Set() const{
    return m__id_isSet;
}

bool OAINAStationModule::is__id_Valid() const{
    return m__id_isValid;
}

qint32 OAINAStationModule::getBatteryPercent() const {
    return m_battery_percent;
}
void OAINAStationModule::setBatteryPercent(const qint32 &battery_percent) {
    m_battery_percent = battery_percent;
    m_battery_percent_isSet = true;
}

bool OAINAStationModule::is_battery_percent_Set() const{
    return m_battery_percent_isSet;
}

bool OAINAStationModule::is_battery_percent_Valid() const{
    return m_battery_percent_isValid;
}

qint32 OAINAStationModule::getBatteryVp() const {
    return m_battery_vp;
}
void OAINAStationModule::setBatteryVp(const qint32 &battery_vp) {
    m_battery_vp = battery_vp;
    m_battery_vp_isSet = true;
}

bool OAINAStationModule::is_battery_vp_Set() const{
    return m_battery_vp_isSet;
}

bool OAINAStationModule::is_battery_vp_Valid() const{
    return m_battery_vp_isValid;
}

OAINADashboardData OAINAStationModule::getDashboardData() const {
    return m_dashboard_data;
}
void OAINAStationModule::setDashboardData(const OAINADashboardData &dashboard_data) {
    m_dashboard_data = dashboard_data;
    m_dashboard_data_isSet = true;
}

bool OAINAStationModule::is_dashboard_data_Set() const{
    return m_dashboard_data_isSet;
}

bool OAINAStationModule::is_dashboard_data_Valid() const{
    return m_dashboard_data_isValid;
}

QList<QString> OAINAStationModule::getDataType() const {
    return m_data_type;
}
void OAINAStationModule::setDataType(const QList<QString> &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAINAStationModule::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAINAStationModule::is_data_type_Valid() const{
    return m_data_type_isValid;
}

qint32 OAINAStationModule::getFirmware() const {
    return m_firmware;
}
void OAINAStationModule::setFirmware(const qint32 &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAINAStationModule::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAINAStationModule::is_firmware_Valid() const{
    return m_firmware_isValid;
}

qint32 OAINAStationModule::getLastMessage() const {
    return m_last_message;
}
void OAINAStationModule::setLastMessage(const qint32 &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAINAStationModule::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAINAStationModule::is_last_message_Valid() const{
    return m_last_message_isValid;
}

qint32 OAINAStationModule::getLastSeen() const {
    return m_last_seen;
}
void OAINAStationModule::setLastSeen(const qint32 &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAINAStationModule::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAINAStationModule::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

qint32 OAINAStationModule::getLastSetup() const {
    return m_last_setup;
}
void OAINAStationModule::setLastSetup(const qint32 &last_setup) {
    m_last_setup = last_setup;
    m_last_setup_isSet = true;
}

bool OAINAStationModule::is_last_setup_Set() const{
    return m_last_setup_isSet;
}

bool OAINAStationModule::is_last_setup_Valid() const{
    return m_last_setup_isValid;
}

QString OAINAStationModule::getModuleName() const {
    return m_module_name;
}
void OAINAStationModule::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAINAStationModule::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAINAStationModule::is_module_name_Valid() const{
    return m_module_name_isValid;
}

bool OAINAStationModule::isReachable() const {
    return m_reachable;
}
void OAINAStationModule::setReachable(const bool &reachable) {
    m_reachable = reachable;
    m_reachable_isSet = true;
}

bool OAINAStationModule::is_reachable_Set() const{
    return m_reachable_isSet;
}

bool OAINAStationModule::is_reachable_Valid() const{
    return m_reachable_isValid;
}

qint32 OAINAStationModule::getRfStatus() const {
    return m_rf_status;
}
void OAINAStationModule::setRfStatus(const qint32 &rf_status) {
    m_rf_status = rf_status;
    m_rf_status_isSet = true;
}

bool OAINAStationModule::is_rf_status_Set() const{
    return m_rf_status_isSet;
}

bool OAINAStationModule::is_rf_status_Valid() const{
    return m_rf_status_isValid;
}

QString OAINAStationModule::getType() const {
    return m_type;
}
void OAINAStationModule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAStationModule::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAStationModule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINAStationModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_vp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAStationModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
