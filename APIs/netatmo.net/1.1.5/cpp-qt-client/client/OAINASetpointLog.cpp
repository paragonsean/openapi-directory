/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINASetpointLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINASetpointLog::OAINASetpointLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINASetpointLog::OAINASetpointLog() {
    this->initializeModel();
}

OAINASetpointLog::~OAINASetpointLog() {}

void OAINASetpointLog::initializeModel() {

    m_setpoint_isSet = false;
    m_setpoint_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAINASetpointLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINASetpointLog::fromJsonObject(QJsonObject json) {

    m_setpoint_isValid = ::OpenAPI::fromJsonValue(m_setpoint, json[QString("setpoint")]);
    m_setpoint_isSet = !json[QString("setpoint")].isNull() && m_setpoint_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAINASetpointLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINASetpointLog::asJsonObject() const {
    QJsonObject obj;
    if (m_setpoint.isSet()) {
        obj.insert(QString("setpoint"), ::OpenAPI::toJsonValue(m_setpoint));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAINASetpoint OAINASetpointLog::getSetpoint() const {
    return m_setpoint;
}
void OAINASetpointLog::setSetpoint(const OAINASetpoint &setpoint) {
    m_setpoint = setpoint;
    m_setpoint_isSet = true;
}

bool OAINASetpointLog::is_setpoint_Set() const{
    return m_setpoint_isSet;
}

bool OAINASetpointLog::is_setpoint_Valid() const{
    return m_setpoint_isValid;
}

qint64 OAINASetpointLog::getTimestamp() const {
    return m_timestamp;
}
void OAINASetpointLog::setTimestamp(const qint64 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAINASetpointLog::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAINASetpointLog::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAINASetpointLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_setpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINASetpointLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
