/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWelcomeApi_H
#define OAI_OAIWelcomeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINAWelcomeEventResponse.h"
#include "OAINAWelcomeHomeDataResponse.h"
#include "OAINAWelcomePersonsAwayResponse.h"
#include "OAINAWelcomePersonsHomeResponse.h"
#include "OAINAWelcomeWebhookResponse.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWelcomeApi : public QObject {
    Q_OBJECT

public:
    OAIWelcomeApi(const int timeOut = 0);
    ~OAIWelcomeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  app_type QString [required]
    */
    virtual void addwebhook(const QString &url, const QString &app_type);

    /**
    * @param[in]  app_type QString [required]
    */
    virtual void dropwebhook(const QString &app_type);

    /**
    * @param[in]  image_id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getcamerapicture(const QString &image_id, const QString &key);

    /**
    * @param[in]  home_id QString [required]
    * @param[in]  event_id QString [required]
    */
    virtual void geteventsuntil(const QString &home_id, const QString &event_id);

    /**
    * @param[in]  home_id QString [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void gethomedata(const ::OpenAPI::OptionalParam<QString> &home_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  home_id QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getlasteventof(const QString &home_id, const QString &person_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  home_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  size qint32 [optional]
    */
    virtual void getnextevents(const QString &home_id, const QString &event_id, const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  home_id QString [required]
    * @param[in]  person_id QString [optional]
    */
    virtual void setpersonsaway(const QString &home_id, const ::OpenAPI::OptionalParam<QString> &person_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  home_id QString [required]
    * @param[in]  person_ids QString [required]
    */
    virtual void setpersonshome(const QString &home_id, const QString &person_ids);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addwebhookCallback(OAIHttpRequestWorker *worker);
    void dropwebhookCallback(OAIHttpRequestWorker *worker);
    void getcamerapictureCallback(OAIHttpRequestWorker *worker);
    void geteventsuntilCallback(OAIHttpRequestWorker *worker);
    void gethomedataCallback(OAIHttpRequestWorker *worker);
    void getlasteventofCallback(OAIHttpRequestWorker *worker);
    void getnexteventsCallback(OAIHttpRequestWorker *worker);
    void setpersonsawayCallback(OAIHttpRequestWorker *worker);
    void setpersonshomeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addwebhookSignal(OAINAWelcomeWebhookResponse summary);
    void dropwebhookSignal(OAINAWelcomeWebhookResponse summary);
    void getcamerapictureSignal(QByteArray summary);
    void geteventsuntilSignal(OAINAWelcomeEventResponse summary);
    void gethomedataSignal(OAINAWelcomeHomeDataResponse summary);
    void getlasteventofSignal(OAINAWelcomeEventResponse summary);
    void getnexteventsSignal(OAINAWelcomeEventResponse summary);
    void setpersonsawaySignal(OAINAWelcomePersonsAwayResponse summary);
    void setpersonshomeSignal(OAINAWelcomePersonsHomeResponse summary);


    void addwebhookSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeWebhookResponse summary);
    void dropwebhookSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeWebhookResponse summary);
    void getcamerapictureSignalFull(OAIHttpRequestWorker *worker, QByteArray summary);
    void geteventsuntilSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeEventResponse summary);
    void gethomedataSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeHomeDataResponse summary);
    void getlasteventofSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeEventResponse summary);
    void getnexteventsSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomeEventResponse summary);
    void setpersonsawaySignalFull(OAIHttpRequestWorker *worker, OAINAWelcomePersonsAwayResponse summary);
    void setpersonshomeSignalFull(OAIHttpRequestWorker *worker, OAINAWelcomePersonsHomeResponse summary);

    Q_DECL_DEPRECATED_X("Use addwebhookSignalError() instead")
    void addwebhookSignalE(OAINAWelcomeWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addwebhookSignalError(OAINAWelcomeWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dropwebhookSignalError() instead")
    void dropwebhookSignalE(OAINAWelcomeWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dropwebhookSignalError(OAINAWelcomeWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getcamerapictureSignalError() instead")
    void getcamerapictureSignalE(QByteArray summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getcamerapictureSignalError(QByteArray summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geteventsuntilSignalError() instead")
    void geteventsuntilSignalE(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geteventsuntilSignalError(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gethomedataSignalError() instead")
    void gethomedataSignalE(OAINAWelcomeHomeDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gethomedataSignalError(OAINAWelcomeHomeDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getlasteventofSignalError() instead")
    void getlasteventofSignalE(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getlasteventofSignalError(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getnexteventsSignalError() instead")
    void getnexteventsSignalE(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getnexteventsSignalError(OAINAWelcomeEventResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setpersonsawaySignalError() instead")
    void setpersonsawaySignalE(OAINAWelcomePersonsAwayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setpersonsawaySignalError(OAINAWelcomePersonsAwayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setpersonshomeSignalError() instead")
    void setpersonshomeSignalE(OAINAWelcomePersonsHomeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setpersonshomeSignalError(OAINAWelcomePersonsHomeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addwebhookSignalErrorFull() instead")
    void addwebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addwebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dropwebhookSignalErrorFull() instead")
    void dropwebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dropwebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getcamerapictureSignalErrorFull() instead")
    void getcamerapictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getcamerapictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geteventsuntilSignalErrorFull() instead")
    void geteventsuntilSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geteventsuntilSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gethomedataSignalErrorFull() instead")
    void gethomedataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gethomedataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getlasteventofSignalErrorFull() instead")
    void getlasteventofSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getlasteventofSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getnexteventsSignalErrorFull() instead")
    void getnexteventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getnexteventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setpersonsawaySignalErrorFull() instead")
    void setpersonsawaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setpersonsawaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setpersonshomeSignalErrorFull() instead")
    void setpersonshomeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setpersonshomeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
