/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomeFace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomeFace::OAINAWelcomeFace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomeFace::OAINAWelcomeFace() {
    this->initializeModel();
}

OAINAWelcomeFace::~OAINAWelcomeFace() {}

void OAINAWelcomeFace::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAINAWelcomeFace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomeFace::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAINAWelcomeFace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomeFace::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAINAWelcomeFace::getId() const {
    return m_id;
}
void OAINAWelcomeFace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINAWelcomeFace::is_id_Set() const{
    return m_id_isSet;
}

bool OAINAWelcomeFace::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINAWelcomeFace::getKey() const {
    return m_key;
}
void OAINAWelcomeFace::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAINAWelcomeFace::is_key_Set() const{
    return m_key_isSet;
}

bool OAINAWelcomeFace::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAINAWelcomeFace::getVersion() const {
    return m_version;
}
void OAINAWelcomeFace::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINAWelcomeFace::is_version_Set() const{
    return m_version_isSet;
}

bool OAINAWelcomeFace::is_version_Valid() const{
    return m_version_isValid;
}

bool OAINAWelcomeFace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomeFace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
