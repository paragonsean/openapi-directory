/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAPidAlgo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAPidAlgo::OAINAPidAlgo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAPidAlgo::OAINAPidAlgo() {
    this->initializeModel();
}

OAINAPidAlgo::~OAINAPidAlgo() {}

void OAINAPidAlgo::initializeModel() {

    m_gain_isSet = false;
    m_gain_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_td_isSet = false;
    m_td_isValid = false;

    m_ti_isSet = false;
    m_ti_isValid = false;
}

void OAINAPidAlgo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAPidAlgo::fromJsonObject(QJsonObject json) {

    m_gain_isValid = ::OpenAPI::fromJsonValue(m_gain, json[QString("gain")]);
    m_gain_isSet = !json[QString("gain")].isNull() && m_gain_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_td_isValid = ::OpenAPI::fromJsonValue(m_td, json[QString("td")]);
    m_td_isSet = !json[QString("td")].isNull() && m_td_isValid;

    m_ti_isValid = ::OpenAPI::fromJsonValue(m_ti, json[QString("ti")]);
    m_ti_isSet = !json[QString("ti")].isNull() && m_ti_isValid;
}

QString OAINAPidAlgo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAPidAlgo::asJsonObject() const {
    QJsonObject obj;
    if (m_gain_isSet) {
        obj.insert(QString("gain"), ::OpenAPI::toJsonValue(m_gain));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_td_isSet) {
        obj.insert(QString("td"), ::OpenAPI::toJsonValue(m_td));
    }
    if (m_ti_isSet) {
        obj.insert(QString("ti"), ::OpenAPI::toJsonValue(m_ti));
    }
    return obj;
}

qint32 OAINAPidAlgo::getGain() const {
    return m_gain;
}
void OAINAPidAlgo::setGain(const qint32 &gain) {
    m_gain = gain;
    m_gain_isSet = true;
}

bool OAINAPidAlgo::is_gain_Set() const{
    return m_gain_isSet;
}

bool OAINAPidAlgo::is_gain_Valid() const{
    return m_gain_isValid;
}

qint32 OAINAPidAlgo::getPeriod() const {
    return m_period;
}
void OAINAPidAlgo::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAINAPidAlgo::is_period_Set() const{
    return m_period_isSet;
}

bool OAINAPidAlgo::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAINAPidAlgo::getTd() const {
    return m_td;
}
void OAINAPidAlgo::setTd(const qint32 &td) {
    m_td = td;
    m_td_isSet = true;
}

bool OAINAPidAlgo::is_td_Set() const{
    return m_td_isSet;
}

bool OAINAPidAlgo::is_td_Valid() const{
    return m_td_isValid;
}

qint32 OAINAPidAlgo::getTi() const {
    return m_ti;
}
void OAINAPidAlgo::setTi(const qint32 &ti) {
    m_ti = ti;
    m_ti_isSet = true;
}

bool OAINAPidAlgo::is_ti_Set() const{
    return m_ti_isSet;
}

bool OAINAPidAlgo::is_ti_Valid() const{
    return m_ti_isValid;
}

bool OAINAPidAlgo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_td_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ti_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAPidAlgo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
