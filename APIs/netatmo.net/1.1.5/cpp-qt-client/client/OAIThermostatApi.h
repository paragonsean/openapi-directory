/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIThermostatApi_H
#define OAI_OAIThermostatApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINAMeasureResponse.h"
#include "OAINANewScheduleResponse.h"
#include "OAINAOkResponse.h"
#include "OAINAThermProgram.h"
#include "OAINAThermostatDataResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIThermostatApi : public QObject {
    Q_OBJECT

public:
    OAIThermostatApi(const int timeOut = 0);
    ~OAIThermostatApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  module_id QString [required]
    * @param[in]  oaina_therm_program OAINAThermProgram [required]
    */
    virtual void createnewschedule(const QString &device_id, const QString &module_id, const OAINAThermProgram &oaina_therm_program);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  scale QString [required]
    * @param[in]  type QList<QString> [required]
    * @param[in]  module_id QString [optional]
    * @param[in]  date_begin qint32 [optional]
    * @param[in]  date_end QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  optimize bool [optional]
    * @param[in]  real_time bool [optional]
    */
    virtual void getmeasure(const QString &device_id, const QString &scale, const QList<QString> &type, const ::OpenAPI::OptionalParam<QString> &module_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &date_begin = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &date_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &optimize = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &real_time = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  device_id QString [optional]
    */
    virtual void getthermostatsdata(const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  module_id QString [required]
    * @param[in]  setpoint_mode QString [required]
    * @param[in]  setpoint_endtime qint32 [optional]
    * @param[in]  setpoint_temp float [optional]
    */
    virtual void setthermpoint(const QString &device_id, const QString &module_id, const QString &setpoint_mode, const ::OpenAPI::OptionalParam<qint32> &setpoint_endtime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &setpoint_temp = ::OpenAPI::OptionalParam<float>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  module_id QString [required]
    * @param[in]  schedule_id QString [required]
    */
    virtual void switchschedule(const QString &device_id, const QString &module_id, const QString &schedule_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  module_id QString [required]
    * @param[in]  oaina_therm_program OAINAThermProgram [required]
    */
    virtual void syncschedule(const QString &device_id, const QString &module_id, const OAINAThermProgram &oaina_therm_program);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createnewscheduleCallback(OAIHttpRequestWorker *worker);
    void getmeasureCallback(OAIHttpRequestWorker *worker);
    void getthermostatsdataCallback(OAIHttpRequestWorker *worker);
    void setthermpointCallback(OAIHttpRequestWorker *worker);
    void switchscheduleCallback(OAIHttpRequestWorker *worker);
    void syncscheduleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createnewscheduleSignal(OAINANewScheduleResponse summary);
    void getmeasureSignal(OAINAMeasureResponse summary);
    void getthermostatsdataSignal(OAINAThermostatDataResponse summary);
    void setthermpointSignal(OAINAOkResponse summary);
    void switchscheduleSignal(OAINAOkResponse summary);
    void syncscheduleSignal(OAINAOkResponse summary);


    void createnewscheduleSignalFull(OAIHttpRequestWorker *worker, OAINANewScheduleResponse summary);
    void getmeasureSignalFull(OAIHttpRequestWorker *worker, OAINAMeasureResponse summary);
    void getthermostatsdataSignalFull(OAIHttpRequestWorker *worker, OAINAThermostatDataResponse summary);
    void setthermpointSignalFull(OAIHttpRequestWorker *worker, OAINAOkResponse summary);
    void switchscheduleSignalFull(OAIHttpRequestWorker *worker, OAINAOkResponse summary);
    void syncscheduleSignalFull(OAIHttpRequestWorker *worker, OAINAOkResponse summary);

    Q_DECL_DEPRECATED_X("Use createnewscheduleSignalError() instead")
    void createnewscheduleSignalE(OAINANewScheduleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewscheduleSignalError(OAINANewScheduleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getmeasureSignalError() instead")
    void getmeasureSignalE(OAINAMeasureResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getmeasureSignalError(OAINAMeasureResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getthermostatsdataSignalError() instead")
    void getthermostatsdataSignalE(OAINAThermostatDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getthermostatsdataSignalError(OAINAThermostatDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setthermpointSignalError() instead")
    void setthermpointSignalE(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setthermpointSignalError(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchscheduleSignalError() instead")
    void switchscheduleSignalE(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void switchscheduleSignalError(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncscheduleSignalError() instead")
    void syncscheduleSignalE(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncscheduleSignalError(OAINAOkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createnewscheduleSignalErrorFull() instead")
    void createnewscheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createnewscheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getmeasureSignalErrorFull() instead")
    void getmeasureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getmeasureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getthermostatsdataSignalErrorFull() instead")
    void getthermostatsdataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getthermostatsdataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setthermpointSignalErrorFull() instead")
    void setthermpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setthermpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use switchscheduleSignalErrorFull() instead")
    void switchscheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void switchscheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncscheduleSignalErrorFull() instead")
    void syncscheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncscheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
