/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAMeasure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAMeasure::OAINAMeasure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAMeasure::OAINAMeasure() {
    this->initializeModel();
}

OAINAMeasure::~OAINAMeasure() {}

void OAINAMeasure::initializeModel() {

    m_gust_angle_isSet = false;
    m_gust_angle_isValid = false;

    m_gust_strength_isSet = false;
    m_gust_strength_isValid = false;

    m_rain_24h_isSet = false;
    m_rain_24h_isValid = false;

    m_rain_60min_isSet = false;
    m_rain_60min_isValid = false;

    m_rain_live_isSet = false;
    m_rain_live_isValid = false;

    m_rain_utc_isSet = false;
    m_rain_utc_isValid = false;

    m_res_isSet = false;
    m_res_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wind_angle_isSet = false;
    m_wind_angle_isValid = false;

    m_wind_strength_isSet = false;
    m_wind_strength_isValid = false;

    m_wind_timeutc_isSet = false;
    m_wind_timeutc_isValid = false;
}

void OAINAMeasure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAMeasure::fromJsonObject(QJsonObject json) {

    m_gust_angle_isValid = ::OpenAPI::fromJsonValue(m_gust_angle, json[QString("gust_angle")]);
    m_gust_angle_isSet = !json[QString("gust_angle")].isNull() && m_gust_angle_isValid;

    m_gust_strength_isValid = ::OpenAPI::fromJsonValue(m_gust_strength, json[QString("gust_strength")]);
    m_gust_strength_isSet = !json[QString("gust_strength")].isNull() && m_gust_strength_isValid;

    m_rain_24h_isValid = ::OpenAPI::fromJsonValue(m_rain_24h, json[QString("rain_24h")]);
    m_rain_24h_isSet = !json[QString("rain_24h")].isNull() && m_rain_24h_isValid;

    m_rain_60min_isValid = ::OpenAPI::fromJsonValue(m_rain_60min, json[QString("rain_60min")]);
    m_rain_60min_isSet = !json[QString("rain_60min")].isNull() && m_rain_60min_isValid;

    m_rain_live_isValid = ::OpenAPI::fromJsonValue(m_rain_live, json[QString("rain_live")]);
    m_rain_live_isSet = !json[QString("rain_live")].isNull() && m_rain_live_isValid;

    m_rain_utc_isValid = ::OpenAPI::fromJsonValue(m_rain_utc, json[QString("rain_utc")]);
    m_rain_utc_isSet = !json[QString("rain_utc")].isNull() && m_rain_utc_isValid;

    if(json["res"].isObject()){
        auto varmap = json["res"].toObject().toVariantMap();
        m_res_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<double> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_res_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_res_isSet &= !jval.isNull() && m_res_isValid;
                m_res.insert(m_res.end(), val, item);
            }
        }
    }

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wind_angle_isValid = ::OpenAPI::fromJsonValue(m_wind_angle, json[QString("wind_angle")]);
    m_wind_angle_isSet = !json[QString("wind_angle")].isNull() && m_wind_angle_isValid;

    m_wind_strength_isValid = ::OpenAPI::fromJsonValue(m_wind_strength, json[QString("wind_strength")]);
    m_wind_strength_isSet = !json[QString("wind_strength")].isNull() && m_wind_strength_isValid;

    m_wind_timeutc_isValid = ::OpenAPI::fromJsonValue(m_wind_timeutc, json[QString("wind_timeutc&quot;")]);
    m_wind_timeutc_isSet = !json[QString("wind_timeutc&quot;")].isNull() && m_wind_timeutc_isValid;
}

QString OAINAMeasure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAMeasure::asJsonObject() const {
    QJsonObject obj;
    if (m_gust_angle_isSet) {
        obj.insert(QString("gust_angle"), ::OpenAPI::toJsonValue(m_gust_angle));
    }
    if (m_gust_strength_isSet) {
        obj.insert(QString("gust_strength"), ::OpenAPI::toJsonValue(m_gust_strength));
    }
    if (m_rain_24h_isSet) {
        obj.insert(QString("rain_24h"), ::OpenAPI::toJsonValue(m_rain_24h));
    }
    if (m_rain_60min_isSet) {
        obj.insert(QString("rain_60min"), ::OpenAPI::toJsonValue(m_rain_60min));
    }
    if (m_rain_live_isSet) {
        obj.insert(QString("rain_live"), ::OpenAPI::toJsonValue(m_rain_live));
    }
    if (m_rain_utc_isSet) {
        obj.insert(QString("rain_utc"), ::OpenAPI::toJsonValue(m_rain_utc));
    }
    if (m_res.size() > 0) {
        
        obj.insert(QString("res"), toJsonValue(m_res));
    }
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wind_angle_isSet) {
        obj.insert(QString("wind_angle"), ::OpenAPI::toJsonValue(m_wind_angle));
    }
    if (m_wind_strength_isSet) {
        obj.insert(QString("wind_strength"), ::OpenAPI::toJsonValue(m_wind_strength));
    }
    if (m_wind_timeutc_isSet) {
        obj.insert(QString("wind_timeutc&quot;"), ::OpenAPI::toJsonValue(m_wind_timeutc));
    }
    return obj;
}

double OAINAMeasure::getGustAngle() const {
    return m_gust_angle;
}
void OAINAMeasure::setGustAngle(const double &gust_angle) {
    m_gust_angle = gust_angle;
    m_gust_angle_isSet = true;
}

bool OAINAMeasure::is_gust_angle_Set() const{
    return m_gust_angle_isSet;
}

bool OAINAMeasure::is_gust_angle_Valid() const{
    return m_gust_angle_isValid;
}

double OAINAMeasure::getGustStrength() const {
    return m_gust_strength;
}
void OAINAMeasure::setGustStrength(const double &gust_strength) {
    m_gust_strength = gust_strength;
    m_gust_strength_isSet = true;
}

bool OAINAMeasure::is_gust_strength_Set() const{
    return m_gust_strength_isSet;
}

bool OAINAMeasure::is_gust_strength_Valid() const{
    return m_gust_strength_isValid;
}

double OAINAMeasure::getRain24h() const {
    return m_rain_24h;
}
void OAINAMeasure::setRain24h(const double &rain_24h) {
    m_rain_24h = rain_24h;
    m_rain_24h_isSet = true;
}

bool OAINAMeasure::is_rain_24h_Set() const{
    return m_rain_24h_isSet;
}

bool OAINAMeasure::is_rain_24h_Valid() const{
    return m_rain_24h_isValid;
}

double OAINAMeasure::getRain60min() const {
    return m_rain_60min;
}
void OAINAMeasure::setRain60min(const double &rain_60min) {
    m_rain_60min = rain_60min;
    m_rain_60min_isSet = true;
}

bool OAINAMeasure::is_rain_60min_Set() const{
    return m_rain_60min_isSet;
}

bool OAINAMeasure::is_rain_60min_Valid() const{
    return m_rain_60min_isValid;
}

double OAINAMeasure::getRainLive() const {
    return m_rain_live;
}
void OAINAMeasure::setRainLive(const double &rain_live) {
    m_rain_live = rain_live;
    m_rain_live_isSet = true;
}

bool OAINAMeasure::is_rain_live_Set() const{
    return m_rain_live_isSet;
}

bool OAINAMeasure::is_rain_live_Valid() const{
    return m_rain_live_isValid;
}

qint64 OAINAMeasure::getRainUtc() const {
    return m_rain_utc;
}
void OAINAMeasure::setRainUtc(const qint64 &rain_utc) {
    m_rain_utc = rain_utc;
    m_rain_utc_isSet = true;
}

bool OAINAMeasure::is_rain_utc_Set() const{
    return m_rain_utc_isSet;
}

bool OAINAMeasure::is_rain_utc_Valid() const{
    return m_rain_utc_isValid;
}

QMap<QString, QList<double>> OAINAMeasure::getRes() const {
    return m_res;
}
void OAINAMeasure::setRes(const QMap<QString, QList<double>> &res) {
    m_res = res;
    m_res_isSet = true;
}

bool OAINAMeasure::is_res_Set() const{
    return m_res_isSet;
}

bool OAINAMeasure::is_res_Valid() const{
    return m_res_isValid;
}

QList<QString> OAINAMeasure::getType() const {
    return m_type;
}
void OAINAMeasure::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINAMeasure::is_type_Set() const{
    return m_type_isSet;
}

bool OAINAMeasure::is_type_Valid() const{
    return m_type_isValid;
}

double OAINAMeasure::getWindAngle() const {
    return m_wind_angle;
}
void OAINAMeasure::setWindAngle(const double &wind_angle) {
    m_wind_angle = wind_angle;
    m_wind_angle_isSet = true;
}

bool OAINAMeasure::is_wind_angle_Set() const{
    return m_wind_angle_isSet;
}

bool OAINAMeasure::is_wind_angle_Valid() const{
    return m_wind_angle_isValid;
}

double OAINAMeasure::getWindStrength() const {
    return m_wind_strength;
}
void OAINAMeasure::setWindStrength(const double &wind_strength) {
    m_wind_strength = wind_strength;
    m_wind_strength_isSet = true;
}

bool OAINAMeasure::is_wind_strength_Set() const{
    return m_wind_strength_isSet;
}

bool OAINAMeasure::is_wind_strength_Valid() const{
    return m_wind_strength_isValid;
}

qint64 OAINAMeasure::getWindTimeutc() const {
    return m_wind_timeutc;
}
void OAINAMeasure::setWindTimeutc(const qint64 &wind_timeutc) {
    m_wind_timeutc = wind_timeutc;
    m_wind_timeutc_isSet = true;
}

bool OAINAMeasure::is_wind_timeutc_Set() const{
    return m_wind_timeutc_isSet;
}

bool OAINAMeasure::is_wind_timeutc_Valid() const{
    return m_wind_timeutc_isValid;
}

bool OAINAMeasure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gust_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gust_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rain_24h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rain_60min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rain_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rain_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_res.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_strength_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_timeutc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAMeasure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
