/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeprecatedApi_H
#define OAI_OAIDeprecatedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINADeviceListResponse.h"
#include "OAINAThermStateResponse.h"
#include "OAINAUserResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeprecatedApi : public QObject {
    Q_OBJECT

public:
    OAIDeprecatedApi(const int timeOut = 0);
    ~OAIDeprecatedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_type QString [optional]
    * @param[in]  device_id QString [optional]
    * @param[in]  get_favorites bool [optional]
    */
    Q_DECL_DEPRECATED virtual void devicelist(const ::OpenAPI::OptionalParam<QString> &app_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &get_favorites = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  module_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getthermstate(const QString &device_id, const QString &module_id);


    Q_DECL_DEPRECATED virtual void getuser();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devicelistCallback(OAIHttpRequestWorker *worker);
    void getthermstateCallback(OAIHttpRequestWorker *worker);
    void getuserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void devicelistSignal(OAINADeviceListResponse summary);
    void getthermstateSignal(OAINAThermStateResponse summary);
    void getuserSignal(OAINAUserResponse summary);


    void devicelistSignalFull(OAIHttpRequestWorker *worker, OAINADeviceListResponse summary);
    void getthermstateSignalFull(OAIHttpRequestWorker *worker, OAINAThermStateResponse summary);
    void getuserSignalFull(OAIHttpRequestWorker *worker, OAINAUserResponse summary);

    Q_DECL_DEPRECATED_X("Use devicelistSignalError() instead")
    void devicelistSignalE(OAINADeviceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicelistSignalError(OAINADeviceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getthermstateSignalError() instead")
    void getthermstateSignalE(OAINAThermStateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getthermstateSignalError(OAINAThermStateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getuserSignalError() instead")
    void getuserSignalE(OAINAUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getuserSignalError(OAINAUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use devicelistSignalErrorFull() instead")
    void devicelistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicelistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getthermstateSignalErrorFull() instead")
    void getthermstateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getthermstateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getuserSignalErrorFull() instead")
    void getuserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getuserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
