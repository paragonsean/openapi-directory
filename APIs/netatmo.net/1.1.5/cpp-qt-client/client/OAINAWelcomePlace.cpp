/**
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINAWelcomePlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINAWelcomePlace::OAINAWelcomePlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINAWelcomePlace::OAINAWelcomePlace() {
    this->initializeModel();
}

OAINAWelcomePlace::~OAINAWelcomePlace() {}

void OAINAWelcomePlace::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAINAWelcomePlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINAWelcomePlace::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAINAWelcomePlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINAWelcomePlace::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAINAWelcomePlace::getCity() const {
    return m_city;
}
void OAINAWelcomePlace::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINAWelcomePlace::is_city_Set() const{
    return m_city_isSet;
}

bool OAINAWelcomePlace::is_city_Valid() const{
    return m_city_isValid;
}

QString OAINAWelcomePlace::getCountry() const {
    return m_country;
}
void OAINAWelcomePlace::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINAWelcomePlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAINAWelcomePlace::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINAWelcomePlace::getTimezone() const {
    return m_timezone;
}
void OAINAWelcomePlace::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAINAWelcomePlace::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAINAWelcomePlace::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAINAWelcomePlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINAWelcomePlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
