/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomeModule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomeModule {
  public static final String SERIALIZED_NAME_BATTERY_PERCENT = "battery_percent";
  @SerializedName(SERIALIZED_NAME_BATTERY_PERCENT)
  private Integer batteryPercent;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY = "last_activity";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY)
  private Integer lastActivity;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RF = "rf";
  @SerializedName(SERIALIZED_NAME_RF)
  private String rf;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public NAWelcomeModule() {
  }

  public NAWelcomeModule batteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
    return this;
  }

  /**
   * remaining battery percentage
   * @return batteryPercent
   */
  @javax.annotation.Nullable
  public Integer getBatteryPercent() {
    return batteryPercent;
  }

  public void setBatteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
  }


  public NAWelcomeModule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * mac address of the module
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAWelcomeModule lastActivity(Integer lastActivity) {
    this.lastActivity = lastActivity;
    return this;
  }

  /**
   * Timestamp of last move detected by the module
   * @return lastActivity
   */
  @javax.annotation.Nullable
  public Integer getLastActivity() {
    return lastActivity;
  }

  public void setLastActivity(Integer lastActivity) {
    this.lastActivity = lastActivity;
  }


  public NAWelcomeModule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the module (given by the user)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NAWelcomeModule rf(String rf) {
    this.rf = rf;
    return this;
  }

  /**
   * Radio status
   * @return rf
   */
  @javax.annotation.Nullable
  public String getRf() {
    return rf;
  }

  public void setRf(String rf) {
    this.rf = rf;
  }


  public NAWelcomeModule status(String status) {
    this.status = status;
    return this;
  }

  /**
   * status of the module
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public NAWelcomeModule type(String type) {
    this.type = type;
    return this;
  }

  /**
   * NACamDoorTag for tags
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomeModule naWelcomeModule = (NAWelcomeModule) o;
    return Objects.equals(this.batteryPercent, naWelcomeModule.batteryPercent) &&
        Objects.equals(this.id, naWelcomeModule.id) &&
        Objects.equals(this.lastActivity, naWelcomeModule.lastActivity) &&
        Objects.equals(this.name, naWelcomeModule.name) &&
        Objects.equals(this.rf, naWelcomeModule.rf) &&
        Objects.equals(this.status, naWelcomeModule.status) &&
        Objects.equals(this.type, naWelcomeModule.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batteryPercent, id, lastActivity, name, rf, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomeModule {\n");
    sb.append("    batteryPercent: ").append(toIndentedString(batteryPercent)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastActivity: ").append(toIndentedString(lastActivity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rf: ").append(toIndentedString(rf)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("battery_percent");
    openapiFields.add("id");
    openapiFields.add("last_activity");
    openapiFields.add("name");
    openapiFields.add("rf");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomeModule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomeModule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomeModule is not found in the empty JSON string", NAWelcomeModule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomeModule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomeModule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rf") != null && !jsonObj.get("rf").isJsonNull()) && !jsonObj.get("rf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rf").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomeModule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomeModule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomeModule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomeModule.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomeModule>() {
           @Override
           public void write(JsonWriter out, NAWelcomeModule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomeModule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomeModule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomeModule
   * @throws IOException if the JSON string is invalid with respect to NAWelcomeModule
   */
  public static NAWelcomeModule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomeModule.class);
  }

  /**
   * Convert an instance of NAWelcomeModule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

