/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NAWelcomeSnapshot;
import org.openapitools.client.model.NAWelcomeSubEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomeEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomeEvent {
  public static final String SERIALIZED_NAME_CAMERA_ID = "camera_id";
  @SerializedName(SERIALIZED_NAME_CAMERA_ID)
  private String cameraId;

  /**
   * Type of the detected object.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    HUMAN("human"),
    
    ANIMAL("animal"),
    
    VEHICLE("vehicle");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_EVENT_LIST = "event_list";
  @SerializedName(SERIALIZED_NAME_EVENT_LIST)
  private List<NAWelcomeSubEvent> eventList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ARRIVAL = "is_arrival";
  @SerializedName(SERIALIZED_NAME_IS_ARRIVAL)
  private Boolean isArrival;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PERSON_ID = "person_id";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private NAWelcomeSnapshot snapshot;

  public static final String SERIALIZED_NAME_SUB_TYPE = "sub_type";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private Integer subType;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VIDEO_ID = "video_id";
  @SerializedName(SERIALIZED_NAME_VIDEO_ID)
  private String videoId;

  public static final String SERIALIZED_NAME_VIDEO_STATUS = "video_status";
  @SerializedName(SERIALIZED_NAME_VIDEO_STATUS)
  private String videoStatus;

  public NAWelcomeEvent() {
  }

  public NAWelcomeEvent cameraId(String cameraId) {
    this.cameraId = cameraId;
    return this;
  }

  /**
   * Camera that detected the event
   * @return cameraId
   */
  @javax.annotation.Nullable
  public String getCameraId() {
    return cameraId;
  }

  public void setCameraId(String cameraId) {
    this.cameraId = cameraId;
  }


  public NAWelcomeEvent category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Type of the detected object.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public NAWelcomeEvent eventList(List<NAWelcomeSubEvent> eventList) {
    this.eventList = eventList;
    return this;
  }

  public NAWelcomeEvent addEventListItem(NAWelcomeSubEvent eventListItem) {
    if (this.eventList == null) {
      this.eventList = new ArrayList<>();
    }
    this.eventList.add(eventListItem);
    return this;
  }

  /**
   * Get eventList
   * @return eventList
   */
  @javax.annotation.Nullable
  public List<NAWelcomeSubEvent> getEventList() {
    return eventList;
  }

  public void setEventList(List<NAWelcomeSubEvent> eventList) {
    this.eventList = eventList;
  }


  public NAWelcomeEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the event
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAWelcomeEvent isArrival(Boolean isArrival) {
    this.isArrival = isArrival;
    return this;
  }

  /**
   * If person was considered away before being seen during this event
   * @return isArrival
   */
  @javax.annotation.Nullable
  public Boolean getIsArrival() {
    return isArrival;
  }

  public void setIsArrival(Boolean isArrival) {
    this.isArrival = isArrival;
  }


  public NAWelcomeEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * User facing event description
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NAWelcomeEvent personId(String personId) {
    this.personId = personId;
    return this;
  }

  /**
   * Id of the person the event is about (if any)
   * @return personId
   */
  @javax.annotation.Nullable
  public String getPersonId() {
    return personId;
  }

  public void setPersonId(String personId) {
    this.personId = personId;
  }


  public NAWelcomeEvent snapshot(NAWelcomeSnapshot snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * Get snapshot
   * @return snapshot
   */
  @javax.annotation.Nullable
  public NAWelcomeSnapshot getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(NAWelcomeSnapshot snapshot) {
    this.snapshot = snapshot;
  }


  public NAWelcomeEvent subType(Integer subType) {
    this.subType = subType;
    return this;
  }

  /**
   * Subtypes of SD and Alim events. Go to Welcome page for further details.
   * @return subType
   */
  @javax.annotation.Nullable
  public Integer getSubType() {
    return subType;
  }

  public void setSubType(Integer subType) {
    this.subType = subType;
  }


  public NAWelcomeEvent time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Time of occurence of event
   * @return time
   */
  @javax.annotation.Nullable
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }


  public NAWelcomeEvent type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of events. Go to the Welcome page for further details.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NAWelcomeEvent videoId(String videoId) {
    this.videoId = videoId;
    return this;
  }

  /**
   * Identifier of the video
   * @return videoId
   */
  @javax.annotation.Nullable
  public String getVideoId() {
    return videoId;
  }

  public void setVideoId(String videoId) {
    this.videoId = videoId;
  }


  public NAWelcomeEvent videoStatus(String videoStatus) {
    this.videoStatus = videoStatus;
    return this;
  }

  /**
   * Status of the video (recording, deleted or available)
   * @return videoStatus
   */
  @javax.annotation.Nullable
  public String getVideoStatus() {
    return videoStatus;
  }

  public void setVideoStatus(String videoStatus) {
    this.videoStatus = videoStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomeEvent naWelcomeEvent = (NAWelcomeEvent) o;
    return Objects.equals(this.cameraId, naWelcomeEvent.cameraId) &&
        Objects.equals(this.category, naWelcomeEvent.category) &&
        Objects.equals(this.eventList, naWelcomeEvent.eventList) &&
        Objects.equals(this.id, naWelcomeEvent.id) &&
        Objects.equals(this.isArrival, naWelcomeEvent.isArrival) &&
        Objects.equals(this.message, naWelcomeEvent.message) &&
        Objects.equals(this.personId, naWelcomeEvent.personId) &&
        Objects.equals(this.snapshot, naWelcomeEvent.snapshot) &&
        Objects.equals(this.subType, naWelcomeEvent.subType) &&
        Objects.equals(this.time, naWelcomeEvent.time) &&
        Objects.equals(this.type, naWelcomeEvent.type) &&
        Objects.equals(this.videoId, naWelcomeEvent.videoId) &&
        Objects.equals(this.videoStatus, naWelcomeEvent.videoStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cameraId, category, eventList, id, isArrival, message, personId, snapshot, subType, time, type, videoId, videoStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomeEvent {\n");
    sb.append("    cameraId: ").append(toIndentedString(cameraId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    eventList: ").append(toIndentedString(eventList)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isArrival: ").append(toIndentedString(isArrival)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    videoStatus: ").append(toIndentedString(videoStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("camera_id");
    openapiFields.add("category");
    openapiFields.add("event_list");
    openapiFields.add("id");
    openapiFields.add("is_arrival");
    openapiFields.add("message");
    openapiFields.add("person_id");
    openapiFields.add("snapshot");
    openapiFields.add("sub_type");
    openapiFields.add("time");
    openapiFields.add("type");
    openapiFields.add("video_id");
    openapiFields.add("video_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomeEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomeEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomeEvent is not found in the empty JSON string", NAWelcomeEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomeEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomeEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("camera_id") != null && !jsonObj.get("camera_id").isJsonNull()) && !jsonObj.get("camera_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `camera_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("camera_id").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("event_list") != null && !jsonObj.get("event_list").isJsonNull()) {
        JsonArray jsonArrayeventList = jsonObj.getAsJsonArray("event_list");
        if (jsonArrayeventList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("event_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `event_list` to be an array in the JSON string but got `%s`", jsonObj.get("event_list").toString()));
          }

          // validate the optional field `event_list` (array)
          for (int i = 0; i < jsonArrayeventList.size(); i++) {
            NAWelcomeSubEvent.validateJsonElement(jsonArrayeventList.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("person_id") != null && !jsonObj.get("person_id").isJsonNull()) && !jsonObj.get("person_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `person_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("person_id").toString()));
      }
      // validate the optional field `snapshot`
      if (jsonObj.get("snapshot") != null && !jsonObj.get("snapshot").isJsonNull()) {
        NAWelcomeSnapshot.validateJsonElement(jsonObj.get("snapshot"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("video_id") != null && !jsonObj.get("video_id").isJsonNull()) && !jsonObj.get("video_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_id").toString()));
      }
      if ((jsonObj.get("video_status") != null && !jsonObj.get("video_status").isJsonNull()) && !jsonObj.get("video_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomeEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomeEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomeEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomeEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomeEvent>() {
           @Override
           public void write(JsonWriter out, NAWelcomeEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomeEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomeEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomeEvent
   * @throws IOException if the JSON string is invalid with respect to NAWelcomeEvent
   */
  public static NAWelcomeEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomeEvent.class);
  }

  /**
   * Convert an instance of NAWelcomeEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

