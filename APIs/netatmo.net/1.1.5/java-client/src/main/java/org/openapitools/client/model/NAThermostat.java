/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NASetpoint;
import org.openapitools.client.model.NASetpointLog;
import org.openapitools.client.model.NAThermMeasure;
import org.openapitools.client.model.NAThermProgram;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAThermostat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAThermostat {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BATTERY_PERCENT = "battery_percent";
  @SerializedName(SERIALIZED_NAME_BATTERY_PERCENT)
  private Integer batteryPercent;

  public static final String SERIALIZED_NAME_BATTERY_VP = "battery_vp";
  @SerializedName(SERIALIZED_NAME_BATTERY_VP)
  private Integer batteryVp;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private Integer firmware;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "last_message";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private Integer lastMessage;

  public static final String SERIALIZED_NAME_LAST_THERM_SEEN = "last_therm_seen";
  @SerializedName(SERIALIZED_NAME_LAST_THERM_SEEN)
  private Integer lastThermSeen;

  public static final String SERIALIZED_NAME_MEASURED = "measured";
  @SerializedName(SERIALIZED_NAME_MEASURED)
  private NAThermMeasure measured;

  public static final String SERIALIZED_NAME_MODULE_NAME = "module_name";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_RF_STATUS = "rf_status";
  @SerializedName(SERIALIZED_NAME_RF_STATUS)
  private Integer rfStatus;

  public static final String SERIALIZED_NAME_SETPOINT = "setpoint";
  @SerializedName(SERIALIZED_NAME_SETPOINT)
  private NASetpoint setpoint;

  public static final String SERIALIZED_NAME_SETPOINT_HISTORY = "setpoint_history";
  @SerializedName(SERIALIZED_NAME_SETPOINT_HISTORY)
  private List<NASetpointLog> setpointHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETPOINT_ORDER = "setpoint_order";
  @SerializedName(SERIALIZED_NAME_SETPOINT_ORDER)
  private NASetpoint setpointOrder;

  public static final String SERIALIZED_NAME_THERM_ORIENTATION = "therm_orientation";
  @SerializedName(SERIALIZED_NAME_THERM_ORIENTATION)
  private Integer thermOrientation;

  public static final String SERIALIZED_NAME_THERM_PROGRAM_LIST = "therm_program_list";
  @SerializedName(SERIALIZED_NAME_THERM_PROGRAM_LIST)
  private List<NAThermProgram> thermProgramList = new ArrayList<>();

  public static final String SERIALIZED_NAME_THERM_RELAY_CMD = "therm_relay_cmd";
  @SerializedName(SERIALIZED_NAME_THERM_RELAY_CMD)
  private Integer thermRelayCmd;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public NAThermostat() {
  }

  public NAThermostat id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAThermostat batteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
    return this;
  }

  /**
   * It contains the current battery level in percentage.
   * @return batteryPercent
   */
  @javax.annotation.Nullable
  public Integer getBatteryPercent() {
    return batteryPercent;
  }

  public void setBatteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
  }


  public NAThermostat batteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
    return this;
  }

  /**
   * It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \&quot;Indoor module Battery range: 6000 ... 4200\&quot; | INDOOR_BATTERY_LEVEL_FULL &#x3D; 5640 INDOOR_BATTERY_LEVEL_HIGH &#x3D; 5280 INDOOR_BATTERY_LEVEL_MEDIUM &#x3D; 4920 INDOOR_BATTERY_LEVEL_LOW &#x3D; 4560 \&quot;Below 4560: very low\&quot; |      \&quot;Raingauge and outdoor module Battery range: 6000 ... 3600\&quot; | BATTERY_LEVEL_FULL &#x3D; 5500 BATTERY_LEVEL_HIGH &#x3D; 5000 BATTERY_LEVEL_MEDIUM &#x3D; 4500 BATTERY_LEVEL_LOW &#x3D; 4000 \&quot;Below 4000: very low\&quot; |      \&quot;Thermostat Battery range: 4500 ... 3000\&quot; | THERMOSTAT_BATTERY_LEVEL_FULL &#x3D; 4100 THERMOSTAT_BATTERY_LEVEL_HIGH &#x3D; 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM &#x3D; 3300 THERMOSTAT_BATTERY_LEVEL_LOW &#x3D; 3000 \&quot;Below 3000: very low\&quot; 
   * @return batteryVp
   */
  @javax.annotation.Nullable
  public Integer getBatteryVp() {
    return batteryVp;
  }

  public void setBatteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
  }


  public NAThermostat firmware(Integer firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Get firmware
   * @return firmware
   */
  @javax.annotation.Nullable
  public Integer getFirmware() {
    return firmware;
  }

  public void setFirmware(Integer firmware) {
    this.firmware = firmware;
  }


  public NAThermostat lastMessage(Integer lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

  /**
   * Get lastMessage
   * @return lastMessage
   */
  @javax.annotation.Nullable
  public Integer getLastMessage() {
    return lastMessage;
  }

  public void setLastMessage(Integer lastMessage) {
    this.lastMessage = lastMessage;
  }


  public NAThermostat lastThermSeen(Integer lastThermSeen) {
    this.lastThermSeen = lastThermSeen;
    return this;
  }

  /**
   * Get lastThermSeen
   * @return lastThermSeen
   */
  @javax.annotation.Nullable
  public Integer getLastThermSeen() {
    return lastThermSeen;
  }

  public void setLastThermSeen(Integer lastThermSeen) {
    this.lastThermSeen = lastThermSeen;
  }


  public NAThermostat measured(NAThermMeasure measured) {
    this.measured = measured;
    return this;
  }

  /**
   * Get measured
   * @return measured
   */
  @javax.annotation.Nullable
  public NAThermMeasure getMeasured() {
    return measured;
  }

  public void setMeasured(NAThermMeasure measured) {
    this.measured = measured;
  }


  public NAThermostat moduleName(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }

  /**
   * Get moduleName
   * @return moduleName
   */
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }

  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public NAThermostat rfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
    return this;
  }

  /**
   * \&quot;It contains the current radio status. The different thresholds to take into account are :\&quot; | RADIO_THRESHOLD_SIGNAL_LOW &#x3D; 90  RADIO_THRESHOLD_SIGNAL_MEDIUM &#x3D; 80 RADIO_THRESHOLD_SIGNAL_HIGH &#x3D; 70 RADIO_THRESHOLD_SIGNAL_FULL &#x3D; 60 
   * @return rfStatus
   */
  @javax.annotation.Nullable
  public Integer getRfStatus() {
    return rfStatus;
  }

  public void setRfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
  }


  public NAThermostat setpoint(NASetpoint setpoint) {
    this.setpoint = setpoint;
    return this;
  }

  /**
   * Get setpoint
   * @return setpoint
   */
  @javax.annotation.Nullable
  public NASetpoint getSetpoint() {
    return setpoint;
  }

  public void setSetpoint(NASetpoint setpoint) {
    this.setpoint = setpoint;
  }


  public NAThermostat setpointHistory(List<NASetpointLog> setpointHistory) {
    this.setpointHistory = setpointHistory;
    return this;
  }

  public NAThermostat addSetpointHistoryItem(NASetpointLog setpointHistoryItem) {
    if (this.setpointHistory == null) {
      this.setpointHistory = new ArrayList<>();
    }
    this.setpointHistory.add(setpointHistoryItem);
    return this;
  }

  /**
   * The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered.
   * @return setpointHistory
   */
  @javax.annotation.Nullable
  public List<NASetpointLog> getSetpointHistory() {
    return setpointHistory;
  }

  public void setSetpointHistory(List<NASetpointLog> setpointHistory) {
    this.setpointHistory = setpointHistory;
  }


  public NAThermostat setpointOrder(NASetpoint setpointOrder) {
    this.setpointOrder = setpointOrder;
    return this;
  }

  /**
   * Get setpointOrder
   * @return setpointOrder
   */
  @javax.annotation.Nullable
  public NASetpoint getSetpointOrder() {
    return setpointOrder;
  }

  public void setSetpointOrder(NASetpoint setpointOrder) {
    this.setpointOrder = setpointOrder;
  }


  public NAThermostat thermOrientation(Integer thermOrientation) {
    this.thermOrientation = thermOrientation;
    return this;
  }

  /**
   * Get thermOrientation
   * @return thermOrientation
   */
  @javax.annotation.Nullable
  public Integer getThermOrientation() {
    return thermOrientation;
  }

  public void setThermOrientation(Integer thermOrientation) {
    this.thermOrientation = thermOrientation;
  }


  public NAThermostat thermProgramList(List<NAThermProgram> thermProgramList) {
    this.thermProgramList = thermProgramList;
    return this;
  }

  public NAThermostat addThermProgramListItem(NAThermProgram thermProgramListItem) {
    if (this.thermProgramList == null) {
      this.thermProgramList = new ArrayList<>();
    }
    this.thermProgramList.add(thermProgramListItem);
    return this;
  }

  /**
   * List of the weekly heating planning used by the thermostat
   * @return thermProgramList
   */
  @javax.annotation.Nullable
  public List<NAThermProgram> getThermProgramList() {
    return thermProgramList;
  }

  public void setThermProgramList(List<NAThermProgram> thermProgramList) {
    this.thermProgramList = thermProgramList;
  }


  public NAThermostat thermRelayCmd(Integer thermRelayCmd) {
    this.thermRelayCmd = thermRelayCmd;
    return this;
  }

  /**
   * Get thermRelayCmd
   * @return thermRelayCmd
   */
  @javax.annotation.Nullable
  public Integer getThermRelayCmd() {
    return thermRelayCmd;
  }

  public void setThermRelayCmd(Integer thermRelayCmd) {
    this.thermRelayCmd = thermRelayCmd;
  }


  public NAThermostat type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAThermostat naThermostat = (NAThermostat) o;
    return Objects.equals(this.id, naThermostat.id) &&
        Objects.equals(this.batteryPercent, naThermostat.batteryPercent) &&
        Objects.equals(this.batteryVp, naThermostat.batteryVp) &&
        Objects.equals(this.firmware, naThermostat.firmware) &&
        Objects.equals(this.lastMessage, naThermostat.lastMessage) &&
        Objects.equals(this.lastThermSeen, naThermostat.lastThermSeen) &&
        Objects.equals(this.measured, naThermostat.measured) &&
        Objects.equals(this.moduleName, naThermostat.moduleName) &&
        Objects.equals(this.rfStatus, naThermostat.rfStatus) &&
        Objects.equals(this.setpoint, naThermostat.setpoint) &&
        Objects.equals(this.setpointHistory, naThermostat.setpointHistory) &&
        Objects.equals(this.setpointOrder, naThermostat.setpointOrder) &&
        Objects.equals(this.thermOrientation, naThermostat.thermOrientation) &&
        Objects.equals(this.thermProgramList, naThermostat.thermProgramList) &&
        Objects.equals(this.thermRelayCmd, naThermostat.thermRelayCmd) &&
        Objects.equals(this.type, naThermostat.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, batteryPercent, batteryVp, firmware, lastMessage, lastThermSeen, measured, moduleName, rfStatus, setpoint, setpointHistory, setpointOrder, thermOrientation, thermProgramList, thermRelayCmd, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAThermostat {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    batteryPercent: ").append(toIndentedString(batteryPercent)).append("\n");
    sb.append("    batteryVp: ").append(toIndentedString(batteryVp)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    lastThermSeen: ").append(toIndentedString(lastThermSeen)).append("\n");
    sb.append("    measured: ").append(toIndentedString(measured)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    rfStatus: ").append(toIndentedString(rfStatus)).append("\n");
    sb.append("    setpoint: ").append(toIndentedString(setpoint)).append("\n");
    sb.append("    setpointHistory: ").append(toIndentedString(setpointHistory)).append("\n");
    sb.append("    setpointOrder: ").append(toIndentedString(setpointOrder)).append("\n");
    sb.append("    thermOrientation: ").append(toIndentedString(thermOrientation)).append("\n");
    sb.append("    thermProgramList: ").append(toIndentedString(thermProgramList)).append("\n");
    sb.append("    thermRelayCmd: ").append(toIndentedString(thermRelayCmd)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("battery_percent");
    openapiFields.add("battery_vp");
    openapiFields.add("firmware");
    openapiFields.add("last_message");
    openapiFields.add("last_therm_seen");
    openapiFields.add("measured");
    openapiFields.add("module_name");
    openapiFields.add("rf_status");
    openapiFields.add("setpoint");
    openapiFields.add("setpoint_history");
    openapiFields.add("setpoint_order");
    openapiFields.add("therm_orientation");
    openapiFields.add("therm_program_list");
    openapiFields.add("therm_relay_cmd");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAThermostat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAThermostat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAThermostat is not found in the empty JSON string", NAThermostat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAThermostat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAThermostat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      // validate the optional field `measured`
      if (jsonObj.get("measured") != null && !jsonObj.get("measured").isJsonNull()) {
        NAThermMeasure.validateJsonElement(jsonObj.get("measured"));
      }
      if ((jsonObj.get("module_name") != null && !jsonObj.get("module_name").isJsonNull()) && !jsonObj.get("module_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module_name").toString()));
      }
      // validate the optional field `setpoint`
      if (jsonObj.get("setpoint") != null && !jsonObj.get("setpoint").isJsonNull()) {
        NASetpoint.validateJsonElement(jsonObj.get("setpoint"));
      }
      if (jsonObj.get("setpoint_history") != null && !jsonObj.get("setpoint_history").isJsonNull()) {
        JsonArray jsonArraysetpointHistory = jsonObj.getAsJsonArray("setpoint_history");
        if (jsonArraysetpointHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setpoint_history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setpoint_history` to be an array in the JSON string but got `%s`", jsonObj.get("setpoint_history").toString()));
          }

          // validate the optional field `setpoint_history` (array)
          for (int i = 0; i < jsonArraysetpointHistory.size(); i++) {
            NASetpointLog.validateJsonElement(jsonArraysetpointHistory.get(i));
          };
        }
      }
      // validate the optional field `setpoint_order`
      if (jsonObj.get("setpoint_order") != null && !jsonObj.get("setpoint_order").isJsonNull()) {
        NASetpoint.validateJsonElement(jsonObj.get("setpoint_order"));
      }
      if (jsonObj.get("therm_program_list") != null && !jsonObj.get("therm_program_list").isJsonNull()) {
        JsonArray jsonArraythermProgramList = jsonObj.getAsJsonArray("therm_program_list");
        if (jsonArraythermProgramList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("therm_program_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `therm_program_list` to be an array in the JSON string but got `%s`", jsonObj.get("therm_program_list").toString()));
          }

          // validate the optional field `therm_program_list` (array)
          for (int i = 0; i < jsonArraythermProgramList.size(); i++) {
            NAThermProgram.validateJsonElement(jsonArraythermProgramList.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAThermostat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAThermostat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAThermostat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAThermostat.class));

       return (TypeAdapter<T>) new TypeAdapter<NAThermostat>() {
           @Override
           public void write(JsonWriter out, NAThermostat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAThermostat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAThermostat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAThermostat
   * @throws IOException if the JSON string is invalid with respect to NAThermostat
   */
  public static NAThermostat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAThermostat.class);
  }

  /**
   * Convert an instance of NAThermostat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

