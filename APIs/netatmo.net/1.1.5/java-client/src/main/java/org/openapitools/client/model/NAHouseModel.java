/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.NADate;
import org.openapitools.client.model.NAHouseModelCa;
import org.openapitools.client.model.NALinkStation;
import org.openapitools.client.model.NAPidAlgo;
import org.openapitools.client.model.NASimpleAlgo;
import org.openapitools.client.model.NAStation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAHouseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAHouseModel {
  public static final String SERIALIZED_NAME_ALGO_TYPE = "algo_type";
  @SerializedName(SERIALIZED_NAME_ALGO_TYPE)
  private String algoType;

  public static final String SERIALIZED_NAME_CA = "ca";
  @SerializedName(SERIALIZED_NAME_CA)
  private NAHouseModelCa ca;

  public static final String SERIALIZED_NAME_EXT_TEMPS = "ext_temps";
  @SerializedName(SERIALIZED_NAME_EXT_TEMPS)
  private Map<String, Integer> extTemps = new HashMap<>();

  public static final String SERIALIZED_NAME_FIRST_ANTICIPATE_AVAIL = "first_anticipate_avail";
  @SerializedName(SERIALIZED_NAME_FIRST_ANTICIPATE_AVAIL)
  private Boolean firstAnticipateAvail;

  public static final String SERIALIZED_NAME_FIRST_PID_AVAIL = "first_pid_avail";
  @SerializedName(SERIALIZED_NAME_FIRST_PID_AVAIL)
  private Boolean firstPidAvail;

  public static final String SERIALIZED_NAME_GEFS = "gefs";
  @SerializedName(SERIALIZED_NAME_GEFS)
  private NAStation gefs;

  public static final String SERIALIZED_NAME_IN_USE = "in_use";
  @SerializedName(SERIALIZED_NAME_IN_USE)
  private String inUse;

  public static final String SERIALIZED_NAME_LAST_COMPUTE_TRY = "last_compute_try";
  @SerializedName(SERIALIZED_NAME_LAST_COMPUTE_TRY)
  private NADate lastComputeTry;

  public static final String SERIALIZED_NAME_LINK_STATION = "link_station";
  @SerializedName(SERIALIZED_NAME_LINK_STATION)
  private NALinkStation linkStation;

  public static final String SERIALIZED_NAME_PID_ALGO = "pid_algo";
  @SerializedName(SERIALIZED_NAME_PID_ALGO)
  private NAPidAlgo pidAlgo;

  public static final String SERIALIZED_NAME_PREFERED_ALGO_TYPE = "prefered_algo_type";
  @SerializedName(SERIALIZED_NAME_PREFERED_ALGO_TYPE)
  private String preferedAlgoType;

  public static final String SERIALIZED_NAME_SIMPLE_ALGO = "simple_algo";
  @SerializedName(SERIALIZED_NAME_SIMPLE_ALGO)
  private NASimpleAlgo simpleAlgo;

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private NAStation station;

  public static final String SERIALIZED_NAME_STATION_FIRSTTIME_ANTICIPATE = "station_firsttime_anticipate";
  @SerializedName(SERIALIZED_NAME_STATION_FIRSTTIME_ANTICIPATE)
  private Boolean stationFirsttimeAnticipate;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private NADate time;

  public static final String SERIALIZED_NAME_TIME_ALGO_CHANGED = "time_algo_changed";
  @SerializedName(SERIALIZED_NAME_TIME_ALGO_CHANGED)
  private Integer timeAlgoChanged;

  public static final String SERIALIZED_NAME_TIME_PID_COMPUTED = "time_pid_computed";
  @SerializedName(SERIALIZED_NAME_TIME_PID_COMPUTED)
  private Integer timePidComputed;

  public NAHouseModel() {
  }

  public NAHouseModel algoType(String algoType) {
    this.algoType = algoType;
    return this;
  }

  /**
   * Get algoType
   * @return algoType
   */
  @javax.annotation.Nullable
  public String getAlgoType() {
    return algoType;
  }

  public void setAlgoType(String algoType) {
    this.algoType = algoType;
  }


  public NAHouseModel ca(NAHouseModelCa ca) {
    this.ca = ca;
    return this;
  }

  /**
   * Get ca
   * @return ca
   */
  @javax.annotation.Nullable
  public NAHouseModelCa getCa() {
    return ca;
  }

  public void setCa(NAHouseModelCa ca) {
    this.ca = ca;
  }


  public NAHouseModel extTemps(Map<String, Integer> extTemps) {
    this.extTemps = extTemps;
    return this;
  }

  public NAHouseModel putExtTempsItem(String key, Integer extTempsItem) {
    if (this.extTemps == null) {
      this.extTemps = new HashMap<>();
    }
    this.extTemps.put(key, extTempsItem);
    return this;
  }

  /**
   * Get extTemps
   * @return extTemps
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getExtTemps() {
    return extTemps;
  }

  public void setExtTemps(Map<String, Integer> extTemps) {
    this.extTemps = extTemps;
  }


  public NAHouseModel firstAnticipateAvail(Boolean firstAnticipateAvail) {
    this.firstAnticipateAvail = firstAnticipateAvail;
    return this;
  }

  /**
   * Get firstAnticipateAvail
   * @return firstAnticipateAvail
   */
  @javax.annotation.Nullable
  public Boolean getFirstAnticipateAvail() {
    return firstAnticipateAvail;
  }

  public void setFirstAnticipateAvail(Boolean firstAnticipateAvail) {
    this.firstAnticipateAvail = firstAnticipateAvail;
  }


  public NAHouseModel firstPidAvail(Boolean firstPidAvail) {
    this.firstPidAvail = firstPidAvail;
    return this;
  }

  /**
   * Get firstPidAvail
   * @return firstPidAvail
   */
  @javax.annotation.Nullable
  public Boolean getFirstPidAvail() {
    return firstPidAvail;
  }

  public void setFirstPidAvail(Boolean firstPidAvail) {
    this.firstPidAvail = firstPidAvail;
  }


  public NAHouseModel gefs(NAStation gefs) {
    this.gefs = gefs;
    return this;
  }

  /**
   * Get gefs
   * @return gefs
   */
  @javax.annotation.Nullable
  public NAStation getGefs() {
    return gefs;
  }

  public void setGefs(NAStation gefs) {
    this.gefs = gefs;
  }


  public NAHouseModel inUse(String inUse) {
    this.inUse = inUse;
    return this;
  }

  /**
   * Get inUse
   * @return inUse
   */
  @javax.annotation.Nullable
  public String getInUse() {
    return inUse;
  }

  public void setInUse(String inUse) {
    this.inUse = inUse;
  }


  public NAHouseModel lastComputeTry(NADate lastComputeTry) {
    this.lastComputeTry = lastComputeTry;
    return this;
  }

  /**
   * Get lastComputeTry
   * @return lastComputeTry
   */
  @javax.annotation.Nullable
  public NADate getLastComputeTry() {
    return lastComputeTry;
  }

  public void setLastComputeTry(NADate lastComputeTry) {
    this.lastComputeTry = lastComputeTry;
  }


  public NAHouseModel linkStation(NALinkStation linkStation) {
    this.linkStation = linkStation;
    return this;
  }

  /**
   * Get linkStation
   * @return linkStation
   */
  @javax.annotation.Nullable
  public NALinkStation getLinkStation() {
    return linkStation;
  }

  public void setLinkStation(NALinkStation linkStation) {
    this.linkStation = linkStation;
  }


  public NAHouseModel pidAlgo(NAPidAlgo pidAlgo) {
    this.pidAlgo = pidAlgo;
    return this;
  }

  /**
   * Get pidAlgo
   * @return pidAlgo
   */
  @javax.annotation.Nullable
  public NAPidAlgo getPidAlgo() {
    return pidAlgo;
  }

  public void setPidAlgo(NAPidAlgo pidAlgo) {
    this.pidAlgo = pidAlgo;
  }


  public NAHouseModel preferedAlgoType(String preferedAlgoType) {
    this.preferedAlgoType = preferedAlgoType;
    return this;
  }

  /**
   * Get preferedAlgoType
   * @return preferedAlgoType
   */
  @javax.annotation.Nullable
  public String getPreferedAlgoType() {
    return preferedAlgoType;
  }

  public void setPreferedAlgoType(String preferedAlgoType) {
    this.preferedAlgoType = preferedAlgoType;
  }


  public NAHouseModel simpleAlgo(NASimpleAlgo simpleAlgo) {
    this.simpleAlgo = simpleAlgo;
    return this;
  }

  /**
   * Get simpleAlgo
   * @return simpleAlgo
   */
  @javax.annotation.Nullable
  public NASimpleAlgo getSimpleAlgo() {
    return simpleAlgo;
  }

  public void setSimpleAlgo(NASimpleAlgo simpleAlgo) {
    this.simpleAlgo = simpleAlgo;
  }


  public NAHouseModel station(NAStation station) {
    this.station = station;
    return this;
  }

  /**
   * Get station
   * @return station
   */
  @javax.annotation.Nullable
  public NAStation getStation() {
    return station;
  }

  public void setStation(NAStation station) {
    this.station = station;
  }


  public NAHouseModel stationFirsttimeAnticipate(Boolean stationFirsttimeAnticipate) {
    this.stationFirsttimeAnticipate = stationFirsttimeAnticipate;
    return this;
  }

  /**
   * Get stationFirsttimeAnticipate
   * @return stationFirsttimeAnticipate
   */
  @javax.annotation.Nullable
  public Boolean getStationFirsttimeAnticipate() {
    return stationFirsttimeAnticipate;
  }

  public void setStationFirsttimeAnticipate(Boolean stationFirsttimeAnticipate) {
    this.stationFirsttimeAnticipate = stationFirsttimeAnticipate;
  }


  public NAHouseModel time(NADate time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public NADate getTime() {
    return time;
  }

  public void setTime(NADate time) {
    this.time = time;
  }


  public NAHouseModel timeAlgoChanged(Integer timeAlgoChanged) {
    this.timeAlgoChanged = timeAlgoChanged;
    return this;
  }

  /**
   * Get timeAlgoChanged
   * @return timeAlgoChanged
   */
  @javax.annotation.Nullable
  public Integer getTimeAlgoChanged() {
    return timeAlgoChanged;
  }

  public void setTimeAlgoChanged(Integer timeAlgoChanged) {
    this.timeAlgoChanged = timeAlgoChanged;
  }


  public NAHouseModel timePidComputed(Integer timePidComputed) {
    this.timePidComputed = timePidComputed;
    return this;
  }

  /**
   * Get timePidComputed
   * @return timePidComputed
   */
  @javax.annotation.Nullable
  public Integer getTimePidComputed() {
    return timePidComputed;
  }

  public void setTimePidComputed(Integer timePidComputed) {
    this.timePidComputed = timePidComputed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAHouseModel naHouseModel = (NAHouseModel) o;
    return Objects.equals(this.algoType, naHouseModel.algoType) &&
        Objects.equals(this.ca, naHouseModel.ca) &&
        Objects.equals(this.extTemps, naHouseModel.extTemps) &&
        Objects.equals(this.firstAnticipateAvail, naHouseModel.firstAnticipateAvail) &&
        Objects.equals(this.firstPidAvail, naHouseModel.firstPidAvail) &&
        Objects.equals(this.gefs, naHouseModel.gefs) &&
        Objects.equals(this.inUse, naHouseModel.inUse) &&
        Objects.equals(this.lastComputeTry, naHouseModel.lastComputeTry) &&
        Objects.equals(this.linkStation, naHouseModel.linkStation) &&
        Objects.equals(this.pidAlgo, naHouseModel.pidAlgo) &&
        Objects.equals(this.preferedAlgoType, naHouseModel.preferedAlgoType) &&
        Objects.equals(this.simpleAlgo, naHouseModel.simpleAlgo) &&
        Objects.equals(this.station, naHouseModel.station) &&
        Objects.equals(this.stationFirsttimeAnticipate, naHouseModel.stationFirsttimeAnticipate) &&
        Objects.equals(this.time, naHouseModel.time) &&
        Objects.equals(this.timeAlgoChanged, naHouseModel.timeAlgoChanged) &&
        Objects.equals(this.timePidComputed, naHouseModel.timePidComputed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algoType, ca, extTemps, firstAnticipateAvail, firstPidAvail, gefs, inUse, lastComputeTry, linkStation, pidAlgo, preferedAlgoType, simpleAlgo, station, stationFirsttimeAnticipate, time, timeAlgoChanged, timePidComputed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAHouseModel {\n");
    sb.append("    algoType: ").append(toIndentedString(algoType)).append("\n");
    sb.append("    ca: ").append(toIndentedString(ca)).append("\n");
    sb.append("    extTemps: ").append(toIndentedString(extTemps)).append("\n");
    sb.append("    firstAnticipateAvail: ").append(toIndentedString(firstAnticipateAvail)).append("\n");
    sb.append("    firstPidAvail: ").append(toIndentedString(firstPidAvail)).append("\n");
    sb.append("    gefs: ").append(toIndentedString(gefs)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    lastComputeTry: ").append(toIndentedString(lastComputeTry)).append("\n");
    sb.append("    linkStation: ").append(toIndentedString(linkStation)).append("\n");
    sb.append("    pidAlgo: ").append(toIndentedString(pidAlgo)).append("\n");
    sb.append("    preferedAlgoType: ").append(toIndentedString(preferedAlgoType)).append("\n");
    sb.append("    simpleAlgo: ").append(toIndentedString(simpleAlgo)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    stationFirsttimeAnticipate: ").append(toIndentedString(stationFirsttimeAnticipate)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    timeAlgoChanged: ").append(toIndentedString(timeAlgoChanged)).append("\n");
    sb.append("    timePidComputed: ").append(toIndentedString(timePidComputed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algo_type");
    openapiFields.add("ca");
    openapiFields.add("ext_temps");
    openapiFields.add("first_anticipate_avail");
    openapiFields.add("first_pid_avail");
    openapiFields.add("gefs");
    openapiFields.add("in_use");
    openapiFields.add("last_compute_try");
    openapiFields.add("link_station");
    openapiFields.add("pid_algo");
    openapiFields.add("prefered_algo_type");
    openapiFields.add("simple_algo");
    openapiFields.add("station");
    openapiFields.add("station_firsttime_anticipate");
    openapiFields.add("time");
    openapiFields.add("time_algo_changed");
    openapiFields.add("time_pid_computed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAHouseModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAHouseModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAHouseModel is not found in the empty JSON string", NAHouseModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAHouseModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAHouseModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algo_type") != null && !jsonObj.get("algo_type").isJsonNull()) && !jsonObj.get("algo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algo_type").toString()));
      }
      // validate the optional field `ca`
      if (jsonObj.get("ca") != null && !jsonObj.get("ca").isJsonNull()) {
        NAHouseModelCa.validateJsonElement(jsonObj.get("ca"));
      }
      // validate the optional field `gefs`
      if (jsonObj.get("gefs") != null && !jsonObj.get("gefs").isJsonNull()) {
        NAStation.validateJsonElement(jsonObj.get("gefs"));
      }
      if ((jsonObj.get("in_use") != null && !jsonObj.get("in_use").isJsonNull()) && !jsonObj.get("in_use").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_use` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_use").toString()));
      }
      // validate the optional field `last_compute_try`
      if (jsonObj.get("last_compute_try") != null && !jsonObj.get("last_compute_try").isJsonNull()) {
        NADate.validateJsonElement(jsonObj.get("last_compute_try"));
      }
      // validate the optional field `link_station`
      if (jsonObj.get("link_station") != null && !jsonObj.get("link_station").isJsonNull()) {
        NALinkStation.validateJsonElement(jsonObj.get("link_station"));
      }
      // validate the optional field `pid_algo`
      if (jsonObj.get("pid_algo") != null && !jsonObj.get("pid_algo").isJsonNull()) {
        NAPidAlgo.validateJsonElement(jsonObj.get("pid_algo"));
      }
      if ((jsonObj.get("prefered_algo_type") != null && !jsonObj.get("prefered_algo_type").isJsonNull()) && !jsonObj.get("prefered_algo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefered_algo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefered_algo_type").toString()));
      }
      // validate the optional field `simple_algo`
      if (jsonObj.get("simple_algo") != null && !jsonObj.get("simple_algo").isJsonNull()) {
        NASimpleAlgo.validateJsonElement(jsonObj.get("simple_algo"));
      }
      // validate the optional field `station`
      if (jsonObj.get("station") != null && !jsonObj.get("station").isJsonNull()) {
        NAStation.validateJsonElement(jsonObj.get("station"));
      }
      // validate the optional field `time`
      if (jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) {
        NADate.validateJsonElement(jsonObj.get("time"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAHouseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAHouseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAHouseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAHouseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<NAHouseModel>() {
           @Override
           public void write(JsonWriter out, NAHouseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAHouseModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAHouseModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAHouseModel
   * @throws IOException if the JSON string is invalid with respect to NAHouseModel
   */
  public static NAHouseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAHouseModel.class);
  }

  /**
   * Convert an instance of NAHouseModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

