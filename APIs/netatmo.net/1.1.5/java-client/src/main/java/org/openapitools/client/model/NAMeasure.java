/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAMeasure
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAMeasure {
  public static final String SERIALIZED_NAME_GUST_ANGLE = "gust_angle";
  @SerializedName(SERIALIZED_NAME_GUST_ANGLE)
  private BigDecimal gustAngle;

  public static final String SERIALIZED_NAME_GUST_STRENGTH = "gust_strength";
  @SerializedName(SERIALIZED_NAME_GUST_STRENGTH)
  private BigDecimal gustStrength;

  public static final String SERIALIZED_NAME_RAIN24H = "rain_24h";
  @SerializedName(SERIALIZED_NAME_RAIN24H)
  private BigDecimal rain24h;

  public static final String SERIALIZED_NAME_RAIN60MIN = "rain_60min";
  @SerializedName(SERIALIZED_NAME_RAIN60MIN)
  private BigDecimal rain60min;

  public static final String SERIALIZED_NAME_RAIN_LIVE = "rain_live";
  @SerializedName(SERIALIZED_NAME_RAIN_LIVE)
  private BigDecimal rainLive;

  public static final String SERIALIZED_NAME_RAIN_UTC = "rain_utc";
  @SerializedName(SERIALIZED_NAME_RAIN_UTC)
  private Long rainUtc;

  public static final String SERIALIZED_NAME_RES = "res";
  @SerializedName(SERIALIZED_NAME_RES)
  private Map<String, List<Double>> res = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIND_ANGLE = "wind_angle";
  @SerializedName(SERIALIZED_NAME_WIND_ANGLE)
  private BigDecimal windAngle;

  public static final String SERIALIZED_NAME_WIND_STRENGTH = "wind_strength";
  @SerializedName(SERIALIZED_NAME_WIND_STRENGTH)
  private BigDecimal windStrength;

  public static final String SERIALIZED_NAME_WIND_TIMEUTC_DOUBLE_QUOTE = "wind_timeutc&quot;";
  @SerializedName(SERIALIZED_NAME_WIND_TIMEUTC_DOUBLE_QUOTE)
  private Long windTimeutcDoubleQuote;

  public NAMeasure() {
  }

  public NAMeasure gustAngle(BigDecimal gustAngle) {
    this.gustAngle = gustAngle;
    return this;
  }

  /**
   * Get gustAngle
   * @return gustAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getGustAngle() {
    return gustAngle;
  }

  public void setGustAngle(BigDecimal gustAngle) {
    this.gustAngle = gustAngle;
  }


  public NAMeasure gustStrength(BigDecimal gustStrength) {
    this.gustStrength = gustStrength;
    return this;
  }

  /**
   * Get gustStrength
   * @return gustStrength
   */
  @javax.annotation.Nullable
  public BigDecimal getGustStrength() {
    return gustStrength;
  }

  public void setGustStrength(BigDecimal gustStrength) {
    this.gustStrength = gustStrength;
  }


  public NAMeasure rain24h(BigDecimal rain24h) {
    this.rain24h = rain24h;
    return this;
  }

  /**
   * Get rain24h
   * @return rain24h
   */
  @javax.annotation.Nullable
  public BigDecimal getRain24h() {
    return rain24h;
  }

  public void setRain24h(BigDecimal rain24h) {
    this.rain24h = rain24h;
  }


  public NAMeasure rain60min(BigDecimal rain60min) {
    this.rain60min = rain60min;
    return this;
  }

  /**
   * Get rain60min
   * @return rain60min
   */
  @javax.annotation.Nullable
  public BigDecimal getRain60min() {
    return rain60min;
  }

  public void setRain60min(BigDecimal rain60min) {
    this.rain60min = rain60min;
  }


  public NAMeasure rainLive(BigDecimal rainLive) {
    this.rainLive = rainLive;
    return this;
  }

  /**
   * Get rainLive
   * @return rainLive
   */
  @javax.annotation.Nullable
  public BigDecimal getRainLive() {
    return rainLive;
  }

  public void setRainLive(BigDecimal rainLive) {
    this.rainLive = rainLive;
  }


  public NAMeasure rainUtc(Long rainUtc) {
    this.rainUtc = rainUtc;
    return this;
  }

  /**
   * Get rainUtc
   * @return rainUtc
   */
  @javax.annotation.Nullable
  public Long getRainUtc() {
    return rainUtc;
  }

  public void setRainUtc(Long rainUtc) {
    this.rainUtc = rainUtc;
  }


  public NAMeasure res(Map<String, List<Double>> res) {
    this.res = res;
    return this;
  }

  public NAMeasure putResItem(String key, List<Double> resItem) {
    if (this.res == null) {
      this.res = new HashMap<>();
    }
    this.res.put(key, resItem);
    return this;
  }

  /**
   * Get res
   * @return res
   */
  @javax.annotation.Nullable
  public Map<String, List<Double>> getRes() {
    return res;
  }

  public void setRes(Map<String, List<Double>> res) {
    this.res = res;
  }


  public NAMeasure type(List<String> type) {
    this.type = type;
    return this;
  }

  public NAMeasure addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public List<String> getType() {
    return type;
  }

  public void setType(List<String> type) {
    this.type = type;
  }


  public NAMeasure windAngle(BigDecimal windAngle) {
    this.windAngle = windAngle;
    return this;
  }

  /**
   * Get windAngle
   * @return windAngle
   */
  @javax.annotation.Nullable
  public BigDecimal getWindAngle() {
    return windAngle;
  }

  public void setWindAngle(BigDecimal windAngle) {
    this.windAngle = windAngle;
  }


  public NAMeasure windStrength(BigDecimal windStrength) {
    this.windStrength = windStrength;
    return this;
  }

  /**
   * Get windStrength
   * @return windStrength
   */
  @javax.annotation.Nullable
  public BigDecimal getWindStrength() {
    return windStrength;
  }

  public void setWindStrength(BigDecimal windStrength) {
    this.windStrength = windStrength;
  }


  public NAMeasure windTimeutcDoubleQuote(Long windTimeutcDoubleQuote) {
    this.windTimeutcDoubleQuote = windTimeutcDoubleQuote;
    return this;
  }

  /**
   * Get windTimeutcDoubleQuote
   * @return windTimeutcDoubleQuote
   */
  @javax.annotation.Nullable
  public Long getWindTimeutcDoubleQuote() {
    return windTimeutcDoubleQuote;
  }

  public void setWindTimeutcDoubleQuote(Long windTimeutcDoubleQuote) {
    this.windTimeutcDoubleQuote = windTimeutcDoubleQuote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAMeasure naMeasure = (NAMeasure) o;
    return Objects.equals(this.gustAngle, naMeasure.gustAngle) &&
        Objects.equals(this.gustStrength, naMeasure.gustStrength) &&
        Objects.equals(this.rain24h, naMeasure.rain24h) &&
        Objects.equals(this.rain60min, naMeasure.rain60min) &&
        Objects.equals(this.rainLive, naMeasure.rainLive) &&
        Objects.equals(this.rainUtc, naMeasure.rainUtc) &&
        Objects.equals(this.res, naMeasure.res) &&
        Objects.equals(this.type, naMeasure.type) &&
        Objects.equals(this.windAngle, naMeasure.windAngle) &&
        Objects.equals(this.windStrength, naMeasure.windStrength) &&
        Objects.equals(this.windTimeutcDoubleQuote, naMeasure.windTimeutcDoubleQuote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gustAngle, gustStrength, rain24h, rain60min, rainLive, rainUtc, res, type, windAngle, windStrength, windTimeutcDoubleQuote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAMeasure {\n");
    sb.append("    gustAngle: ").append(toIndentedString(gustAngle)).append("\n");
    sb.append("    gustStrength: ").append(toIndentedString(gustStrength)).append("\n");
    sb.append("    rain24h: ").append(toIndentedString(rain24h)).append("\n");
    sb.append("    rain60min: ").append(toIndentedString(rain60min)).append("\n");
    sb.append("    rainLive: ").append(toIndentedString(rainLive)).append("\n");
    sb.append("    rainUtc: ").append(toIndentedString(rainUtc)).append("\n");
    sb.append("    res: ").append(toIndentedString(res)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    windAngle: ").append(toIndentedString(windAngle)).append("\n");
    sb.append("    windStrength: ").append(toIndentedString(windStrength)).append("\n");
    sb.append("    windTimeutcDoubleQuote: ").append(toIndentedString(windTimeutcDoubleQuote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gust_angle");
    openapiFields.add("gust_strength");
    openapiFields.add("rain_24h");
    openapiFields.add("rain_60min");
    openapiFields.add("rain_live");
    openapiFields.add("rain_utc");
    openapiFields.add("res");
    openapiFields.add("type");
    openapiFields.add("wind_angle");
    openapiFields.add("wind_strength");
    openapiFields.add("wind_timeutc&quot;");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAMeasure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAMeasure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAMeasure is not found in the empty JSON string", NAMeasure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAMeasure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAMeasure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAMeasure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAMeasure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAMeasure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAMeasure.class));

       return (TypeAdapter<T>) new TypeAdapter<NAMeasure>() {
           @Override
           public void write(JsonWriter out, NAMeasure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAMeasure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAMeasure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAMeasure
   * @throws IOException if the JSON string is invalid with respect to NAMeasure
   */
  public static NAMeasure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAMeasure.class);
  }

  /**
   * Convert an instance of NAMeasure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

