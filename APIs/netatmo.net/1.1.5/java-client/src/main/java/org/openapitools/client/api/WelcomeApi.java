/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NAWelcomeEventResponse;
import org.openapitools.client.model.NAWelcomeHomeDataResponse;
import org.openapitools.client.model.NAWelcomePersonsAwayResponse;
import org.openapitools.client.model.NAWelcomePersonsHomeResponse;
import org.openapitools.client.model.NAWelcomeWebhookResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WelcomeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WelcomeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WelcomeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addwebhook
     * @param url Your webhook callback url (required)
     * @param appType Webhooks are only available for Welcome, enter app_camera. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addwebhookCall(String url, String appType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addwebhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (appType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_type", appType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addwebhookValidateBeforeCall(String url, String appType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling addwebhook(Async)");
        }

        // verify the required parameter 'appType' is set
        if (appType == null) {
            throw new ApiException("Missing the required parameter 'appType' when calling addwebhook(Async)");
        }

        return addwebhookCall(url, appType, _callback);

    }

    /**
     * 
     * Links a callback url to a user. 
     * @param url Your webhook callback url (required)
     * @param appType Webhooks are only available for Welcome, enter app_camera. (required)
     * @return NAWelcomeWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeWebhookResponse addwebhook(String url, String appType) throws ApiException {
        ApiResponse<NAWelcomeWebhookResponse> localVarResp = addwebhookWithHttpInfo(url, appType);
        return localVarResp.getData();
    }

    /**
     * 
     * Links a callback url to a user. 
     * @param url Your webhook callback url (required)
     * @param appType Webhooks are only available for Welcome, enter app_camera. (required)
     * @return ApiResponse&lt;NAWelcomeWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeWebhookResponse> addwebhookWithHttpInfo(String url, String appType) throws ApiException {
        okhttp3.Call localVarCall = addwebhookValidateBeforeCall(url, appType, null);
        Type localVarReturnType = new TypeToken<NAWelcomeWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Links a callback url to a user. 
     * @param url Your webhook callback url (required)
     * @param appType Webhooks are only available for Welcome, enter app_camera. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addwebhookAsync(String url, String appType, final ApiCallback<NAWelcomeWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addwebhookValidateBeforeCall(url, appType, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dropwebhook
     * @param appType For Welcome, use app_camera (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dropwebhookCall(String appType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dropwebhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_type", appType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dropwebhookValidateBeforeCall(String appType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appType' is set
        if (appType == null) {
            throw new ApiException("Missing the required parameter 'appType' when calling dropwebhook(Async)");
        }

        return dropwebhookCall(appType, _callback);

    }

    /**
     * 
     * Dissociates a webhook from a user. 
     * @param appType For Welcome, use app_camera (required)
     * @return NAWelcomeWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeWebhookResponse dropwebhook(String appType) throws ApiException {
        ApiResponse<NAWelcomeWebhookResponse> localVarResp = dropwebhookWithHttpInfo(appType);
        return localVarResp.getData();
    }

    /**
     * 
     * Dissociates a webhook from a user. 
     * @param appType For Welcome, use app_camera (required)
     * @return ApiResponse&lt;NAWelcomeWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeWebhookResponse> dropwebhookWithHttpInfo(String appType) throws ApiException {
        okhttp3.Call localVarCall = dropwebhookValidateBeforeCall(appType, null);
        Type localVarReturnType = new TypeToken<NAWelcomeWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dissociates a webhook from a user. 
     * @param appType For Welcome, use app_camera (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dropwebhookAsync(String appType, final ApiCallback<NAWelcomeWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dropwebhookValidateBeforeCall(appType, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getcamerapicture
     * @param imageId id of the image (can be retrieved as &#39;id&#39; in &#39;face&#39; in Gethomedata, or as &#39;id&#39; in &#39;snapshot&#39; in Getnextevents, Getlasteventof and Geteventsuntil) (required)
     * @param key Security key to access snapshots. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getcamerapictureCall(String imageId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getcamerapicture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getcamerapictureValidateBeforeCall(String imageId, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getcamerapicture(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getcamerapicture(Async)");
        }

        return getcamerapictureCall(imageId, key, _callback);

    }

    /**
     * 
     * Returns the snapshot associated to an event. 
     * @param imageId id of the image (can be retrieved as &#39;id&#39; in &#39;face&#39; in Gethomedata, or as &#39;id&#39; in &#39;snapshot&#39; in Getnextevents, Getlasteventof and Geteventsuntil) (required)
     * @param key Security key to access snapshots. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public byte[] getcamerapicture(String imageId, String key) throws ApiException {
        ApiResponse<byte[]> localVarResp = getcamerapictureWithHttpInfo(imageId, key);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the snapshot associated to an event. 
     * @param imageId id of the image (can be retrieved as &#39;id&#39; in &#39;face&#39; in Gethomedata, or as &#39;id&#39; in &#39;snapshot&#39; in Getnextevents, Getlasteventof and Geteventsuntil) (required)
     * @param key Security key to access snapshots. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> getcamerapictureWithHttpInfo(String imageId, String key) throws ApiException {
        okhttp3.Call localVarCall = getcamerapictureValidateBeforeCall(imageId, key, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the snapshot associated to an event. 
     * @param imageId id of the image (can be retrieved as &#39;id&#39; in &#39;face&#39; in Gethomedata, or as &#39;id&#39; in &#39;snapshot&#39; in Getnextevents, Getlasteventof and Geteventsuntil) (required)
     * @param key Security key to access snapshots. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getcamerapictureAsync(String imageId, String key, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = getcamerapictureValidateBeforeCall(imageId, key, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for geteventsuntil
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve all the events until this one (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geteventsuntilCall(String homeId, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/geteventsuntil";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (eventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_id", eventId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call geteventsuntilValidateBeforeCall(String homeId, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeId' is set
        if (homeId == null) {
            throw new ApiException("Missing the required parameter 'homeId' when calling geteventsuntil(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling geteventsuntil(Async)");
        }

        return geteventsuntilCall(homeId, eventId, _callback);

    }

    /**
     * 
     * Returns the snapshot associated to an event. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve all the events until this one (required)
     * @return NAWelcomeEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeEventResponse geteventsuntil(String homeId, String eventId) throws ApiException {
        ApiResponse<NAWelcomeEventResponse> localVarResp = geteventsuntilWithHttpInfo(homeId, eventId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the snapshot associated to an event. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve all the events until this one (required)
     * @return ApiResponse&lt;NAWelcomeEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeEventResponse> geteventsuntilWithHttpInfo(String homeId, String eventId) throws ApiException {
        okhttp3.Call localVarCall = geteventsuntilValidateBeforeCall(homeId, eventId, null);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the snapshot associated to an event. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve all the events until this one (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call geteventsuntilAsync(String homeId, String eventId, final ApiCallback<NAWelcomeEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = geteventsuntilValidateBeforeCall(homeId, eventId, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gethomedata
     * @param homeId Specify if you&#39;re looking for the events of a specific Home. (optional)
     * @param size Number of events to retrieve. Default is &#x60;30&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gethomedataCall(String homeId, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gethomedata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gethomedataValidateBeforeCall(String homeId, Integer size, final ApiCallback _callback) throws ApiException {
        return gethomedataCall(homeId, size, _callback);

    }

    /**
     * 
     * Returns information about users homes and cameras. 
     * @param homeId Specify if you&#39;re looking for the events of a specific Home. (optional)
     * @param size Number of events to retrieve. Default is &#x60;30&#x60;. (optional)
     * @return NAWelcomeHomeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeHomeDataResponse gethomedata(String homeId, Integer size) throws ApiException {
        ApiResponse<NAWelcomeHomeDataResponse> localVarResp = gethomedataWithHttpInfo(homeId, size);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about users homes and cameras. 
     * @param homeId Specify if you&#39;re looking for the events of a specific Home. (optional)
     * @param size Number of events to retrieve. Default is &#x60;30&#x60;. (optional)
     * @return ApiResponse&lt;NAWelcomeHomeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeHomeDataResponse> gethomedataWithHttpInfo(String homeId, Integer size) throws ApiException {
        okhttp3.Call localVarCall = gethomedataValidateBeforeCall(homeId, size, null);
        Type localVarReturnType = new TypeToken<NAWelcomeHomeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about users homes and cameras. 
     * @param homeId Specify if you&#39;re looking for the events of a specific Home. (optional)
     * @param size Number of events to retrieve. Default is &#x60;30&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gethomedataAsync(String homeId, Integer size, final ApiCallback<NAWelcomeHomeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gethomedataValidateBeforeCall(homeId, size, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeHomeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getlasteventof
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId Your request will retrieve all events of the given home until the most recent event of the given person (required)
     * @param offset Number of events to retrieve. Default is 30. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getlasteventofCall(String homeId, String personId, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getlasteventof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person_id", personId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getlasteventofValidateBeforeCall(String homeId, String personId, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeId' is set
        if (homeId == null) {
            throw new ApiException("Missing the required parameter 'homeId' when calling getlasteventof(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getlasteventof(Async)");
        }

        return getlasteventofCall(homeId, personId, offset, _callback);

    }

    /**
     * 
     * Returns most recent events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId Your request will retrieve all events of the given home until the most recent event of the given person (required)
     * @param offset Number of events to retrieve. Default is 30. (optional)
     * @return NAWelcomeEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeEventResponse getlasteventof(String homeId, String personId, Integer offset) throws ApiException {
        ApiResponse<NAWelcomeEventResponse> localVarResp = getlasteventofWithHttpInfo(homeId, personId, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns most recent events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId Your request will retrieve all events of the given home until the most recent event of the given person (required)
     * @param offset Number of events to retrieve. Default is 30. (optional)
     * @return ApiResponse&lt;NAWelcomeEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeEventResponse> getlasteventofWithHttpInfo(String homeId, String personId, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getlasteventofValidateBeforeCall(homeId, personId, offset, null);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns most recent events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId Your request will retrieve all events of the given home until the most recent event of the given person (required)
     * @param offset Number of events to retrieve. Default is 30. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getlasteventofAsync(String homeId, String personId, Integer offset, final ApiCallback<NAWelcomeEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getlasteventofValidateBeforeCall(homeId, personId, offset, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getnextevents
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve events occured before this one (required)
     * @param size Number of events to retrieve. Default is 30. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getnexteventsCall(String homeId, String eventId, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getnextevents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (eventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_id", eventId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getnexteventsValidateBeforeCall(String homeId, String eventId, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeId' is set
        if (homeId == null) {
            throw new ApiException("Missing the required parameter 'homeId' when calling getnextevents(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getnextevents(Async)");
        }

        return getnexteventsCall(homeId, eventId, size, _callback);

    }

    /**
     * 
     * Returns previous events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve events occured before this one (required)
     * @param size Number of events to retrieve. Default is 30. (optional)
     * @return NAWelcomeEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomeEventResponse getnextevents(String homeId, String eventId, Integer size) throws ApiException {
        ApiResponse<NAWelcomeEventResponse> localVarResp = getnexteventsWithHttpInfo(homeId, eventId, size);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns previous events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve events occured before this one (required)
     * @param size Number of events to retrieve. Default is 30. (optional)
     * @return ApiResponse&lt;NAWelcomeEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomeEventResponse> getnexteventsWithHttpInfo(String homeId, String eventId, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getnexteventsValidateBeforeCall(homeId, eventId, size, null);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns previous events. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param eventId Your request will retrieve events occured before this one (required)
     * @param size Number of events to retrieve. Default is 30. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getnexteventsAsync(String homeId, String eventId, Integer size, final ApiCallback<NAWelcomeEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getnexteventsValidateBeforeCall(homeId, eventId, size, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomeEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setpersonsaway
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId If a person_id is specified, that person will be set as &#39;Away&#39;. If no person_id is specified, the Home will be set as &#39;Empty&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setpersonsawayCall(String homeId, String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setpersonsaway";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person_id", personId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setpersonsawayValidateBeforeCall(String homeId, String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeId' is set
        if (homeId == null) {
            throw new ApiException("Missing the required parameter 'homeId' when calling setpersonsaway(Async)");
        }

        return setpersonsawayCall(homeId, personId, _callback);

    }

    /**
     * 
     * Sets a person as &#39;Away&#39; or the Home as &#39;Empty&#39;. The event will be added to the user’s timeline. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId If a person_id is specified, that person will be set as &#39;Away&#39;. If no person_id is specified, the Home will be set as &#39;Empty&#39;. (optional)
     * @return NAWelcomePersonsAwayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomePersonsAwayResponse setpersonsaway(String homeId, String personId) throws ApiException {
        ApiResponse<NAWelcomePersonsAwayResponse> localVarResp = setpersonsawayWithHttpInfo(homeId, personId);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets a person as &#39;Away&#39; or the Home as &#39;Empty&#39;. The event will be added to the user’s timeline. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId If a person_id is specified, that person will be set as &#39;Away&#39;. If no person_id is specified, the Home will be set as &#39;Empty&#39;. (optional)
     * @return ApiResponse&lt;NAWelcomePersonsAwayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomePersonsAwayResponse> setpersonsawayWithHttpInfo(String homeId, String personId) throws ApiException {
        okhttp3.Call localVarCall = setpersonsawayValidateBeforeCall(homeId, personId, null);
        Type localVarReturnType = new TypeToken<NAWelcomePersonsAwayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets a person as &#39;Away&#39; or the Home as &#39;Empty&#39;. The event will be added to the user’s timeline. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personId If a person_id is specified, that person will be set as &#39;Away&#39;. If no person_id is specified, the Home will be set as &#39;Empty&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setpersonsawayAsync(String homeId, String personId, final ApiCallback<NAWelcomePersonsAwayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setpersonsawayValidateBeforeCall(homeId, personId, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomePersonsAwayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setpersonshome
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personIds List of persons IDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setpersonshomeCall(String homeId, String personIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setpersonshome";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (homeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home_id", homeId));
        }

        if (personIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person_ids", personIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "code_oauth", "password_oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setpersonshomeValidateBeforeCall(String homeId, String personIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'homeId' is set
        if (homeId == null) {
            throw new ApiException("Missing the required parameter 'homeId' when calling setpersonshome(Async)");
        }

        // verify the required parameter 'personIds' is set
        if (personIds == null) {
            throw new ApiException("Missing the required parameter 'personIds' when calling setpersonshome(Async)");
        }

        return setpersonshomeCall(homeId, personIds, _callback);

    }

    /**
     * 
     * Sets a person as &#39;At home&#39;. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personIds List of persons IDs (required)
     * @return NAWelcomePersonsHomeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public NAWelcomePersonsHomeResponse setpersonshome(String homeId, String personIds) throws ApiException {
        ApiResponse<NAWelcomePersonsHomeResponse> localVarResp = setpersonshomeWithHttpInfo(homeId, personIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets a person as &#39;At home&#39;. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personIds List of persons IDs (required)
     * @return ApiResponse&lt;NAWelcomePersonsHomeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NAWelcomePersonsHomeResponse> setpersonshomeWithHttpInfo(String homeId, String personIds) throws ApiException {
        okhttp3.Call localVarCall = setpersonshomeValidateBeforeCall(homeId, personIds, null);
        Type localVarReturnType = new TypeToken<NAWelcomePersonsHomeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets a person as &#39;At home&#39;. 
     * @param homeId ID of the Home you&#39;re interested in (required)
     * @param personIds List of persons IDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setpersonshomeAsync(String homeId, String personIds, final ApiCallback<NAWelcomePersonsHomeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setpersonshomeValidateBeforeCall(homeId, personIds, _callback);
        Type localVarReturnType = new TypeToken<NAWelcomePersonsHomeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
