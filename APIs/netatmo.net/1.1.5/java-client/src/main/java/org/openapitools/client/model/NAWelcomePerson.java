/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NAWelcomeFace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomePerson
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomePerson {
  public static final String SERIALIZED_NAME_FACE = "face";
  @SerializedName(SERIALIZED_NAME_FACE)
  private NAWelcomeFace face;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Integer lastSeen;

  public static final String SERIALIZED_NAME_OUT_OF_SIGHT = "out_of_sight";
  @SerializedName(SERIALIZED_NAME_OUT_OF_SIGHT)
  private Boolean outOfSight;

  public static final String SERIALIZED_NAME_PSEUDO = "pseudo";
  @SerializedName(SERIALIZED_NAME_PSEUDO)
  private String pseudo;

  public NAWelcomePerson() {
  }

  public NAWelcomePerson face(NAWelcomeFace face) {
    this.face = face;
    return this;
  }

  /**
   * Get face
   * @return face
   */
  @javax.annotation.Nullable
  public NAWelcomeFace getFace() {
    return face;
  }

  public void setFace(NAWelcomeFace face) {
    this.face = face;
  }


  public NAWelcomePerson id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the person.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAWelcomePerson lastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Time at which the person was last seen.
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public Integer getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
  }


  public NAWelcomePerson outOfSight(Boolean outOfSight) {
    this.outOfSight = outOfSight;
    return this;
  }

  /**
   * True if the Person is out of sight.
   * @return outOfSight
   */
  @javax.annotation.Nullable
  public Boolean getOutOfSight() {
    return outOfSight;
  }

  public void setOutOfSight(Boolean outOfSight) {
    this.outOfSight = outOfSight;
  }


  public NAWelcomePerson pseudo(String pseudo) {
    this.pseudo = pseudo;
    return this;
  }

  /**
   * Name of the person, if pseudo is missing, person is unknown.
   * @return pseudo
   */
  @javax.annotation.Nullable
  public String getPseudo() {
    return pseudo;
  }

  public void setPseudo(String pseudo) {
    this.pseudo = pseudo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomePerson naWelcomePerson = (NAWelcomePerson) o;
    return Objects.equals(this.face, naWelcomePerson.face) &&
        Objects.equals(this.id, naWelcomePerson.id) &&
        Objects.equals(this.lastSeen, naWelcomePerson.lastSeen) &&
        Objects.equals(this.outOfSight, naWelcomePerson.outOfSight) &&
        Objects.equals(this.pseudo, naWelcomePerson.pseudo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(face, id, lastSeen, outOfSight, pseudo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomePerson {\n");
    sb.append("    face: ").append(toIndentedString(face)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    outOfSight: ").append(toIndentedString(outOfSight)).append("\n");
    sb.append("    pseudo: ").append(toIndentedString(pseudo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("face");
    openapiFields.add("id");
    openapiFields.add("last_seen");
    openapiFields.add("out_of_sight");
    openapiFields.add("pseudo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomePerson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomePerson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomePerson is not found in the empty JSON string", NAWelcomePerson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomePerson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomePerson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `face`
      if (jsonObj.get("face") != null && !jsonObj.get("face").isJsonNull()) {
        NAWelcomeFace.validateJsonElement(jsonObj.get("face"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("pseudo") != null && !jsonObj.get("pseudo").isJsonNull()) && !jsonObj.get("pseudo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pseudo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pseudo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomePerson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomePerson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomePerson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomePerson.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomePerson>() {
           @Override
           public void write(JsonWriter out, NAWelcomePerson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomePerson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomePerson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomePerson
   * @throws IOException if the JSON string is invalid with respect to NAWelcomePerson
   */
  public static NAWelcomePerson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomePerson.class);
  }

  /**
   * Convert an instance of NAWelcomePerson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

