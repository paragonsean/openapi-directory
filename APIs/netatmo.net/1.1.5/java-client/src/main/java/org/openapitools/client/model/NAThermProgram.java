/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NATimeTableItem;
import org.openapitools.client.model.NAZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAThermProgram
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAThermProgram {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "program_id";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private String programId;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_TIMETABLE = "timetable";
  @SerializedName(SERIALIZED_NAME_TIMETABLE)
  private List<NATimeTableItem> timetable = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONES = "zones";
  @SerializedName(SERIALIZED_NAME_ZONES)
  private List<NAZone> zones = new ArrayList<>();

  public NAThermProgram() {
  }

  public NAThermProgram name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NAThermProgram programId(String programId) {
    this.programId = programId;
    return this;
  }

  /**
   * Get programId
   * @return programId
   */
  @javax.annotation.Nullable
  public String getProgramId() {
    return programId;
  }

  public void setProgramId(String programId) {
    this.programId = programId;
  }


  public NAThermProgram selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

  /**
   * Get selected
   * @return selected
   */
  @javax.annotation.Nullable
  public Boolean getSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public NAThermProgram timetable(List<NATimeTableItem> timetable) {
    this.timetable = timetable;
    return this;
  }

  public NAThermProgram addTimetableItem(NATimeTableItem timetableItem) {
    if (this.timetable == null) {
      this.timetable = new ArrayList<>();
    }
    this.timetable.add(timetableItem);
    return this;
  }

  /**
   * Get timetable
   * @return timetable
   */
  @javax.annotation.Nullable
  public List<NATimeTableItem> getTimetable() {
    return timetable;
  }

  public void setTimetable(List<NATimeTableItem> timetable) {
    this.timetable = timetable;
  }


  public NAThermProgram zones(List<NAZone> zones) {
    this.zones = zones;
    return this;
  }

  public NAThermProgram addZonesItem(NAZone zonesItem) {
    if (this.zones == null) {
      this.zones = new ArrayList<>();
    }
    this.zones.add(zonesItem);
    return this;
  }

  /**
   * Get zones
   * @return zones
   */
  @javax.annotation.Nullable
  public List<NAZone> getZones() {
    return zones;
  }

  public void setZones(List<NAZone> zones) {
    this.zones = zones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAThermProgram naThermProgram = (NAThermProgram) o;
    return Objects.equals(this.name, naThermProgram.name) &&
        Objects.equals(this.programId, naThermProgram.programId) &&
        Objects.equals(this.selected, naThermProgram.selected) &&
        Objects.equals(this.timetable, naThermProgram.timetable) &&
        Objects.equals(this.zones, naThermProgram.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, programId, selected, timetable, zones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAThermProgram {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    timetable: ").append(toIndentedString(timetable)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("program_id");
    openapiFields.add("selected");
    openapiFields.add("timetable");
    openapiFields.add("zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAThermProgram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAThermProgram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAThermProgram is not found in the empty JSON string", NAThermProgram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAThermProgram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAThermProgram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("program_id") != null && !jsonObj.get("program_id").isJsonNull()) && !jsonObj.get("program_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `program_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("program_id").toString()));
      }
      if (jsonObj.get("timetable") != null && !jsonObj.get("timetable").isJsonNull()) {
        JsonArray jsonArraytimetable = jsonObj.getAsJsonArray("timetable");
        if (jsonArraytimetable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timetable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timetable` to be an array in the JSON string but got `%s`", jsonObj.get("timetable").toString()));
          }

          // validate the optional field `timetable` (array)
          for (int i = 0; i < jsonArraytimetable.size(); i++) {
            NATimeTableItem.validateJsonElement(jsonArraytimetable.get(i));
          };
        }
      }
      if (jsonObj.get("zones") != null && !jsonObj.get("zones").isJsonNull()) {
        JsonArray jsonArrayzones = jsonObj.getAsJsonArray("zones");
        if (jsonArrayzones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("zones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `zones` to be an array in the JSON string but got `%s`", jsonObj.get("zones").toString()));
          }

          // validate the optional field `zones` (array)
          for (int i = 0; i < jsonArrayzones.size(); i++) {
            NAZone.validateJsonElement(jsonArrayzones.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAThermProgram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAThermProgram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAThermProgram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAThermProgram.class));

       return (TypeAdapter<T>) new TypeAdapter<NAThermProgram>() {
           @Override
           public void write(JsonWriter out, NAThermProgram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAThermProgram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAThermProgram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAThermProgram
   * @throws IOException if the JSON string is invalid with respect to NAThermProgram
   */
  public static NAThermProgram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAThermProgram.class);
  }

  /**
   * Convert an instance of NAThermProgram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

