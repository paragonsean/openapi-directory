/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NADashboardData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NADashboardData {
  public static final String SERIALIZED_NAME_ABSOLUTE_PRESSURE = "AbsolutePressure";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_PRESSURE)
  private Float absolutePressure;

  public static final String SERIALIZED_NAME_BOILER_OFF = "BoilerOff";
  @SerializedName(SERIALIZED_NAME_BOILER_OFF)
  private Integer boilerOff;

  public static final String SERIALIZED_NAME_BOILER_ON = "BoilerOn";
  @SerializedName(SERIALIZED_NAME_BOILER_ON)
  private Integer boilerOn;

  public static final String SERIALIZED_NAME_C_O2 = "CO2";
  @SerializedName(SERIALIZED_NAME_C_O2)
  private Float CO2;

  public static final String SERIALIZED_NAME_GUST_ANGLE = "GustAngle";
  @SerializedName(SERIALIZED_NAME_GUST_ANGLE)
  private Integer gustAngle;

  public static final String SERIALIZED_NAME_GUST_STRENGTH = "GustStrength";
  @SerializedName(SERIALIZED_NAME_GUST_STRENGTH)
  private Integer gustStrength;

  public static final String SERIALIZED_NAME_HUMIDITY = "Humidity";
  @SerializedName(SERIALIZED_NAME_HUMIDITY)
  private Float humidity;

  public static final String SERIALIZED_NAME_NOISE = "Noise";
  @SerializedName(SERIALIZED_NAME_NOISE)
  private Float noise;

  public static final String SERIALIZED_NAME_PRESSURE = "Pressure";
  @SerializedName(SERIALIZED_NAME_PRESSURE)
  private Float pressure;

  public static final String SERIALIZED_NAME_RAIN = "Rain";
  @SerializedName(SERIALIZED_NAME_RAIN)
  private Float rain;

  public static final String SERIALIZED_NAME_TEMPERATURE = "Temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Float temperature;

  public static final String SERIALIZED_NAME_WIND_ANGLE = "WindAngle";
  @SerializedName(SERIALIZED_NAME_WIND_ANGLE)
  private Integer windAngle;

  public static final String SERIALIZED_NAME_WIND_STRENGTH = "WindStrength";
  @SerializedName(SERIALIZED_NAME_WIND_STRENGTH)
  private Integer windStrength;

  public static final String SERIALIZED_NAME_DATE_MAX_TEMP = "date_max_temp";
  @SerializedName(SERIALIZED_NAME_DATE_MAX_TEMP)
  private Integer dateMaxTemp;

  public static final String SERIALIZED_NAME_DATE_MAX_WIND_STR = "date_max_wind_str";
  @SerializedName(SERIALIZED_NAME_DATE_MAX_WIND_STR)
  private Integer dateMaxWindStr;

  public static final String SERIALIZED_NAME_DATE_MIN_TEMP = "date_min_temp";
  @SerializedName(SERIALIZED_NAME_DATE_MIN_TEMP)
  private Integer dateMinTemp;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private Float deviceId;

  public static final String SERIALIZED_NAME_HEALTH_IDX = "health_idx";
  @SerializedName(SERIALIZED_NAME_HEALTH_IDX)
  private Integer healthIdx;

  public static final String SERIALIZED_NAME_MAX_TEMP = "max_temp";
  @SerializedName(SERIALIZED_NAME_MAX_TEMP)
  private Float maxTemp;

  public static final String SERIALIZED_NAME_MAX_WIND_STR = "max_wind_str";
  @SerializedName(SERIALIZED_NAME_MAX_WIND_STR)
  private Integer maxWindStr;

  public static final String SERIALIZED_NAME_MIN_TEMP = "min_temp";
  @SerializedName(SERIALIZED_NAME_MIN_TEMP)
  private Float minTemp;

  public static final String SERIALIZED_NAME_PRESSURE_TREND = "pressure_trend";
  @SerializedName(SERIALIZED_NAME_PRESSURE_TREND)
  private String pressureTrend;

  public static final String SERIALIZED_NAME_SUM_RAIN1 = "sum_rain_1";
  @SerializedName(SERIALIZED_NAME_SUM_RAIN1)
  private Float sumRain1;

  public static final String SERIALIZED_NAME_SUM_RAIN24 = "sum_rain_24";
  @SerializedName(SERIALIZED_NAME_SUM_RAIN24)
  private Float sumRain24;

  public static final String SERIALIZED_NAME_TEMP_TREND = "temp_trend";
  @SerializedName(SERIALIZED_NAME_TEMP_TREND)
  private String tempTrend;

  public static final String SERIALIZED_NAME_TIME_UTC = "time_utc";
  @SerializedName(SERIALIZED_NAME_TIME_UTC)
  private Integer timeUtc;

  public NADashboardData() {
  }

  public NADashboardData absolutePressure(Float absolutePressure) {
    this.absolutePressure = absolutePressure;
    return this;
  }

  /**
   * Real measured pressure @ time_utc (in mb)
   * @return absolutePressure
   */
  @javax.annotation.Nullable
  public Float getAbsolutePressure() {
    return absolutePressure;
  }

  public void setAbsolutePressure(Float absolutePressure) {
    this.absolutePressure = absolutePressure;
  }


  public NADashboardData boilerOff(Integer boilerOff) {
    this.boilerOff = boilerOff;
    return this;
  }

  /**
   * Get boilerOff
   * @return boilerOff
   */
  @javax.annotation.Nullable
  public Integer getBoilerOff() {
    return boilerOff;
  }

  public void setBoilerOff(Integer boilerOff) {
    this.boilerOff = boilerOff;
  }


  public NADashboardData boilerOn(Integer boilerOn) {
    this.boilerOn = boilerOn;
    return this;
  }

  /**
   * Get boilerOn
   * @return boilerOn
   */
  @javax.annotation.Nullable
  public Integer getBoilerOn() {
    return boilerOn;
  }

  public void setBoilerOn(Integer boilerOn) {
    this.boilerOn = boilerOn;
  }


  public NADashboardData CO2(Float CO2) {
    this.CO2 = CO2;
    return this;
  }

  /**
   * Last Co2 measured @ time_utc (in ppm)
   * @return CO2
   */
  @javax.annotation.Nullable
  public Float getCO2() {
    return CO2;
  }

  public void setCO2(Float CO2) {
    this.CO2 = CO2;
  }


  public NADashboardData gustAngle(Integer gustAngle) {
    this.gustAngle = gustAngle;
    return this;
  }

  /**
   * Direction of the last 5 min highest gust wind
   * @return gustAngle
   */
  @javax.annotation.Nullable
  public Integer getGustAngle() {
    return gustAngle;
  }

  public void setGustAngle(Integer gustAngle) {
    this.gustAngle = gustAngle;
  }


  public NADashboardData gustStrength(Integer gustStrength) {
    this.gustStrength = gustStrength;
    return this;
  }

  /**
   * Speed of the last 5 min highest gust wind
   * @return gustStrength
   */
  @javax.annotation.Nullable
  public Integer getGustStrength() {
    return gustStrength;
  }

  public void setGustStrength(Integer gustStrength) {
    this.gustStrength = gustStrength;
  }


  public NADashboardData humidity(Float humidity) {
    this.humidity = humidity;
    return this;
  }

  /**
   * Last humidity measured @ time_utc (in %)
   * @return humidity
   */
  @javax.annotation.Nullable
  public Float getHumidity() {
    return humidity;
  }

  public void setHumidity(Float humidity) {
    this.humidity = humidity;
  }


  public NADashboardData noise(Float noise) {
    this.noise = noise;
    return this;
  }

  /**
   * Last noise measured @ time_utc (in db)
   * @return noise
   */
  @javax.annotation.Nullable
  public Float getNoise() {
    return noise;
  }

  public void setNoise(Float noise) {
    this.noise = noise;
  }


  public NADashboardData pressure(Float pressure) {
    this.pressure = pressure;
    return this;
  }

  /**
   * Last Sea level pressure measured @ time_utc (in mb)
   * @return pressure
   */
  @javax.annotation.Nullable
  public Float getPressure() {
    return pressure;
  }

  public void setPressure(Float pressure) {
    this.pressure = pressure;
  }


  public NADashboardData rain(Float rain) {
    this.rain = rain;
    return this;
  }

  /**
   * Last rain measured (in mm)
   * @return rain
   */
  @javax.annotation.Nullable
  public Float getRain() {
    return rain;
  }

  public void setRain(Float rain) {
    this.rain = rain;
  }


  public NADashboardData temperature(Float temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * Last temperature measure @ time_utc (in Â°C)
   * @return temperature
   */
  @javax.annotation.Nullable
  public Float getTemperature() {
    return temperature;
  }

  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }


  public NADashboardData windAngle(Integer windAngle) {
    this.windAngle = windAngle;
    return this;
  }

  /**
   * Current 5 min average wind direction measured @ time_utc (in Â°)
   * @return windAngle
   */
  @javax.annotation.Nullable
  public Integer getWindAngle() {
    return windAngle;
  }

  public void setWindAngle(Integer windAngle) {
    this.windAngle = windAngle;
  }


  public NADashboardData windStrength(Integer windStrength) {
    this.windStrength = windStrength;
    return this;
  }

  /**
   * Current 5 min average wind speed measured @ time_utc (in km/h)
   * @return windStrength
   */
  @javax.annotation.Nullable
  public Integer getWindStrength() {
    return windStrength;
  }

  public void setWindStrength(Integer windStrength) {
    this.windStrength = windStrength;
  }


  public NADashboardData dateMaxTemp(Integer dateMaxTemp) {
    this.dateMaxTemp = dateMaxTemp;
    return this;
  }

  /**
   * Timestamp when max temperature was measured
   * @return dateMaxTemp
   */
  @javax.annotation.Nullable
  public Integer getDateMaxTemp() {
    return dateMaxTemp;
  }

  public void setDateMaxTemp(Integer dateMaxTemp) {
    this.dateMaxTemp = dateMaxTemp;
  }


  public NADashboardData dateMaxWindStr(Integer dateMaxWindStr) {
    this.dateMaxWindStr = dateMaxWindStr;
    return this;
  }

  /**
   * Timestamp when max wind strength was measured
   * @return dateMaxWindStr
   */
  @javax.annotation.Nullable
  public Integer getDateMaxWindStr() {
    return dateMaxWindStr;
  }

  public void setDateMaxWindStr(Integer dateMaxWindStr) {
    this.dateMaxWindStr = dateMaxWindStr;
  }


  public NADashboardData dateMinTemp(Integer dateMinTemp) {
    this.dateMinTemp = dateMinTemp;
    return this;
  }

  /**
   * Timestamp when min temperature was measured
   * @return dateMinTemp
   */
  @javax.annotation.Nullable
  public Integer getDateMinTemp() {
    return dateMinTemp;
  }

  public void setDateMinTemp(Integer dateMinTemp) {
    this.dateMinTemp = dateMinTemp;
  }


  public NADashboardData deviceId(Float deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public Float getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(Float deviceId) {
    this.deviceId = deviceId;
  }


  public NADashboardData healthIdx(Integer healthIdx) {
    this.healthIdx = healthIdx;
    return this;
  }

  /**
   * Current health index: 0 &#x3D; Healthy, 1 &#x3D; Fine, 2 &#x3D; Fair, 3 &#x3D; Poor, 4 &#x3D; Unhealthy
   * @return healthIdx
   */
  @javax.annotation.Nullable
  public Integer getHealthIdx() {
    return healthIdx;
  }

  public void setHealthIdx(Integer healthIdx) {
    this.healthIdx = healthIdx;
  }


  public NADashboardData maxTemp(Float maxTemp) {
    this.maxTemp = maxTemp;
    return this;
  }

  /**
   * Min temperature of the day (measured @ date_min_temp)
   * @return maxTemp
   */
  @javax.annotation.Nullable
  public Float getMaxTemp() {
    return maxTemp;
  }

  public void setMaxTemp(Float maxTemp) {
    this.maxTemp = maxTemp;
  }


  public NADashboardData maxWindStr(Integer maxWindStr) {
    this.maxWindStr = maxWindStr;
    return this;
  }

  /**
   * Get maxWindStr
   * @return maxWindStr
   */
  @javax.annotation.Nullable
  public Integer getMaxWindStr() {
    return maxWindStr;
  }

  public void setMaxWindStr(Integer maxWindStr) {
    this.maxWindStr = maxWindStr;
  }


  public NADashboardData minTemp(Float minTemp) {
    this.minTemp = minTemp;
    return this;
  }

  /**
   * Max temperature of the day (measured @ date_max_temp)
   * @return minTemp
   */
  @javax.annotation.Nullable
  public Float getMinTemp() {
    return minTemp;
  }

  public void setMinTemp(Float minTemp) {
    this.minTemp = minTemp;
  }


  public NADashboardData pressureTrend(String pressureTrend) {
    this.pressureTrend = pressureTrend;
    return this;
  }

  /**
   * Pressure evolution trend
   * @return pressureTrend
   */
  @javax.annotation.Nullable
  public String getPressureTrend() {
    return pressureTrend;
  }

  public void setPressureTrend(String pressureTrend) {
    this.pressureTrend = pressureTrend;
  }


  public NADashboardData sumRain1(Float sumRain1) {
    this.sumRain1 = sumRain1;
    return this;
  }

  /**
   * Amount of rain in last hour
   * @return sumRain1
   */
  @javax.annotation.Nullable
  public Float getSumRain1() {
    return sumRain1;
  }

  public void setSumRain1(Float sumRain1) {
    this.sumRain1 = sumRain1;
  }


  public NADashboardData sumRain24(Float sumRain24) {
    this.sumRain24 = sumRain24;
    return this;
  }

  /**
   * Amount of rain today
   * @return sumRain24
   */
  @javax.annotation.Nullable
  public Float getSumRain24() {
    return sumRain24;
  }

  public void setSumRain24(Float sumRain24) {
    this.sumRain24 = sumRain24;
  }


  public NADashboardData tempTrend(String tempTrend) {
    this.tempTrend = tempTrend;
    return this;
  }

  /**
   * Temperature evolution trend
   * @return tempTrend
   */
  @javax.annotation.Nullable
  public String getTempTrend() {
    return tempTrend;
  }

  public void setTempTrend(String tempTrend) {
    this.tempTrend = tempTrend;
  }


  public NADashboardData timeUtc(Integer timeUtc) {
    this.timeUtc = timeUtc;
    return this;
  }

  /**
   * Get timeUtc
   * @return timeUtc
   */
  @javax.annotation.Nullable
  public Integer getTimeUtc() {
    return timeUtc;
  }

  public void setTimeUtc(Integer timeUtc) {
    this.timeUtc = timeUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NADashboardData naDashboardData = (NADashboardData) o;
    return Objects.equals(this.absolutePressure, naDashboardData.absolutePressure) &&
        Objects.equals(this.boilerOff, naDashboardData.boilerOff) &&
        Objects.equals(this.boilerOn, naDashboardData.boilerOn) &&
        Objects.equals(this.CO2, naDashboardData.CO2) &&
        Objects.equals(this.gustAngle, naDashboardData.gustAngle) &&
        Objects.equals(this.gustStrength, naDashboardData.gustStrength) &&
        Objects.equals(this.humidity, naDashboardData.humidity) &&
        Objects.equals(this.noise, naDashboardData.noise) &&
        Objects.equals(this.pressure, naDashboardData.pressure) &&
        Objects.equals(this.rain, naDashboardData.rain) &&
        Objects.equals(this.temperature, naDashboardData.temperature) &&
        Objects.equals(this.windAngle, naDashboardData.windAngle) &&
        Objects.equals(this.windStrength, naDashboardData.windStrength) &&
        Objects.equals(this.dateMaxTemp, naDashboardData.dateMaxTemp) &&
        Objects.equals(this.dateMaxWindStr, naDashboardData.dateMaxWindStr) &&
        Objects.equals(this.dateMinTemp, naDashboardData.dateMinTemp) &&
        Objects.equals(this.deviceId, naDashboardData.deviceId) &&
        Objects.equals(this.healthIdx, naDashboardData.healthIdx) &&
        Objects.equals(this.maxTemp, naDashboardData.maxTemp) &&
        Objects.equals(this.maxWindStr, naDashboardData.maxWindStr) &&
        Objects.equals(this.minTemp, naDashboardData.minTemp) &&
        Objects.equals(this.pressureTrend, naDashboardData.pressureTrend) &&
        Objects.equals(this.sumRain1, naDashboardData.sumRain1) &&
        Objects.equals(this.sumRain24, naDashboardData.sumRain24) &&
        Objects.equals(this.tempTrend, naDashboardData.tempTrend) &&
        Objects.equals(this.timeUtc, naDashboardData.timeUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absolutePressure, boilerOff, boilerOn, CO2, gustAngle, gustStrength, humidity, noise, pressure, rain, temperature, windAngle, windStrength, dateMaxTemp, dateMaxWindStr, dateMinTemp, deviceId, healthIdx, maxTemp, maxWindStr, minTemp, pressureTrend, sumRain1, sumRain24, tempTrend, timeUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NADashboardData {\n");
    sb.append("    absolutePressure: ").append(toIndentedString(absolutePressure)).append("\n");
    sb.append("    boilerOff: ").append(toIndentedString(boilerOff)).append("\n");
    sb.append("    boilerOn: ").append(toIndentedString(boilerOn)).append("\n");
    sb.append("    CO2: ").append(toIndentedString(CO2)).append("\n");
    sb.append("    gustAngle: ").append(toIndentedString(gustAngle)).append("\n");
    sb.append("    gustStrength: ").append(toIndentedString(gustStrength)).append("\n");
    sb.append("    humidity: ").append(toIndentedString(humidity)).append("\n");
    sb.append("    noise: ").append(toIndentedString(noise)).append("\n");
    sb.append("    pressure: ").append(toIndentedString(pressure)).append("\n");
    sb.append("    rain: ").append(toIndentedString(rain)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    windAngle: ").append(toIndentedString(windAngle)).append("\n");
    sb.append("    windStrength: ").append(toIndentedString(windStrength)).append("\n");
    sb.append("    dateMaxTemp: ").append(toIndentedString(dateMaxTemp)).append("\n");
    sb.append("    dateMaxWindStr: ").append(toIndentedString(dateMaxWindStr)).append("\n");
    sb.append("    dateMinTemp: ").append(toIndentedString(dateMinTemp)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    healthIdx: ").append(toIndentedString(healthIdx)).append("\n");
    sb.append("    maxTemp: ").append(toIndentedString(maxTemp)).append("\n");
    sb.append("    maxWindStr: ").append(toIndentedString(maxWindStr)).append("\n");
    sb.append("    minTemp: ").append(toIndentedString(minTemp)).append("\n");
    sb.append("    pressureTrend: ").append(toIndentedString(pressureTrend)).append("\n");
    sb.append("    sumRain1: ").append(toIndentedString(sumRain1)).append("\n");
    sb.append("    sumRain24: ").append(toIndentedString(sumRain24)).append("\n");
    sb.append("    tempTrend: ").append(toIndentedString(tempTrend)).append("\n");
    sb.append("    timeUtc: ").append(toIndentedString(timeUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AbsolutePressure");
    openapiFields.add("BoilerOff");
    openapiFields.add("BoilerOn");
    openapiFields.add("CO2");
    openapiFields.add("GustAngle");
    openapiFields.add("GustStrength");
    openapiFields.add("Humidity");
    openapiFields.add("Noise");
    openapiFields.add("Pressure");
    openapiFields.add("Rain");
    openapiFields.add("Temperature");
    openapiFields.add("WindAngle");
    openapiFields.add("WindStrength");
    openapiFields.add("date_max_temp");
    openapiFields.add("date_max_wind_str");
    openapiFields.add("date_min_temp");
    openapiFields.add("device_id");
    openapiFields.add("health_idx");
    openapiFields.add("max_temp");
    openapiFields.add("max_wind_str");
    openapiFields.add("min_temp");
    openapiFields.add("pressure_trend");
    openapiFields.add("sum_rain_1");
    openapiFields.add("sum_rain_24");
    openapiFields.add("temp_trend");
    openapiFields.add("time_utc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NADashboardData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NADashboardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NADashboardData is not found in the empty JSON string", NADashboardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NADashboardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NADashboardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pressure_trend") != null && !jsonObj.get("pressure_trend").isJsonNull()) && !jsonObj.get("pressure_trend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pressure_trend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pressure_trend").toString()));
      }
      if ((jsonObj.get("temp_trend") != null && !jsonObj.get("temp_trend").isJsonNull()) && !jsonObj.get("temp_trend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temp_trend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temp_trend").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NADashboardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NADashboardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NADashboardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NADashboardData.class));

       return (TypeAdapter<T>) new TypeAdapter<NADashboardData>() {
           @Override
           public void write(JsonWriter out, NADashboardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NADashboardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NADashboardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NADashboardData
   * @throws IOException if the JSON string is invalid with respect to NADashboardData
   */
  public static NADashboardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NADashboardData.class);
  }

  /**
   * Convert an instance of NADashboardData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

