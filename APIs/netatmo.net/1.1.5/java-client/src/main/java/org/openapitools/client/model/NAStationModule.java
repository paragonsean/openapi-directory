/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NADashboardData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAStationModule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAStationModule {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BATTERY_PERCENT = "battery_percent";
  @SerializedName(SERIALIZED_NAME_BATTERY_PERCENT)
  private Integer batteryPercent;

  public static final String SERIALIZED_NAME_BATTERY_VP = "battery_vp";
  @SerializedName(SERIALIZED_NAME_BATTERY_VP)
  private Integer batteryVp;

  public static final String SERIALIZED_NAME_DASHBOARD_DATA = "dashboard_data";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DATA)
  private NADashboardData dashboardData;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private List<String> dataType = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private Integer firmware;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "last_message";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private Integer lastMessage;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Integer lastSeen;

  public static final String SERIALIZED_NAME_LAST_SETUP = "last_setup";
  @SerializedName(SERIALIZED_NAME_LAST_SETUP)
  private Integer lastSetup;

  public static final String SERIALIZED_NAME_MODULE_NAME = "module_name";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_REACHABLE = "reachable";
  @SerializedName(SERIALIZED_NAME_REACHABLE)
  private Boolean reachable;

  public static final String SERIALIZED_NAME_RF_STATUS = "rf_status";
  @SerializedName(SERIALIZED_NAME_RF_STATUS)
  private Integer rfStatus;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public NAStationModule() {
  }

  public NAStationModule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAStationModule batteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
    return this;
  }

  /**
   * It contains the current battery level in percentage.
   * @return batteryPercent
   */
  @javax.annotation.Nullable
  public Integer getBatteryPercent() {
    return batteryPercent;
  }

  public void setBatteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
  }


  public NAStationModule batteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
    return this;
  }

  /**
   * It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type. \&quot;Indoor module Battery range: 6000 ... 4200\&quot; | INDOOR_BATTERY_LEVEL_FULL &#x3D; 5640 INDOOR_BATTERY_LEVEL_HIGH &#x3D; 5280 INDOOR_BATTERY_LEVEL_MEDIUM &#x3D; 4920 INDOOR_BATTERY_LEVEL_LOW &#x3D; 4560 \&quot;Below 4560: very low\&quot; |      \&quot;Raingauge and outdoor module Battery range: 6000 ... 3600\&quot; | BATTERY_LEVEL_FULL &#x3D; 5500 BATTERY_LEVEL_HIGH &#x3D; 5000 BATTERY_LEVEL_MEDIUM &#x3D; 4500 BATTERY_LEVEL_LOW &#x3D; 4000 \&quot;Below 4000: very low\&quot; |      \&quot;Thermostat Battery range: 4500 ... 3000\&quot; | THERMOSTAT_BATTERY_LEVEL_FULL &#x3D; 4100 THERMOSTAT_BATTERY_LEVEL_HIGH &#x3D; 3600 THERMOSTAT_BATTERY_LEVEL_MEDIUM &#x3D; 3300 THERMOSTAT_BATTERY_LEVEL_LOW &#x3D; 3000 \&quot;Below 3000: very low\&quot; 
   * @return batteryVp
   */
  @javax.annotation.Nullable
  public Integer getBatteryVp() {
    return batteryVp;
  }

  public void setBatteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
  }


  public NAStationModule dashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
    return this;
  }

  /**
   * Get dashboardData
   * @return dashboardData
   */
  @javax.annotation.Nullable
  public NADashboardData getDashboardData() {
    return dashboardData;
  }

  public void setDashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
  }


  public NAStationModule dataType(List<String> dataType) {
    this.dataType = dataType;
    return this;
  }

  public NAStationModule addDataTypeItem(String dataTypeItem) {
    if (this.dataType == null) {
      this.dataType = new ArrayList<>();
    }
    this.dataType.add(dataTypeItem);
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public List<String> getDataType() {
    return dataType;
  }

  public void setDataType(List<String> dataType) {
    this.dataType = dataType;
  }


  public NAStationModule firmware(Integer firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Get firmware
   * @return firmware
   */
  @javax.annotation.Nullable
  public Integer getFirmware() {
    return firmware;
  }

  public void setFirmware(Integer firmware) {
    this.firmware = firmware;
  }


  public NAStationModule lastMessage(Integer lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

  /**
   * Get lastMessage
   * @return lastMessage
   */
  @javax.annotation.Nullable
  public Integer getLastMessage() {
    return lastMessage;
  }

  public void setLastMessage(Integer lastMessage) {
    this.lastMessage = lastMessage;
  }


  public NAStationModule lastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

  /**
   * Get lastSeen
   * @return lastSeen
   */
  @javax.annotation.Nullable
  public Integer getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Integer lastSeen) {
    this.lastSeen = lastSeen;
  }


  public NAStationModule lastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
    return this;
  }

  /**
   * Get lastSetup
   * @return lastSetup
   */
  @javax.annotation.Nullable
  public Integer getLastSetup() {
    return lastSetup;
  }

  public void setLastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
  }


  public NAStationModule moduleName(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }

  /**
   * Get moduleName
   * @return moduleName
   */
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }

  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public NAStationModule reachable(Boolean reachable) {
    this.reachable = reachable;
    return this;
  }

  /**
   * true when the station was seen by the Netatmo cloud within the last 4 hours
   * @return reachable
   */
  @javax.annotation.Nullable
  public Boolean getReachable() {
    return reachable;
  }

  public void setReachable(Boolean reachable) {
    this.reachable = reachable;
  }


  public NAStationModule rfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
    return this;
  }

  /**
   * \&quot;It contains the current radio status. The different thresholds to take into account are :\&quot; | RADIO_THRESHOLD_SIGNAL_LOW &#x3D; 90  RADIO_THRESHOLD_SIGNAL_MEDIUM &#x3D; 80 RADIO_THRESHOLD_SIGNAL_HIGH &#x3D; 70 RADIO_THRESHOLD_SIGNAL_FULL &#x3D; 60 
   * @return rfStatus
   */
  @javax.annotation.Nullable
  public Integer getRfStatus() {
    return rfStatus;
  }

  public void setRfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
  }


  public NAStationModule type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAStationModule naStationModule = (NAStationModule) o;
    return Objects.equals(this.id, naStationModule.id) &&
        Objects.equals(this.batteryPercent, naStationModule.batteryPercent) &&
        Objects.equals(this.batteryVp, naStationModule.batteryVp) &&
        Objects.equals(this.dashboardData, naStationModule.dashboardData) &&
        Objects.equals(this.dataType, naStationModule.dataType) &&
        Objects.equals(this.firmware, naStationModule.firmware) &&
        Objects.equals(this.lastMessage, naStationModule.lastMessage) &&
        Objects.equals(this.lastSeen, naStationModule.lastSeen) &&
        Objects.equals(this.lastSetup, naStationModule.lastSetup) &&
        Objects.equals(this.moduleName, naStationModule.moduleName) &&
        Objects.equals(this.reachable, naStationModule.reachable) &&
        Objects.equals(this.rfStatus, naStationModule.rfStatus) &&
        Objects.equals(this.type, naStationModule.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, batteryPercent, batteryVp, dashboardData, dataType, firmware, lastMessage, lastSeen, lastSetup, moduleName, reachable, rfStatus, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAStationModule {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    batteryPercent: ").append(toIndentedString(batteryPercent)).append("\n");
    sb.append("    batteryVp: ").append(toIndentedString(batteryVp)).append("\n");
    sb.append("    dashboardData: ").append(toIndentedString(dashboardData)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    lastSetup: ").append(toIndentedString(lastSetup)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    reachable: ").append(toIndentedString(reachable)).append("\n");
    sb.append("    rfStatus: ").append(toIndentedString(rfStatus)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("battery_percent");
    openapiFields.add("battery_vp");
    openapiFields.add("dashboard_data");
    openapiFields.add("data_type");
    openapiFields.add("firmware");
    openapiFields.add("last_message");
    openapiFields.add("last_seen");
    openapiFields.add("last_setup");
    openapiFields.add("module_name");
    openapiFields.add("reachable");
    openapiFields.add("rf_status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAStationModule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAStationModule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAStationModule is not found in the empty JSON string", NAStationModule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAStationModule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAStationModule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      // validate the optional field `dashboard_data`
      if (jsonObj.get("dashboard_data") != null && !jsonObj.get("dashboard_data").isJsonNull()) {
        NADashboardData.validateJsonElement(jsonObj.get("dashboard_data"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull() && !jsonObj.get("data_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be an array in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      if ((jsonObj.get("module_name") != null && !jsonObj.get("module_name").isJsonNull()) && !jsonObj.get("module_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAStationModule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAStationModule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAStationModule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAStationModule.class));

       return (TypeAdapter<T>) new TypeAdapter<NAStationModule>() {
           @Override
           public void write(JsonWriter out, NAStationModule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAStationModule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAStationModule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAStationModule
   * @throws IOException if the JSON string is invalid with respect to NAStationModule
   */
  public static NAStationModule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAStationModule.class);
  }

  /**
   * Convert an instance of NAStationModule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

