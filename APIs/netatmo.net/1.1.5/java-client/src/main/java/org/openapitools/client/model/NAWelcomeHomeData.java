/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NAWelcomeGlobalInfo;
import org.openapitools.client.model.NAWelcomeHome;
import org.openapitools.client.model.NAWelcomeUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomeHomeData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomeHomeData {
  public static final String SERIALIZED_NAME_GLOBAL_INFO = "global_info";
  @SerializedName(SERIALIZED_NAME_GLOBAL_INFO)
  private NAWelcomeGlobalInfo globalInfo;

  public static final String SERIALIZED_NAME_HOMES = "homes";
  @SerializedName(SERIALIZED_NAME_HOMES)
  private List<NAWelcomeHome> homes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NAWelcomeUser user;

  public NAWelcomeHomeData() {
  }

  public NAWelcomeHomeData globalInfo(NAWelcomeGlobalInfo globalInfo) {
    this.globalInfo = globalInfo;
    return this;
  }

  /**
   * Get globalInfo
   * @return globalInfo
   */
  @javax.annotation.Nullable
  public NAWelcomeGlobalInfo getGlobalInfo() {
    return globalInfo;
  }

  public void setGlobalInfo(NAWelcomeGlobalInfo globalInfo) {
    this.globalInfo = globalInfo;
  }


  public NAWelcomeHomeData homes(List<NAWelcomeHome> homes) {
    this.homes = homes;
    return this;
  }

  public NAWelcomeHomeData addHomesItem(NAWelcomeHome homesItem) {
    if (this.homes == null) {
      this.homes = new ArrayList<>();
    }
    this.homes.add(homesItem);
    return this;
  }

  /**
   * Get homes
   * @return homes
   */
  @javax.annotation.Nullable
  public List<NAWelcomeHome> getHomes() {
    return homes;
  }

  public void setHomes(List<NAWelcomeHome> homes) {
    this.homes = homes;
  }


  public NAWelcomeHomeData user(NAWelcomeUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public NAWelcomeUser getUser() {
    return user;
  }

  public void setUser(NAWelcomeUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomeHomeData naWelcomeHomeData = (NAWelcomeHomeData) o;
    return Objects.equals(this.globalInfo, naWelcomeHomeData.globalInfo) &&
        Objects.equals(this.homes, naWelcomeHomeData.homes) &&
        Objects.equals(this.user, naWelcomeHomeData.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalInfo, homes, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomeHomeData {\n");
    sb.append("    globalInfo: ").append(toIndentedString(globalInfo)).append("\n");
    sb.append("    homes: ").append(toIndentedString(homes)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("global_info");
    openapiFields.add("homes");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomeHomeData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomeHomeData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomeHomeData is not found in the empty JSON string", NAWelcomeHomeData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomeHomeData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomeHomeData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `global_info`
      if (jsonObj.get("global_info") != null && !jsonObj.get("global_info").isJsonNull()) {
        NAWelcomeGlobalInfo.validateJsonElement(jsonObj.get("global_info"));
      }
      if (jsonObj.get("homes") != null && !jsonObj.get("homes").isJsonNull()) {
        JsonArray jsonArrayhomes = jsonObj.getAsJsonArray("homes");
        if (jsonArrayhomes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("homes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `homes` to be an array in the JSON string but got `%s`", jsonObj.get("homes").toString()));
          }

          // validate the optional field `homes` (array)
          for (int i = 0; i < jsonArrayhomes.size(); i++) {
            NAWelcomeHome.validateJsonElement(jsonArrayhomes.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        NAWelcomeUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomeHomeData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomeHomeData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomeHomeData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomeHomeData.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomeHomeData>() {
           @Override
           public void write(JsonWriter out, NAWelcomeHomeData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomeHomeData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomeHomeData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomeHomeData
   * @throws IOException if the JSON string is invalid with respect to NAWelcomeHomeData
   */
  public static NAWelcomeHomeData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomeHomeData.class);
  }

  /**
   * Convert an instance of NAWelcomeHomeData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

