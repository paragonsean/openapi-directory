/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NAWelcomeCamera;
import org.openapitools.client.model.NAWelcomeEvent;
import org.openapitools.client.model.NAWelcomeModule;
import org.openapitools.client.model.NAWelcomePerson;
import org.openapitools.client.model.NAWelcomePlace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomeHome
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomeHome {
  public static final String SERIALIZED_NAME_CAMERAS = "cameras";
  @SerializedName(SERIALIZED_NAME_CAMERAS)
  private List<NAWelcomeCamera> cameras = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<NAWelcomeEvent> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<NAWelcomeModule> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERSONS = "persons";
  @SerializedName(SERIALIZED_NAME_PERSONS)
  private List<NAWelcomePerson> persons = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private NAWelcomePlace place;

  public NAWelcomeHome() {
  }

  public NAWelcomeHome cameras(List<NAWelcomeCamera> cameras) {
    this.cameras = cameras;
    return this;
  }

  public NAWelcomeHome addCamerasItem(NAWelcomeCamera camerasItem) {
    if (this.cameras == null) {
      this.cameras = new ArrayList<>();
    }
    this.cameras.add(camerasItem);
    return this;
  }

  /**
   * Get cameras
   * @return cameras
   */
  @javax.annotation.Nullable
  public List<NAWelcomeCamera> getCameras() {
    return cameras;
  }

  public void setCameras(List<NAWelcomeCamera> cameras) {
    this.cameras = cameras;
  }


  public NAWelcomeHome events(List<NAWelcomeEvent> events) {
    this.events = events;
    return this;
  }

  public NAWelcomeHome addEventsItem(NAWelcomeEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<NAWelcomeEvent> getEvents() {
    return events;
  }

  public void setEvents(List<NAWelcomeEvent> events) {
    this.events = events;
  }


  public NAWelcomeHome id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the home.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAWelcomeHome modules(List<NAWelcomeModule> modules) {
    this.modules = modules;
    return this;
  }

  public NAWelcomeHome addModulesItem(NAWelcomeModule modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<NAWelcomeModule> getModules() {
    return modules;
  }

  public void setModules(List<NAWelcomeModule> modules) {
    this.modules = modules;
  }


  public NAWelcomeHome name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the home
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NAWelcomeHome persons(List<NAWelcomePerson> persons) {
    this.persons = persons;
    return this;
  }

  public NAWelcomeHome addPersonsItem(NAWelcomePerson personsItem) {
    if (this.persons == null) {
      this.persons = new ArrayList<>();
    }
    this.persons.add(personsItem);
    return this;
  }

  /**
   * Get persons
   * @return persons
   */
  @javax.annotation.Nullable
  public List<NAWelcomePerson> getPersons() {
    return persons;
  }

  public void setPersons(List<NAWelcomePerson> persons) {
    this.persons = persons;
  }


  public NAWelcomeHome place(NAWelcomePlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public NAWelcomePlace getPlace() {
    return place;
  }

  public void setPlace(NAWelcomePlace place) {
    this.place = place;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomeHome naWelcomeHome = (NAWelcomeHome) o;
    return Objects.equals(this.cameras, naWelcomeHome.cameras) &&
        Objects.equals(this.events, naWelcomeHome.events) &&
        Objects.equals(this.id, naWelcomeHome.id) &&
        Objects.equals(this.modules, naWelcomeHome.modules) &&
        Objects.equals(this.name, naWelcomeHome.name) &&
        Objects.equals(this.persons, naWelcomeHome.persons) &&
        Objects.equals(this.place, naWelcomeHome.place);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cameras, events, id, modules, name, persons, place);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomeHome {\n");
    sb.append("    cameras: ").append(toIndentedString(cameras)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    persons: ").append(toIndentedString(persons)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cameras");
    openapiFields.add("events");
    openapiFields.add("id");
    openapiFields.add("modules");
    openapiFields.add("name");
    openapiFields.add("persons");
    openapiFields.add("place");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomeHome
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomeHome.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomeHome is not found in the empty JSON string", NAWelcomeHome.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomeHome.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomeHome` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cameras") != null && !jsonObj.get("cameras").isJsonNull()) {
        JsonArray jsonArraycameras = jsonObj.getAsJsonArray("cameras");
        if (jsonArraycameras != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cameras").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cameras` to be an array in the JSON string but got `%s`", jsonObj.get("cameras").toString()));
          }

          // validate the optional field `cameras` (array)
          for (int i = 0; i < jsonArraycameras.size(); i++) {
            NAWelcomeCamera.validateJsonElement(jsonArraycameras.get(i));
          };
        }
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            NAWelcomeEvent.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull()) {
        JsonArray jsonArraymodules = jsonObj.getAsJsonArray("modules");
        if (jsonArraymodules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
          }

          // validate the optional field `modules` (array)
          for (int i = 0; i < jsonArraymodules.size(); i++) {
            NAWelcomeModule.validateJsonElement(jsonArraymodules.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("persons") != null && !jsonObj.get("persons").isJsonNull()) {
        JsonArray jsonArraypersons = jsonObj.getAsJsonArray("persons");
        if (jsonArraypersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persons` to be an array in the JSON string but got `%s`", jsonObj.get("persons").toString()));
          }

          // validate the optional field `persons` (array)
          for (int i = 0; i < jsonArraypersons.size(); i++) {
            NAWelcomePerson.validateJsonElement(jsonArraypersons.get(i));
          };
        }
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        NAWelcomePlace.validateJsonElement(jsonObj.get("place"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomeHome.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomeHome' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomeHome> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomeHome.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomeHome>() {
           @Override
           public void write(JsonWriter out, NAWelcomeHome value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomeHome read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomeHome given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomeHome
   * @throws IOException if the JSON string is invalid with respect to NAWelcomeHome
   */
  public static NAWelcomeHome fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomeHome.class);
  }

  /**
   * Convert an instance of NAWelcomeHome to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

