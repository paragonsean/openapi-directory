/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAWelcomeCamera
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAWelcomeCamera {
  public static final String SERIALIZED_NAME_ALIM_STATUS = "alim_status";
  @SerializedName(SERIALIZED_NAME_ALIM_STATUS)
  private String alimStatus;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_LOCAL = "is_local";
  @SerializedName(SERIALIZED_NAME_IS_LOCAL)
  private Boolean isLocal;

  /**
   * State of (flood-)light
   */
  @JsonAdapter(LightModeStatusEnum.Adapter.class)
  public enum LightModeStatusEnum {
    TRUE("true"),
    
    FALSE("false"),
    
    AUTO("auto");

    private String value;

    LightModeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LightModeStatusEnum fromValue(String value) {
      for (LightModeStatusEnum b : LightModeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LightModeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LightModeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LightModeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LightModeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LightModeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIGHT_MODE_STATUS = "light_mode_status";
  @SerializedName(SERIALIZED_NAME_LIGHT_MODE_STATUS)
  private LightModeStatusEnum lightModeStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SD_STATUS = "sd_status";
  @SerializedName(SERIALIZED_NAME_SD_STATUS)
  private String sdStatus;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VPN_URL = "vpn_url";
  @SerializedName(SERIALIZED_NAME_VPN_URL)
  private String vpnUrl;

  public NAWelcomeCamera() {
  }

  public NAWelcomeCamera alimStatus(String alimStatus) {
    this.alimStatus = alimStatus;
    return this;
  }

  /**
   * If power supply is ok (on/off)
   * @return alimStatus
   */
  @javax.annotation.Nullable
  public String getAlimStatus() {
    return alimStatus;
  }

  public void setAlimStatus(String alimStatus) {
    this.alimStatus = alimStatus;
  }


  public NAWelcomeCamera id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the camera
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAWelcomeCamera isLocal(Boolean isLocal) {
    this.isLocal = isLocal;
    return this;
  }

  /**
   * Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)
   * @return isLocal
   */
  @javax.annotation.Nullable
  public Boolean getIsLocal() {
    return isLocal;
  }

  public void setIsLocal(Boolean isLocal) {
    this.isLocal = isLocal;
  }


  public NAWelcomeCamera lightModeStatus(LightModeStatusEnum lightModeStatus) {
    this.lightModeStatus = lightModeStatus;
    return this;
  }

  /**
   * State of (flood-)light
   * @return lightModeStatus
   */
  @javax.annotation.Nullable
  public LightModeStatusEnum getLightModeStatus() {
    return lightModeStatus;
  }

  public void setLightModeStatus(LightModeStatusEnum lightModeStatus) {
    this.lightModeStatus = lightModeStatus;
  }


  public NAWelcomeCamera name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the camera
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NAWelcomeCamera sdStatus(String sdStatus) {
    this.sdStatus = sdStatus;
    return this;
  }

  /**
   * If SD card status is ok (on/off)
   * @return sdStatus
   */
  @javax.annotation.Nullable
  public String getSdStatus() {
    return sdStatus;
  }

  public void setSdStatus(String sdStatus) {
    this.sdStatus = sdStatus;
  }


  public NAWelcomeCamera status(String status) {
    this.status = status;
    return this;
  }

  /**
   * If camera is monitoring (on/off)
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public NAWelcomeCamera type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the camera
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NAWelcomeCamera vpnUrl(String vpnUrl) {
    this.vpnUrl = vpnUrl;
    return this;
  }

  /**
   * Only for scope access_camera. Address of the camera
   * @return vpnUrl
   */
  @javax.annotation.Nullable
  public String getVpnUrl() {
    return vpnUrl;
  }

  public void setVpnUrl(String vpnUrl) {
    this.vpnUrl = vpnUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAWelcomeCamera naWelcomeCamera = (NAWelcomeCamera) o;
    return Objects.equals(this.alimStatus, naWelcomeCamera.alimStatus) &&
        Objects.equals(this.id, naWelcomeCamera.id) &&
        Objects.equals(this.isLocal, naWelcomeCamera.isLocal) &&
        Objects.equals(this.lightModeStatus, naWelcomeCamera.lightModeStatus) &&
        Objects.equals(this.name, naWelcomeCamera.name) &&
        Objects.equals(this.sdStatus, naWelcomeCamera.sdStatus) &&
        Objects.equals(this.status, naWelcomeCamera.status) &&
        Objects.equals(this.type, naWelcomeCamera.type) &&
        Objects.equals(this.vpnUrl, naWelcomeCamera.vpnUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alimStatus, id, isLocal, lightModeStatus, name, sdStatus, status, type, vpnUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAWelcomeCamera {\n");
    sb.append("    alimStatus: ").append(toIndentedString(alimStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("    lightModeStatus: ").append(toIndentedString(lightModeStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sdStatus: ").append(toIndentedString(sdStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vpnUrl: ").append(toIndentedString(vpnUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alim_status");
    openapiFields.add("id");
    openapiFields.add("is_local");
    openapiFields.add("light_mode_status");
    openapiFields.add("name");
    openapiFields.add("sd_status");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("vpn_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAWelcomeCamera
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAWelcomeCamera.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAWelcomeCamera is not found in the empty JSON string", NAWelcomeCamera.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAWelcomeCamera.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAWelcomeCamera` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alim_status") != null && !jsonObj.get("alim_status").isJsonNull()) && !jsonObj.get("alim_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alim_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alim_status").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("light_mode_status") != null && !jsonObj.get("light_mode_status").isJsonNull()) && !jsonObj.get("light_mode_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `light_mode_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("light_mode_status").toString()));
      }
      // validate the optional field `light_mode_status`
      if (jsonObj.get("light_mode_status") != null && !jsonObj.get("light_mode_status").isJsonNull()) {
        LightModeStatusEnum.validateJsonElement(jsonObj.get("light_mode_status"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sd_status") != null && !jsonObj.get("sd_status").isJsonNull()) && !jsonObj.get("sd_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sd_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sd_status").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("vpn_url") != null && !jsonObj.get("vpn_url").isJsonNull()) && !jsonObj.get("vpn_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpn_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpn_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAWelcomeCamera.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAWelcomeCamera' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAWelcomeCamera> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAWelcomeCamera.class));

       return (TypeAdapter<T>) new TypeAdapter<NAWelcomeCamera>() {
           @Override
           public void write(JsonWriter out, NAWelcomeCamera value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAWelcomeCamera read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAWelcomeCamera given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAWelcomeCamera
   * @throws IOException if the JSON string is invalid with respect to NAWelcomeCamera
   */
  public static NAWelcomeCamera fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAWelcomeCamera.class);
  }

  /**
   * Convert an instance of NAWelcomeCamera to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

