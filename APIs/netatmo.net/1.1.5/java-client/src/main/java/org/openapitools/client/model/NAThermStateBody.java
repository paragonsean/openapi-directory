/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NASetpoint;
import org.openapitools.client.model.NAThermMeasure;
import org.openapitools.client.model.NAThermProgram;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAThermStateBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAThermStateBody {
  public static final String SERIALIZED_NAME_BATTERY_PERCENT = "battery_percent";
  @SerializedName(SERIALIZED_NAME_BATTERY_PERCENT)
  private Integer batteryPercent;

  public static final String SERIALIZED_NAME_BATTERY_VP = "battery_vp";
  @SerializedName(SERIALIZED_NAME_BATTERY_VP)
  private Integer batteryVp;

  public static final String SERIALIZED_NAME_LAST_PLUG_SEEN = "last_plug_seen";
  @SerializedName(SERIALIZED_NAME_LAST_PLUG_SEEN)
  private Integer lastPlugSeen;

  public static final String SERIALIZED_NAME_LAST_THERM_SEEN = "last_therm_seen";
  @SerializedName(SERIALIZED_NAME_LAST_THERM_SEEN)
  private Integer lastThermSeen;

  public static final String SERIALIZED_NAME_MEASURED = "measured";
  @SerializedName(SERIALIZED_NAME_MEASURED)
  private NAThermMeasure measured;

  public static final String SERIALIZED_NAME_PLUG_CONNECTED_BOILER = "plug_connected_boiler";
  @SerializedName(SERIALIZED_NAME_PLUG_CONNECTED_BOILER)
  private Integer plugConnectedBoiler;

  public static final String SERIALIZED_NAME_RF_STATUS = "rf_status";
  @SerializedName(SERIALIZED_NAME_RF_STATUS)
  private Integer rfStatus;

  public static final String SERIALIZED_NAME_SETPOINT = "setpoint";
  @SerializedName(SERIALIZED_NAME_SETPOINT)
  private NASetpoint setpoint;

  public static final String SERIALIZED_NAME_SETPOINT_ORDER = "setpoint_order";
  @SerializedName(SERIALIZED_NAME_SETPOINT_ORDER)
  private NASetpoint setpointOrder;

  public static final String SERIALIZED_NAME_THERM_ORIENTATION = "therm_orientation";
  @SerializedName(SERIALIZED_NAME_THERM_ORIENTATION)
  private Integer thermOrientation;

  public static final String SERIALIZED_NAME_THERM_PROGRAM = "therm_program";
  @SerializedName(SERIALIZED_NAME_THERM_PROGRAM)
  private NAThermProgram thermProgram;

  public static final String SERIALIZED_NAME_THERM_PROGRAM_BACKUP = "therm_program_backup";
  @SerializedName(SERIALIZED_NAME_THERM_PROGRAM_BACKUP)
  private List<NAThermProgram> thermProgramBackup = new ArrayList<>();

  public static final String SERIALIZED_NAME_THERM_PROGRAM_ORDER = "therm_program_order";
  @SerializedName(SERIALIZED_NAME_THERM_PROGRAM_ORDER)
  private NAThermProgram thermProgramOrder;

  public static final String SERIALIZED_NAME_THERM_RELAY_CMD = "therm_relay_cmd";
  @SerializedName(SERIALIZED_NAME_THERM_RELAY_CMD)
  private Integer thermRelayCmd;

  public static final String SERIALIZED_NAME_UDP_CONN = "udp_conn";
  @SerializedName(SERIALIZED_NAME_UDP_CONN)
  private Boolean udpConn;

  public static final String SERIALIZED_NAME_WIFI_STATUS = "wifi_status";
  @SerializedName(SERIALIZED_NAME_WIFI_STATUS)
  private Integer wifiStatus;

  public NAThermStateBody() {
  }

  public NAThermStateBody batteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
    return this;
  }

  /**
   * It contains the current battery level in percentage.
   * @return batteryPercent
   */
  @javax.annotation.Nullable
  public Integer getBatteryPercent() {
    return batteryPercent;
  }

  public void setBatteryPercent(Integer batteryPercent) {
    this.batteryPercent = batteryPercent;
  }


  public NAThermStateBody batteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
    return this;
  }

  /**
   * Get batteryVp
   * @return batteryVp
   */
  @javax.annotation.Nullable
  public Integer getBatteryVp() {
    return batteryVp;
  }

  public void setBatteryVp(Integer batteryVp) {
    this.batteryVp = batteryVp;
  }


  public NAThermStateBody lastPlugSeen(Integer lastPlugSeen) {
    this.lastPlugSeen = lastPlugSeen;
    return this;
  }

  /**
   * Get lastPlugSeen
   * @return lastPlugSeen
   */
  @javax.annotation.Nullable
  public Integer getLastPlugSeen() {
    return lastPlugSeen;
  }

  public void setLastPlugSeen(Integer lastPlugSeen) {
    this.lastPlugSeen = lastPlugSeen;
  }


  public NAThermStateBody lastThermSeen(Integer lastThermSeen) {
    this.lastThermSeen = lastThermSeen;
    return this;
  }

  /**
   * Get lastThermSeen
   * @return lastThermSeen
   */
  @javax.annotation.Nullable
  public Integer getLastThermSeen() {
    return lastThermSeen;
  }

  public void setLastThermSeen(Integer lastThermSeen) {
    this.lastThermSeen = lastThermSeen;
  }


  public NAThermStateBody measured(NAThermMeasure measured) {
    this.measured = measured;
    return this;
  }

  /**
   * Get measured
   * @return measured
   */
  @javax.annotation.Nullable
  public NAThermMeasure getMeasured() {
    return measured;
  }

  public void setMeasured(NAThermMeasure measured) {
    this.measured = measured;
  }


  public NAThermStateBody plugConnectedBoiler(Integer plugConnectedBoiler) {
    this.plugConnectedBoiler = plugConnectedBoiler;
    return this;
  }

  /**
   * Get plugConnectedBoiler
   * @return plugConnectedBoiler
   */
  @javax.annotation.Nullable
  public Integer getPlugConnectedBoiler() {
    return plugConnectedBoiler;
  }

  public void setPlugConnectedBoiler(Integer plugConnectedBoiler) {
    this.plugConnectedBoiler = plugConnectedBoiler;
  }


  public NAThermStateBody rfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
    return this;
  }

  /**
   * Get rfStatus
   * @return rfStatus
   */
  @javax.annotation.Nullable
  public Integer getRfStatus() {
    return rfStatus;
  }

  public void setRfStatus(Integer rfStatus) {
    this.rfStatus = rfStatus;
  }


  public NAThermStateBody setpoint(NASetpoint setpoint) {
    this.setpoint = setpoint;
    return this;
  }

  /**
   * Get setpoint
   * @return setpoint
   */
  @javax.annotation.Nullable
  public NASetpoint getSetpoint() {
    return setpoint;
  }

  public void setSetpoint(NASetpoint setpoint) {
    this.setpoint = setpoint;
  }


  public NAThermStateBody setpointOrder(NASetpoint setpointOrder) {
    this.setpointOrder = setpointOrder;
    return this;
  }

  /**
   * Get setpointOrder
   * @return setpointOrder
   */
  @javax.annotation.Nullable
  public NASetpoint getSetpointOrder() {
    return setpointOrder;
  }

  public void setSetpointOrder(NASetpoint setpointOrder) {
    this.setpointOrder = setpointOrder;
  }


  public NAThermStateBody thermOrientation(Integer thermOrientation) {
    this.thermOrientation = thermOrientation;
    return this;
  }

  /**
   * Get thermOrientation
   * @return thermOrientation
   */
  @javax.annotation.Nullable
  public Integer getThermOrientation() {
    return thermOrientation;
  }

  public void setThermOrientation(Integer thermOrientation) {
    this.thermOrientation = thermOrientation;
  }


  public NAThermStateBody thermProgram(NAThermProgram thermProgram) {
    this.thermProgram = thermProgram;
    return this;
  }

  /**
   * Get thermProgram
   * @return thermProgram
   */
  @javax.annotation.Nullable
  public NAThermProgram getThermProgram() {
    return thermProgram;
  }

  public void setThermProgram(NAThermProgram thermProgram) {
    this.thermProgram = thermProgram;
  }


  public NAThermStateBody thermProgramBackup(List<NAThermProgram> thermProgramBackup) {
    this.thermProgramBackup = thermProgramBackup;
    return this;
  }

  public NAThermStateBody addThermProgramBackupItem(NAThermProgram thermProgramBackupItem) {
    if (this.thermProgramBackup == null) {
      this.thermProgramBackup = new ArrayList<>();
    }
    this.thermProgramBackup.add(thermProgramBackupItem);
    return this;
  }

  /**
   * Get thermProgramBackup
   * @return thermProgramBackup
   */
  @javax.annotation.Nullable
  public List<NAThermProgram> getThermProgramBackup() {
    return thermProgramBackup;
  }

  public void setThermProgramBackup(List<NAThermProgram> thermProgramBackup) {
    this.thermProgramBackup = thermProgramBackup;
  }


  public NAThermStateBody thermProgramOrder(NAThermProgram thermProgramOrder) {
    this.thermProgramOrder = thermProgramOrder;
    return this;
  }

  /**
   * Get thermProgramOrder
   * @return thermProgramOrder
   */
  @javax.annotation.Nullable
  public NAThermProgram getThermProgramOrder() {
    return thermProgramOrder;
  }

  public void setThermProgramOrder(NAThermProgram thermProgramOrder) {
    this.thermProgramOrder = thermProgramOrder;
  }


  public NAThermStateBody thermRelayCmd(Integer thermRelayCmd) {
    this.thermRelayCmd = thermRelayCmd;
    return this;
  }

  /**
   * Get thermRelayCmd
   * @return thermRelayCmd
   */
  @javax.annotation.Nullable
  public Integer getThermRelayCmd() {
    return thermRelayCmd;
  }

  public void setThermRelayCmd(Integer thermRelayCmd) {
    this.thermRelayCmd = thermRelayCmd;
  }


  public NAThermStateBody udpConn(Boolean udpConn) {
    this.udpConn = udpConn;
    return this;
  }

  /**
   * Get udpConn
   * @return udpConn
   */
  @javax.annotation.Nullable
  public Boolean getUdpConn() {
    return udpConn;
  }

  public void setUdpConn(Boolean udpConn) {
    this.udpConn = udpConn;
  }


  public NAThermStateBody wifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
    return this;
  }

  /**
   * Get wifiStatus
   * @return wifiStatus
   */
  @javax.annotation.Nullable
  public Integer getWifiStatus() {
    return wifiStatus;
  }

  public void setWifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAThermStateBody naThermStateBody = (NAThermStateBody) o;
    return Objects.equals(this.batteryPercent, naThermStateBody.batteryPercent) &&
        Objects.equals(this.batteryVp, naThermStateBody.batteryVp) &&
        Objects.equals(this.lastPlugSeen, naThermStateBody.lastPlugSeen) &&
        Objects.equals(this.lastThermSeen, naThermStateBody.lastThermSeen) &&
        Objects.equals(this.measured, naThermStateBody.measured) &&
        Objects.equals(this.plugConnectedBoiler, naThermStateBody.plugConnectedBoiler) &&
        Objects.equals(this.rfStatus, naThermStateBody.rfStatus) &&
        Objects.equals(this.setpoint, naThermStateBody.setpoint) &&
        Objects.equals(this.setpointOrder, naThermStateBody.setpointOrder) &&
        Objects.equals(this.thermOrientation, naThermStateBody.thermOrientation) &&
        Objects.equals(this.thermProgram, naThermStateBody.thermProgram) &&
        Objects.equals(this.thermProgramBackup, naThermStateBody.thermProgramBackup) &&
        Objects.equals(this.thermProgramOrder, naThermStateBody.thermProgramOrder) &&
        Objects.equals(this.thermRelayCmd, naThermStateBody.thermRelayCmd) &&
        Objects.equals(this.udpConn, naThermStateBody.udpConn) &&
        Objects.equals(this.wifiStatus, naThermStateBody.wifiStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batteryPercent, batteryVp, lastPlugSeen, lastThermSeen, measured, plugConnectedBoiler, rfStatus, setpoint, setpointOrder, thermOrientation, thermProgram, thermProgramBackup, thermProgramOrder, thermRelayCmd, udpConn, wifiStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAThermStateBody {\n");
    sb.append("    batteryPercent: ").append(toIndentedString(batteryPercent)).append("\n");
    sb.append("    batteryVp: ").append(toIndentedString(batteryVp)).append("\n");
    sb.append("    lastPlugSeen: ").append(toIndentedString(lastPlugSeen)).append("\n");
    sb.append("    lastThermSeen: ").append(toIndentedString(lastThermSeen)).append("\n");
    sb.append("    measured: ").append(toIndentedString(measured)).append("\n");
    sb.append("    plugConnectedBoiler: ").append(toIndentedString(plugConnectedBoiler)).append("\n");
    sb.append("    rfStatus: ").append(toIndentedString(rfStatus)).append("\n");
    sb.append("    setpoint: ").append(toIndentedString(setpoint)).append("\n");
    sb.append("    setpointOrder: ").append(toIndentedString(setpointOrder)).append("\n");
    sb.append("    thermOrientation: ").append(toIndentedString(thermOrientation)).append("\n");
    sb.append("    thermProgram: ").append(toIndentedString(thermProgram)).append("\n");
    sb.append("    thermProgramBackup: ").append(toIndentedString(thermProgramBackup)).append("\n");
    sb.append("    thermProgramOrder: ").append(toIndentedString(thermProgramOrder)).append("\n");
    sb.append("    thermRelayCmd: ").append(toIndentedString(thermRelayCmd)).append("\n");
    sb.append("    udpConn: ").append(toIndentedString(udpConn)).append("\n");
    sb.append("    wifiStatus: ").append(toIndentedString(wifiStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("battery_percent");
    openapiFields.add("battery_vp");
    openapiFields.add("last_plug_seen");
    openapiFields.add("last_therm_seen");
    openapiFields.add("measured");
    openapiFields.add("plug_connected_boiler");
    openapiFields.add("rf_status");
    openapiFields.add("setpoint");
    openapiFields.add("setpoint_order");
    openapiFields.add("therm_orientation");
    openapiFields.add("therm_program");
    openapiFields.add("therm_program_backup");
    openapiFields.add("therm_program_order");
    openapiFields.add("therm_relay_cmd");
    openapiFields.add("udp_conn");
    openapiFields.add("wifi_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAThermStateBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAThermStateBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAThermStateBody is not found in the empty JSON string", NAThermStateBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAThermStateBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAThermStateBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `measured`
      if (jsonObj.get("measured") != null && !jsonObj.get("measured").isJsonNull()) {
        NAThermMeasure.validateJsonElement(jsonObj.get("measured"));
      }
      // validate the optional field `setpoint`
      if (jsonObj.get("setpoint") != null && !jsonObj.get("setpoint").isJsonNull()) {
        NASetpoint.validateJsonElement(jsonObj.get("setpoint"));
      }
      // validate the optional field `setpoint_order`
      if (jsonObj.get("setpoint_order") != null && !jsonObj.get("setpoint_order").isJsonNull()) {
        NASetpoint.validateJsonElement(jsonObj.get("setpoint_order"));
      }
      // validate the optional field `therm_program`
      if (jsonObj.get("therm_program") != null && !jsonObj.get("therm_program").isJsonNull()) {
        NAThermProgram.validateJsonElement(jsonObj.get("therm_program"));
      }
      if (jsonObj.get("therm_program_backup") != null && !jsonObj.get("therm_program_backup").isJsonNull()) {
        JsonArray jsonArraythermProgramBackup = jsonObj.getAsJsonArray("therm_program_backup");
        if (jsonArraythermProgramBackup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("therm_program_backup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `therm_program_backup` to be an array in the JSON string but got `%s`", jsonObj.get("therm_program_backup").toString()));
          }

          // validate the optional field `therm_program_backup` (array)
          for (int i = 0; i < jsonArraythermProgramBackup.size(); i++) {
            NAThermProgram.validateJsonElement(jsonArraythermProgramBackup.get(i));
          };
        }
      }
      // validate the optional field `therm_program_order`
      if (jsonObj.get("therm_program_order") != null && !jsonObj.get("therm_program_order").isJsonNull()) {
        NAThermProgram.validateJsonElement(jsonObj.get("therm_program_order"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAThermStateBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAThermStateBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAThermStateBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAThermStateBody.class));

       return (TypeAdapter<T>) new TypeAdapter<NAThermStateBody>() {
           @Override
           public void write(JsonWriter out, NAThermStateBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAThermStateBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAThermStateBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAThermStateBody
   * @throws IOException if the JSON string is invalid with respect to NAThermStateBody
   */
  public static NAThermStateBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAThermStateBody.class);
  }

  /**
   * Convert an instance of NAThermStateBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

