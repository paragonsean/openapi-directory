/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NADashboardData;
import org.openapitools.client.model.NAPlace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAHealthyHomeCoach
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAHealthyHomeCoach {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CIPHER_ID = "cipher_id";
  @SerializedName(SERIALIZED_NAME_CIPHER_ID)
  private String cipherId;

  public static final String SERIALIZED_NAME_CO2_CALIBRATING = "co2_calibrating";
  @SerializedName(SERIALIZED_NAME_CO2_CALIBRATING)
  private Boolean co2Calibrating;

  public static final String SERIALIZED_NAME_DASHBOARD_DATA = "dashboard_data";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DATA)
  private NADashboardData dashboardData;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private List<String> dataType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_SETUP = "date_setup";
  @SerializedName(SERIALIZED_NAME_DATE_SETUP)
  private Integer dateSetup;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private Integer firmware;

  public static final String SERIALIZED_NAME_LAST_SETUP = "last_setup";
  @SerializedName(SERIALIZED_NAME_LAST_SETUP)
  private Integer lastSetup;

  public static final String SERIALIZED_NAME_LAST_STATUS_STORE = "last_status_store";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_STORE)
  private Integer lastStatusStore;

  public static final String SERIALIZED_NAME_LAST_UPGRADE = "last_upgrade";
  @SerializedName(SERIALIZED_NAME_LAST_UPGRADE)
  private Integer lastUpgrade;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private NAPlace place;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WIFI_STATUS = "wifi_status";
  @SerializedName(SERIALIZED_NAME_WIFI_STATUS)
  private Integer wifiStatus;

  public NAHealthyHomeCoach() {
  }

  public NAHealthyHomeCoach id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAHealthyHomeCoach cipherId(String cipherId) {
    this.cipherId = cipherId;
    return this;
  }

  /**
   * Get cipherId
   * @return cipherId
   */
  @javax.annotation.Nullable
  public String getCipherId() {
    return cipherId;
  }

  public void setCipherId(String cipherId) {
    this.cipherId = cipherId;
  }


  public NAHealthyHomeCoach co2Calibrating(Boolean co2Calibrating) {
    this.co2Calibrating = co2Calibrating;
    return this;
  }

  /**
   * Get co2Calibrating
   * @return co2Calibrating
   */
  @javax.annotation.Nullable
  public Boolean getCo2Calibrating() {
    return co2Calibrating;
  }

  public void setCo2Calibrating(Boolean co2Calibrating) {
    this.co2Calibrating = co2Calibrating;
  }


  public NAHealthyHomeCoach dashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
    return this;
  }

  /**
   * Get dashboardData
   * @return dashboardData
   */
  @javax.annotation.Nullable
  public NADashboardData getDashboardData() {
    return dashboardData;
  }

  public void setDashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
  }


  public NAHealthyHomeCoach dataType(List<String> dataType) {
    this.dataType = dataType;
    return this;
  }

  public NAHealthyHomeCoach addDataTypeItem(String dataTypeItem) {
    if (this.dataType == null) {
      this.dataType = new ArrayList<>();
    }
    this.dataType.add(dataTypeItem);
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public List<String> getDataType() {
    return dataType;
  }

  public void setDataType(List<String> dataType) {
    this.dataType = dataType;
  }


  public NAHealthyHomeCoach dateSetup(Integer dateSetup) {
    this.dateSetup = dateSetup;
    return this;
  }

  /**
   * Get dateSetup
   * @return dateSetup
   */
  @javax.annotation.Nullable
  public Integer getDateSetup() {
    return dateSetup;
  }

  public void setDateSetup(Integer dateSetup) {
    this.dateSetup = dateSetup;
  }


  public NAHealthyHomeCoach firmware(Integer firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Get firmware
   * @return firmware
   */
  @javax.annotation.Nullable
  public Integer getFirmware() {
    return firmware;
  }

  public void setFirmware(Integer firmware) {
    this.firmware = firmware;
  }


  public NAHealthyHomeCoach lastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
    return this;
  }

  /**
   * Get lastSetup
   * @return lastSetup
   */
  @javax.annotation.Nullable
  public Integer getLastSetup() {
    return lastSetup;
  }

  public void setLastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
  }


  public NAHealthyHomeCoach lastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
    return this;
  }

  /**
   * Get lastStatusStore
   * @return lastStatusStore
   */
  @javax.annotation.Nullable
  public Integer getLastStatusStore() {
    return lastStatusStore;
  }

  public void setLastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
  }


  public NAHealthyHomeCoach lastUpgrade(Integer lastUpgrade) {
    this.lastUpgrade = lastUpgrade;
    return this;
  }

  /**
   * Get lastUpgrade
   * @return lastUpgrade
   */
  @javax.annotation.Nullable
  public Integer getLastUpgrade() {
    return lastUpgrade;
  }

  public void setLastUpgrade(Integer lastUpgrade) {
    this.lastUpgrade = lastUpgrade;
  }


  public NAHealthyHomeCoach name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NAHealthyHomeCoach place(NAPlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public NAPlace getPlace() {
    return place;
  }

  public void setPlace(NAPlace place) {
    this.place = place;
  }


  public NAHealthyHomeCoach type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among : NHC: Healthy Home Coach 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NAHealthyHomeCoach wifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
    return this;
  }

  /**
   * It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 &#x3D; 86 bad signal RSSI_THRESHOLD_1 &#x3D; 71 middle quality signal RSSI_THRESHOLD_2 &#x3D; 56 good signal 
   * @return wifiStatus
   */
  @javax.annotation.Nullable
  public Integer getWifiStatus() {
    return wifiStatus;
  }

  public void setWifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAHealthyHomeCoach naHealthyHomeCoach = (NAHealthyHomeCoach) o;
    return Objects.equals(this.id, naHealthyHomeCoach.id) &&
        Objects.equals(this.cipherId, naHealthyHomeCoach.cipherId) &&
        Objects.equals(this.co2Calibrating, naHealthyHomeCoach.co2Calibrating) &&
        Objects.equals(this.dashboardData, naHealthyHomeCoach.dashboardData) &&
        Objects.equals(this.dataType, naHealthyHomeCoach.dataType) &&
        Objects.equals(this.dateSetup, naHealthyHomeCoach.dateSetup) &&
        Objects.equals(this.firmware, naHealthyHomeCoach.firmware) &&
        Objects.equals(this.lastSetup, naHealthyHomeCoach.lastSetup) &&
        Objects.equals(this.lastStatusStore, naHealthyHomeCoach.lastStatusStore) &&
        Objects.equals(this.lastUpgrade, naHealthyHomeCoach.lastUpgrade) &&
        Objects.equals(this.name, naHealthyHomeCoach.name) &&
        Objects.equals(this.place, naHealthyHomeCoach.place) &&
        Objects.equals(this.type, naHealthyHomeCoach.type) &&
        Objects.equals(this.wifiStatus, naHealthyHomeCoach.wifiStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, cipherId, co2Calibrating, dashboardData, dataType, dateSetup, firmware, lastSetup, lastStatusStore, lastUpgrade, name, place, type, wifiStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAHealthyHomeCoach {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cipherId: ").append(toIndentedString(cipherId)).append("\n");
    sb.append("    co2Calibrating: ").append(toIndentedString(co2Calibrating)).append("\n");
    sb.append("    dashboardData: ").append(toIndentedString(dashboardData)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dateSetup: ").append(toIndentedString(dateSetup)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    lastSetup: ").append(toIndentedString(lastSetup)).append("\n");
    sb.append("    lastStatusStore: ").append(toIndentedString(lastStatusStore)).append("\n");
    sb.append("    lastUpgrade: ").append(toIndentedString(lastUpgrade)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wifiStatus: ").append(toIndentedString(wifiStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("cipher_id");
    openapiFields.add("co2_calibrating");
    openapiFields.add("dashboard_data");
    openapiFields.add("data_type");
    openapiFields.add("date_setup");
    openapiFields.add("firmware");
    openapiFields.add("last_setup");
    openapiFields.add("last_status_store");
    openapiFields.add("last_upgrade");
    openapiFields.add("name");
    openapiFields.add("place");
    openapiFields.add("type");
    openapiFields.add("wifi_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAHealthyHomeCoach
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAHealthyHomeCoach.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAHealthyHomeCoach is not found in the empty JSON string", NAHealthyHomeCoach.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAHealthyHomeCoach.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAHealthyHomeCoach` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("cipher_id") != null && !jsonObj.get("cipher_id").isJsonNull()) && !jsonObj.get("cipher_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher_id").toString()));
      }
      // validate the optional field `dashboard_data`
      if (jsonObj.get("dashboard_data") != null && !jsonObj.get("dashboard_data").isJsonNull()) {
        NADashboardData.validateJsonElement(jsonObj.get("dashboard_data"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull() && !jsonObj.get("data_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be an array in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        NAPlace.validateJsonElement(jsonObj.get("place"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAHealthyHomeCoach.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAHealthyHomeCoach' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAHealthyHomeCoach> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAHealthyHomeCoach.class));

       return (TypeAdapter<T>) new TypeAdapter<NAHealthyHomeCoach>() {
           @Override
           public void write(JsonWriter out, NAHealthyHomeCoach value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAHealthyHomeCoach read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAHealthyHomeCoach given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAHealthyHomeCoach
   * @throws IOException if the JSON string is invalid with respect to NAHealthyHomeCoach
   */
  public static NAHealthyHomeCoach fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAHealthyHomeCoach.class);
  }

  /**
   * Convert an instance of NAHealthyHomeCoach to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

