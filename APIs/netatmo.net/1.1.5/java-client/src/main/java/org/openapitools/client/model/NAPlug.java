/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NAPlace;
import org.openapitools.client.model.NAThermostat;
import org.openapitools.client.model.NAYearMonth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAPlug
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAPlug {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private Integer firmware;

  public static final String SERIALIZED_NAME_LAST_BILAN = "last_bilan";
  @SerializedName(SERIALIZED_NAME_LAST_BILAN)
  private NAYearMonth lastBilan;

  public static final String SERIALIZED_NAME_LAST_PLUG_SEEN = "last_plug_seen";
  @SerializedName(SERIALIZED_NAME_LAST_PLUG_SEEN)
  private Integer lastPlugSeen;

  public static final String SERIALIZED_NAME_LAST_STATUS_STORE = "last_status_store";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_STORE)
  private Integer lastStatusStore;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<NAThermostat> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private NAPlace place;

  public static final String SERIALIZED_NAME_PLUG_CONNECTED_BOILER = "plug_connected_boiler";
  @SerializedName(SERIALIZED_NAME_PLUG_CONNECTED_BOILER)
  private Integer plugConnectedBoiler;

  public static final String SERIALIZED_NAME_STATION_NAME = "station_name";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public static final String SERIALIZED_NAME_SYNCING = "syncing";
  @SerializedName(SERIALIZED_NAME_SYNCING)
  private Boolean syncing;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UDP_CONN = "udp_conn";
  @SerializedName(SERIALIZED_NAME_UDP_CONN)
  private Boolean udpConn;

  public static final String SERIALIZED_NAME_WIFI_STATUS = "wifi_status";
  @SerializedName(SERIALIZED_NAME_WIFI_STATUS)
  private Integer wifiStatus;

  public NAPlug() {
  }

  public NAPlug id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAPlug firmware(Integer firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Get firmware
   * @return firmware
   */
  @javax.annotation.Nullable
  public Integer getFirmware() {
    return firmware;
  }

  public void setFirmware(Integer firmware) {
    this.firmware = firmware;
  }


  public NAPlug lastBilan(NAYearMonth lastBilan) {
    this.lastBilan = lastBilan;
    return this;
  }

  /**
   * Get lastBilan
   * @return lastBilan
   */
  @javax.annotation.Nullable
  public NAYearMonth getLastBilan() {
    return lastBilan;
  }

  public void setLastBilan(NAYearMonth lastBilan) {
    this.lastBilan = lastBilan;
  }


  public NAPlug lastPlugSeen(Integer lastPlugSeen) {
    this.lastPlugSeen = lastPlugSeen;
    return this;
  }

  /**
   * Get lastPlugSeen
   * @return lastPlugSeen
   */
  @javax.annotation.Nullable
  public Integer getLastPlugSeen() {
    return lastPlugSeen;
  }

  public void setLastPlugSeen(Integer lastPlugSeen) {
    this.lastPlugSeen = lastPlugSeen;
  }


  public NAPlug lastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
    return this;
  }

  /**
   * Get lastStatusStore
   * @return lastStatusStore
   */
  @javax.annotation.Nullable
  public Integer getLastStatusStore() {
    return lastStatusStore;
  }

  public void setLastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
  }


  public NAPlug modules(List<NAThermostat> modules) {
    this.modules = modules;
    return this;
  }

  public NAPlug addModulesItem(NAThermostat modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<NAThermostat> getModules() {
    return modules;
  }

  public void setModules(List<NAThermostat> modules) {
    this.modules = modules;
  }


  public NAPlug place(NAPlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public NAPlace getPlace() {
    return place;
  }

  public void setPlace(NAPlace place) {
    this.place = place;
  }


  public NAPlug plugConnectedBoiler(Integer plugConnectedBoiler) {
    this.plugConnectedBoiler = plugConnectedBoiler;
    return this;
  }

  /**
   * Get plugConnectedBoiler
   * @return plugConnectedBoiler
   */
  @javax.annotation.Nullable
  public Integer getPlugConnectedBoiler() {
    return plugConnectedBoiler;
  }

  public void setPlugConnectedBoiler(Integer plugConnectedBoiler) {
    this.plugConnectedBoiler = plugConnectedBoiler;
  }


  public NAPlug stationName(String stationName) {
    this.stationName = stationName;
    return this;
  }

  /**
   * Get stationName
   * @return stationName
   */
  @javax.annotation.Nullable
  public String getStationName() {
    return stationName;
  }

  public void setStationName(String stationName) {
    this.stationName = stationName;
  }


  public NAPlug syncing(Boolean syncing) {
    this.syncing = syncing;
    return this;
  }

  /**
   * Get syncing
   * @return syncing
   */
  @javax.annotation.Nullable
  public Boolean getSyncing() {
    return syncing;
  }

  public void setSyncing(Boolean syncing) {
    this.syncing = syncing;
  }


  public NAPlug type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NAPlug udpConn(Boolean udpConn) {
    this.udpConn = udpConn;
    return this;
  }

  /**
   * Get udpConn
   * @return udpConn
   */
  @javax.annotation.Nullable
  public Boolean getUdpConn() {
    return udpConn;
  }

  public void setUdpConn(Boolean udpConn) {
    this.udpConn = udpConn;
  }


  public NAPlug wifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
    return this;
  }

  /**
   * It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 &#x3D; 86 bad signal RSSI_THRESHOLD_1 &#x3D; 71 middle quality signal RSSI_THRESHOLD_2 &#x3D; 56 good signal 
   * @return wifiStatus
   */
  @javax.annotation.Nullable
  public Integer getWifiStatus() {
    return wifiStatus;
  }

  public void setWifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAPlug naPlug = (NAPlug) o;
    return Objects.equals(this.id, naPlug.id) &&
        Objects.equals(this.firmware, naPlug.firmware) &&
        Objects.equals(this.lastBilan, naPlug.lastBilan) &&
        Objects.equals(this.lastPlugSeen, naPlug.lastPlugSeen) &&
        Objects.equals(this.lastStatusStore, naPlug.lastStatusStore) &&
        Objects.equals(this.modules, naPlug.modules) &&
        Objects.equals(this.place, naPlug.place) &&
        Objects.equals(this.plugConnectedBoiler, naPlug.plugConnectedBoiler) &&
        Objects.equals(this.stationName, naPlug.stationName) &&
        Objects.equals(this.syncing, naPlug.syncing) &&
        Objects.equals(this.type, naPlug.type) &&
        Objects.equals(this.udpConn, naPlug.udpConn) &&
        Objects.equals(this.wifiStatus, naPlug.wifiStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firmware, lastBilan, lastPlugSeen, lastStatusStore, modules, place, plugConnectedBoiler, stationName, syncing, type, udpConn, wifiStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAPlug {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    lastBilan: ").append(toIndentedString(lastBilan)).append("\n");
    sb.append("    lastPlugSeen: ").append(toIndentedString(lastPlugSeen)).append("\n");
    sb.append("    lastStatusStore: ").append(toIndentedString(lastStatusStore)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    plugConnectedBoiler: ").append(toIndentedString(plugConnectedBoiler)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    syncing: ").append(toIndentedString(syncing)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    udpConn: ").append(toIndentedString(udpConn)).append("\n");
    sb.append("    wifiStatus: ").append(toIndentedString(wifiStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("firmware");
    openapiFields.add("last_bilan");
    openapiFields.add("last_plug_seen");
    openapiFields.add("last_status_store");
    openapiFields.add("modules");
    openapiFields.add("place");
    openapiFields.add("plug_connected_boiler");
    openapiFields.add("station_name");
    openapiFields.add("syncing");
    openapiFields.add("type");
    openapiFields.add("udp_conn");
    openapiFields.add("wifi_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAPlug
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAPlug.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAPlug is not found in the empty JSON string", NAPlug.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAPlug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAPlug` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      // validate the optional field `last_bilan`
      if (jsonObj.get("last_bilan") != null && !jsonObj.get("last_bilan").isJsonNull()) {
        NAYearMonth.validateJsonElement(jsonObj.get("last_bilan"));
      }
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull()) {
        JsonArray jsonArraymodules = jsonObj.getAsJsonArray("modules");
        if (jsonArraymodules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
          }

          // validate the optional field `modules` (array)
          for (int i = 0; i < jsonArraymodules.size(); i++) {
            NAThermostat.validateJsonElement(jsonArraymodules.get(i));
          };
        }
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        NAPlace.validateJsonElement(jsonObj.get("place"));
      }
      if ((jsonObj.get("station_name") != null && !jsonObj.get("station_name").isJsonNull()) && !jsonObj.get("station_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAPlug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAPlug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAPlug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAPlug.class));

       return (TypeAdapter<T>) new TypeAdapter<NAPlug>() {
           @Override
           public void write(JsonWriter out, NAPlug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAPlug read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAPlug given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAPlug
   * @throws IOException if the JSON string is invalid with respect to NAPlug
   */
  public static NAPlug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAPlug.class);
  }

  /**
   * Convert an instance of NAPlug to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

