/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NADashboardData;
import org.openapitools.client.model.NAPlace;
import org.openapitools.client.model.NAStationModule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAMain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAMain {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CIPHER_ID = "cipher_id";
  @SerializedName(SERIALIZED_NAME_CIPHER_ID)
  private String cipherId;

  public static final String SERIALIZED_NAME_CO2_CALIBRATING = "co2_calibrating";
  @SerializedName(SERIALIZED_NAME_CO2_CALIBRATING)
  private Boolean co2Calibrating;

  public static final String SERIALIZED_NAME_DASHBOARD_DATA = "dashboard_data";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_DATA)
  private NADashboardData dashboardData;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private List<String> dataType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_SETUP = "date_setup";
  @SerializedName(SERIALIZED_NAME_DATE_SETUP)
  private Integer dateSetup;

  public static final String SERIALIZED_NAME_FAVORITE = "favorite";
  @SerializedName(SERIALIZED_NAME_FAVORITE)
  private Boolean favorite;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private Integer firmware;

  public static final String SERIALIZED_NAME_LAST_SETUP = "last_setup";
  @SerializedName(SERIALIZED_NAME_LAST_SETUP)
  private Integer lastSetup;

  public static final String SERIALIZED_NAME_LAST_STATUS_STORE = "last_status_store";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_STORE)
  private Integer lastStatusStore;

  public static final String SERIALIZED_NAME_LAST_UPGRADE = "last_upgrade";
  @SerializedName(SERIALIZED_NAME_LAST_UPGRADE)
  private Integer lastUpgrade;

  public static final String SERIALIZED_NAME_MODULE_NAME = "module_name";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<NAStationModule> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private NAPlace place;

  public static final String SERIALIZED_NAME_REACHABLE = "reachable";
  @SerializedName(SERIALIZED_NAME_REACHABLE)
  private Boolean reachable;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_STATION_NAME = "station_name";
  @SerializedName(SERIALIZED_NAME_STATION_NAME)
  private String stationName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WIFI_STATUS = "wifi_status";
  @SerializedName(SERIALIZED_NAME_WIFI_STATUS)
  private Integer wifiStatus;

  public NAMain() {
  }

  public NAMain id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAMain cipherId(String cipherId) {
    this.cipherId = cipherId;
    return this;
  }

  /**
   * Get cipherId
   * @return cipherId
   */
  @javax.annotation.Nullable
  public String getCipherId() {
    return cipherId;
  }

  public void setCipherId(String cipherId) {
    this.cipherId = cipherId;
  }


  public NAMain co2Calibrating(Boolean co2Calibrating) {
    this.co2Calibrating = co2Calibrating;
    return this;
  }

  /**
   * Get co2Calibrating
   * @return co2Calibrating
   */
  @javax.annotation.Nullable
  public Boolean getCo2Calibrating() {
    return co2Calibrating;
  }

  public void setCo2Calibrating(Boolean co2Calibrating) {
    this.co2Calibrating = co2Calibrating;
  }


  public NAMain dashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
    return this;
  }

  /**
   * Get dashboardData
   * @return dashboardData
   */
  @javax.annotation.Nullable
  public NADashboardData getDashboardData() {
    return dashboardData;
  }

  public void setDashboardData(NADashboardData dashboardData) {
    this.dashboardData = dashboardData;
  }


  public NAMain dataType(List<String> dataType) {
    this.dataType = dataType;
    return this;
  }

  public NAMain addDataTypeItem(String dataTypeItem) {
    if (this.dataType == null) {
      this.dataType = new ArrayList<>();
    }
    this.dataType.add(dataTypeItem);
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public List<String> getDataType() {
    return dataType;
  }

  public void setDataType(List<String> dataType) {
    this.dataType = dataType;
  }


  public NAMain dateSetup(Integer dateSetup) {
    this.dateSetup = dateSetup;
    return this;
  }

  /**
   * Get dateSetup
   * @return dateSetup
   */
  @javax.annotation.Nullable
  public Integer getDateSetup() {
    return dateSetup;
  }

  public void setDateSetup(Integer dateSetup) {
    this.dateSetup = dateSetup;
  }


  public NAMain favorite(Boolean favorite) {
    this.favorite = favorite;
    return this;
  }

  /**
   * true when the device is a user favorite and not owned by them
   * @return favorite
   */
  @javax.annotation.Nullable
  public Boolean getFavorite() {
    return favorite;
  }

  public void setFavorite(Boolean favorite) {
    this.favorite = favorite;
  }


  public NAMain firmware(Integer firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Get firmware
   * @return firmware
   */
  @javax.annotation.Nullable
  public Integer getFirmware() {
    return firmware;
  }

  public void setFirmware(Integer firmware) {
    this.firmware = firmware;
  }


  public NAMain lastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
    return this;
  }

  /**
   * Get lastSetup
   * @return lastSetup
   */
  @javax.annotation.Nullable
  public Integer getLastSetup() {
    return lastSetup;
  }

  public void setLastSetup(Integer lastSetup) {
    this.lastSetup = lastSetup;
  }


  public NAMain lastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
    return this;
  }

  /**
   * Get lastStatusStore
   * @return lastStatusStore
   */
  @javax.annotation.Nullable
  public Integer getLastStatusStore() {
    return lastStatusStore;
  }

  public void setLastStatusStore(Integer lastStatusStore) {
    this.lastStatusStore = lastStatusStore;
  }


  public NAMain lastUpgrade(Integer lastUpgrade) {
    this.lastUpgrade = lastUpgrade;
    return this;
  }

  /**
   * Get lastUpgrade
   * @return lastUpgrade
   */
  @javax.annotation.Nullable
  public Integer getLastUpgrade() {
    return lastUpgrade;
  }

  public void setLastUpgrade(Integer lastUpgrade) {
    this.lastUpgrade = lastUpgrade;
  }


  public NAMain moduleName(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }

  /**
   * Get moduleName
   * @return moduleName
   */
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }

  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public NAMain modules(List<NAStationModule> modules) {
    this.modules = modules;
    return this;
  }

  public NAMain addModulesItem(NAStationModule modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<NAStationModule> getModules() {
    return modules;
  }

  public void setModules(List<NAStationModule> modules) {
    this.modules = modules;
  }


  public NAMain place(NAPlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public NAPlace getPlace() {
    return place;
  }

  public void setPlace(NAPlace place) {
    this.place = place;
  }


  public NAMain reachable(Boolean reachable) {
    this.reachable = reachable;
    return this;
  }

  /**
   * true when the station was seen by the Netatmo cloud within the last 4 hours
   * @return reachable
   */
  @javax.annotation.Nullable
  public Boolean getReachable() {
    return reachable;
  }

  public void setReachable(Boolean reachable) {
    this.reachable = reachable;
  }


  public NAMain readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * true when the user was invited to (or has favorited) a station, false when the user owns it
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public NAMain stationName(String stationName) {
    this.stationName = stationName;
    return this;
  }

  /**
   * Get stationName
   * @return stationName
   */
  @javax.annotation.Nullable
  public String getStationName() {
    return stationName;
  }

  public void setStationName(String stationName) {
    this.stationName = stationName;
  }


  public NAMain type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Included in every device or module. It defines the type of the device/module. Its values are among : NAMain : for the base station NAModule1 : for the outdoor module NAModule4 : for the additionnal indoor module NAModule3 : for the rain gauge module NAPlug : for the thermostat relay/plug NATherm1 : for the thermostat module 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public NAMain wifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
    return this;
  }

  /**
   * It contains the current wifi status. The different thresholds to take into account are RSSI_THRESHOLD_0 &#x3D; 86 bad signal RSSI_THRESHOLD_1 &#x3D; 71 middle quality signal RSSI_THRESHOLD_2 &#x3D; 56 good signal 
   * @return wifiStatus
   */
  @javax.annotation.Nullable
  public Integer getWifiStatus() {
    return wifiStatus;
  }

  public void setWifiStatus(Integer wifiStatus) {
    this.wifiStatus = wifiStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAMain naMain = (NAMain) o;
    return Objects.equals(this.id, naMain.id) &&
        Objects.equals(this.cipherId, naMain.cipherId) &&
        Objects.equals(this.co2Calibrating, naMain.co2Calibrating) &&
        Objects.equals(this.dashboardData, naMain.dashboardData) &&
        Objects.equals(this.dataType, naMain.dataType) &&
        Objects.equals(this.dateSetup, naMain.dateSetup) &&
        Objects.equals(this.favorite, naMain.favorite) &&
        Objects.equals(this.firmware, naMain.firmware) &&
        Objects.equals(this.lastSetup, naMain.lastSetup) &&
        Objects.equals(this.lastStatusStore, naMain.lastStatusStore) &&
        Objects.equals(this.lastUpgrade, naMain.lastUpgrade) &&
        Objects.equals(this.moduleName, naMain.moduleName) &&
        Objects.equals(this.modules, naMain.modules) &&
        Objects.equals(this.place, naMain.place) &&
        Objects.equals(this.reachable, naMain.reachable) &&
        Objects.equals(this.readOnly, naMain.readOnly) &&
        Objects.equals(this.stationName, naMain.stationName) &&
        Objects.equals(this.type, naMain.type) &&
        Objects.equals(this.wifiStatus, naMain.wifiStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, cipherId, co2Calibrating, dashboardData, dataType, dateSetup, favorite, firmware, lastSetup, lastStatusStore, lastUpgrade, moduleName, modules, place, reachable, readOnly, stationName, type, wifiStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAMain {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cipherId: ").append(toIndentedString(cipherId)).append("\n");
    sb.append("    co2Calibrating: ").append(toIndentedString(co2Calibrating)).append("\n");
    sb.append("    dashboardData: ").append(toIndentedString(dashboardData)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dateSetup: ").append(toIndentedString(dateSetup)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    lastSetup: ").append(toIndentedString(lastSetup)).append("\n");
    sb.append("    lastStatusStore: ").append(toIndentedString(lastStatusStore)).append("\n");
    sb.append("    lastUpgrade: ").append(toIndentedString(lastUpgrade)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    reachable: ").append(toIndentedString(reachable)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    stationName: ").append(toIndentedString(stationName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wifiStatus: ").append(toIndentedString(wifiStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("cipher_id");
    openapiFields.add("co2_calibrating");
    openapiFields.add("dashboard_data");
    openapiFields.add("data_type");
    openapiFields.add("date_setup");
    openapiFields.add("favorite");
    openapiFields.add("firmware");
    openapiFields.add("last_setup");
    openapiFields.add("last_status_store");
    openapiFields.add("last_upgrade");
    openapiFields.add("module_name");
    openapiFields.add("modules");
    openapiFields.add("place");
    openapiFields.add("reachable");
    openapiFields.add("read_only");
    openapiFields.add("station_name");
    openapiFields.add("type");
    openapiFields.add("wifi_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAMain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAMain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAMain is not found in the empty JSON string", NAMain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAMain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAMain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("cipher_id") != null && !jsonObj.get("cipher_id").isJsonNull()) && !jsonObj.get("cipher_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher_id").toString()));
      }
      // validate the optional field `dashboard_data`
      if (jsonObj.get("dashboard_data") != null && !jsonObj.get("dashboard_data").isJsonNull()) {
        NADashboardData.validateJsonElement(jsonObj.get("dashboard_data"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull() && !jsonObj.get("data_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_type` to be an array in the JSON string but got `%s`", jsonObj.get("data_type").toString()));
      }
      if ((jsonObj.get("module_name") != null && !jsonObj.get("module_name").isJsonNull()) && !jsonObj.get("module_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module_name").toString()));
      }
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull()) {
        JsonArray jsonArraymodules = jsonObj.getAsJsonArray("modules");
        if (jsonArraymodules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
          }

          // validate the optional field `modules` (array)
          for (int i = 0; i < jsonArraymodules.size(); i++) {
            NAStationModule.validateJsonElement(jsonArraymodules.get(i));
          };
        }
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        NAPlace.validateJsonElement(jsonObj.get("place"));
      }
      if ((jsonObj.get("station_name") != null && !jsonObj.get("station_name").isJsonNull()) && !jsonObj.get("station_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `station_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("station_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAMain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAMain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAMain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAMain.class));

       return (TypeAdapter<T>) new TypeAdapter<NAMain>() {
           @Override
           public void write(JsonWriter out, NAMain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAMain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAMain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAMain
   * @throws IOException if the JSON string is invalid with respect to NAMain
   */
  public static NAMain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAMain.class);
  }

  /**
   * Convert an instance of NAMain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

