/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NAMeasure;
import org.openapitools.client.model.NAPlace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAPublicData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAPublicData {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARK = "mark";
  @SerializedName(SERIALIZED_NAME_MARK)
  private Integer mark;

  public static final String SERIALIZED_NAME_MEASURES = "measures";
  @SerializedName(SERIALIZED_NAME_MEASURES)
  private Map<String, NAMeasure> measures = new HashMap<>();

  public static final String SERIALIZED_NAME_MODULE_TYPES = "module_types";
  @SerializedName(SERIALIZED_NAME_MODULE_TYPES)
  private Map<String, String> moduleTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private List<String> modules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private NAPlace place;

  public NAPublicData() {
  }

  public NAPublicData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * id of the station
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAPublicData mark(Integer mark) {
    this.mark = mark;
    return this;
  }

  /**
   * Get mark
   * @return mark
   */
  @javax.annotation.Nullable
  public Integer getMark() {
    return mark;
  }

  public void setMark(Integer mark) {
    this.mark = mark;
  }


  public NAPublicData measures(Map<String, NAMeasure> measures) {
    this.measures = measures;
    return this;
  }

  public NAPublicData putMeasuresItem(String key, NAMeasure measuresItem) {
    if (this.measures == null) {
      this.measures = new HashMap<>();
    }
    this.measures.put(key, measuresItem);
    return this;
  }

  /**
   * Get measures
   * @return measures
   */
  @javax.annotation.Nullable
  public Map<String, NAMeasure> getMeasures() {
    return measures;
  }

  public void setMeasures(Map<String, NAMeasure> measures) {
    this.measures = measures;
  }


  public NAPublicData moduleTypes(Map<String, String> moduleTypes) {
    this.moduleTypes = moduleTypes;
    return this;
  }

  public NAPublicData putModuleTypesItem(String key, String moduleTypesItem) {
    if (this.moduleTypes == null) {
      this.moduleTypes = new HashMap<>();
    }
    this.moduleTypes.put(key, moduleTypesItem);
    return this;
  }

  /**
   * Latest measurements of the station, organized by module
   * @return moduleTypes
   */
  @javax.annotation.Nullable
  public Map<String, String> getModuleTypes() {
    return moduleTypes;
  }

  public void setModuleTypes(Map<String, String> moduleTypes) {
    this.moduleTypes = moduleTypes;
  }


  public NAPublicData modules(List<String> modules) {
    this.modules = modules;
    return this;
  }

  public NAPublicData addModulesItem(String modulesItem) {
    if (this.modules == null) {
      this.modules = new ArrayList<>();
    }
    this.modules.add(modulesItem);
    return this;
  }

  /**
   * Get modules
   * @return modules
   */
  @javax.annotation.Nullable
  public List<String> getModules() {
    return modules;
  }

  public void setModules(List<String> modules) {
    this.modules = modules;
  }


  public NAPublicData place(NAPlace place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public NAPlace getPlace() {
    return place;
  }

  public void setPlace(NAPlace place) {
    this.place = place;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAPublicData naPublicData = (NAPublicData) o;
    return Objects.equals(this.id, naPublicData.id) &&
        Objects.equals(this.mark, naPublicData.mark) &&
        Objects.equals(this.measures, naPublicData.measures) &&
        Objects.equals(this.moduleTypes, naPublicData.moduleTypes) &&
        Objects.equals(this.modules, naPublicData.modules) &&
        Objects.equals(this.place, naPublicData.place);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, mark, measures, moduleTypes, modules, place);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAPublicData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    measures: ").append(toIndentedString(measures)).append("\n");
    sb.append("    moduleTypes: ").append(toIndentedString(moduleTypes)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("mark");
    openapiFields.add("measures");
    openapiFields.add("module_types");
    openapiFields.add("modules");
    openapiFields.add("place");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAPublicData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAPublicData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAPublicData is not found in the empty JSON string", NAPublicData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAPublicData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAPublicData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modules") != null && !jsonObj.get("modules").isJsonNull() && !jsonObj.get("modules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modules` to be an array in the JSON string but got `%s`", jsonObj.get("modules").toString()));
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        NAPlace.validateJsonElement(jsonObj.get("place"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAPublicData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAPublicData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAPublicData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAPublicData.class));

       return (TypeAdapter<T>) new TypeAdapter<NAPublicData>() {
           @Override
           public void write(JsonWriter out, NAPublicData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAPublicData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAPublicData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAPublicData
   * @throws IOException if the JSON string is invalid with respect to NAPublicData
   */
  public static NAPublicData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAPublicData.class);
  }

  /**
   * Convert an instance of NAPublicData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

