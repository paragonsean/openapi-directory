/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NADate;
import org.openapitools.client.model.NAUserAdministrative;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NAUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:42.898640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NAUser {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE = "administrative";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE)
  private NAUserAdministrative administrative;

  public static final String SERIALIZED_NAME_DATE_CREATION = "date_creation";
  @SerializedName(SERIALIZED_NAME_DATE_CREATION)
  private NADate dateCreation;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<String> devices = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIEND_DEVICES = "friend_devices";
  @SerializedName(SERIALIZED_NAME_FRIEND_DEVICES)
  private List<String> friendDevices = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_TIMELINE_NOT_READ = "timeline_not_read";
  @SerializedName(SERIALIZED_NAME_TIMELINE_NOT_READ)
  private Integer timelineNotRead;

  public static final String SERIALIZED_NAME_TIMELINE_SIZE = "timeline_size";
  @SerializedName(SERIALIZED_NAME_TIMELINE_SIZE)
  private Integer timelineSize;

  public NAUser() {
  }

  public NAUser id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NAUser administrative(NAUserAdministrative administrative) {
    this.administrative = administrative;
    return this;
  }

  /**
   * Get administrative
   * @return administrative
   */
  @javax.annotation.Nullable
  public NAUserAdministrative getAdministrative() {
    return administrative;
  }

  public void setAdministrative(NAUserAdministrative administrative) {
    this.administrative = administrative;
  }


  public NAUser dateCreation(NADate dateCreation) {
    this.dateCreation = dateCreation;
    return this;
  }

  /**
   * Get dateCreation
   * @return dateCreation
   */
  @javax.annotation.Nullable
  public NADate getDateCreation() {
    return dateCreation;
  }

  public void setDateCreation(NADate dateCreation) {
    this.dateCreation = dateCreation;
  }


  public NAUser devices(List<String> devices) {
    this.devices = devices;
    return this;
  }

  public NAUser addDevicesItem(String devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * An array of string containing the ids of the devices owned by the user
   * @return devices
   */
  @javax.annotation.Nullable
  public List<String> getDevices() {
    return devices;
  }

  public void setDevices(List<String> devices) {
    this.devices = devices;
  }


  public NAUser friendDevices(List<String> friendDevices) {
    this.friendDevices = friendDevices;
    return this;
  }

  public NAUser addFriendDevicesItem(String friendDevicesItem) {
    if (this.friendDevices == null) {
      this.friendDevices = new ArrayList<>();
    }
    this.friendDevices.add(friendDevicesItem);
    return this;
  }

  /**
   * An array of string containing the ids of the devices on which the user has a \&quot;guest\&quot; access 
   * @return friendDevices
   */
  @javax.annotation.Nullable
  public List<String> getFriendDevices() {
    return friendDevices;
  }

  public void setFriendDevices(List<String> friendDevices) {
    this.friendDevices = friendDevices;
  }


  public NAUser mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * Get mail
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public NAUser timelineNotRead(Integer timelineNotRead) {
    this.timelineNotRead = timelineNotRead;
    return this;
  }

  /**
   * Get timelineNotRead
   * @return timelineNotRead
   */
  @javax.annotation.Nullable
  public Integer getTimelineNotRead() {
    return timelineNotRead;
  }

  public void setTimelineNotRead(Integer timelineNotRead) {
    this.timelineNotRead = timelineNotRead;
  }


  public NAUser timelineSize(Integer timelineSize) {
    this.timelineSize = timelineSize;
    return this;
  }

  /**
   * Get timelineSize
   * @return timelineSize
   */
  @javax.annotation.Nullable
  public Integer getTimelineSize() {
    return timelineSize;
  }

  public void setTimelineSize(Integer timelineSize) {
    this.timelineSize = timelineSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NAUser naUser = (NAUser) o;
    return Objects.equals(this.id, naUser.id) &&
        Objects.equals(this.administrative, naUser.administrative) &&
        Objects.equals(this.dateCreation, naUser.dateCreation) &&
        Objects.equals(this.devices, naUser.devices) &&
        Objects.equals(this.friendDevices, naUser.friendDevices) &&
        Objects.equals(this.mail, naUser.mail) &&
        Objects.equals(this.timelineNotRead, naUser.timelineNotRead) &&
        Objects.equals(this.timelineSize, naUser.timelineSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, administrative, dateCreation, devices, friendDevices, mail, timelineNotRead, timelineSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NAUser {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    administrative: ").append(toIndentedString(administrative)).append("\n");
    sb.append("    dateCreation: ").append(toIndentedString(dateCreation)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    friendDevices: ").append(toIndentedString(friendDevices)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    timelineNotRead: ").append(toIndentedString(timelineNotRead)).append("\n");
    sb.append("    timelineSize: ").append(toIndentedString(timelineSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("administrative");
    openapiFields.add("date_creation");
    openapiFields.add("devices");
    openapiFields.add("friend_devices");
    openapiFields.add("mail");
    openapiFields.add("timeline_not_read");
    openapiFields.add("timeline_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NAUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NAUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NAUser is not found in the empty JSON string", NAUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NAUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NAUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      // validate the optional field `administrative`
      if (jsonObj.get("administrative") != null && !jsonObj.get("administrative").isJsonNull()) {
        NAUserAdministrative.validateJsonElement(jsonObj.get("administrative"));
      }
      // validate the optional field `date_creation`
      if (jsonObj.get("date_creation") != null && !jsonObj.get("date_creation").isJsonNull()) {
        NADate.validateJsonElement(jsonObj.get("date_creation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull() && !jsonObj.get("devices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("friend_devices") != null && !jsonObj.get("friend_devices").isJsonNull() && !jsonObj.get("friend_devices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `friend_devices` to be an array in the JSON string but got `%s`", jsonObj.get("friend_devices").toString()));
      }
      if ((jsonObj.get("mail") != null && !jsonObj.get("mail").isJsonNull()) && !jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NAUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NAUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NAUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NAUser.class));

       return (TypeAdapter<T>) new TypeAdapter<NAUser>() {
           @Override
           public void write(JsonWriter out, NAUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NAUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NAUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NAUser
   * @throws IOException if the JSON string is invalid with respect to NAUser
   */
  public static NAUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NAUser.class);
  }

  /**
   * Convert an instance of NAUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

