/*
 * Netatmo
 * <h3>Welcome to the Netatmo swagger on-line documentation !</h3> This site is a complement to the official <a href=\"https://dev.netatmo.com/\">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the \"try it\" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href=\"https://github.com/cbornet/netatmo-swagger-ui\">netatmo-swagger-ui</a>. You can also use the online <a href=\"./swagger.json\">swagger declaration</a> file to generate code or static documentation (see <a href=\"https://github.com/cbornet/netatmo-swagger-api\">netatmo-swagger-api</a>). 
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: contact-api@netatmo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.NAMeasureResponse;
import org.openapitools.client.model.NANewScheduleResponse;
import org.openapitools.client.model.NAOkResponse;
import org.openapitools.client.model.NAThermProgram;
import org.openapitools.client.model.NAThermostatDataResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ThermostatApi
 */
@Disabled
public class ThermostatApiTest {

    private final ThermostatApi api = new ThermostatApi();

    /**
     * The method createnewschedule creates a new schedule stored in the backup list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createnewscheduleTest() throws ApiException {
        String deviceId = null;
        String moduleId = null;
        NAThermProgram naThermProgram = null;
        NANewScheduleResponse response = api.createnewschedule(deviceId, moduleId, naThermProgram);
        // TODO: test validations
    }

    /**
     * The method getmeasure returns the measurements of a device or a module. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getmeasure_0Test() throws ApiException {
        String deviceId = null;
        String scale = null;
        List<String> type = null;
        String moduleId = null;
        Integer dateBegin = null;
        String dateEnd = null;
        Integer limit = null;
        Boolean optimize = null;
        Boolean realTime = null;
        NAMeasureResponse response = api.getmeasure_0(deviceId, scale, type, moduleId, dateBegin, dateEnd, limit, optimize, realTime);
        // TODO: test validations
    }

    /**
     * The method getthermostatsdata returns information about user&#39;s thermostats such as their last measurements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getthermostatsdataTest() throws ApiException {
        String deviceId = null;
        NAThermostatDataResponse response = api.getthermostatsdata(deviceId);
        // TODO: test validations
    }

    /**
     * The method setthermpoint changes the Thermostat manual temperature setpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setthermpointTest() throws ApiException {
        String deviceId = null;
        String moduleId = null;
        String setpointMode = null;
        Integer setpointEndtime = null;
        Float setpointTemp = null;
        NAOkResponse response = api.setthermpoint(deviceId, moduleId, setpointMode, setpointEndtime, setpointTemp);
        // TODO: test validations
    }

    /**
     * The method switchschedule switches the Thermostat&#39;s schedule to another existing schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void switchscheduleTest() throws ApiException {
        String deviceId = null;
        String moduleId = null;
        String scheduleId = null;
        NAOkResponse response = api.switchschedule(deviceId, moduleId, scheduleId);
        // TODO: test validations
    }

    /**
     * The method syncschedule changes the Thermostat weekly schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncscheduleTest() throws ApiException {
        String deviceId = null;
        String moduleId = null;
        NAThermProgram naThermProgram = null;
        NAOkResponse response = api.syncschedule(deviceId, moduleId, naThermProgram);
        // TODO: test validations
    }

}
