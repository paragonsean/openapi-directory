# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, enable: bool=None, folder_type: str=None, name: str=None, parent_folder_id: str=None, serial_number: int=None, useable_for_virtual_billing_meters: bool=None, value_correction: float=None, value_correction_parent_folder: float=None, visualization_name: str=None):
        """FolderSettings - a model defined in OpenAPI

        :param description: The description of this FolderSettings.
        :param enable: The enable of this FolderSettings.
        :param folder_type: The folder_type of this FolderSettings.
        :param name: The name of this FolderSettings.
        :param parent_folder_id: The parent_folder_id of this FolderSettings.
        :param serial_number: The serial_number of this FolderSettings.
        :param useable_for_virtual_billing_meters: The useable_for_virtual_billing_meters of this FolderSettings.
        :param value_correction: The value_correction of this FolderSettings.
        :param value_correction_parent_folder: The value_correction_parent_folder of this FolderSettings.
        :param visualization_name: The visualization_name of this FolderSettings.
        """
        self.openapi_types = {
            'description': str,
            'enable': bool,
            'folder_type': str,
            'name': str,
            'parent_folder_id': str,
            'serial_number': int,
            'useable_for_virtual_billing_meters': bool,
            'value_correction': float,
            'value_correction_parent_folder': float,
            'visualization_name': str
        }

        self.attribute_map = {
            'description': 'Description',
            'enable': 'Enable',
            'folder_type': 'FolderType',
            'name': 'Name',
            'parent_folder_id': 'ParentFolderId',
            'serial_number': 'SerialNumber',
            'useable_for_virtual_billing_meters': 'UseableForVirtualBillingMeters',
            'value_correction': 'ValueCorrection',
            'value_correction_parent_folder': 'ValueCorrectionParentFolder',
            'visualization_name': 'VisualizationName'
        }

        self._description = description
        self._enable = enable
        self._folder_type = folder_type
        self._name = name
        self._parent_folder_id = parent_folder_id
        self._serial_number = serial_number
        self._useable_for_virtual_billing_meters = useable_for_virtual_billing_meters
        self._value_correction = value_correction
        self._value_correction_parent_folder = value_correction_parent_folder
        self._visualization_name = visualization_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderSettings of this FolderSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this FolderSettings.

        The Description of the folder or meter

        :return: The description of this FolderSettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FolderSettings.

        The Description of the folder or meter

        :param description: The description of this FolderSettings.
        :type description: str
        """

        self._description = description

    @property
    def enable(self):
        """Gets the enable of this FolderSettings.

        Flag if the meter is enabled (folder not supported yet)

        :return: The enable of this FolderSettings.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this FolderSettings.

        Flag if the meter is enabled (folder not supported yet)

        :param enable: The enable of this FolderSettings.
        :type enable: bool
        """

        self._enable = enable

    @property
    def folder_type(self):
        """Gets the folder_type of this FolderSettings.

        The Type of the folder

        :return: The folder_type of this FolderSettings.
        :rtype: str
        """
        return self._folder_type

    @folder_type.setter
    def folder_type(self, folder_type):
        """Sets the folder_type of this FolderSettings.

        The Type of the folder

        :param folder_type: The folder_type of this FolderSettings.
        :type folder_type: str
        """
        allowed_values = ["Folder", "Location", "Factory", "House", "Office", "Machine", "VirtualMeter", "ElecticityFolder", "WaterFolder", "HeatFolder", "GasFolder", "TemperatureFolder", "Sun", "Light", "Ice", "Sofa", "Food", "Coffee", "Car", "ChargingStation", "Meter", "User", "Trash", "GridPhotovoltaicPowerSystem"]  # noqa: E501
        if folder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `folder_type` ({0}), must be one of {1}"
                .format(folder_type, allowed_values)
            )

        self._folder_type = folder_type

    @property
    def name(self):
        """Gets the name of this FolderSettings.

        The Name of the folder or meter

        :return: The name of this FolderSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FolderSettings.

        The Name of the folder or meter

        :param name: The name of this FolderSettings.
        :type name: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FolderSettings.

        The parent folder ID of this item

        :return: The parent_folder_id of this FolderSettings.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FolderSettings.

        The parent folder ID of this item

        :param parent_folder_id: The parent_folder_id of this FolderSettings.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def serial_number(self):
        """Gets the serial_number of this FolderSettings.

        The serial number (meter only)

        :return: The serial_number of this FolderSettings.
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this FolderSettings.

        The serial number (meter only)

        :param serial_number: The serial_number of this FolderSettings.
        :type serial_number: int
        """

        self._serial_number = serial_number

    @property
    def useable_for_virtual_billing_meters(self):
        """Gets the useable_for_virtual_billing_meters of this FolderSettings.

        Flag if the meter is usable for virtual billing meters (e.g. washroom)

        :return: The useable_for_virtual_billing_meters of this FolderSettings.
        :rtype: bool
        """
        return self._useable_for_virtual_billing_meters

    @useable_for_virtual_billing_meters.setter
    def useable_for_virtual_billing_meters(self, useable_for_virtual_billing_meters):
        """Sets the useable_for_virtual_billing_meters of this FolderSettings.

        Flag if the meter is usable for virtual billing meters (e.g. washroom)

        :param useable_for_virtual_billing_meters: The useable_for_virtual_billing_meters of this FolderSettings.
        :type useable_for_virtual_billing_meters: bool
        """

        self._useable_for_virtual_billing_meters = useable_for_virtual_billing_meters

    @property
    def value_correction(self):
        """Gets the value_correction of this FolderSettings.

        The value correction on this meter

        :return: The value_correction of this FolderSettings.
        :rtype: float
        """
        return self._value_correction

    @value_correction.setter
    def value_correction(self, value_correction):
        """Sets the value_correction of this FolderSettings.

        The value correction on this meter

        :param value_correction: The value_correction of this FolderSettings.
        :type value_correction: float
        """

        self._value_correction = value_correction

    @property
    def value_correction_parent_folder(self):
        """Gets the value_correction_parent_folder of this FolderSettings.

        The value correction on all parent folders. but not on the meter itself

        :return: The value_correction_parent_folder of this FolderSettings.
        :rtype: float
        """
        return self._value_correction_parent_folder

    @value_correction_parent_folder.setter
    def value_correction_parent_folder(self, value_correction_parent_folder):
        """Sets the value_correction_parent_folder of this FolderSettings.

        The value correction on all parent folders. but not on the meter itself

        :param value_correction_parent_folder: The value_correction_parent_folder of this FolderSettings.
        :type value_correction_parent_folder: float
        """

        self._value_correction_parent_folder = value_correction_parent_folder

    @property
    def visualization_name(self):
        """Gets the visualization_name of this FolderSettings.

        The name of the visualization of the folder

        :return: The visualization_name of this FolderSettings.
        :rtype: str
        """
        return self._visualization_name

    @visualization_name.setter
    def visualization_name(self, visualization_name):
        """Sets the visualization_name of this FolderSettings.

        The name of the visualization of the folder

        :param visualization_name: The visualization_name of this FolderSettings.
        :type visualization_name: str
        """

        self._visualization_name = visualization_name
