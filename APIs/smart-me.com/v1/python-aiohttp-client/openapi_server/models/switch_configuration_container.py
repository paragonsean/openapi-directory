# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SwitchConfigurationContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_switch_off: bool=None, number: int=None):
        """SwitchConfigurationContainer - a model defined in OpenAPI

        :param can_switch_off: The can_switch_off of this SwitchConfigurationContainer.
        :param number: The number of this SwitchConfigurationContainer.
        """
        self.openapi_types = {
            'can_switch_off': bool,
            'number': int
        }

        self.attribute_map = {
            'can_switch_off': 'CanSwitchOff',
            'number': 'Number'
        }

        self._can_switch_off = can_switch_off
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SwitchConfigurationContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SwitchConfigurationContainer of this SwitchConfigurationContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_switch_off(self):
        """Gets the can_switch_off of this SwitchConfigurationContainer.

        Flag if the switch can be turned off or is always on.

        :return: The can_switch_off of this SwitchConfigurationContainer.
        :rtype: bool
        """
        return self._can_switch_off

    @can_switch_off.setter
    def can_switch_off(self, can_switch_off):
        """Sets the can_switch_off of this SwitchConfigurationContainer.

        Flag if the switch can be turned off or is always on.

        :param can_switch_off: The can_switch_off of this SwitchConfigurationContainer.
        :type can_switch_off: bool
        """

        self._can_switch_off = can_switch_off

    @property
    def number(self):
        """Gets the number of this SwitchConfigurationContainer.

        The number of the phase. (e.g. 1 for Phase L1)

        :return: The number of this SwitchConfigurationContainer.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this SwitchConfigurationContainer.

        The number of the phase. (e.g. 1 for Phase L1)

        :param number: The number of this SwitchConfigurationContainer.
        :type number: int
        """

        self._number = number
