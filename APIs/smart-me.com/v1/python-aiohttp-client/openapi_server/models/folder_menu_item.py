# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_export_settings import AutoExportSettings
from openapi_server import util


class FolderMenuItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_export_settings: AutoExportSettings=None, children: List[FolderMenuItem]=None, description: str=None, folder_type: str=None, icon: str=None, id: str=None, meter_serial_number: str=None, name: str=None, user_id: str=None):
        """FolderMenuItem - a model defined in OpenAPI

        :param auto_export_settings: The auto_export_settings of this FolderMenuItem.
        :param children: The children of this FolderMenuItem.
        :param description: The description of this FolderMenuItem.
        :param folder_type: The folder_type of this FolderMenuItem.
        :param icon: The icon of this FolderMenuItem.
        :param id: The id of this FolderMenuItem.
        :param meter_serial_number: The meter_serial_number of this FolderMenuItem.
        :param name: The name of this FolderMenuItem.
        :param user_id: The user_id of this FolderMenuItem.
        """
        self.openapi_types = {
            'auto_export_settings': AutoExportSettings,
            'children': List[FolderMenuItem],
            'description': str,
            'folder_type': str,
            'icon': str,
            'id': str,
            'meter_serial_number': str,
            'name': str,
            'user_id': str
        }

        self.attribute_map = {
            'auto_export_settings': 'AutoExportSettings',
            'children': 'Children',
            'description': 'Description',
            'folder_type': 'FolderType',
            'icon': 'Icon',
            'id': 'Id',
            'meter_serial_number': 'MeterSerialNumber',
            'name': 'Name',
            'user_id': 'UserId'
        }

        self._auto_export_settings = auto_export_settings
        self._children = children
        self._description = description
        self._folder_type = folder_type
        self._icon = icon
        self._id = id
        self._meter_serial_number = meter_serial_number
        self._name = name
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderMenuItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderMenuItem of this FolderMenuItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_export_settings(self):
        """Gets the auto_export_settings of this FolderMenuItem.


        :return: The auto_export_settings of this FolderMenuItem.
        :rtype: AutoExportSettings
        """
        return self._auto_export_settings

    @auto_export_settings.setter
    def auto_export_settings(self, auto_export_settings):
        """Sets the auto_export_settings of this FolderMenuItem.


        :param auto_export_settings: The auto_export_settings of this FolderMenuItem.
        :type auto_export_settings: AutoExportSettings
        """

        self._auto_export_settings = auto_export_settings

    @property
    def children(self):
        """Gets the children of this FolderMenuItem.

        Children folder menu items (sub folder menu items)

        :return: The children of this FolderMenuItem.
        :rtype: List[FolderMenuItem]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this FolderMenuItem.

        Children folder menu items (sub folder menu items)

        :param children: The children of this FolderMenuItem.
        :type children: List[FolderMenuItem]
        """

        self._children = children

    @property
    def description(self):
        """Gets the description of this FolderMenuItem.

        The Description of the folder

        :return: The description of this FolderMenuItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FolderMenuItem.

        The Description of the folder

        :param description: The description of this FolderMenuItem.
        :type description: str
        """

        self._description = description

    @property
    def folder_type(self):
        """Gets the folder_type of this FolderMenuItem.

        The folder type of the item

        :return: The folder_type of this FolderMenuItem.
        :rtype: str
        """
        return self._folder_type

    @folder_type.setter
    def folder_type(self, folder_type):
        """Sets the folder_type of this FolderMenuItem.

        The folder type of the item

        :param folder_type: The folder_type of this FolderMenuItem.
        :type folder_type: str
        """
        allowed_values = ["Folder", "Location", "Factory", "House", "Office", "Machine", "VirtualMeter", "ElecticityFolder", "WaterFolder", "HeatFolder", "GasFolder", "TemperatureFolder", "Sun", "Light", "Ice", "Sofa", "Food", "Coffee", "Car", "ChargingStation", "Meter", "User", "Trash", "GridPhotovoltaicPowerSystem"]  # noqa: E501
        if folder_type not in allowed_values:
            raise ValueError(
                "Invalid value for `folder_type` ({0}), must be one of {1}"
                .format(folder_type, allowed_values)
            )

        self._folder_type = folder_type

    @property
    def icon(self):
        """Gets the icon of this FolderMenuItem.

        The path to the Icon of this folder

        :return: The icon of this FolderMenuItem.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this FolderMenuItem.

        The path to the Icon of this folder

        :param icon: The icon of this FolderMenuItem.
        :type icon: str
        """

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this FolderMenuItem.

        The id of the folder menu item

        :return: The id of this FolderMenuItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FolderMenuItem.

        The id of the folder menu item

        :param id: The id of this FolderMenuItem.
        :type id: str
        """

        self._id = id

    @property
    def meter_serial_number(self):
        """Gets the meter_serial_number of this FolderMenuItem.

        The serial number if the folder menu item is a meter.               Serial number is handled as a string, as javascript on client side cannot handle long integers properly.

        :return: The meter_serial_number of this FolderMenuItem.
        :rtype: str
        """
        return self._meter_serial_number

    @meter_serial_number.setter
    def meter_serial_number(self, meter_serial_number):
        """Sets the meter_serial_number of this FolderMenuItem.

        The serial number if the folder menu item is a meter.               Serial number is handled as a string, as javascript on client side cannot handle long integers properly.

        :param meter_serial_number: The meter_serial_number of this FolderMenuItem.
        :type meter_serial_number: str
        """

        self._meter_serial_number = meter_serial_number

    @property
    def name(self):
        """Gets the name of this FolderMenuItem.

        The Name of the item

        :return: The name of this FolderMenuItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FolderMenuItem.

        The Name of the item

        :param name: The name of this FolderMenuItem.
        :type name: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this FolderMenuItem.

        The ID of the user of this folder (only for foldertype user)

        :return: The user_id of this FolderMenuItem.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FolderMenuItem.

        The ID of the user of this folder (only for foldertype user)

        :param user_id: The user_id of this FolderMenuItem.
        :type user_id: str
        """

        self._user_id = user_id
