# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PicoChargingData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_charging_energy: float=None, active_charging_power: float=None, connection_mode: str=None, duration: int=None, last_warning_or_error: str=None, last_warning_or_error_message: str=None, last_warning_or_error_time: datetime=None, load_shedding_state: str=None, loadmanagement_group_name: str=None, max_allowed_charging_current: int=None, max_dynamic_current: int=None, max_loadmanagement_group_current: int=None, max_station_current: int=None, min_station_current: int=None, rssi: int=None, state: str=None, value_date: datetime=None):
        """PicoChargingData - a model defined in OpenAPI

        :param active_charging_energy: The active_charging_energy of this PicoChargingData.
        :param active_charging_power: The active_charging_power of this PicoChargingData.
        :param connection_mode: The connection_mode of this PicoChargingData.
        :param duration: The duration of this PicoChargingData.
        :param last_warning_or_error: The last_warning_or_error of this PicoChargingData.
        :param last_warning_or_error_message: The last_warning_or_error_message of this PicoChargingData.
        :param last_warning_or_error_time: The last_warning_or_error_time of this PicoChargingData.
        :param load_shedding_state: The load_shedding_state of this PicoChargingData.
        :param loadmanagement_group_name: The loadmanagement_group_name of this PicoChargingData.
        :param max_allowed_charging_current: The max_allowed_charging_current of this PicoChargingData.
        :param max_dynamic_current: The max_dynamic_current of this PicoChargingData.
        :param max_loadmanagement_group_current: The max_loadmanagement_group_current of this PicoChargingData.
        :param max_station_current: The max_station_current of this PicoChargingData.
        :param min_station_current: The min_station_current of this PicoChargingData.
        :param rssi: The rssi of this PicoChargingData.
        :param state: The state of this PicoChargingData.
        :param value_date: The value_date of this PicoChargingData.
        """
        self.openapi_types = {
            'active_charging_energy': float,
            'active_charging_power': float,
            'connection_mode': str,
            'duration': int,
            'last_warning_or_error': str,
            'last_warning_or_error_message': str,
            'last_warning_or_error_time': datetime,
            'load_shedding_state': str,
            'loadmanagement_group_name': str,
            'max_allowed_charging_current': int,
            'max_dynamic_current': int,
            'max_loadmanagement_group_current': int,
            'max_station_current': int,
            'min_station_current': int,
            'rssi': int,
            'state': str,
            'value_date': datetime
        }

        self.attribute_map = {
            'active_charging_energy': 'ActiveChargingEnergy',
            'active_charging_power': 'ActiveChargingPower',
            'connection_mode': 'ConnectionMode',
            'duration': 'Duration',
            'last_warning_or_error': 'LastWarningOrError',
            'last_warning_or_error_message': 'LastWarningOrErrorMessage',
            'last_warning_or_error_time': 'LastWarningOrErrorTime',
            'load_shedding_state': 'LoadSheddingState',
            'loadmanagement_group_name': 'LoadmanagementGroupName',
            'max_allowed_charging_current': 'MaxAllowedChargingCurrent',
            'max_dynamic_current': 'MaxDynamicCurrent',
            'max_loadmanagement_group_current': 'MaxLoadmanagementGroupCurrent',
            'max_station_current': 'MaxStationCurrent',
            'min_station_current': 'MinStationCurrent',
            'rssi': 'RSSI',
            'state': 'State',
            'value_date': 'ValueDate'
        }

        self._active_charging_energy = active_charging_energy
        self._active_charging_power = active_charging_power
        self._connection_mode = connection_mode
        self._duration = duration
        self._last_warning_or_error = last_warning_or_error
        self._last_warning_or_error_message = last_warning_or_error_message
        self._last_warning_or_error_time = last_warning_or_error_time
        self._load_shedding_state = load_shedding_state
        self._loadmanagement_group_name = loadmanagement_group_name
        self._max_allowed_charging_current = max_allowed_charging_current
        self._max_dynamic_current = max_dynamic_current
        self._max_loadmanagement_group_current = max_loadmanagement_group_current
        self._max_station_current = max_station_current
        self._min_station_current = min_station_current
        self._rssi = rssi
        self._state = state
        self._value_date = value_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PicoChargingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PicoChargingData of this PicoChargingData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_charging_energy(self):
        """Gets the active_charging_energy of this PicoChargingData.

        The energy used by this active charging (in kWh)

        :return: The active_charging_energy of this PicoChargingData.
        :rtype: float
        """
        return self._active_charging_energy

    @active_charging_energy.setter
    def active_charging_energy(self, active_charging_energy):
        """Sets the active_charging_energy of this PicoChargingData.

        The energy used by this active charging (in kWh)

        :param active_charging_energy: The active_charging_energy of this PicoChargingData.
        :type active_charging_energy: float
        """

        self._active_charging_energy = active_charging_energy

    @property
    def active_charging_power(self):
        """Gets the active_charging_power of this PicoChargingData.

        The power of the active charging (in kW)

        :return: The active_charging_power of this PicoChargingData.
        :rtype: float
        """
        return self._active_charging_power

    @active_charging_power.setter
    def active_charging_power(self, active_charging_power):
        """Sets the active_charging_power of this PicoChargingData.

        The power of the active charging (in kW)

        :param active_charging_power: The active_charging_power of this PicoChargingData.
        :type active_charging_power: float
        """

        self._active_charging_power = active_charging_power

    @property
    def connection_mode(self):
        """Gets the connection_mode of this PicoChargingData.

        The mode how this station is connected to the cloud

        :return: The connection_mode of this PicoChargingData.
        :rtype: str
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this PicoChargingData.

        The mode how this station is connected to the cloud

        :param connection_mode: The connection_mode of this PicoChargingData.
        :type connection_mode: str
        """
        allowed_values = ["NetworkToCloudConnectionMode_NoConnection", "NetworkToCloudConnectionMode_DirectWiFiConnection", "NetworkToCloudConnectionMode_GPRSConnection", "NetworkToCloudConnectionMode_NBIotConnection", "NetworkToCloudConnectionMode_LteCatM1Connection", "NetworkToCloudConnectionMode_MeshWiFiConnection", "NetworkToCloudConnectionMode_MeshMobileConnection"]  # noqa: E501
        if connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_mode` ({0}), must be one of {1}"
                .format(connection_mode, allowed_values)
            )

        self._connection_mode = connection_mode

    @property
    def duration(self):
        """Gets the duration of this PicoChargingData.

        The duration of this charging in seconds

        :return: The duration of this PicoChargingData.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PicoChargingData.

        The duration of this charging in seconds

        :param duration: The duration of this PicoChargingData.
        :type duration: int
        """

        self._duration = duration

    @property
    def last_warning_or_error(self):
        """Gets the last_warning_or_error of this PicoChargingData.

        The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.

        :return: The last_warning_or_error of this PicoChargingData.
        :rtype: str
        """
        return self._last_warning_or_error

    @last_warning_or_error.setter
    def last_warning_or_error(self, last_warning_or_error):
        """Sets the last_warning_or_error of this PicoChargingData.

        The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.

        :param last_warning_or_error: The last_warning_or_error of this PicoChargingData.
        :type last_warning_or_error: str
        """
        allowed_values = ["MeterDataloggerEvent", "MeterRestart", "PowerDown", "MissingPhaseL1", "MissingPhaseL2", "MissingPhaseL3", "TamperDetectionCover", "MagneticFieldDetection", "ClockAdjusted", "Overvoltage", "Undervoltage", "OvervoltageL1", "OvervoltageL2", "OvervoltageL3", "ChargingTransaction", "PicoErrorControllerPanic", "PicoErrorMidServicePanic", "PicoWarningRcdTriggered", "PicoWarningCableLockError", "PicoWarningDiodeFailure", "PicoWarningOverload", "PicoWarningHighTemperature"]  # noqa: E501
        if last_warning_or_error not in allowed_values:
            raise ValueError(
                "Invalid value for `last_warning_or_error` ({0}), must be one of {1}"
                .format(last_warning_or_error, allowed_values)
            )

        self._last_warning_or_error = last_warning_or_error

    @property
    def last_warning_or_error_message(self):
        """Gets the last_warning_or_error_message of this PicoChargingData.

        The message of the last warning or error of the station.

        :return: The last_warning_or_error_message of this PicoChargingData.
        :rtype: str
        """
        return self._last_warning_or_error_message

    @last_warning_or_error_message.setter
    def last_warning_or_error_message(self, last_warning_or_error_message):
        """Sets the last_warning_or_error_message of this PicoChargingData.

        The message of the last warning or error of the station.

        :param last_warning_or_error_message: The last_warning_or_error_message of this PicoChargingData.
        :type last_warning_or_error_message: str
        """

        self._last_warning_or_error_message = last_warning_or_error_message

    @property
    def last_warning_or_error_time(self):
        """Gets the last_warning_or_error_time of this PicoChargingData.

        The time when the LastWarningOrError happend

        :return: The last_warning_or_error_time of this PicoChargingData.
        :rtype: datetime
        """
        return self._last_warning_or_error_time

    @last_warning_or_error_time.setter
    def last_warning_or_error_time(self, last_warning_or_error_time):
        """Sets the last_warning_or_error_time of this PicoChargingData.

        The time when the LastWarningOrError happend

        :param last_warning_or_error_time: The last_warning_or_error_time of this PicoChargingData.
        :type last_warning_or_error_time: datetime
        """

        self._last_warning_or_error_time = last_warning_or_error_time

    @property
    def load_shedding_state(self):
        """Gets the load_shedding_state of this PicoChargingData.

        Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A

        :return: The load_shedding_state of this PicoChargingData.
        :rtype: str
        """
        return self._load_shedding_state

    @load_shedding_state.setter
    def load_shedding_state(self, load_shedding_state):
        """Sets the load_shedding_state of this PicoChargingData.

        Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A

        :param load_shedding_state: The load_shedding_state of this PicoChargingData.
        :type load_shedding_state: str
        """
        allowed_values = ["MaxCurrent", "HalfCurrent", "MinCurrent", "NoCurrent"]  # noqa: E501
        if load_shedding_state not in allowed_values:
            raise ValueError(
                "Invalid value for `load_shedding_state` ({0}), must be one of {1}"
                .format(load_shedding_state, allowed_values)
            )

        self._load_shedding_state = load_shedding_state

    @property
    def loadmanagement_group_name(self):
        """Gets the loadmanagement_group_name of this PicoChargingData.

        The name of the loadmanagement group. Or string.empty if the station is not in a group

        :return: The loadmanagement_group_name of this PicoChargingData.
        :rtype: str
        """
        return self._loadmanagement_group_name

    @loadmanagement_group_name.setter
    def loadmanagement_group_name(self, loadmanagement_group_name):
        """Sets the loadmanagement_group_name of this PicoChargingData.

        The name of the loadmanagement group. Or string.empty if the station is not in a group

        :param loadmanagement_group_name: The loadmanagement_group_name of this PicoChargingData.
        :type loadmanagement_group_name: str
        """

        self._loadmanagement_group_name = loadmanagement_group_name

    @property
    def max_allowed_charging_current(self):
        """Gets the max_allowed_charging_current of this PicoChargingData.

        Max allowed charging current in A

        :return: The max_allowed_charging_current of this PicoChargingData.
        :rtype: int
        """
        return self._max_allowed_charging_current

    @max_allowed_charging_current.setter
    def max_allowed_charging_current(self, max_allowed_charging_current):
        """Sets the max_allowed_charging_current of this PicoChargingData.

        Max allowed charging current in A

        :param max_allowed_charging_current: The max_allowed_charging_current of this PicoChargingData.
        :type max_allowed_charging_current: int
        """

        self._max_allowed_charging_current = max_allowed_charging_current

    @property
    def max_dynamic_current(self):
        """Gets the max_dynamic_current of this PicoChargingData.

        Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A

        :return: The max_dynamic_current of this PicoChargingData.
        :rtype: int
        """
        return self._max_dynamic_current

    @max_dynamic_current.setter
    def max_dynamic_current(self, max_dynamic_current):
        """Sets the max_dynamic_current of this PicoChargingData.

        Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A

        :param max_dynamic_current: The max_dynamic_current of this PicoChargingData.
        :type max_dynamic_current: int
        """

        self._max_dynamic_current = max_dynamic_current

    @property
    def max_loadmanagement_group_current(self):
        """Gets the max_loadmanagement_group_current of this PicoChargingData.

        Max. current of the loadmanagement group of this station (if there is any) in A

        :return: The max_loadmanagement_group_current of this PicoChargingData.
        :rtype: int
        """
        return self._max_loadmanagement_group_current

    @max_loadmanagement_group_current.setter
    def max_loadmanagement_group_current(self, max_loadmanagement_group_current):
        """Sets the max_loadmanagement_group_current of this PicoChargingData.

        Max. current of the loadmanagement group of this station (if there is any) in A

        :param max_loadmanagement_group_current: The max_loadmanagement_group_current of this PicoChargingData.
        :type max_loadmanagement_group_current: int
        """

        self._max_loadmanagement_group_current = max_loadmanagement_group_current

    @property
    def max_station_current(self):
        """Gets the max_station_current of this PicoChargingData.

        Max. current of the station in A

        :return: The max_station_current of this PicoChargingData.
        :rtype: int
        """
        return self._max_station_current

    @max_station_current.setter
    def max_station_current(self, max_station_current):
        """Sets the max_station_current of this PicoChargingData.

        Max. current of the station in A

        :param max_station_current: The max_station_current of this PicoChargingData.
        :type max_station_current: int
        """

        self._max_station_current = max_station_current

    @property
    def min_station_current(self):
        """Gets the min_station_current of this PicoChargingData.

        Min. current of the station in A

        :return: The min_station_current of this PicoChargingData.
        :rtype: int
        """
        return self._min_station_current

    @min_station_current.setter
    def min_station_current(self, min_station_current):
        """Sets the min_station_current of this PicoChargingData.

        Min. current of the station in A

        :param min_station_current: The min_station_current of this PicoChargingData.
        :type min_station_current: int
        """

        self._min_station_current = min_station_current

    @property
    def rssi(self):
        """Gets the rssi of this PicoChargingData.

        Received Signal Strength Indicator for the connection mode (wifi or mobile).               -127 (min) to 0 (Max)

        :return: The rssi of this PicoChargingData.
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this PicoChargingData.

        Received Signal Strength Indicator for the connection mode (wifi or mobile).               -127 (min) to 0 (Max)

        :param rssi: The rssi of this PicoChargingData.
        :type rssi: int
        """

        self._rssi = rssi

    @property
    def state(self):
        """Gets the state of this PicoChargingData.

        The state of the charging station

        :return: The state of this PicoChargingData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PicoChargingData.

        The state of the charging station

        :param state: The state of this PicoChargingData.
        :type state: str
        """
        allowed_values = ["Booting", "ReadyNoCarConnected", "ReadyCarConnected", "StartedWaitForCar", "Charging", "Installation", "Authorize", "Offline"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def value_date(self):
        """Gets the value_date of this PicoChargingData.

        The date of this values

        :return: The value_date of this PicoChargingData.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this PicoChargingData.

        The date of this values

        :param value_date: The value_date of this PicoChargingData.
        :type value_date: datetime
        """

        self._value_date = value_date
