# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_configuration_container import InputConfigurationContainer
from openapi_server.models.output_configuration_container import OutputConfigurationContainer
from openapi_server.models.switch_configuration_container import SwitchConfigurationContainer
from openapi_server import util


class SmartMeDeviceConfigurationContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_encryption_key: str=None, device_pin_code: str=None, dns_update_state: str=None, enable_modbus_tcp: bool=None, id: str=None, input_configuration: List[InputConfigurationContainer]=None, output_configuration: List[OutputConfigurationContainer]=None, show_reactive_energy: bool=None, switch_configuration: List[SwitchConfigurationContainer]=None, upload_interval: str=None):
        """SmartMeDeviceConfigurationContainer - a model defined in OpenAPI

        :param device_encryption_key: The device_encryption_key of this SmartMeDeviceConfigurationContainer.
        :param device_pin_code: The device_pin_code of this SmartMeDeviceConfigurationContainer.
        :param dns_update_state: The dns_update_state of this SmartMeDeviceConfigurationContainer.
        :param enable_modbus_tcp: The enable_modbus_tcp of this SmartMeDeviceConfigurationContainer.
        :param id: The id of this SmartMeDeviceConfigurationContainer.
        :param input_configuration: The input_configuration of this SmartMeDeviceConfigurationContainer.
        :param output_configuration: The output_configuration of this SmartMeDeviceConfigurationContainer.
        :param show_reactive_energy: The show_reactive_energy of this SmartMeDeviceConfigurationContainer.
        :param switch_configuration: The switch_configuration of this SmartMeDeviceConfigurationContainer.
        :param upload_interval: The upload_interval of this SmartMeDeviceConfigurationContainer.
        """
        self.openapi_types = {
            'device_encryption_key': str,
            'device_pin_code': str,
            'dns_update_state': str,
            'enable_modbus_tcp': bool,
            'id': str,
            'input_configuration': List[InputConfigurationContainer],
            'output_configuration': List[OutputConfigurationContainer],
            'show_reactive_energy': bool,
            'switch_configuration': List[SwitchConfigurationContainer],
            'upload_interval': str
        }

        self.attribute_map = {
            'device_encryption_key': 'DeviceEncryptionKey',
            'device_pin_code': 'DevicePinCode',
            'dns_update_state': 'DnsUpdateState',
            'enable_modbus_tcp': 'EnableModbusTcp',
            'id': 'Id',
            'input_configuration': 'InputConfiguration',
            'output_configuration': 'OutputConfiguration',
            'show_reactive_energy': 'ShowReactiveEnergy',
            'switch_configuration': 'SwitchConfiguration',
            'upload_interval': 'UploadInterval'
        }

        self._device_encryption_key = device_encryption_key
        self._device_pin_code = device_pin_code
        self._dns_update_state = dns_update_state
        self._enable_modbus_tcp = enable_modbus_tcp
        self._id = id
        self._input_configuration = input_configuration
        self._output_configuration = output_configuration
        self._show_reactive_energy = show_reactive_energy
        self._switch_configuration = switch_configuration
        self._upload_interval = upload_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SmartMeDeviceConfigurationContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SmartMeDeviceConfigurationContainer of this SmartMeDeviceConfigurationContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_encryption_key(self):
        """Gets the device_encryption_key of this SmartMeDeviceConfigurationContainer.

        The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)

        :return: The device_encryption_key of this SmartMeDeviceConfigurationContainer.
        :rtype: str
        """
        return self._device_encryption_key

    @device_encryption_key.setter
    def device_encryption_key(self, device_encryption_key):
        """Sets the device_encryption_key of this SmartMeDeviceConfigurationContainer.

        The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)

        :param device_encryption_key: The device_encryption_key of this SmartMeDeviceConfigurationContainer.
        :type device_encryption_key: str
        """

        self._device_encryption_key = device_encryption_key

    @property
    def device_pin_code(self):
        """Gets the device_pin_code of this SmartMeDeviceConfigurationContainer.

        PIN code to enter on a external meter (e.g. for the FNN meters)

        :return: The device_pin_code of this SmartMeDeviceConfigurationContainer.
        :rtype: str
        """
        return self._device_pin_code

    @device_pin_code.setter
    def device_pin_code(self, device_pin_code):
        """Sets the device_pin_code of this SmartMeDeviceConfigurationContainer.

        PIN code to enter on a external meter (e.g. for the FNN meters)

        :param device_pin_code: The device_pin_code of this SmartMeDeviceConfigurationContainer.
        :type device_pin_code: str
        """

        self._device_pin_code = device_pin_code

    @property
    def dns_update_state(self):
        """Gets the dns_update_state of this SmartMeDeviceConfigurationContainer.

        Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS

        :return: The dns_update_state of this SmartMeDeviceConfigurationContainer.
        :rtype: str
        """
        return self._dns_update_state

    @dns_update_state.setter
    def dns_update_state(self, dns_update_state):
        """Sets the dns_update_state of this SmartMeDeviceConfigurationContainer.

        Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS

        :param dns_update_state: The dns_update_state of this SmartMeDeviceConfigurationContainer.
        :type dns_update_state: str
        """
        allowed_values = ["NoUpdate", "DnsUpdatePublicIp", "DnsUpdateInternalIp"]  # noqa: E501
        if dns_update_state not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_update_state` ({0}), must be one of {1}"
                .format(dns_update_state, allowed_values)
            )

        self._dns_update_state = dns_update_state

    @property
    def enable_modbus_tcp(self):
        """Gets the enable_modbus_tcp of this SmartMeDeviceConfigurationContainer.

        Enables or disables Modbus TCP (if the meter supports it).

        :return: The enable_modbus_tcp of this SmartMeDeviceConfigurationContainer.
        :rtype: bool
        """
        return self._enable_modbus_tcp

    @enable_modbus_tcp.setter
    def enable_modbus_tcp(self, enable_modbus_tcp):
        """Sets the enable_modbus_tcp of this SmartMeDeviceConfigurationContainer.

        Enables or disables Modbus TCP (if the meter supports it).

        :param enable_modbus_tcp: The enable_modbus_tcp of this SmartMeDeviceConfigurationContainer.
        :type enable_modbus_tcp: bool
        """

        self._enable_modbus_tcp = enable_modbus_tcp

    @property
    def id(self):
        """Gets the id of this SmartMeDeviceConfigurationContainer.

        The ID of the device

        :return: The id of this SmartMeDeviceConfigurationContainer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmartMeDeviceConfigurationContainer.

        The ID of the device

        :param id: The id of this SmartMeDeviceConfigurationContainer.
        :type id: str
        """

        self._id = id

    @property
    def input_configuration(self):
        """Gets the input_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the intput outputs

        :return: The input_configuration of this SmartMeDeviceConfigurationContainer.
        :rtype: List[InputConfigurationContainer]
        """
        return self._input_configuration

    @input_configuration.setter
    def input_configuration(self, input_configuration):
        """Sets the input_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the intput outputs

        :param input_configuration: The input_configuration of this SmartMeDeviceConfigurationContainer.
        :type input_configuration: List[InputConfigurationContainer]
        """

        self._input_configuration = input_configuration

    @property
    def output_configuration(self):
        """Gets the output_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the external outputs

        :return: The output_configuration of this SmartMeDeviceConfigurationContainer.
        :rtype: List[OutputConfigurationContainer]
        """
        return self._output_configuration

    @output_configuration.setter
    def output_configuration(self, output_configuration):
        """Sets the output_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the external outputs

        :param output_configuration: The output_configuration of this SmartMeDeviceConfigurationContainer.
        :type output_configuration: List[OutputConfigurationContainer]
        """

        self._output_configuration = output_configuration

    @property
    def show_reactive_energy(self):
        """Gets the show_reactive_energy of this SmartMeDeviceConfigurationContainer.

        Shows the reactive energy values (if the meter supports it).

        :return: The show_reactive_energy of this SmartMeDeviceConfigurationContainer.
        :rtype: bool
        """
        return self._show_reactive_energy

    @show_reactive_energy.setter
    def show_reactive_energy(self, show_reactive_energy):
        """Sets the show_reactive_energy of this SmartMeDeviceConfigurationContainer.

        Shows the reactive energy values (if the meter supports it).

        :param show_reactive_energy: The show_reactive_energy of this SmartMeDeviceConfigurationContainer.
        :type show_reactive_energy: bool
        """

        self._show_reactive_energy = show_reactive_energy

    @property
    def switch_configuration(self):
        """Gets the switch_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the phase switches

        :return: The switch_configuration of this SmartMeDeviceConfigurationContainer.
        :rtype: List[SwitchConfigurationContainer]
        """
        return self._switch_configuration

    @switch_configuration.setter
    def switch_configuration(self, switch_configuration):
        """Sets the switch_configuration of this SmartMeDeviceConfigurationContainer.

        The configuration for the phase switches

        :param switch_configuration: The switch_configuration of this SmartMeDeviceConfigurationContainer.
        :type switch_configuration: List[SwitchConfigurationContainer]
        """

        self._switch_configuration = switch_configuration

    @property
    def upload_interval(self):
        """Gets the upload_interval of this SmartMeDeviceConfigurationContainer.

        Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.

        :return: The upload_interval of this SmartMeDeviceConfigurationContainer.
        :rtype: str
        """
        return self._upload_interval

    @upload_interval.setter
    def upload_interval(self, upload_interval):
        """Sets the upload_interval of this SmartMeDeviceConfigurationContainer.

        Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.

        :param upload_interval: The upload_interval of this SmartMeDeviceConfigurationContainer.
        :type upload_interval: str
        """
        allowed_values = ["UploadInterval_1s", "UploadInterval_5s", "UploadInterval_10s", "UploadInterval_30s", "UploadInterval_60s", "UploadInterval_5min", "UploadInterval_15min", "UploadInterval_30min", "UploadInterval_60min", "UploadInterval_6h", "UploadInterval_12h", "UploadInterval_24h"]  # noqa: E501
        if upload_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_interval` ({0}), must be one of {1}"
                .format(upload_interval, allowed_values)
            )

        self._upload_interval = upload_interval
