# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_information import InputInformation
from openapi_server.models.output_information import OutputInformation
from openapi_server import util


class MeterFolderInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, communication_module_firmware_version: int=None, communication_module_hardware_version: int=None, firmware_version: int=None, hardware_version: int=None, input_informations: List[InputInformation]=None, is_folder: bool=None, name: str=None, output_informations: List[OutputInformation]=None):
        """MeterFolderInformation - a model defined in OpenAPI

        :param communication_module_firmware_version: The communication_module_firmware_version of this MeterFolderInformation.
        :param communication_module_hardware_version: The communication_module_hardware_version of this MeterFolderInformation.
        :param firmware_version: The firmware_version of this MeterFolderInformation.
        :param hardware_version: The hardware_version of this MeterFolderInformation.
        :param input_informations: The input_informations of this MeterFolderInformation.
        :param is_folder: The is_folder of this MeterFolderInformation.
        :param name: The name of this MeterFolderInformation.
        :param output_informations: The output_informations of this MeterFolderInformation.
        """
        self.openapi_types = {
            'communication_module_firmware_version': int,
            'communication_module_hardware_version': int,
            'firmware_version': int,
            'hardware_version': int,
            'input_informations': List[InputInformation],
            'is_folder': bool,
            'name': str,
            'output_informations': List[OutputInformation]
        }

        self.attribute_map = {
            'communication_module_firmware_version': 'CommunicationModuleFirmwareVersion',
            'communication_module_hardware_version': 'CommunicationModuleHardwareVersion',
            'firmware_version': 'FirmwareVersion',
            'hardware_version': 'HardwareVersion',
            'input_informations': 'InputInformations',
            'is_folder': 'IsFolder',
            'name': 'Name',
            'output_informations': 'OutputInformations'
        }

        self._communication_module_firmware_version = communication_module_firmware_version
        self._communication_module_hardware_version = communication_module_hardware_version
        self._firmware_version = firmware_version
        self._hardware_version = hardware_version
        self._input_informations = input_informations
        self._is_folder = is_folder
        self._name = name
        self._output_informations = output_informations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeterFolderInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeterFolderInformation of this MeterFolderInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def communication_module_firmware_version(self):
        """Gets the communication_module_firmware_version of this MeterFolderInformation.

        The Version of the Communication Module (if exists)

        :return: The communication_module_firmware_version of this MeterFolderInformation.
        :rtype: int
        """
        return self._communication_module_firmware_version

    @communication_module_firmware_version.setter
    def communication_module_firmware_version(self, communication_module_firmware_version):
        """Sets the communication_module_firmware_version of this MeterFolderInformation.

        The Version of the Communication Module (if exists)

        :param communication_module_firmware_version: The communication_module_firmware_version of this MeterFolderInformation.
        :type communication_module_firmware_version: int
        """

        self._communication_module_firmware_version = communication_module_firmware_version

    @property
    def communication_module_hardware_version(self):
        """Gets the communication_module_hardware_version of this MeterFolderInformation.

        The Version of the Communication Module (if exists)

        :return: The communication_module_hardware_version of this MeterFolderInformation.
        :rtype: int
        """
        return self._communication_module_hardware_version

    @communication_module_hardware_version.setter
    def communication_module_hardware_version(self, communication_module_hardware_version):
        """Sets the communication_module_hardware_version of this MeterFolderInformation.

        The Version of the Communication Module (if exists)

        :param communication_module_hardware_version: The communication_module_hardware_version of this MeterFolderInformation.
        :type communication_module_hardware_version: int
        """

        self._communication_module_hardware_version = communication_module_hardware_version

    @property
    def firmware_version(self):
        """Gets the firmware_version of this MeterFolderInformation.

        The Firmware Version of a Meter

        :return: The firmware_version of this MeterFolderInformation.
        :rtype: int
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this MeterFolderInformation.

        The Firmware Version of a Meter

        :param firmware_version: The firmware_version of this MeterFolderInformation.
        :type firmware_version: int
        """

        self._firmware_version = firmware_version

    @property
    def hardware_version(self):
        """Gets the hardware_version of this MeterFolderInformation.

        The Hardware Version of a Meter.

        :return: The hardware_version of this MeterFolderInformation.
        :rtype: int
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """Sets the hardware_version of this MeterFolderInformation.

        The Hardware Version of a Meter.

        :param hardware_version: The hardware_version of this MeterFolderInformation.
        :type hardware_version: int
        """

        self._hardware_version = hardware_version

    @property
    def input_informations(self):
        """Gets the input_informations of this MeterFolderInformation.

        Informations about the available Inputs

        :return: The input_informations of this MeterFolderInformation.
        :rtype: List[InputInformation]
        """
        return self._input_informations

    @input_informations.setter
    def input_informations(self, input_informations):
        """Sets the input_informations of this MeterFolderInformation.

        Informations about the available Inputs

        :param input_informations: The input_informations of this MeterFolderInformation.
        :type input_informations: List[InputInformation]
        """

        self._input_informations = input_informations

    @property
    def is_folder(self):
        """Gets the is_folder of this MeterFolderInformation.

        Flag if it's a Folder or a Meter

        :return: The is_folder of this MeterFolderInformation.
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this MeterFolderInformation.

        Flag if it's a Folder or a Meter

        :param is_folder: The is_folder of this MeterFolderInformation.
        :type is_folder: bool
        """

        self._is_folder = is_folder

    @property
    def name(self):
        """Gets the name of this MeterFolderInformation.

        Name of the Meter or Folder

        :return: The name of this MeterFolderInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MeterFolderInformation.

        Name of the Meter or Folder

        :param name: The name of this MeterFolderInformation.
        :type name: str
        """

        self._name = name

    @property
    def output_informations(self):
        """Gets the output_informations of this MeterFolderInformation.

        Informations about the available Outputs

        :return: The output_informations of this MeterFolderInformation.
        :rtype: List[OutputInformation]
        """
        return self._output_informations

    @output_informations.setter
    def output_informations(self, output_informations):
        """Sets the output_informations of this MeterFolderInformation.

        Informations about the available Outputs

        :param output_informations: The output_informations of this MeterFolderInformation.
        :type output_informations: List[OutputInformation]
        """

        self._output_informations = output_informations
