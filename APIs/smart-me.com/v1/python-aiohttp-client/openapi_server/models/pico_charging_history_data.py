# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PicoChargingHistoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, energy_used: float=None, start_time: datetime=None, transaction_stop_reason: str=None):
        """PicoChargingHistoryData - a model defined in OpenAPI

        :param duration: The duration of this PicoChargingHistoryData.
        :param energy_used: The energy_used of this PicoChargingHistoryData.
        :param start_time: The start_time of this PicoChargingHistoryData.
        :param transaction_stop_reason: The transaction_stop_reason of this PicoChargingHistoryData.
        """
        self.openapi_types = {
            'duration': int,
            'energy_used': float,
            'start_time': datetime,
            'transaction_stop_reason': str
        }

        self.attribute_map = {
            'duration': 'Duration',
            'energy_used': 'EnergyUsed',
            'start_time': 'StartTime',
            'transaction_stop_reason': 'TransactionStopReason'
        }

        self._duration = duration
        self._energy_used = energy_used
        self._start_time = start_time
        self._transaction_stop_reason = transaction_stop_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PicoChargingHistoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PicoChargingHistoryData of this PicoChargingHistoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this PicoChargingHistoryData.

        The duration in seconds

        :return: The duration of this PicoChargingHistoryData.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PicoChargingHistoryData.

        The duration in seconds

        :param duration: The duration of this PicoChargingHistoryData.
        :type duration: int
        """

        self._duration = duration

    @property
    def energy_used(self):
        """Gets the energy_used of this PicoChargingHistoryData.

        The energy used (in kWh)

        :return: The energy_used of this PicoChargingHistoryData.
        :rtype: float
        """
        return self._energy_used

    @energy_used.setter
    def energy_used(self, energy_used):
        """Sets the energy_used of this PicoChargingHistoryData.

        The energy used (in kWh)

        :param energy_used: The energy_used of this PicoChargingHistoryData.
        :type energy_used: float
        """

        self._energy_used = energy_used

    @property
    def start_time(self):
        """Gets the start_time of this PicoChargingHistoryData.

        The starttime of the charging (in UTC)

        :return: The start_time of this PicoChargingHistoryData.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PicoChargingHistoryData.

        The starttime of the charging (in UTC)

        :param start_time: The start_time of this PicoChargingHistoryData.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def transaction_stop_reason(self):
        """Gets the transaction_stop_reason of this PicoChargingHistoryData.


        :return: The transaction_stop_reason of this PicoChargingHistoryData.
        :rtype: str
        """
        return self._transaction_stop_reason

    @transaction_stop_reason.setter
    def transaction_stop_reason(self, transaction_stop_reason):
        """Sets the transaction_stop_reason of this PicoChargingHistoryData.


        :param transaction_stop_reason: The transaction_stop_reason of this PicoChargingHistoryData.
        :type transaction_stop_reason: str
        """
        allowed_values = ["Unknown", "CarDisconnected", "RemoteStop", "ErrorStop", "InstallationMode", "CableError", "DiodeError", "RcdError", "OverloadError"]  # noqa: E501
        if transaction_stop_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_stop_reason` ({0}), must be one of {1}"
                .format(transaction_stop_reason, allowed_values)
            )

        self._transaction_stop_reason = transaction_stop_reason
