# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, name: str=None, number: int=None, obis_code: str=None):
        """OutputInformation - a model defined in OpenAPI

        :param action_type: The action_type of this OutputInformation.
        :param name: The name of this OutputInformation.
        :param number: The number of this OutputInformation.
        :param obis_code: The obis_code of this OutputInformation.
        """
        self.openapi_types = {
            'action_type': str,
            'name': str,
            'number': int,
            'obis_code': str
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'name': 'Name',
            'number': 'Number',
            'obis_code': 'ObisCode'
        }

        self._action_type = action_type
        self._name = name
        self._number = number
        self._obis_code = obis_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputInformation of this OutputInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this OutputInformation.

        The type of the Output

        :return: The action_type of this OutputInformation.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this OutputInformation.

        The type of the Output

        :param action_type: The action_type of this OutputInformation.
        :type action_type: str
        """
        allowed_values = ["OnOffAction", "AnalogAction"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def name(self):
        """Gets the name of this OutputInformation.

        The Name of the Output

        :return: The name of this OutputInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutputInformation.

        The Name of the Output

        :param name: The name of this OutputInformation.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this OutputInformation.

        The Number of this Output. Use this as ID to switch it on or off.

        :return: The number of this OutputInformation.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OutputInformation.

        The Number of this Output. Use this as ID to switch it on or off.

        :param number: The number of this OutputInformation.
        :type number: int
        """

        self._number = number

    @property
    def obis_code(self):
        """Gets the obis_code of this OutputInformation.

        The Obis Code for this Output

        :return: The obis_code of this OutputInformation.
        :rtype: str
        """
        return self._obis_code

    @obis_code.setter
    def obis_code(self, obis_code):
        """Sets the obis_code of this OutputInformation.

        The Obis Code for this Output

        :param obis_code: The obis_code of this OutputInformation.
        :type obis_code: str
        """

        self._obis_code = obis_code
