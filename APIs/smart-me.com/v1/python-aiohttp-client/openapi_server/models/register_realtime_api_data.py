# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterRealtimeApiData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_url: str=None, basic_auth_password: str=None, basic_auth_username: str=None, id: str=None, meter_id: str=None, registration_type: str=None, serial_number: str=None):
        """RegisterRealtimeApiData - a model defined in OpenAPI

        :param api_url: The api_url of this RegisterRealtimeApiData.
        :param basic_auth_password: The basic_auth_password of this RegisterRealtimeApiData.
        :param basic_auth_username: The basic_auth_username of this RegisterRealtimeApiData.
        :param id: The id of this RegisterRealtimeApiData.
        :param meter_id: The meter_id of this RegisterRealtimeApiData.
        :param registration_type: The registration_type of this RegisterRealtimeApiData.
        :param serial_number: The serial_number of this RegisterRealtimeApiData.
        """
        self.openapi_types = {
            'api_url': str,
            'basic_auth_password': str,
            'basic_auth_username': str,
            'id': str,
            'meter_id': str,
            'registration_type': str,
            'serial_number': str
        }

        self.attribute_map = {
            'api_url': 'ApiUrl',
            'basic_auth_password': 'BasicAuthPassword',
            'basic_auth_username': 'BasicAuthUsername',
            'id': 'Id',
            'meter_id': 'MeterId',
            'registration_type': 'RegistrationType',
            'serial_number': 'SerialNumber'
        }

        self._api_url = api_url
        self._basic_auth_password = basic_auth_password
        self._basic_auth_username = basic_auth_username
        self._id = id
        self._meter_id = meter_id
        self._registration_type = registration_type
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterRealtimeApiData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterRealtimeApiData of this RegisterRealtimeApiData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_url(self):
        """Gets the api_url of this RegisterRealtimeApiData.

        The URL of your endpoint. To this endpoint all the values are send to.

        :return: The api_url of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this RegisterRealtimeApiData.

        The URL of your endpoint. To this endpoint all the values are send to.

        :param api_url: The api_url of this RegisterRealtimeApiData.
        :type api_url: str
        """

        self._api_url = api_url

    @property
    def basic_auth_password(self):
        """Gets the basic_auth_password of this RegisterRealtimeApiData.

        The Password (basic auth) of your endpoint. Leave empty of none.

        :return: The basic_auth_password of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._basic_auth_password

    @basic_auth_password.setter
    def basic_auth_password(self, basic_auth_password):
        """Sets the basic_auth_password of this RegisterRealtimeApiData.

        The Password (basic auth) of your endpoint. Leave empty of none.

        :param basic_auth_password: The basic_auth_password of this RegisterRealtimeApiData.
        :type basic_auth_password: str
        """

        self._basic_auth_password = basic_auth_password

    @property
    def basic_auth_username(self):
        """Gets the basic_auth_username of this RegisterRealtimeApiData.

        The Username (basic auth) of your endpoint. Leave empty of none.

        :return: The basic_auth_username of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._basic_auth_username

    @basic_auth_username.setter
    def basic_auth_username(self, basic_auth_username):
        """Sets the basic_auth_username of this RegisterRealtimeApiData.

        The Username (basic auth) of your endpoint. Leave empty of none.

        :param basic_auth_username: The basic_auth_username of this RegisterRealtimeApiData.
        :type basic_auth_username: str
        """

        self._basic_auth_username = basic_auth_username

    @property
    def id(self):
        """Gets the id of this RegisterRealtimeApiData.

        The ID of the registration

        :return: The id of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegisterRealtimeApiData.

        The ID of the registration

        :param id: The id of this RegisterRealtimeApiData.
        :type id: str
        """

        self._id = id

    @property
    def meter_id(self):
        """Gets the meter_id of this RegisterRealtimeApiData.

        The ID of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\".

        :return: The meter_id of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this RegisterRealtimeApiData.

        The ID of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\".

        :param meter_id: The meter_id of this RegisterRealtimeApiData.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def registration_type(self):
        """Gets the registration_type of this RegisterRealtimeApiData.

        The Type of this registration (per meter, per user, ...)

        :return: The registration_type of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this RegisterRealtimeApiData.

        The Type of this registration (per meter, per user, ...)

        :param registration_type: The registration_type of this RegisterRealtimeApiData.
        :type registration_type: str
        """
        allowed_values = ["Disabled", "SingleMeterRegistration", "UserRegistration"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def serial_number(self):
        """Gets the serial_number of this RegisterRealtimeApiData.

        The serial number of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\" and the MeterId is null.               Example: 1 SME 01 63000000 or 6300000

        :return: The serial_number of this RegisterRealtimeApiData.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RegisterRealtimeApiData.

        The serial number of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\" and the MeterId is null.               Example: 1 SME 01 63000000 or 6300000

        :param serial_number: The serial_number of this RegisterRealtimeApiData.
        :type serial_number: str
        """

        self._serial_number = serial_number
