# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PicoLoadmanagementGroupDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, max_current: float=None, name: str=None, number_of_stations: int=None):
        """PicoLoadmanagementGroupDto - a model defined in OpenAPI

        :param id: The id of this PicoLoadmanagementGroupDto.
        :param max_current: The max_current of this PicoLoadmanagementGroupDto.
        :param name: The name of this PicoLoadmanagementGroupDto.
        :param number_of_stations: The number_of_stations of this PicoLoadmanagementGroupDto.
        """
        self.openapi_types = {
            'id': str,
            'max_current': float,
            'name': str,
            'number_of_stations': int
        }

        self.attribute_map = {
            'id': 'Id',
            'max_current': 'MaxCurrent',
            'name': 'Name',
            'number_of_stations': 'NumberOfStations'
        }

        self._id = id
        self._max_current = max_current
        self._name = name
        self._number_of_stations = number_of_stations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PicoLoadmanagementGroupDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PicoLoadmanagementGroupDto of this PicoLoadmanagementGroupDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PicoLoadmanagementGroupDto.

        The ID of the loadmanagement group

        :return: The id of this PicoLoadmanagementGroupDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PicoLoadmanagementGroupDto.

        The ID of the loadmanagement group

        :param id: The id of this PicoLoadmanagementGroupDto.
        :type id: str
        """

        self._id = id

    @property
    def max_current(self):
        """Gets the max_current of this PicoLoadmanagementGroupDto.

        The max current of this loadmanagement group

        :return: The max_current of this PicoLoadmanagementGroupDto.
        :rtype: float
        """
        return self._max_current

    @max_current.setter
    def max_current(self, max_current):
        """Sets the max_current of this PicoLoadmanagementGroupDto.

        The max current of this loadmanagement group

        :param max_current: The max_current of this PicoLoadmanagementGroupDto.
        :type max_current: float
        """

        self._max_current = max_current

    @property
    def name(self):
        """Gets the name of this PicoLoadmanagementGroupDto.

        The name of the station

        :return: The name of this PicoLoadmanagementGroupDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PicoLoadmanagementGroupDto.

        The name of the station

        :param name: The name of this PicoLoadmanagementGroupDto.
        :type name: str
        """

        self._name = name

    @property
    def number_of_stations(self):
        """Gets the number_of_stations of this PicoLoadmanagementGroupDto.

        The number of assigned stations

        :return: The number_of_stations of this PicoLoadmanagementGroupDto.
        :rtype: int
        """
        return self._number_of_stations

    @number_of_stations.setter
    def number_of_stations(self, number_of_stations):
        """Sets the number_of_stations of this PicoLoadmanagementGroupDto.

        The number of assigned stations

        :param number_of_stations: The number_of_stations of this PicoLoadmanagementGroupDto.
        :type number_of_stations: int
        """

        self._number_of_stations = number_of_stations
