# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_data import ValueData
from openapi_server import util


class ValuesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, device_id: str=None, values: List[ValueData]=None):
        """ValuesData - a model defined in OpenAPI

        :param _date: The _date of this ValuesData.
        :param device_id: The device_id of this ValuesData.
        :param values: The values of this ValuesData.
        """
        self.openapi_types = {
            '_date': datetime,
            'device_id': str,
            'values': List[ValueData]
        }

        self.attribute_map = {
            '_date': 'Date',
            'device_id': 'DeviceId',
            'values': 'Values'
        }

        self.__date = _date
        self._device_id = device_id
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValuesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValuesData of this ValuesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this ValuesData.

        The Date of the Value

        :return: The _date of this ValuesData.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ValuesData.

        The Date of the Value

        :param _date: The _date of this ValuesData.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def device_id(self):
        """Gets the device_id of this ValuesData.

        The ID of the device

        :return: The device_id of this ValuesData.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ValuesData.

        The ID of the device

        :param device_id: The device_id of this ValuesData.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def values(self):
        """Gets the values of this ValuesData.

        All values

        :return: The values of this ValuesData.
        :rtype: List[ValueData]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ValuesData.

        All values

        :param values: The values of this ValuesData.
        :type values: List[ValueData]
        """

        self._values = values
