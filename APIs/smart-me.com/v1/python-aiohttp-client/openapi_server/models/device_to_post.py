# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceToPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_power: float=None, counter_reading: float=None, counter_reading_export: float=None, counter_reading_export_t1: float=None, counter_reading_export_t2: float=None, counter_reading_t1: float=None, counter_reading_t2: float=None, current: float=None, current_l1: float=None, current_l2: float=None, current_l3: float=None, device_energy_type: str=None, digital_input1: bool=None, id: str=None, meter_sub_type: str=None, name: str=None, power_factor: float=None, power_factor_l1: float=None, power_factor_l2: float=None, power_factor_l3: float=None, serial: int=None, temperature: float=None, value_date: datetime=None, voltage: float=None, voltage_l1: float=None, voltage_l2: float=None, voltage_l3: float=None):
        """DeviceToPost - a model defined in OpenAPI

        :param active_power: The active_power of this DeviceToPost.
        :param counter_reading: The counter_reading of this DeviceToPost.
        :param counter_reading_export: The counter_reading_export of this DeviceToPost.
        :param counter_reading_export_t1: The counter_reading_export_t1 of this DeviceToPost.
        :param counter_reading_export_t2: The counter_reading_export_t2 of this DeviceToPost.
        :param counter_reading_t1: The counter_reading_t1 of this DeviceToPost.
        :param counter_reading_t2: The counter_reading_t2 of this DeviceToPost.
        :param current: The current of this DeviceToPost.
        :param current_l1: The current_l1 of this DeviceToPost.
        :param current_l2: The current_l2 of this DeviceToPost.
        :param current_l3: The current_l3 of this DeviceToPost.
        :param device_energy_type: The device_energy_type of this DeviceToPost.
        :param digital_input1: The digital_input1 of this DeviceToPost.
        :param id: The id of this DeviceToPost.
        :param meter_sub_type: The meter_sub_type of this DeviceToPost.
        :param name: The name of this DeviceToPost.
        :param power_factor: The power_factor of this DeviceToPost.
        :param power_factor_l1: The power_factor_l1 of this DeviceToPost.
        :param power_factor_l2: The power_factor_l2 of this DeviceToPost.
        :param power_factor_l3: The power_factor_l3 of this DeviceToPost.
        :param serial: The serial of this DeviceToPost.
        :param temperature: The temperature of this DeviceToPost.
        :param value_date: The value_date of this DeviceToPost.
        :param voltage: The voltage of this DeviceToPost.
        :param voltage_l1: The voltage_l1 of this DeviceToPost.
        :param voltage_l2: The voltage_l2 of this DeviceToPost.
        :param voltage_l3: The voltage_l3 of this DeviceToPost.
        """
        self.openapi_types = {
            'active_power': float,
            'counter_reading': float,
            'counter_reading_export': float,
            'counter_reading_export_t1': float,
            'counter_reading_export_t2': float,
            'counter_reading_t1': float,
            'counter_reading_t2': float,
            'current': float,
            'current_l1': float,
            'current_l2': float,
            'current_l3': float,
            'device_energy_type': str,
            'digital_input1': bool,
            'id': str,
            'meter_sub_type': str,
            'name': str,
            'power_factor': float,
            'power_factor_l1': float,
            'power_factor_l2': float,
            'power_factor_l3': float,
            'serial': int,
            'temperature': float,
            'value_date': datetime,
            'voltage': float,
            'voltage_l1': float,
            'voltage_l2': float,
            'voltage_l3': float
        }

        self.attribute_map = {
            'active_power': 'ActivePower',
            'counter_reading': 'CounterReading',
            'counter_reading_export': 'CounterReadingExport',
            'counter_reading_export_t1': 'CounterReadingExportT1',
            'counter_reading_export_t2': 'CounterReadingExportT2',
            'counter_reading_t1': 'CounterReadingT1',
            'counter_reading_t2': 'CounterReadingT2',
            'current': 'Current',
            'current_l1': 'CurrentL1',
            'current_l2': 'CurrentL2',
            'current_l3': 'CurrentL3',
            'device_energy_type': 'DeviceEnergyType',
            'digital_input1': 'DigitalInput1',
            'id': 'Id',
            'meter_sub_type': 'MeterSubType',
            'name': 'Name',
            'power_factor': 'PowerFactor',
            'power_factor_l1': 'PowerFactorL1',
            'power_factor_l2': 'PowerFactorL2',
            'power_factor_l3': 'PowerFactorL3',
            'serial': 'Serial',
            'temperature': 'Temperature',
            'value_date': 'ValueDate',
            'voltage': 'Voltage',
            'voltage_l1': 'VoltageL1',
            'voltage_l2': 'VoltageL2',
            'voltage_l3': 'VoltageL3'
        }

        self._active_power = active_power
        self._counter_reading = counter_reading
        self._counter_reading_export = counter_reading_export
        self._counter_reading_export_t1 = counter_reading_export_t1
        self._counter_reading_export_t2 = counter_reading_export_t2
        self._counter_reading_t1 = counter_reading_t1
        self._counter_reading_t2 = counter_reading_t2
        self._current = current
        self._current_l1 = current_l1
        self._current_l2 = current_l2
        self._current_l3 = current_l3
        self._device_energy_type = device_energy_type
        self._digital_input1 = digital_input1
        self._id = id
        self._meter_sub_type = meter_sub_type
        self._name = name
        self._power_factor = power_factor
        self._power_factor_l1 = power_factor_l1
        self._power_factor_l2 = power_factor_l2
        self._power_factor_l3 = power_factor_l3
        self._serial = serial
        self._temperature = temperature
        self._value_date = value_date
        self._voltage = voltage
        self._voltage_l1 = voltage_l1
        self._voltage_l2 = voltage_l2
        self._voltage_l3 = voltage_l3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceToPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceToPost of this DeviceToPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_power(self):
        """Gets the active_power of this DeviceToPost.

        The Active Power or current flow rate. In kW or m3/h

        :return: The active_power of this DeviceToPost.
        :rtype: float
        """
        return self._active_power

    @active_power.setter
    def active_power(self, active_power):
        """Sets the active_power of this DeviceToPost.

        The Active Power or current flow rate. In kW or m3/h

        :param active_power: The active_power of this DeviceToPost.
        :type active_power: float
        """

        self._active_power = active_power

    @property
    def counter_reading(self):
        """Gets the counter_reading of this DeviceToPost.

        The Meter Counter Reading (Total Energy used) in kWh or m3.

        :return: The counter_reading of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading

    @counter_reading.setter
    def counter_reading(self, counter_reading):
        """Sets the counter_reading of this DeviceToPost.

        The Meter Counter Reading (Total Energy used) in kWh or m3.

        :param counter_reading: The counter_reading of this DeviceToPost.
        :type counter_reading: float
        """

        self._counter_reading = counter_reading

    @property
    def counter_reading_export(self):
        """Gets the counter_reading_export of this DeviceToPost.

        The Meter Counter Reading only export

        :return: The counter_reading_export of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading_export

    @counter_reading_export.setter
    def counter_reading_export(self, counter_reading_export):
        """Sets the counter_reading_export of this DeviceToPost.

        The Meter Counter Reading only export

        :param counter_reading_export: The counter_reading_export of this DeviceToPost.
        :type counter_reading_export: float
        """

        self._counter_reading_export = counter_reading_export

    @property
    def counter_reading_export_t1(self):
        """Gets the counter_reading_export_t1 of this DeviceToPost.

        The Meter Counter Reading only export (Tariff 1)

        :return: The counter_reading_export_t1 of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading_export_t1

    @counter_reading_export_t1.setter
    def counter_reading_export_t1(self, counter_reading_export_t1):
        """Sets the counter_reading_export_t1 of this DeviceToPost.

        The Meter Counter Reading only export (Tariff 1)

        :param counter_reading_export_t1: The counter_reading_export_t1 of this DeviceToPost.
        :type counter_reading_export_t1: float
        """

        self._counter_reading_export_t1 = counter_reading_export_t1

    @property
    def counter_reading_export_t2(self):
        """Gets the counter_reading_export_t2 of this DeviceToPost.

        The Meter Counter Reading only export (Tariff 2)

        :return: The counter_reading_export_t2 of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading_export_t2

    @counter_reading_export_t2.setter
    def counter_reading_export_t2(self, counter_reading_export_t2):
        """Sets the counter_reading_export_t2 of this DeviceToPost.

        The Meter Counter Reading only export (Tariff 2)

        :param counter_reading_export_t2: The counter_reading_export_t2 of this DeviceToPost.
        :type counter_reading_export_t2: float
        """

        self._counter_reading_export_t2 = counter_reading_export_t2

    @property
    def counter_reading_t1(self):
        """Gets the counter_reading_t1 of this DeviceToPost.

        The Meter Counter Reading Tariff 1 in kWh or m3.

        :return: The counter_reading_t1 of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading_t1

    @counter_reading_t1.setter
    def counter_reading_t1(self, counter_reading_t1):
        """Sets the counter_reading_t1 of this DeviceToPost.

        The Meter Counter Reading Tariff 1 in kWh or m3.

        :param counter_reading_t1: The counter_reading_t1 of this DeviceToPost.
        :type counter_reading_t1: float
        """

        self._counter_reading_t1 = counter_reading_t1

    @property
    def counter_reading_t2(self):
        """Gets the counter_reading_t2 of this DeviceToPost.

        The Meter Counter Reading Tariff 2 in kWh or m3.

        :return: The counter_reading_t2 of this DeviceToPost.
        :rtype: float
        """
        return self._counter_reading_t2

    @counter_reading_t2.setter
    def counter_reading_t2(self, counter_reading_t2):
        """Sets the counter_reading_t2 of this DeviceToPost.

        The Meter Counter Reading Tariff 2 in kWh or m3.

        :param counter_reading_t2: The counter_reading_t2 of this DeviceToPost.
        :type counter_reading_t2: float
        """

        self._counter_reading_t2 = counter_reading_t2

    @property
    def current(self):
        """Gets the current of this DeviceToPost.

        The Current (in A)

        :return: The current of this DeviceToPost.
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this DeviceToPost.

        The Current (in A)

        :param current: The current of this DeviceToPost.
        :type current: float
        """

        self._current = current

    @property
    def current_l1(self):
        """Gets the current_l1 of this DeviceToPost.

        The Current Phase L1 (in A)

        :return: The current_l1 of this DeviceToPost.
        :rtype: float
        """
        return self._current_l1

    @current_l1.setter
    def current_l1(self, current_l1):
        """Sets the current_l1 of this DeviceToPost.

        The Current Phase L1 (in A)

        :param current_l1: The current_l1 of this DeviceToPost.
        :type current_l1: float
        """

        self._current_l1 = current_l1

    @property
    def current_l2(self):
        """Gets the current_l2 of this DeviceToPost.

        The Current Phase L2 (in A)

        :return: The current_l2 of this DeviceToPost.
        :rtype: float
        """
        return self._current_l2

    @current_l2.setter
    def current_l2(self, current_l2):
        """Sets the current_l2 of this DeviceToPost.

        The Current Phase L2 (in A)

        :param current_l2: The current_l2 of this DeviceToPost.
        :type current_l2: float
        """

        self._current_l2 = current_l2

    @property
    def current_l3(self):
        """Gets the current_l3 of this DeviceToPost.

        The Current Phase L3 (in A)

        :return: The current_l3 of this DeviceToPost.
        :rtype: float
        """
        return self._current_l3

    @current_l3.setter
    def current_l3(self, current_l3):
        """Sets the current_l3 of this DeviceToPost.

        The Current Phase L3 (in A)

        :param current_l3: The current_l3 of this DeviceToPost.
        :type current_l3: float
        """

        self._current_l3 = current_l3

    @property
    def device_energy_type(self):
        """Gets the device_energy_type of this DeviceToPost.

        The Energy Type of this device

        :return: The device_energy_type of this DeviceToPost.
        :rtype: str
        """
        return self._device_energy_type

    @device_energy_type.setter
    def device_energy_type(self, device_energy_type):
        """Sets the device_energy_type of this DeviceToPost.

        The Energy Type of this device

        :param device_energy_type: The device_energy_type of this DeviceToPost.
        :type device_energy_type: str
        """
        allowed_values = ["MeterTypeUnknown", "MeterTypeElectricity", "MeterTypeWater", "MeterTypeGas", "MeterTypeHeat", "MeterTypeHCA", "MeterTypeAllMeters", "MeterTypeTemperature", "MeterTypeMBusGateway", "MeterTypeRS485Gateway", "MeterTypeCustomDevice", "MeterTypeCompressedAir", "MeterTypeSolarLog", "MeterTypeVirtualMeter", "MeterTypeWMBusGateway"]  # noqa: E501
        if device_energy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_energy_type` ({0}), must be one of {1}"
                .format(device_energy_type, allowed_values)
            )

        self._device_energy_type = device_energy_type

    @property
    def digital_input1(self):
        """Gets the digital_input1 of this DeviceToPost.

        The digital input number 1

        :return: The digital_input1 of this DeviceToPost.
        :rtype: bool
        """
        return self._digital_input1

    @digital_input1.setter
    def digital_input1(self, digital_input1):
        """Sets the digital_input1 of this DeviceToPost.

        The digital input number 1

        :param digital_input1: The digital_input1 of this DeviceToPost.
        :type digital_input1: bool
        """

        self._digital_input1 = digital_input1

    @property
    def id(self):
        """Gets the id of this DeviceToPost.

        The ID of the device

        :return: The id of this DeviceToPost.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceToPost.

        The ID of the device

        :param id: The id of this DeviceToPost.
        :type id: str
        """

        self._id = id

    @property
    def meter_sub_type(self):
        """Gets the meter_sub_type of this DeviceToPost.

        The Sub Type of this Meter.

        :return: The meter_sub_type of this DeviceToPost.
        :rtype: str
        """
        return self._meter_sub_type

    @meter_sub_type.setter
    def meter_sub_type(self, meter_sub_type):
        """Sets the meter_sub_type of this DeviceToPost.

        The Sub Type of this Meter.

        :param meter_sub_type: The meter_sub_type of this DeviceToPost.
        :type meter_sub_type: str
        """
        allowed_values = ["MeterSubTypeUnknown", "MeterSubTypeCold", "MeterSubTypeHeat", "MeterSubTypeChargingStation", "MeterSubTypeElectricity", "MeterSubTypeWater", "MeterSubTypeGas", "MeterSubTypeElectricityHeat", "MeterSubTypeTemperature", "MeterSubTypeVirtualBattery"]  # noqa: E501
        if meter_sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `meter_sub_type` ({0}), must be one of {1}"
                .format(meter_sub_type, allowed_values)
            )

        self._meter_sub_type = meter_sub_type

    @property
    def name(self):
        """Gets the name of this DeviceToPost.

        The Name of the Device

        :return: The name of this DeviceToPost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceToPost.

        The Name of the Device

        :param name: The name of this DeviceToPost.
        :type name: str
        """

        self._name = name

    @property
    def power_factor(self):
        """Gets the power_factor of this DeviceToPost.

        The Power Factor (cos phi). Range: 0 - 1

        :return: The power_factor of this DeviceToPost.
        :rtype: float
        """
        return self._power_factor

    @power_factor.setter
    def power_factor(self, power_factor):
        """Sets the power_factor of this DeviceToPost.

        The Power Factor (cos phi). Range: 0 - 1

        :param power_factor: The power_factor of this DeviceToPost.
        :type power_factor: float
        """

        self._power_factor = power_factor

    @property
    def power_factor_l1(self):
        """Gets the power_factor_l1 of this DeviceToPost.

        The Power Factor (cos phi) Phase L1. Range: 0 - 1

        :return: The power_factor_l1 of this DeviceToPost.
        :rtype: float
        """
        return self._power_factor_l1

    @power_factor_l1.setter
    def power_factor_l1(self, power_factor_l1):
        """Sets the power_factor_l1 of this DeviceToPost.

        The Power Factor (cos phi) Phase L1. Range: 0 - 1

        :param power_factor_l1: The power_factor_l1 of this DeviceToPost.
        :type power_factor_l1: float
        """

        self._power_factor_l1 = power_factor_l1

    @property
    def power_factor_l2(self):
        """Gets the power_factor_l2 of this DeviceToPost.

        The Power Factor (cos phi) Phase L2. Range: 0 - 1

        :return: The power_factor_l2 of this DeviceToPost.
        :rtype: float
        """
        return self._power_factor_l2

    @power_factor_l2.setter
    def power_factor_l2(self, power_factor_l2):
        """Sets the power_factor_l2 of this DeviceToPost.

        The Power Factor (cos phi) Phase L2. Range: 0 - 1

        :param power_factor_l2: The power_factor_l2 of this DeviceToPost.
        :type power_factor_l2: float
        """

        self._power_factor_l2 = power_factor_l2

    @property
    def power_factor_l3(self):
        """Gets the power_factor_l3 of this DeviceToPost.

        The Power Factor (cos phi) Phase L3. Range: 0 - 1

        :return: The power_factor_l3 of this DeviceToPost.
        :rtype: float
        """
        return self._power_factor_l3

    @power_factor_l3.setter
    def power_factor_l3(self, power_factor_l3):
        """Sets the power_factor_l3 of this DeviceToPost.

        The Power Factor (cos phi) Phase L3. Range: 0 - 1

        :param power_factor_l3: The power_factor_l3 of this DeviceToPost.
        :type power_factor_l3: float
        """

        self._power_factor_l3 = power_factor_l3

    @property
    def serial(self):
        """Gets the serial of this DeviceToPost.

        The Serial number

        :return: The serial of this DeviceToPost.
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this DeviceToPost.

        The Serial number

        :param serial: The serial of this DeviceToPost.
        :type serial: int
        """

        self._serial = serial

    @property
    def temperature(self):
        """Gets the temperature of this DeviceToPost.

        The Temperature (in degree celsius)

        :return: The temperature of this DeviceToPost.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this DeviceToPost.

        The Temperature (in degree celsius)

        :param temperature: The temperature of this DeviceToPost.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def value_date(self):
        """Gets the value_date of this DeviceToPost.

        The Date of the Value (in UTC). If this is null the Server Time is used.

        :return: The value_date of this DeviceToPost.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this DeviceToPost.

        The Date of the Value (in UTC). If this is null the Server Time is used.

        :param value_date: The value_date of this DeviceToPost.
        :type value_date: datetime
        """

        self._value_date = value_date

    @property
    def voltage(self):
        """Gets the voltage of this DeviceToPost.

        The Voltage (in V)

        :return: The voltage of this DeviceToPost.
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this DeviceToPost.

        The Voltage (in V)

        :param voltage: The voltage of this DeviceToPost.
        :type voltage: float
        """

        self._voltage = voltage

    @property
    def voltage_l1(self):
        """Gets the voltage_l1 of this DeviceToPost.

        The Voltage Phase L1 (in V)

        :return: The voltage_l1 of this DeviceToPost.
        :rtype: float
        """
        return self._voltage_l1

    @voltage_l1.setter
    def voltage_l1(self, voltage_l1):
        """Sets the voltage_l1 of this DeviceToPost.

        The Voltage Phase L1 (in V)

        :param voltage_l1: The voltage_l1 of this DeviceToPost.
        :type voltage_l1: float
        """

        self._voltage_l1 = voltage_l1

    @property
    def voltage_l2(self):
        """Gets the voltage_l2 of this DeviceToPost.

        The Voltage Phase L2 (in V)

        :return: The voltage_l2 of this DeviceToPost.
        :rtype: float
        """
        return self._voltage_l2

    @voltage_l2.setter
    def voltage_l2(self, voltage_l2):
        """Sets the voltage_l2 of this DeviceToPost.

        The Voltage Phase L2 (in V)

        :param voltage_l2: The voltage_l2 of this DeviceToPost.
        :type voltage_l2: float
        """

        self._voltage_l2 = voltage_l2

    @property
    def voltage_l3(self):
        """Gets the voltage_l3 of this DeviceToPost.

        The Voltage Phase L3 (in V)

        :return: The voltage_l3 of this DeviceToPost.
        :rtype: float
        """
        return self._voltage_l3

    @voltage_l3.setter
    def voltage_l3(self, voltage_l3):
        """Sets the voltage_l3 of this DeviceToPost.

        The Voltage Phase L3 (in V)

        :param voltage_l3: The voltage_l3 of this DeviceToPost.
        :type voltage_l3: float
        """

        self._voltage_l3 = voltage_l3
