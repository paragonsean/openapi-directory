# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_power: float=None, active_power_l1: float=None, active_power_l2: float=None, active_power_l3: float=None, active_power_unit: str=None, active_tariff: int=None, additional_meter_serial_number: str=None, analog_output1: int=None, analog_output2: int=None, charging_station_state: str=None, counter_reading: float=None, counter_reading_export: float=None, counter_reading_import: float=None, counter_reading_t1: float=None, counter_reading_t2: float=None, counter_reading_t3: float=None, counter_reading_t4: float=None, counter_reading_unit: str=None, current: float=None, current_l1: float=None, current_l2: float=None, current_l3: float=None, device_energy_type: str=None, digital_input1: bool=None, digital_input2: bool=None, digital_output1: bool=None, digital_output2: bool=None, family_type: str=None, flow_rate: float=None, id: str=None, meter_sub_type: str=None, name: str=None, power_factor: float=None, power_factor_l1: float=None, power_factor_l2: float=None, power_factor_l3: float=None, serial: int=None, switch_on: bool=None, switch_phase_l1_on: bool=None, switch_phase_l2_on: bool=None, switch_phase_l3_on: bool=None, temperature: float=None, value_date: datetime=None, voltage: float=None, voltage_l1: float=None, voltage_l2: float=None, voltage_l3: float=None):
        """Device - a model defined in OpenAPI

        :param active_power: The active_power of this Device.
        :param active_power_l1: The active_power_l1 of this Device.
        :param active_power_l2: The active_power_l2 of this Device.
        :param active_power_l3: The active_power_l3 of this Device.
        :param active_power_unit: The active_power_unit of this Device.
        :param active_tariff: The active_tariff of this Device.
        :param additional_meter_serial_number: The additional_meter_serial_number of this Device.
        :param analog_output1: The analog_output1 of this Device.
        :param analog_output2: The analog_output2 of this Device.
        :param charging_station_state: The charging_station_state of this Device.
        :param counter_reading: The counter_reading of this Device.
        :param counter_reading_export: The counter_reading_export of this Device.
        :param counter_reading_import: The counter_reading_import of this Device.
        :param counter_reading_t1: The counter_reading_t1 of this Device.
        :param counter_reading_t2: The counter_reading_t2 of this Device.
        :param counter_reading_t3: The counter_reading_t3 of this Device.
        :param counter_reading_t4: The counter_reading_t4 of this Device.
        :param counter_reading_unit: The counter_reading_unit of this Device.
        :param current: The current of this Device.
        :param current_l1: The current_l1 of this Device.
        :param current_l2: The current_l2 of this Device.
        :param current_l3: The current_l3 of this Device.
        :param device_energy_type: The device_energy_type of this Device.
        :param digital_input1: The digital_input1 of this Device.
        :param digital_input2: The digital_input2 of this Device.
        :param digital_output1: The digital_output1 of this Device.
        :param digital_output2: The digital_output2 of this Device.
        :param family_type: The family_type of this Device.
        :param flow_rate: The flow_rate of this Device.
        :param id: The id of this Device.
        :param meter_sub_type: The meter_sub_type of this Device.
        :param name: The name of this Device.
        :param power_factor: The power_factor of this Device.
        :param power_factor_l1: The power_factor_l1 of this Device.
        :param power_factor_l2: The power_factor_l2 of this Device.
        :param power_factor_l3: The power_factor_l3 of this Device.
        :param serial: The serial of this Device.
        :param switch_on: The switch_on of this Device.
        :param switch_phase_l1_on: The switch_phase_l1_on of this Device.
        :param switch_phase_l2_on: The switch_phase_l2_on of this Device.
        :param switch_phase_l3_on: The switch_phase_l3_on of this Device.
        :param temperature: The temperature of this Device.
        :param value_date: The value_date of this Device.
        :param voltage: The voltage of this Device.
        :param voltage_l1: The voltage_l1 of this Device.
        :param voltage_l2: The voltage_l2 of this Device.
        :param voltage_l3: The voltage_l3 of this Device.
        """
        self.openapi_types = {
            'active_power': float,
            'active_power_l1': float,
            'active_power_l2': float,
            'active_power_l3': float,
            'active_power_unit': str,
            'active_tariff': int,
            'additional_meter_serial_number': str,
            'analog_output1': int,
            'analog_output2': int,
            'charging_station_state': str,
            'counter_reading': float,
            'counter_reading_export': float,
            'counter_reading_import': float,
            'counter_reading_t1': float,
            'counter_reading_t2': float,
            'counter_reading_t3': float,
            'counter_reading_t4': float,
            'counter_reading_unit': str,
            'current': float,
            'current_l1': float,
            'current_l2': float,
            'current_l3': float,
            'device_energy_type': str,
            'digital_input1': bool,
            'digital_input2': bool,
            'digital_output1': bool,
            'digital_output2': bool,
            'family_type': str,
            'flow_rate': float,
            'id': str,
            'meter_sub_type': str,
            'name': str,
            'power_factor': float,
            'power_factor_l1': float,
            'power_factor_l2': float,
            'power_factor_l3': float,
            'serial': int,
            'switch_on': bool,
            'switch_phase_l1_on': bool,
            'switch_phase_l2_on': bool,
            'switch_phase_l3_on': bool,
            'temperature': float,
            'value_date': datetime,
            'voltage': float,
            'voltage_l1': float,
            'voltage_l2': float,
            'voltage_l3': float
        }

        self.attribute_map = {
            'active_power': 'ActivePower',
            'active_power_l1': 'ActivePowerL1',
            'active_power_l2': 'ActivePowerL2',
            'active_power_l3': 'ActivePowerL3',
            'active_power_unit': 'ActivePowerUnit',
            'active_tariff': 'ActiveTariff',
            'additional_meter_serial_number': 'AdditionalMeterSerialNumber',
            'analog_output1': 'AnalogOutput1',
            'analog_output2': 'AnalogOutput2',
            'charging_station_state': 'ChargingStationState',
            'counter_reading': 'CounterReading',
            'counter_reading_export': 'CounterReadingExport',
            'counter_reading_import': 'CounterReadingImport',
            'counter_reading_t1': 'CounterReadingT1',
            'counter_reading_t2': 'CounterReadingT2',
            'counter_reading_t3': 'CounterReadingT3',
            'counter_reading_t4': 'CounterReadingT4',
            'counter_reading_unit': 'CounterReadingUnit',
            'current': 'Current',
            'current_l1': 'CurrentL1',
            'current_l2': 'CurrentL2',
            'current_l3': 'CurrentL3',
            'device_energy_type': 'DeviceEnergyType',
            'digital_input1': 'DigitalInput1',
            'digital_input2': 'DigitalInput2',
            'digital_output1': 'DigitalOutput1',
            'digital_output2': 'DigitalOutput2',
            'family_type': 'FamilyType',
            'flow_rate': 'FlowRate',
            'id': 'Id',
            'meter_sub_type': 'MeterSubType',
            'name': 'Name',
            'power_factor': 'PowerFactor',
            'power_factor_l1': 'PowerFactorL1',
            'power_factor_l2': 'PowerFactorL2',
            'power_factor_l3': 'PowerFactorL3',
            'serial': 'Serial',
            'switch_on': 'SwitchOn',
            'switch_phase_l1_on': 'SwitchPhaseL1On',
            'switch_phase_l2_on': 'SwitchPhaseL2On',
            'switch_phase_l3_on': 'SwitchPhaseL3On',
            'temperature': 'Temperature',
            'value_date': 'ValueDate',
            'voltage': 'Voltage',
            'voltage_l1': 'VoltageL1',
            'voltage_l2': 'VoltageL2',
            'voltage_l3': 'VoltageL3'
        }

        self._active_power = active_power
        self._active_power_l1 = active_power_l1
        self._active_power_l2 = active_power_l2
        self._active_power_l3 = active_power_l3
        self._active_power_unit = active_power_unit
        self._active_tariff = active_tariff
        self._additional_meter_serial_number = additional_meter_serial_number
        self._analog_output1 = analog_output1
        self._analog_output2 = analog_output2
        self._charging_station_state = charging_station_state
        self._counter_reading = counter_reading
        self._counter_reading_export = counter_reading_export
        self._counter_reading_import = counter_reading_import
        self._counter_reading_t1 = counter_reading_t1
        self._counter_reading_t2 = counter_reading_t2
        self._counter_reading_t3 = counter_reading_t3
        self._counter_reading_t4 = counter_reading_t4
        self._counter_reading_unit = counter_reading_unit
        self._current = current
        self._current_l1 = current_l1
        self._current_l2 = current_l2
        self._current_l3 = current_l3
        self._device_energy_type = device_energy_type
        self._digital_input1 = digital_input1
        self._digital_input2 = digital_input2
        self._digital_output1 = digital_output1
        self._digital_output2 = digital_output2
        self._family_type = family_type
        self._flow_rate = flow_rate
        self._id = id
        self._meter_sub_type = meter_sub_type
        self._name = name
        self._power_factor = power_factor
        self._power_factor_l1 = power_factor_l1
        self._power_factor_l2 = power_factor_l2
        self._power_factor_l3 = power_factor_l3
        self._serial = serial
        self._switch_on = switch_on
        self._switch_phase_l1_on = switch_phase_l1_on
        self._switch_phase_l2_on = switch_phase_l2_on
        self._switch_phase_l3_on = switch_phase_l3_on
        self._temperature = temperature
        self._value_date = value_date
        self._voltage = voltage
        self._voltage_l1 = voltage_l1
        self._voltage_l2 = voltage_l2
        self._voltage_l3 = voltage_l3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_power(self):
        """Gets the active_power of this Device.

        The Actvie Power or current flow rate

        :return: The active_power of this Device.
        :rtype: float
        """
        return self._active_power

    @active_power.setter
    def active_power(self, active_power):
        """Sets the active_power of this Device.

        The Actvie Power or current flow rate

        :param active_power: The active_power of this Device.
        :type active_power: float
        """

        self._active_power = active_power

    @property
    def active_power_l1(self):
        """Gets the active_power_l1 of this Device.

        The Actvie Power Phase L1

        :return: The active_power_l1 of this Device.
        :rtype: float
        """
        return self._active_power_l1

    @active_power_l1.setter
    def active_power_l1(self, active_power_l1):
        """Sets the active_power_l1 of this Device.

        The Actvie Power Phase L1

        :param active_power_l1: The active_power_l1 of this Device.
        :type active_power_l1: float
        """

        self._active_power_l1 = active_power_l1

    @property
    def active_power_l2(self):
        """Gets the active_power_l2 of this Device.

        The Actvie Power Phase L2

        :return: The active_power_l2 of this Device.
        :rtype: float
        """
        return self._active_power_l2

    @active_power_l2.setter
    def active_power_l2(self, active_power_l2):
        """Sets the active_power_l2 of this Device.

        The Actvie Power Phase L2

        :param active_power_l2: The active_power_l2 of this Device.
        :type active_power_l2: float
        """

        self._active_power_l2 = active_power_l2

    @property
    def active_power_l3(self):
        """Gets the active_power_l3 of this Device.

        The Actvie Power Phase L3

        :return: The active_power_l3 of this Device.
        :rtype: float
        """
        return self._active_power_l3

    @active_power_l3.setter
    def active_power_l3(self, active_power_l3):
        """Sets the active_power_l3 of this Device.

        The Actvie Power Phase L3

        :param active_power_l3: The active_power_l3 of this Device.
        :type active_power_l3: float
        """

        self._active_power_l3 = active_power_l3

    @property
    def active_power_unit(self):
        """Gets the active_power_unit of this Device.

        The Unit of the Active Power Value

        :return: The active_power_unit of this Device.
        :rtype: str
        """
        return self._active_power_unit

    @active_power_unit.setter
    def active_power_unit(self, active_power_unit):
        """Sets the active_power_unit of this Device.

        The Unit of the Active Power Value

        :param active_power_unit: The active_power_unit of this Device.
        :type active_power_unit: str
        """

        self._active_power_unit = active_power_unit

    @property
    def active_tariff(self):
        """Gets the active_tariff of this Device.

        The Number of the Active Tariff

        :return: The active_tariff of this Device.
        :rtype: int
        """
        return self._active_tariff

    @active_tariff.setter
    def active_tariff(self, active_tariff):
        """Sets the active_tariff of this Device.

        The Number of the Active Tariff

        :param active_tariff: The active_tariff of this Device.
        :type active_tariff: int
        """

        self._active_tariff = active_tariff

    @property
    def additional_meter_serial_number(self):
        """Gets the additional_meter_serial_number of this Device.

        An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.

        :return: The additional_meter_serial_number of this Device.
        :rtype: str
        """
        return self._additional_meter_serial_number

    @additional_meter_serial_number.setter
    def additional_meter_serial_number(self, additional_meter_serial_number):
        """Sets the additional_meter_serial_number of this Device.

        An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.

        :param additional_meter_serial_number: The additional_meter_serial_number of this Device.
        :type additional_meter_serial_number: str
        """

        self._additional_meter_serial_number = additional_meter_serial_number

    @property
    def analog_output1(self):
        """Gets the analog_output1 of this Device.

        The analog output number 1 (PWM signal) (0 - 32183)

        :return: The analog_output1 of this Device.
        :rtype: int
        """
        return self._analog_output1

    @analog_output1.setter
    def analog_output1(self, analog_output1):
        """Sets the analog_output1 of this Device.

        The analog output number 1 (PWM signal) (0 - 32183)

        :param analog_output1: The analog_output1 of this Device.
        :type analog_output1: int
        """

        self._analog_output1 = analog_output1

    @property
    def analog_output2(self):
        """Gets the analog_output2 of this Device.

        The analog output number 2 (PWM signal) (0 - 32183)

        :return: The analog_output2 of this Device.
        :rtype: int
        """
        return self._analog_output2

    @analog_output2.setter
    def analog_output2(self, analog_output2):
        """Sets the analog_output2 of this Device.

        The analog output number 2 (PWM signal) (0 - 32183)

        :param analog_output2: The analog_output2 of this Device.
        :type analog_output2: int
        """

        self._analog_output2 = analog_output2

    @property
    def charging_station_state(self):
        """Gets the charging_station_state of this Device.

        The state of a pico charging station. (Only available for pico charging stations)

        :return: The charging_station_state of this Device.
        :rtype: str
        """
        return self._charging_station_state

    @charging_station_state.setter
    def charging_station_state(self, charging_station_state):
        """Sets the charging_station_state of this Device.

        The state of a pico charging station. (Only available for pico charging stations)

        :param charging_station_state: The charging_station_state of this Device.
        :type charging_station_state: str
        """
        allowed_values = ["Booting", "ReadyNoCarConnected", "ReadyCarConnected", "StartedWaitForCar", "Charging", "Installation", "Authorize", "Offline"]  # noqa: E501
        if charging_station_state not in allowed_values:
            raise ValueError(
                "Invalid value for `charging_station_state` ({0}), must be one of {1}"
                .format(charging_station_state, allowed_values)
            )

        self._charging_station_state = charging_station_state

    @property
    def counter_reading(self):
        """Gets the counter_reading of this Device.

        The Meter Counter Reading (Total Energy used)

        :return: The counter_reading of this Device.
        :rtype: float
        """
        return self._counter_reading

    @counter_reading.setter
    def counter_reading(self, counter_reading):
        """Sets the counter_reading of this Device.

        The Meter Counter Reading (Total Energy used)

        :param counter_reading: The counter_reading of this Device.
        :type counter_reading: float
        """

        self._counter_reading = counter_reading

    @property
    def counter_reading_export(self):
        """Gets the counter_reading_export of this Device.

        The Meter Counter Reading only export

        :return: The counter_reading_export of this Device.
        :rtype: float
        """
        return self._counter_reading_export

    @counter_reading_export.setter
    def counter_reading_export(self, counter_reading_export):
        """Sets the counter_reading_export of this Device.

        The Meter Counter Reading only export

        :param counter_reading_export: The counter_reading_export of this Device.
        :type counter_reading_export: float
        """

        self._counter_reading_export = counter_reading_export

    @property
    def counter_reading_import(self):
        """Gets the counter_reading_import of this Device.

        The Meter Counter Reading only import

        :return: The counter_reading_import of this Device.
        :rtype: float
        """
        return self._counter_reading_import

    @counter_reading_import.setter
    def counter_reading_import(self, counter_reading_import):
        """Sets the counter_reading_import of this Device.

        The Meter Counter Reading only import

        :param counter_reading_import: The counter_reading_import of this Device.
        :type counter_reading_import: float
        """

        self._counter_reading_import = counter_reading_import

    @property
    def counter_reading_t1(self):
        """Gets the counter_reading_t1 of this Device.

        The Meter Counter Reading Tariff 1

        :return: The counter_reading_t1 of this Device.
        :rtype: float
        """
        return self._counter_reading_t1

    @counter_reading_t1.setter
    def counter_reading_t1(self, counter_reading_t1):
        """Sets the counter_reading_t1 of this Device.

        The Meter Counter Reading Tariff 1

        :param counter_reading_t1: The counter_reading_t1 of this Device.
        :type counter_reading_t1: float
        """

        self._counter_reading_t1 = counter_reading_t1

    @property
    def counter_reading_t2(self):
        """Gets the counter_reading_t2 of this Device.

        The Meter Counter Reading Tariff 2

        :return: The counter_reading_t2 of this Device.
        :rtype: float
        """
        return self._counter_reading_t2

    @counter_reading_t2.setter
    def counter_reading_t2(self, counter_reading_t2):
        """Sets the counter_reading_t2 of this Device.

        The Meter Counter Reading Tariff 2

        :param counter_reading_t2: The counter_reading_t2 of this Device.
        :type counter_reading_t2: float
        """

        self._counter_reading_t2 = counter_reading_t2

    @property
    def counter_reading_t3(self):
        """Gets the counter_reading_t3 of this Device.

        The Meter Counter Reading Tariff 3

        :return: The counter_reading_t3 of this Device.
        :rtype: float
        """
        return self._counter_reading_t3

    @counter_reading_t3.setter
    def counter_reading_t3(self, counter_reading_t3):
        """Sets the counter_reading_t3 of this Device.

        The Meter Counter Reading Tariff 3

        :param counter_reading_t3: The counter_reading_t3 of this Device.
        :type counter_reading_t3: float
        """

        self._counter_reading_t3 = counter_reading_t3

    @property
    def counter_reading_t4(self):
        """Gets the counter_reading_t4 of this Device.

        The Meter Counter Reading Tariff 4

        :return: The counter_reading_t4 of this Device.
        :rtype: float
        """
        return self._counter_reading_t4

    @counter_reading_t4.setter
    def counter_reading_t4(self, counter_reading_t4):
        """Sets the counter_reading_t4 of this Device.

        The Meter Counter Reading Tariff 4

        :param counter_reading_t4: The counter_reading_t4 of this Device.
        :type counter_reading_t4: float
        """

        self._counter_reading_t4 = counter_reading_t4

    @property
    def counter_reading_unit(self):
        """Gets the counter_reading_unit of this Device.

        The Unit of the Counter Reading

        :return: The counter_reading_unit of this Device.
        :rtype: str
        """
        return self._counter_reading_unit

    @counter_reading_unit.setter
    def counter_reading_unit(self, counter_reading_unit):
        """Sets the counter_reading_unit of this Device.

        The Unit of the Counter Reading

        :param counter_reading_unit: The counter_reading_unit of this Device.
        :type counter_reading_unit: str
        """

        self._counter_reading_unit = counter_reading_unit

    @property
    def current(self):
        """Gets the current of this Device.

        The Current (in A)

        :return: The current of this Device.
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Device.

        The Current (in A)

        :param current: The current of this Device.
        :type current: float
        """

        self._current = current

    @property
    def current_l1(self):
        """Gets the current_l1 of this Device.

        The Current Phase L1 (in A)

        :return: The current_l1 of this Device.
        :rtype: float
        """
        return self._current_l1

    @current_l1.setter
    def current_l1(self, current_l1):
        """Sets the current_l1 of this Device.

        The Current Phase L1 (in A)

        :param current_l1: The current_l1 of this Device.
        :type current_l1: float
        """

        self._current_l1 = current_l1

    @property
    def current_l2(self):
        """Gets the current_l2 of this Device.

        The Current Phase L2 (in A)

        :return: The current_l2 of this Device.
        :rtype: float
        """
        return self._current_l2

    @current_l2.setter
    def current_l2(self, current_l2):
        """Sets the current_l2 of this Device.

        The Current Phase L2 (in A)

        :param current_l2: The current_l2 of this Device.
        :type current_l2: float
        """

        self._current_l2 = current_l2

    @property
    def current_l3(self):
        """Gets the current_l3 of this Device.

        The Current Phase L3 (in A)

        :return: The current_l3 of this Device.
        :rtype: float
        """
        return self._current_l3

    @current_l3.setter
    def current_l3(self, current_l3):
        """Sets the current_l3 of this Device.

        The Current Phase L3 (in A)

        :param current_l3: The current_l3 of this Device.
        :type current_l3: float
        """

        self._current_l3 = current_l3

    @property
    def device_energy_type(self):
        """Gets the device_energy_type of this Device.

        The Energy Type of this device

        :return: The device_energy_type of this Device.
        :rtype: str
        """
        return self._device_energy_type

    @device_energy_type.setter
    def device_energy_type(self, device_energy_type):
        """Sets the device_energy_type of this Device.

        The Energy Type of this device

        :param device_energy_type: The device_energy_type of this Device.
        :type device_energy_type: str
        """
        allowed_values = ["MeterTypeUnknown", "MeterTypeElectricity", "MeterTypeWater", "MeterTypeGas", "MeterTypeHeat", "MeterTypeHCA", "MeterTypeAllMeters", "MeterTypeTemperature", "MeterTypeMBusGateway", "MeterTypeRS485Gateway", "MeterTypeCustomDevice", "MeterTypeCompressedAir", "MeterTypeSolarLog", "MeterTypeVirtualMeter", "MeterTypeWMBusGateway"]  # noqa: E501
        if device_energy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_energy_type` ({0}), must be one of {1}"
                .format(device_energy_type, allowed_values)
            )

        self._device_energy_type = device_energy_type

    @property
    def digital_input1(self):
        """Gets the digital_input1 of this Device.

        The digital input number 1

        :return: The digital_input1 of this Device.
        :rtype: bool
        """
        return self._digital_input1

    @digital_input1.setter
    def digital_input1(self, digital_input1):
        """Sets the digital_input1 of this Device.

        The digital input number 1

        :param digital_input1: The digital_input1 of this Device.
        :type digital_input1: bool
        """

        self._digital_input1 = digital_input1

    @property
    def digital_input2(self):
        """Gets the digital_input2 of this Device.

        The digital input number 2

        :return: The digital_input2 of this Device.
        :rtype: bool
        """
        return self._digital_input2

    @digital_input2.setter
    def digital_input2(self, digital_input2):
        """Sets the digital_input2 of this Device.

        The digital input number 2

        :param digital_input2: The digital_input2 of this Device.
        :type digital_input2: bool
        """

        self._digital_input2 = digital_input2

    @property
    def digital_output1(self):
        """Gets the digital_output1 of this Device.

        The digital output number 1

        :return: The digital_output1 of this Device.
        :rtype: bool
        """
        return self._digital_output1

    @digital_output1.setter
    def digital_output1(self, digital_output1):
        """Sets the digital_output1 of this Device.

        The digital output number 1

        :param digital_output1: The digital_output1 of this Device.
        :type digital_output1: bool
        """

        self._digital_output1 = digital_output1

    @property
    def digital_output2(self):
        """Gets the digital_output2 of this Device.

        The digital output number 2

        :return: The digital_output2 of this Device.
        :rtype: bool
        """
        return self._digital_output2

    @digital_output2.setter
    def digital_output2(self, digital_output2):
        """Sets the digital_output2 of this Device.

        The digital output number 2

        :param digital_output2: The digital_output2 of this Device.
        :type digital_output2: bool
        """

        self._digital_output2 = digital_output2

    @property
    def family_type(self):
        """Gets the family_type of this Device.

        The Family Type of the device.

        :return: The family_type of this Device.
        :rtype: str
        """
        return self._family_type

    @family_type.setter
    def family_type(self, family_type):
        """Sets the family_type of this Device.

        The Family Type of the device.

        :param family_type: The family_type of this Device.
        :type family_type: str
        """
        allowed_values = ["MeterFamilyTypeUnknown", "MeterFamilyTypeSmartMeConnectV1", "MeterFamiliyTypeSmartMeMeter", "MeterFamiliyTypeSmartMeMeterWithSwitch", "MeterFamilyTypeMBusGatewayV1", "MeterFamilyTypeRS485GatewayV1", "MeterFamilyTypeKamstrupModule", "MeterFamilyTypeSmartMe3PhaseMeter80A", "MeterFamilyTypeSmartMe3PhaseMeter32A", "MeterFamilyTypeSmartMe3PhaseTelstarTransformer", "MeterFamilyTypeLandisGyrModule", "MeterFamilyTypeFnnOpticalModule", "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi", "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile", "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi", "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi", "MeterFamilyTypeSmartMe1PhaseMeter80AGprs", "MeterFamilyTypeSmartMe1PhaseMeter32AGprs", "MeterFamilyTypeWMBusGatewayV1", "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile", "MeterFamilyTypeMithralHallV1", "MeterFamilyTypeRestApiMeter", "MeterFamilyTypeVirtualBillingMeter"]  # noqa: E501
        if family_type not in allowed_values:
            raise ValueError(
                "Invalid value for `family_type` ({0}), must be one of {1}"
                .format(family_type, allowed_values)
            )

        self._family_type = family_type

    @property
    def flow_rate(self):
        """Gets the flow_rate of this Device.

        The current flow rate (e.g. m3/h)

        :return: The flow_rate of this Device.
        :rtype: float
        """
        return self._flow_rate

    @flow_rate.setter
    def flow_rate(self, flow_rate):
        """Sets the flow_rate of this Device.

        The current flow rate (e.g. m3/h)

        :param flow_rate: The flow_rate of this Device.
        :type flow_rate: float
        """

        self._flow_rate = flow_rate

    @property
    def id(self):
        """Gets the id of this Device.

        The ID of the device

        :return: The id of this Device.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.

        The ID of the device

        :param id: The id of this Device.
        :type id: str
        """

        self._id = id

    @property
    def meter_sub_type(self):
        """Gets the meter_sub_type of this Device.

        The sub meter type (e.g. warmwater or coldwater)

        :return: The meter_sub_type of this Device.
        :rtype: str
        """
        return self._meter_sub_type

    @meter_sub_type.setter
    def meter_sub_type(self, meter_sub_type):
        """Sets the meter_sub_type of this Device.

        The sub meter type (e.g. warmwater or coldwater)

        :param meter_sub_type: The meter_sub_type of this Device.
        :type meter_sub_type: str
        """
        allowed_values = ["MeterSubTypeUnknown", "MeterSubTypeCold", "MeterSubTypeHeat", "MeterSubTypeChargingStation", "MeterSubTypeElectricity", "MeterSubTypeWater", "MeterSubTypeGas", "MeterSubTypeElectricityHeat", "MeterSubTypeTemperature", "MeterSubTypeVirtualBattery"]  # noqa: E501
        if meter_sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `meter_sub_type` ({0}), must be one of {1}"
                .format(meter_sub_type, allowed_values)
            )

        self._meter_sub_type = meter_sub_type

    @property
    def name(self):
        """Gets the name of this Device.

        The Name of the Device

        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.

        The Name of the Device

        :param name: The name of this Device.
        :type name: str
        """

        self._name = name

    @property
    def power_factor(self):
        """Gets the power_factor of this Device.

        The Power Factor (cos phi). Range: 0 - 1

        :return: The power_factor of this Device.
        :rtype: float
        """
        return self._power_factor

    @power_factor.setter
    def power_factor(self, power_factor):
        """Sets the power_factor of this Device.

        The Power Factor (cos phi). Range: 0 - 1

        :param power_factor: The power_factor of this Device.
        :type power_factor: float
        """

        self._power_factor = power_factor

    @property
    def power_factor_l1(self):
        """Gets the power_factor_l1 of this Device.

        The Power Factor (cos phi) Phase L1. Range: 0 - 1

        :return: The power_factor_l1 of this Device.
        :rtype: float
        """
        return self._power_factor_l1

    @power_factor_l1.setter
    def power_factor_l1(self, power_factor_l1):
        """Sets the power_factor_l1 of this Device.

        The Power Factor (cos phi) Phase L1. Range: 0 - 1

        :param power_factor_l1: The power_factor_l1 of this Device.
        :type power_factor_l1: float
        """

        self._power_factor_l1 = power_factor_l1

    @property
    def power_factor_l2(self):
        """Gets the power_factor_l2 of this Device.

        The Power Factor (cos phi) Phase L2. Range: 0 - 1

        :return: The power_factor_l2 of this Device.
        :rtype: float
        """
        return self._power_factor_l2

    @power_factor_l2.setter
    def power_factor_l2(self, power_factor_l2):
        """Sets the power_factor_l2 of this Device.

        The Power Factor (cos phi) Phase L2. Range: 0 - 1

        :param power_factor_l2: The power_factor_l2 of this Device.
        :type power_factor_l2: float
        """

        self._power_factor_l2 = power_factor_l2

    @property
    def power_factor_l3(self):
        """Gets the power_factor_l3 of this Device.

        The Power Factor (cos phi) Phase L3. Range: 0 - 1

        :return: The power_factor_l3 of this Device.
        :rtype: float
        """
        return self._power_factor_l3

    @power_factor_l3.setter
    def power_factor_l3(self, power_factor_l3):
        """Sets the power_factor_l3 of this Device.

        The Power Factor (cos phi) Phase L3. Range: 0 - 1

        :param power_factor_l3: The power_factor_l3 of this Device.
        :type power_factor_l3: float
        """

        self._power_factor_l3 = power_factor_l3

    @property
    def serial(self):
        """Gets the serial of this Device.

        The Serial number

        :return: The serial of this Device.
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Device.

        The Serial number

        :param serial: The serial of this Device.
        :type serial: int
        """

        self._serial = serial

    @property
    def switch_on(self):
        """Gets the switch_on of this Device.

        Flag if the Switch is on on this device.

        :return: The switch_on of this Device.
        :rtype: bool
        """
        return self._switch_on

    @switch_on.setter
    def switch_on(self, switch_on):
        """Sets the switch_on of this Device.

        Flag if the Switch is on on this device.

        :param switch_on: The switch_on of this Device.
        :type switch_on: bool
        """

        self._switch_on = switch_on

    @property
    def switch_phase_l1_on(self):
        """Gets the switch_phase_l1_on of this Device.

        Flag if the Phase L1 is on on this device.

        :return: The switch_phase_l1_on of this Device.
        :rtype: bool
        """
        return self._switch_phase_l1_on

    @switch_phase_l1_on.setter
    def switch_phase_l1_on(self, switch_phase_l1_on):
        """Sets the switch_phase_l1_on of this Device.

        Flag if the Phase L1 is on on this device.

        :param switch_phase_l1_on: The switch_phase_l1_on of this Device.
        :type switch_phase_l1_on: bool
        """

        self._switch_phase_l1_on = switch_phase_l1_on

    @property
    def switch_phase_l2_on(self):
        """Gets the switch_phase_l2_on of this Device.

        Flag if the Phase L2 is on on this device.

        :return: The switch_phase_l2_on of this Device.
        :rtype: bool
        """
        return self._switch_phase_l2_on

    @switch_phase_l2_on.setter
    def switch_phase_l2_on(self, switch_phase_l2_on):
        """Sets the switch_phase_l2_on of this Device.

        Flag if the Phase L2 is on on this device.

        :param switch_phase_l2_on: The switch_phase_l2_on of this Device.
        :type switch_phase_l2_on: bool
        """

        self._switch_phase_l2_on = switch_phase_l2_on

    @property
    def switch_phase_l3_on(self):
        """Gets the switch_phase_l3_on of this Device.

        Flag if the Phase L3 is on on this device.

        :return: The switch_phase_l3_on of this Device.
        :rtype: bool
        """
        return self._switch_phase_l3_on

    @switch_phase_l3_on.setter
    def switch_phase_l3_on(self, switch_phase_l3_on):
        """Sets the switch_phase_l3_on of this Device.

        Flag if the Phase L3 is on on this device.

        :param switch_phase_l3_on: The switch_phase_l3_on of this Device.
        :type switch_phase_l3_on: bool
        """

        self._switch_phase_l3_on = switch_phase_l3_on

    @property
    def temperature(self):
        """Gets the temperature of this Device.

        The Temperature (in degree celsius)

        :return: The temperature of this Device.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Device.

        The Temperature (in degree celsius)

        :param temperature: The temperature of this Device.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def value_date(self):
        """Gets the value_date of this Device.

        Time of last successful connection the the smart-me Cloud.

        :return: The value_date of this Device.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this Device.

        Time of last successful connection the the smart-me Cloud.

        :param value_date: The value_date of this Device.
        :type value_date: datetime
        """

        self._value_date = value_date

    @property
    def voltage(self):
        """Gets the voltage of this Device.

        The Voltage (in V)

        :return: The voltage of this Device.
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this Device.

        The Voltage (in V)

        :param voltage: The voltage of this Device.
        :type voltage: float
        """

        self._voltage = voltage

    @property
    def voltage_l1(self):
        """Gets the voltage_l1 of this Device.

        The Voltage Phase L1 (in V)

        :return: The voltage_l1 of this Device.
        :rtype: float
        """
        return self._voltage_l1

    @voltage_l1.setter
    def voltage_l1(self, voltage_l1):
        """Sets the voltage_l1 of this Device.

        The Voltage Phase L1 (in V)

        :param voltage_l1: The voltage_l1 of this Device.
        :type voltage_l1: float
        """

        self._voltage_l1 = voltage_l1

    @property
    def voltage_l2(self):
        """Gets the voltage_l2 of this Device.

        The Voltage Phase L2 (in V)

        :return: The voltage_l2 of this Device.
        :rtype: float
        """
        return self._voltage_l2

    @voltage_l2.setter
    def voltage_l2(self, voltage_l2):
        """Sets the voltage_l2 of this Device.

        The Voltage Phase L2 (in V)

        :param voltage_l2: The voltage_l2 of this Device.
        :type voltage_l2: float
        """

        self._voltage_l2 = voltage_l2

    @property
    def voltage_l3(self):
        """Gets the voltage_l3 of this Device.

        The Voltage Phase L3 (in V)

        :return: The voltage_l3 of this Device.
        :rtype: float
        """
        return self._voltage_l3

    @voltage_l3.setter
    def voltage_l3(self, voltage_l3):
        """Sets the voltage_l3 of this Device.

        The Voltage Phase L3 (in V)

        :param voltage_l3: The voltage_l3 of this Device.
        :type voltage_l3: float
        """

        self._voltage_l3 = voltage_l3
