# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FolderData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, electricity_counter_value: float=None, electricity_power: float=None, gas_counter_value: float=None, gas_flow_rate: float=None, heat_counter_value: float=None, heat_power: float=None, water_counter_value: float=None, water_flow_rate: float=None):
        """FolderData - a model defined in OpenAPI

        :param electricity_counter_value: The electricity_counter_value of this FolderData.
        :param electricity_power: The electricity_power of this FolderData.
        :param gas_counter_value: The gas_counter_value of this FolderData.
        :param gas_flow_rate: The gas_flow_rate of this FolderData.
        :param heat_counter_value: The heat_counter_value of this FolderData.
        :param heat_power: The heat_power of this FolderData.
        :param water_counter_value: The water_counter_value of this FolderData.
        :param water_flow_rate: The water_flow_rate of this FolderData.
        """
        self.openapi_types = {
            'electricity_counter_value': float,
            'electricity_power': float,
            'gas_counter_value': float,
            'gas_flow_rate': float,
            'heat_counter_value': float,
            'heat_power': float,
            'water_counter_value': float,
            'water_flow_rate': float
        }

        self.attribute_map = {
            'electricity_counter_value': 'ElectricityCounterValue',
            'electricity_power': 'ElectricityPower',
            'gas_counter_value': 'GasCounterValue',
            'gas_flow_rate': 'GasFlowRate',
            'heat_counter_value': 'HeatCounterValue',
            'heat_power': 'HeatPower',
            'water_counter_value': 'WaterCounterValue',
            'water_flow_rate': 'WaterFlowRate'
        }

        self._electricity_counter_value = electricity_counter_value
        self._electricity_power = electricity_power
        self._gas_counter_value = gas_counter_value
        self._gas_flow_rate = gas_flow_rate
        self._heat_counter_value = heat_counter_value
        self._heat_power = heat_power
        self._water_counter_value = water_counter_value
        self._water_flow_rate = water_flow_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FolderData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FolderData of this FolderData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def electricity_counter_value(self):
        """Gets the electricity_counter_value of this FolderData.

        The Counter values for electricity (kWh)

        :return: The electricity_counter_value of this FolderData.
        :rtype: float
        """
        return self._electricity_counter_value

    @electricity_counter_value.setter
    def electricity_counter_value(self, electricity_counter_value):
        """Sets the electricity_counter_value of this FolderData.

        The Counter values for electricity (kWh)

        :param electricity_counter_value: The electricity_counter_value of this FolderData.
        :type electricity_counter_value: float
        """

        self._electricity_counter_value = electricity_counter_value

    @property
    def electricity_power(self):
        """Gets the electricity_power of this FolderData.

        The Power for electricity (kW)

        :return: The electricity_power of this FolderData.
        :rtype: float
        """
        return self._electricity_power

    @electricity_power.setter
    def electricity_power(self, electricity_power):
        """Sets the electricity_power of this FolderData.

        The Power for electricity (kW)

        :param electricity_power: The electricity_power of this FolderData.
        :type electricity_power: float
        """

        self._electricity_power = electricity_power

    @property
    def gas_counter_value(self):
        """Gets the gas_counter_value of this FolderData.

        The Counter values for Gas (m3)

        :return: The gas_counter_value of this FolderData.
        :rtype: float
        """
        return self._gas_counter_value

    @gas_counter_value.setter
    def gas_counter_value(self, gas_counter_value):
        """Sets the gas_counter_value of this FolderData.

        The Counter values for Gas (m3)

        :param gas_counter_value: The gas_counter_value of this FolderData.
        :type gas_counter_value: float
        """

        self._gas_counter_value = gas_counter_value

    @property
    def gas_flow_rate(self):
        """Gets the gas_flow_rate of this FolderData.

        The Flow Rate for Gas (m3/h)

        :return: The gas_flow_rate of this FolderData.
        :rtype: float
        """
        return self._gas_flow_rate

    @gas_flow_rate.setter
    def gas_flow_rate(self, gas_flow_rate):
        """Sets the gas_flow_rate of this FolderData.

        The Flow Rate for Gas (m3/h)

        :param gas_flow_rate: The gas_flow_rate of this FolderData.
        :type gas_flow_rate: float
        """

        self._gas_flow_rate = gas_flow_rate

    @property
    def heat_counter_value(self):
        """Gets the heat_counter_value of this FolderData.

        The Counter values for Heat (kWh)

        :return: The heat_counter_value of this FolderData.
        :rtype: float
        """
        return self._heat_counter_value

    @heat_counter_value.setter
    def heat_counter_value(self, heat_counter_value):
        """Sets the heat_counter_value of this FolderData.

        The Counter values for Heat (kWh)

        :param heat_counter_value: The heat_counter_value of this FolderData.
        :type heat_counter_value: float
        """

        self._heat_counter_value = heat_counter_value

    @property
    def heat_power(self):
        """Gets the heat_power of this FolderData.

        The Power for Heat (kW)

        :return: The heat_power of this FolderData.
        :rtype: float
        """
        return self._heat_power

    @heat_power.setter
    def heat_power(self, heat_power):
        """Sets the heat_power of this FolderData.

        The Power for Heat (kW)

        :param heat_power: The heat_power of this FolderData.
        :type heat_power: float
        """

        self._heat_power = heat_power

    @property
    def water_counter_value(self):
        """Gets the water_counter_value of this FolderData.

        The Counter values for Water (m3)

        :return: The water_counter_value of this FolderData.
        :rtype: float
        """
        return self._water_counter_value

    @water_counter_value.setter
    def water_counter_value(self, water_counter_value):
        """Sets the water_counter_value of this FolderData.

        The Counter values for Water (m3)

        :param water_counter_value: The water_counter_value of this FolderData.
        :type water_counter_value: float
        """

        self._water_counter_value = water_counter_value

    @property
    def water_flow_rate(self):
        """Gets the water_flow_rate of this FolderData.

        The Flow Rate for Water (m3/h)

        :return: The water_flow_rate of this FolderData.
        :rtype: float
        """
        return self._water_flow_rate

    @water_flow_rate.setter
    def water_flow_rate(self, water_flow_rate):
        """Sets the water_flow_rate of this FolderData.

        The Flow Rate for Water (m3/h)

        :param water_flow_rate: The water_flow_rate of this FolderData.
        :type water_flow_rate: float
        """

        self._water_flow_rate = water_flow_rate
