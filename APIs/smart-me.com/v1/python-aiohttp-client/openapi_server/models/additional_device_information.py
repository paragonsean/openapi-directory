# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalDeviceInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_meter_serial_number: str=None, firmware_version: int=None, hardware_version: int=None, id: str=None, network_connection: str=None, network_connection_rssi: int=None):
        """AdditionalDeviceInformation - a model defined in OpenAPI

        :param additional_meter_serial_number: The additional_meter_serial_number of this AdditionalDeviceInformation.
        :param firmware_version: The firmware_version of this AdditionalDeviceInformation.
        :param hardware_version: The hardware_version of this AdditionalDeviceInformation.
        :param id: The id of this AdditionalDeviceInformation.
        :param network_connection: The network_connection of this AdditionalDeviceInformation.
        :param network_connection_rssi: The network_connection_rssi of this AdditionalDeviceInformation.
        """
        self.openapi_types = {
            'additional_meter_serial_number': str,
            'firmware_version': int,
            'hardware_version': int,
            'id': str,
            'network_connection': str,
            'network_connection_rssi': int
        }

        self.attribute_map = {
            'additional_meter_serial_number': 'AdditionalMeterSerialNumber',
            'firmware_version': 'FirmwareVersion',
            'hardware_version': 'HardwareVersion',
            'id': 'ID',
            'network_connection': 'NetworkConnection',
            'network_connection_rssi': 'NetworkConnectionRSSI'
        }

        self._additional_meter_serial_number = additional_meter_serial_number
        self._firmware_version = firmware_version
        self._hardware_version = hardware_version
        self._id = id
        self._network_connection = network_connection
        self._network_connection_rssi = network_connection_rssi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalDeviceInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalDeviceInformation of this AdditionalDeviceInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_meter_serial_number(self):
        """Gets the additional_meter_serial_number of this AdditionalDeviceInformation.

        An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.

        :return: The additional_meter_serial_number of this AdditionalDeviceInformation.
        :rtype: str
        """
        return self._additional_meter_serial_number

    @additional_meter_serial_number.setter
    def additional_meter_serial_number(self, additional_meter_serial_number):
        """Sets the additional_meter_serial_number of this AdditionalDeviceInformation.

        An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.

        :param additional_meter_serial_number: The additional_meter_serial_number of this AdditionalDeviceInformation.
        :type additional_meter_serial_number: str
        """

        self._additional_meter_serial_number = additional_meter_serial_number

    @property
    def firmware_version(self):
        """Gets the firmware_version of this AdditionalDeviceInformation.

        The Firmware Version of a Meter

        :return: The firmware_version of this AdditionalDeviceInformation.
        :rtype: int
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this AdditionalDeviceInformation.

        The Firmware Version of a Meter

        :param firmware_version: The firmware_version of this AdditionalDeviceInformation.
        :type firmware_version: int
        """

        self._firmware_version = firmware_version

    @property
    def hardware_version(self):
        """Gets the hardware_version of this AdditionalDeviceInformation.

        The Hardware Version of a Meter.

        :return: The hardware_version of this AdditionalDeviceInformation.
        :rtype: int
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """Sets the hardware_version of this AdditionalDeviceInformation.

        The Hardware Version of a Meter.

        :param hardware_version: The hardware_version of this AdditionalDeviceInformation.
        :type hardware_version: int
        """

        self._hardware_version = hardware_version

    @property
    def id(self):
        """Gets the id of this AdditionalDeviceInformation.

        The ID of the device

        :return: The id of this AdditionalDeviceInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdditionalDeviceInformation.

        The ID of the device

        :param id: The id of this AdditionalDeviceInformation.
        :type id: str
        """

        self._id = id

    @property
    def network_connection(self):
        """Gets the network_connection of this AdditionalDeviceInformation.

        The mode how the device is connected to the network. Valid values are:              wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi

        :return: The network_connection of this AdditionalDeviceInformation.
        :rtype: str
        """
        return self._network_connection

    @network_connection.setter
    def network_connection(self, network_connection):
        """Sets the network_connection of this AdditionalDeviceInformation.

        The mode how the device is connected to the network. Valid values are:              wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi

        :param network_connection: The network_connection of this AdditionalDeviceInformation.
        :type network_connection: str
        """

        self._network_connection = network_connection

    @property
    def network_connection_rssi(self):
        """Gets the network_connection_rssi of this AdditionalDeviceInformation.

        The connection RSSI value (0 is bad, 100 is best)

        :return: The network_connection_rssi of this AdditionalDeviceInformation.
        :rtype: int
        """
        return self._network_connection_rssi

    @network_connection_rssi.setter
    def network_connection_rssi(self, network_connection_rssi):
        """Sets the network_connection_rssi of this AdditionalDeviceInformation.

        The connection RSSI value (0 is bad, 100 is best)

        :param network_connection_rssi: The network_connection_rssi of this AdditionalDeviceInformation.
        :type network_connection_rssi: int
        """

        self._network_connection_rssi = network_connection_rssi
