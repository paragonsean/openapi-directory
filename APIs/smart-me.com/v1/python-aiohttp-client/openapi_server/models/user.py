# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_users: List[User]=None, email: str=None, id: int=None, id_as_string: str=None, is_admin: bool=None, permissions: List[str]=None, username: str=None):
        """User - a model defined in OpenAPI

        :param child_users: The child_users of this User.
        :param email: The email of this User.
        :param id: The id of this User.
        :param id_as_string: The id_as_string of this User.
        :param is_admin: The is_admin of this User.
        :param permissions: The permissions of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'child_users': List[User],
            'email': str,
            'id': int,
            'id_as_string': str,
            'is_admin': bool,
            'permissions': List[str],
            'username': str
        }

        self.attribute_map = {
            'child_users': 'ChildUsers',
            'email': 'Email',
            'id': 'Id',
            'id_as_string': 'IdAsString',
            'is_admin': 'IsAdmin',
            'permissions': 'Permissions',
            'username': 'Username'
        }

        self._child_users = child_users
        self._email = email
        self._id = id
        self._id_as_string = id_as_string
        self._is_admin = is_admin
        self._permissions = permissions
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_users(self):
        """Gets the child_users of this User.

        The Users created by this users.

        :return: The child_users of this User.
        :rtype: List[User]
        """
        return self._child_users

    @child_users.setter
    def child_users(self, child_users):
        """Sets the child_users of this User.

        The Users created by this users.

        :param child_users: The child_users of this User.
        :type child_users: List[User]
        """

        self._child_users = child_users

    @property
    def email(self):
        """Gets the email of this User.

        The EMail Address of the User

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The EMail Address of the User

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this User.

        The ID of the User

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The ID of the User

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def id_as_string(self):
        """Gets the id_as_string of this User.

        The ID of the user as string

        :return: The id_as_string of this User.
        :rtype: str
        """
        return self._id_as_string

    @id_as_string.setter
    def id_as_string(self, id_as_string):
        """Sets the id_as_string of this User.

        The ID of the user as string

        :param id_as_string: The id_as_string of this User.
        :type id_as_string: str
        """

        self._id_as_string = id_as_string

    @property
    def is_admin(self):
        """Gets the is_admin of this User.

        Flag if this User is an Admin User

        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this User.

        Flag if this User is an Admin User

        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def permissions(self):
        """Gets the permissions of this User.

        Additional Permissions

        :return: The permissions of this User.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this User.

        Additional Permissions

        :param permissions: The permissions of this User.
        :type permissions: List[str]
        """

        self._permissions = permissions

    @property
    def username(self):
        """Gets the username of this User.

        The Username of the User

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        The Username of the User

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
