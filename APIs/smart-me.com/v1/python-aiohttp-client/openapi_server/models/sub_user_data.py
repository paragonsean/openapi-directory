# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubUserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_end_date: datetime=None, access_time_start_date: datetime=None, email: str=None, id: str=None, new_password: str=None, permission_level: str=None, username: str=None):
        """SubUserData - a model defined in OpenAPI

        :param access_end_date: The access_end_date of this SubUserData.
        :param access_time_start_date: The access_time_start_date of this SubUserData.
        :param email: The email of this SubUserData.
        :param id: The id of this SubUserData.
        :param new_password: The new_password of this SubUserData.
        :param permission_level: The permission_level of this SubUserData.
        :param username: The username of this SubUserData.
        """
        self.openapi_types = {
            'access_end_date': datetime,
            'access_time_start_date': datetime,
            'email': str,
            'id': str,
            'new_password': str,
            'permission_level': str,
            'username': str
        }

        self.attribute_map = {
            'access_end_date': 'AccessEndDate',
            'access_time_start_date': 'AccessTimeStartDate',
            'email': 'Email',
            'id': 'Id',
            'new_password': 'NewPassword',
            'permission_level': 'PermissionLevel',
            'username': 'Username'
        }

        self._access_end_date = access_end_date
        self._access_time_start_date = access_time_start_date
        self._email = email
        self._id = id
        self._new_password = new_password
        self._permission_level = permission_level
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubUserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubUserData of this SubUserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_end_date(self):
        """Gets the access_end_date of this SubUserData.

        The end date. until this date the user has access

        :return: The access_end_date of this SubUserData.
        :rtype: datetime
        """
        return self._access_end_date

    @access_end_date.setter
    def access_end_date(self, access_end_date):
        """Sets the access_end_date of this SubUserData.

        The end date. until this date the user has access

        :param access_end_date: The access_end_date of this SubUserData.
        :type access_end_date: datetime
        """

        self._access_end_date = access_end_date

    @property
    def access_time_start_date(self):
        """Gets the access_time_start_date of this SubUserData.

        The start date. From this date the user has access

        :return: The access_time_start_date of this SubUserData.
        :rtype: datetime
        """
        return self._access_time_start_date

    @access_time_start_date.setter
    def access_time_start_date(self, access_time_start_date):
        """Sets the access_time_start_date of this SubUserData.

        The start date. From this date the user has access

        :param access_time_start_date: The access_time_start_date of this SubUserData.
        :type access_time_start_date: datetime
        """

        self._access_time_start_date = access_time_start_date

    @property
    def email(self):
        """Gets the email of this SubUserData.

        The Email adress

        :return: The email of this SubUserData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubUserData.

        The Email adress

        :param email: The email of this SubUserData.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this SubUserData.

        The ID of the user

        :return: The id of this SubUserData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubUserData.

        The ID of the user

        :param id: The id of this SubUserData.
        :type id: str
        """

        self._id = id

    @property
    def new_password(self):
        """Gets the new_password of this SubUserData.

        If set this is used a new password

        :return: The new_password of this SubUserData.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this SubUserData.

        If set this is used a new password

        :param new_password: The new_password of this SubUserData.
        :type new_password: str
        """

        self._new_password = new_password

    @property
    def permission_level(self):
        """Gets the permission_level of this SubUserData.

        The permission level of the user

        :return: The permission_level of this SubUserData.
        :rtype: str
        """
        return self._permission_level

    @permission_level.setter
    def permission_level(self, permission_level):
        """Sets the permission_level of this SubUserData.

        The permission level of the user

        :param permission_level: The permission_level of this SubUserData.
        :type permission_level: str
        """
        allowed_values = ["SelectedFolderAndSubfoldersMeters", "SelectedFolderOnly"]  # noqa: E501
        if permission_level not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_level` ({0}), must be one of {1}"
                .format(permission_level, allowed_values)
            )

        self._permission_level = permission_level

    @property
    def username(self):
        """Gets the username of this SubUserData.

        The username

        :return: The username of this SubUserData.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SubUserData.

        The username

        :param username: The username of this SubUserData.
        :type username: str
        """

        self._username = username
