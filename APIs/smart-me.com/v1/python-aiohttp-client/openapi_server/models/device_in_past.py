# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceInPast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counter_reading: float=None, counter_reading_export: float=None, counter_reading_export_t1: float=None, counter_reading_export_t2: float=None, counter_reading_export_t3: float=None, counter_reading_export_t4: float=None, counter_reading_import: float=None, counter_reading_import_t1: float=None, counter_reading_import_t2: float=None, counter_reading_import_t3: float=None, counter_reading_import_t4: float=None, counter_reading_t1: float=None, counter_reading_t2: float=None, counter_reading_t3: float=None, counter_reading_t4: float=None, counter_reading_unit: str=None, _date: datetime=None, id: str=None, serial: int=None):
        """DeviceInPast - a model defined in OpenAPI

        :param counter_reading: The counter_reading of this DeviceInPast.
        :param counter_reading_export: The counter_reading_export of this DeviceInPast.
        :param counter_reading_export_t1: The counter_reading_export_t1 of this DeviceInPast.
        :param counter_reading_export_t2: The counter_reading_export_t2 of this DeviceInPast.
        :param counter_reading_export_t3: The counter_reading_export_t3 of this DeviceInPast.
        :param counter_reading_export_t4: The counter_reading_export_t4 of this DeviceInPast.
        :param counter_reading_import: The counter_reading_import of this DeviceInPast.
        :param counter_reading_import_t1: The counter_reading_import_t1 of this DeviceInPast.
        :param counter_reading_import_t2: The counter_reading_import_t2 of this DeviceInPast.
        :param counter_reading_import_t3: The counter_reading_import_t3 of this DeviceInPast.
        :param counter_reading_import_t4: The counter_reading_import_t4 of this DeviceInPast.
        :param counter_reading_t1: The counter_reading_t1 of this DeviceInPast.
        :param counter_reading_t2: The counter_reading_t2 of this DeviceInPast.
        :param counter_reading_t3: The counter_reading_t3 of this DeviceInPast.
        :param counter_reading_t4: The counter_reading_t4 of this DeviceInPast.
        :param counter_reading_unit: The counter_reading_unit of this DeviceInPast.
        :param _date: The _date of this DeviceInPast.
        :param id: The id of this DeviceInPast.
        :param serial: The serial of this DeviceInPast.
        """
        self.openapi_types = {
            'counter_reading': float,
            'counter_reading_export': float,
            'counter_reading_export_t1': float,
            'counter_reading_export_t2': float,
            'counter_reading_export_t3': float,
            'counter_reading_export_t4': float,
            'counter_reading_import': float,
            'counter_reading_import_t1': float,
            'counter_reading_import_t2': float,
            'counter_reading_import_t3': float,
            'counter_reading_import_t4': float,
            'counter_reading_t1': float,
            'counter_reading_t2': float,
            'counter_reading_t3': float,
            'counter_reading_t4': float,
            'counter_reading_unit': str,
            '_date': datetime,
            'id': str,
            'serial': int
        }

        self.attribute_map = {
            'counter_reading': 'CounterReading',
            'counter_reading_export': 'CounterReadingExport',
            'counter_reading_export_t1': 'CounterReadingExportT1',
            'counter_reading_export_t2': 'CounterReadingExportT2',
            'counter_reading_export_t3': 'CounterReadingExportT3',
            'counter_reading_export_t4': 'CounterReadingExportT4',
            'counter_reading_import': 'CounterReadingImport',
            'counter_reading_import_t1': 'CounterReadingImportT1',
            'counter_reading_import_t2': 'CounterReadingImportT2',
            'counter_reading_import_t3': 'CounterReadingImportT3',
            'counter_reading_import_t4': 'CounterReadingImportT4',
            'counter_reading_t1': 'CounterReadingT1',
            'counter_reading_t2': 'CounterReadingT2',
            'counter_reading_t3': 'CounterReadingT3',
            'counter_reading_t4': 'CounterReadingT4',
            'counter_reading_unit': 'CounterReadingUnit',
            '_date': 'Date',
            'id': 'Id',
            'serial': 'Serial'
        }

        self._counter_reading = counter_reading
        self._counter_reading_export = counter_reading_export
        self._counter_reading_export_t1 = counter_reading_export_t1
        self._counter_reading_export_t2 = counter_reading_export_t2
        self._counter_reading_export_t3 = counter_reading_export_t3
        self._counter_reading_export_t4 = counter_reading_export_t4
        self._counter_reading_import = counter_reading_import
        self._counter_reading_import_t1 = counter_reading_import_t1
        self._counter_reading_import_t2 = counter_reading_import_t2
        self._counter_reading_import_t3 = counter_reading_import_t3
        self._counter_reading_import_t4 = counter_reading_import_t4
        self._counter_reading_t1 = counter_reading_t1
        self._counter_reading_t2 = counter_reading_t2
        self._counter_reading_t3 = counter_reading_t3
        self._counter_reading_t4 = counter_reading_t4
        self._counter_reading_unit = counter_reading_unit
        self.__date = _date
        self._id = id
        self._serial = serial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceInPast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceInPast of this DeviceInPast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counter_reading(self):
        """Gets the counter_reading of this DeviceInPast.

        The Meter Counter Reading (Total Energy used)

        :return: The counter_reading of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading

    @counter_reading.setter
    def counter_reading(self, counter_reading):
        """Sets the counter_reading of this DeviceInPast.

        The Meter Counter Reading (Total Energy used)

        :param counter_reading: The counter_reading of this DeviceInPast.
        :type counter_reading: float
        """

        self._counter_reading = counter_reading

    @property
    def counter_reading_export(self):
        """Gets the counter_reading_export of this DeviceInPast.

        The Meter Counter Reading Export

        :return: The counter_reading_export of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_export

    @counter_reading_export.setter
    def counter_reading_export(self, counter_reading_export):
        """Sets the counter_reading_export of this DeviceInPast.

        The Meter Counter Reading Export

        :param counter_reading_export: The counter_reading_export of this DeviceInPast.
        :type counter_reading_export: float
        """

        self._counter_reading_export = counter_reading_export

    @property
    def counter_reading_export_t1(self):
        """Gets the counter_reading_export_t1 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 1

        :return: The counter_reading_export_t1 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_export_t1

    @counter_reading_export_t1.setter
    def counter_reading_export_t1(self, counter_reading_export_t1):
        """Sets the counter_reading_export_t1 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 1

        :param counter_reading_export_t1: The counter_reading_export_t1 of this DeviceInPast.
        :type counter_reading_export_t1: float
        """

        self._counter_reading_export_t1 = counter_reading_export_t1

    @property
    def counter_reading_export_t2(self):
        """Gets the counter_reading_export_t2 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 2

        :return: The counter_reading_export_t2 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_export_t2

    @counter_reading_export_t2.setter
    def counter_reading_export_t2(self, counter_reading_export_t2):
        """Sets the counter_reading_export_t2 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 2

        :param counter_reading_export_t2: The counter_reading_export_t2 of this DeviceInPast.
        :type counter_reading_export_t2: float
        """

        self._counter_reading_export_t2 = counter_reading_export_t2

    @property
    def counter_reading_export_t3(self):
        """Gets the counter_reading_export_t3 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 3

        :return: The counter_reading_export_t3 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_export_t3

    @counter_reading_export_t3.setter
    def counter_reading_export_t3(self, counter_reading_export_t3):
        """Sets the counter_reading_export_t3 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 3

        :param counter_reading_export_t3: The counter_reading_export_t3 of this DeviceInPast.
        :type counter_reading_export_t3: float
        """

        self._counter_reading_export_t3 = counter_reading_export_t3

    @property
    def counter_reading_export_t4(self):
        """Gets the counter_reading_export_t4 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 4

        :return: The counter_reading_export_t4 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_export_t4

    @counter_reading_export_t4.setter
    def counter_reading_export_t4(self, counter_reading_export_t4):
        """Sets the counter_reading_export_t4 of this DeviceInPast.

        The Meter Counter Reading Export Tariff 4

        :param counter_reading_export_t4: The counter_reading_export_t4 of this DeviceInPast.
        :type counter_reading_export_t4: float
        """

        self._counter_reading_export_t4 = counter_reading_export_t4

    @property
    def counter_reading_import(self):
        """Gets the counter_reading_import of this DeviceInPast.

        The Meter Counter Reading Import

        :return: The counter_reading_import of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_import

    @counter_reading_import.setter
    def counter_reading_import(self, counter_reading_import):
        """Sets the counter_reading_import of this DeviceInPast.

        The Meter Counter Reading Import

        :param counter_reading_import: The counter_reading_import of this DeviceInPast.
        :type counter_reading_import: float
        """

        self._counter_reading_import = counter_reading_import

    @property
    def counter_reading_import_t1(self):
        """Gets the counter_reading_import_t1 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 1

        :return: The counter_reading_import_t1 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_import_t1

    @counter_reading_import_t1.setter
    def counter_reading_import_t1(self, counter_reading_import_t1):
        """Sets the counter_reading_import_t1 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 1

        :param counter_reading_import_t1: The counter_reading_import_t1 of this DeviceInPast.
        :type counter_reading_import_t1: float
        """

        self._counter_reading_import_t1 = counter_reading_import_t1

    @property
    def counter_reading_import_t2(self):
        """Gets the counter_reading_import_t2 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 2

        :return: The counter_reading_import_t2 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_import_t2

    @counter_reading_import_t2.setter
    def counter_reading_import_t2(self, counter_reading_import_t2):
        """Sets the counter_reading_import_t2 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 2

        :param counter_reading_import_t2: The counter_reading_import_t2 of this DeviceInPast.
        :type counter_reading_import_t2: float
        """

        self._counter_reading_import_t2 = counter_reading_import_t2

    @property
    def counter_reading_import_t3(self):
        """Gets the counter_reading_import_t3 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 3

        :return: The counter_reading_import_t3 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_import_t3

    @counter_reading_import_t3.setter
    def counter_reading_import_t3(self, counter_reading_import_t3):
        """Sets the counter_reading_import_t3 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 3

        :param counter_reading_import_t3: The counter_reading_import_t3 of this DeviceInPast.
        :type counter_reading_import_t3: float
        """

        self._counter_reading_import_t3 = counter_reading_import_t3

    @property
    def counter_reading_import_t4(self):
        """Gets the counter_reading_import_t4 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 4

        :return: The counter_reading_import_t4 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_import_t4

    @counter_reading_import_t4.setter
    def counter_reading_import_t4(self, counter_reading_import_t4):
        """Sets the counter_reading_import_t4 of this DeviceInPast.

        The Meter Counter Reading Import Tariff 4

        :param counter_reading_import_t4: The counter_reading_import_t4 of this DeviceInPast.
        :type counter_reading_import_t4: float
        """

        self._counter_reading_import_t4 = counter_reading_import_t4

    @property
    def counter_reading_t1(self):
        """Gets the counter_reading_t1 of this DeviceInPast.

        The Meter Counter Reading Tariff 1

        :return: The counter_reading_t1 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_t1

    @counter_reading_t1.setter
    def counter_reading_t1(self, counter_reading_t1):
        """Sets the counter_reading_t1 of this DeviceInPast.

        The Meter Counter Reading Tariff 1

        :param counter_reading_t1: The counter_reading_t1 of this DeviceInPast.
        :type counter_reading_t1: float
        """

        self._counter_reading_t1 = counter_reading_t1

    @property
    def counter_reading_t2(self):
        """Gets the counter_reading_t2 of this DeviceInPast.

        The Meter Counter Reading Tariff 2

        :return: The counter_reading_t2 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_t2

    @counter_reading_t2.setter
    def counter_reading_t2(self, counter_reading_t2):
        """Sets the counter_reading_t2 of this DeviceInPast.

        The Meter Counter Reading Tariff 2

        :param counter_reading_t2: The counter_reading_t2 of this DeviceInPast.
        :type counter_reading_t2: float
        """

        self._counter_reading_t2 = counter_reading_t2

    @property
    def counter_reading_t3(self):
        """Gets the counter_reading_t3 of this DeviceInPast.

        The Meter Counter Reading Tariff 3

        :return: The counter_reading_t3 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_t3

    @counter_reading_t3.setter
    def counter_reading_t3(self, counter_reading_t3):
        """Sets the counter_reading_t3 of this DeviceInPast.

        The Meter Counter Reading Tariff 3

        :param counter_reading_t3: The counter_reading_t3 of this DeviceInPast.
        :type counter_reading_t3: float
        """

        self._counter_reading_t3 = counter_reading_t3

    @property
    def counter_reading_t4(self):
        """Gets the counter_reading_t4 of this DeviceInPast.

        The Meter Counter Reading Tariff 4

        :return: The counter_reading_t4 of this DeviceInPast.
        :rtype: float
        """
        return self._counter_reading_t4

    @counter_reading_t4.setter
    def counter_reading_t4(self, counter_reading_t4):
        """Sets the counter_reading_t4 of this DeviceInPast.

        The Meter Counter Reading Tariff 4

        :param counter_reading_t4: The counter_reading_t4 of this DeviceInPast.
        :type counter_reading_t4: float
        """

        self._counter_reading_t4 = counter_reading_t4

    @property
    def counter_reading_unit(self):
        """Gets the counter_reading_unit of this DeviceInPast.

        The Unit of the Counter Reading

        :return: The counter_reading_unit of this DeviceInPast.
        :rtype: str
        """
        return self._counter_reading_unit

    @counter_reading_unit.setter
    def counter_reading_unit(self, counter_reading_unit):
        """Sets the counter_reading_unit of this DeviceInPast.

        The Unit of the Counter Reading

        :param counter_reading_unit: The counter_reading_unit of this DeviceInPast.
        :type counter_reading_unit: str
        """

        self._counter_reading_unit = counter_reading_unit

    @property
    def _date(self):
        """Gets the _date of this DeviceInPast.

        The Date of the Values

        :return: The _date of this DeviceInPast.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DeviceInPast.

        The Date of the Values

        :param _date: The _date of this DeviceInPast.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this DeviceInPast.

        The ID of the device

        :return: The id of this DeviceInPast.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceInPast.

        The ID of the device

        :param id: The id of this DeviceInPast.
        :type id: str
        """

        self._id = id

    @property
    def serial(self):
        """Gets the serial of this DeviceInPast.

        The Serial number

        :return: The serial of this DeviceInPast.
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this DeviceInPast.

        The Serial number

        :param serial: The serial of this DeviceInPast.
        :type serial: int
        """

        self._serial = serial
