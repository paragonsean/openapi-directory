# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputConfigurationContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digital_output_no_connection_action: str=None, name: str=None, number: int=None, s0_pulse_value: str=None, type: str=None):
        """OutputConfigurationContainer - a model defined in OpenAPI

        :param digital_output_no_connection_action: The digital_output_no_connection_action of this OutputConfigurationContainer.
        :param name: The name of this OutputConfigurationContainer.
        :param number: The number of this OutputConfigurationContainer.
        :param s0_pulse_value: The s0_pulse_value of this OutputConfigurationContainer.
        :param type: The type of this OutputConfigurationContainer.
        """
        self.openapi_types = {
            'digital_output_no_connection_action': str,
            'name': str,
            'number': int,
            's0_pulse_value': str,
            'type': str
        }

        self.attribute_map = {
            'digital_output_no_connection_action': 'DigitalOutputNoConnectionAction',
            'name': 'Name',
            'number': 'Number',
            's0_pulse_value': 'S0PulseValue',
            'type': 'Type'
        }

        self._digital_output_no_connection_action = digital_output_no_connection_action
        self._name = name
        self._number = number
        self._s0_pulse_value = s0_pulse_value
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputConfigurationContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputConfigurationContainer of this OutputConfigurationContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digital_output_no_connection_action(self):
        """Gets the digital_output_no_connection_action of this OutputConfigurationContainer.

        The Action when the device has lost the connection

        :return: The digital_output_no_connection_action of this OutputConfigurationContainer.
        :rtype: str
        """
        return self._digital_output_no_connection_action

    @digital_output_no_connection_action.setter
    def digital_output_no_connection_action(self, digital_output_no_connection_action):
        """Sets the digital_output_no_connection_action of this OutputConfigurationContainer.

        The Action when the device has lost the connection

        :param digital_output_no_connection_action: The digital_output_no_connection_action of this OutputConfigurationContainer.
        :type digital_output_no_connection_action: str
        """
        allowed_values = ["Nothing", "TurnOff", "TurnOn", "SetPwmValue"]  # noqa: E501
        if digital_output_no_connection_action not in allowed_values:
            raise ValueError(
                "Invalid value for `digital_output_no_connection_action` ({0}), must be one of {1}"
                .format(digital_output_no_connection_action, allowed_values)
            )

        self._digital_output_no_connection_action = digital_output_no_connection_action

    @property
    def name(self):
        """Gets the name of this OutputConfigurationContainer.

        The Name of the Output

        :return: The name of this OutputConfigurationContainer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OutputConfigurationContainer.

        The Name of the Output

        :param name: The name of this OutputConfigurationContainer.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this OutputConfigurationContainer.

        The number of the Output. (1 for Output 1, 2 for Output 2)

        :return: The number of this OutputConfigurationContainer.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OutputConfigurationContainer.

        The number of the Output. (1 for Output 1, 2 for Output 2)

        :param number: The number of this OutputConfigurationContainer.
        :type number: int
        """

        self._number = number

    @property
    def s0_pulse_value(self):
        """Gets the s0_pulse_value of this OutputConfigurationContainer.

        The S0 Pulse Value

        :return: The s0_pulse_value of this OutputConfigurationContainer.
        :rtype: str
        """
        return self._s0_pulse_value

    @s0_pulse_value.setter
    def s0_pulse_value(self, s0_pulse_value):
        """Sets the s0_pulse_value of this OutputConfigurationContainer.

        The S0 Pulse Value

        :param s0_pulse_value: The s0_pulse_value of this OutputConfigurationContainer.
        :type s0_pulse_value: str
        """
        allowed_values = ["PulseValue1000Kwh", "PulseValue10000Kwh"]  # noqa: E501
        if s0_pulse_value not in allowed_values:
            raise ValueError(
                "Invalid value for `s0_pulse_value` ({0}), must be one of {1}"
                .format(s0_pulse_value, allowed_values)
            )

        self._s0_pulse_value = s0_pulse_value

    @property
    def type(self):
        """Gets the type of this OutputConfigurationContainer.

        The Type of the output

        :return: The type of this OutputConfigurationContainer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OutputConfigurationContainer.

        The Type of the output

        :param type: The type of this OutputConfigurationContainer.
        :type type: str
        """
        allowed_values = ["ImpulseOutputActiveEnergy", "ImpulseOutputActiveEnergyImport", "ImpulseOutputActiveEnergyExport", "ImpulseOutputReactiveEnergy", "DigitalOutput", "AnalogPwmSignalOutput", "Disabled"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
