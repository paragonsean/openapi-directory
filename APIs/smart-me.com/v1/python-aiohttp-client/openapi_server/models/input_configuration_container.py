# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputConfigurationContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, number: int=None, off_text: str=None, on_text: str=None, type: str=None):
        """InputConfigurationContainer - a model defined in OpenAPI

        :param name: The name of this InputConfigurationContainer.
        :param number: The number of this InputConfigurationContainer.
        :param off_text: The off_text of this InputConfigurationContainer.
        :param on_text: The on_text of this InputConfigurationContainer.
        :param type: The type of this InputConfigurationContainer.
        """
        self.openapi_types = {
            'name': str,
            'number': int,
            'off_text': str,
            'on_text': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'Name',
            'number': 'Number',
            'off_text': 'OffText',
            'on_text': 'OnText',
            'type': 'Type'
        }

        self._name = name
        self._number = number
        self._off_text = off_text
        self._on_text = on_text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfigurationContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputConfigurationContainer of this InputConfigurationContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InputConfigurationContainer.

        The Name of the Input

        :return: The name of this InputConfigurationContainer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InputConfigurationContainer.

        The Name of the Input

        :param name: The name of this InputConfigurationContainer.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this InputConfigurationContainer.

        The number of the Input. (1 for Input 1)

        :return: The number of this InputConfigurationContainer.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InputConfigurationContainer.

        The number of the Input. (1 for Input 1)

        :param number: The number of this InputConfigurationContainer.
        :type number: int
        """

        self._number = number

    @property
    def off_text(self):
        """Gets the off_text of this InputConfigurationContainer.

        The visualization text for an OFF action

        :return: The off_text of this InputConfigurationContainer.
        :rtype: str
        """
        return self._off_text

    @off_text.setter
    def off_text(self, off_text):
        """Sets the off_text of this InputConfigurationContainer.

        The visualization text for an OFF action

        :param off_text: The off_text of this InputConfigurationContainer.
        :type off_text: str
        """

        self._off_text = off_text

    @property
    def on_text(self):
        """Gets the on_text of this InputConfigurationContainer.

        The visualization text for an ON action

        :return: The on_text of this InputConfigurationContainer.
        :rtype: str
        """
        return self._on_text

    @on_text.setter
    def on_text(self, on_text):
        """Sets the on_text of this InputConfigurationContainer.

        The visualization text for an ON action

        :param on_text: The on_text of this InputConfigurationContainer.
        :type on_text: str
        """

        self._on_text = on_text

    @property
    def type(self):
        """Gets the type of this InputConfigurationContainer.

        The Type of the output

        :return: The type of this InputConfigurationContainer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputConfigurationContainer.

        The Type of the output

        :param type: The type of this InputConfigurationContainer.
        :type type: str
        """
        allowed_values = ["TariffInput", "DigitalInput"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
