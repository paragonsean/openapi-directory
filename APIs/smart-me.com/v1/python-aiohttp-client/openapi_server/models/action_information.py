# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, max_value: float=None, min_value: float=None, name: str=None, obis_code: str=None):
        """ActionInformation - a model defined in OpenAPI

        :param action_type: The action_type of this ActionInformation.
        :param max_value: The max_value of this ActionInformation.
        :param min_value: The min_value of this ActionInformation.
        :param name: The name of this ActionInformation.
        :param obis_code: The obis_code of this ActionInformation.
        """
        self.openapi_types = {
            'action_type': str,
            'max_value': float,
            'min_value': float,
            'name': str,
            'obis_code': str
        }

        self.attribute_map = {
            'action_type': 'ActionType',
            'max_value': 'MaxValue',
            'min_value': 'MinValue',
            'name': 'Name',
            'obis_code': 'ObisCode'
        }

        self._action_type = action_type
        self._max_value = max_value
        self._min_value = min_value
        self._name = name
        self._obis_code = obis_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionInformation of this ActionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this ActionInformation.

        The Type of this action.

        :return: The action_type of this ActionInformation.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionInformation.

        The Type of this action.

        :param action_type: The action_type of this ActionInformation.
        :type action_type: str
        """
        allowed_values = ["OnOffAction", "AnalogAction"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def max_value(self):
        """Gets the max_value of this ActionInformation.

        The maximum value of this action (e.g. for an AnalogAction)

        :return: The max_value of this ActionInformation.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this ActionInformation.

        The maximum value of this action (e.g. for an AnalogAction)

        :param max_value: The max_value of this ActionInformation.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this ActionInformation.

        The minimum value of this action (e.g. for an AnalogAction)

        :return: The min_value of this ActionInformation.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this ActionInformation.

        The minimum value of this action (e.g. for an AnalogAction)

        :param min_value: The min_value of this ActionInformation.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def name(self):
        """Gets the name of this ActionInformation.

        The Name of this action

        :return: The name of this ActionInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionInformation.

        The Name of this action

        :param name: The name of this ActionInformation.
        :type name: str
        """

        self._name = name

    @property
    def obis_code(self):
        """Gets the obis_code of this ActionInformation.

        The Obis Code of this action. This is used as ID.

        :return: The obis_code of this ActionInformation.
        :rtype: str
        """
        return self._obis_code

    @obis_code.setter
    def obis_code(self, obis_code):
        """Sets the obis_code of this ActionInformation.

        The Obis Code of this action. This is used as ID.

        :param obis_code: The obis_code of this ActionInformation.
        :type obis_code: str
        """

        self._obis_code = obis_code
