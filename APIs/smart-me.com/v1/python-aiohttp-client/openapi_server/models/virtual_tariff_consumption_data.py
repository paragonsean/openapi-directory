# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualTariffConsumptionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumption: float=None, currency: str=None, name: str=None, price: float=None, tariff_type: str=None):
        """VirtualTariffConsumptionData - a model defined in OpenAPI

        :param consumption: The consumption of this VirtualTariffConsumptionData.
        :param currency: The currency of this VirtualTariffConsumptionData.
        :param name: The name of this VirtualTariffConsumptionData.
        :param price: The price of this VirtualTariffConsumptionData.
        :param tariff_type: The tariff_type of this VirtualTariffConsumptionData.
        """
        self.openapi_types = {
            'consumption': float,
            'currency': str,
            'name': str,
            'price': float,
            'tariff_type': str
        }

        self.attribute_map = {
            'consumption': 'Consumption',
            'currency': 'Currency',
            'name': 'Name',
            'price': 'Price',
            'tariff_type': 'TariffType'
        }

        self._consumption = consumption
        self._currency = currency
        self._name = name
        self._price = price
        self._tariff_type = tariff_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualTariffConsumptionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualTariffConsumptionData of this VirtualTariffConsumptionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumption(self):
        """Gets the consumption of this VirtualTariffConsumptionData.

        The consumption (e.g. kWh) of this tariff

        :return: The consumption of this VirtualTariffConsumptionData.
        :rtype: float
        """
        return self._consumption

    @consumption.setter
    def consumption(self, consumption):
        """Sets the consumption of this VirtualTariffConsumptionData.

        The consumption (e.g. kWh) of this tariff

        :param consumption: The consumption of this VirtualTariffConsumptionData.
        :type consumption: float
        """

        self._consumption = consumption

    @property
    def currency(self):
        """Gets the currency of this VirtualTariffConsumptionData.

        The currency of the price

        :return: The currency of this VirtualTariffConsumptionData.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VirtualTariffConsumptionData.

        The currency of the price

        :param currency: The currency of this VirtualTariffConsumptionData.
        :type currency: str
        """

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this VirtualTariffConsumptionData.

        The Name of this virtual tariff

        :return: The name of this VirtualTariffConsumptionData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualTariffConsumptionData.

        The Name of this virtual tariff

        :param name: The name of this VirtualTariffConsumptionData.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this VirtualTariffConsumptionData.

        The price of the energy in this timerange

        :return: The price of this VirtualTariffConsumptionData.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VirtualTariffConsumptionData.

        The price of the energy in this timerange

        :param price: The price of this VirtualTariffConsumptionData.
        :type price: float
        """

        self._price = price

    @property
    def tariff_type(self):
        """Gets the tariff_type of this VirtualTariffConsumptionData.

        The type of the virtual tariff (e.g. solar)

        :return: The tariff_type of this VirtualTariffConsumptionData.
        :rtype: str
        """
        return self._tariff_type

    @tariff_type.setter
    def tariff_type(self, tariff_type):
        """Sets the tariff_type of this VirtualTariffConsumptionData.

        The type of the virtual tariff (e.g. solar)

        :param tariff_type: The tariff_type of this VirtualTariffConsumptionData.
        :type tariff_type: str
        """
        allowed_values = ["Battery", "Solar", "Normal"]  # noqa: E501
        if tariff_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tariff_type` ({0}), must be one of {1}"
                .format(tariff_type, allowed_values)
            )

        self._tariff_type = tariff_type
