# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualTariff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, factor: float=None, id: str=None, name: str=None, type: str=None, unit: str=None, value: float=None):
        """VirtualTariff - a model defined in OpenAPI

        :param factor: The factor of this VirtualTariff.
        :param id: The id of this VirtualTariff.
        :param name: The name of this VirtualTariff.
        :param type: The type of this VirtualTariff.
        :param unit: The unit of this VirtualTariff.
        :param value: The value of this VirtualTariff.
        """
        self.openapi_types = {
            'factor': float,
            'id': str,
            'name': str,
            'type': str,
            'unit': str,
            'value': float
        }

        self.attribute_map = {
            'factor': 'Factor',
            'id': 'Id',
            'name': 'Name',
            'type': 'Type',
            'unit': 'Unit',
            'value': 'Value'
        }

        self._factor = factor
        self._id = id
        self._name = name
        self._type = type
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualTariff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualTariff of this VirtualTariff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factor(self):
        """Gets the factor of this VirtualTariff.

        Says how many of the active power is used in this tariff. This is calculated from the last meter values.

        :return: The factor of this VirtualTariff.
        :rtype: float
        """
        return self._factor

    @factor.setter
    def factor(self, factor):
        """Sets the factor of this VirtualTariff.

        Says how many of the active power is used in this tariff. This is calculated from the last meter values.

        :param factor: The factor of this VirtualTariff.
        :type factor: float
        """

        self._factor = factor

    @property
    def id(self):
        """Gets the id of this VirtualTariff.


        :return: The id of this VirtualTariff.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualTariff.


        :param id: The id of this VirtualTariff.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualTariff.


        :return: The name of this VirtualTariff.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualTariff.


        :param name: The name of this VirtualTariff.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this VirtualTariff.


        :return: The type of this VirtualTariff.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualTariff.


        :param type: The type of this VirtualTariff.
        :type type: str
        """
        allowed_values = ["Battery", "Solar", "Normal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this VirtualTariff.


        :return: The unit of this VirtualTariff.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this VirtualTariff.


        :param unit: The unit of this VirtualTariff.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this VirtualTariff.

        The Counter Value of this tariff

        :return: The value of this VirtualTariff.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this VirtualTariff.

        The Counter Value of this tariff

        :param value: The value of this VirtualTariff.
        :type value: float
        """

        self._value = value
