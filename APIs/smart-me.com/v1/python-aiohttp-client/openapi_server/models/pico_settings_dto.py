# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PicoSettingsDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_type: str=None, car_id_detection: bool=None, display_brightness: str=None, dns_name: str=None, fix_cable_lock_enable: bool=None, idle_image_url: str=None, internal_ip: str=None, loadmanagement_group_id: str=None, max_current: int=None, min_current: int=None, modbus_tcp: bool=None, name: str=None, serial_number: str=None):
        """PicoSettingsDto - a model defined in OpenAPI

        :param authentication_type: The authentication_type of this PicoSettingsDto.
        :param car_id_detection: The car_id_detection of this PicoSettingsDto.
        :param display_brightness: The display_brightness of this PicoSettingsDto.
        :param dns_name: The dns_name of this PicoSettingsDto.
        :param fix_cable_lock_enable: The fix_cable_lock_enable of this PicoSettingsDto.
        :param idle_image_url: The idle_image_url of this PicoSettingsDto.
        :param internal_ip: The internal_ip of this PicoSettingsDto.
        :param loadmanagement_group_id: The loadmanagement_group_id of this PicoSettingsDto.
        :param max_current: The max_current of this PicoSettingsDto.
        :param min_current: The min_current of this PicoSettingsDto.
        :param modbus_tcp: The modbus_tcp of this PicoSettingsDto.
        :param name: The name of this PicoSettingsDto.
        :param serial_number: The serial_number of this PicoSettingsDto.
        """
        self.openapi_types = {
            'authentication_type': str,
            'car_id_detection': bool,
            'display_brightness': str,
            'dns_name': str,
            'fix_cable_lock_enable': bool,
            'idle_image_url': str,
            'internal_ip': str,
            'loadmanagement_group_id': str,
            'max_current': int,
            'min_current': int,
            'modbus_tcp': bool,
            'name': str,
            'serial_number': str
        }

        self.attribute_map = {
            'authentication_type': 'AuthenticationType',
            'car_id_detection': 'CarIdDetection',
            'display_brightness': 'DisplayBrightness',
            'dns_name': 'DnsName',
            'fix_cable_lock_enable': 'FixCableLockEnable',
            'idle_image_url': 'IdleImageUrl',
            'internal_ip': 'InternalIp',
            'loadmanagement_group_id': 'LoadmanagementGroupId',
            'max_current': 'MaxCurrent',
            'min_current': 'MinCurrent',
            'modbus_tcp': 'ModbusTcp',
            'name': 'Name',
            'serial_number': 'SerialNumber'
        }

        self._authentication_type = authentication_type
        self._car_id_detection = car_id_detection
        self._display_brightness = display_brightness
        self._dns_name = dns_name
        self._fix_cable_lock_enable = fix_cable_lock_enable
        self._idle_image_url = idle_image_url
        self._internal_ip = internal_ip
        self._loadmanagement_group_id = loadmanagement_group_id
        self._max_current = max_current
        self._min_current = min_current
        self._modbus_tcp = modbus_tcp
        self._name = name
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PicoSettingsDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PicoSettingsDto of this PicoSettingsDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_type(self):
        """Gets the authentication_type of this PicoSettingsDto.

        The authentication type

        :return: The authentication_type of this PicoSettingsDto.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this PicoSettingsDto.

        The authentication type

        :param authentication_type: The authentication_type of this PicoSettingsDto.
        :type authentication_type: str
        """
        allowed_values = ["None", "Backend"]  # noqa: E501
        if authentication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def car_id_detection(self):
        """Gets the car_id_detection of this PicoSettingsDto.

        Flag if the car id detection is enabled

        :return: The car_id_detection of this PicoSettingsDto.
        :rtype: bool
        """
        return self._car_id_detection

    @car_id_detection.setter
    def car_id_detection(self, car_id_detection):
        """Sets the car_id_detection of this PicoSettingsDto.

        Flag if the car id detection is enabled

        :param car_id_detection: The car_id_detection of this PicoSettingsDto.
        :type car_id_detection: bool
        """

        self._car_id_detection = car_id_detection

    @property
    def display_brightness(self):
        """Gets the display_brightness of this PicoSettingsDto.

        The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum

        :return: The display_brightness of this PicoSettingsDto.
        :rtype: str
        """
        return self._display_brightness

    @display_brightness.setter
    def display_brightness(self, display_brightness):
        """Sets the display_brightness of this PicoSettingsDto.

        The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum

        :param display_brightness: The display_brightness of this PicoSettingsDto.
        :type display_brightness: str
        """

        self._display_brightness = display_brightness

    @property
    def dns_name(self):
        """Gets the dns_name of this PicoSettingsDto.

        The DNS name of the pico's internal ip

        :return: The dns_name of this PicoSettingsDto.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this PicoSettingsDto.

        The DNS name of the pico's internal ip

        :param dns_name: The dns_name of this PicoSettingsDto.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def fix_cable_lock_enable(self):
        """Gets the fix_cable_lock_enable of this PicoSettingsDto.

        Enable the fix lock of the charging cable

        :return: The fix_cable_lock_enable of this PicoSettingsDto.
        :rtype: bool
        """
        return self._fix_cable_lock_enable

    @fix_cable_lock_enable.setter
    def fix_cable_lock_enable(self, fix_cable_lock_enable):
        """Sets the fix_cable_lock_enable of this PicoSettingsDto.

        Enable the fix lock of the charging cable

        :param fix_cable_lock_enable: The fix_cable_lock_enable of this PicoSettingsDto.
        :type fix_cable_lock_enable: bool
        """

        self._fix_cable_lock_enable = fix_cable_lock_enable

    @property
    def idle_image_url(self):
        """Gets the idle_image_url of this PicoSettingsDto.

        The url of the idle image

        :return: The idle_image_url of this PicoSettingsDto.
        :rtype: str
        """
        return self._idle_image_url

    @idle_image_url.setter
    def idle_image_url(self, idle_image_url):
        """Sets the idle_image_url of this PicoSettingsDto.

        The url of the idle image

        :param idle_image_url: The idle_image_url of this PicoSettingsDto.
        :type idle_image_url: str
        """

        self._idle_image_url = idle_image_url

    @property
    def internal_ip(self):
        """Gets the internal_ip of this PicoSettingsDto.

        The internal IP address

        :return: The internal_ip of this PicoSettingsDto.
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this PicoSettingsDto.

        The internal IP address

        :param internal_ip: The internal_ip of this PicoSettingsDto.
        :type internal_ip: str
        """

        self._internal_ip = internal_ip

    @property
    def loadmanagement_group_id(self):
        """Gets the loadmanagement_group_id of this PicoSettingsDto.

        The ID of the loadmanagement group

        :return: The loadmanagement_group_id of this PicoSettingsDto.
        :rtype: str
        """
        return self._loadmanagement_group_id

    @loadmanagement_group_id.setter
    def loadmanagement_group_id(self, loadmanagement_group_id):
        """Sets the loadmanagement_group_id of this PicoSettingsDto.

        The ID of the loadmanagement group

        :param loadmanagement_group_id: The loadmanagement_group_id of this PicoSettingsDto.
        :type loadmanagement_group_id: str
        """

        self._loadmanagement_group_id = loadmanagement_group_id

    @property
    def max_current(self):
        """Gets the max_current of this PicoSettingsDto.

        The max current of this station (in A)

        :return: The max_current of this PicoSettingsDto.
        :rtype: int
        """
        return self._max_current

    @max_current.setter
    def max_current(self, max_current):
        """Sets the max_current of this PicoSettingsDto.

        The max current of this station (in A)

        :param max_current: The max_current of this PicoSettingsDto.
        :type max_current: int
        """

        self._max_current = max_current

    @property
    def min_current(self):
        """Gets the min_current of this PicoSettingsDto.

        The max current of this station (in A)

        :return: The min_current of this PicoSettingsDto.
        :rtype: int
        """
        return self._min_current

    @min_current.setter
    def min_current(self, min_current):
        """Sets the min_current of this PicoSettingsDto.

        The max current of this station (in A)

        :param min_current: The min_current of this PicoSettingsDto.
        :type min_current: int
        """

        self._min_current = min_current

    @property
    def modbus_tcp(self):
        """Gets the modbus_tcp of this PicoSettingsDto.

        Flag if ModbusTcp is enabled

        :return: The modbus_tcp of this PicoSettingsDto.
        :rtype: bool
        """
        return self._modbus_tcp

    @modbus_tcp.setter
    def modbus_tcp(self, modbus_tcp):
        """Sets the modbus_tcp of this PicoSettingsDto.

        Flag if ModbusTcp is enabled

        :param modbus_tcp: The modbus_tcp of this PicoSettingsDto.
        :type modbus_tcp: bool
        """

        self._modbus_tcp = modbus_tcp

    @property
    def name(self):
        """Gets the name of this PicoSettingsDto.

        The name of the station

        :return: The name of this PicoSettingsDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PicoSettingsDto.

        The name of the station

        :param name: The name of this PicoSettingsDto.
        :type name: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this PicoSettingsDto.

        The Serial number of the station

        :return: The serial_number of this PicoSettingsDto.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this PicoSettingsDto.

        The Serial number of the station

        :param serial_number: The serial_number of this PicoSettingsDto.
        :type serial_number: str
        """

        self._serial_number = serial_number
