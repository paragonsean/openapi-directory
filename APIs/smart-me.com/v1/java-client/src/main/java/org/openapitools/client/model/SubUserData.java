/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container data for the sub user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubUserData {
  public static final String SERIALIZED_NAME_ACCESS_END_DATE = "AccessEndDate";
  @SerializedName(SERIALIZED_NAME_ACCESS_END_DATE)
  private OffsetDateTime accessEndDate;

  public static final String SERIALIZED_NAME_ACCESS_TIME_START_DATE = "AccessTimeStartDate";
  @SerializedName(SERIALIZED_NAME_ACCESS_TIME_START_DATE)
  private OffsetDateTime accessTimeStartDate;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NEW_PASSWORD = "NewPassword";
  @SerializedName(SERIALIZED_NAME_NEW_PASSWORD)
  private String newPassword;

  /**
   * The permission level of the user
   */
  @JsonAdapter(PermissionLevelEnum.Adapter.class)
  public enum PermissionLevelEnum {
    SELECTED_FOLDER_AND_SUBFOLDERS_METERS("SelectedFolderAndSubfoldersMeters"),
    
    SELECTED_FOLDER_ONLY("SelectedFolderOnly");

    private String value;

    PermissionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionLevelEnum fromValue(String value) {
      for (PermissionLevelEnum b : PermissionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_LEVEL = "PermissionLevel";
  @SerializedName(SERIALIZED_NAME_PERMISSION_LEVEL)
  private PermissionLevelEnum permissionLevel;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public SubUserData() {
  }

  public SubUserData accessEndDate(OffsetDateTime accessEndDate) {
    this.accessEndDate = accessEndDate;
    return this;
  }

  /**
   * The end date. until this date the user has access
   * @return accessEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccessEndDate() {
    return accessEndDate;
  }

  public void setAccessEndDate(OffsetDateTime accessEndDate) {
    this.accessEndDate = accessEndDate;
  }


  public SubUserData accessTimeStartDate(OffsetDateTime accessTimeStartDate) {
    this.accessTimeStartDate = accessTimeStartDate;
    return this;
  }

  /**
   * The start date. From this date the user has access
   * @return accessTimeStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccessTimeStartDate() {
    return accessTimeStartDate;
  }

  public void setAccessTimeStartDate(OffsetDateTime accessTimeStartDate) {
    this.accessTimeStartDate = accessTimeStartDate;
  }


  public SubUserData email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The Email adress
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SubUserData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the user
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubUserData newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

  /**
   * If set this is used a new password
   * @return newPassword
   */
  @javax.annotation.Nullable
  public String getNewPassword() {
    return newPassword;
  }

  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public SubUserData permissionLevel(PermissionLevelEnum permissionLevel) {
    this.permissionLevel = permissionLevel;
    return this;
  }

  /**
   * The permission level of the user
   * @return permissionLevel
   */
  @javax.annotation.Nullable
  public PermissionLevelEnum getPermissionLevel() {
    return permissionLevel;
  }

  public void setPermissionLevel(PermissionLevelEnum permissionLevel) {
    this.permissionLevel = permissionLevel;
  }


  public SubUserData username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubUserData subUserData = (SubUserData) o;
    return Objects.equals(this.accessEndDate, subUserData.accessEndDate) &&
        Objects.equals(this.accessTimeStartDate, subUserData.accessTimeStartDate) &&
        Objects.equals(this.email, subUserData.email) &&
        Objects.equals(this.id, subUserData.id) &&
        Objects.equals(this.newPassword, subUserData.newPassword) &&
        Objects.equals(this.permissionLevel, subUserData.permissionLevel) &&
        Objects.equals(this.username, subUserData.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessEndDate, accessTimeStartDate, email, id, newPassword, permissionLevel, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubUserData {\n");
    sb.append("    accessEndDate: ").append(toIndentedString(accessEndDate)).append("\n");
    sb.append("    accessTimeStartDate: ").append(toIndentedString(accessTimeStartDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    permissionLevel: ").append(toIndentedString(permissionLevel)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessEndDate");
    openapiFields.add("AccessTimeStartDate");
    openapiFields.add("Email");
    openapiFields.add("Id");
    openapiFields.add("NewPassword");
    openapiFields.add("PermissionLevel");
    openapiFields.add("Username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubUserData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubUserData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubUserData is not found in the empty JSON string", SubUserData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubUserData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubUserData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("NewPassword") != null && !jsonObj.get("NewPassword").isJsonNull()) && !jsonObj.get("NewPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewPassword").toString()));
      }
      if ((jsonObj.get("PermissionLevel") != null && !jsonObj.get("PermissionLevel").isJsonNull()) && !jsonObj.get("PermissionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermissionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermissionLevel").toString()));
      }
      // validate the optional field `PermissionLevel`
      if (jsonObj.get("PermissionLevel") != null && !jsonObj.get("PermissionLevel").isJsonNull()) {
        PermissionLevelEnum.validateJsonElement(jsonObj.get("PermissionLevel"));
      }
      if ((jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) && !jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubUserData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubUserData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubUserData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubUserData.class));

       return (TypeAdapter<T>) new TypeAdapter<SubUserData>() {
           @Override
           public void write(JsonWriter out, SubUserData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubUserData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubUserData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubUserData
   * @throws IOException if the JSON string is invalid with respect to SubUserData
   */
  public static SubUserData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubUserData.class);
  }

  /**
   * Convert an instance of SubUserData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

