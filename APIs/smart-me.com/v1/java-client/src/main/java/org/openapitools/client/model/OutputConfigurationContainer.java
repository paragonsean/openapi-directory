/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the outputs of a meter (analog/digital outputs)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutputConfigurationContainer {
  /**
   * The Action when the device has lost the connection
   */
  @JsonAdapter(DigitalOutputNoConnectionActionEnum.Adapter.class)
  public enum DigitalOutputNoConnectionActionEnum {
    NOTHING("Nothing"),
    
    TURN_OFF("TurnOff"),
    
    TURN_ON("TurnOn"),
    
    SET_PWM_VALUE("SetPwmValue");

    private String value;

    DigitalOutputNoConnectionActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DigitalOutputNoConnectionActionEnum fromValue(String value) {
      for (DigitalOutputNoConnectionActionEnum b : DigitalOutputNoConnectionActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DigitalOutputNoConnectionActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DigitalOutputNoConnectionActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DigitalOutputNoConnectionActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DigitalOutputNoConnectionActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DigitalOutputNoConnectionActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIGITAL_OUTPUT_NO_CONNECTION_ACTION = "DigitalOutputNoConnectionAction";
  @SerializedName(SERIALIZED_NAME_DIGITAL_OUTPUT_NO_CONNECTION_ACTION)
  private DigitalOutputNoConnectionActionEnum digitalOutputNoConnectionAction;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  /**
   * The S0 Pulse Value
   */
  @JsonAdapter(S0PulseValueEnum.Adapter.class)
  public enum S0PulseValueEnum {
    PULSE_VALUE1000_KWH("PulseValue1000Kwh"),
    
    PULSE_VALUE10000_KWH("PulseValue10000Kwh");

    private String value;

    S0PulseValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static S0PulseValueEnum fromValue(String value) {
      for (S0PulseValueEnum b : S0PulseValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<S0PulseValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final S0PulseValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public S0PulseValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return S0PulseValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      S0PulseValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_S0_PULSE_VALUE = "S0PulseValue";
  @SerializedName(SERIALIZED_NAME_S0_PULSE_VALUE)
  private S0PulseValueEnum s0PulseValue;

  /**
   * The Type of the output
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMPULSE_OUTPUT_ACTIVE_ENERGY("ImpulseOutputActiveEnergy"),
    
    IMPULSE_OUTPUT_ACTIVE_ENERGY_IMPORT("ImpulseOutputActiveEnergyImport"),
    
    IMPULSE_OUTPUT_ACTIVE_ENERGY_EXPORT("ImpulseOutputActiveEnergyExport"),
    
    IMPULSE_OUTPUT_REACTIVE_ENERGY("ImpulseOutputReactiveEnergy"),
    
    DIGITAL_OUTPUT("DigitalOutput"),
    
    ANALOG_PWM_SIGNAL_OUTPUT("AnalogPwmSignalOutput"),
    
    DISABLED("Disabled");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public OutputConfigurationContainer() {
  }

  public OutputConfigurationContainer digitalOutputNoConnectionAction(DigitalOutputNoConnectionActionEnum digitalOutputNoConnectionAction) {
    this.digitalOutputNoConnectionAction = digitalOutputNoConnectionAction;
    return this;
  }

  /**
   * The Action when the device has lost the connection
   * @return digitalOutputNoConnectionAction
   */
  @javax.annotation.Nullable
  public DigitalOutputNoConnectionActionEnum getDigitalOutputNoConnectionAction() {
    return digitalOutputNoConnectionAction;
  }

  public void setDigitalOutputNoConnectionAction(DigitalOutputNoConnectionActionEnum digitalOutputNoConnectionAction) {
    this.digitalOutputNoConnectionAction = digitalOutputNoConnectionAction;
  }


  public OutputConfigurationContainer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the Output
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OutputConfigurationContainer number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the Output. (1 for Output 1, 2 for Output 2)
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public OutputConfigurationContainer s0PulseValue(S0PulseValueEnum s0PulseValue) {
    this.s0PulseValue = s0PulseValue;
    return this;
  }

  /**
   * The S0 Pulse Value
   * @return s0PulseValue
   */
  @javax.annotation.Nullable
  public S0PulseValueEnum getS0PulseValue() {
    return s0PulseValue;
  }

  public void setS0PulseValue(S0PulseValueEnum s0PulseValue) {
    this.s0PulseValue = s0PulseValue;
  }


  public OutputConfigurationContainer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The Type of the output
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputConfigurationContainer outputConfigurationContainer = (OutputConfigurationContainer) o;
    return Objects.equals(this.digitalOutputNoConnectionAction, outputConfigurationContainer.digitalOutputNoConnectionAction) &&
        Objects.equals(this.name, outputConfigurationContainer.name) &&
        Objects.equals(this.number, outputConfigurationContainer.number) &&
        Objects.equals(this.s0PulseValue, outputConfigurationContainer.s0PulseValue) &&
        Objects.equals(this.type, outputConfigurationContainer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digitalOutputNoConnectionAction, name, number, s0PulseValue, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputConfigurationContainer {\n");
    sb.append("    digitalOutputNoConnectionAction: ").append(toIndentedString(digitalOutputNoConnectionAction)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    s0PulseValue: ").append(toIndentedString(s0PulseValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DigitalOutputNoConnectionAction");
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("S0PulseValue");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputConfigurationContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputConfigurationContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputConfigurationContainer is not found in the empty JSON string", OutputConfigurationContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputConfigurationContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputConfigurationContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DigitalOutputNoConnectionAction") != null && !jsonObj.get("DigitalOutputNoConnectionAction").isJsonNull()) && !jsonObj.get("DigitalOutputNoConnectionAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DigitalOutputNoConnectionAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DigitalOutputNoConnectionAction").toString()));
      }
      // validate the optional field `DigitalOutputNoConnectionAction`
      if (jsonObj.get("DigitalOutputNoConnectionAction") != null && !jsonObj.get("DigitalOutputNoConnectionAction").isJsonNull()) {
        DigitalOutputNoConnectionActionEnum.validateJsonElement(jsonObj.get("DigitalOutputNoConnectionAction"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("S0PulseValue") != null && !jsonObj.get("S0PulseValue").isJsonNull()) && !jsonObj.get("S0PulseValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S0PulseValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S0PulseValue").toString()));
      }
      // validate the optional field `S0PulseValue`
      if (jsonObj.get("S0PulseValue") != null && !jsonObj.get("S0PulseValue").isJsonNull()) {
        S0PulseValueEnum.validateJsonElement(jsonObj.get("S0PulseValue"));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputConfigurationContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputConfigurationContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputConfigurationContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputConfigurationContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputConfigurationContainer>() {
           @Override
           public void write(JsonWriter out, OutputConfigurationContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputConfigurationContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputConfigurationContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputConfigurationContainer
   * @throws IOException if the JSON string is invalid with respect to OutputConfigurationContainer
   */
  public static OutputConfigurationContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputConfigurationContainer.class);
  }

  /**
   * Convert an instance of OutputConfigurationContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

