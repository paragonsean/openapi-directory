/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoExportSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A folder menu item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FolderMenuItem {
  public static final String SERIALIZED_NAME_AUTO_EXPORT_SETTINGS = "AutoExportSettings";
  @SerializedName(SERIALIZED_NAME_AUTO_EXPORT_SETTINGS)
  private AutoExportSettings autoExportSettings;

  public static final String SERIALIZED_NAME_CHILDREN = "Children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<FolderMenuItem> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The folder type of the item
   */
  @JsonAdapter(FolderTypeEnum.Adapter.class)
  public enum FolderTypeEnum {
    FOLDER("Folder"),
    
    LOCATION("Location"),
    
    FACTORY("Factory"),
    
    HOUSE("House"),
    
    OFFICE("Office"),
    
    MACHINE("Machine"),
    
    VIRTUAL_METER("VirtualMeter"),
    
    ELECTICITY_FOLDER("ElecticityFolder"),
    
    WATER_FOLDER("WaterFolder"),
    
    HEAT_FOLDER("HeatFolder"),
    
    GAS_FOLDER("GasFolder"),
    
    TEMPERATURE_FOLDER("TemperatureFolder"),
    
    SUN("Sun"),
    
    LIGHT("Light"),
    
    ICE("Ice"),
    
    SOFA("Sofa"),
    
    FOOD("Food"),
    
    COFFEE("Coffee"),
    
    CAR("Car"),
    
    CHARGING_STATION("ChargingStation"),
    
    METER("Meter"),
    
    USER("User"),
    
    TRASH("Trash"),
    
    GRID_PHOTOVOLTAIC_POWER_SYSTEM("GridPhotovoltaicPowerSystem");

    private String value;

    FolderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FolderTypeEnum fromValue(String value) {
      for (FolderTypeEnum b : FolderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FolderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FolderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FolderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FolderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FolderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FOLDER_TYPE = "FolderType";
  @SerializedName(SERIALIZED_NAME_FOLDER_TYPE)
  private FolderTypeEnum folderType;

  public static final String SERIALIZED_NAME_ICON = "Icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METER_SERIAL_NUMBER = "MeterSerialNumber";
  @SerializedName(SERIALIZED_NAME_METER_SERIAL_NUMBER)
  private String meterSerialNumber;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public FolderMenuItem() {
  }

  public FolderMenuItem autoExportSettings(AutoExportSettings autoExportSettings) {
    this.autoExportSettings = autoExportSettings;
    return this;
  }

  /**
   * Get autoExportSettings
   * @return autoExportSettings
   */
  @javax.annotation.Nullable
  public AutoExportSettings getAutoExportSettings() {
    return autoExportSettings;
  }

  public void setAutoExportSettings(AutoExportSettings autoExportSettings) {
    this.autoExportSettings = autoExportSettings;
  }


  public FolderMenuItem children(List<FolderMenuItem> children) {
    this.children = children;
    return this;
  }

  public FolderMenuItem addChildrenItem(FolderMenuItem childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * Children folder menu items (sub folder menu items)
   * @return children
   */
  @javax.annotation.Nullable
  public List<FolderMenuItem> getChildren() {
    return children;
  }

  public void setChildren(List<FolderMenuItem> children) {
    this.children = children;
  }


  public FolderMenuItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Description of the folder
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FolderMenuItem folderType(FolderTypeEnum folderType) {
    this.folderType = folderType;
    return this;
  }

  /**
   * The folder type of the item
   * @return folderType
   */
  @javax.annotation.Nullable
  public FolderTypeEnum getFolderType() {
    return folderType;
  }

  public void setFolderType(FolderTypeEnum folderType) {
    this.folderType = folderType;
  }


  public FolderMenuItem icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The path to the Icon of this folder
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public FolderMenuItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the folder menu item
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FolderMenuItem meterSerialNumber(String meterSerialNumber) {
    this.meterSerialNumber = meterSerialNumber;
    return this;
  }

  /**
   * The serial number if the folder menu item is a meter.               Serial number is handled as a string, as javascript on client side cannot handle long integers properly.
   * @return meterSerialNumber
   */
  @javax.annotation.Nullable
  public String getMeterSerialNumber() {
    return meterSerialNumber;
  }

  public void setMeterSerialNumber(String meterSerialNumber) {
    this.meterSerialNumber = meterSerialNumber;
  }


  public FolderMenuItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the item
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FolderMenuItem userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The ID of the user of this folder (only for foldertype user)
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderMenuItem folderMenuItem = (FolderMenuItem) o;
    return Objects.equals(this.autoExportSettings, folderMenuItem.autoExportSettings) &&
        Objects.equals(this.children, folderMenuItem.children) &&
        Objects.equals(this.description, folderMenuItem.description) &&
        Objects.equals(this.folderType, folderMenuItem.folderType) &&
        Objects.equals(this.icon, folderMenuItem.icon) &&
        Objects.equals(this.id, folderMenuItem.id) &&
        Objects.equals(this.meterSerialNumber, folderMenuItem.meterSerialNumber) &&
        Objects.equals(this.name, folderMenuItem.name) &&
        Objects.equals(this.userId, folderMenuItem.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoExportSettings, children, description, folderType, icon, id, meterSerialNumber, name, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderMenuItem {\n");
    sb.append("    autoExportSettings: ").append(toIndentedString(autoExportSettings)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    folderType: ").append(toIndentedString(folderType)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    meterSerialNumber: ").append(toIndentedString(meterSerialNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoExportSettings");
    openapiFields.add("Children");
    openapiFields.add("Description");
    openapiFields.add("FolderType");
    openapiFields.add("Icon");
    openapiFields.add("Id");
    openapiFields.add("MeterSerialNumber");
    openapiFields.add("Name");
    openapiFields.add("UserId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FolderMenuItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FolderMenuItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderMenuItem is not found in the empty JSON string", FolderMenuItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FolderMenuItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FolderMenuItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AutoExportSettings`
      if (jsonObj.get("AutoExportSettings") != null && !jsonObj.get("AutoExportSettings").isJsonNull()) {
        AutoExportSettings.validateJsonElement(jsonObj.get("AutoExportSettings"));
      }
      if (jsonObj.get("Children") != null && !jsonObj.get("Children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("Children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Children` to be an array in the JSON string but got `%s`", jsonObj.get("Children").toString()));
          }

          // validate the optional field `Children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            FolderMenuItem.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("FolderType") != null && !jsonObj.get("FolderType").isJsonNull()) && !jsonObj.get("FolderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderType").toString()));
      }
      // validate the optional field `FolderType`
      if (jsonObj.get("FolderType") != null && !jsonObj.get("FolderType").isJsonNull()) {
        FolderTypeEnum.validateJsonElement(jsonObj.get("FolderType"));
      }
      if ((jsonObj.get("Icon") != null && !jsonObj.get("Icon").isJsonNull()) && !jsonObj.get("Icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Icon").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MeterSerialNumber") != null && !jsonObj.get("MeterSerialNumber").isJsonNull()) && !jsonObj.get("MeterSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeterSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeterSerialNumber").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderMenuItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderMenuItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderMenuItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderMenuItem.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderMenuItem>() {
           @Override
           public void write(JsonWriter out, FolderMenuItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderMenuItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FolderMenuItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FolderMenuItem
   * @throws IOException if the JSON string is invalid with respect to FolderMenuItem
   */
  public static FolderMenuItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderMenuItem.class);
  }

  /**
   * Convert an instance of FolderMenuItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

