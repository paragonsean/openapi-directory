/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO for the pico charging station settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PicoSettingsDto {
  /**
   * The authentication type
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    NONE("None"),
    
    BACKEND("Backend");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "AuthenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType;

  public static final String SERIALIZED_NAME_CAR_ID_DETECTION = "CarIdDetection";
  @SerializedName(SERIALIZED_NAME_CAR_ID_DETECTION)
  private Boolean carIdDetection;

  public static final String SERIALIZED_NAME_DISPLAY_BRIGHTNESS = "DisplayBrightness";
  @SerializedName(SERIALIZED_NAME_DISPLAY_BRIGHTNESS)
  private byte[] displayBrightness;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_FIX_CABLE_LOCK_ENABLE = "FixCableLockEnable";
  @SerializedName(SERIALIZED_NAME_FIX_CABLE_LOCK_ENABLE)
  private Boolean fixCableLockEnable;

  public static final String SERIALIZED_NAME_IDLE_IMAGE_URL = "IdleImageUrl";
  @SerializedName(SERIALIZED_NAME_IDLE_IMAGE_URL)
  private String idleImageUrl;

  public static final String SERIALIZED_NAME_INTERNAL_IP = "InternalIp";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IP)
  private String internalIp;

  public static final String SERIALIZED_NAME_LOADMANAGEMENT_GROUP_ID = "LoadmanagementGroupId";
  @SerializedName(SERIALIZED_NAME_LOADMANAGEMENT_GROUP_ID)
  private String loadmanagementGroupId;

  public static final String SERIALIZED_NAME_MAX_CURRENT = "MaxCurrent";
  @SerializedName(SERIALIZED_NAME_MAX_CURRENT)
  private Integer maxCurrent;

  public static final String SERIALIZED_NAME_MIN_CURRENT = "MinCurrent";
  @SerializedName(SERIALIZED_NAME_MIN_CURRENT)
  private Integer minCurrent;

  public static final String SERIALIZED_NAME_MODBUS_TCP = "ModbusTcp";
  @SerializedName(SERIALIZED_NAME_MODBUS_TCP)
  private Boolean modbusTcp;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public PicoSettingsDto() {
  }

  public PicoSettingsDto authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * The authentication type
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public PicoSettingsDto carIdDetection(Boolean carIdDetection) {
    this.carIdDetection = carIdDetection;
    return this;
  }

  /**
   * Flag if the car id detection is enabled
   * @return carIdDetection
   */
  @javax.annotation.Nullable
  public Boolean getCarIdDetection() {
    return carIdDetection;
  }

  public void setCarIdDetection(Boolean carIdDetection) {
    this.carIdDetection = carIdDetection;
  }


  public PicoSettingsDto displayBrightness(byte[] displayBrightness) {
    this.displayBrightness = displayBrightness;
    return this;
  }

  /**
   * The Brightness of the LCD Matrix display. 0 &#x3D; minimum, 255 &#x3D; maximum
   * @return displayBrightness
   */
  @javax.annotation.Nullable
  public byte[] getDisplayBrightness() {
    return displayBrightness;
  }

  public void setDisplayBrightness(byte[] displayBrightness) {
    this.displayBrightness = displayBrightness;
  }


  public PicoSettingsDto dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * The DNS name of the pico&#39;s internal ip
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public PicoSettingsDto fixCableLockEnable(Boolean fixCableLockEnable) {
    this.fixCableLockEnable = fixCableLockEnable;
    return this;
  }

  /**
   * Enable the fix lock of the charging cable
   * @return fixCableLockEnable
   */
  @javax.annotation.Nullable
  public Boolean getFixCableLockEnable() {
    return fixCableLockEnable;
  }

  public void setFixCableLockEnable(Boolean fixCableLockEnable) {
    this.fixCableLockEnable = fixCableLockEnable;
  }


  public PicoSettingsDto idleImageUrl(String idleImageUrl) {
    this.idleImageUrl = idleImageUrl;
    return this;
  }

  /**
   * The url of the idle image
   * @return idleImageUrl
   */
  @javax.annotation.Nullable
  public String getIdleImageUrl() {
    return idleImageUrl;
  }

  public void setIdleImageUrl(String idleImageUrl) {
    this.idleImageUrl = idleImageUrl;
  }


  public PicoSettingsDto internalIp(String internalIp) {
    this.internalIp = internalIp;
    return this;
  }

  /**
   * The internal IP address
   * @return internalIp
   */
  @javax.annotation.Nullable
  public String getInternalIp() {
    return internalIp;
  }

  public void setInternalIp(String internalIp) {
    this.internalIp = internalIp;
  }


  public PicoSettingsDto loadmanagementGroupId(String loadmanagementGroupId) {
    this.loadmanagementGroupId = loadmanagementGroupId;
    return this;
  }

  /**
   * The ID of the loadmanagement group
   * @return loadmanagementGroupId
   */
  @javax.annotation.Nullable
  public String getLoadmanagementGroupId() {
    return loadmanagementGroupId;
  }

  public void setLoadmanagementGroupId(String loadmanagementGroupId) {
    this.loadmanagementGroupId = loadmanagementGroupId;
  }


  public PicoSettingsDto maxCurrent(Integer maxCurrent) {
    this.maxCurrent = maxCurrent;
    return this;
  }

  /**
   * The max current of this station (in A)
   * @return maxCurrent
   */
  @javax.annotation.Nullable
  public Integer getMaxCurrent() {
    return maxCurrent;
  }

  public void setMaxCurrent(Integer maxCurrent) {
    this.maxCurrent = maxCurrent;
  }


  public PicoSettingsDto minCurrent(Integer minCurrent) {
    this.minCurrent = minCurrent;
    return this;
  }

  /**
   * The max current of this station (in A)
   * @return minCurrent
   */
  @javax.annotation.Nullable
  public Integer getMinCurrent() {
    return minCurrent;
  }

  public void setMinCurrent(Integer minCurrent) {
    this.minCurrent = minCurrent;
  }


  public PicoSettingsDto modbusTcp(Boolean modbusTcp) {
    this.modbusTcp = modbusTcp;
    return this;
  }

  /**
   * Flag if ModbusTcp is enabled
   * @return modbusTcp
   */
  @javax.annotation.Nullable
  public Boolean getModbusTcp() {
    return modbusTcp;
  }

  public void setModbusTcp(Boolean modbusTcp) {
    this.modbusTcp = modbusTcp;
  }


  public PicoSettingsDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the station
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PicoSettingsDto serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The Serial number of the station
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PicoSettingsDto picoSettingsDto = (PicoSettingsDto) o;
    return Objects.equals(this.authenticationType, picoSettingsDto.authenticationType) &&
        Objects.equals(this.carIdDetection, picoSettingsDto.carIdDetection) &&
        Arrays.equals(this.displayBrightness, picoSettingsDto.displayBrightness) &&
        Objects.equals(this.dnsName, picoSettingsDto.dnsName) &&
        Objects.equals(this.fixCableLockEnable, picoSettingsDto.fixCableLockEnable) &&
        Objects.equals(this.idleImageUrl, picoSettingsDto.idleImageUrl) &&
        Objects.equals(this.internalIp, picoSettingsDto.internalIp) &&
        Objects.equals(this.loadmanagementGroupId, picoSettingsDto.loadmanagementGroupId) &&
        Objects.equals(this.maxCurrent, picoSettingsDto.maxCurrent) &&
        Objects.equals(this.minCurrent, picoSettingsDto.minCurrent) &&
        Objects.equals(this.modbusTcp, picoSettingsDto.modbusTcp) &&
        Objects.equals(this.name, picoSettingsDto.name) &&
        Objects.equals(this.serialNumber, picoSettingsDto.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationType, carIdDetection, Arrays.hashCode(displayBrightness), dnsName, fixCableLockEnable, idleImageUrl, internalIp, loadmanagementGroupId, maxCurrent, minCurrent, modbusTcp, name, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PicoSettingsDto {\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    carIdDetection: ").append(toIndentedString(carIdDetection)).append("\n");
    sb.append("    displayBrightness: ").append(toIndentedString(displayBrightness)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    fixCableLockEnable: ").append(toIndentedString(fixCableLockEnable)).append("\n");
    sb.append("    idleImageUrl: ").append(toIndentedString(idleImageUrl)).append("\n");
    sb.append("    internalIp: ").append(toIndentedString(internalIp)).append("\n");
    sb.append("    loadmanagementGroupId: ").append(toIndentedString(loadmanagementGroupId)).append("\n");
    sb.append("    maxCurrent: ").append(toIndentedString(maxCurrent)).append("\n");
    sb.append("    minCurrent: ").append(toIndentedString(minCurrent)).append("\n");
    sb.append("    modbusTcp: ").append(toIndentedString(modbusTcp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthenticationType");
    openapiFields.add("CarIdDetection");
    openapiFields.add("DisplayBrightness");
    openapiFields.add("DnsName");
    openapiFields.add("FixCableLockEnable");
    openapiFields.add("IdleImageUrl");
    openapiFields.add("InternalIp");
    openapiFields.add("LoadmanagementGroupId");
    openapiFields.add("MaxCurrent");
    openapiFields.add("MinCurrent");
    openapiFields.add("ModbusTcp");
    openapiFields.add("Name");
    openapiFields.add("SerialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PicoSettingsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PicoSettingsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PicoSettingsDto is not found in the empty JSON string", PicoSettingsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PicoSettingsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PicoSettingsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AuthenticationType") != null && !jsonObj.get("AuthenticationType").isJsonNull()) && !jsonObj.get("AuthenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthenticationType").toString()));
      }
      // validate the optional field `AuthenticationType`
      if (jsonObj.get("AuthenticationType") != null && !jsonObj.get("AuthenticationType").isJsonNull()) {
        AuthenticationTypeEnum.validateJsonElement(jsonObj.get("AuthenticationType"));
      }
      if ((jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) && !jsonObj.get("DnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DnsName").toString()));
      }
      if ((jsonObj.get("IdleImageUrl") != null && !jsonObj.get("IdleImageUrl").isJsonNull()) && !jsonObj.get("IdleImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdleImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IdleImageUrl").toString()));
      }
      if ((jsonObj.get("InternalIp") != null && !jsonObj.get("InternalIp").isJsonNull()) && !jsonObj.get("InternalIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InternalIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InternalIp").toString()));
      }
      if ((jsonObj.get("LoadmanagementGroupId") != null && !jsonObj.get("LoadmanagementGroupId").isJsonNull()) && !jsonObj.get("LoadmanagementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoadmanagementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoadmanagementGroupId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) && !jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PicoSettingsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PicoSettingsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PicoSettingsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PicoSettingsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PicoSettingsDto>() {
           @Override
           public void write(JsonWriter out, PicoSettingsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PicoSettingsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PicoSettingsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PicoSettingsDto
   * @throws IOException if the JSON string is invalid with respect to PicoSettingsDto
   */
  public static PicoSettingsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PicoSettingsDto.class);
  }

  /**
   * Convert an instance of PicoSettingsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

