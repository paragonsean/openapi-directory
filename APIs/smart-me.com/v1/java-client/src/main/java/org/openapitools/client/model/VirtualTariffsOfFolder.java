/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VirtualTariff;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualTariffsOfFolder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualTariffsOfFolder {
  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_FOLDER_ID = "FolderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VIRTUAL_TARIFFS = "VirtualTariffs";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_TARIFFS)
  private List<VirtualTariff> virtualTariffs = new ArrayList<>();

  public VirtualTariffsOfFolder() {
  }

  public VirtualTariffsOfFolder(
     OffsetDateTime date, 
     String folderId, 
     String name, 
     List<VirtualTariff> virtualTariffs
  ) {
    this();
    this.date = date;
    this.folderId = folderId;
    this.name = name;
    this.virtualTariffs = virtualTariffs;
  }

  /**
   * The DateTime (UTC) of this virtual tarfifs
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }



  /**
   * Get folderId
   * @return folderId
   */
  @javax.annotation.Nullable
  public String getFolderId() {
    return folderId;
  }



  /**
   * The name of this folder
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get virtualTariffs
   * @return virtualTariffs
   */
  @javax.annotation.Nullable
  public List<VirtualTariff> getVirtualTariffs() {
    return virtualTariffs;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualTariffsOfFolder virtualTariffsOfFolder = (VirtualTariffsOfFolder) o;
    return Objects.equals(this.date, virtualTariffsOfFolder.date) &&
        Objects.equals(this.folderId, virtualTariffsOfFolder.folderId) &&
        Objects.equals(this.name, virtualTariffsOfFolder.name) &&
        Objects.equals(this.virtualTariffs, virtualTariffsOfFolder.virtualTariffs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, folderId, name, virtualTariffs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualTariffsOfFolder {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    virtualTariffs: ").append(toIndentedString(virtualTariffs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Date");
    openapiFields.add("FolderId");
    openapiFields.add("Name");
    openapiFields.add("VirtualTariffs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualTariffsOfFolder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualTariffsOfFolder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualTariffsOfFolder is not found in the empty JSON string", VirtualTariffsOfFolder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualTariffsOfFolder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualTariffsOfFolder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FolderId") != null && !jsonObj.get("FolderId").isJsonNull()) && !jsonObj.get("FolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("VirtualTariffs") != null && !jsonObj.get("VirtualTariffs").isJsonNull()) {
        JsonArray jsonArrayvirtualTariffs = jsonObj.getAsJsonArray("VirtualTariffs");
        if (jsonArrayvirtualTariffs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("VirtualTariffs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `VirtualTariffs` to be an array in the JSON string but got `%s`", jsonObj.get("VirtualTariffs").toString()));
          }

          // validate the optional field `VirtualTariffs` (array)
          for (int i = 0; i < jsonArrayvirtualTariffs.size(); i++) {
            VirtualTariff.validateJsonElement(jsonArrayvirtualTariffs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualTariffsOfFolder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualTariffsOfFolder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualTariffsOfFolder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualTariffsOfFolder.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualTariffsOfFolder>() {
           @Override
           public void write(JsonWriter out, VirtualTariffsOfFolder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualTariffsOfFolder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualTariffsOfFolder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualTariffsOfFolder
   * @throws IOException if the JSON string is invalid with respect to VirtualTariffsOfFolder
   */
  public static VirtualTariffsOfFolder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualTariffsOfFolder.class);
  }

  /**
   * Convert an instance of VirtualTariffsOfFolder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

