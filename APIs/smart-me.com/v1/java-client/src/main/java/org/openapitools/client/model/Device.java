/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Class for the Web API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Device {
  public static final String SERIALIZED_NAME_ACTIVE_POWER = "ActivePower";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER)
  private Double activePower;

  public static final String SERIALIZED_NAME_ACTIVE_POWER_L1 = "ActivePowerL1";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER_L1)
  private Double activePowerL1;

  public static final String SERIALIZED_NAME_ACTIVE_POWER_L2 = "ActivePowerL2";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER_L2)
  private Double activePowerL2;

  public static final String SERIALIZED_NAME_ACTIVE_POWER_L3 = "ActivePowerL3";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER_L3)
  private Double activePowerL3;

  public static final String SERIALIZED_NAME_ACTIVE_POWER_UNIT = "ActivePowerUnit";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER_UNIT)
  private String activePowerUnit;

  public static final String SERIALIZED_NAME_ACTIVE_TARIFF = "ActiveTariff";
  @SerializedName(SERIALIZED_NAME_ACTIVE_TARIFF)
  private Integer activeTariff;

  public static final String SERIALIZED_NAME_ADDITIONAL_METER_SERIAL_NUMBER = "AdditionalMeterSerialNumber";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METER_SERIAL_NUMBER)
  private String additionalMeterSerialNumber;

  public static final String SERIALIZED_NAME_ANALOG_OUTPUT1 = "AnalogOutput1";
  @SerializedName(SERIALIZED_NAME_ANALOG_OUTPUT1)
  private Integer analogOutput1;

  public static final String SERIALIZED_NAME_ANALOG_OUTPUT2 = "AnalogOutput2";
  @SerializedName(SERIALIZED_NAME_ANALOG_OUTPUT2)
  private Integer analogOutput2;

  /**
   * The state of a pico charging station. (Only available for pico charging stations)
   */
  @JsonAdapter(ChargingStationStateEnum.Adapter.class)
  public enum ChargingStationStateEnum {
    BOOTING("Booting"),
    
    READY_NO_CAR_CONNECTED("ReadyNoCarConnected"),
    
    READY_CAR_CONNECTED("ReadyCarConnected"),
    
    STARTED_WAIT_FOR_CAR("StartedWaitForCar"),
    
    CHARGING("Charging"),
    
    INSTALLATION("Installation"),
    
    AUTHORIZE("Authorize"),
    
    OFFLINE("Offline");

    private String value;

    ChargingStationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargingStationStateEnum fromValue(String value) {
      for (ChargingStationStateEnum b : ChargingStationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargingStationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargingStationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargingStationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargingStationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChargingStationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHARGING_STATION_STATE = "ChargingStationState";
  @SerializedName(SERIALIZED_NAME_CHARGING_STATION_STATE)
  private ChargingStationStateEnum chargingStationState;

  public static final String SERIALIZED_NAME_COUNTER_READING = "CounterReading";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING)
  private Double counterReading;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT = "CounterReadingExport";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT)
  private Double counterReadingExport;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT = "CounterReadingImport";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT)
  private Double counterReadingImport;

  public static final String SERIALIZED_NAME_COUNTER_READING_T1 = "CounterReadingT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T1)
  private Double counterReadingT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_T2 = "CounterReadingT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T2)
  private Double counterReadingT2;

  public static final String SERIALIZED_NAME_COUNTER_READING_T3 = "CounterReadingT3";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T3)
  private Double counterReadingT3;

  public static final String SERIALIZED_NAME_COUNTER_READING_T4 = "CounterReadingT4";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T4)
  private Double counterReadingT4;

  public static final String SERIALIZED_NAME_COUNTER_READING_UNIT = "CounterReadingUnit";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_UNIT)
  private String counterReadingUnit;

  public static final String SERIALIZED_NAME_CURRENT = "Current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Double current;

  public static final String SERIALIZED_NAME_CURRENT_L1 = "CurrentL1";
  @SerializedName(SERIALIZED_NAME_CURRENT_L1)
  private Double currentL1;

  public static final String SERIALIZED_NAME_CURRENT_L2 = "CurrentL2";
  @SerializedName(SERIALIZED_NAME_CURRENT_L2)
  private Double currentL2;

  public static final String SERIALIZED_NAME_CURRENT_L3 = "CurrentL3";
  @SerializedName(SERIALIZED_NAME_CURRENT_L3)
  private Double currentL3;

  /**
   * The Energy Type of this device
   */
  @JsonAdapter(DeviceEnergyTypeEnum.Adapter.class)
  public enum DeviceEnergyTypeEnum {
    METER_TYPE_UNKNOWN("MeterTypeUnknown"),
    
    METER_TYPE_ELECTRICITY("MeterTypeElectricity"),
    
    METER_TYPE_WATER("MeterTypeWater"),
    
    METER_TYPE_GAS("MeterTypeGas"),
    
    METER_TYPE_HEAT("MeterTypeHeat"),
    
    METER_TYPE_HCA("MeterTypeHCA"),
    
    METER_TYPE_ALL_METERS("MeterTypeAllMeters"),
    
    METER_TYPE_TEMPERATURE("MeterTypeTemperature"),
    
    METER_TYPE_M_BUS_GATEWAY("MeterTypeMBusGateway"),
    
    METER_TYPE_RS485_GATEWAY("MeterTypeRS485Gateway"),
    
    METER_TYPE_CUSTOM_DEVICE("MeterTypeCustomDevice"),
    
    METER_TYPE_COMPRESSED_AIR("MeterTypeCompressedAir"),
    
    METER_TYPE_SOLAR_LOG("MeterTypeSolarLog"),
    
    METER_TYPE_VIRTUAL_METER("MeterTypeVirtualMeter"),
    
    METER_TYPE_WM_BUS_GATEWAY("MeterTypeWMBusGateway");

    private String value;

    DeviceEnergyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceEnergyTypeEnum fromValue(String value) {
      for (DeviceEnergyTypeEnum b : DeviceEnergyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceEnergyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceEnergyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceEnergyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceEnergyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceEnergyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_ENERGY_TYPE = "DeviceEnergyType";
  @SerializedName(SERIALIZED_NAME_DEVICE_ENERGY_TYPE)
  private DeviceEnergyTypeEnum deviceEnergyType;

  public static final String SERIALIZED_NAME_DIGITAL_INPUT1 = "DigitalInput1";
  @SerializedName(SERIALIZED_NAME_DIGITAL_INPUT1)
  private Boolean digitalInput1;

  public static final String SERIALIZED_NAME_DIGITAL_INPUT2 = "DigitalInput2";
  @SerializedName(SERIALIZED_NAME_DIGITAL_INPUT2)
  private Boolean digitalInput2;

  public static final String SERIALIZED_NAME_DIGITAL_OUTPUT1 = "DigitalOutput1";
  @SerializedName(SERIALIZED_NAME_DIGITAL_OUTPUT1)
  private Boolean digitalOutput1;

  public static final String SERIALIZED_NAME_DIGITAL_OUTPUT2 = "DigitalOutput2";
  @SerializedName(SERIALIZED_NAME_DIGITAL_OUTPUT2)
  private Boolean digitalOutput2;

  /**
   * The Family Type of the device.
   */
  @JsonAdapter(FamilyTypeEnum.Adapter.class)
  public enum FamilyTypeEnum {
    METER_FAMILY_TYPE_UNKNOWN("MeterFamilyTypeUnknown"),
    
    METER_FAMILY_TYPE_SMART_ME_CONNECT_V1("MeterFamilyTypeSmartMeConnectV1"),
    
    METER_FAMILIY_TYPE_SMART_ME_METER("MeterFamiliyTypeSmartMeMeter"),
    
    METER_FAMILIY_TYPE_SMART_ME_METER_WITH_SWITCH("MeterFamiliyTypeSmartMeMeterWithSwitch"),
    
    METER_FAMILY_TYPE_M_BUS_GATEWAY_V1("MeterFamilyTypeMBusGatewayV1"),
    
    METER_FAMILY_TYPE_RS485_GATEWAY_V1("MeterFamilyTypeRS485GatewayV1"),
    
    METER_FAMILY_TYPE_KAMSTRUP_MODULE("MeterFamilyTypeKamstrupModule"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_METER80_A("MeterFamilyTypeSmartMe3PhaseMeter80A"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_METER32_A("MeterFamilyTypeSmartMe3PhaseMeter32A"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR_TRANSFORMER("MeterFamilyTypeSmartMe3PhaseTelstarTransformer"),
    
    METER_FAMILY_TYPE_LANDIS_GYR_MODULE("MeterFamilyTypeLandisGyrModule"),
    
    METER_FAMILY_TYPE_FNN_OPTICAL_MODULE("MeterFamilyTypeFnnOpticalModule"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR80_AWI_FI("MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR80_A_MOBILE("MeterFamilyTypeSmartMe3PhaseTelstar80AMobile"),
    
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER80_AV2_WI_FI("MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi"),
    
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER32_AV2_WI_FI("MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi"),
    
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER80_A_GPRS("MeterFamilyTypeSmartMe1PhaseMeter80AGprs"),
    
    METER_FAMILY_TYPE_SMART_ME1_PHASE_METER32_A_GPRS("MeterFamilyTypeSmartMe1PhaseMeter32AGprs"),
    
    METER_FAMILY_TYPE_WM_BUS_GATEWAY_V1("MeterFamilyTypeWMBusGatewayV1"),
    
    METER_FAMILY_TYPE_SMART_ME3_PHASE_TELSTAR_TRANSFORMER_MOBILE("MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile"),
    
    METER_FAMILY_TYPE_MITHRAL_HALL_V1("MeterFamilyTypeMithralHallV1"),
    
    METER_FAMILY_TYPE_REST_API_METER("MeterFamilyTypeRestApiMeter"),
    
    METER_FAMILY_TYPE_VIRTUAL_BILLING_METER("MeterFamilyTypeVirtualBillingMeter");

    private String value;

    FamilyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FamilyTypeEnum fromValue(String value) {
      for (FamilyTypeEnum b : FamilyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FamilyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FamilyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FamilyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FamilyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FamilyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAMILY_TYPE = "FamilyType";
  @SerializedName(SERIALIZED_NAME_FAMILY_TYPE)
  private FamilyTypeEnum familyType;

  public static final String SERIALIZED_NAME_FLOW_RATE = "FlowRate";
  @SerializedName(SERIALIZED_NAME_FLOW_RATE)
  private Double flowRate;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The sub meter type (e.g. warmwater or coldwater)
   */
  @JsonAdapter(MeterSubTypeEnum.Adapter.class)
  public enum MeterSubTypeEnum {
    METER_SUB_TYPE_UNKNOWN("MeterSubTypeUnknown"),
    
    METER_SUB_TYPE_COLD("MeterSubTypeCold"),
    
    METER_SUB_TYPE_HEAT("MeterSubTypeHeat"),
    
    METER_SUB_TYPE_CHARGING_STATION("MeterSubTypeChargingStation"),
    
    METER_SUB_TYPE_ELECTRICITY("MeterSubTypeElectricity"),
    
    METER_SUB_TYPE_WATER("MeterSubTypeWater"),
    
    METER_SUB_TYPE_GAS("MeterSubTypeGas"),
    
    METER_SUB_TYPE_ELECTRICITY_HEAT("MeterSubTypeElectricityHeat"),
    
    METER_SUB_TYPE_TEMPERATURE("MeterSubTypeTemperature"),
    
    METER_SUB_TYPE_VIRTUAL_BATTERY("MeterSubTypeVirtualBattery");

    private String value;

    MeterSubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeterSubTypeEnum fromValue(String value) {
      for (MeterSubTypeEnum b : MeterSubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeterSubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeterSubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeterSubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeterSubTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeterSubTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METER_SUB_TYPE = "MeterSubType";
  @SerializedName(SERIALIZED_NAME_METER_SUB_TYPE)
  private MeterSubTypeEnum meterSubType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POWER_FACTOR = "PowerFactor";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR)
  private Double powerFactor;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L1 = "PowerFactorL1";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L1)
  private Double powerFactorL1;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L2 = "PowerFactorL2";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L2)
  private Double powerFactorL2;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L3 = "PowerFactorL3";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L3)
  private Double powerFactorL3;

  public static final String SERIALIZED_NAME_SERIAL = "Serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private Long serial;

  public static final String SERIALIZED_NAME_SWITCH_ON = "SwitchOn";
  @SerializedName(SERIALIZED_NAME_SWITCH_ON)
  private Boolean switchOn;

  public static final String SERIALIZED_NAME_SWITCH_PHASE_L1_ON = "SwitchPhaseL1On";
  @SerializedName(SERIALIZED_NAME_SWITCH_PHASE_L1_ON)
  private Boolean switchPhaseL1On;

  public static final String SERIALIZED_NAME_SWITCH_PHASE_L2_ON = "SwitchPhaseL2On";
  @SerializedName(SERIALIZED_NAME_SWITCH_PHASE_L2_ON)
  private Boolean switchPhaseL2On;

  public static final String SERIALIZED_NAME_SWITCH_PHASE_L3_ON = "SwitchPhaseL3On";
  @SerializedName(SERIALIZED_NAME_SWITCH_PHASE_L3_ON)
  private Boolean switchPhaseL3On;

  public static final String SERIALIZED_NAME_TEMPERATURE = "Temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature;

  public static final String SERIALIZED_NAME_VALUE_DATE = "ValueDate";
  @SerializedName(SERIALIZED_NAME_VALUE_DATE)
  private OffsetDateTime valueDate;

  public static final String SERIALIZED_NAME_VOLTAGE = "Voltage";
  @SerializedName(SERIALIZED_NAME_VOLTAGE)
  private Double voltage;

  public static final String SERIALIZED_NAME_VOLTAGE_L1 = "VoltageL1";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L1)
  private Double voltageL1;

  public static final String SERIALIZED_NAME_VOLTAGE_L2 = "VoltageL2";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L2)
  private Double voltageL2;

  public static final String SERIALIZED_NAME_VOLTAGE_L3 = "VoltageL3";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L3)
  private Double voltageL3;

  public Device() {
  }

  public Device activePower(Double activePower) {
    this.activePower = activePower;
    return this;
  }

  /**
   * The Actvie Power or current flow rate
   * @return activePower
   */
  @javax.annotation.Nullable
  public Double getActivePower() {
    return activePower;
  }

  public void setActivePower(Double activePower) {
    this.activePower = activePower;
  }


  public Device activePowerL1(Double activePowerL1) {
    this.activePowerL1 = activePowerL1;
    return this;
  }

  /**
   * The Actvie Power Phase L1
   * @return activePowerL1
   */
  @javax.annotation.Nullable
  public Double getActivePowerL1() {
    return activePowerL1;
  }

  public void setActivePowerL1(Double activePowerL1) {
    this.activePowerL1 = activePowerL1;
  }


  public Device activePowerL2(Double activePowerL2) {
    this.activePowerL2 = activePowerL2;
    return this;
  }

  /**
   * The Actvie Power Phase L2
   * @return activePowerL2
   */
  @javax.annotation.Nullable
  public Double getActivePowerL2() {
    return activePowerL2;
  }

  public void setActivePowerL2(Double activePowerL2) {
    this.activePowerL2 = activePowerL2;
  }


  public Device activePowerL3(Double activePowerL3) {
    this.activePowerL3 = activePowerL3;
    return this;
  }

  /**
   * The Actvie Power Phase L3
   * @return activePowerL3
   */
  @javax.annotation.Nullable
  public Double getActivePowerL3() {
    return activePowerL3;
  }

  public void setActivePowerL3(Double activePowerL3) {
    this.activePowerL3 = activePowerL3;
  }


  public Device activePowerUnit(String activePowerUnit) {
    this.activePowerUnit = activePowerUnit;
    return this;
  }

  /**
   * The Unit of the Active Power Value
   * @return activePowerUnit
   */
  @javax.annotation.Nullable
  public String getActivePowerUnit() {
    return activePowerUnit;
  }

  public void setActivePowerUnit(String activePowerUnit) {
    this.activePowerUnit = activePowerUnit;
  }


  public Device activeTariff(Integer activeTariff) {
    this.activeTariff = activeTariff;
    return this;
  }

  /**
   * The Number of the Active Tariff
   * @return activeTariff
   */
  @javax.annotation.Nullable
  public Integer getActiveTariff() {
    return activeTariff;
  }

  public void setActiveTariff(Integer activeTariff) {
    this.activeTariff = activeTariff;
  }


  public Device additionalMeterSerialNumber(String additionalMeterSerialNumber) {
    this.additionalMeterSerialNumber = additionalMeterSerialNumber;
    return this;
  }

  /**
   * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
   * @return additionalMeterSerialNumber
   */
  @javax.annotation.Nullable
  public String getAdditionalMeterSerialNumber() {
    return additionalMeterSerialNumber;
  }

  public void setAdditionalMeterSerialNumber(String additionalMeterSerialNumber) {
    this.additionalMeterSerialNumber = additionalMeterSerialNumber;
  }


  public Device analogOutput1(Integer analogOutput1) {
    this.analogOutput1 = analogOutput1;
    return this;
  }

  /**
   * The analog output number 1 (PWM signal) (0 - 32183)
   * @return analogOutput1
   */
  @javax.annotation.Nullable
  public Integer getAnalogOutput1() {
    return analogOutput1;
  }

  public void setAnalogOutput1(Integer analogOutput1) {
    this.analogOutput1 = analogOutput1;
  }


  public Device analogOutput2(Integer analogOutput2) {
    this.analogOutput2 = analogOutput2;
    return this;
  }

  /**
   * The analog output number 2 (PWM signal) (0 - 32183)
   * @return analogOutput2
   */
  @javax.annotation.Nullable
  public Integer getAnalogOutput2() {
    return analogOutput2;
  }

  public void setAnalogOutput2(Integer analogOutput2) {
    this.analogOutput2 = analogOutput2;
  }


  public Device chargingStationState(ChargingStationStateEnum chargingStationState) {
    this.chargingStationState = chargingStationState;
    return this;
  }

  /**
   * The state of a pico charging station. (Only available for pico charging stations)
   * @return chargingStationState
   */
  @javax.annotation.Nullable
  public ChargingStationStateEnum getChargingStationState() {
    return chargingStationState;
  }

  public void setChargingStationState(ChargingStationStateEnum chargingStationState) {
    this.chargingStationState = chargingStationState;
  }


  public Device counterReading(Double counterReading) {
    this.counterReading = counterReading;
    return this;
  }

  /**
   * The Meter Counter Reading (Total Energy used)
   * @return counterReading
   */
  @javax.annotation.Nullable
  public Double getCounterReading() {
    return counterReading;
  }

  public void setCounterReading(Double counterReading) {
    this.counterReading = counterReading;
  }


  public Device counterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
    return this;
  }

  /**
   * The Meter Counter Reading only export
   * @return counterReadingExport
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExport() {
    return counterReadingExport;
  }

  public void setCounterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
  }


  public Device counterReadingImport(Double counterReadingImport) {
    this.counterReadingImport = counterReadingImport;
    return this;
  }

  /**
   * The Meter Counter Reading only import
   * @return counterReadingImport
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImport() {
    return counterReadingImport;
  }

  public void setCounterReadingImport(Double counterReadingImport) {
    this.counterReadingImport = counterReadingImport;
  }


  public Device counterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 1
   * @return counterReadingT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT1() {
    return counterReadingT1;
  }

  public void setCounterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
  }


  public Device counterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 2
   * @return counterReadingT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT2() {
    return counterReadingT2;
  }

  public void setCounterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
  }


  public Device counterReadingT3(Double counterReadingT3) {
    this.counterReadingT3 = counterReadingT3;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 3
   * @return counterReadingT3
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT3() {
    return counterReadingT3;
  }

  public void setCounterReadingT3(Double counterReadingT3) {
    this.counterReadingT3 = counterReadingT3;
  }


  public Device counterReadingT4(Double counterReadingT4) {
    this.counterReadingT4 = counterReadingT4;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 4
   * @return counterReadingT4
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT4() {
    return counterReadingT4;
  }

  public void setCounterReadingT4(Double counterReadingT4) {
    this.counterReadingT4 = counterReadingT4;
  }


  public Device counterReadingUnit(String counterReadingUnit) {
    this.counterReadingUnit = counterReadingUnit;
    return this;
  }

  /**
   * The Unit of the Counter Reading
   * @return counterReadingUnit
   */
  @javax.annotation.Nullable
  public String getCounterReadingUnit() {
    return counterReadingUnit;
  }

  public void setCounterReadingUnit(String counterReadingUnit) {
    this.counterReadingUnit = counterReadingUnit;
  }


  public Device current(Double current) {
    this.current = current;
    return this;
  }

  /**
   * The Current (in A)
   * @return current
   */
  @javax.annotation.Nullable
  public Double getCurrent() {
    return current;
  }

  public void setCurrent(Double current) {
    this.current = current;
  }


  public Device currentL1(Double currentL1) {
    this.currentL1 = currentL1;
    return this;
  }

  /**
   * The Current Phase L1 (in A)
   * @return currentL1
   */
  @javax.annotation.Nullable
  public Double getCurrentL1() {
    return currentL1;
  }

  public void setCurrentL1(Double currentL1) {
    this.currentL1 = currentL1;
  }


  public Device currentL2(Double currentL2) {
    this.currentL2 = currentL2;
    return this;
  }

  /**
   * The Current Phase L2 (in A)
   * @return currentL2
   */
  @javax.annotation.Nullable
  public Double getCurrentL2() {
    return currentL2;
  }

  public void setCurrentL2(Double currentL2) {
    this.currentL2 = currentL2;
  }


  public Device currentL3(Double currentL3) {
    this.currentL3 = currentL3;
    return this;
  }

  /**
   * The Current Phase L3 (in A)
   * @return currentL3
   */
  @javax.annotation.Nullable
  public Double getCurrentL3() {
    return currentL3;
  }

  public void setCurrentL3(Double currentL3) {
    this.currentL3 = currentL3;
  }


  public Device deviceEnergyType(DeviceEnergyTypeEnum deviceEnergyType) {
    this.deviceEnergyType = deviceEnergyType;
    return this;
  }

  /**
   * The Energy Type of this device
   * @return deviceEnergyType
   */
  @javax.annotation.Nullable
  public DeviceEnergyTypeEnum getDeviceEnergyType() {
    return deviceEnergyType;
  }

  public void setDeviceEnergyType(DeviceEnergyTypeEnum deviceEnergyType) {
    this.deviceEnergyType = deviceEnergyType;
  }


  public Device digitalInput1(Boolean digitalInput1) {
    this.digitalInput1 = digitalInput1;
    return this;
  }

  /**
   * The digital input number 1
   * @return digitalInput1
   */
  @javax.annotation.Nullable
  public Boolean getDigitalInput1() {
    return digitalInput1;
  }

  public void setDigitalInput1(Boolean digitalInput1) {
    this.digitalInput1 = digitalInput1;
  }


  public Device digitalInput2(Boolean digitalInput2) {
    this.digitalInput2 = digitalInput2;
    return this;
  }

  /**
   * The digital input number 2
   * @return digitalInput2
   */
  @javax.annotation.Nullable
  public Boolean getDigitalInput2() {
    return digitalInput2;
  }

  public void setDigitalInput2(Boolean digitalInput2) {
    this.digitalInput2 = digitalInput2;
  }


  public Device digitalOutput1(Boolean digitalOutput1) {
    this.digitalOutput1 = digitalOutput1;
    return this;
  }

  /**
   * The digital output number 1
   * @return digitalOutput1
   */
  @javax.annotation.Nullable
  public Boolean getDigitalOutput1() {
    return digitalOutput1;
  }

  public void setDigitalOutput1(Boolean digitalOutput1) {
    this.digitalOutput1 = digitalOutput1;
  }


  public Device digitalOutput2(Boolean digitalOutput2) {
    this.digitalOutput2 = digitalOutput2;
    return this;
  }

  /**
   * The digital output number 2
   * @return digitalOutput2
   */
  @javax.annotation.Nullable
  public Boolean getDigitalOutput2() {
    return digitalOutput2;
  }

  public void setDigitalOutput2(Boolean digitalOutput2) {
    this.digitalOutput2 = digitalOutput2;
  }


  public Device familyType(FamilyTypeEnum familyType) {
    this.familyType = familyType;
    return this;
  }

  /**
   * The Family Type of the device.
   * @return familyType
   */
  @javax.annotation.Nullable
  public FamilyTypeEnum getFamilyType() {
    return familyType;
  }

  public void setFamilyType(FamilyTypeEnum familyType) {
    this.familyType = familyType;
  }


  public Device flowRate(Double flowRate) {
    this.flowRate = flowRate;
    return this;
  }

  /**
   * The current flow rate (e.g. m3/h)
   * @return flowRate
   */
  @javax.annotation.Nullable
  public Double getFlowRate() {
    return flowRate;
  }

  public void setFlowRate(Double flowRate) {
    this.flowRate = flowRate;
  }


  public Device id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the device
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Device meterSubType(MeterSubTypeEnum meterSubType) {
    this.meterSubType = meterSubType;
    return this;
  }

  /**
   * The sub meter type (e.g. warmwater or coldwater)
   * @return meterSubType
   */
  @javax.annotation.Nullable
  public MeterSubTypeEnum getMeterSubType() {
    return meterSubType;
  }

  public void setMeterSubType(MeterSubTypeEnum meterSubType) {
    this.meterSubType = meterSubType;
  }


  public Device name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the Device
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Device powerFactor(Double powerFactor) {
    this.powerFactor = powerFactor;
    return this;
  }

  /**
   * The Power Factor (cos phi). Range: 0 - 1
   * @return powerFactor
   */
  @javax.annotation.Nullable
  public Double getPowerFactor() {
    return powerFactor;
  }

  public void setPowerFactor(Double powerFactor) {
    this.powerFactor = powerFactor;
  }


  public Device powerFactorL1(Double powerFactorL1) {
    this.powerFactorL1 = powerFactorL1;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L1. Range: 0 - 1
   * @return powerFactorL1
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL1() {
    return powerFactorL1;
  }

  public void setPowerFactorL1(Double powerFactorL1) {
    this.powerFactorL1 = powerFactorL1;
  }


  public Device powerFactorL2(Double powerFactorL2) {
    this.powerFactorL2 = powerFactorL2;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L2. Range: 0 - 1
   * @return powerFactorL2
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL2() {
    return powerFactorL2;
  }

  public void setPowerFactorL2(Double powerFactorL2) {
    this.powerFactorL2 = powerFactorL2;
  }


  public Device powerFactorL3(Double powerFactorL3) {
    this.powerFactorL3 = powerFactorL3;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L3. Range: 0 - 1
   * @return powerFactorL3
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL3() {
    return powerFactorL3;
  }

  public void setPowerFactorL3(Double powerFactorL3) {
    this.powerFactorL3 = powerFactorL3;
  }


  public Device serial(Long serial) {
    this.serial = serial;
    return this;
  }

  /**
   * The Serial number
   * @return serial
   */
  @javax.annotation.Nullable
  public Long getSerial() {
    return serial;
  }

  public void setSerial(Long serial) {
    this.serial = serial;
  }


  public Device switchOn(Boolean switchOn) {
    this.switchOn = switchOn;
    return this;
  }

  /**
   * Flag if the Switch is on on this device.
   * @return switchOn
   */
  @javax.annotation.Nullable
  public Boolean getSwitchOn() {
    return switchOn;
  }

  public void setSwitchOn(Boolean switchOn) {
    this.switchOn = switchOn;
  }


  public Device switchPhaseL1On(Boolean switchPhaseL1On) {
    this.switchPhaseL1On = switchPhaseL1On;
    return this;
  }

  /**
   * Flag if the Phase L1 is on on this device.
   * @return switchPhaseL1On
   */
  @javax.annotation.Nullable
  public Boolean getSwitchPhaseL1On() {
    return switchPhaseL1On;
  }

  public void setSwitchPhaseL1On(Boolean switchPhaseL1On) {
    this.switchPhaseL1On = switchPhaseL1On;
  }


  public Device switchPhaseL2On(Boolean switchPhaseL2On) {
    this.switchPhaseL2On = switchPhaseL2On;
    return this;
  }

  /**
   * Flag if the Phase L2 is on on this device.
   * @return switchPhaseL2On
   */
  @javax.annotation.Nullable
  public Boolean getSwitchPhaseL2On() {
    return switchPhaseL2On;
  }

  public void setSwitchPhaseL2On(Boolean switchPhaseL2On) {
    this.switchPhaseL2On = switchPhaseL2On;
  }


  public Device switchPhaseL3On(Boolean switchPhaseL3On) {
    this.switchPhaseL3On = switchPhaseL3On;
    return this;
  }

  /**
   * Flag if the Phase L3 is on on this device.
   * @return switchPhaseL3On
   */
  @javax.annotation.Nullable
  public Boolean getSwitchPhaseL3On() {
    return switchPhaseL3On;
  }

  public void setSwitchPhaseL3On(Boolean switchPhaseL3On) {
    this.switchPhaseL3On = switchPhaseL3On;
  }


  public Device temperature(Double temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * The Temperature (in degree celsius)
   * @return temperature
   */
  @javax.annotation.Nullable
  public Double getTemperature() {
    return temperature;
  }

  public void setTemperature(Double temperature) {
    this.temperature = temperature;
  }


  public Device valueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
    return this;
  }

  /**
   * Time of last successful connection the the smart-me Cloud.
   * @return valueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueDate() {
    return valueDate;
  }

  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }


  public Device voltage(Double voltage) {
    this.voltage = voltage;
    return this;
  }

  /**
   * The Voltage (in V)
   * @return voltage
   */
  @javax.annotation.Nullable
  public Double getVoltage() {
    return voltage;
  }

  public void setVoltage(Double voltage) {
    this.voltage = voltage;
  }


  public Device voltageL1(Double voltageL1) {
    this.voltageL1 = voltageL1;
    return this;
  }

  /**
   * The Voltage Phase L1 (in V)
   * @return voltageL1
   */
  @javax.annotation.Nullable
  public Double getVoltageL1() {
    return voltageL1;
  }

  public void setVoltageL1(Double voltageL1) {
    this.voltageL1 = voltageL1;
  }


  public Device voltageL2(Double voltageL2) {
    this.voltageL2 = voltageL2;
    return this;
  }

  /**
   * The Voltage Phase L2 (in V)
   * @return voltageL2
   */
  @javax.annotation.Nullable
  public Double getVoltageL2() {
    return voltageL2;
  }

  public void setVoltageL2(Double voltageL2) {
    this.voltageL2 = voltageL2;
  }


  public Device voltageL3(Double voltageL3) {
    this.voltageL3 = voltageL3;
    return this;
  }

  /**
   * The Voltage Phase L3 (in V)
   * @return voltageL3
   */
  @javax.annotation.Nullable
  public Double getVoltageL3() {
    return voltageL3;
  }

  public void setVoltageL3(Double voltageL3) {
    this.voltageL3 = voltageL3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.activePower, device.activePower) &&
        Objects.equals(this.activePowerL1, device.activePowerL1) &&
        Objects.equals(this.activePowerL2, device.activePowerL2) &&
        Objects.equals(this.activePowerL3, device.activePowerL3) &&
        Objects.equals(this.activePowerUnit, device.activePowerUnit) &&
        Objects.equals(this.activeTariff, device.activeTariff) &&
        Objects.equals(this.additionalMeterSerialNumber, device.additionalMeterSerialNumber) &&
        Objects.equals(this.analogOutput1, device.analogOutput1) &&
        Objects.equals(this.analogOutput2, device.analogOutput2) &&
        Objects.equals(this.chargingStationState, device.chargingStationState) &&
        Objects.equals(this.counterReading, device.counterReading) &&
        Objects.equals(this.counterReadingExport, device.counterReadingExport) &&
        Objects.equals(this.counterReadingImport, device.counterReadingImport) &&
        Objects.equals(this.counterReadingT1, device.counterReadingT1) &&
        Objects.equals(this.counterReadingT2, device.counterReadingT2) &&
        Objects.equals(this.counterReadingT3, device.counterReadingT3) &&
        Objects.equals(this.counterReadingT4, device.counterReadingT4) &&
        Objects.equals(this.counterReadingUnit, device.counterReadingUnit) &&
        Objects.equals(this.current, device.current) &&
        Objects.equals(this.currentL1, device.currentL1) &&
        Objects.equals(this.currentL2, device.currentL2) &&
        Objects.equals(this.currentL3, device.currentL3) &&
        Objects.equals(this.deviceEnergyType, device.deviceEnergyType) &&
        Objects.equals(this.digitalInput1, device.digitalInput1) &&
        Objects.equals(this.digitalInput2, device.digitalInput2) &&
        Objects.equals(this.digitalOutput1, device.digitalOutput1) &&
        Objects.equals(this.digitalOutput2, device.digitalOutput2) &&
        Objects.equals(this.familyType, device.familyType) &&
        Objects.equals(this.flowRate, device.flowRate) &&
        Objects.equals(this.id, device.id) &&
        Objects.equals(this.meterSubType, device.meterSubType) &&
        Objects.equals(this.name, device.name) &&
        Objects.equals(this.powerFactor, device.powerFactor) &&
        Objects.equals(this.powerFactorL1, device.powerFactorL1) &&
        Objects.equals(this.powerFactorL2, device.powerFactorL2) &&
        Objects.equals(this.powerFactorL3, device.powerFactorL3) &&
        Objects.equals(this.serial, device.serial) &&
        Objects.equals(this.switchOn, device.switchOn) &&
        Objects.equals(this.switchPhaseL1On, device.switchPhaseL1On) &&
        Objects.equals(this.switchPhaseL2On, device.switchPhaseL2On) &&
        Objects.equals(this.switchPhaseL3On, device.switchPhaseL3On) &&
        Objects.equals(this.temperature, device.temperature) &&
        Objects.equals(this.valueDate, device.valueDate) &&
        Objects.equals(this.voltage, device.voltage) &&
        Objects.equals(this.voltageL1, device.voltageL1) &&
        Objects.equals(this.voltageL2, device.voltageL2) &&
        Objects.equals(this.voltageL3, device.voltageL3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activePower, activePowerL1, activePowerL2, activePowerL3, activePowerUnit, activeTariff, additionalMeterSerialNumber, analogOutput1, analogOutput2, chargingStationState, counterReading, counterReadingExport, counterReadingImport, counterReadingT1, counterReadingT2, counterReadingT3, counterReadingT4, counterReadingUnit, current, currentL1, currentL2, currentL3, deviceEnergyType, digitalInput1, digitalInput2, digitalOutput1, digitalOutput2, familyType, flowRate, id, meterSubType, name, powerFactor, powerFactorL1, powerFactorL2, powerFactorL3, serial, switchOn, switchPhaseL1On, switchPhaseL2On, switchPhaseL3On, temperature, valueDate, voltage, voltageL1, voltageL2, voltageL3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    activePower: ").append(toIndentedString(activePower)).append("\n");
    sb.append("    activePowerL1: ").append(toIndentedString(activePowerL1)).append("\n");
    sb.append("    activePowerL2: ").append(toIndentedString(activePowerL2)).append("\n");
    sb.append("    activePowerL3: ").append(toIndentedString(activePowerL3)).append("\n");
    sb.append("    activePowerUnit: ").append(toIndentedString(activePowerUnit)).append("\n");
    sb.append("    activeTariff: ").append(toIndentedString(activeTariff)).append("\n");
    sb.append("    additionalMeterSerialNumber: ").append(toIndentedString(additionalMeterSerialNumber)).append("\n");
    sb.append("    analogOutput1: ").append(toIndentedString(analogOutput1)).append("\n");
    sb.append("    analogOutput2: ").append(toIndentedString(analogOutput2)).append("\n");
    sb.append("    chargingStationState: ").append(toIndentedString(chargingStationState)).append("\n");
    sb.append("    counterReading: ").append(toIndentedString(counterReading)).append("\n");
    sb.append("    counterReadingExport: ").append(toIndentedString(counterReadingExport)).append("\n");
    sb.append("    counterReadingImport: ").append(toIndentedString(counterReadingImport)).append("\n");
    sb.append("    counterReadingT1: ").append(toIndentedString(counterReadingT1)).append("\n");
    sb.append("    counterReadingT2: ").append(toIndentedString(counterReadingT2)).append("\n");
    sb.append("    counterReadingT3: ").append(toIndentedString(counterReadingT3)).append("\n");
    sb.append("    counterReadingT4: ").append(toIndentedString(counterReadingT4)).append("\n");
    sb.append("    counterReadingUnit: ").append(toIndentedString(counterReadingUnit)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    currentL1: ").append(toIndentedString(currentL1)).append("\n");
    sb.append("    currentL2: ").append(toIndentedString(currentL2)).append("\n");
    sb.append("    currentL3: ").append(toIndentedString(currentL3)).append("\n");
    sb.append("    deviceEnergyType: ").append(toIndentedString(deviceEnergyType)).append("\n");
    sb.append("    digitalInput1: ").append(toIndentedString(digitalInput1)).append("\n");
    sb.append("    digitalInput2: ").append(toIndentedString(digitalInput2)).append("\n");
    sb.append("    digitalOutput1: ").append(toIndentedString(digitalOutput1)).append("\n");
    sb.append("    digitalOutput2: ").append(toIndentedString(digitalOutput2)).append("\n");
    sb.append("    familyType: ").append(toIndentedString(familyType)).append("\n");
    sb.append("    flowRate: ").append(toIndentedString(flowRate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    meterSubType: ").append(toIndentedString(meterSubType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    powerFactor: ").append(toIndentedString(powerFactor)).append("\n");
    sb.append("    powerFactorL1: ").append(toIndentedString(powerFactorL1)).append("\n");
    sb.append("    powerFactorL2: ").append(toIndentedString(powerFactorL2)).append("\n");
    sb.append("    powerFactorL3: ").append(toIndentedString(powerFactorL3)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    switchOn: ").append(toIndentedString(switchOn)).append("\n");
    sb.append("    switchPhaseL1On: ").append(toIndentedString(switchPhaseL1On)).append("\n");
    sb.append("    switchPhaseL2On: ").append(toIndentedString(switchPhaseL2On)).append("\n");
    sb.append("    switchPhaseL3On: ").append(toIndentedString(switchPhaseL3On)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("    voltageL1: ").append(toIndentedString(voltageL1)).append("\n");
    sb.append("    voltageL2: ").append(toIndentedString(voltageL2)).append("\n");
    sb.append("    voltageL3: ").append(toIndentedString(voltageL3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivePower");
    openapiFields.add("ActivePowerL1");
    openapiFields.add("ActivePowerL2");
    openapiFields.add("ActivePowerL3");
    openapiFields.add("ActivePowerUnit");
    openapiFields.add("ActiveTariff");
    openapiFields.add("AdditionalMeterSerialNumber");
    openapiFields.add("AnalogOutput1");
    openapiFields.add("AnalogOutput2");
    openapiFields.add("ChargingStationState");
    openapiFields.add("CounterReading");
    openapiFields.add("CounterReadingExport");
    openapiFields.add("CounterReadingImport");
    openapiFields.add("CounterReadingT1");
    openapiFields.add("CounterReadingT2");
    openapiFields.add("CounterReadingT3");
    openapiFields.add("CounterReadingT4");
    openapiFields.add("CounterReadingUnit");
    openapiFields.add("Current");
    openapiFields.add("CurrentL1");
    openapiFields.add("CurrentL2");
    openapiFields.add("CurrentL3");
    openapiFields.add("DeviceEnergyType");
    openapiFields.add("DigitalInput1");
    openapiFields.add("DigitalInput2");
    openapiFields.add("DigitalOutput1");
    openapiFields.add("DigitalOutput2");
    openapiFields.add("FamilyType");
    openapiFields.add("FlowRate");
    openapiFields.add("Id");
    openapiFields.add("MeterSubType");
    openapiFields.add("Name");
    openapiFields.add("PowerFactor");
    openapiFields.add("PowerFactorL1");
    openapiFields.add("PowerFactorL2");
    openapiFields.add("PowerFactorL3");
    openapiFields.add("Serial");
    openapiFields.add("SwitchOn");
    openapiFields.add("SwitchPhaseL1On");
    openapiFields.add("SwitchPhaseL2On");
    openapiFields.add("SwitchPhaseL3On");
    openapiFields.add("Temperature");
    openapiFields.add("ValueDate");
    openapiFields.add("Voltage");
    openapiFields.add("VoltageL1");
    openapiFields.add("VoltageL2");
    openapiFields.add("VoltageL3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ActivePowerUnit") != null && !jsonObj.get("ActivePowerUnit").isJsonNull()) && !jsonObj.get("ActivePowerUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivePowerUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivePowerUnit").toString()));
      }
      if ((jsonObj.get("AdditionalMeterSerialNumber") != null && !jsonObj.get("AdditionalMeterSerialNumber").isJsonNull()) && !jsonObj.get("AdditionalMeterSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalMeterSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalMeterSerialNumber").toString()));
      }
      if ((jsonObj.get("ChargingStationState") != null && !jsonObj.get("ChargingStationState").isJsonNull()) && !jsonObj.get("ChargingStationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChargingStationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChargingStationState").toString()));
      }
      // validate the optional field `ChargingStationState`
      if (jsonObj.get("ChargingStationState") != null && !jsonObj.get("ChargingStationState").isJsonNull()) {
        ChargingStationStateEnum.validateJsonElement(jsonObj.get("ChargingStationState"));
      }
      if ((jsonObj.get("CounterReadingUnit") != null && !jsonObj.get("CounterReadingUnit").isJsonNull()) && !jsonObj.get("CounterReadingUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CounterReadingUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CounterReadingUnit").toString()));
      }
      if ((jsonObj.get("DeviceEnergyType") != null && !jsonObj.get("DeviceEnergyType").isJsonNull()) && !jsonObj.get("DeviceEnergyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceEnergyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceEnergyType").toString()));
      }
      // validate the optional field `DeviceEnergyType`
      if (jsonObj.get("DeviceEnergyType") != null && !jsonObj.get("DeviceEnergyType").isJsonNull()) {
        DeviceEnergyTypeEnum.validateJsonElement(jsonObj.get("DeviceEnergyType"));
      }
      if ((jsonObj.get("FamilyType") != null && !jsonObj.get("FamilyType").isJsonNull()) && !jsonObj.get("FamilyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FamilyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FamilyType").toString()));
      }
      // validate the optional field `FamilyType`
      if (jsonObj.get("FamilyType") != null && !jsonObj.get("FamilyType").isJsonNull()) {
        FamilyTypeEnum.validateJsonElement(jsonObj.get("FamilyType"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MeterSubType") != null && !jsonObj.get("MeterSubType").isJsonNull()) && !jsonObj.get("MeterSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeterSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeterSubType").toString()));
      }
      // validate the optional field `MeterSubType`
      if (jsonObj.get("MeterSubType") != null && !jsonObj.get("MeterSubType").isJsonNull()) {
        MeterSubTypeEnum.validateJsonElement(jsonObj.get("MeterSubType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Device
   * @throws IOException if the JSON string is invalid with respect to Device
   */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

  /**
   * Convert an instance of Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

