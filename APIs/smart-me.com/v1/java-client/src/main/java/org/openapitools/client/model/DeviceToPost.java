/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Class for the Web API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceToPost {
  public static final String SERIALIZED_NAME_ACTIVE_POWER = "ActivePower";
  @SerializedName(SERIALIZED_NAME_ACTIVE_POWER)
  private Double activePower;

  public static final String SERIALIZED_NAME_COUNTER_READING = "CounterReading";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING)
  private Double counterReading;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT = "CounterReadingExport";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT)
  private Double counterReadingExport;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T1 = "CounterReadingExportT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T1)
  private Double counterReadingExportT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T2 = "CounterReadingExportT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T2)
  private Double counterReadingExportT2;

  public static final String SERIALIZED_NAME_COUNTER_READING_T1 = "CounterReadingT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T1)
  private Double counterReadingT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_T2 = "CounterReadingT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T2)
  private Double counterReadingT2;

  public static final String SERIALIZED_NAME_CURRENT = "Current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Double current;

  public static final String SERIALIZED_NAME_CURRENT_L1 = "CurrentL1";
  @SerializedName(SERIALIZED_NAME_CURRENT_L1)
  private Double currentL1;

  public static final String SERIALIZED_NAME_CURRENT_L2 = "CurrentL2";
  @SerializedName(SERIALIZED_NAME_CURRENT_L2)
  private Double currentL2;

  public static final String SERIALIZED_NAME_CURRENT_L3 = "CurrentL3";
  @SerializedName(SERIALIZED_NAME_CURRENT_L3)
  private Double currentL3;

  /**
   * The Energy Type of this device
   */
  @JsonAdapter(DeviceEnergyTypeEnum.Adapter.class)
  public enum DeviceEnergyTypeEnum {
    METER_TYPE_UNKNOWN("MeterTypeUnknown"),
    
    METER_TYPE_ELECTRICITY("MeterTypeElectricity"),
    
    METER_TYPE_WATER("MeterTypeWater"),
    
    METER_TYPE_GAS("MeterTypeGas"),
    
    METER_TYPE_HEAT("MeterTypeHeat"),
    
    METER_TYPE_HCA("MeterTypeHCA"),
    
    METER_TYPE_ALL_METERS("MeterTypeAllMeters"),
    
    METER_TYPE_TEMPERATURE("MeterTypeTemperature"),
    
    METER_TYPE_M_BUS_GATEWAY("MeterTypeMBusGateway"),
    
    METER_TYPE_RS485_GATEWAY("MeterTypeRS485Gateway"),
    
    METER_TYPE_CUSTOM_DEVICE("MeterTypeCustomDevice"),
    
    METER_TYPE_COMPRESSED_AIR("MeterTypeCompressedAir"),
    
    METER_TYPE_SOLAR_LOG("MeterTypeSolarLog"),
    
    METER_TYPE_VIRTUAL_METER("MeterTypeVirtualMeter"),
    
    METER_TYPE_WM_BUS_GATEWAY("MeterTypeWMBusGateway");

    private String value;

    DeviceEnergyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceEnergyTypeEnum fromValue(String value) {
      for (DeviceEnergyTypeEnum b : DeviceEnergyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceEnergyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceEnergyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceEnergyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceEnergyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceEnergyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_ENERGY_TYPE = "DeviceEnergyType";
  @SerializedName(SERIALIZED_NAME_DEVICE_ENERGY_TYPE)
  private DeviceEnergyTypeEnum deviceEnergyType;

  public static final String SERIALIZED_NAME_DIGITAL_INPUT1 = "DigitalInput1";
  @SerializedName(SERIALIZED_NAME_DIGITAL_INPUT1)
  private Boolean digitalInput1;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The Sub Type of this Meter.
   */
  @JsonAdapter(MeterSubTypeEnum.Adapter.class)
  public enum MeterSubTypeEnum {
    METER_SUB_TYPE_UNKNOWN("MeterSubTypeUnknown"),
    
    METER_SUB_TYPE_COLD("MeterSubTypeCold"),
    
    METER_SUB_TYPE_HEAT("MeterSubTypeHeat"),
    
    METER_SUB_TYPE_CHARGING_STATION("MeterSubTypeChargingStation"),
    
    METER_SUB_TYPE_ELECTRICITY("MeterSubTypeElectricity"),
    
    METER_SUB_TYPE_WATER("MeterSubTypeWater"),
    
    METER_SUB_TYPE_GAS("MeterSubTypeGas"),
    
    METER_SUB_TYPE_ELECTRICITY_HEAT("MeterSubTypeElectricityHeat"),
    
    METER_SUB_TYPE_TEMPERATURE("MeterSubTypeTemperature"),
    
    METER_SUB_TYPE_VIRTUAL_BATTERY("MeterSubTypeVirtualBattery");

    private String value;

    MeterSubTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeterSubTypeEnum fromValue(String value) {
      for (MeterSubTypeEnum b : MeterSubTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MeterSubTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeterSubTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeterSubTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MeterSubTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MeterSubTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METER_SUB_TYPE = "MeterSubType";
  @SerializedName(SERIALIZED_NAME_METER_SUB_TYPE)
  private MeterSubTypeEnum meterSubType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POWER_FACTOR = "PowerFactor";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR)
  private Double powerFactor;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L1 = "PowerFactorL1";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L1)
  private Double powerFactorL1;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L2 = "PowerFactorL2";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L2)
  private Double powerFactorL2;

  public static final String SERIALIZED_NAME_POWER_FACTOR_L3 = "PowerFactorL3";
  @SerializedName(SERIALIZED_NAME_POWER_FACTOR_L3)
  private Double powerFactorL3;

  public static final String SERIALIZED_NAME_SERIAL = "Serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private Long serial;

  public static final String SERIALIZED_NAME_TEMPERATURE = "Temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature;

  public static final String SERIALIZED_NAME_VALUE_DATE = "ValueDate";
  @SerializedName(SERIALIZED_NAME_VALUE_DATE)
  private OffsetDateTime valueDate;

  public static final String SERIALIZED_NAME_VOLTAGE = "Voltage";
  @SerializedName(SERIALIZED_NAME_VOLTAGE)
  private Double voltage;

  public static final String SERIALIZED_NAME_VOLTAGE_L1 = "VoltageL1";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L1)
  private Double voltageL1;

  public static final String SERIALIZED_NAME_VOLTAGE_L2 = "VoltageL2";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L2)
  private Double voltageL2;

  public static final String SERIALIZED_NAME_VOLTAGE_L3 = "VoltageL3";
  @SerializedName(SERIALIZED_NAME_VOLTAGE_L3)
  private Double voltageL3;

  public DeviceToPost() {
  }

  public DeviceToPost activePower(Double activePower) {
    this.activePower = activePower;
    return this;
  }

  /**
   * The Active Power or current flow rate. In kW or m3/h
   * @return activePower
   */
  @javax.annotation.Nullable
  public Double getActivePower() {
    return activePower;
  }

  public void setActivePower(Double activePower) {
    this.activePower = activePower;
  }


  public DeviceToPost counterReading(Double counterReading) {
    this.counterReading = counterReading;
    return this;
  }

  /**
   * The Meter Counter Reading (Total Energy used) in kWh or m3.
   * @return counterReading
   */
  @javax.annotation.Nullable
  public Double getCounterReading() {
    return counterReading;
  }

  public void setCounterReading(Double counterReading) {
    this.counterReading = counterReading;
  }


  public DeviceToPost counterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
    return this;
  }

  /**
   * The Meter Counter Reading only export
   * @return counterReadingExport
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExport() {
    return counterReadingExport;
  }

  public void setCounterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
  }


  public DeviceToPost counterReadingExportT1(Double counterReadingExportT1) {
    this.counterReadingExportT1 = counterReadingExportT1;
    return this;
  }

  /**
   * The Meter Counter Reading only export (Tariff 1)
   * @return counterReadingExportT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT1() {
    return counterReadingExportT1;
  }

  public void setCounterReadingExportT1(Double counterReadingExportT1) {
    this.counterReadingExportT1 = counterReadingExportT1;
  }


  public DeviceToPost counterReadingExportT2(Double counterReadingExportT2) {
    this.counterReadingExportT2 = counterReadingExportT2;
    return this;
  }

  /**
   * The Meter Counter Reading only export (Tariff 2)
   * @return counterReadingExportT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT2() {
    return counterReadingExportT2;
  }

  public void setCounterReadingExportT2(Double counterReadingExportT2) {
    this.counterReadingExportT2 = counterReadingExportT2;
  }


  public DeviceToPost counterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 1 in kWh or m3.
   * @return counterReadingT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT1() {
    return counterReadingT1;
  }

  public void setCounterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
  }


  public DeviceToPost counterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 2 in kWh or m3.
   * @return counterReadingT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT2() {
    return counterReadingT2;
  }

  public void setCounterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
  }


  public DeviceToPost current(Double current) {
    this.current = current;
    return this;
  }

  /**
   * The Current (in A)
   * @return current
   */
  @javax.annotation.Nullable
  public Double getCurrent() {
    return current;
  }

  public void setCurrent(Double current) {
    this.current = current;
  }


  public DeviceToPost currentL1(Double currentL1) {
    this.currentL1 = currentL1;
    return this;
  }

  /**
   * The Current Phase L1 (in A)
   * @return currentL1
   */
  @javax.annotation.Nullable
  public Double getCurrentL1() {
    return currentL1;
  }

  public void setCurrentL1(Double currentL1) {
    this.currentL1 = currentL1;
  }


  public DeviceToPost currentL2(Double currentL2) {
    this.currentL2 = currentL2;
    return this;
  }

  /**
   * The Current Phase L2 (in A)
   * @return currentL2
   */
  @javax.annotation.Nullable
  public Double getCurrentL2() {
    return currentL2;
  }

  public void setCurrentL2(Double currentL2) {
    this.currentL2 = currentL2;
  }


  public DeviceToPost currentL3(Double currentL3) {
    this.currentL3 = currentL3;
    return this;
  }

  /**
   * The Current Phase L3 (in A)
   * @return currentL3
   */
  @javax.annotation.Nullable
  public Double getCurrentL3() {
    return currentL3;
  }

  public void setCurrentL3(Double currentL3) {
    this.currentL3 = currentL3;
  }


  public DeviceToPost deviceEnergyType(DeviceEnergyTypeEnum deviceEnergyType) {
    this.deviceEnergyType = deviceEnergyType;
    return this;
  }

  /**
   * The Energy Type of this device
   * @return deviceEnergyType
   */
  @javax.annotation.Nullable
  public DeviceEnergyTypeEnum getDeviceEnergyType() {
    return deviceEnergyType;
  }

  public void setDeviceEnergyType(DeviceEnergyTypeEnum deviceEnergyType) {
    this.deviceEnergyType = deviceEnergyType;
  }


  public DeviceToPost digitalInput1(Boolean digitalInput1) {
    this.digitalInput1 = digitalInput1;
    return this;
  }

  /**
   * The digital input number 1
   * @return digitalInput1
   */
  @javax.annotation.Nullable
  public Boolean getDigitalInput1() {
    return digitalInput1;
  }

  public void setDigitalInput1(Boolean digitalInput1) {
    this.digitalInput1 = digitalInput1;
  }


  public DeviceToPost id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the device
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceToPost meterSubType(MeterSubTypeEnum meterSubType) {
    this.meterSubType = meterSubType;
    return this;
  }

  /**
   * The Sub Type of this Meter.
   * @return meterSubType
   */
  @javax.annotation.Nullable
  public MeterSubTypeEnum getMeterSubType() {
    return meterSubType;
  }

  public void setMeterSubType(MeterSubTypeEnum meterSubType) {
    this.meterSubType = meterSubType;
  }


  public DeviceToPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the Device
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceToPost powerFactor(Double powerFactor) {
    this.powerFactor = powerFactor;
    return this;
  }

  /**
   * The Power Factor (cos phi). Range: 0 - 1
   * @return powerFactor
   */
  @javax.annotation.Nullable
  public Double getPowerFactor() {
    return powerFactor;
  }

  public void setPowerFactor(Double powerFactor) {
    this.powerFactor = powerFactor;
  }


  public DeviceToPost powerFactorL1(Double powerFactorL1) {
    this.powerFactorL1 = powerFactorL1;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L1. Range: 0 - 1
   * @return powerFactorL1
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL1() {
    return powerFactorL1;
  }

  public void setPowerFactorL1(Double powerFactorL1) {
    this.powerFactorL1 = powerFactorL1;
  }


  public DeviceToPost powerFactorL2(Double powerFactorL2) {
    this.powerFactorL2 = powerFactorL2;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L2. Range: 0 - 1
   * @return powerFactorL2
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL2() {
    return powerFactorL2;
  }

  public void setPowerFactorL2(Double powerFactorL2) {
    this.powerFactorL2 = powerFactorL2;
  }


  public DeviceToPost powerFactorL3(Double powerFactorL3) {
    this.powerFactorL3 = powerFactorL3;
    return this;
  }

  /**
   * The Power Factor (cos phi) Phase L3. Range: 0 - 1
   * @return powerFactorL3
   */
  @javax.annotation.Nullable
  public Double getPowerFactorL3() {
    return powerFactorL3;
  }

  public void setPowerFactorL3(Double powerFactorL3) {
    this.powerFactorL3 = powerFactorL3;
  }


  public DeviceToPost serial(Long serial) {
    this.serial = serial;
    return this;
  }

  /**
   * The Serial number
   * @return serial
   */
  @javax.annotation.Nullable
  public Long getSerial() {
    return serial;
  }

  public void setSerial(Long serial) {
    this.serial = serial;
  }


  public DeviceToPost temperature(Double temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * The Temperature (in degree celsius)
   * @return temperature
   */
  @javax.annotation.Nullable
  public Double getTemperature() {
    return temperature;
  }

  public void setTemperature(Double temperature) {
    this.temperature = temperature;
  }


  public DeviceToPost valueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
    return this;
  }

  /**
   * The Date of the Value (in UTC). If this is null the Server Time is used.
   * @return valueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueDate() {
    return valueDate;
  }

  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }


  public DeviceToPost voltage(Double voltage) {
    this.voltage = voltage;
    return this;
  }

  /**
   * The Voltage (in V)
   * @return voltage
   */
  @javax.annotation.Nullable
  public Double getVoltage() {
    return voltage;
  }

  public void setVoltage(Double voltage) {
    this.voltage = voltage;
  }


  public DeviceToPost voltageL1(Double voltageL1) {
    this.voltageL1 = voltageL1;
    return this;
  }

  /**
   * The Voltage Phase L1 (in V)
   * @return voltageL1
   */
  @javax.annotation.Nullable
  public Double getVoltageL1() {
    return voltageL1;
  }

  public void setVoltageL1(Double voltageL1) {
    this.voltageL1 = voltageL1;
  }


  public DeviceToPost voltageL2(Double voltageL2) {
    this.voltageL2 = voltageL2;
    return this;
  }

  /**
   * The Voltage Phase L2 (in V)
   * @return voltageL2
   */
  @javax.annotation.Nullable
  public Double getVoltageL2() {
    return voltageL2;
  }

  public void setVoltageL2(Double voltageL2) {
    this.voltageL2 = voltageL2;
  }


  public DeviceToPost voltageL3(Double voltageL3) {
    this.voltageL3 = voltageL3;
    return this;
  }

  /**
   * The Voltage Phase L3 (in V)
   * @return voltageL3
   */
  @javax.annotation.Nullable
  public Double getVoltageL3() {
    return voltageL3;
  }

  public void setVoltageL3(Double voltageL3) {
    this.voltageL3 = voltageL3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceToPost deviceToPost = (DeviceToPost) o;
    return Objects.equals(this.activePower, deviceToPost.activePower) &&
        Objects.equals(this.counterReading, deviceToPost.counterReading) &&
        Objects.equals(this.counterReadingExport, deviceToPost.counterReadingExport) &&
        Objects.equals(this.counterReadingExportT1, deviceToPost.counterReadingExportT1) &&
        Objects.equals(this.counterReadingExportT2, deviceToPost.counterReadingExportT2) &&
        Objects.equals(this.counterReadingT1, deviceToPost.counterReadingT1) &&
        Objects.equals(this.counterReadingT2, deviceToPost.counterReadingT2) &&
        Objects.equals(this.current, deviceToPost.current) &&
        Objects.equals(this.currentL1, deviceToPost.currentL1) &&
        Objects.equals(this.currentL2, deviceToPost.currentL2) &&
        Objects.equals(this.currentL3, deviceToPost.currentL3) &&
        Objects.equals(this.deviceEnergyType, deviceToPost.deviceEnergyType) &&
        Objects.equals(this.digitalInput1, deviceToPost.digitalInput1) &&
        Objects.equals(this.id, deviceToPost.id) &&
        Objects.equals(this.meterSubType, deviceToPost.meterSubType) &&
        Objects.equals(this.name, deviceToPost.name) &&
        Objects.equals(this.powerFactor, deviceToPost.powerFactor) &&
        Objects.equals(this.powerFactorL1, deviceToPost.powerFactorL1) &&
        Objects.equals(this.powerFactorL2, deviceToPost.powerFactorL2) &&
        Objects.equals(this.powerFactorL3, deviceToPost.powerFactorL3) &&
        Objects.equals(this.serial, deviceToPost.serial) &&
        Objects.equals(this.temperature, deviceToPost.temperature) &&
        Objects.equals(this.valueDate, deviceToPost.valueDate) &&
        Objects.equals(this.voltage, deviceToPost.voltage) &&
        Objects.equals(this.voltageL1, deviceToPost.voltageL1) &&
        Objects.equals(this.voltageL2, deviceToPost.voltageL2) &&
        Objects.equals(this.voltageL3, deviceToPost.voltageL3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activePower, counterReading, counterReadingExport, counterReadingExportT1, counterReadingExportT2, counterReadingT1, counterReadingT2, current, currentL1, currentL2, currentL3, deviceEnergyType, digitalInput1, id, meterSubType, name, powerFactor, powerFactorL1, powerFactorL2, powerFactorL3, serial, temperature, valueDate, voltage, voltageL1, voltageL2, voltageL3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceToPost {\n");
    sb.append("    activePower: ").append(toIndentedString(activePower)).append("\n");
    sb.append("    counterReading: ").append(toIndentedString(counterReading)).append("\n");
    sb.append("    counterReadingExport: ").append(toIndentedString(counterReadingExport)).append("\n");
    sb.append("    counterReadingExportT1: ").append(toIndentedString(counterReadingExportT1)).append("\n");
    sb.append("    counterReadingExportT2: ").append(toIndentedString(counterReadingExportT2)).append("\n");
    sb.append("    counterReadingT1: ").append(toIndentedString(counterReadingT1)).append("\n");
    sb.append("    counterReadingT2: ").append(toIndentedString(counterReadingT2)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    currentL1: ").append(toIndentedString(currentL1)).append("\n");
    sb.append("    currentL2: ").append(toIndentedString(currentL2)).append("\n");
    sb.append("    currentL3: ").append(toIndentedString(currentL3)).append("\n");
    sb.append("    deviceEnergyType: ").append(toIndentedString(deviceEnergyType)).append("\n");
    sb.append("    digitalInput1: ").append(toIndentedString(digitalInput1)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    meterSubType: ").append(toIndentedString(meterSubType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    powerFactor: ").append(toIndentedString(powerFactor)).append("\n");
    sb.append("    powerFactorL1: ").append(toIndentedString(powerFactorL1)).append("\n");
    sb.append("    powerFactorL2: ").append(toIndentedString(powerFactorL2)).append("\n");
    sb.append("    powerFactorL3: ").append(toIndentedString(powerFactorL3)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("    voltageL1: ").append(toIndentedString(voltageL1)).append("\n");
    sb.append("    voltageL2: ").append(toIndentedString(voltageL2)).append("\n");
    sb.append("    voltageL3: ").append(toIndentedString(voltageL3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivePower");
    openapiFields.add("CounterReading");
    openapiFields.add("CounterReadingExport");
    openapiFields.add("CounterReadingExportT1");
    openapiFields.add("CounterReadingExportT2");
    openapiFields.add("CounterReadingT1");
    openapiFields.add("CounterReadingT2");
    openapiFields.add("Current");
    openapiFields.add("CurrentL1");
    openapiFields.add("CurrentL2");
    openapiFields.add("CurrentL3");
    openapiFields.add("DeviceEnergyType");
    openapiFields.add("DigitalInput1");
    openapiFields.add("Id");
    openapiFields.add("MeterSubType");
    openapiFields.add("Name");
    openapiFields.add("PowerFactor");
    openapiFields.add("PowerFactorL1");
    openapiFields.add("PowerFactorL2");
    openapiFields.add("PowerFactorL3");
    openapiFields.add("Serial");
    openapiFields.add("Temperature");
    openapiFields.add("ValueDate");
    openapiFields.add("Voltage");
    openapiFields.add("VoltageL1");
    openapiFields.add("VoltageL2");
    openapiFields.add("VoltageL3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceToPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceToPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceToPost is not found in the empty JSON string", DeviceToPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceToPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceToPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceEnergyType") != null && !jsonObj.get("DeviceEnergyType").isJsonNull()) && !jsonObj.get("DeviceEnergyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceEnergyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceEnergyType").toString()));
      }
      // validate the optional field `DeviceEnergyType`
      if (jsonObj.get("DeviceEnergyType") != null && !jsonObj.get("DeviceEnergyType").isJsonNull()) {
        DeviceEnergyTypeEnum.validateJsonElement(jsonObj.get("DeviceEnergyType"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MeterSubType") != null && !jsonObj.get("MeterSubType").isJsonNull()) && !jsonObj.get("MeterSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeterSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeterSubType").toString()));
      }
      // validate the optional field `MeterSubType`
      if (jsonObj.get("MeterSubType") != null && !jsonObj.get("MeterSubType").isJsonNull()) {
        MeterSubTypeEnum.validateJsonElement(jsonObj.get("MeterSubType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceToPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceToPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceToPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceToPost.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceToPost>() {
           @Override
           public void write(JsonWriter out, DeviceToPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceToPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceToPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceToPost
   * @throws IOException if the JSON string is invalid with respect to DeviceToPost
   */
  public static DeviceToPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceToPost.class);
  }

  /**
   * Convert an instance of DeviceToPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

