/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for the folder settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FolderSettings {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLE = "Enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  /**
   * The Type of the folder
   */
  @JsonAdapter(FolderTypeEnum.Adapter.class)
  public enum FolderTypeEnum {
    FOLDER("Folder"),
    
    LOCATION("Location"),
    
    FACTORY("Factory"),
    
    HOUSE("House"),
    
    OFFICE("Office"),
    
    MACHINE("Machine"),
    
    VIRTUAL_METER("VirtualMeter"),
    
    ELECTICITY_FOLDER("ElecticityFolder"),
    
    WATER_FOLDER("WaterFolder"),
    
    HEAT_FOLDER("HeatFolder"),
    
    GAS_FOLDER("GasFolder"),
    
    TEMPERATURE_FOLDER("TemperatureFolder"),
    
    SUN("Sun"),
    
    LIGHT("Light"),
    
    ICE("Ice"),
    
    SOFA("Sofa"),
    
    FOOD("Food"),
    
    COFFEE("Coffee"),
    
    CAR("Car"),
    
    CHARGING_STATION("ChargingStation"),
    
    METER("Meter"),
    
    USER("User"),
    
    TRASH("Trash"),
    
    GRID_PHOTOVOLTAIC_POWER_SYSTEM("GridPhotovoltaicPowerSystem");

    private String value;

    FolderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FolderTypeEnum fromValue(String value) {
      for (FolderTypeEnum b : FolderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FolderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FolderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FolderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FolderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FolderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FOLDER_TYPE = "FolderType";
  @SerializedName(SERIALIZED_NAME_FOLDER_TYPE)
  private FolderTypeEnum folderType;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "ParentFolderId";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private Long serialNumber;

  public static final String SERIALIZED_NAME_USEABLE_FOR_VIRTUAL_BILLING_METERS = "UseableForVirtualBillingMeters";
  @SerializedName(SERIALIZED_NAME_USEABLE_FOR_VIRTUAL_BILLING_METERS)
  private Boolean useableForVirtualBillingMeters;

  public static final String SERIALIZED_NAME_VALUE_CORRECTION = "ValueCorrection";
  @SerializedName(SERIALIZED_NAME_VALUE_CORRECTION)
  private Double valueCorrection;

  public static final String SERIALIZED_NAME_VALUE_CORRECTION_PARENT_FOLDER = "ValueCorrectionParentFolder";
  @SerializedName(SERIALIZED_NAME_VALUE_CORRECTION_PARENT_FOLDER)
  private Double valueCorrectionParentFolder;

  public static final String SERIALIZED_NAME_VISUALIZATION_NAME = "VisualizationName";
  @SerializedName(SERIALIZED_NAME_VISUALIZATION_NAME)
  private String visualizationName;

  public FolderSettings() {
  }

  public FolderSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Description of the folder or meter
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FolderSettings enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Flag if the meter is enabled (folder not supported yet)
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  public FolderSettings folderType(FolderTypeEnum folderType) {
    this.folderType = folderType;
    return this;
  }

  /**
   * The Type of the folder
   * @return folderType
   */
  @javax.annotation.Nullable
  public FolderTypeEnum getFolderType() {
    return folderType;
  }

  public void setFolderType(FolderTypeEnum folderType) {
    this.folderType = folderType;
  }


  public FolderSettings name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the folder or meter
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FolderSettings parentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * The parent folder ID of this item
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public FolderSettings serialNumber(Long serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number (meter only)
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public Long getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(Long serialNumber) {
    this.serialNumber = serialNumber;
  }


  public FolderSettings useableForVirtualBillingMeters(Boolean useableForVirtualBillingMeters) {
    this.useableForVirtualBillingMeters = useableForVirtualBillingMeters;
    return this;
  }

  /**
   * Flag if the meter is usable for virtual billing meters (e.g. washroom)
   * @return useableForVirtualBillingMeters
   */
  @javax.annotation.Nullable
  public Boolean getUseableForVirtualBillingMeters() {
    return useableForVirtualBillingMeters;
  }

  public void setUseableForVirtualBillingMeters(Boolean useableForVirtualBillingMeters) {
    this.useableForVirtualBillingMeters = useableForVirtualBillingMeters;
  }


  public FolderSettings valueCorrection(Double valueCorrection) {
    this.valueCorrection = valueCorrection;
    return this;
  }

  /**
   * The value correction on this meter
   * @return valueCorrection
   */
  @javax.annotation.Nullable
  public Double getValueCorrection() {
    return valueCorrection;
  }

  public void setValueCorrection(Double valueCorrection) {
    this.valueCorrection = valueCorrection;
  }


  public FolderSettings valueCorrectionParentFolder(Double valueCorrectionParentFolder) {
    this.valueCorrectionParentFolder = valueCorrectionParentFolder;
    return this;
  }

  /**
   * The value correction on all parent folders. but not on the meter itself
   * @return valueCorrectionParentFolder
   */
  @javax.annotation.Nullable
  public Double getValueCorrectionParentFolder() {
    return valueCorrectionParentFolder;
  }

  public void setValueCorrectionParentFolder(Double valueCorrectionParentFolder) {
    this.valueCorrectionParentFolder = valueCorrectionParentFolder;
  }


  public FolderSettings visualizationName(String visualizationName) {
    this.visualizationName = visualizationName;
    return this;
  }

  /**
   * The name of the visualization of the folder
   * @return visualizationName
   */
  @javax.annotation.Nullable
  public String getVisualizationName() {
    return visualizationName;
  }

  public void setVisualizationName(String visualizationName) {
    this.visualizationName = visualizationName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderSettings folderSettings = (FolderSettings) o;
    return Objects.equals(this.description, folderSettings.description) &&
        Objects.equals(this.enable, folderSettings.enable) &&
        Objects.equals(this.folderType, folderSettings.folderType) &&
        Objects.equals(this.name, folderSettings.name) &&
        Objects.equals(this.parentFolderId, folderSettings.parentFolderId) &&
        Objects.equals(this.serialNumber, folderSettings.serialNumber) &&
        Objects.equals(this.useableForVirtualBillingMeters, folderSettings.useableForVirtualBillingMeters) &&
        Objects.equals(this.valueCorrection, folderSettings.valueCorrection) &&
        Objects.equals(this.valueCorrectionParentFolder, folderSettings.valueCorrectionParentFolder) &&
        Objects.equals(this.visualizationName, folderSettings.visualizationName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, enable, folderType, name, parentFolderId, serialNumber, useableForVirtualBillingMeters, valueCorrection, valueCorrectionParentFolder, visualizationName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderSettings {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    folderType: ").append(toIndentedString(folderType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    useableForVirtualBillingMeters: ").append(toIndentedString(useableForVirtualBillingMeters)).append("\n");
    sb.append("    valueCorrection: ").append(toIndentedString(valueCorrection)).append("\n");
    sb.append("    valueCorrectionParentFolder: ").append(toIndentedString(valueCorrectionParentFolder)).append("\n");
    sb.append("    visualizationName: ").append(toIndentedString(visualizationName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("Enable");
    openapiFields.add("FolderType");
    openapiFields.add("Name");
    openapiFields.add("ParentFolderId");
    openapiFields.add("SerialNumber");
    openapiFields.add("UseableForVirtualBillingMeters");
    openapiFields.add("ValueCorrection");
    openapiFields.add("ValueCorrectionParentFolder");
    openapiFields.add("VisualizationName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FolderSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FolderSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderSettings is not found in the empty JSON string", FolderSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FolderSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FolderSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("FolderType") != null && !jsonObj.get("FolderType").isJsonNull()) && !jsonObj.get("FolderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FolderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FolderType").toString()));
      }
      // validate the optional field `FolderType`
      if (jsonObj.get("FolderType") != null && !jsonObj.get("FolderType").isJsonNull()) {
        FolderTypeEnum.validateJsonElement(jsonObj.get("FolderType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("ParentFolderId") != null && !jsonObj.get("ParentFolderId").isJsonNull()) && !jsonObj.get("ParentFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentFolderId").toString()));
      }
      if ((jsonObj.get("VisualizationName") != null && !jsonObj.get("VisualizationName").isJsonNull()) && !jsonObj.get("VisualizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VisualizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VisualizationName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderSettings>() {
           @Override
           public void write(JsonWriter out, FolderSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FolderSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FolderSettings
   * @throws IOException if the JSON string is invalid with respect to FolderSettings
   */
  public static FolderSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderSettings.class);
  }

  /**
   * Convert an instance of FolderSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

