/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container class for the register realtime API API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterRealtimeApiData {
  public static final String SERIALIZED_NAME_API_URL = "ApiUrl";
  @SerializedName(SERIALIZED_NAME_API_URL)
  private String apiUrl;

  public static final String SERIALIZED_NAME_BASIC_AUTH_PASSWORD = "BasicAuthPassword";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_PASSWORD)
  private String basicAuthPassword;

  public static final String SERIALIZED_NAME_BASIC_AUTH_USERNAME = "BasicAuthUsername";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_USERNAME)
  private String basicAuthUsername;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METER_ID = "MeterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private String meterId;

  /**
   * The Type of this registration (per meter, per user, ...)
   */
  @JsonAdapter(RegistrationTypeEnum.Adapter.class)
  public enum RegistrationTypeEnum {
    DISABLED("Disabled"),
    
    SINGLE_METER_REGISTRATION("SingleMeterRegistration"),
    
    USER_REGISTRATION("UserRegistration");

    private String value;

    RegistrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationTypeEnum fromValue(String value) {
      for (RegistrationTypeEnum b : RegistrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegistrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegistrationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegistrationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGISTRATION_TYPE = "RegistrationType";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_TYPE)
  private RegistrationTypeEnum registrationType;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public RegisterRealtimeApiData() {
  }

  public RegisterRealtimeApiData apiUrl(String apiUrl) {
    this.apiUrl = apiUrl;
    return this;
  }

  /**
   * The URL of your endpoint. To this endpoint all the values are send to.
   * @return apiUrl
   */
  @javax.annotation.Nullable
  public String getApiUrl() {
    return apiUrl;
  }

  public void setApiUrl(String apiUrl) {
    this.apiUrl = apiUrl;
  }


  public RegisterRealtimeApiData basicAuthPassword(String basicAuthPassword) {
    this.basicAuthPassword = basicAuthPassword;
    return this;
  }

  /**
   * The Password (basic auth) of your endpoint. Leave empty of none.
   * @return basicAuthPassword
   */
  @javax.annotation.Nullable
  public String getBasicAuthPassword() {
    return basicAuthPassword;
  }

  public void setBasicAuthPassword(String basicAuthPassword) {
    this.basicAuthPassword = basicAuthPassword;
  }


  public RegisterRealtimeApiData basicAuthUsername(String basicAuthUsername) {
    this.basicAuthUsername = basicAuthUsername;
    return this;
  }

  /**
   * The Username (basic auth) of your endpoint. Leave empty of none.
   * @return basicAuthUsername
   */
  @javax.annotation.Nullable
  public String getBasicAuthUsername() {
    return basicAuthUsername;
  }

  public void setBasicAuthUsername(String basicAuthUsername) {
    this.basicAuthUsername = basicAuthUsername;
  }


  public RegisterRealtimeApiData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the registration
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RegisterRealtimeApiData meterId(String meterId) {
    this.meterId = meterId;
    return this;
  }

  /**
   * The ID of the Meter. Just used if the RegistrationType is \&quot;SingleMeterRegistration\&quot;.
   * @return meterId
   */
  @javax.annotation.Nullable
  public String getMeterId() {
    return meterId;
  }

  public void setMeterId(String meterId) {
    this.meterId = meterId;
  }


  public RegisterRealtimeApiData registrationType(RegistrationTypeEnum registrationType) {
    this.registrationType = registrationType;
    return this;
  }

  /**
   * The Type of this registration (per meter, per user, ...)
   * @return registrationType
   */
  @javax.annotation.Nullable
  public RegistrationTypeEnum getRegistrationType() {
    return registrationType;
  }

  public void setRegistrationType(RegistrationTypeEnum registrationType) {
    this.registrationType = registrationType;
  }


  public RegisterRealtimeApiData serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number of the Meter. Just used if the RegistrationType is \&quot;SingleMeterRegistration\&quot; and the MeterId is null.               Example: 1 SME 01 63000000 or 6300000
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterRealtimeApiData registerRealtimeApiData = (RegisterRealtimeApiData) o;
    return Objects.equals(this.apiUrl, registerRealtimeApiData.apiUrl) &&
        Objects.equals(this.basicAuthPassword, registerRealtimeApiData.basicAuthPassword) &&
        Objects.equals(this.basicAuthUsername, registerRealtimeApiData.basicAuthUsername) &&
        Objects.equals(this.id, registerRealtimeApiData.id) &&
        Objects.equals(this.meterId, registerRealtimeApiData.meterId) &&
        Objects.equals(this.registrationType, registerRealtimeApiData.registrationType) &&
        Objects.equals(this.serialNumber, registerRealtimeApiData.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiUrl, basicAuthPassword, basicAuthUsername, id, meterId, registrationType, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterRealtimeApiData {\n");
    sb.append("    apiUrl: ").append(toIndentedString(apiUrl)).append("\n");
    sb.append("    basicAuthPassword: ").append(toIndentedString(basicAuthPassword)).append("\n");
    sb.append("    basicAuthUsername: ").append(toIndentedString(basicAuthUsername)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    registrationType: ").append(toIndentedString(registrationType)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiUrl");
    openapiFields.add("BasicAuthPassword");
    openapiFields.add("BasicAuthUsername");
    openapiFields.add("Id");
    openapiFields.add("MeterId");
    openapiFields.add("RegistrationType");
    openapiFields.add("SerialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterRealtimeApiData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterRealtimeApiData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterRealtimeApiData is not found in the empty JSON string", RegisterRealtimeApiData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterRealtimeApiData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterRealtimeApiData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApiUrl") != null && !jsonObj.get("ApiUrl").isJsonNull()) && !jsonObj.get("ApiUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApiUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApiUrl").toString()));
      }
      if ((jsonObj.get("BasicAuthPassword") != null && !jsonObj.get("BasicAuthPassword").isJsonNull()) && !jsonObj.get("BasicAuthPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BasicAuthPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BasicAuthPassword").toString()));
      }
      if ((jsonObj.get("BasicAuthUsername") != null && !jsonObj.get("BasicAuthUsername").isJsonNull()) && !jsonObj.get("BasicAuthUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BasicAuthUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BasicAuthUsername").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MeterId") != null && !jsonObj.get("MeterId").isJsonNull()) && !jsonObj.get("MeterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeterId").toString()));
      }
      if ((jsonObj.get("RegistrationType") != null && !jsonObj.get("RegistrationType").isJsonNull()) && !jsonObj.get("RegistrationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RegistrationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RegistrationType").toString()));
      }
      // validate the optional field `RegistrationType`
      if (jsonObj.get("RegistrationType") != null && !jsonObj.get("RegistrationType").isJsonNull()) {
        RegistrationTypeEnum.validateJsonElement(jsonObj.get("RegistrationType"));
      }
      if ((jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) && !jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterRealtimeApiData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterRealtimeApiData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterRealtimeApiData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterRealtimeApiData.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterRealtimeApiData>() {
           @Override
           public void write(JsonWriter out, RegisterRealtimeApiData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterRealtimeApiData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterRealtimeApiData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterRealtimeApiData
   * @throws IOException if the JSON string is invalid with respect to RegisterRealtimeApiData
   */
  public static RegisterRealtimeApiData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterRealtimeApiData.class);
  }

  /**
   * Convert an instance of RegisterRealtimeApiData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

