/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container class for the pico charging station API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PicoChargingData {
  public static final String SERIALIZED_NAME_ACTIVE_CHARGING_ENERGY = "ActiveChargingEnergy";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CHARGING_ENERGY)
  private Double activeChargingEnergy;

  public static final String SERIALIZED_NAME_ACTIVE_CHARGING_POWER = "ActiveChargingPower";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CHARGING_POWER)
  private Double activeChargingPower;

  /**
   * The mode how this station is connected to the cloud
   */
  @JsonAdapter(ConnectionModeEnum.Adapter.class)
  public enum ConnectionModeEnum {
    NO_CONNECTION("NetworkToCloudConnectionMode_NoConnection"),
    
    DIRECT_WI_FI_CONNECTION("NetworkToCloudConnectionMode_DirectWiFiConnection"),
    
    GPRS_CONNECTION("NetworkToCloudConnectionMode_GPRSConnection"),
    
    NB_IOT_CONNECTION("NetworkToCloudConnectionMode_NBIotConnection"),
    
    LTE_CAT_M1_CONNECTION("NetworkToCloudConnectionMode_LteCatM1Connection"),
    
    MESH_WI_FI_CONNECTION("NetworkToCloudConnectionMode_MeshWiFiConnection"),
    
    MESH_MOBILE_CONNECTION("NetworkToCloudConnectionMode_MeshMobileConnection");

    private String value;

    ConnectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionModeEnum fromValue(String value) {
      for (ConnectionModeEnum b : ConnectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_MODE = "ConnectionMode";
  @SerializedName(SERIALIZED_NAME_CONNECTION_MODE)
  private ConnectionModeEnum connectionMode;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  /**
   * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
   */
  @JsonAdapter(LastWarningOrErrorEnum.Adapter.class)
  public enum LastWarningOrErrorEnum {
    METER_DATALOGGER_EVENT("MeterDataloggerEvent"),
    
    METER_RESTART("MeterRestart"),
    
    POWER_DOWN("PowerDown"),
    
    MISSING_PHASE_L1("MissingPhaseL1"),
    
    MISSING_PHASE_L2("MissingPhaseL2"),
    
    MISSING_PHASE_L3("MissingPhaseL3"),
    
    TAMPER_DETECTION_COVER("TamperDetectionCover"),
    
    MAGNETIC_FIELD_DETECTION("MagneticFieldDetection"),
    
    CLOCK_ADJUSTED("ClockAdjusted"),
    
    OVERVOLTAGE("Overvoltage"),
    
    UNDERVOLTAGE("Undervoltage"),
    
    OVERVOLTAGE_L1("OvervoltageL1"),
    
    OVERVOLTAGE_L2("OvervoltageL2"),
    
    OVERVOLTAGE_L3("OvervoltageL3"),
    
    CHARGING_TRANSACTION("ChargingTransaction"),
    
    PICO_ERROR_CONTROLLER_PANIC("PicoErrorControllerPanic"),
    
    PICO_ERROR_MID_SERVICE_PANIC("PicoErrorMidServicePanic"),
    
    PICO_WARNING_RCD_TRIGGERED("PicoWarningRcdTriggered"),
    
    PICO_WARNING_CABLE_LOCK_ERROR("PicoWarningCableLockError"),
    
    PICO_WARNING_DIODE_FAILURE("PicoWarningDiodeFailure"),
    
    PICO_WARNING_OVERLOAD("PicoWarningOverload"),
    
    PICO_WARNING_HIGH_TEMPERATURE("PicoWarningHighTemperature");

    private String value;

    LastWarningOrErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastWarningOrErrorEnum fromValue(String value) {
      for (LastWarningOrErrorEnum b : LastWarningOrErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastWarningOrErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastWarningOrErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastWarningOrErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastWarningOrErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastWarningOrErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_WARNING_OR_ERROR = "LastWarningOrError";
  @SerializedName(SERIALIZED_NAME_LAST_WARNING_OR_ERROR)
  private LastWarningOrErrorEnum lastWarningOrError;

  public static final String SERIALIZED_NAME_LAST_WARNING_OR_ERROR_MESSAGE = "LastWarningOrErrorMessage";
  @SerializedName(SERIALIZED_NAME_LAST_WARNING_OR_ERROR_MESSAGE)
  private String lastWarningOrErrorMessage;

  public static final String SERIALIZED_NAME_LAST_WARNING_OR_ERROR_TIME = "LastWarningOrErrorTime";
  @SerializedName(SERIALIZED_NAME_LAST_WARNING_OR_ERROR_TIME)
  private OffsetDateTime lastWarningOrErrorTime;

  /**
   * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
   */
  @JsonAdapter(LoadSheddingStateEnum.Adapter.class)
  public enum LoadSheddingStateEnum {
    MAX_CURRENT("MaxCurrent"),
    
    HALF_CURRENT("HalfCurrent"),
    
    MIN_CURRENT("MinCurrent"),
    
    NO_CURRENT("NoCurrent");

    private String value;

    LoadSheddingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadSheddingStateEnum fromValue(String value) {
      for (LoadSheddingStateEnum b : LoadSheddingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadSheddingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadSheddingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadSheddingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadSheddingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadSheddingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_SHEDDING_STATE = "LoadSheddingState";
  @SerializedName(SERIALIZED_NAME_LOAD_SHEDDING_STATE)
  private LoadSheddingStateEnum loadSheddingState;

  public static final String SERIALIZED_NAME_LOADMANAGEMENT_GROUP_NAME = "LoadmanagementGroupName";
  @SerializedName(SERIALIZED_NAME_LOADMANAGEMENT_GROUP_NAME)
  private String loadmanagementGroupName;

  public static final String SERIALIZED_NAME_MAX_ALLOWED_CHARGING_CURRENT = "MaxAllowedChargingCurrent";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_CHARGING_CURRENT)
  private Integer maxAllowedChargingCurrent;

  public static final String SERIALIZED_NAME_MAX_DYNAMIC_CURRENT = "MaxDynamicCurrent";
  @SerializedName(SERIALIZED_NAME_MAX_DYNAMIC_CURRENT)
  private Integer maxDynamicCurrent;

  public static final String SERIALIZED_NAME_MAX_LOADMANAGEMENT_GROUP_CURRENT = "MaxLoadmanagementGroupCurrent";
  @SerializedName(SERIALIZED_NAME_MAX_LOADMANAGEMENT_GROUP_CURRENT)
  private Integer maxLoadmanagementGroupCurrent;

  public static final String SERIALIZED_NAME_MAX_STATION_CURRENT = "MaxStationCurrent";
  @SerializedName(SERIALIZED_NAME_MAX_STATION_CURRENT)
  private Integer maxStationCurrent;

  public static final String SERIALIZED_NAME_MIN_STATION_CURRENT = "MinStationCurrent";
  @SerializedName(SERIALIZED_NAME_MIN_STATION_CURRENT)
  private Integer minStationCurrent;

  public static final String SERIALIZED_NAME_R_S_S_I = "RSSI";
  @SerializedName(SERIALIZED_NAME_R_S_S_I)
  private Integer RSSI;

  /**
   * The state of the charging station
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    BOOTING("Booting"),
    
    READY_NO_CAR_CONNECTED("ReadyNoCarConnected"),
    
    READY_CAR_CONNECTED("ReadyCarConnected"),
    
    STARTED_WAIT_FOR_CAR("StartedWaitForCar"),
    
    CHARGING("Charging"),
    
    INSTALLATION("Installation"),
    
    AUTHORIZE("Authorize"),
    
    OFFLINE("Offline");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VALUE_DATE = "ValueDate";
  @SerializedName(SERIALIZED_NAME_VALUE_DATE)
  private OffsetDateTime valueDate;

  public PicoChargingData() {
  }

  public PicoChargingData(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public PicoChargingData activeChargingEnergy(Double activeChargingEnergy) {
    this.activeChargingEnergy = activeChargingEnergy;
    return this;
  }

  /**
   * The energy used by this active charging (in kWh)
   * @return activeChargingEnergy
   */
  @javax.annotation.Nullable
  public Double getActiveChargingEnergy() {
    return activeChargingEnergy;
  }

  public void setActiveChargingEnergy(Double activeChargingEnergy) {
    this.activeChargingEnergy = activeChargingEnergy;
  }


  public PicoChargingData activeChargingPower(Double activeChargingPower) {
    this.activeChargingPower = activeChargingPower;
    return this;
  }

  /**
   * The power of the active charging (in kW)
   * @return activeChargingPower
   */
  @javax.annotation.Nullable
  public Double getActiveChargingPower() {
    return activeChargingPower;
  }

  public void setActiveChargingPower(Double activeChargingPower) {
    this.activeChargingPower = activeChargingPower;
  }


  public PicoChargingData connectionMode(ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

  /**
   * The mode how this station is connected to the cloud
   * @return connectionMode
   */
  @javax.annotation.Nullable
  public ConnectionModeEnum getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
  }


  public PicoChargingData duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of this charging in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public PicoChargingData lastWarningOrError(LastWarningOrErrorEnum lastWarningOrError) {
    this.lastWarningOrError = lastWarningOrError;
    return this;
  }

  /**
   * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
   * @return lastWarningOrError
   */
  @javax.annotation.Nullable
  public LastWarningOrErrorEnum getLastWarningOrError() {
    return lastWarningOrError;
  }

  public void setLastWarningOrError(LastWarningOrErrorEnum lastWarningOrError) {
    this.lastWarningOrError = lastWarningOrError;
  }


  public PicoChargingData lastWarningOrErrorMessage(String lastWarningOrErrorMessage) {
    this.lastWarningOrErrorMessage = lastWarningOrErrorMessage;
    return this;
  }

  /**
   * The message of the last warning or error of the station.
   * @return lastWarningOrErrorMessage
   */
  @javax.annotation.Nullable
  public String getLastWarningOrErrorMessage() {
    return lastWarningOrErrorMessage;
  }

  public void setLastWarningOrErrorMessage(String lastWarningOrErrorMessage) {
    this.lastWarningOrErrorMessage = lastWarningOrErrorMessage;
  }


  public PicoChargingData lastWarningOrErrorTime(OffsetDateTime lastWarningOrErrorTime) {
    this.lastWarningOrErrorTime = lastWarningOrErrorTime;
    return this;
  }

  /**
   * The time when the LastWarningOrError happend
   * @return lastWarningOrErrorTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastWarningOrErrorTime() {
    return lastWarningOrErrorTime;
  }

  public void setLastWarningOrErrorTime(OffsetDateTime lastWarningOrErrorTime) {
    this.lastWarningOrErrorTime = lastWarningOrErrorTime;
  }


  public PicoChargingData loadSheddingState(LoadSheddingStateEnum loadSheddingState) {
    this.loadSheddingState = loadSheddingState;
    return this;
  }

  /**
   * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
   * @return loadSheddingState
   */
  @javax.annotation.Nullable
  public LoadSheddingStateEnum getLoadSheddingState() {
    return loadSheddingState;
  }

  public void setLoadSheddingState(LoadSheddingStateEnum loadSheddingState) {
    this.loadSheddingState = loadSheddingState;
  }


  public PicoChargingData loadmanagementGroupName(String loadmanagementGroupName) {
    this.loadmanagementGroupName = loadmanagementGroupName;
    return this;
  }

  /**
   * The name of the loadmanagement group. Or string.empty if the station is not in a group
   * @return loadmanagementGroupName
   */
  @javax.annotation.Nullable
  public String getLoadmanagementGroupName() {
    return loadmanagementGroupName;
  }

  public void setLoadmanagementGroupName(String loadmanagementGroupName) {
    this.loadmanagementGroupName = loadmanagementGroupName;
  }


  public PicoChargingData maxAllowedChargingCurrent(Integer maxAllowedChargingCurrent) {
    this.maxAllowedChargingCurrent = maxAllowedChargingCurrent;
    return this;
  }

  /**
   * Max allowed charging current in A
   * @return maxAllowedChargingCurrent
   */
  @javax.annotation.Nullable
  public Integer getMaxAllowedChargingCurrent() {
    return maxAllowedChargingCurrent;
  }

  public void setMaxAllowedChargingCurrent(Integer maxAllowedChargingCurrent) {
    this.maxAllowedChargingCurrent = maxAllowedChargingCurrent;
  }


  public PicoChargingData maxDynamicCurrent(Integer maxDynamicCurrent) {
    this.maxDynamicCurrent = maxDynamicCurrent;
    return this;
  }

  /**
   * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
   * @return maxDynamicCurrent
   */
  @javax.annotation.Nullable
  public Integer getMaxDynamicCurrent() {
    return maxDynamicCurrent;
  }

  public void setMaxDynamicCurrent(Integer maxDynamicCurrent) {
    this.maxDynamicCurrent = maxDynamicCurrent;
  }


  public PicoChargingData maxLoadmanagementGroupCurrent(Integer maxLoadmanagementGroupCurrent) {
    this.maxLoadmanagementGroupCurrent = maxLoadmanagementGroupCurrent;
    return this;
  }

  /**
   * Max. current of the loadmanagement group of this station (if there is any) in A
   * @return maxLoadmanagementGroupCurrent
   */
  @javax.annotation.Nullable
  public Integer getMaxLoadmanagementGroupCurrent() {
    return maxLoadmanagementGroupCurrent;
  }

  public void setMaxLoadmanagementGroupCurrent(Integer maxLoadmanagementGroupCurrent) {
    this.maxLoadmanagementGroupCurrent = maxLoadmanagementGroupCurrent;
  }


  public PicoChargingData maxStationCurrent(Integer maxStationCurrent) {
    this.maxStationCurrent = maxStationCurrent;
    return this;
  }

  /**
   * Max. current of the station in A
   * @return maxStationCurrent
   */
  @javax.annotation.Nullable
  public Integer getMaxStationCurrent() {
    return maxStationCurrent;
  }

  public void setMaxStationCurrent(Integer maxStationCurrent) {
    this.maxStationCurrent = maxStationCurrent;
  }


  public PicoChargingData minStationCurrent(Integer minStationCurrent) {
    this.minStationCurrent = minStationCurrent;
    return this;
  }

  /**
   * Min. current of the station in A
   * @return minStationCurrent
   */
  @javax.annotation.Nullable
  public Integer getMinStationCurrent() {
    return minStationCurrent;
  }

  public void setMinStationCurrent(Integer minStationCurrent) {
    this.minStationCurrent = minStationCurrent;
  }


  public PicoChargingData RSSI(Integer RSSI) {
    this.RSSI = RSSI;
    return this;
  }

  /**
   * Received Signal Strength Indicator for the connection mode (wifi or mobile).               -127 (min) to 0 (Max)
   * @return RSSI
   */
  @javax.annotation.Nullable
  public Integer getRSSI() {
    return RSSI;
  }

  public void setRSSI(Integer RSSI) {
    this.RSSI = RSSI;
  }


  /**
   * The state of the charging station
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public PicoChargingData valueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
    return this;
  }

  /**
   * The date of this values
   * @return valueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValueDate() {
    return valueDate;
  }

  public void setValueDate(OffsetDateTime valueDate) {
    this.valueDate = valueDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PicoChargingData picoChargingData = (PicoChargingData) o;
    return Objects.equals(this.activeChargingEnergy, picoChargingData.activeChargingEnergy) &&
        Objects.equals(this.activeChargingPower, picoChargingData.activeChargingPower) &&
        Objects.equals(this.connectionMode, picoChargingData.connectionMode) &&
        Objects.equals(this.duration, picoChargingData.duration) &&
        Objects.equals(this.lastWarningOrError, picoChargingData.lastWarningOrError) &&
        Objects.equals(this.lastWarningOrErrorMessage, picoChargingData.lastWarningOrErrorMessage) &&
        Objects.equals(this.lastWarningOrErrorTime, picoChargingData.lastWarningOrErrorTime) &&
        Objects.equals(this.loadSheddingState, picoChargingData.loadSheddingState) &&
        Objects.equals(this.loadmanagementGroupName, picoChargingData.loadmanagementGroupName) &&
        Objects.equals(this.maxAllowedChargingCurrent, picoChargingData.maxAllowedChargingCurrent) &&
        Objects.equals(this.maxDynamicCurrent, picoChargingData.maxDynamicCurrent) &&
        Objects.equals(this.maxLoadmanagementGroupCurrent, picoChargingData.maxLoadmanagementGroupCurrent) &&
        Objects.equals(this.maxStationCurrent, picoChargingData.maxStationCurrent) &&
        Objects.equals(this.minStationCurrent, picoChargingData.minStationCurrent) &&
        Objects.equals(this.RSSI, picoChargingData.RSSI) &&
        Objects.equals(this.state, picoChargingData.state) &&
        Objects.equals(this.valueDate, picoChargingData.valueDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeChargingEnergy, activeChargingPower, connectionMode, duration, lastWarningOrError, lastWarningOrErrorMessage, lastWarningOrErrorTime, loadSheddingState, loadmanagementGroupName, maxAllowedChargingCurrent, maxDynamicCurrent, maxLoadmanagementGroupCurrent, maxStationCurrent, minStationCurrent, RSSI, state, valueDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PicoChargingData {\n");
    sb.append("    activeChargingEnergy: ").append(toIndentedString(activeChargingEnergy)).append("\n");
    sb.append("    activeChargingPower: ").append(toIndentedString(activeChargingPower)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    lastWarningOrError: ").append(toIndentedString(lastWarningOrError)).append("\n");
    sb.append("    lastWarningOrErrorMessage: ").append(toIndentedString(lastWarningOrErrorMessage)).append("\n");
    sb.append("    lastWarningOrErrorTime: ").append(toIndentedString(lastWarningOrErrorTime)).append("\n");
    sb.append("    loadSheddingState: ").append(toIndentedString(loadSheddingState)).append("\n");
    sb.append("    loadmanagementGroupName: ").append(toIndentedString(loadmanagementGroupName)).append("\n");
    sb.append("    maxAllowedChargingCurrent: ").append(toIndentedString(maxAllowedChargingCurrent)).append("\n");
    sb.append("    maxDynamicCurrent: ").append(toIndentedString(maxDynamicCurrent)).append("\n");
    sb.append("    maxLoadmanagementGroupCurrent: ").append(toIndentedString(maxLoadmanagementGroupCurrent)).append("\n");
    sb.append("    maxStationCurrent: ").append(toIndentedString(maxStationCurrent)).append("\n");
    sb.append("    minStationCurrent: ").append(toIndentedString(minStationCurrent)).append("\n");
    sb.append("    RSSI: ").append(toIndentedString(RSSI)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveChargingEnergy");
    openapiFields.add("ActiveChargingPower");
    openapiFields.add("ConnectionMode");
    openapiFields.add("Duration");
    openapiFields.add("LastWarningOrError");
    openapiFields.add("LastWarningOrErrorMessage");
    openapiFields.add("LastWarningOrErrorTime");
    openapiFields.add("LoadSheddingState");
    openapiFields.add("LoadmanagementGroupName");
    openapiFields.add("MaxAllowedChargingCurrent");
    openapiFields.add("MaxDynamicCurrent");
    openapiFields.add("MaxLoadmanagementGroupCurrent");
    openapiFields.add("MaxStationCurrent");
    openapiFields.add("MinStationCurrent");
    openapiFields.add("RSSI");
    openapiFields.add("State");
    openapiFields.add("ValueDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PicoChargingData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PicoChargingData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PicoChargingData is not found in the empty JSON string", PicoChargingData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PicoChargingData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PicoChargingData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ConnectionMode") != null && !jsonObj.get("ConnectionMode").isJsonNull()) && !jsonObj.get("ConnectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectionMode").toString()));
      }
      // validate the optional field `ConnectionMode`
      if (jsonObj.get("ConnectionMode") != null && !jsonObj.get("ConnectionMode").isJsonNull()) {
        ConnectionModeEnum.validateJsonElement(jsonObj.get("ConnectionMode"));
      }
      if ((jsonObj.get("LastWarningOrError") != null && !jsonObj.get("LastWarningOrError").isJsonNull()) && !jsonObj.get("LastWarningOrError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastWarningOrError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastWarningOrError").toString()));
      }
      // validate the optional field `LastWarningOrError`
      if (jsonObj.get("LastWarningOrError") != null && !jsonObj.get("LastWarningOrError").isJsonNull()) {
        LastWarningOrErrorEnum.validateJsonElement(jsonObj.get("LastWarningOrError"));
      }
      if ((jsonObj.get("LastWarningOrErrorMessage") != null && !jsonObj.get("LastWarningOrErrorMessage").isJsonNull()) && !jsonObj.get("LastWarningOrErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastWarningOrErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastWarningOrErrorMessage").toString()));
      }
      if ((jsonObj.get("LoadSheddingState") != null && !jsonObj.get("LoadSheddingState").isJsonNull()) && !jsonObj.get("LoadSheddingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoadSheddingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoadSheddingState").toString()));
      }
      // validate the optional field `LoadSheddingState`
      if (jsonObj.get("LoadSheddingState") != null && !jsonObj.get("LoadSheddingState").isJsonNull()) {
        LoadSheddingStateEnum.validateJsonElement(jsonObj.get("LoadSheddingState"));
      }
      if ((jsonObj.get("LoadmanagementGroupName") != null && !jsonObj.get("LoadmanagementGroupName").isJsonNull()) && !jsonObj.get("LoadmanagementGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoadmanagementGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoadmanagementGroupName").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("State"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PicoChargingData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PicoChargingData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PicoChargingData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PicoChargingData.class));

       return (TypeAdapter<T>) new TypeAdapter<PicoChargingData>() {
           @Override
           public void write(JsonWriter out, PicoChargingData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PicoChargingData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PicoChargingData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PicoChargingData
   * @throws IOException if the JSON string is invalid with respect to PicoChargingData
   */
  public static PicoChargingData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PicoChargingData.class);
  }

  /**
   * Convert an instance of PicoChargingData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

