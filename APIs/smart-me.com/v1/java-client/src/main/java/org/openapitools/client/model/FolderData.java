/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container class for the folder API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FolderData {
  public static final String SERIALIZED_NAME_ELECTRICITY_COUNTER_VALUE = "ElectricityCounterValue";
  @SerializedName(SERIALIZED_NAME_ELECTRICITY_COUNTER_VALUE)
  private Double electricityCounterValue;

  public static final String SERIALIZED_NAME_ELECTRICITY_POWER = "ElectricityPower";
  @SerializedName(SERIALIZED_NAME_ELECTRICITY_POWER)
  private Double electricityPower;

  public static final String SERIALIZED_NAME_GAS_COUNTER_VALUE = "GasCounterValue";
  @SerializedName(SERIALIZED_NAME_GAS_COUNTER_VALUE)
  private Double gasCounterValue;

  public static final String SERIALIZED_NAME_GAS_FLOW_RATE = "GasFlowRate";
  @SerializedName(SERIALIZED_NAME_GAS_FLOW_RATE)
  private Double gasFlowRate;

  public static final String SERIALIZED_NAME_HEAT_COUNTER_VALUE = "HeatCounterValue";
  @SerializedName(SERIALIZED_NAME_HEAT_COUNTER_VALUE)
  private Double heatCounterValue;

  public static final String SERIALIZED_NAME_HEAT_POWER = "HeatPower";
  @SerializedName(SERIALIZED_NAME_HEAT_POWER)
  private Double heatPower;

  public static final String SERIALIZED_NAME_WATER_COUNTER_VALUE = "WaterCounterValue";
  @SerializedName(SERIALIZED_NAME_WATER_COUNTER_VALUE)
  private Double waterCounterValue;

  public static final String SERIALIZED_NAME_WATER_FLOW_RATE = "WaterFlowRate";
  @SerializedName(SERIALIZED_NAME_WATER_FLOW_RATE)
  private Double waterFlowRate;

  public FolderData() {
  }

  public FolderData electricityCounterValue(Double electricityCounterValue) {
    this.electricityCounterValue = electricityCounterValue;
    return this;
  }

  /**
   * The Counter values for electricity (kWh)
   * @return electricityCounterValue
   */
  @javax.annotation.Nullable
  public Double getElectricityCounterValue() {
    return electricityCounterValue;
  }

  public void setElectricityCounterValue(Double electricityCounterValue) {
    this.electricityCounterValue = electricityCounterValue;
  }


  public FolderData electricityPower(Double electricityPower) {
    this.electricityPower = electricityPower;
    return this;
  }

  /**
   * The Power for electricity (kW)
   * @return electricityPower
   */
  @javax.annotation.Nullable
  public Double getElectricityPower() {
    return electricityPower;
  }

  public void setElectricityPower(Double electricityPower) {
    this.electricityPower = electricityPower;
  }


  public FolderData gasCounterValue(Double gasCounterValue) {
    this.gasCounterValue = gasCounterValue;
    return this;
  }

  /**
   * The Counter values for Gas (m3)
   * @return gasCounterValue
   */
  @javax.annotation.Nullable
  public Double getGasCounterValue() {
    return gasCounterValue;
  }

  public void setGasCounterValue(Double gasCounterValue) {
    this.gasCounterValue = gasCounterValue;
  }


  public FolderData gasFlowRate(Double gasFlowRate) {
    this.gasFlowRate = gasFlowRate;
    return this;
  }

  /**
   * The Flow Rate for Gas (m3/h)
   * @return gasFlowRate
   */
  @javax.annotation.Nullable
  public Double getGasFlowRate() {
    return gasFlowRate;
  }

  public void setGasFlowRate(Double gasFlowRate) {
    this.gasFlowRate = gasFlowRate;
  }


  public FolderData heatCounterValue(Double heatCounterValue) {
    this.heatCounterValue = heatCounterValue;
    return this;
  }

  /**
   * The Counter values for Heat (kWh)
   * @return heatCounterValue
   */
  @javax.annotation.Nullable
  public Double getHeatCounterValue() {
    return heatCounterValue;
  }

  public void setHeatCounterValue(Double heatCounterValue) {
    this.heatCounterValue = heatCounterValue;
  }


  public FolderData heatPower(Double heatPower) {
    this.heatPower = heatPower;
    return this;
  }

  /**
   * The Power for Heat (kW)
   * @return heatPower
   */
  @javax.annotation.Nullable
  public Double getHeatPower() {
    return heatPower;
  }

  public void setHeatPower(Double heatPower) {
    this.heatPower = heatPower;
  }


  public FolderData waterCounterValue(Double waterCounterValue) {
    this.waterCounterValue = waterCounterValue;
    return this;
  }

  /**
   * The Counter values for Water (m3)
   * @return waterCounterValue
   */
  @javax.annotation.Nullable
  public Double getWaterCounterValue() {
    return waterCounterValue;
  }

  public void setWaterCounterValue(Double waterCounterValue) {
    this.waterCounterValue = waterCounterValue;
  }


  public FolderData waterFlowRate(Double waterFlowRate) {
    this.waterFlowRate = waterFlowRate;
    return this;
  }

  /**
   * The Flow Rate for Water (m3/h)
   * @return waterFlowRate
   */
  @javax.annotation.Nullable
  public Double getWaterFlowRate() {
    return waterFlowRate;
  }

  public void setWaterFlowRate(Double waterFlowRate) {
    this.waterFlowRate = waterFlowRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderData folderData = (FolderData) o;
    return Objects.equals(this.electricityCounterValue, folderData.electricityCounterValue) &&
        Objects.equals(this.electricityPower, folderData.electricityPower) &&
        Objects.equals(this.gasCounterValue, folderData.gasCounterValue) &&
        Objects.equals(this.gasFlowRate, folderData.gasFlowRate) &&
        Objects.equals(this.heatCounterValue, folderData.heatCounterValue) &&
        Objects.equals(this.heatPower, folderData.heatPower) &&
        Objects.equals(this.waterCounterValue, folderData.waterCounterValue) &&
        Objects.equals(this.waterFlowRate, folderData.waterFlowRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(electricityCounterValue, electricityPower, gasCounterValue, gasFlowRate, heatCounterValue, heatPower, waterCounterValue, waterFlowRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderData {\n");
    sb.append("    electricityCounterValue: ").append(toIndentedString(electricityCounterValue)).append("\n");
    sb.append("    electricityPower: ").append(toIndentedString(electricityPower)).append("\n");
    sb.append("    gasCounterValue: ").append(toIndentedString(gasCounterValue)).append("\n");
    sb.append("    gasFlowRate: ").append(toIndentedString(gasFlowRate)).append("\n");
    sb.append("    heatCounterValue: ").append(toIndentedString(heatCounterValue)).append("\n");
    sb.append("    heatPower: ").append(toIndentedString(heatPower)).append("\n");
    sb.append("    waterCounterValue: ").append(toIndentedString(waterCounterValue)).append("\n");
    sb.append("    waterFlowRate: ").append(toIndentedString(waterFlowRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ElectricityCounterValue");
    openapiFields.add("ElectricityPower");
    openapiFields.add("GasCounterValue");
    openapiFields.add("GasFlowRate");
    openapiFields.add("HeatCounterValue");
    openapiFields.add("HeatPower");
    openapiFields.add("WaterCounterValue");
    openapiFields.add("WaterFlowRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FolderData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FolderData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderData is not found in the empty JSON string", FolderData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FolderData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FolderData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderData.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderData>() {
           @Override
           public void write(JsonWriter out, FolderData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FolderData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FolderData
   * @throws IOException if the JSON string is invalid with respect to FolderData
   */
  public static FolderData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderData.class);
  }

  /**
   * Convert an instance of FolderData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

