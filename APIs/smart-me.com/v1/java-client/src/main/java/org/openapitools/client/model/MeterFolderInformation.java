/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputInformation;
import org.openapitools.client.model.OutputInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Class for the Web API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeterFolderInformation {
  public static final String SERIALIZED_NAME_COMMUNICATION_MODULE_FIRMWARE_VERSION = "CommunicationModuleFirmwareVersion";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_MODULE_FIRMWARE_VERSION)
  private Integer communicationModuleFirmwareVersion;

  public static final String SERIALIZED_NAME_COMMUNICATION_MODULE_HARDWARE_VERSION = "CommunicationModuleHardwareVersion";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_MODULE_HARDWARE_VERSION)
  private Integer communicationModuleHardwareVersion;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "FirmwareVersion";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private Integer firmwareVersion;

  public static final String SERIALIZED_NAME_HARDWARE_VERSION = "HardwareVersion";
  @SerializedName(SERIALIZED_NAME_HARDWARE_VERSION)
  private Integer hardwareVersion;

  public static final String SERIALIZED_NAME_INPUT_INFORMATIONS = "InputInformations";
  @SerializedName(SERIALIZED_NAME_INPUT_INFORMATIONS)
  private List<InputInformation> inputInformations = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_FOLDER = "IsFolder";
  @SerializedName(SERIALIZED_NAME_IS_FOLDER)
  private Boolean isFolder;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_INFORMATIONS = "OutputInformations";
  @SerializedName(SERIALIZED_NAME_OUTPUT_INFORMATIONS)
  private List<OutputInformation> outputInformations = new ArrayList<>();

  public MeterFolderInformation() {
  }

  public MeterFolderInformation communicationModuleFirmwareVersion(Integer communicationModuleFirmwareVersion) {
    this.communicationModuleFirmwareVersion = communicationModuleFirmwareVersion;
    return this;
  }

  /**
   * The Version of the Communication Module (if exists)
   * @return communicationModuleFirmwareVersion
   */
  @javax.annotation.Nullable
  public Integer getCommunicationModuleFirmwareVersion() {
    return communicationModuleFirmwareVersion;
  }

  public void setCommunicationModuleFirmwareVersion(Integer communicationModuleFirmwareVersion) {
    this.communicationModuleFirmwareVersion = communicationModuleFirmwareVersion;
  }


  public MeterFolderInformation communicationModuleHardwareVersion(Integer communicationModuleHardwareVersion) {
    this.communicationModuleHardwareVersion = communicationModuleHardwareVersion;
    return this;
  }

  /**
   * The Version of the Communication Module (if exists)
   * @return communicationModuleHardwareVersion
   */
  @javax.annotation.Nullable
  public Integer getCommunicationModuleHardwareVersion() {
    return communicationModuleHardwareVersion;
  }

  public void setCommunicationModuleHardwareVersion(Integer communicationModuleHardwareVersion) {
    this.communicationModuleHardwareVersion = communicationModuleHardwareVersion;
  }


  public MeterFolderInformation firmwareVersion(Integer firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  /**
   * The Firmware Version of a Meter
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public Integer getFirmwareVersion() {
    return firmwareVersion;
  }

  public void setFirmwareVersion(Integer firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
  }


  public MeterFolderInformation hardwareVersion(Integer hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
    return this;
  }

  /**
   * The Hardware Version of a Meter.
   * @return hardwareVersion
   */
  @javax.annotation.Nullable
  public Integer getHardwareVersion() {
    return hardwareVersion;
  }

  public void setHardwareVersion(Integer hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
  }


  public MeterFolderInformation inputInformations(List<InputInformation> inputInformations) {
    this.inputInformations = inputInformations;
    return this;
  }

  public MeterFolderInformation addInputInformationsItem(InputInformation inputInformationsItem) {
    if (this.inputInformations == null) {
      this.inputInformations = new ArrayList<>();
    }
    this.inputInformations.add(inputInformationsItem);
    return this;
  }

  /**
   * Informations about the available Inputs
   * @return inputInformations
   */
  @javax.annotation.Nullable
  public List<InputInformation> getInputInformations() {
    return inputInformations;
  }

  public void setInputInformations(List<InputInformation> inputInformations) {
    this.inputInformations = inputInformations;
  }


  public MeterFolderInformation isFolder(Boolean isFolder) {
    this.isFolder = isFolder;
    return this;
  }

  /**
   * Flag if it&#39;s a Folder or a Meter
   * @return isFolder
   */
  @javax.annotation.Nullable
  public Boolean getIsFolder() {
    return isFolder;
  }

  public void setIsFolder(Boolean isFolder) {
    this.isFolder = isFolder;
  }


  public MeterFolderInformation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Meter or Folder
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MeterFolderInformation outputInformations(List<OutputInformation> outputInformations) {
    this.outputInformations = outputInformations;
    return this;
  }

  public MeterFolderInformation addOutputInformationsItem(OutputInformation outputInformationsItem) {
    if (this.outputInformations == null) {
      this.outputInformations = new ArrayList<>();
    }
    this.outputInformations.add(outputInformationsItem);
    return this;
  }

  /**
   * Informations about the available Outputs
   * @return outputInformations
   */
  @javax.annotation.Nullable
  public List<OutputInformation> getOutputInformations() {
    return outputInformations;
  }

  public void setOutputInformations(List<OutputInformation> outputInformations) {
    this.outputInformations = outputInformations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeterFolderInformation meterFolderInformation = (MeterFolderInformation) o;
    return Objects.equals(this.communicationModuleFirmwareVersion, meterFolderInformation.communicationModuleFirmwareVersion) &&
        Objects.equals(this.communicationModuleHardwareVersion, meterFolderInformation.communicationModuleHardwareVersion) &&
        Objects.equals(this.firmwareVersion, meterFolderInformation.firmwareVersion) &&
        Objects.equals(this.hardwareVersion, meterFolderInformation.hardwareVersion) &&
        Objects.equals(this.inputInformations, meterFolderInformation.inputInformations) &&
        Objects.equals(this.isFolder, meterFolderInformation.isFolder) &&
        Objects.equals(this.name, meterFolderInformation.name) &&
        Objects.equals(this.outputInformations, meterFolderInformation.outputInformations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communicationModuleFirmwareVersion, communicationModuleHardwareVersion, firmwareVersion, hardwareVersion, inputInformations, isFolder, name, outputInformations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeterFolderInformation {\n");
    sb.append("    communicationModuleFirmwareVersion: ").append(toIndentedString(communicationModuleFirmwareVersion)).append("\n");
    sb.append("    communicationModuleHardwareVersion: ").append(toIndentedString(communicationModuleHardwareVersion)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    hardwareVersion: ").append(toIndentedString(hardwareVersion)).append("\n");
    sb.append("    inputInformations: ").append(toIndentedString(inputInformations)).append("\n");
    sb.append("    isFolder: ").append(toIndentedString(isFolder)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputInformations: ").append(toIndentedString(outputInformations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CommunicationModuleFirmwareVersion");
    openapiFields.add("CommunicationModuleHardwareVersion");
    openapiFields.add("FirmwareVersion");
    openapiFields.add("HardwareVersion");
    openapiFields.add("InputInformations");
    openapiFields.add("IsFolder");
    openapiFields.add("Name");
    openapiFields.add("OutputInformations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeterFolderInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeterFolderInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeterFolderInformation is not found in the empty JSON string", MeterFolderInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeterFolderInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeterFolderInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("InputInformations") != null && !jsonObj.get("InputInformations").isJsonNull()) {
        JsonArray jsonArrayinputInformations = jsonObj.getAsJsonArray("InputInformations");
        if (jsonArrayinputInformations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("InputInformations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `InputInformations` to be an array in the JSON string but got `%s`", jsonObj.get("InputInformations").toString()));
          }

          // validate the optional field `InputInformations` (array)
          for (int i = 0; i < jsonArrayinputInformations.size(); i++) {
            InputInformation.validateJsonElement(jsonArrayinputInformations.get(i));
          };
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("OutputInformations") != null && !jsonObj.get("OutputInformations").isJsonNull()) {
        JsonArray jsonArrayoutputInformations = jsonObj.getAsJsonArray("OutputInformations");
        if (jsonArrayoutputInformations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OutputInformations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OutputInformations` to be an array in the JSON string but got `%s`", jsonObj.get("OutputInformations").toString()));
          }

          // validate the optional field `OutputInformations` (array)
          for (int i = 0; i < jsonArrayoutputInformations.size(); i++) {
            OutputInformation.validateJsonElement(jsonArrayoutputInformations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeterFolderInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeterFolderInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeterFolderInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeterFolderInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<MeterFolderInformation>() {
           @Override
           public void write(JsonWriter out, MeterFolderInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeterFolderInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeterFolderInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeterFolderInformation
   * @throws IOException if the JSON string is invalid with respect to MeterFolderInformation
   */
  public static MeterFolderInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeterFolderInformation.class);
  }

  /**
   * Convert an instance of MeterFolderInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

