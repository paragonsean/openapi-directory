/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional Information For a device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalDeviceInformation {
  public static final String SERIALIZED_NAME_ADDITIONAL_METER_SERIAL_NUMBER = "AdditionalMeterSerialNumber";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METER_SERIAL_NUMBER)
  private String additionalMeterSerialNumber;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "FirmwareVersion";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private Integer firmwareVersion;

  public static final String SERIALIZED_NAME_HARDWARE_VERSION = "HardwareVersion";
  @SerializedName(SERIALIZED_NAME_HARDWARE_VERSION)
  private Integer hardwareVersion;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_NETWORK_CONNECTION = "NetworkConnection";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONNECTION)
  private String networkConnection;

  public static final String SERIALIZED_NAME_NETWORK_CONNECTION_R_S_S_I = "NetworkConnectionRSSI";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONNECTION_R_S_S_I)
  private Integer networkConnectionRSSI;

  public AdditionalDeviceInformation() {
  }

  public AdditionalDeviceInformation additionalMeterSerialNumber(String additionalMeterSerialNumber) {
    this.additionalMeterSerialNumber = additionalMeterSerialNumber;
    return this;
  }

  /**
   * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
   * @return additionalMeterSerialNumber
   */
  @javax.annotation.Nullable
  public String getAdditionalMeterSerialNumber() {
    return additionalMeterSerialNumber;
  }

  public void setAdditionalMeterSerialNumber(String additionalMeterSerialNumber) {
    this.additionalMeterSerialNumber = additionalMeterSerialNumber;
  }


  public AdditionalDeviceInformation firmwareVersion(Integer firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  /**
   * The Firmware Version of a Meter
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public Integer getFirmwareVersion() {
    return firmwareVersion;
  }

  public void setFirmwareVersion(Integer firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
  }


  public AdditionalDeviceInformation hardwareVersion(Integer hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
    return this;
  }

  /**
   * The Hardware Version of a Meter.
   * @return hardwareVersion
   */
  @javax.annotation.Nullable
  public Integer getHardwareVersion() {
    return hardwareVersion;
  }

  public void setHardwareVersion(Integer hardwareVersion) {
    this.hardwareVersion = hardwareVersion;
  }


  public AdditionalDeviceInformation ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * The ID of the device
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public AdditionalDeviceInformation networkConnection(String networkConnection) {
    this.networkConnection = networkConnection;
    return this;
  }

  /**
   * The mode how the device is connected to the network. Valid values are:              wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi
   * @return networkConnection
   */
  @javax.annotation.Nullable
  public String getNetworkConnection() {
    return networkConnection;
  }

  public void setNetworkConnection(String networkConnection) {
    this.networkConnection = networkConnection;
  }


  public AdditionalDeviceInformation networkConnectionRSSI(Integer networkConnectionRSSI) {
    this.networkConnectionRSSI = networkConnectionRSSI;
    return this;
  }

  /**
   * The connection RSSI value (0 is bad, 100 is best)
   * @return networkConnectionRSSI
   */
  @javax.annotation.Nullable
  public Integer getNetworkConnectionRSSI() {
    return networkConnectionRSSI;
  }

  public void setNetworkConnectionRSSI(Integer networkConnectionRSSI) {
    this.networkConnectionRSSI = networkConnectionRSSI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalDeviceInformation additionalDeviceInformation = (AdditionalDeviceInformation) o;
    return Objects.equals(this.additionalMeterSerialNumber, additionalDeviceInformation.additionalMeterSerialNumber) &&
        Objects.equals(this.firmwareVersion, additionalDeviceInformation.firmwareVersion) &&
        Objects.equals(this.hardwareVersion, additionalDeviceInformation.hardwareVersion) &&
        Objects.equals(this.ID, additionalDeviceInformation.ID) &&
        Objects.equals(this.networkConnection, additionalDeviceInformation.networkConnection) &&
        Objects.equals(this.networkConnectionRSSI, additionalDeviceInformation.networkConnectionRSSI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMeterSerialNumber, firmwareVersion, hardwareVersion, ID, networkConnection, networkConnectionRSSI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalDeviceInformation {\n");
    sb.append("    additionalMeterSerialNumber: ").append(toIndentedString(additionalMeterSerialNumber)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    hardwareVersion: ").append(toIndentedString(hardwareVersion)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    networkConnection: ").append(toIndentedString(networkConnection)).append("\n");
    sb.append("    networkConnectionRSSI: ").append(toIndentedString(networkConnectionRSSI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalMeterSerialNumber");
    openapiFields.add("FirmwareVersion");
    openapiFields.add("HardwareVersion");
    openapiFields.add("ID");
    openapiFields.add("NetworkConnection");
    openapiFields.add("NetworkConnectionRSSI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalDeviceInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalDeviceInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalDeviceInformation is not found in the empty JSON string", AdditionalDeviceInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalDeviceInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalDeviceInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdditionalMeterSerialNumber") != null && !jsonObj.get("AdditionalMeterSerialNumber").isJsonNull()) && !jsonObj.get("AdditionalMeterSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalMeterSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalMeterSerialNumber").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("NetworkConnection") != null && !jsonObj.get("NetworkConnection").isJsonNull()) && !jsonObj.get("NetworkConnection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetworkConnection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NetworkConnection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalDeviceInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalDeviceInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalDeviceInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDeviceInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalDeviceInformation>() {
           @Override
           public void write(JsonWriter out, AdditionalDeviceInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalDeviceInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalDeviceInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalDeviceInformation
   * @throws IOException if the JSON string is invalid with respect to AdditionalDeviceInformation
   */
  public static AdditionalDeviceInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalDeviceInformation.class);
  }

  /**
   * Convert an instance of AdditionalDeviceInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

