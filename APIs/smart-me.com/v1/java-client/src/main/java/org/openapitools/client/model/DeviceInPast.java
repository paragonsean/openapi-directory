/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Class for the Web API. Conatinas the MeterValues in the Past
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceInPast {
  public static final String SERIALIZED_NAME_COUNTER_READING = "CounterReading";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING)
  private Double counterReading;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT = "CounterReadingExport";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT)
  private Double counterReadingExport;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T1 = "CounterReadingExportT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T1)
  private Double counterReadingExportT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T2 = "CounterReadingExportT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T2)
  private Double counterReadingExportT2;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T3 = "CounterReadingExportT3";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T3)
  private Double counterReadingExportT3;

  public static final String SERIALIZED_NAME_COUNTER_READING_EXPORT_T4 = "CounterReadingExportT4";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_EXPORT_T4)
  private Double counterReadingExportT4;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT = "CounterReadingImport";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT)
  private Double counterReadingImport;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT_T1 = "CounterReadingImportT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT_T1)
  private Double counterReadingImportT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT_T2 = "CounterReadingImportT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT_T2)
  private Double counterReadingImportT2;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT_T3 = "CounterReadingImportT3";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT_T3)
  private Double counterReadingImportT3;

  public static final String SERIALIZED_NAME_COUNTER_READING_IMPORT_T4 = "CounterReadingImportT4";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_IMPORT_T4)
  private Double counterReadingImportT4;

  public static final String SERIALIZED_NAME_COUNTER_READING_T1 = "CounterReadingT1";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T1)
  private Double counterReadingT1;

  public static final String SERIALIZED_NAME_COUNTER_READING_T2 = "CounterReadingT2";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T2)
  private Double counterReadingT2;

  public static final String SERIALIZED_NAME_COUNTER_READING_T3 = "CounterReadingT3";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T3)
  private Double counterReadingT3;

  public static final String SERIALIZED_NAME_COUNTER_READING_T4 = "CounterReadingT4";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_T4)
  private Double counterReadingT4;

  public static final String SERIALIZED_NAME_COUNTER_READING_UNIT = "CounterReadingUnit";
  @SerializedName(SERIALIZED_NAME_COUNTER_READING_UNIT)
  private String counterReadingUnit;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SERIAL = "Serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private Long serial;

  public DeviceInPast() {
  }

  public DeviceInPast counterReading(Double counterReading) {
    this.counterReading = counterReading;
    return this;
  }

  /**
   * The Meter Counter Reading (Total Energy used)
   * @return counterReading
   */
  @javax.annotation.Nullable
  public Double getCounterReading() {
    return counterReading;
  }

  public void setCounterReading(Double counterReading) {
    this.counterReading = counterReading;
  }


  public DeviceInPast counterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
    return this;
  }

  /**
   * The Meter Counter Reading Export
   * @return counterReadingExport
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExport() {
    return counterReadingExport;
  }

  public void setCounterReadingExport(Double counterReadingExport) {
    this.counterReadingExport = counterReadingExport;
  }


  public DeviceInPast counterReadingExportT1(Double counterReadingExportT1) {
    this.counterReadingExportT1 = counterReadingExportT1;
    return this;
  }

  /**
   * The Meter Counter Reading Export Tariff 1
   * @return counterReadingExportT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT1() {
    return counterReadingExportT1;
  }

  public void setCounterReadingExportT1(Double counterReadingExportT1) {
    this.counterReadingExportT1 = counterReadingExportT1;
  }


  public DeviceInPast counterReadingExportT2(Double counterReadingExportT2) {
    this.counterReadingExportT2 = counterReadingExportT2;
    return this;
  }

  /**
   * The Meter Counter Reading Export Tariff 2
   * @return counterReadingExportT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT2() {
    return counterReadingExportT2;
  }

  public void setCounterReadingExportT2(Double counterReadingExportT2) {
    this.counterReadingExportT2 = counterReadingExportT2;
  }


  public DeviceInPast counterReadingExportT3(Double counterReadingExportT3) {
    this.counterReadingExportT3 = counterReadingExportT3;
    return this;
  }

  /**
   * The Meter Counter Reading Export Tariff 3
   * @return counterReadingExportT3
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT3() {
    return counterReadingExportT3;
  }

  public void setCounterReadingExportT3(Double counterReadingExportT3) {
    this.counterReadingExportT3 = counterReadingExportT3;
  }


  public DeviceInPast counterReadingExportT4(Double counterReadingExportT4) {
    this.counterReadingExportT4 = counterReadingExportT4;
    return this;
  }

  /**
   * The Meter Counter Reading Export Tariff 4
   * @return counterReadingExportT4
   */
  @javax.annotation.Nullable
  public Double getCounterReadingExportT4() {
    return counterReadingExportT4;
  }

  public void setCounterReadingExportT4(Double counterReadingExportT4) {
    this.counterReadingExportT4 = counterReadingExportT4;
  }


  public DeviceInPast counterReadingImport(Double counterReadingImport) {
    this.counterReadingImport = counterReadingImport;
    return this;
  }

  /**
   * The Meter Counter Reading Import
   * @return counterReadingImport
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImport() {
    return counterReadingImport;
  }

  public void setCounterReadingImport(Double counterReadingImport) {
    this.counterReadingImport = counterReadingImport;
  }


  public DeviceInPast counterReadingImportT1(Double counterReadingImportT1) {
    this.counterReadingImportT1 = counterReadingImportT1;
    return this;
  }

  /**
   * The Meter Counter Reading Import Tariff 1
   * @return counterReadingImportT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImportT1() {
    return counterReadingImportT1;
  }

  public void setCounterReadingImportT1(Double counterReadingImportT1) {
    this.counterReadingImportT1 = counterReadingImportT1;
  }


  public DeviceInPast counterReadingImportT2(Double counterReadingImportT2) {
    this.counterReadingImportT2 = counterReadingImportT2;
    return this;
  }

  /**
   * The Meter Counter Reading Import Tariff 2
   * @return counterReadingImportT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImportT2() {
    return counterReadingImportT2;
  }

  public void setCounterReadingImportT2(Double counterReadingImportT2) {
    this.counterReadingImportT2 = counterReadingImportT2;
  }


  public DeviceInPast counterReadingImportT3(Double counterReadingImportT3) {
    this.counterReadingImportT3 = counterReadingImportT3;
    return this;
  }

  /**
   * The Meter Counter Reading Import Tariff 3
   * @return counterReadingImportT3
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImportT3() {
    return counterReadingImportT3;
  }

  public void setCounterReadingImportT3(Double counterReadingImportT3) {
    this.counterReadingImportT3 = counterReadingImportT3;
  }


  public DeviceInPast counterReadingImportT4(Double counterReadingImportT4) {
    this.counterReadingImportT4 = counterReadingImportT4;
    return this;
  }

  /**
   * The Meter Counter Reading Import Tariff 4
   * @return counterReadingImportT4
   */
  @javax.annotation.Nullable
  public Double getCounterReadingImportT4() {
    return counterReadingImportT4;
  }

  public void setCounterReadingImportT4(Double counterReadingImportT4) {
    this.counterReadingImportT4 = counterReadingImportT4;
  }


  public DeviceInPast counterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 1
   * @return counterReadingT1
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT1() {
    return counterReadingT1;
  }

  public void setCounterReadingT1(Double counterReadingT1) {
    this.counterReadingT1 = counterReadingT1;
  }


  public DeviceInPast counterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 2
   * @return counterReadingT2
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT2() {
    return counterReadingT2;
  }

  public void setCounterReadingT2(Double counterReadingT2) {
    this.counterReadingT2 = counterReadingT2;
  }


  public DeviceInPast counterReadingT3(Double counterReadingT3) {
    this.counterReadingT3 = counterReadingT3;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 3
   * @return counterReadingT3
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT3() {
    return counterReadingT3;
  }

  public void setCounterReadingT3(Double counterReadingT3) {
    this.counterReadingT3 = counterReadingT3;
  }


  public DeviceInPast counterReadingT4(Double counterReadingT4) {
    this.counterReadingT4 = counterReadingT4;
    return this;
  }

  /**
   * The Meter Counter Reading Tariff 4
   * @return counterReadingT4
   */
  @javax.annotation.Nullable
  public Double getCounterReadingT4() {
    return counterReadingT4;
  }

  public void setCounterReadingT4(Double counterReadingT4) {
    this.counterReadingT4 = counterReadingT4;
  }


  public DeviceInPast counterReadingUnit(String counterReadingUnit) {
    this.counterReadingUnit = counterReadingUnit;
    return this;
  }

  /**
   * The Unit of the Counter Reading
   * @return counterReadingUnit
   */
  @javax.annotation.Nullable
  public String getCounterReadingUnit() {
    return counterReadingUnit;
  }

  public void setCounterReadingUnit(String counterReadingUnit) {
    this.counterReadingUnit = counterReadingUnit;
  }


  public DeviceInPast date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * The Date of the Values
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public DeviceInPast id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the device
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceInPast serial(Long serial) {
    this.serial = serial;
    return this;
  }

  /**
   * The Serial number
   * @return serial
   */
  @javax.annotation.Nullable
  public Long getSerial() {
    return serial;
  }

  public void setSerial(Long serial) {
    this.serial = serial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInPast deviceInPast = (DeviceInPast) o;
    return Objects.equals(this.counterReading, deviceInPast.counterReading) &&
        Objects.equals(this.counterReadingExport, deviceInPast.counterReadingExport) &&
        Objects.equals(this.counterReadingExportT1, deviceInPast.counterReadingExportT1) &&
        Objects.equals(this.counterReadingExportT2, deviceInPast.counterReadingExportT2) &&
        Objects.equals(this.counterReadingExportT3, deviceInPast.counterReadingExportT3) &&
        Objects.equals(this.counterReadingExportT4, deviceInPast.counterReadingExportT4) &&
        Objects.equals(this.counterReadingImport, deviceInPast.counterReadingImport) &&
        Objects.equals(this.counterReadingImportT1, deviceInPast.counterReadingImportT1) &&
        Objects.equals(this.counterReadingImportT2, deviceInPast.counterReadingImportT2) &&
        Objects.equals(this.counterReadingImportT3, deviceInPast.counterReadingImportT3) &&
        Objects.equals(this.counterReadingImportT4, deviceInPast.counterReadingImportT4) &&
        Objects.equals(this.counterReadingT1, deviceInPast.counterReadingT1) &&
        Objects.equals(this.counterReadingT2, deviceInPast.counterReadingT2) &&
        Objects.equals(this.counterReadingT3, deviceInPast.counterReadingT3) &&
        Objects.equals(this.counterReadingT4, deviceInPast.counterReadingT4) &&
        Objects.equals(this.counterReadingUnit, deviceInPast.counterReadingUnit) &&
        Objects.equals(this.date, deviceInPast.date) &&
        Objects.equals(this.id, deviceInPast.id) &&
        Objects.equals(this.serial, deviceInPast.serial);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counterReading, counterReadingExport, counterReadingExportT1, counterReadingExportT2, counterReadingExportT3, counterReadingExportT4, counterReadingImport, counterReadingImportT1, counterReadingImportT2, counterReadingImportT3, counterReadingImportT4, counterReadingT1, counterReadingT2, counterReadingT3, counterReadingT4, counterReadingUnit, date, id, serial);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInPast {\n");
    sb.append("    counterReading: ").append(toIndentedString(counterReading)).append("\n");
    sb.append("    counterReadingExport: ").append(toIndentedString(counterReadingExport)).append("\n");
    sb.append("    counterReadingExportT1: ").append(toIndentedString(counterReadingExportT1)).append("\n");
    sb.append("    counterReadingExportT2: ").append(toIndentedString(counterReadingExportT2)).append("\n");
    sb.append("    counterReadingExportT3: ").append(toIndentedString(counterReadingExportT3)).append("\n");
    sb.append("    counterReadingExportT4: ").append(toIndentedString(counterReadingExportT4)).append("\n");
    sb.append("    counterReadingImport: ").append(toIndentedString(counterReadingImport)).append("\n");
    sb.append("    counterReadingImportT1: ").append(toIndentedString(counterReadingImportT1)).append("\n");
    sb.append("    counterReadingImportT2: ").append(toIndentedString(counterReadingImportT2)).append("\n");
    sb.append("    counterReadingImportT3: ").append(toIndentedString(counterReadingImportT3)).append("\n");
    sb.append("    counterReadingImportT4: ").append(toIndentedString(counterReadingImportT4)).append("\n");
    sb.append("    counterReadingT1: ").append(toIndentedString(counterReadingT1)).append("\n");
    sb.append("    counterReadingT2: ").append(toIndentedString(counterReadingT2)).append("\n");
    sb.append("    counterReadingT3: ").append(toIndentedString(counterReadingT3)).append("\n");
    sb.append("    counterReadingT4: ").append(toIndentedString(counterReadingT4)).append("\n");
    sb.append("    counterReadingUnit: ").append(toIndentedString(counterReadingUnit)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CounterReading");
    openapiFields.add("CounterReadingExport");
    openapiFields.add("CounterReadingExportT1");
    openapiFields.add("CounterReadingExportT2");
    openapiFields.add("CounterReadingExportT3");
    openapiFields.add("CounterReadingExportT4");
    openapiFields.add("CounterReadingImport");
    openapiFields.add("CounterReadingImportT1");
    openapiFields.add("CounterReadingImportT2");
    openapiFields.add("CounterReadingImportT3");
    openapiFields.add("CounterReadingImportT4");
    openapiFields.add("CounterReadingT1");
    openapiFields.add("CounterReadingT2");
    openapiFields.add("CounterReadingT3");
    openapiFields.add("CounterReadingT4");
    openapiFields.add("CounterReadingUnit");
    openapiFields.add("Date");
    openapiFields.add("Id");
    openapiFields.add("Serial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceInPast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceInPast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceInPast is not found in the empty JSON string", DeviceInPast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceInPast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceInPast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CounterReadingUnit") != null && !jsonObj.get("CounterReadingUnit").isJsonNull()) && !jsonObj.get("CounterReadingUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CounterReadingUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CounterReadingUnit").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceInPast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceInPast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceInPast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceInPast.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceInPast>() {
           @Override
           public void write(JsonWriter out, DeviceInPast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceInPast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceInPast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceInPast
   * @throws IOException if the JSON string is invalid with respect to DeviceInPast
   */
  public static DeviceInPast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceInPast.class);
  }

  /**
   * Convert an instance of DeviceInPast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

