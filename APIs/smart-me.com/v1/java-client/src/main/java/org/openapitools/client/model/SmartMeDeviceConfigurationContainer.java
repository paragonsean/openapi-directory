/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputConfigurationContainer;
import org.openapitools.client.model.OutputConfigurationContainer;
import org.openapitools.client.model.SwitchConfigurationContainer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * API Container class for the meter configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmartMeDeviceConfigurationContainer {
  public static final String SERIALIZED_NAME_DEVICE_ENCRYPTION_KEY = "DeviceEncryptionKey";
  @SerializedName(SERIALIZED_NAME_DEVICE_ENCRYPTION_KEY)
  private String deviceEncryptionKey;

  public static final String SERIALIZED_NAME_DEVICE_PIN_CODE = "DevicePinCode";
  @SerializedName(SERIALIZED_NAME_DEVICE_PIN_CODE)
  private String devicePinCode;

  /**
   * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
   */
  @JsonAdapter(DnsUpdateStateEnum.Adapter.class)
  public enum DnsUpdateStateEnum {
    NO_UPDATE("NoUpdate"),
    
    DNS_UPDATE_PUBLIC_IP("DnsUpdatePublicIp"),
    
    DNS_UPDATE_INTERNAL_IP("DnsUpdateInternalIp");

    private String value;

    DnsUpdateStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnsUpdateStateEnum fromValue(String value) {
      for (DnsUpdateStateEnum b : DnsUpdateStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DnsUpdateStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnsUpdateStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnsUpdateStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DnsUpdateStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DnsUpdateStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DNS_UPDATE_STATE = "DnsUpdateState";
  @SerializedName(SERIALIZED_NAME_DNS_UPDATE_STATE)
  private DnsUpdateStateEnum dnsUpdateState;

  public static final String SERIALIZED_NAME_ENABLE_MODBUS_TCP = "EnableModbusTcp";
  @SerializedName(SERIALIZED_NAME_ENABLE_MODBUS_TCP)
  private Boolean enableModbusTcp;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_CONFIGURATION = "InputConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIGURATION)
  private List<InputConfigurationContainer> inputConfiguration = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_CONFIGURATION = "OutputConfiguration";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIGURATION)
  private List<OutputConfigurationContainer> outputConfiguration = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_REACTIVE_ENERGY = "ShowReactiveEnergy";
  @SerializedName(SERIALIZED_NAME_SHOW_REACTIVE_ENERGY)
  private Boolean showReactiveEnergy;

  public static final String SERIALIZED_NAME_SWITCH_CONFIGURATION = "SwitchConfiguration";
  @SerializedName(SERIALIZED_NAME_SWITCH_CONFIGURATION)
  private List<SwitchConfigurationContainer> switchConfiguration = new ArrayList<>();

  /**
   * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
   */
  @JsonAdapter(UploadIntervalEnum.Adapter.class)
  public enum UploadIntervalEnum {
    _1S("UploadInterval_1s"),
    
    _5S("UploadInterval_5s"),
    
    _10S("UploadInterval_10s"),
    
    _30S("UploadInterval_30s"),
    
    _60S("UploadInterval_60s"),
    
    _5MIN("UploadInterval_5min"),
    
    _15MIN("UploadInterval_15min"),
    
    _30MIN("UploadInterval_30min"),
    
    _60MIN("UploadInterval_60min"),
    
    _6H("UploadInterval_6h"),
    
    _12H("UploadInterval_12h"),
    
    _24H("UploadInterval_24h");

    private String value;

    UploadIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UploadIntervalEnum fromValue(String value) {
      for (UploadIntervalEnum b : UploadIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UploadIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UploadIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UploadIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UploadIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UploadIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPLOAD_INTERVAL = "UploadInterval";
  @SerializedName(SERIALIZED_NAME_UPLOAD_INTERVAL)
  private UploadIntervalEnum uploadInterval;

  public SmartMeDeviceConfigurationContainer() {
  }

  public SmartMeDeviceConfigurationContainer deviceEncryptionKey(String deviceEncryptionKey) {
    this.deviceEncryptionKey = deviceEncryptionKey;
    return this;
  }

  /**
   * The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
   * @return deviceEncryptionKey
   */
  @javax.annotation.Nullable
  public String getDeviceEncryptionKey() {
    return deviceEncryptionKey;
  }

  public void setDeviceEncryptionKey(String deviceEncryptionKey) {
    this.deviceEncryptionKey = deviceEncryptionKey;
  }


  public SmartMeDeviceConfigurationContainer devicePinCode(String devicePinCode) {
    this.devicePinCode = devicePinCode;
    return this;
  }

  /**
   * PIN code to enter on a external meter (e.g. for the FNN meters)
   * @return devicePinCode
   */
  @javax.annotation.Nullable
  public String getDevicePinCode() {
    return devicePinCode;
  }

  public void setDevicePinCode(String devicePinCode) {
    this.devicePinCode = devicePinCode;
  }


  public SmartMeDeviceConfigurationContainer dnsUpdateState(DnsUpdateStateEnum dnsUpdateState) {
    this.dnsUpdateState = dnsUpdateState;
    return this;
  }

  /**
   * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
   * @return dnsUpdateState
   */
  @javax.annotation.Nullable
  public DnsUpdateStateEnum getDnsUpdateState() {
    return dnsUpdateState;
  }

  public void setDnsUpdateState(DnsUpdateStateEnum dnsUpdateState) {
    this.dnsUpdateState = dnsUpdateState;
  }


  public SmartMeDeviceConfigurationContainer enableModbusTcp(Boolean enableModbusTcp) {
    this.enableModbusTcp = enableModbusTcp;
    return this;
  }

  /**
   * Enables or disables Modbus TCP (if the meter supports it).
   * @return enableModbusTcp
   */
  @javax.annotation.Nullable
  public Boolean getEnableModbusTcp() {
    return enableModbusTcp;
  }

  public void setEnableModbusTcp(Boolean enableModbusTcp) {
    this.enableModbusTcp = enableModbusTcp;
  }


  public SmartMeDeviceConfigurationContainer id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the device
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SmartMeDeviceConfigurationContainer inputConfiguration(List<InputConfigurationContainer> inputConfiguration) {
    this.inputConfiguration = inputConfiguration;
    return this;
  }

  public SmartMeDeviceConfigurationContainer addInputConfigurationItem(InputConfigurationContainer inputConfigurationItem) {
    if (this.inputConfiguration == null) {
      this.inputConfiguration = new ArrayList<>();
    }
    this.inputConfiguration.add(inputConfigurationItem);
    return this;
  }

  /**
   * The configuration for the intput outputs
   * @return inputConfiguration
   */
  @javax.annotation.Nullable
  public List<InputConfigurationContainer> getInputConfiguration() {
    return inputConfiguration;
  }

  public void setInputConfiguration(List<InputConfigurationContainer> inputConfiguration) {
    this.inputConfiguration = inputConfiguration;
  }


  public SmartMeDeviceConfigurationContainer outputConfiguration(List<OutputConfigurationContainer> outputConfiguration) {
    this.outputConfiguration = outputConfiguration;
    return this;
  }

  public SmartMeDeviceConfigurationContainer addOutputConfigurationItem(OutputConfigurationContainer outputConfigurationItem) {
    if (this.outputConfiguration == null) {
      this.outputConfiguration = new ArrayList<>();
    }
    this.outputConfiguration.add(outputConfigurationItem);
    return this;
  }

  /**
   * The configuration for the external outputs
   * @return outputConfiguration
   */
  @javax.annotation.Nullable
  public List<OutputConfigurationContainer> getOutputConfiguration() {
    return outputConfiguration;
  }

  public void setOutputConfiguration(List<OutputConfigurationContainer> outputConfiguration) {
    this.outputConfiguration = outputConfiguration;
  }


  public SmartMeDeviceConfigurationContainer showReactiveEnergy(Boolean showReactiveEnergy) {
    this.showReactiveEnergy = showReactiveEnergy;
    return this;
  }

  /**
   * Shows the reactive energy values (if the meter supports it).
   * @return showReactiveEnergy
   */
  @javax.annotation.Nullable
  public Boolean getShowReactiveEnergy() {
    return showReactiveEnergy;
  }

  public void setShowReactiveEnergy(Boolean showReactiveEnergy) {
    this.showReactiveEnergy = showReactiveEnergy;
  }


  public SmartMeDeviceConfigurationContainer switchConfiguration(List<SwitchConfigurationContainer> switchConfiguration) {
    this.switchConfiguration = switchConfiguration;
    return this;
  }

  public SmartMeDeviceConfigurationContainer addSwitchConfigurationItem(SwitchConfigurationContainer switchConfigurationItem) {
    if (this.switchConfiguration == null) {
      this.switchConfiguration = new ArrayList<>();
    }
    this.switchConfiguration.add(switchConfigurationItem);
    return this;
  }

  /**
   * The configuration for the phase switches
   * @return switchConfiguration
   */
  @javax.annotation.Nullable
  public List<SwitchConfigurationContainer> getSwitchConfiguration() {
    return switchConfiguration;
  }

  public void setSwitchConfiguration(List<SwitchConfigurationContainer> switchConfiguration) {
    this.switchConfiguration = switchConfiguration;
  }


  public SmartMeDeviceConfigurationContainer uploadInterval(UploadIntervalEnum uploadInterval) {
    this.uploadInterval = uploadInterval;
    return this;
  }

  /**
   * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
   * @return uploadInterval
   */
  @javax.annotation.Nullable
  public UploadIntervalEnum getUploadInterval() {
    return uploadInterval;
  }

  public void setUploadInterval(UploadIntervalEnum uploadInterval) {
    this.uploadInterval = uploadInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartMeDeviceConfigurationContainer smartMeDeviceConfigurationContainer = (SmartMeDeviceConfigurationContainer) o;
    return Objects.equals(this.deviceEncryptionKey, smartMeDeviceConfigurationContainer.deviceEncryptionKey) &&
        Objects.equals(this.devicePinCode, smartMeDeviceConfigurationContainer.devicePinCode) &&
        Objects.equals(this.dnsUpdateState, smartMeDeviceConfigurationContainer.dnsUpdateState) &&
        Objects.equals(this.enableModbusTcp, smartMeDeviceConfigurationContainer.enableModbusTcp) &&
        Objects.equals(this.id, smartMeDeviceConfigurationContainer.id) &&
        Objects.equals(this.inputConfiguration, smartMeDeviceConfigurationContainer.inputConfiguration) &&
        Objects.equals(this.outputConfiguration, smartMeDeviceConfigurationContainer.outputConfiguration) &&
        Objects.equals(this.showReactiveEnergy, smartMeDeviceConfigurationContainer.showReactiveEnergy) &&
        Objects.equals(this.switchConfiguration, smartMeDeviceConfigurationContainer.switchConfiguration) &&
        Objects.equals(this.uploadInterval, smartMeDeviceConfigurationContainer.uploadInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceEncryptionKey, devicePinCode, dnsUpdateState, enableModbusTcp, id, inputConfiguration, outputConfiguration, showReactiveEnergy, switchConfiguration, uploadInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartMeDeviceConfigurationContainer {\n");
    sb.append("    deviceEncryptionKey: ").append(toIndentedString(deviceEncryptionKey)).append("\n");
    sb.append("    devicePinCode: ").append(toIndentedString(devicePinCode)).append("\n");
    sb.append("    dnsUpdateState: ").append(toIndentedString(dnsUpdateState)).append("\n");
    sb.append("    enableModbusTcp: ").append(toIndentedString(enableModbusTcp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputConfiguration: ").append(toIndentedString(inputConfiguration)).append("\n");
    sb.append("    outputConfiguration: ").append(toIndentedString(outputConfiguration)).append("\n");
    sb.append("    showReactiveEnergy: ").append(toIndentedString(showReactiveEnergy)).append("\n");
    sb.append("    switchConfiguration: ").append(toIndentedString(switchConfiguration)).append("\n");
    sb.append("    uploadInterval: ").append(toIndentedString(uploadInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceEncryptionKey");
    openapiFields.add("DevicePinCode");
    openapiFields.add("DnsUpdateState");
    openapiFields.add("EnableModbusTcp");
    openapiFields.add("Id");
    openapiFields.add("InputConfiguration");
    openapiFields.add("OutputConfiguration");
    openapiFields.add("ShowReactiveEnergy");
    openapiFields.add("SwitchConfiguration");
    openapiFields.add("UploadInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartMeDeviceConfigurationContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartMeDeviceConfigurationContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartMeDeviceConfigurationContainer is not found in the empty JSON string", SmartMeDeviceConfigurationContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartMeDeviceConfigurationContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartMeDeviceConfigurationContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceEncryptionKey") != null && !jsonObj.get("DeviceEncryptionKey").isJsonNull()) && !jsonObj.get("DeviceEncryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceEncryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceEncryptionKey").toString()));
      }
      if ((jsonObj.get("DevicePinCode") != null && !jsonObj.get("DevicePinCode").isJsonNull()) && !jsonObj.get("DevicePinCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DevicePinCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DevicePinCode").toString()));
      }
      if ((jsonObj.get("DnsUpdateState") != null && !jsonObj.get("DnsUpdateState").isJsonNull()) && !jsonObj.get("DnsUpdateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DnsUpdateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DnsUpdateState").toString()));
      }
      // validate the optional field `DnsUpdateState`
      if (jsonObj.get("DnsUpdateState") != null && !jsonObj.get("DnsUpdateState").isJsonNull()) {
        DnsUpdateStateEnum.validateJsonElement(jsonObj.get("DnsUpdateState"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (jsonObj.get("InputConfiguration") != null && !jsonObj.get("InputConfiguration").isJsonNull()) {
        JsonArray jsonArrayinputConfiguration = jsonObj.getAsJsonArray("InputConfiguration");
        if (jsonArrayinputConfiguration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("InputConfiguration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `InputConfiguration` to be an array in the JSON string but got `%s`", jsonObj.get("InputConfiguration").toString()));
          }

          // validate the optional field `InputConfiguration` (array)
          for (int i = 0; i < jsonArrayinputConfiguration.size(); i++) {
            InputConfigurationContainer.validateJsonElement(jsonArrayinputConfiguration.get(i));
          };
        }
      }
      if (jsonObj.get("OutputConfiguration") != null && !jsonObj.get("OutputConfiguration").isJsonNull()) {
        JsonArray jsonArrayoutputConfiguration = jsonObj.getAsJsonArray("OutputConfiguration");
        if (jsonArrayoutputConfiguration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OutputConfiguration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OutputConfiguration` to be an array in the JSON string but got `%s`", jsonObj.get("OutputConfiguration").toString()));
          }

          // validate the optional field `OutputConfiguration` (array)
          for (int i = 0; i < jsonArrayoutputConfiguration.size(); i++) {
            OutputConfigurationContainer.validateJsonElement(jsonArrayoutputConfiguration.get(i));
          };
        }
      }
      if (jsonObj.get("SwitchConfiguration") != null && !jsonObj.get("SwitchConfiguration").isJsonNull()) {
        JsonArray jsonArrayswitchConfiguration = jsonObj.getAsJsonArray("SwitchConfiguration");
        if (jsonArrayswitchConfiguration != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SwitchConfiguration").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SwitchConfiguration` to be an array in the JSON string but got `%s`", jsonObj.get("SwitchConfiguration").toString()));
          }

          // validate the optional field `SwitchConfiguration` (array)
          for (int i = 0; i < jsonArrayswitchConfiguration.size(); i++) {
            SwitchConfigurationContainer.validateJsonElement(jsonArrayswitchConfiguration.get(i));
          };
        }
      }
      if ((jsonObj.get("UploadInterval") != null && !jsonObj.get("UploadInterval").isJsonNull()) && !jsonObj.get("UploadInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UploadInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UploadInterval").toString()));
      }
      // validate the optional field `UploadInterval`
      if (jsonObj.get("UploadInterval") != null && !jsonObj.get("UploadInterval").isJsonNull()) {
        UploadIntervalEnum.validateJsonElement(jsonObj.get("UploadInterval"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartMeDeviceConfigurationContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartMeDeviceConfigurationContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartMeDeviceConfigurationContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartMeDeviceConfigurationContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartMeDeviceConfigurationContainer>() {
           @Override
           public void write(JsonWriter out, SmartMeDeviceConfigurationContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartMeDeviceConfigurationContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartMeDeviceConfigurationContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartMeDeviceConfigurationContainer
   * @throws IOException if the JSON string is invalid with respect to SmartMeDeviceConfigurationContainer
   */
  public static SmartMeDeviceConfigurationContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartMeDeviceConfigurationContainer.class);
  }

  /**
   * Convert an instance of SmartMeDeviceConfigurationContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

