/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api container for the charging station history
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PicoChargingHistoryData {
  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_ENERGY_USED = "EnergyUsed";
  @SerializedName(SERIALIZED_NAME_ENERGY_USED)
  private Double energyUsed;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * Gets or Sets transactionStopReason
   */
  @JsonAdapter(TransactionStopReasonEnum.Adapter.class)
  public enum TransactionStopReasonEnum {
    UNKNOWN("Unknown"),
    
    CAR_DISCONNECTED("CarDisconnected"),
    
    REMOTE_STOP("RemoteStop"),
    
    ERROR_STOP("ErrorStop"),
    
    INSTALLATION_MODE("InstallationMode"),
    
    CABLE_ERROR("CableError"),
    
    DIODE_ERROR("DiodeError"),
    
    RCD_ERROR("RcdError"),
    
    OVERLOAD_ERROR("OverloadError");

    private String value;

    TransactionStopReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStopReasonEnum fromValue(String value) {
      for (TransactionStopReasonEnum b : TransactionStopReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStopReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStopReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStopReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStopReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStopReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STOP_REASON = "TransactionStopReason";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STOP_REASON)
  private TransactionStopReasonEnum transactionStopReason;

  public PicoChargingHistoryData() {
  }

  public PicoChargingHistoryData(
     Integer duration, 
     Double energyUsed, 
     OffsetDateTime startTime, 
     TransactionStopReasonEnum transactionStopReason
  ) {
    this();
    this.duration = duration;
    this.energyUsed = energyUsed;
    this.startTime = startTime;
    this.transactionStopReason = transactionStopReason;
  }

  /**
   * The duration in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }



  /**
   * The energy used (in kWh)
   * @return energyUsed
   */
  @javax.annotation.Nullable
  public Double getEnergyUsed() {
    return energyUsed;
  }



  /**
   * The starttime of the charging (in UTC)
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * Get transactionStopReason
   * @return transactionStopReason
   */
  @javax.annotation.Nullable
  public TransactionStopReasonEnum getTransactionStopReason() {
    return transactionStopReason;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PicoChargingHistoryData picoChargingHistoryData = (PicoChargingHistoryData) o;
    return Objects.equals(this.duration, picoChargingHistoryData.duration) &&
        Objects.equals(this.energyUsed, picoChargingHistoryData.energyUsed) &&
        Objects.equals(this.startTime, picoChargingHistoryData.startTime) &&
        Objects.equals(this.transactionStopReason, picoChargingHistoryData.transactionStopReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, energyUsed, startTime, transactionStopReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PicoChargingHistoryData {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    energyUsed: ").append(toIndentedString(energyUsed)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    transactionStopReason: ").append(toIndentedString(transactionStopReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Duration");
    openapiFields.add("EnergyUsed");
    openapiFields.add("StartTime");
    openapiFields.add("TransactionStopReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PicoChargingHistoryData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PicoChargingHistoryData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PicoChargingHistoryData is not found in the empty JSON string", PicoChargingHistoryData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PicoChargingHistoryData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PicoChargingHistoryData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TransactionStopReason") != null && !jsonObj.get("TransactionStopReason").isJsonNull()) && !jsonObj.get("TransactionStopReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionStopReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionStopReason").toString()));
      }
      // validate the optional field `TransactionStopReason`
      if (jsonObj.get("TransactionStopReason") != null && !jsonObj.get("TransactionStopReason").isJsonNull()) {
        TransactionStopReasonEnum.validateJsonElement(jsonObj.get("TransactionStopReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PicoChargingHistoryData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PicoChargingHistoryData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PicoChargingHistoryData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PicoChargingHistoryData.class));

       return (TypeAdapter<T>) new TypeAdapter<PicoChargingHistoryData>() {
           @Override
           public void write(JsonWriter out, PicoChargingHistoryData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PicoChargingHistoryData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PicoChargingHistoryData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PicoChargingHistoryData
   * @throws IOException if the JSON string is invalid with respect to PicoChargingHistoryData
   */
  public static PicoChargingHistoryData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PicoChargingHistoryData.class);
  }

  /**
   * Convert an instance of PicoChargingHistoryData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

