/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the input of a meter (digital inputs)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputConfigurationContainer {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_OFF_TEXT = "OffText";
  @SerializedName(SERIALIZED_NAME_OFF_TEXT)
  private String offText;

  public static final String SERIALIZED_NAME_ON_TEXT = "OnText";
  @SerializedName(SERIALIZED_NAME_ON_TEXT)
  private String onText;

  /**
   * The Type of the output
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TARIFF_INPUT("TariffInput"),
    
    DIGITAL_INPUT("DigitalInput");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public InputConfigurationContainer() {
  }

  public InputConfigurationContainer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The Name of the Input
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InputConfigurationContainer number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the Input. (1 for Input 1)
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public InputConfigurationContainer offText(String offText) {
    this.offText = offText;
    return this;
  }

  /**
   * The visualization text for an OFF action
   * @return offText
   */
  @javax.annotation.Nullable
  public String getOffText() {
    return offText;
  }

  public void setOffText(String offText) {
    this.offText = offText;
  }


  public InputConfigurationContainer onText(String onText) {
    this.onText = onText;
    return this;
  }

  /**
   * The visualization text for an ON action
   * @return onText
   */
  @javax.annotation.Nullable
  public String getOnText() {
    return onText;
  }

  public void setOnText(String onText) {
    this.onText = onText;
  }


  public InputConfigurationContainer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The Type of the output
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputConfigurationContainer inputConfigurationContainer = (InputConfigurationContainer) o;
    return Objects.equals(this.name, inputConfigurationContainer.name) &&
        Objects.equals(this.number, inputConfigurationContainer.number) &&
        Objects.equals(this.offText, inputConfigurationContainer.offText) &&
        Objects.equals(this.onText, inputConfigurationContainer.onText) &&
        Objects.equals(this.type, inputConfigurationContainer.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, number, offText, onText, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputConfigurationContainer {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    offText: ").append(toIndentedString(offText)).append("\n");
    sb.append("    onText: ").append(toIndentedString(onText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Number");
    openapiFields.add("OffText");
    openapiFields.add("OnText");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputConfigurationContainer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputConfigurationContainer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputConfigurationContainer is not found in the empty JSON string", InputConfigurationContainer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputConfigurationContainer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputConfigurationContainer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OffText") != null && !jsonObj.get("OffText").isJsonNull()) && !jsonObj.get("OffText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OffText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OffText").toString()));
      }
      if ((jsonObj.get("OnText") != null && !jsonObj.get("OnText").isJsonNull()) && !jsonObj.get("OnText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OnText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OnText").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputConfigurationContainer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputConfigurationContainer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputConfigurationContainer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputConfigurationContainer.class));

       return (TypeAdapter<T>) new TypeAdapter<InputConfigurationContainer>() {
           @Override
           public void write(JsonWriter out, InputConfigurationContainer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputConfigurationContainer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputConfigurationContainer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputConfigurationContainer
   * @throws IOException if the JSON string is invalid with respect to InputConfigurationContainer
   */
  public static InputConfigurationContainer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputConfigurationContainer.class);
  }

  /**
   * Convert an instance of InputConfigurationContainer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

