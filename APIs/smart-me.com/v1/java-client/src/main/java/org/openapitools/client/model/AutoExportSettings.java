/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for the auto export functionality of a meter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:42.255037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoExportSettings {
  public static final String SERIALIZED_NAME_EXPORT_FORMAT = "ExportFormat";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMAT)
  private String exportFormat;

  /**
   * The export interval of the auto export
   */
  @JsonAdapter(ExportIntervalEnum.Adapter.class)
  public enum ExportIntervalEnum {
    NO_EXPORT("NoExport"),
    
    HOURLY("Hourly"),
    
    DAILY("Daily"),
    
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    QUATER_YEARLY("QuaterYearly"),
    
    HALF_YEARLY("HalfYearly"),
    
    YEARLY("Yearly");

    private String value;

    ExportIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExportIntervalEnum fromValue(String value) {
      for (ExportIntervalEnum b : ExportIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExportIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExportIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExportIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPORT_INTERVAL = "ExportInterval";
  @SerializedName(SERIALIZED_NAME_EXPORT_INTERVAL)
  private ExportIntervalEnum exportInterval;

  public static final String SERIALIZED_NAME_METER_POINT_ID = "MeterPointId";
  @SerializedName(SERIALIZED_NAME_METER_POINT_ID)
  private String meterPointId;

  public static final String SERIALIZED_NAME_UPLOAD_TYPE = "UploadType";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TYPE)
  private String uploadType;

  public AutoExportSettings() {
  }

  public AutoExportSettings exportFormat(String exportFormat) {
    this.exportFormat = exportFormat;
    return this;
  }

  /**
   * The export format
   * @return exportFormat
   */
  @javax.annotation.Nullable
  public String getExportFormat() {
    return exportFormat;
  }

  public void setExportFormat(String exportFormat) {
    this.exportFormat = exportFormat;
  }


  public AutoExportSettings exportInterval(ExportIntervalEnum exportInterval) {
    this.exportInterval = exportInterval;
    return this;
  }

  /**
   * The export interval of the auto export
   * @return exportInterval
   */
  @javax.annotation.Nullable
  public ExportIntervalEnum getExportInterval() {
    return exportInterval;
  }

  public void setExportInterval(ExportIntervalEnum exportInterval) {
    this.exportInterval = exportInterval;
  }


  public AutoExportSettings meterPointId(String meterPointId) {
    this.meterPointId = meterPointId;
    return this;
  }

  /**
   * The meter point id set by the user
   * @return meterPointId
   */
  @javax.annotation.Nullable
  public String getMeterPointId() {
    return meterPointId;
  }

  public void setMeterPointId(String meterPointId) {
    this.meterPointId = meterPointId;
  }


  public AutoExportSettings uploadType(String uploadType) {
    this.uploadType = uploadType;
    return this;
  }

  /**
   * The upload type
   * @return uploadType
   */
  @javax.annotation.Nullable
  public String getUploadType() {
    return uploadType;
  }

  public void setUploadType(String uploadType) {
    this.uploadType = uploadType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoExportSettings autoExportSettings = (AutoExportSettings) o;
    return Objects.equals(this.exportFormat, autoExportSettings.exportFormat) &&
        Objects.equals(this.exportInterval, autoExportSettings.exportInterval) &&
        Objects.equals(this.meterPointId, autoExportSettings.meterPointId) &&
        Objects.equals(this.uploadType, autoExportSettings.uploadType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportFormat, exportInterval, meterPointId, uploadType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoExportSettings {\n");
    sb.append("    exportFormat: ").append(toIndentedString(exportFormat)).append("\n");
    sb.append("    exportInterval: ").append(toIndentedString(exportInterval)).append("\n");
    sb.append("    meterPointId: ").append(toIndentedString(meterPointId)).append("\n");
    sb.append("    uploadType: ").append(toIndentedString(uploadType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExportFormat");
    openapiFields.add("ExportInterval");
    openapiFields.add("MeterPointId");
    openapiFields.add("UploadType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoExportSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoExportSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoExportSettings is not found in the empty JSON string", AutoExportSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoExportSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoExportSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExportFormat") != null && !jsonObj.get("ExportFormat").isJsonNull()) && !jsonObj.get("ExportFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExportFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExportFormat").toString()));
      }
      if ((jsonObj.get("ExportInterval") != null && !jsonObj.get("ExportInterval").isJsonNull()) && !jsonObj.get("ExportInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExportInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExportInterval").toString()));
      }
      // validate the optional field `ExportInterval`
      if (jsonObj.get("ExportInterval") != null && !jsonObj.get("ExportInterval").isJsonNull()) {
        ExportIntervalEnum.validateJsonElement(jsonObj.get("ExportInterval"));
      }
      if ((jsonObj.get("MeterPointId") != null && !jsonObj.get("MeterPointId").isJsonNull()) && !jsonObj.get("MeterPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeterPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeterPointId").toString()));
      }
      if ((jsonObj.get("UploadType") != null && !jsonObj.get("UploadType").isJsonNull()) && !jsonObj.get("UploadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UploadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UploadType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoExportSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoExportSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoExportSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoExportSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoExportSettings>() {
           @Override
           public void write(JsonWriter out, AutoExportSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoExportSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoExportSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoExportSettings
   * @throws IOException if the JSON string is invalid with respect to AutoExportSettings
   */
  public static AutoExportSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoExportSettings.class);
  }

  /**
   * Convert an instance of AutoExportSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

