/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceToPost;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Gets a Device by it&#39;s ID
     *
     * Gets a Device by it&#39;s ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDevicesIdGetTest() throws ApiException {
        String id = null;
        Device response = api.apiDevicesIdGet(id);
        // TODO: test validations
    }

    /**
     * Gets all Devices
     *
     * Gets all Devices
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        List<Device> response = api.devicesGet();
        // TODO: test validations
    }

    /**
     * Creates or updates a Device or updates it&#39;s values.
     *
     * Creates or updates a Device or updates it&#39;s values.               For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.              To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesPostTest() throws ApiException {
        DeviceToPost deviceToPost = null;
        DeviceToPost response = api.devicesPost(deviceToPost);
        // TODO: test validations
    }

    /**
     * Updates the On/Off Switch on a device.               For new implementations please use the \&quot;actions\&quot; command
     *
     * Updates the On/Off Switch on a device              For new implementations please use the \&quot;actions\&quot; command
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesPutTest() throws ApiException {
        String id = null;
        Boolean switchState = null;
        Integer switchNumber = null;
        Object response = api.devicesPut(id, switchState, switchNumber);
        // TODO: test validations
    }

}
