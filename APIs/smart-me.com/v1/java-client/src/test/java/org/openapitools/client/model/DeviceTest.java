/*
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Device
 */
public class DeviceTest {
    private final Device model = new Device();

    /**
     * Model tests for Device
     */
    @Test
    public void testDevice() {
        // TODO: test Device
    }

    /**
     * Test the property 'activePower'
     */
    @Test
    public void activePowerTest() {
        // TODO: test activePower
    }

    /**
     * Test the property 'activePowerL1'
     */
    @Test
    public void activePowerL1Test() {
        // TODO: test activePowerL1
    }

    /**
     * Test the property 'activePowerL2'
     */
    @Test
    public void activePowerL2Test() {
        // TODO: test activePowerL2
    }

    /**
     * Test the property 'activePowerL3'
     */
    @Test
    public void activePowerL3Test() {
        // TODO: test activePowerL3
    }

    /**
     * Test the property 'activePowerUnit'
     */
    @Test
    public void activePowerUnitTest() {
        // TODO: test activePowerUnit
    }

    /**
     * Test the property 'activeTariff'
     */
    @Test
    public void activeTariffTest() {
        // TODO: test activeTariff
    }

    /**
     * Test the property 'additionalMeterSerialNumber'
     */
    @Test
    public void additionalMeterSerialNumberTest() {
        // TODO: test additionalMeterSerialNumber
    }

    /**
     * Test the property 'analogOutput1'
     */
    @Test
    public void analogOutput1Test() {
        // TODO: test analogOutput1
    }

    /**
     * Test the property 'analogOutput2'
     */
    @Test
    public void analogOutput2Test() {
        // TODO: test analogOutput2
    }

    /**
     * Test the property 'chargingStationState'
     */
    @Test
    public void chargingStationStateTest() {
        // TODO: test chargingStationState
    }

    /**
     * Test the property 'counterReading'
     */
    @Test
    public void counterReadingTest() {
        // TODO: test counterReading
    }

    /**
     * Test the property 'counterReadingExport'
     */
    @Test
    public void counterReadingExportTest() {
        // TODO: test counterReadingExport
    }

    /**
     * Test the property 'counterReadingImport'
     */
    @Test
    public void counterReadingImportTest() {
        // TODO: test counterReadingImport
    }

    /**
     * Test the property 'counterReadingT1'
     */
    @Test
    public void counterReadingT1Test() {
        // TODO: test counterReadingT1
    }

    /**
     * Test the property 'counterReadingT2'
     */
    @Test
    public void counterReadingT2Test() {
        // TODO: test counterReadingT2
    }

    /**
     * Test the property 'counterReadingT3'
     */
    @Test
    public void counterReadingT3Test() {
        // TODO: test counterReadingT3
    }

    /**
     * Test the property 'counterReadingT4'
     */
    @Test
    public void counterReadingT4Test() {
        // TODO: test counterReadingT4
    }

    /**
     * Test the property 'counterReadingUnit'
     */
    @Test
    public void counterReadingUnitTest() {
        // TODO: test counterReadingUnit
    }

    /**
     * Test the property 'current'
     */
    @Test
    public void currentTest() {
        // TODO: test current
    }

    /**
     * Test the property 'currentL1'
     */
    @Test
    public void currentL1Test() {
        // TODO: test currentL1
    }

    /**
     * Test the property 'currentL2'
     */
    @Test
    public void currentL2Test() {
        // TODO: test currentL2
    }

    /**
     * Test the property 'currentL3'
     */
    @Test
    public void currentL3Test() {
        // TODO: test currentL3
    }

    /**
     * Test the property 'deviceEnergyType'
     */
    @Test
    public void deviceEnergyTypeTest() {
        // TODO: test deviceEnergyType
    }

    /**
     * Test the property 'digitalInput1'
     */
    @Test
    public void digitalInput1Test() {
        // TODO: test digitalInput1
    }

    /**
     * Test the property 'digitalInput2'
     */
    @Test
    public void digitalInput2Test() {
        // TODO: test digitalInput2
    }

    /**
     * Test the property 'digitalOutput1'
     */
    @Test
    public void digitalOutput1Test() {
        // TODO: test digitalOutput1
    }

    /**
     * Test the property 'digitalOutput2'
     */
    @Test
    public void digitalOutput2Test() {
        // TODO: test digitalOutput2
    }

    /**
     * Test the property 'familyType'
     */
    @Test
    public void familyTypeTest() {
        // TODO: test familyType
    }

    /**
     * Test the property 'flowRate'
     */
    @Test
    public void flowRateTest() {
        // TODO: test flowRate
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'meterSubType'
     */
    @Test
    public void meterSubTypeTest() {
        // TODO: test meterSubType
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'powerFactor'
     */
    @Test
    public void powerFactorTest() {
        // TODO: test powerFactor
    }

    /**
     * Test the property 'powerFactorL1'
     */
    @Test
    public void powerFactorL1Test() {
        // TODO: test powerFactorL1
    }

    /**
     * Test the property 'powerFactorL2'
     */
    @Test
    public void powerFactorL2Test() {
        // TODO: test powerFactorL2
    }

    /**
     * Test the property 'powerFactorL3'
     */
    @Test
    public void powerFactorL3Test() {
        // TODO: test powerFactorL3
    }

    /**
     * Test the property 'serial'
     */
    @Test
    public void serialTest() {
        // TODO: test serial
    }

    /**
     * Test the property 'switchOn'
     */
    @Test
    public void switchOnTest() {
        // TODO: test switchOn
    }

    /**
     * Test the property 'switchPhaseL1On'
     */
    @Test
    public void switchPhaseL1OnTest() {
        // TODO: test switchPhaseL1On
    }

    /**
     * Test the property 'switchPhaseL2On'
     */
    @Test
    public void switchPhaseL2OnTest() {
        // TODO: test switchPhaseL2On
    }

    /**
     * Test the property 'switchPhaseL3On'
     */
    @Test
    public void switchPhaseL3OnTest() {
        // TODO: test switchPhaseL3On
    }

    /**
     * Test the property 'temperature'
     */
    @Test
    public void temperatureTest() {
        // TODO: test temperature
    }

    /**
     * Test the property 'valueDate'
     */
    @Test
    public void valueDateTest() {
        // TODO: test valueDate
    }

    /**
     * Test the property 'voltage'
     */
    @Test
    public void voltageTest() {
        // TODO: test voltage
    }

    /**
     * Test the property 'voltageL1'
     */
    @Test
    public void voltageL1Test() {
        // TODO: test voltageL1
    }

    /**
     * Test the property 'voltageL2'
     */
    @Test
    public void voltageL2Test() {
        // TODO: test voltageL2
    }

    /**
     * Test the property 'voltageL3'
     */
    @Test
    public void voltageL3Test() {
        // TODO: test voltageL3
    }

}
