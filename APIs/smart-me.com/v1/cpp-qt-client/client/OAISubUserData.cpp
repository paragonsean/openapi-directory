/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubUserData::OAISubUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubUserData::OAISubUserData() {
    this->initializeModel();
}

OAISubUserData::~OAISubUserData() {}

void OAISubUserData::initializeModel() {

    m_access_end_date_isSet = false;
    m_access_end_date_isValid = false;

    m_access_time_start_date_isSet = false;
    m_access_time_start_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_new_password_isSet = false;
    m_new_password_isValid = false;

    m_permission_level_isSet = false;
    m_permission_level_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISubUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubUserData::fromJsonObject(QJsonObject json) {

    m_access_end_date_isValid = ::OpenAPI::fromJsonValue(m_access_end_date, json[QString("AccessEndDate")]);
    m_access_end_date_isSet = !json[QString("AccessEndDate")].isNull() && m_access_end_date_isValid;

    m_access_time_start_date_isValid = ::OpenAPI::fromJsonValue(m_access_time_start_date, json[QString("AccessTimeStartDate")]);
    m_access_time_start_date_isSet = !json[QString("AccessTimeStartDate")].isNull() && m_access_time_start_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_new_password_isValid = ::OpenAPI::fromJsonValue(m_new_password, json[QString("NewPassword")]);
    m_new_password_isSet = !json[QString("NewPassword")].isNull() && m_new_password_isValid;

    m_permission_level_isValid = ::OpenAPI::fromJsonValue(m_permission_level, json[QString("PermissionLevel")]);
    m_permission_level_isSet = !json[QString("PermissionLevel")].isNull() && m_permission_level_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAISubUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_access_end_date_isSet) {
        obj.insert(QString("AccessEndDate"), ::OpenAPI::toJsonValue(m_access_end_date));
    }
    if (m_access_time_start_date_isSet) {
        obj.insert(QString("AccessTimeStartDate"), ::OpenAPI::toJsonValue(m_access_time_start_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_new_password_isSet) {
        obj.insert(QString("NewPassword"), ::OpenAPI::toJsonValue(m_new_password));
    }
    if (m_permission_level_isSet) {
        obj.insert(QString("PermissionLevel"), ::OpenAPI::toJsonValue(m_permission_level));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QDateTime OAISubUserData::getAccessEndDate() const {
    return m_access_end_date;
}
void OAISubUserData::setAccessEndDate(const QDateTime &access_end_date) {
    m_access_end_date = access_end_date;
    m_access_end_date_isSet = true;
}

bool OAISubUserData::is_access_end_date_Set() const{
    return m_access_end_date_isSet;
}

bool OAISubUserData::is_access_end_date_Valid() const{
    return m_access_end_date_isValid;
}

QDateTime OAISubUserData::getAccessTimeStartDate() const {
    return m_access_time_start_date;
}
void OAISubUserData::setAccessTimeStartDate(const QDateTime &access_time_start_date) {
    m_access_time_start_date = access_time_start_date;
    m_access_time_start_date_isSet = true;
}

bool OAISubUserData::is_access_time_start_date_Set() const{
    return m_access_time_start_date_isSet;
}

bool OAISubUserData::is_access_time_start_date_Valid() const{
    return m_access_time_start_date_isValid;
}

QString OAISubUserData::getEmail() const {
    return m_email;
}
void OAISubUserData::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubUserData::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubUserData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISubUserData::getId() const {
    return m_id;
}
void OAISubUserData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubUserData::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubUserData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubUserData::getNewPassword() const {
    return m_new_password;
}
void OAISubUserData::setNewPassword(const QString &new_password) {
    m_new_password = new_password;
    m_new_password_isSet = true;
}

bool OAISubUserData::is_new_password_Set() const{
    return m_new_password_isSet;
}

bool OAISubUserData::is_new_password_Valid() const{
    return m_new_password_isValid;
}

QString OAISubUserData::getPermissionLevel() const {
    return m_permission_level;
}
void OAISubUserData::setPermissionLevel(const QString &permission_level) {
    m_permission_level = permission_level;
    m_permission_level_isSet = true;
}

bool OAISubUserData::is_permission_level_Set() const{
    return m_permission_level_isSet;
}

bool OAISubUserData::is_permission_level_Valid() const{
    return m_permission_level_isValid;
}

QString OAISubUserData::getUsername() const {
    return m_username;
}
void OAISubUserData::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISubUserData::is_username_Set() const{
    return m_username_isSet;
}

bool OAISubUserData::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISubUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_time_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
