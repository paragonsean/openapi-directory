/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeterFolderInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeterFolderInformation::OAIMeterFolderInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeterFolderInformation::OAIMeterFolderInformation() {
    this->initializeModel();
}

OAIMeterFolderInformation::~OAIMeterFolderInformation() {}

void OAIMeterFolderInformation::initializeModel() {

    m_communication_module_firmware_version_isSet = false;
    m_communication_module_firmware_version_isValid = false;

    m_communication_module_hardware_version_isSet = false;
    m_communication_module_hardware_version_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_hardware_version_isSet = false;
    m_hardware_version_isValid = false;

    m_input_informations_isSet = false;
    m_input_informations_isValid = false;

    m_is_folder_isSet = false;
    m_is_folder_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_informations_isSet = false;
    m_output_informations_isValid = false;
}

void OAIMeterFolderInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeterFolderInformation::fromJsonObject(QJsonObject json) {

    m_communication_module_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_communication_module_firmware_version, json[QString("CommunicationModuleFirmwareVersion")]);
    m_communication_module_firmware_version_isSet = !json[QString("CommunicationModuleFirmwareVersion")].isNull() && m_communication_module_firmware_version_isValid;

    m_communication_module_hardware_version_isValid = ::OpenAPI::fromJsonValue(m_communication_module_hardware_version, json[QString("CommunicationModuleHardwareVersion")]);
    m_communication_module_hardware_version_isSet = !json[QString("CommunicationModuleHardwareVersion")].isNull() && m_communication_module_hardware_version_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("FirmwareVersion")]);
    m_firmware_version_isSet = !json[QString("FirmwareVersion")].isNull() && m_firmware_version_isValid;

    m_hardware_version_isValid = ::OpenAPI::fromJsonValue(m_hardware_version, json[QString("HardwareVersion")]);
    m_hardware_version_isSet = !json[QString("HardwareVersion")].isNull() && m_hardware_version_isValid;

    m_input_informations_isValid = ::OpenAPI::fromJsonValue(m_input_informations, json[QString("InputInformations")]);
    m_input_informations_isSet = !json[QString("InputInformations")].isNull() && m_input_informations_isValid;

    m_is_folder_isValid = ::OpenAPI::fromJsonValue(m_is_folder, json[QString("IsFolder")]);
    m_is_folder_isSet = !json[QString("IsFolder")].isNull() && m_is_folder_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_output_informations_isValid = ::OpenAPI::fromJsonValue(m_output_informations, json[QString("OutputInformations")]);
    m_output_informations_isSet = !json[QString("OutputInformations")].isNull() && m_output_informations_isValid;
}

QString OAIMeterFolderInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeterFolderInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_communication_module_firmware_version_isSet) {
        obj.insert(QString("CommunicationModuleFirmwareVersion"), ::OpenAPI::toJsonValue(m_communication_module_firmware_version));
    }
    if (m_communication_module_hardware_version_isSet) {
        obj.insert(QString("CommunicationModuleHardwareVersion"), ::OpenAPI::toJsonValue(m_communication_module_hardware_version));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("FirmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_hardware_version_isSet) {
        obj.insert(QString("HardwareVersion"), ::OpenAPI::toJsonValue(m_hardware_version));
    }
    if (m_input_informations.size() > 0) {
        obj.insert(QString("InputInformations"), ::OpenAPI::toJsonValue(m_input_informations));
    }
    if (m_is_folder_isSet) {
        obj.insert(QString("IsFolder"), ::OpenAPI::toJsonValue(m_is_folder));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_informations.size() > 0) {
        obj.insert(QString("OutputInformations"), ::OpenAPI::toJsonValue(m_output_informations));
    }
    return obj;
}

qint32 OAIMeterFolderInformation::getCommunicationModuleFirmwareVersion() const {
    return m_communication_module_firmware_version;
}
void OAIMeterFolderInformation::setCommunicationModuleFirmwareVersion(const qint32 &communication_module_firmware_version) {
    m_communication_module_firmware_version = communication_module_firmware_version;
    m_communication_module_firmware_version_isSet = true;
}

bool OAIMeterFolderInformation::is_communication_module_firmware_version_Set() const{
    return m_communication_module_firmware_version_isSet;
}

bool OAIMeterFolderInformation::is_communication_module_firmware_version_Valid() const{
    return m_communication_module_firmware_version_isValid;
}

qint32 OAIMeterFolderInformation::getCommunicationModuleHardwareVersion() const {
    return m_communication_module_hardware_version;
}
void OAIMeterFolderInformation::setCommunicationModuleHardwareVersion(const qint32 &communication_module_hardware_version) {
    m_communication_module_hardware_version = communication_module_hardware_version;
    m_communication_module_hardware_version_isSet = true;
}

bool OAIMeterFolderInformation::is_communication_module_hardware_version_Set() const{
    return m_communication_module_hardware_version_isSet;
}

bool OAIMeterFolderInformation::is_communication_module_hardware_version_Valid() const{
    return m_communication_module_hardware_version_isValid;
}

qint32 OAIMeterFolderInformation::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIMeterFolderInformation::setFirmwareVersion(const qint32 &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIMeterFolderInformation::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIMeterFolderInformation::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

qint32 OAIMeterFolderInformation::getHardwareVersion() const {
    return m_hardware_version;
}
void OAIMeterFolderInformation::setHardwareVersion(const qint32 &hardware_version) {
    m_hardware_version = hardware_version;
    m_hardware_version_isSet = true;
}

bool OAIMeterFolderInformation::is_hardware_version_Set() const{
    return m_hardware_version_isSet;
}

bool OAIMeterFolderInformation::is_hardware_version_Valid() const{
    return m_hardware_version_isValid;
}

QList<OAIInputInformation> OAIMeterFolderInformation::getInputInformations() const {
    return m_input_informations;
}
void OAIMeterFolderInformation::setInputInformations(const QList<OAIInputInformation> &input_informations) {
    m_input_informations = input_informations;
    m_input_informations_isSet = true;
}

bool OAIMeterFolderInformation::is_input_informations_Set() const{
    return m_input_informations_isSet;
}

bool OAIMeterFolderInformation::is_input_informations_Valid() const{
    return m_input_informations_isValid;
}

bool OAIMeterFolderInformation::isIsFolder() const {
    return m_is_folder;
}
void OAIMeterFolderInformation::setIsFolder(const bool &is_folder) {
    m_is_folder = is_folder;
    m_is_folder_isSet = true;
}

bool OAIMeterFolderInformation::is_is_folder_Set() const{
    return m_is_folder_isSet;
}

bool OAIMeterFolderInformation::is_is_folder_Valid() const{
    return m_is_folder_isValid;
}

QString OAIMeterFolderInformation::getName() const {
    return m_name;
}
void OAIMeterFolderInformation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMeterFolderInformation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMeterFolderInformation::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOutputInformation> OAIMeterFolderInformation::getOutputInformations() const {
    return m_output_informations;
}
void OAIMeterFolderInformation::setOutputInformations(const QList<OAIOutputInformation> &output_informations) {
    m_output_informations = output_informations;
    m_output_informations_isSet = true;
}

bool OAIMeterFolderInformation::is_output_informations_Set() const{
    return m_output_informations_isSet;
}

bool OAIMeterFolderInformation::is_output_informations_Valid() const{
    return m_output_informations_isValid;
}

bool OAIMeterFolderInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_communication_module_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_module_hardware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_informations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_informations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeterFolderInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
