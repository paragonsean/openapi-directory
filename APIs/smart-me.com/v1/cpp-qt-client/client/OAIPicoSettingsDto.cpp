/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPicoSettingsDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPicoSettingsDto::OAIPicoSettingsDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPicoSettingsDto::OAIPicoSettingsDto() {
    this->initializeModel();
}

OAIPicoSettingsDto::~OAIPicoSettingsDto() {}

void OAIPicoSettingsDto::initializeModel() {

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_car_id_detection_isSet = false;
    m_car_id_detection_isValid = false;

    m_display_brightness_isSet = false;
    m_display_brightness_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_fix_cable_lock_enable_isSet = false;
    m_fix_cable_lock_enable_isValid = false;

    m_idle_image_url_isSet = false;
    m_idle_image_url_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;

    m_loadmanagement_group_id_isSet = false;
    m_loadmanagement_group_id_isValid = false;

    m_max_current_isSet = false;
    m_max_current_isValid = false;

    m_min_current_isSet = false;
    m_min_current_isValid = false;

    m_modbus_tcp_isSet = false;
    m_modbus_tcp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIPicoSettingsDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPicoSettingsDto::fromJsonObject(QJsonObject json) {

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_car_id_detection_isValid = ::OpenAPI::fromJsonValue(m_car_id_detection, json[QString("CarIdDetection")]);
    m_car_id_detection_isSet = !json[QString("CarIdDetection")].isNull() && m_car_id_detection_isValid;

    m_display_brightness_isValid = ::OpenAPI::fromJsonValue(m_display_brightness, json[QString("DisplayBrightness")]);
    m_display_brightness_isSet = !json[QString("DisplayBrightness")].isNull() && m_display_brightness_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DnsName")]);
    m_dns_name_isSet = !json[QString("DnsName")].isNull() && m_dns_name_isValid;

    m_fix_cable_lock_enable_isValid = ::OpenAPI::fromJsonValue(m_fix_cable_lock_enable, json[QString("FixCableLockEnable")]);
    m_fix_cable_lock_enable_isSet = !json[QString("FixCableLockEnable")].isNull() && m_fix_cable_lock_enable_isValid;

    m_idle_image_url_isValid = ::OpenAPI::fromJsonValue(m_idle_image_url, json[QString("IdleImageUrl")]);
    m_idle_image_url_isSet = !json[QString("IdleImageUrl")].isNull() && m_idle_image_url_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("InternalIp")]);
    m_internal_ip_isSet = !json[QString("InternalIp")].isNull() && m_internal_ip_isValid;

    m_loadmanagement_group_id_isValid = ::OpenAPI::fromJsonValue(m_loadmanagement_group_id, json[QString("LoadmanagementGroupId")]);
    m_loadmanagement_group_id_isSet = !json[QString("LoadmanagementGroupId")].isNull() && m_loadmanagement_group_id_isValid;

    m_max_current_isValid = ::OpenAPI::fromJsonValue(m_max_current, json[QString("MaxCurrent")]);
    m_max_current_isSet = !json[QString("MaxCurrent")].isNull() && m_max_current_isValid;

    m_min_current_isValid = ::OpenAPI::fromJsonValue(m_min_current, json[QString("MinCurrent")]);
    m_min_current_isSet = !json[QString("MinCurrent")].isNull() && m_min_current_isValid;

    m_modbus_tcp_isValid = ::OpenAPI::fromJsonValue(m_modbus_tcp, json[QString("ModbusTcp")]);
    m_modbus_tcp_isSet = !json[QString("ModbusTcp")].isNull() && m_modbus_tcp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIPicoSettingsDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPicoSettingsDto::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_type_isSet) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_car_id_detection_isSet) {
        obj.insert(QString("CarIdDetection"), ::OpenAPI::toJsonValue(m_car_id_detection));
    }
    if (m_display_brightness_isSet) {
        obj.insert(QString("DisplayBrightness"), ::OpenAPI::toJsonValue(m_display_brightness));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_fix_cable_lock_enable_isSet) {
        obj.insert(QString("FixCableLockEnable"), ::OpenAPI::toJsonValue(m_fix_cable_lock_enable));
    }
    if (m_idle_image_url_isSet) {
        obj.insert(QString("IdleImageUrl"), ::OpenAPI::toJsonValue(m_idle_image_url));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("InternalIp"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    if (m_loadmanagement_group_id_isSet) {
        obj.insert(QString("LoadmanagementGroupId"), ::OpenAPI::toJsonValue(m_loadmanagement_group_id));
    }
    if (m_max_current_isSet) {
        obj.insert(QString("MaxCurrent"), ::OpenAPI::toJsonValue(m_max_current));
    }
    if (m_min_current_isSet) {
        obj.insert(QString("MinCurrent"), ::OpenAPI::toJsonValue(m_min_current));
    }
    if (m_modbus_tcp_isSet) {
        obj.insert(QString("ModbusTcp"), ::OpenAPI::toJsonValue(m_modbus_tcp));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIPicoSettingsDto::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIPicoSettingsDto::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIPicoSettingsDto::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIPicoSettingsDto::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

bool OAIPicoSettingsDto::isCarIdDetection() const {
    return m_car_id_detection;
}
void OAIPicoSettingsDto::setCarIdDetection(const bool &car_id_detection) {
    m_car_id_detection = car_id_detection;
    m_car_id_detection_isSet = true;
}

bool OAIPicoSettingsDto::is_car_id_detection_Set() const{
    return m_car_id_detection_isSet;
}

bool OAIPicoSettingsDto::is_car_id_detection_Valid() const{
    return m_car_id_detection_isValid;
}

QByteArray OAIPicoSettingsDto::getDisplayBrightness() const {
    return m_display_brightness;
}
void OAIPicoSettingsDto::setDisplayBrightness(const QByteArray &display_brightness) {
    m_display_brightness = display_brightness;
    m_display_brightness_isSet = true;
}

bool OAIPicoSettingsDto::is_display_brightness_Set() const{
    return m_display_brightness_isSet;
}

bool OAIPicoSettingsDto::is_display_brightness_Valid() const{
    return m_display_brightness_isValid;
}

QString OAIPicoSettingsDto::getDnsName() const {
    return m_dns_name;
}
void OAIPicoSettingsDto::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIPicoSettingsDto::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIPicoSettingsDto::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

bool OAIPicoSettingsDto::isFixCableLockEnable() const {
    return m_fix_cable_lock_enable;
}
void OAIPicoSettingsDto::setFixCableLockEnable(const bool &fix_cable_lock_enable) {
    m_fix_cable_lock_enable = fix_cable_lock_enable;
    m_fix_cable_lock_enable_isSet = true;
}

bool OAIPicoSettingsDto::is_fix_cable_lock_enable_Set() const{
    return m_fix_cable_lock_enable_isSet;
}

bool OAIPicoSettingsDto::is_fix_cable_lock_enable_Valid() const{
    return m_fix_cable_lock_enable_isValid;
}

QString OAIPicoSettingsDto::getIdleImageUrl() const {
    return m_idle_image_url;
}
void OAIPicoSettingsDto::setIdleImageUrl(const QString &idle_image_url) {
    m_idle_image_url = idle_image_url;
    m_idle_image_url_isSet = true;
}

bool OAIPicoSettingsDto::is_idle_image_url_Set() const{
    return m_idle_image_url_isSet;
}

bool OAIPicoSettingsDto::is_idle_image_url_Valid() const{
    return m_idle_image_url_isValid;
}

QString OAIPicoSettingsDto::getInternalIp() const {
    return m_internal_ip;
}
void OAIPicoSettingsDto::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAIPicoSettingsDto::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAIPicoSettingsDto::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

QString OAIPicoSettingsDto::getLoadmanagementGroupId() const {
    return m_loadmanagement_group_id;
}
void OAIPicoSettingsDto::setLoadmanagementGroupId(const QString &loadmanagement_group_id) {
    m_loadmanagement_group_id = loadmanagement_group_id;
    m_loadmanagement_group_id_isSet = true;
}

bool OAIPicoSettingsDto::is_loadmanagement_group_id_Set() const{
    return m_loadmanagement_group_id_isSet;
}

bool OAIPicoSettingsDto::is_loadmanagement_group_id_Valid() const{
    return m_loadmanagement_group_id_isValid;
}

qint32 OAIPicoSettingsDto::getMaxCurrent() const {
    return m_max_current;
}
void OAIPicoSettingsDto::setMaxCurrent(const qint32 &max_current) {
    m_max_current = max_current;
    m_max_current_isSet = true;
}

bool OAIPicoSettingsDto::is_max_current_Set() const{
    return m_max_current_isSet;
}

bool OAIPicoSettingsDto::is_max_current_Valid() const{
    return m_max_current_isValid;
}

qint32 OAIPicoSettingsDto::getMinCurrent() const {
    return m_min_current;
}
void OAIPicoSettingsDto::setMinCurrent(const qint32 &min_current) {
    m_min_current = min_current;
    m_min_current_isSet = true;
}

bool OAIPicoSettingsDto::is_min_current_Set() const{
    return m_min_current_isSet;
}

bool OAIPicoSettingsDto::is_min_current_Valid() const{
    return m_min_current_isValid;
}

bool OAIPicoSettingsDto::isModbusTcp() const {
    return m_modbus_tcp;
}
void OAIPicoSettingsDto::setModbusTcp(const bool &modbus_tcp) {
    m_modbus_tcp = modbus_tcp;
    m_modbus_tcp_isSet = true;
}

bool OAIPicoSettingsDto::is_modbus_tcp_Set() const{
    return m_modbus_tcp_isSet;
}

bool OAIPicoSettingsDto::is_modbus_tcp_Valid() const{
    return m_modbus_tcp_isValid;
}

QString OAIPicoSettingsDto::getName() const {
    return m_name;
}
void OAIPicoSettingsDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPicoSettingsDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPicoSettingsDto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPicoSettingsDto::getSerialNumber() const {
    return m_serial_number;
}
void OAIPicoSettingsDto::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIPicoSettingsDto::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIPicoSettingsDto::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIPicoSettingsDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_id_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_brightness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_cable_lock_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadmanagement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modbus_tcp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPicoSettingsDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
