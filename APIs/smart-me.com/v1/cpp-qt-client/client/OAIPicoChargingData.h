/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPicoChargingData.h
 *
 * Container class for the pico charging station API
 */

#ifndef OAIPicoChargingData_H
#define OAIPicoChargingData_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPicoChargingData : public OAIObject {
public:
    OAIPicoChargingData();
    OAIPicoChargingData(QString json);
    ~OAIPicoChargingData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getActiveChargingEnergy() const;
    void setActiveChargingEnergy(const double &active_charging_energy);
    bool is_active_charging_energy_Set() const;
    bool is_active_charging_energy_Valid() const;

    double getActiveChargingPower() const;
    void setActiveChargingPower(const double &active_charging_power);
    bool is_active_charging_power_Set() const;
    bool is_active_charging_power_Valid() const;

    QString getConnectionMode() const;
    void setConnectionMode(const QString &connection_mode);
    bool is_connection_mode_Set() const;
    bool is_connection_mode_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getLastWarningOrError() const;
    void setLastWarningOrError(const QString &last_warning_or_error);
    bool is_last_warning_or_error_Set() const;
    bool is_last_warning_or_error_Valid() const;

    QString getLastWarningOrErrorMessage() const;
    void setLastWarningOrErrorMessage(const QString &last_warning_or_error_message);
    bool is_last_warning_or_error_message_Set() const;
    bool is_last_warning_or_error_message_Valid() const;

    QDateTime getLastWarningOrErrorTime() const;
    void setLastWarningOrErrorTime(const QDateTime &last_warning_or_error_time);
    bool is_last_warning_or_error_time_Set() const;
    bool is_last_warning_or_error_time_Valid() const;

    QString getLoadSheddingState() const;
    void setLoadSheddingState(const QString &load_shedding_state);
    bool is_load_shedding_state_Set() const;
    bool is_load_shedding_state_Valid() const;

    QString getLoadmanagementGroupName() const;
    void setLoadmanagementGroupName(const QString &loadmanagement_group_name);
    bool is_loadmanagement_group_name_Set() const;
    bool is_loadmanagement_group_name_Valid() const;

    qint32 getMaxAllowedChargingCurrent() const;
    void setMaxAllowedChargingCurrent(const qint32 &max_allowed_charging_current);
    bool is_max_allowed_charging_current_Set() const;
    bool is_max_allowed_charging_current_Valid() const;

    qint32 getMaxDynamicCurrent() const;
    void setMaxDynamicCurrent(const qint32 &max_dynamic_current);
    bool is_max_dynamic_current_Set() const;
    bool is_max_dynamic_current_Valid() const;

    qint32 getMaxLoadmanagementGroupCurrent() const;
    void setMaxLoadmanagementGroupCurrent(const qint32 &max_loadmanagement_group_current);
    bool is_max_loadmanagement_group_current_Set() const;
    bool is_max_loadmanagement_group_current_Valid() const;

    qint32 getMaxStationCurrent() const;
    void setMaxStationCurrent(const qint32 &max_station_current);
    bool is_max_station_current_Set() const;
    bool is_max_station_current_Valid() const;

    qint32 getMinStationCurrent() const;
    void setMinStationCurrent(const qint32 &min_station_current);
    bool is_min_station_current_Set() const;
    bool is_min_station_current_Valid() const;

    qint32 getRssi() const;
    void setRssi(const qint32 &rssi);
    bool is_rssi_Set() const;
    bool is_rssi_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getValueDate() const;
    void setValueDate(const QDateTime &value_date);
    bool is_value_date_Set() const;
    bool is_value_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_active_charging_energy;
    bool m_active_charging_energy_isSet;
    bool m_active_charging_energy_isValid;

    double m_active_charging_power;
    bool m_active_charging_power_isSet;
    bool m_active_charging_power_isValid;

    QString m_connection_mode;
    bool m_connection_mode_isSet;
    bool m_connection_mode_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_last_warning_or_error;
    bool m_last_warning_or_error_isSet;
    bool m_last_warning_or_error_isValid;

    QString m_last_warning_or_error_message;
    bool m_last_warning_or_error_message_isSet;
    bool m_last_warning_or_error_message_isValid;

    QDateTime m_last_warning_or_error_time;
    bool m_last_warning_or_error_time_isSet;
    bool m_last_warning_or_error_time_isValid;

    QString m_load_shedding_state;
    bool m_load_shedding_state_isSet;
    bool m_load_shedding_state_isValid;

    QString m_loadmanagement_group_name;
    bool m_loadmanagement_group_name_isSet;
    bool m_loadmanagement_group_name_isValid;

    qint32 m_max_allowed_charging_current;
    bool m_max_allowed_charging_current_isSet;
    bool m_max_allowed_charging_current_isValid;

    qint32 m_max_dynamic_current;
    bool m_max_dynamic_current_isSet;
    bool m_max_dynamic_current_isValid;

    qint32 m_max_loadmanagement_group_current;
    bool m_max_loadmanagement_group_current_isSet;
    bool m_max_loadmanagement_group_current_isValid;

    qint32 m_max_station_current;
    bool m_max_station_current_isSet;
    bool m_max_station_current_isValid;

    qint32 m_min_station_current;
    bool m_min_station_current_isSet;
    bool m_min_station_current_isValid;

    qint32 m_rssi;
    bool m_rssi_isSet;
    bool m_rssi_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_value_date;
    bool m_value_date_isSet;
    bool m_value_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPicoChargingData)

#endif // OAIPicoChargingData_H
