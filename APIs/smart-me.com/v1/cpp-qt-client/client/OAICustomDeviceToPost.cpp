/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDeviceToPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDeviceToPost::OAICustomDeviceToPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDeviceToPost::OAICustomDeviceToPost() {
    this->initializeModel();
}

OAICustomDeviceToPost::~OAICustomDeviceToPost() {}

void OAICustomDeviceToPost::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICustomDeviceToPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDeviceToPost::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("ValueDate")]);
    m_value_date_isSet = !json[QString("ValueDate")].isNull() && m_value_date_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAICustomDeviceToPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDeviceToPost::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("ValueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAICustomDeviceToPost::getId() const {
    return m_id;
}
void OAICustomDeviceToPost::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomDeviceToPost::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomDeviceToPost::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomDeviceToPost::getName() const {
    return m_name;
}
void OAICustomDeviceToPost::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomDeviceToPost::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomDeviceToPost::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAICustomDeviceToPost::getSerial() const {
    return m_serial;
}
void OAICustomDeviceToPost::setSerial(const qint64 &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAICustomDeviceToPost::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAICustomDeviceToPost::is_serial_Valid() const{
    return m_serial_isValid;
}

QDateTime OAICustomDeviceToPost::getValueDate() const {
    return m_value_date;
}
void OAICustomDeviceToPost::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAICustomDeviceToPost::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAICustomDeviceToPost::is_value_date_Valid() const{
    return m_value_date_isValid;
}

QList<OAICustomDeviceValues> OAICustomDeviceToPost::getValues() const {
    return m_values;
}
void OAICustomDeviceToPost::setValues(const QList<OAICustomDeviceValues> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICustomDeviceToPost::is_values_Set() const{
    return m_values_isSet;
}

bool OAICustomDeviceToPost::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICustomDeviceToPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDeviceToPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
