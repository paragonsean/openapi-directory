/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolderData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolderData::OAIFolderData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolderData::OAIFolderData() {
    this->initializeModel();
}

OAIFolderData::~OAIFolderData() {}

void OAIFolderData::initializeModel() {

    m_electricity_counter_value_isSet = false;
    m_electricity_counter_value_isValid = false;

    m_electricity_power_isSet = false;
    m_electricity_power_isValid = false;

    m_gas_counter_value_isSet = false;
    m_gas_counter_value_isValid = false;

    m_gas_flow_rate_isSet = false;
    m_gas_flow_rate_isValid = false;

    m_heat_counter_value_isSet = false;
    m_heat_counter_value_isValid = false;

    m_heat_power_isSet = false;
    m_heat_power_isValid = false;

    m_water_counter_value_isSet = false;
    m_water_counter_value_isValid = false;

    m_water_flow_rate_isSet = false;
    m_water_flow_rate_isValid = false;
}

void OAIFolderData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolderData::fromJsonObject(QJsonObject json) {

    m_electricity_counter_value_isValid = ::OpenAPI::fromJsonValue(m_electricity_counter_value, json[QString("ElectricityCounterValue")]);
    m_electricity_counter_value_isSet = !json[QString("ElectricityCounterValue")].isNull() && m_electricity_counter_value_isValid;

    m_electricity_power_isValid = ::OpenAPI::fromJsonValue(m_electricity_power, json[QString("ElectricityPower")]);
    m_electricity_power_isSet = !json[QString("ElectricityPower")].isNull() && m_electricity_power_isValid;

    m_gas_counter_value_isValid = ::OpenAPI::fromJsonValue(m_gas_counter_value, json[QString("GasCounterValue")]);
    m_gas_counter_value_isSet = !json[QString("GasCounterValue")].isNull() && m_gas_counter_value_isValid;

    m_gas_flow_rate_isValid = ::OpenAPI::fromJsonValue(m_gas_flow_rate, json[QString("GasFlowRate")]);
    m_gas_flow_rate_isSet = !json[QString("GasFlowRate")].isNull() && m_gas_flow_rate_isValid;

    m_heat_counter_value_isValid = ::OpenAPI::fromJsonValue(m_heat_counter_value, json[QString("HeatCounterValue")]);
    m_heat_counter_value_isSet = !json[QString("HeatCounterValue")].isNull() && m_heat_counter_value_isValid;

    m_heat_power_isValid = ::OpenAPI::fromJsonValue(m_heat_power, json[QString("HeatPower")]);
    m_heat_power_isSet = !json[QString("HeatPower")].isNull() && m_heat_power_isValid;

    m_water_counter_value_isValid = ::OpenAPI::fromJsonValue(m_water_counter_value, json[QString("WaterCounterValue")]);
    m_water_counter_value_isSet = !json[QString("WaterCounterValue")].isNull() && m_water_counter_value_isValid;

    m_water_flow_rate_isValid = ::OpenAPI::fromJsonValue(m_water_flow_rate, json[QString("WaterFlowRate")]);
    m_water_flow_rate_isSet = !json[QString("WaterFlowRate")].isNull() && m_water_flow_rate_isValid;
}

QString OAIFolderData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolderData::asJsonObject() const {
    QJsonObject obj;
    if (m_electricity_counter_value_isSet) {
        obj.insert(QString("ElectricityCounterValue"), ::OpenAPI::toJsonValue(m_electricity_counter_value));
    }
    if (m_electricity_power_isSet) {
        obj.insert(QString("ElectricityPower"), ::OpenAPI::toJsonValue(m_electricity_power));
    }
    if (m_gas_counter_value_isSet) {
        obj.insert(QString("GasCounterValue"), ::OpenAPI::toJsonValue(m_gas_counter_value));
    }
    if (m_gas_flow_rate_isSet) {
        obj.insert(QString("GasFlowRate"), ::OpenAPI::toJsonValue(m_gas_flow_rate));
    }
    if (m_heat_counter_value_isSet) {
        obj.insert(QString("HeatCounterValue"), ::OpenAPI::toJsonValue(m_heat_counter_value));
    }
    if (m_heat_power_isSet) {
        obj.insert(QString("HeatPower"), ::OpenAPI::toJsonValue(m_heat_power));
    }
    if (m_water_counter_value_isSet) {
        obj.insert(QString("WaterCounterValue"), ::OpenAPI::toJsonValue(m_water_counter_value));
    }
    if (m_water_flow_rate_isSet) {
        obj.insert(QString("WaterFlowRate"), ::OpenAPI::toJsonValue(m_water_flow_rate));
    }
    return obj;
}

double OAIFolderData::getElectricityCounterValue() const {
    return m_electricity_counter_value;
}
void OAIFolderData::setElectricityCounterValue(const double &electricity_counter_value) {
    m_electricity_counter_value = electricity_counter_value;
    m_electricity_counter_value_isSet = true;
}

bool OAIFolderData::is_electricity_counter_value_Set() const{
    return m_electricity_counter_value_isSet;
}

bool OAIFolderData::is_electricity_counter_value_Valid() const{
    return m_electricity_counter_value_isValid;
}

double OAIFolderData::getElectricityPower() const {
    return m_electricity_power;
}
void OAIFolderData::setElectricityPower(const double &electricity_power) {
    m_electricity_power = electricity_power;
    m_electricity_power_isSet = true;
}

bool OAIFolderData::is_electricity_power_Set() const{
    return m_electricity_power_isSet;
}

bool OAIFolderData::is_electricity_power_Valid() const{
    return m_electricity_power_isValid;
}

double OAIFolderData::getGasCounterValue() const {
    return m_gas_counter_value;
}
void OAIFolderData::setGasCounterValue(const double &gas_counter_value) {
    m_gas_counter_value = gas_counter_value;
    m_gas_counter_value_isSet = true;
}

bool OAIFolderData::is_gas_counter_value_Set() const{
    return m_gas_counter_value_isSet;
}

bool OAIFolderData::is_gas_counter_value_Valid() const{
    return m_gas_counter_value_isValid;
}

double OAIFolderData::getGasFlowRate() const {
    return m_gas_flow_rate;
}
void OAIFolderData::setGasFlowRate(const double &gas_flow_rate) {
    m_gas_flow_rate = gas_flow_rate;
    m_gas_flow_rate_isSet = true;
}

bool OAIFolderData::is_gas_flow_rate_Set() const{
    return m_gas_flow_rate_isSet;
}

bool OAIFolderData::is_gas_flow_rate_Valid() const{
    return m_gas_flow_rate_isValid;
}

double OAIFolderData::getHeatCounterValue() const {
    return m_heat_counter_value;
}
void OAIFolderData::setHeatCounterValue(const double &heat_counter_value) {
    m_heat_counter_value = heat_counter_value;
    m_heat_counter_value_isSet = true;
}

bool OAIFolderData::is_heat_counter_value_Set() const{
    return m_heat_counter_value_isSet;
}

bool OAIFolderData::is_heat_counter_value_Valid() const{
    return m_heat_counter_value_isValid;
}

double OAIFolderData::getHeatPower() const {
    return m_heat_power;
}
void OAIFolderData::setHeatPower(const double &heat_power) {
    m_heat_power = heat_power;
    m_heat_power_isSet = true;
}

bool OAIFolderData::is_heat_power_Set() const{
    return m_heat_power_isSet;
}

bool OAIFolderData::is_heat_power_Valid() const{
    return m_heat_power_isValid;
}

double OAIFolderData::getWaterCounterValue() const {
    return m_water_counter_value;
}
void OAIFolderData::setWaterCounterValue(const double &water_counter_value) {
    m_water_counter_value = water_counter_value;
    m_water_counter_value_isSet = true;
}

bool OAIFolderData::is_water_counter_value_Set() const{
    return m_water_counter_value_isSet;
}

bool OAIFolderData::is_water_counter_value_Valid() const{
    return m_water_counter_value_isValid;
}

double OAIFolderData::getWaterFlowRate() const {
    return m_water_flow_rate;
}
void OAIFolderData::setWaterFlowRate(const double &water_flow_rate) {
    m_water_flow_rate = water_flow_rate;
    m_water_flow_rate_isSet = true;
}

bool OAIFolderData::is_water_flow_rate_Set() const{
    return m_water_flow_rate_isSet;
}

bool OAIFolderData::is_water_flow_rate_Valid() const{
    return m_water_flow_rate_isValid;
}

bool OAIFolderData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_electricity_counter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electricity_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_counter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gas_flow_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_counter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heat_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_counter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_flow_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolderData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
