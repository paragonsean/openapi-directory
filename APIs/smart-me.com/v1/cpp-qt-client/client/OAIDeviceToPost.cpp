/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceToPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceToPost::OAIDeviceToPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceToPost::OAIDeviceToPost() {
    this->initializeModel();
}

OAIDeviceToPost::~OAIDeviceToPost() {}

void OAIDeviceToPost::initializeModel() {

    m_active_power_isSet = false;
    m_active_power_isValid = false;

    m_counter_reading_isSet = false;
    m_counter_reading_isValid = false;

    m_counter_reading_export_isSet = false;
    m_counter_reading_export_isValid = false;

    m_counter_reading_export_t1_isSet = false;
    m_counter_reading_export_t1_isValid = false;

    m_counter_reading_export_t2_isSet = false;
    m_counter_reading_export_t2_isValid = false;

    m_counter_reading_t1_isSet = false;
    m_counter_reading_t1_isValid = false;

    m_counter_reading_t2_isSet = false;
    m_counter_reading_t2_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_current_l1_isSet = false;
    m_current_l1_isValid = false;

    m_current_l2_isSet = false;
    m_current_l2_isValid = false;

    m_current_l3_isSet = false;
    m_current_l3_isValid = false;

    m_device_energy_type_isSet = false;
    m_device_energy_type_isValid = false;

    m_digital_input1_isSet = false;
    m_digital_input1_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meter_sub_type_isSet = false;
    m_meter_sub_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_power_factor_isSet = false;
    m_power_factor_isValid = false;

    m_power_factor_l1_isSet = false;
    m_power_factor_l1_isValid = false;

    m_power_factor_l2_isSet = false;
    m_power_factor_l2_isValid = false;

    m_power_factor_l3_isSet = false;
    m_power_factor_l3_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;

    m_voltage_l1_isSet = false;
    m_voltage_l1_isValid = false;

    m_voltage_l2_isSet = false;
    m_voltage_l2_isValid = false;

    m_voltage_l3_isSet = false;
    m_voltage_l3_isValid = false;
}

void OAIDeviceToPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceToPost::fromJsonObject(QJsonObject json) {

    m_active_power_isValid = ::OpenAPI::fromJsonValue(m_active_power, json[QString("ActivePower")]);
    m_active_power_isSet = !json[QString("ActivePower")].isNull() && m_active_power_isValid;

    m_counter_reading_isValid = ::OpenAPI::fromJsonValue(m_counter_reading, json[QString("CounterReading")]);
    m_counter_reading_isSet = !json[QString("CounterReading")].isNull() && m_counter_reading_isValid;

    m_counter_reading_export_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export, json[QString("CounterReadingExport")]);
    m_counter_reading_export_isSet = !json[QString("CounterReadingExport")].isNull() && m_counter_reading_export_isValid;

    m_counter_reading_export_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t1, json[QString("CounterReadingExportT1")]);
    m_counter_reading_export_t1_isSet = !json[QString("CounterReadingExportT1")].isNull() && m_counter_reading_export_t1_isValid;

    m_counter_reading_export_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t2, json[QString("CounterReadingExportT2")]);
    m_counter_reading_export_t2_isSet = !json[QString("CounterReadingExportT2")].isNull() && m_counter_reading_export_t2_isValid;

    m_counter_reading_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t1, json[QString("CounterReadingT1")]);
    m_counter_reading_t1_isSet = !json[QString("CounterReadingT1")].isNull() && m_counter_reading_t1_isValid;

    m_counter_reading_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t2, json[QString("CounterReadingT2")]);
    m_counter_reading_t2_isSet = !json[QString("CounterReadingT2")].isNull() && m_counter_reading_t2_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("Current")]);
    m_current_isSet = !json[QString("Current")].isNull() && m_current_isValid;

    m_current_l1_isValid = ::OpenAPI::fromJsonValue(m_current_l1, json[QString("CurrentL1")]);
    m_current_l1_isSet = !json[QString("CurrentL1")].isNull() && m_current_l1_isValid;

    m_current_l2_isValid = ::OpenAPI::fromJsonValue(m_current_l2, json[QString("CurrentL2")]);
    m_current_l2_isSet = !json[QString("CurrentL2")].isNull() && m_current_l2_isValid;

    m_current_l3_isValid = ::OpenAPI::fromJsonValue(m_current_l3, json[QString("CurrentL3")]);
    m_current_l3_isSet = !json[QString("CurrentL3")].isNull() && m_current_l3_isValid;

    m_device_energy_type_isValid = ::OpenAPI::fromJsonValue(m_device_energy_type, json[QString("DeviceEnergyType")]);
    m_device_energy_type_isSet = !json[QString("DeviceEnergyType")].isNull() && m_device_energy_type_isValid;

    m_digital_input1_isValid = ::OpenAPI::fromJsonValue(m_digital_input1, json[QString("DigitalInput1")]);
    m_digital_input1_isSet = !json[QString("DigitalInput1")].isNull() && m_digital_input1_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_meter_sub_type_isValid = ::OpenAPI::fromJsonValue(m_meter_sub_type, json[QString("MeterSubType")]);
    m_meter_sub_type_isSet = !json[QString("MeterSubType")].isNull() && m_meter_sub_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_power_factor_isValid = ::OpenAPI::fromJsonValue(m_power_factor, json[QString("PowerFactor")]);
    m_power_factor_isSet = !json[QString("PowerFactor")].isNull() && m_power_factor_isValid;

    m_power_factor_l1_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l1, json[QString("PowerFactorL1")]);
    m_power_factor_l1_isSet = !json[QString("PowerFactorL1")].isNull() && m_power_factor_l1_isValid;

    m_power_factor_l2_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l2, json[QString("PowerFactorL2")]);
    m_power_factor_l2_isSet = !json[QString("PowerFactorL2")].isNull() && m_power_factor_l2_isValid;

    m_power_factor_l3_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l3, json[QString("PowerFactorL3")]);
    m_power_factor_l3_isSet = !json[QString("PowerFactorL3")].isNull() && m_power_factor_l3_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("ValueDate")]);
    m_value_date_isSet = !json[QString("ValueDate")].isNull() && m_value_date_isValid;

    m_voltage_isValid = ::OpenAPI::fromJsonValue(m_voltage, json[QString("Voltage")]);
    m_voltage_isSet = !json[QString("Voltage")].isNull() && m_voltage_isValid;

    m_voltage_l1_isValid = ::OpenAPI::fromJsonValue(m_voltage_l1, json[QString("VoltageL1")]);
    m_voltage_l1_isSet = !json[QString("VoltageL1")].isNull() && m_voltage_l1_isValid;

    m_voltage_l2_isValid = ::OpenAPI::fromJsonValue(m_voltage_l2, json[QString("VoltageL2")]);
    m_voltage_l2_isSet = !json[QString("VoltageL2")].isNull() && m_voltage_l2_isValid;

    m_voltage_l3_isValid = ::OpenAPI::fromJsonValue(m_voltage_l3, json[QString("VoltageL3")]);
    m_voltage_l3_isSet = !json[QString("VoltageL3")].isNull() && m_voltage_l3_isValid;
}

QString OAIDeviceToPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceToPost::asJsonObject() const {
    QJsonObject obj;
    if (m_active_power_isSet) {
        obj.insert(QString("ActivePower"), ::OpenAPI::toJsonValue(m_active_power));
    }
    if (m_counter_reading_isSet) {
        obj.insert(QString("CounterReading"), ::OpenAPI::toJsonValue(m_counter_reading));
    }
    if (m_counter_reading_export_isSet) {
        obj.insert(QString("CounterReadingExport"), ::OpenAPI::toJsonValue(m_counter_reading_export));
    }
    if (m_counter_reading_export_t1_isSet) {
        obj.insert(QString("CounterReadingExportT1"), ::OpenAPI::toJsonValue(m_counter_reading_export_t1));
    }
    if (m_counter_reading_export_t2_isSet) {
        obj.insert(QString("CounterReadingExportT2"), ::OpenAPI::toJsonValue(m_counter_reading_export_t2));
    }
    if (m_counter_reading_t1_isSet) {
        obj.insert(QString("CounterReadingT1"), ::OpenAPI::toJsonValue(m_counter_reading_t1));
    }
    if (m_counter_reading_t2_isSet) {
        obj.insert(QString("CounterReadingT2"), ::OpenAPI::toJsonValue(m_counter_reading_t2));
    }
    if (m_current_isSet) {
        obj.insert(QString("Current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_current_l1_isSet) {
        obj.insert(QString("CurrentL1"), ::OpenAPI::toJsonValue(m_current_l1));
    }
    if (m_current_l2_isSet) {
        obj.insert(QString("CurrentL2"), ::OpenAPI::toJsonValue(m_current_l2));
    }
    if (m_current_l3_isSet) {
        obj.insert(QString("CurrentL3"), ::OpenAPI::toJsonValue(m_current_l3));
    }
    if (m_device_energy_type_isSet) {
        obj.insert(QString("DeviceEnergyType"), ::OpenAPI::toJsonValue(m_device_energy_type));
    }
    if (m_digital_input1_isSet) {
        obj.insert(QString("DigitalInput1"), ::OpenAPI::toJsonValue(m_digital_input1));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meter_sub_type_isSet) {
        obj.insert(QString("MeterSubType"), ::OpenAPI::toJsonValue(m_meter_sub_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_power_factor_isSet) {
        obj.insert(QString("PowerFactor"), ::OpenAPI::toJsonValue(m_power_factor));
    }
    if (m_power_factor_l1_isSet) {
        obj.insert(QString("PowerFactorL1"), ::OpenAPI::toJsonValue(m_power_factor_l1));
    }
    if (m_power_factor_l2_isSet) {
        obj.insert(QString("PowerFactorL2"), ::OpenAPI::toJsonValue(m_power_factor_l2));
    }
    if (m_power_factor_l3_isSet) {
        obj.insert(QString("PowerFactorL3"), ::OpenAPI::toJsonValue(m_power_factor_l3));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("ValueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("Voltage"), ::OpenAPI::toJsonValue(m_voltage));
    }
    if (m_voltage_l1_isSet) {
        obj.insert(QString("VoltageL1"), ::OpenAPI::toJsonValue(m_voltage_l1));
    }
    if (m_voltage_l2_isSet) {
        obj.insert(QString("VoltageL2"), ::OpenAPI::toJsonValue(m_voltage_l2));
    }
    if (m_voltage_l3_isSet) {
        obj.insert(QString("VoltageL3"), ::OpenAPI::toJsonValue(m_voltage_l3));
    }
    return obj;
}

double OAIDeviceToPost::getActivePower() const {
    return m_active_power;
}
void OAIDeviceToPost::setActivePower(const double &active_power) {
    m_active_power = active_power;
    m_active_power_isSet = true;
}

bool OAIDeviceToPost::is_active_power_Set() const{
    return m_active_power_isSet;
}

bool OAIDeviceToPost::is_active_power_Valid() const{
    return m_active_power_isValid;
}

double OAIDeviceToPost::getCounterReading() const {
    return m_counter_reading;
}
void OAIDeviceToPost::setCounterReading(const double &counter_reading) {
    m_counter_reading = counter_reading;
    m_counter_reading_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_Set() const{
    return m_counter_reading_isSet;
}

bool OAIDeviceToPost::is_counter_reading_Valid() const{
    return m_counter_reading_isValid;
}

double OAIDeviceToPost::getCounterReadingExport() const {
    return m_counter_reading_export;
}
void OAIDeviceToPost::setCounterReadingExport(const double &counter_reading_export) {
    m_counter_reading_export = counter_reading_export;
    m_counter_reading_export_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_export_Set() const{
    return m_counter_reading_export_isSet;
}

bool OAIDeviceToPost::is_counter_reading_export_Valid() const{
    return m_counter_reading_export_isValid;
}

double OAIDeviceToPost::getCounterReadingExportT1() const {
    return m_counter_reading_export_t1;
}
void OAIDeviceToPost::setCounterReadingExportT1(const double &counter_reading_export_t1) {
    m_counter_reading_export_t1 = counter_reading_export_t1;
    m_counter_reading_export_t1_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_export_t1_Set() const{
    return m_counter_reading_export_t1_isSet;
}

bool OAIDeviceToPost::is_counter_reading_export_t1_Valid() const{
    return m_counter_reading_export_t1_isValid;
}

double OAIDeviceToPost::getCounterReadingExportT2() const {
    return m_counter_reading_export_t2;
}
void OAIDeviceToPost::setCounterReadingExportT2(const double &counter_reading_export_t2) {
    m_counter_reading_export_t2 = counter_reading_export_t2;
    m_counter_reading_export_t2_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_export_t2_Set() const{
    return m_counter_reading_export_t2_isSet;
}

bool OAIDeviceToPost::is_counter_reading_export_t2_Valid() const{
    return m_counter_reading_export_t2_isValid;
}

double OAIDeviceToPost::getCounterReadingT1() const {
    return m_counter_reading_t1;
}
void OAIDeviceToPost::setCounterReadingT1(const double &counter_reading_t1) {
    m_counter_reading_t1 = counter_reading_t1;
    m_counter_reading_t1_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_t1_Set() const{
    return m_counter_reading_t1_isSet;
}

bool OAIDeviceToPost::is_counter_reading_t1_Valid() const{
    return m_counter_reading_t1_isValid;
}

double OAIDeviceToPost::getCounterReadingT2() const {
    return m_counter_reading_t2;
}
void OAIDeviceToPost::setCounterReadingT2(const double &counter_reading_t2) {
    m_counter_reading_t2 = counter_reading_t2;
    m_counter_reading_t2_isSet = true;
}

bool OAIDeviceToPost::is_counter_reading_t2_Set() const{
    return m_counter_reading_t2_isSet;
}

bool OAIDeviceToPost::is_counter_reading_t2_Valid() const{
    return m_counter_reading_t2_isValid;
}

double OAIDeviceToPost::getCurrent() const {
    return m_current;
}
void OAIDeviceToPost::setCurrent(const double &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIDeviceToPost::is_current_Set() const{
    return m_current_isSet;
}

bool OAIDeviceToPost::is_current_Valid() const{
    return m_current_isValid;
}

double OAIDeviceToPost::getCurrentL1() const {
    return m_current_l1;
}
void OAIDeviceToPost::setCurrentL1(const double &current_l1) {
    m_current_l1 = current_l1;
    m_current_l1_isSet = true;
}

bool OAIDeviceToPost::is_current_l1_Set() const{
    return m_current_l1_isSet;
}

bool OAIDeviceToPost::is_current_l1_Valid() const{
    return m_current_l1_isValid;
}

double OAIDeviceToPost::getCurrentL2() const {
    return m_current_l2;
}
void OAIDeviceToPost::setCurrentL2(const double &current_l2) {
    m_current_l2 = current_l2;
    m_current_l2_isSet = true;
}

bool OAIDeviceToPost::is_current_l2_Set() const{
    return m_current_l2_isSet;
}

bool OAIDeviceToPost::is_current_l2_Valid() const{
    return m_current_l2_isValid;
}

double OAIDeviceToPost::getCurrentL3() const {
    return m_current_l3;
}
void OAIDeviceToPost::setCurrentL3(const double &current_l3) {
    m_current_l3 = current_l3;
    m_current_l3_isSet = true;
}

bool OAIDeviceToPost::is_current_l3_Set() const{
    return m_current_l3_isSet;
}

bool OAIDeviceToPost::is_current_l3_Valid() const{
    return m_current_l3_isValid;
}

QString OAIDeviceToPost::getDeviceEnergyType() const {
    return m_device_energy_type;
}
void OAIDeviceToPost::setDeviceEnergyType(const QString &device_energy_type) {
    m_device_energy_type = device_energy_type;
    m_device_energy_type_isSet = true;
}

bool OAIDeviceToPost::is_device_energy_type_Set() const{
    return m_device_energy_type_isSet;
}

bool OAIDeviceToPost::is_device_energy_type_Valid() const{
    return m_device_energy_type_isValid;
}

bool OAIDeviceToPost::isDigitalInput1() const {
    return m_digital_input1;
}
void OAIDeviceToPost::setDigitalInput1(const bool &digital_input1) {
    m_digital_input1 = digital_input1;
    m_digital_input1_isSet = true;
}

bool OAIDeviceToPost::is_digital_input1_Set() const{
    return m_digital_input1_isSet;
}

bool OAIDeviceToPost::is_digital_input1_Valid() const{
    return m_digital_input1_isValid;
}

QString OAIDeviceToPost::getId() const {
    return m_id;
}
void OAIDeviceToPost::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceToPost::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceToPost::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeviceToPost::getMeterSubType() const {
    return m_meter_sub_type;
}
void OAIDeviceToPost::setMeterSubType(const QString &meter_sub_type) {
    m_meter_sub_type = meter_sub_type;
    m_meter_sub_type_isSet = true;
}

bool OAIDeviceToPost::is_meter_sub_type_Set() const{
    return m_meter_sub_type_isSet;
}

bool OAIDeviceToPost::is_meter_sub_type_Valid() const{
    return m_meter_sub_type_isValid;
}

QString OAIDeviceToPost::getName() const {
    return m_name;
}
void OAIDeviceToPost::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceToPost::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceToPost::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDeviceToPost::getPowerFactor() const {
    return m_power_factor;
}
void OAIDeviceToPost::setPowerFactor(const double &power_factor) {
    m_power_factor = power_factor;
    m_power_factor_isSet = true;
}

bool OAIDeviceToPost::is_power_factor_Set() const{
    return m_power_factor_isSet;
}

bool OAIDeviceToPost::is_power_factor_Valid() const{
    return m_power_factor_isValid;
}

double OAIDeviceToPost::getPowerFactorL1() const {
    return m_power_factor_l1;
}
void OAIDeviceToPost::setPowerFactorL1(const double &power_factor_l1) {
    m_power_factor_l1 = power_factor_l1;
    m_power_factor_l1_isSet = true;
}

bool OAIDeviceToPost::is_power_factor_l1_Set() const{
    return m_power_factor_l1_isSet;
}

bool OAIDeviceToPost::is_power_factor_l1_Valid() const{
    return m_power_factor_l1_isValid;
}

double OAIDeviceToPost::getPowerFactorL2() const {
    return m_power_factor_l2;
}
void OAIDeviceToPost::setPowerFactorL2(const double &power_factor_l2) {
    m_power_factor_l2 = power_factor_l2;
    m_power_factor_l2_isSet = true;
}

bool OAIDeviceToPost::is_power_factor_l2_Set() const{
    return m_power_factor_l2_isSet;
}

bool OAIDeviceToPost::is_power_factor_l2_Valid() const{
    return m_power_factor_l2_isValid;
}

double OAIDeviceToPost::getPowerFactorL3() const {
    return m_power_factor_l3;
}
void OAIDeviceToPost::setPowerFactorL3(const double &power_factor_l3) {
    m_power_factor_l3 = power_factor_l3;
    m_power_factor_l3_isSet = true;
}

bool OAIDeviceToPost::is_power_factor_l3_Set() const{
    return m_power_factor_l3_isSet;
}

bool OAIDeviceToPost::is_power_factor_l3_Valid() const{
    return m_power_factor_l3_isValid;
}

qint64 OAIDeviceToPost::getSerial() const {
    return m_serial;
}
void OAIDeviceToPost::setSerial(const qint64 &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDeviceToPost::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDeviceToPost::is_serial_Valid() const{
    return m_serial_isValid;
}

double OAIDeviceToPost::getTemperature() const {
    return m_temperature;
}
void OAIDeviceToPost::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIDeviceToPost::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIDeviceToPost::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QDateTime OAIDeviceToPost::getValueDate() const {
    return m_value_date;
}
void OAIDeviceToPost::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAIDeviceToPost::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAIDeviceToPost::is_value_date_Valid() const{
    return m_value_date_isValid;
}

double OAIDeviceToPost::getVoltage() const {
    return m_voltage;
}
void OAIDeviceToPost::setVoltage(const double &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAIDeviceToPost::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAIDeviceToPost::is_voltage_Valid() const{
    return m_voltage_isValid;
}

double OAIDeviceToPost::getVoltageL1() const {
    return m_voltage_l1;
}
void OAIDeviceToPost::setVoltageL1(const double &voltage_l1) {
    m_voltage_l1 = voltage_l1;
    m_voltage_l1_isSet = true;
}

bool OAIDeviceToPost::is_voltage_l1_Set() const{
    return m_voltage_l1_isSet;
}

bool OAIDeviceToPost::is_voltage_l1_Valid() const{
    return m_voltage_l1_isValid;
}

double OAIDeviceToPost::getVoltageL2() const {
    return m_voltage_l2;
}
void OAIDeviceToPost::setVoltageL2(const double &voltage_l2) {
    m_voltage_l2 = voltage_l2;
    m_voltage_l2_isSet = true;
}

bool OAIDeviceToPost::is_voltage_l2_Set() const{
    return m_voltage_l2_isSet;
}

bool OAIDeviceToPost::is_voltage_l2_Valid() const{
    return m_voltage_l2_isValid;
}

double OAIDeviceToPost::getVoltageL3() const {
    return m_voltage_l3;
}
void OAIDeviceToPost::setVoltageL3(const double &voltage_l3) {
    m_voltage_l3 = voltage_l3;
    m_voltage_l3_isSet = true;
}

bool OAIDeviceToPost::is_voltage_l3_Set() const{
    return m_voltage_l3_isSet;
}

bool OAIDeviceToPost::is_voltage_l3_Valid() const{
    return m_voltage_l3_isValid;
}

bool OAIDeviceToPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_energy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_input1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceToPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
