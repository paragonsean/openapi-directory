/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDeviceInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDeviceInformation::OAIAdditionalDeviceInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDeviceInformation::OAIAdditionalDeviceInformation() {
    this->initializeModel();
}

OAIAdditionalDeviceInformation::~OAIAdditionalDeviceInformation() {}

void OAIAdditionalDeviceInformation::initializeModel() {

    m_additional_meter_serial_number_isSet = false;
    m_additional_meter_serial_number_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_hardware_version_isSet = false;
    m_hardware_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_network_connection_isSet = false;
    m_network_connection_isValid = false;

    m_network_connection_rssi_isSet = false;
    m_network_connection_rssi_isValid = false;
}

void OAIAdditionalDeviceInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDeviceInformation::fromJsonObject(QJsonObject json) {

    m_additional_meter_serial_number_isValid = ::OpenAPI::fromJsonValue(m_additional_meter_serial_number, json[QString("AdditionalMeterSerialNumber")]);
    m_additional_meter_serial_number_isSet = !json[QString("AdditionalMeterSerialNumber")].isNull() && m_additional_meter_serial_number_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("FirmwareVersion")]);
    m_firmware_version_isSet = !json[QString("FirmwareVersion")].isNull() && m_firmware_version_isValid;

    m_hardware_version_isValid = ::OpenAPI::fromJsonValue(m_hardware_version, json[QString("HardwareVersion")]);
    m_hardware_version_isSet = !json[QString("HardwareVersion")].isNull() && m_hardware_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_network_connection_isValid = ::OpenAPI::fromJsonValue(m_network_connection, json[QString("NetworkConnection")]);
    m_network_connection_isSet = !json[QString("NetworkConnection")].isNull() && m_network_connection_isValid;

    m_network_connection_rssi_isValid = ::OpenAPI::fromJsonValue(m_network_connection_rssi, json[QString("NetworkConnectionRSSI")]);
    m_network_connection_rssi_isSet = !json[QString("NetworkConnectionRSSI")].isNull() && m_network_connection_rssi_isValid;
}

QString OAIAdditionalDeviceInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDeviceInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_meter_serial_number_isSet) {
        obj.insert(QString("AdditionalMeterSerialNumber"), ::OpenAPI::toJsonValue(m_additional_meter_serial_number));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("FirmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_hardware_version_isSet) {
        obj.insert(QString("HardwareVersion"), ::OpenAPI::toJsonValue(m_hardware_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_network_connection_isSet) {
        obj.insert(QString("NetworkConnection"), ::OpenAPI::toJsonValue(m_network_connection));
    }
    if (m_network_connection_rssi_isSet) {
        obj.insert(QString("NetworkConnectionRSSI"), ::OpenAPI::toJsonValue(m_network_connection_rssi));
    }
    return obj;
}

QString OAIAdditionalDeviceInformation::getAdditionalMeterSerialNumber() const {
    return m_additional_meter_serial_number;
}
void OAIAdditionalDeviceInformation::setAdditionalMeterSerialNumber(const QString &additional_meter_serial_number) {
    m_additional_meter_serial_number = additional_meter_serial_number;
    m_additional_meter_serial_number_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_additional_meter_serial_number_Set() const{
    return m_additional_meter_serial_number_isSet;
}

bool OAIAdditionalDeviceInformation::is_additional_meter_serial_number_Valid() const{
    return m_additional_meter_serial_number_isValid;
}

qint32 OAIAdditionalDeviceInformation::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIAdditionalDeviceInformation::setFirmwareVersion(const qint32 &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIAdditionalDeviceInformation::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

qint32 OAIAdditionalDeviceInformation::getHardwareVersion() const {
    return m_hardware_version;
}
void OAIAdditionalDeviceInformation::setHardwareVersion(const qint32 &hardware_version) {
    m_hardware_version = hardware_version;
    m_hardware_version_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_hardware_version_Set() const{
    return m_hardware_version_isSet;
}

bool OAIAdditionalDeviceInformation::is_hardware_version_Valid() const{
    return m_hardware_version_isValid;
}

QString OAIAdditionalDeviceInformation::getId() const {
    return m_id;
}
void OAIAdditionalDeviceInformation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdditionalDeviceInformation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAdditionalDeviceInformation::getNetworkConnection() const {
    return m_network_connection;
}
void OAIAdditionalDeviceInformation::setNetworkConnection(const QString &network_connection) {
    m_network_connection = network_connection;
    m_network_connection_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_network_connection_Set() const{
    return m_network_connection_isSet;
}

bool OAIAdditionalDeviceInformation::is_network_connection_Valid() const{
    return m_network_connection_isValid;
}

qint32 OAIAdditionalDeviceInformation::getNetworkConnectionRssi() const {
    return m_network_connection_rssi;
}
void OAIAdditionalDeviceInformation::setNetworkConnectionRssi(const qint32 &network_connection_rssi) {
    m_network_connection_rssi = network_connection_rssi;
    m_network_connection_rssi_isSet = true;
}

bool OAIAdditionalDeviceInformation::is_network_connection_rssi_Set() const{
    return m_network_connection_rssi_isSet;
}

bool OAIAdditionalDeviceInformation::is_network_connection_rssi_Valid() const{
    return m_network_connection_rssi_isValid;
}

bool OAIAdditionalDeviceInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_meter_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_connection_rssi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDeviceInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
