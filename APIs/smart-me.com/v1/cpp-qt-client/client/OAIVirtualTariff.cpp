/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualTariff.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualTariff::OAIVirtualTariff(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualTariff::OAIVirtualTariff() {
    this->initializeModel();
}

OAIVirtualTariff::~OAIVirtualTariff() {}

void OAIVirtualTariff::initializeModel() {

    m_factor_isSet = false;
    m_factor_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIVirtualTariff::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualTariff::fromJsonObject(QJsonObject json) {

    m_factor_isValid = ::OpenAPI::fromJsonValue(m_factor, json[QString("Factor")]);
    m_factor_isSet = !json[QString("Factor")].isNull() && m_factor_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIVirtualTariff::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualTariff::asJsonObject() const {
    QJsonObject obj;
    if (m_factor_isSet) {
        obj.insert(QString("Factor"), ::OpenAPI::toJsonValue(m_factor));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_isSet) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIVirtualTariff::getFactor() const {
    return m_factor;
}
void OAIVirtualTariff::setFactor(const double &factor) {
    m_factor = factor;
    m_factor_isSet = true;
}

bool OAIVirtualTariff::is_factor_Set() const{
    return m_factor_isSet;
}

bool OAIVirtualTariff::is_factor_Valid() const{
    return m_factor_isValid;
}

QString OAIVirtualTariff::getId() const {
    return m_id;
}
void OAIVirtualTariff::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVirtualTariff::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVirtualTariff::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVirtualTariff::getName() const {
    return m_name;
}
void OAIVirtualTariff::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualTariff::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualTariff::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVirtualTariff::getType() const {
    return m_type;
}
void OAIVirtualTariff::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVirtualTariff::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVirtualTariff::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVirtualTariff::getUnit() const {
    return m_unit;
}
void OAIVirtualTariff::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIVirtualTariff::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIVirtualTariff::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIVirtualTariff::getValue() const {
    return m_value;
}
void OAIVirtualTariff::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIVirtualTariff::is_value_Set() const{
    return m_value_isSet;
}

bool OAIVirtualTariff::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIVirtualTariff::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualTariff::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
