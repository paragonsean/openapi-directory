/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevice.h
 *
 * Container Class for the Web API
 */

#ifndef OAIDevice_H
#define OAIDevice_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDevice : public OAIObject {
public:
    OAIDevice();
    OAIDevice(QString json);
    ~OAIDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getActivePower() const;
    void setActivePower(const double &active_power);
    bool is_active_power_Set() const;
    bool is_active_power_Valid() const;

    double getActivePowerL1() const;
    void setActivePowerL1(const double &active_power_l1);
    bool is_active_power_l1_Set() const;
    bool is_active_power_l1_Valid() const;

    double getActivePowerL2() const;
    void setActivePowerL2(const double &active_power_l2);
    bool is_active_power_l2_Set() const;
    bool is_active_power_l2_Valid() const;

    double getActivePowerL3() const;
    void setActivePowerL3(const double &active_power_l3);
    bool is_active_power_l3_Set() const;
    bool is_active_power_l3_Valid() const;

    QString getActivePowerUnit() const;
    void setActivePowerUnit(const QString &active_power_unit);
    bool is_active_power_unit_Set() const;
    bool is_active_power_unit_Valid() const;

    qint32 getActiveTariff() const;
    void setActiveTariff(const qint32 &active_tariff);
    bool is_active_tariff_Set() const;
    bool is_active_tariff_Valid() const;

    QString getAdditionalMeterSerialNumber() const;
    void setAdditionalMeterSerialNumber(const QString &additional_meter_serial_number);
    bool is_additional_meter_serial_number_Set() const;
    bool is_additional_meter_serial_number_Valid() const;

    qint32 getAnalogOutput1() const;
    void setAnalogOutput1(const qint32 &analog_output1);
    bool is_analog_output1_Set() const;
    bool is_analog_output1_Valid() const;

    qint32 getAnalogOutput2() const;
    void setAnalogOutput2(const qint32 &analog_output2);
    bool is_analog_output2_Set() const;
    bool is_analog_output2_Valid() const;

    QString getChargingStationState() const;
    void setChargingStationState(const QString &charging_station_state);
    bool is_charging_station_state_Set() const;
    bool is_charging_station_state_Valid() const;

    double getCounterReading() const;
    void setCounterReading(const double &counter_reading);
    bool is_counter_reading_Set() const;
    bool is_counter_reading_Valid() const;

    double getCounterReadingExport() const;
    void setCounterReadingExport(const double &counter_reading_export);
    bool is_counter_reading_export_Set() const;
    bool is_counter_reading_export_Valid() const;

    double getCounterReadingImport() const;
    void setCounterReadingImport(const double &counter_reading_import);
    bool is_counter_reading_import_Set() const;
    bool is_counter_reading_import_Valid() const;

    double getCounterReadingT1() const;
    void setCounterReadingT1(const double &counter_reading_t1);
    bool is_counter_reading_t1_Set() const;
    bool is_counter_reading_t1_Valid() const;

    double getCounterReadingT2() const;
    void setCounterReadingT2(const double &counter_reading_t2);
    bool is_counter_reading_t2_Set() const;
    bool is_counter_reading_t2_Valid() const;

    double getCounterReadingT3() const;
    void setCounterReadingT3(const double &counter_reading_t3);
    bool is_counter_reading_t3_Set() const;
    bool is_counter_reading_t3_Valid() const;

    double getCounterReadingT4() const;
    void setCounterReadingT4(const double &counter_reading_t4);
    bool is_counter_reading_t4_Set() const;
    bool is_counter_reading_t4_Valid() const;

    QString getCounterReadingUnit() const;
    void setCounterReadingUnit(const QString &counter_reading_unit);
    bool is_counter_reading_unit_Set() const;
    bool is_counter_reading_unit_Valid() const;

    double getCurrent() const;
    void setCurrent(const double &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    double getCurrentL1() const;
    void setCurrentL1(const double &current_l1);
    bool is_current_l1_Set() const;
    bool is_current_l1_Valid() const;

    double getCurrentL2() const;
    void setCurrentL2(const double &current_l2);
    bool is_current_l2_Set() const;
    bool is_current_l2_Valid() const;

    double getCurrentL3() const;
    void setCurrentL3(const double &current_l3);
    bool is_current_l3_Set() const;
    bool is_current_l3_Valid() const;

    QString getDeviceEnergyType() const;
    void setDeviceEnergyType(const QString &device_energy_type);
    bool is_device_energy_type_Set() const;
    bool is_device_energy_type_Valid() const;

    bool isDigitalInput1() const;
    void setDigitalInput1(const bool &digital_input1);
    bool is_digital_input1_Set() const;
    bool is_digital_input1_Valid() const;

    bool isDigitalInput2() const;
    void setDigitalInput2(const bool &digital_input2);
    bool is_digital_input2_Set() const;
    bool is_digital_input2_Valid() const;

    bool isDigitalOutput1() const;
    void setDigitalOutput1(const bool &digital_output1);
    bool is_digital_output1_Set() const;
    bool is_digital_output1_Valid() const;

    bool isDigitalOutput2() const;
    void setDigitalOutput2(const bool &digital_output2);
    bool is_digital_output2_Set() const;
    bool is_digital_output2_Valid() const;

    QString getFamilyType() const;
    void setFamilyType(const QString &family_type);
    bool is_family_type_Set() const;
    bool is_family_type_Valid() const;

    double getFlowRate() const;
    void setFlowRate(const double &flow_rate);
    bool is_flow_rate_Set() const;
    bool is_flow_rate_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getMeterSubType() const;
    void setMeterSubType(const QString &meter_sub_type);
    bool is_meter_sub_type_Set() const;
    bool is_meter_sub_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getPowerFactor() const;
    void setPowerFactor(const double &power_factor);
    bool is_power_factor_Set() const;
    bool is_power_factor_Valid() const;

    double getPowerFactorL1() const;
    void setPowerFactorL1(const double &power_factor_l1);
    bool is_power_factor_l1_Set() const;
    bool is_power_factor_l1_Valid() const;

    double getPowerFactorL2() const;
    void setPowerFactorL2(const double &power_factor_l2);
    bool is_power_factor_l2_Set() const;
    bool is_power_factor_l2_Valid() const;

    double getPowerFactorL3() const;
    void setPowerFactorL3(const double &power_factor_l3);
    bool is_power_factor_l3_Set() const;
    bool is_power_factor_l3_Valid() const;

    qint64 getSerial() const;
    void setSerial(const qint64 &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    bool isSwitchOn() const;
    void setSwitchOn(const bool &switch_on);
    bool is_switch_on_Set() const;
    bool is_switch_on_Valid() const;

    bool isSwitchPhaseL1On() const;
    void setSwitchPhaseL1On(const bool &switch_phase_l1_on);
    bool is_switch_phase_l1_on_Set() const;
    bool is_switch_phase_l1_on_Valid() const;

    bool isSwitchPhaseL2On() const;
    void setSwitchPhaseL2On(const bool &switch_phase_l2_on);
    bool is_switch_phase_l2_on_Set() const;
    bool is_switch_phase_l2_on_Valid() const;

    bool isSwitchPhaseL3On() const;
    void setSwitchPhaseL3On(const bool &switch_phase_l3_on);
    bool is_switch_phase_l3_on_Set() const;
    bool is_switch_phase_l3_on_Valid() const;

    double getTemperature() const;
    void setTemperature(const double &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    QDateTime getValueDate() const;
    void setValueDate(const QDateTime &value_date);
    bool is_value_date_Set() const;
    bool is_value_date_Valid() const;

    double getVoltage() const;
    void setVoltage(const double &voltage);
    bool is_voltage_Set() const;
    bool is_voltage_Valid() const;

    double getVoltageL1() const;
    void setVoltageL1(const double &voltage_l1);
    bool is_voltage_l1_Set() const;
    bool is_voltage_l1_Valid() const;

    double getVoltageL2() const;
    void setVoltageL2(const double &voltage_l2);
    bool is_voltage_l2_Set() const;
    bool is_voltage_l2_Valid() const;

    double getVoltageL3() const;
    void setVoltageL3(const double &voltage_l3);
    bool is_voltage_l3_Set() const;
    bool is_voltage_l3_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_active_power;
    bool m_active_power_isSet;
    bool m_active_power_isValid;

    double m_active_power_l1;
    bool m_active_power_l1_isSet;
    bool m_active_power_l1_isValid;

    double m_active_power_l2;
    bool m_active_power_l2_isSet;
    bool m_active_power_l2_isValid;

    double m_active_power_l3;
    bool m_active_power_l3_isSet;
    bool m_active_power_l3_isValid;

    QString m_active_power_unit;
    bool m_active_power_unit_isSet;
    bool m_active_power_unit_isValid;

    qint32 m_active_tariff;
    bool m_active_tariff_isSet;
    bool m_active_tariff_isValid;

    QString m_additional_meter_serial_number;
    bool m_additional_meter_serial_number_isSet;
    bool m_additional_meter_serial_number_isValid;

    qint32 m_analog_output1;
    bool m_analog_output1_isSet;
    bool m_analog_output1_isValid;

    qint32 m_analog_output2;
    bool m_analog_output2_isSet;
    bool m_analog_output2_isValid;

    QString m_charging_station_state;
    bool m_charging_station_state_isSet;
    bool m_charging_station_state_isValid;

    double m_counter_reading;
    bool m_counter_reading_isSet;
    bool m_counter_reading_isValid;

    double m_counter_reading_export;
    bool m_counter_reading_export_isSet;
    bool m_counter_reading_export_isValid;

    double m_counter_reading_import;
    bool m_counter_reading_import_isSet;
    bool m_counter_reading_import_isValid;

    double m_counter_reading_t1;
    bool m_counter_reading_t1_isSet;
    bool m_counter_reading_t1_isValid;

    double m_counter_reading_t2;
    bool m_counter_reading_t2_isSet;
    bool m_counter_reading_t2_isValid;

    double m_counter_reading_t3;
    bool m_counter_reading_t3_isSet;
    bool m_counter_reading_t3_isValid;

    double m_counter_reading_t4;
    bool m_counter_reading_t4_isSet;
    bool m_counter_reading_t4_isValid;

    QString m_counter_reading_unit;
    bool m_counter_reading_unit_isSet;
    bool m_counter_reading_unit_isValid;

    double m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    double m_current_l1;
    bool m_current_l1_isSet;
    bool m_current_l1_isValid;

    double m_current_l2;
    bool m_current_l2_isSet;
    bool m_current_l2_isValid;

    double m_current_l3;
    bool m_current_l3_isSet;
    bool m_current_l3_isValid;

    QString m_device_energy_type;
    bool m_device_energy_type_isSet;
    bool m_device_energy_type_isValid;

    bool m_digital_input1;
    bool m_digital_input1_isSet;
    bool m_digital_input1_isValid;

    bool m_digital_input2;
    bool m_digital_input2_isSet;
    bool m_digital_input2_isValid;

    bool m_digital_output1;
    bool m_digital_output1_isSet;
    bool m_digital_output1_isValid;

    bool m_digital_output2;
    bool m_digital_output2_isSet;
    bool m_digital_output2_isValid;

    QString m_family_type;
    bool m_family_type_isSet;
    bool m_family_type_isValid;

    double m_flow_rate;
    bool m_flow_rate_isSet;
    bool m_flow_rate_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_meter_sub_type;
    bool m_meter_sub_type_isSet;
    bool m_meter_sub_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_power_factor;
    bool m_power_factor_isSet;
    bool m_power_factor_isValid;

    double m_power_factor_l1;
    bool m_power_factor_l1_isSet;
    bool m_power_factor_l1_isValid;

    double m_power_factor_l2;
    bool m_power_factor_l2_isSet;
    bool m_power_factor_l2_isValid;

    double m_power_factor_l3;
    bool m_power_factor_l3_isSet;
    bool m_power_factor_l3_isValid;

    qint64 m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    bool m_switch_on;
    bool m_switch_on_isSet;
    bool m_switch_on_isValid;

    bool m_switch_phase_l1_on;
    bool m_switch_phase_l1_on_isSet;
    bool m_switch_phase_l1_on_isValid;

    bool m_switch_phase_l2_on;
    bool m_switch_phase_l2_on_isSet;
    bool m_switch_phase_l2_on_isValid;

    bool m_switch_phase_l3_on;
    bool m_switch_phase_l3_on_isSet;
    bool m_switch_phase_l3_on_isValid;

    double m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    QDateTime m_value_date;
    bool m_value_date_isSet;
    bool m_value_date_isValid;

    double m_voltage;
    bool m_voltage_isSet;
    bool m_voltage_isValid;

    double m_voltage_l1;
    bool m_voltage_l1_isSet;
    bool m_voltage_l1_isValid;

    double m_voltage_l2;
    bool m_voltage_l2_isSet;
    bool m_voltage_l2_isValid;

    double m_voltage_l3;
    bool m_voltage_l3_isSet;
    bool m_voltage_l3_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevice)

#endif // OAIDevice_H
