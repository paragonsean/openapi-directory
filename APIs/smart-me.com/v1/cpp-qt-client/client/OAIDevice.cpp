/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_active_power_isSet = false;
    m_active_power_isValid = false;

    m_active_power_l1_isSet = false;
    m_active_power_l1_isValid = false;

    m_active_power_l2_isSet = false;
    m_active_power_l2_isValid = false;

    m_active_power_l3_isSet = false;
    m_active_power_l3_isValid = false;

    m_active_power_unit_isSet = false;
    m_active_power_unit_isValid = false;

    m_active_tariff_isSet = false;
    m_active_tariff_isValid = false;

    m_additional_meter_serial_number_isSet = false;
    m_additional_meter_serial_number_isValid = false;

    m_analog_output1_isSet = false;
    m_analog_output1_isValid = false;

    m_analog_output2_isSet = false;
    m_analog_output2_isValid = false;

    m_charging_station_state_isSet = false;
    m_charging_station_state_isValid = false;

    m_counter_reading_isSet = false;
    m_counter_reading_isValid = false;

    m_counter_reading_export_isSet = false;
    m_counter_reading_export_isValid = false;

    m_counter_reading_import_isSet = false;
    m_counter_reading_import_isValid = false;

    m_counter_reading_t1_isSet = false;
    m_counter_reading_t1_isValid = false;

    m_counter_reading_t2_isSet = false;
    m_counter_reading_t2_isValid = false;

    m_counter_reading_t3_isSet = false;
    m_counter_reading_t3_isValid = false;

    m_counter_reading_t4_isSet = false;
    m_counter_reading_t4_isValid = false;

    m_counter_reading_unit_isSet = false;
    m_counter_reading_unit_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_current_l1_isSet = false;
    m_current_l1_isValid = false;

    m_current_l2_isSet = false;
    m_current_l2_isValid = false;

    m_current_l3_isSet = false;
    m_current_l3_isValid = false;

    m_device_energy_type_isSet = false;
    m_device_energy_type_isValid = false;

    m_digital_input1_isSet = false;
    m_digital_input1_isValid = false;

    m_digital_input2_isSet = false;
    m_digital_input2_isValid = false;

    m_digital_output1_isSet = false;
    m_digital_output1_isValid = false;

    m_digital_output2_isSet = false;
    m_digital_output2_isValid = false;

    m_family_type_isSet = false;
    m_family_type_isValid = false;

    m_flow_rate_isSet = false;
    m_flow_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meter_sub_type_isSet = false;
    m_meter_sub_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_power_factor_isSet = false;
    m_power_factor_isValid = false;

    m_power_factor_l1_isSet = false;
    m_power_factor_l1_isValid = false;

    m_power_factor_l2_isSet = false;
    m_power_factor_l2_isValid = false;

    m_power_factor_l3_isSet = false;
    m_power_factor_l3_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_switch_on_isSet = false;
    m_switch_on_isValid = false;

    m_switch_phase_l1_on_isSet = false;
    m_switch_phase_l1_on_isValid = false;

    m_switch_phase_l2_on_isSet = false;
    m_switch_phase_l2_on_isValid = false;

    m_switch_phase_l3_on_isSet = false;
    m_switch_phase_l3_on_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;

    m_voltage_l1_isSet = false;
    m_voltage_l1_isValid = false;

    m_voltage_l2_isSet = false;
    m_voltage_l2_isValid = false;

    m_voltage_l3_isSet = false;
    m_voltage_l3_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_active_power_isValid = ::OpenAPI::fromJsonValue(m_active_power, json[QString("ActivePower")]);
    m_active_power_isSet = !json[QString("ActivePower")].isNull() && m_active_power_isValid;

    m_active_power_l1_isValid = ::OpenAPI::fromJsonValue(m_active_power_l1, json[QString("ActivePowerL1")]);
    m_active_power_l1_isSet = !json[QString("ActivePowerL1")].isNull() && m_active_power_l1_isValid;

    m_active_power_l2_isValid = ::OpenAPI::fromJsonValue(m_active_power_l2, json[QString("ActivePowerL2")]);
    m_active_power_l2_isSet = !json[QString("ActivePowerL2")].isNull() && m_active_power_l2_isValid;

    m_active_power_l3_isValid = ::OpenAPI::fromJsonValue(m_active_power_l3, json[QString("ActivePowerL3")]);
    m_active_power_l3_isSet = !json[QString("ActivePowerL3")].isNull() && m_active_power_l3_isValid;

    m_active_power_unit_isValid = ::OpenAPI::fromJsonValue(m_active_power_unit, json[QString("ActivePowerUnit")]);
    m_active_power_unit_isSet = !json[QString("ActivePowerUnit")].isNull() && m_active_power_unit_isValid;

    m_active_tariff_isValid = ::OpenAPI::fromJsonValue(m_active_tariff, json[QString("ActiveTariff")]);
    m_active_tariff_isSet = !json[QString("ActiveTariff")].isNull() && m_active_tariff_isValid;

    m_additional_meter_serial_number_isValid = ::OpenAPI::fromJsonValue(m_additional_meter_serial_number, json[QString("AdditionalMeterSerialNumber")]);
    m_additional_meter_serial_number_isSet = !json[QString("AdditionalMeterSerialNumber")].isNull() && m_additional_meter_serial_number_isValid;

    m_analog_output1_isValid = ::OpenAPI::fromJsonValue(m_analog_output1, json[QString("AnalogOutput1")]);
    m_analog_output1_isSet = !json[QString("AnalogOutput1")].isNull() && m_analog_output1_isValid;

    m_analog_output2_isValid = ::OpenAPI::fromJsonValue(m_analog_output2, json[QString("AnalogOutput2")]);
    m_analog_output2_isSet = !json[QString("AnalogOutput2")].isNull() && m_analog_output2_isValid;

    m_charging_station_state_isValid = ::OpenAPI::fromJsonValue(m_charging_station_state, json[QString("ChargingStationState")]);
    m_charging_station_state_isSet = !json[QString("ChargingStationState")].isNull() && m_charging_station_state_isValid;

    m_counter_reading_isValid = ::OpenAPI::fromJsonValue(m_counter_reading, json[QString("CounterReading")]);
    m_counter_reading_isSet = !json[QString("CounterReading")].isNull() && m_counter_reading_isValid;

    m_counter_reading_export_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export, json[QString("CounterReadingExport")]);
    m_counter_reading_export_isSet = !json[QString("CounterReadingExport")].isNull() && m_counter_reading_export_isValid;

    m_counter_reading_import_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import, json[QString("CounterReadingImport")]);
    m_counter_reading_import_isSet = !json[QString("CounterReadingImport")].isNull() && m_counter_reading_import_isValid;

    m_counter_reading_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t1, json[QString("CounterReadingT1")]);
    m_counter_reading_t1_isSet = !json[QString("CounterReadingT1")].isNull() && m_counter_reading_t1_isValid;

    m_counter_reading_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t2, json[QString("CounterReadingT2")]);
    m_counter_reading_t2_isSet = !json[QString("CounterReadingT2")].isNull() && m_counter_reading_t2_isValid;

    m_counter_reading_t3_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t3, json[QString("CounterReadingT3")]);
    m_counter_reading_t3_isSet = !json[QString("CounterReadingT3")].isNull() && m_counter_reading_t3_isValid;

    m_counter_reading_t4_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t4, json[QString("CounterReadingT4")]);
    m_counter_reading_t4_isSet = !json[QString("CounterReadingT4")].isNull() && m_counter_reading_t4_isValid;

    m_counter_reading_unit_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_unit, json[QString("CounterReadingUnit")]);
    m_counter_reading_unit_isSet = !json[QString("CounterReadingUnit")].isNull() && m_counter_reading_unit_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("Current")]);
    m_current_isSet = !json[QString("Current")].isNull() && m_current_isValid;

    m_current_l1_isValid = ::OpenAPI::fromJsonValue(m_current_l1, json[QString("CurrentL1")]);
    m_current_l1_isSet = !json[QString("CurrentL1")].isNull() && m_current_l1_isValid;

    m_current_l2_isValid = ::OpenAPI::fromJsonValue(m_current_l2, json[QString("CurrentL2")]);
    m_current_l2_isSet = !json[QString("CurrentL2")].isNull() && m_current_l2_isValid;

    m_current_l3_isValid = ::OpenAPI::fromJsonValue(m_current_l3, json[QString("CurrentL3")]);
    m_current_l3_isSet = !json[QString("CurrentL3")].isNull() && m_current_l3_isValid;

    m_device_energy_type_isValid = ::OpenAPI::fromJsonValue(m_device_energy_type, json[QString("DeviceEnergyType")]);
    m_device_energy_type_isSet = !json[QString("DeviceEnergyType")].isNull() && m_device_energy_type_isValid;

    m_digital_input1_isValid = ::OpenAPI::fromJsonValue(m_digital_input1, json[QString("DigitalInput1")]);
    m_digital_input1_isSet = !json[QString("DigitalInput1")].isNull() && m_digital_input1_isValid;

    m_digital_input2_isValid = ::OpenAPI::fromJsonValue(m_digital_input2, json[QString("DigitalInput2")]);
    m_digital_input2_isSet = !json[QString("DigitalInput2")].isNull() && m_digital_input2_isValid;

    m_digital_output1_isValid = ::OpenAPI::fromJsonValue(m_digital_output1, json[QString("DigitalOutput1")]);
    m_digital_output1_isSet = !json[QString("DigitalOutput1")].isNull() && m_digital_output1_isValid;

    m_digital_output2_isValid = ::OpenAPI::fromJsonValue(m_digital_output2, json[QString("DigitalOutput2")]);
    m_digital_output2_isSet = !json[QString("DigitalOutput2")].isNull() && m_digital_output2_isValid;

    m_family_type_isValid = ::OpenAPI::fromJsonValue(m_family_type, json[QString("FamilyType")]);
    m_family_type_isSet = !json[QString("FamilyType")].isNull() && m_family_type_isValid;

    m_flow_rate_isValid = ::OpenAPI::fromJsonValue(m_flow_rate, json[QString("FlowRate")]);
    m_flow_rate_isSet = !json[QString("FlowRate")].isNull() && m_flow_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_meter_sub_type_isValid = ::OpenAPI::fromJsonValue(m_meter_sub_type, json[QString("MeterSubType")]);
    m_meter_sub_type_isSet = !json[QString("MeterSubType")].isNull() && m_meter_sub_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_power_factor_isValid = ::OpenAPI::fromJsonValue(m_power_factor, json[QString("PowerFactor")]);
    m_power_factor_isSet = !json[QString("PowerFactor")].isNull() && m_power_factor_isValid;

    m_power_factor_l1_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l1, json[QString("PowerFactorL1")]);
    m_power_factor_l1_isSet = !json[QString("PowerFactorL1")].isNull() && m_power_factor_l1_isValid;

    m_power_factor_l2_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l2, json[QString("PowerFactorL2")]);
    m_power_factor_l2_isSet = !json[QString("PowerFactorL2")].isNull() && m_power_factor_l2_isValid;

    m_power_factor_l3_isValid = ::OpenAPI::fromJsonValue(m_power_factor_l3, json[QString("PowerFactorL3")]);
    m_power_factor_l3_isSet = !json[QString("PowerFactorL3")].isNull() && m_power_factor_l3_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_switch_on_isValid = ::OpenAPI::fromJsonValue(m_switch_on, json[QString("SwitchOn")]);
    m_switch_on_isSet = !json[QString("SwitchOn")].isNull() && m_switch_on_isValid;

    m_switch_phase_l1_on_isValid = ::OpenAPI::fromJsonValue(m_switch_phase_l1_on, json[QString("SwitchPhaseL1On")]);
    m_switch_phase_l1_on_isSet = !json[QString("SwitchPhaseL1On")].isNull() && m_switch_phase_l1_on_isValid;

    m_switch_phase_l2_on_isValid = ::OpenAPI::fromJsonValue(m_switch_phase_l2_on, json[QString("SwitchPhaseL2On")]);
    m_switch_phase_l2_on_isSet = !json[QString("SwitchPhaseL2On")].isNull() && m_switch_phase_l2_on_isValid;

    m_switch_phase_l3_on_isValid = ::OpenAPI::fromJsonValue(m_switch_phase_l3_on, json[QString("SwitchPhaseL3On")]);
    m_switch_phase_l3_on_isSet = !json[QString("SwitchPhaseL3On")].isNull() && m_switch_phase_l3_on_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("Temperature")]);
    m_temperature_isSet = !json[QString("Temperature")].isNull() && m_temperature_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("ValueDate")]);
    m_value_date_isSet = !json[QString("ValueDate")].isNull() && m_value_date_isValid;

    m_voltage_isValid = ::OpenAPI::fromJsonValue(m_voltage, json[QString("Voltage")]);
    m_voltage_isSet = !json[QString("Voltage")].isNull() && m_voltage_isValid;

    m_voltage_l1_isValid = ::OpenAPI::fromJsonValue(m_voltage_l1, json[QString("VoltageL1")]);
    m_voltage_l1_isSet = !json[QString("VoltageL1")].isNull() && m_voltage_l1_isValid;

    m_voltage_l2_isValid = ::OpenAPI::fromJsonValue(m_voltage_l2, json[QString("VoltageL2")]);
    m_voltage_l2_isSet = !json[QString("VoltageL2")].isNull() && m_voltage_l2_isValid;

    m_voltage_l3_isValid = ::OpenAPI::fromJsonValue(m_voltage_l3, json[QString("VoltageL3")]);
    m_voltage_l3_isSet = !json[QString("VoltageL3")].isNull() && m_voltage_l3_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_active_power_isSet) {
        obj.insert(QString("ActivePower"), ::OpenAPI::toJsonValue(m_active_power));
    }
    if (m_active_power_l1_isSet) {
        obj.insert(QString("ActivePowerL1"), ::OpenAPI::toJsonValue(m_active_power_l1));
    }
    if (m_active_power_l2_isSet) {
        obj.insert(QString("ActivePowerL2"), ::OpenAPI::toJsonValue(m_active_power_l2));
    }
    if (m_active_power_l3_isSet) {
        obj.insert(QString("ActivePowerL3"), ::OpenAPI::toJsonValue(m_active_power_l3));
    }
    if (m_active_power_unit_isSet) {
        obj.insert(QString("ActivePowerUnit"), ::OpenAPI::toJsonValue(m_active_power_unit));
    }
    if (m_active_tariff_isSet) {
        obj.insert(QString("ActiveTariff"), ::OpenAPI::toJsonValue(m_active_tariff));
    }
    if (m_additional_meter_serial_number_isSet) {
        obj.insert(QString("AdditionalMeterSerialNumber"), ::OpenAPI::toJsonValue(m_additional_meter_serial_number));
    }
    if (m_analog_output1_isSet) {
        obj.insert(QString("AnalogOutput1"), ::OpenAPI::toJsonValue(m_analog_output1));
    }
    if (m_analog_output2_isSet) {
        obj.insert(QString("AnalogOutput2"), ::OpenAPI::toJsonValue(m_analog_output2));
    }
    if (m_charging_station_state_isSet) {
        obj.insert(QString("ChargingStationState"), ::OpenAPI::toJsonValue(m_charging_station_state));
    }
    if (m_counter_reading_isSet) {
        obj.insert(QString("CounterReading"), ::OpenAPI::toJsonValue(m_counter_reading));
    }
    if (m_counter_reading_export_isSet) {
        obj.insert(QString("CounterReadingExport"), ::OpenAPI::toJsonValue(m_counter_reading_export));
    }
    if (m_counter_reading_import_isSet) {
        obj.insert(QString("CounterReadingImport"), ::OpenAPI::toJsonValue(m_counter_reading_import));
    }
    if (m_counter_reading_t1_isSet) {
        obj.insert(QString("CounterReadingT1"), ::OpenAPI::toJsonValue(m_counter_reading_t1));
    }
    if (m_counter_reading_t2_isSet) {
        obj.insert(QString("CounterReadingT2"), ::OpenAPI::toJsonValue(m_counter_reading_t2));
    }
    if (m_counter_reading_t3_isSet) {
        obj.insert(QString("CounterReadingT3"), ::OpenAPI::toJsonValue(m_counter_reading_t3));
    }
    if (m_counter_reading_t4_isSet) {
        obj.insert(QString("CounterReadingT4"), ::OpenAPI::toJsonValue(m_counter_reading_t4));
    }
    if (m_counter_reading_unit_isSet) {
        obj.insert(QString("CounterReadingUnit"), ::OpenAPI::toJsonValue(m_counter_reading_unit));
    }
    if (m_current_isSet) {
        obj.insert(QString("Current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_current_l1_isSet) {
        obj.insert(QString("CurrentL1"), ::OpenAPI::toJsonValue(m_current_l1));
    }
    if (m_current_l2_isSet) {
        obj.insert(QString("CurrentL2"), ::OpenAPI::toJsonValue(m_current_l2));
    }
    if (m_current_l3_isSet) {
        obj.insert(QString("CurrentL3"), ::OpenAPI::toJsonValue(m_current_l3));
    }
    if (m_device_energy_type_isSet) {
        obj.insert(QString("DeviceEnergyType"), ::OpenAPI::toJsonValue(m_device_energy_type));
    }
    if (m_digital_input1_isSet) {
        obj.insert(QString("DigitalInput1"), ::OpenAPI::toJsonValue(m_digital_input1));
    }
    if (m_digital_input2_isSet) {
        obj.insert(QString("DigitalInput2"), ::OpenAPI::toJsonValue(m_digital_input2));
    }
    if (m_digital_output1_isSet) {
        obj.insert(QString("DigitalOutput1"), ::OpenAPI::toJsonValue(m_digital_output1));
    }
    if (m_digital_output2_isSet) {
        obj.insert(QString("DigitalOutput2"), ::OpenAPI::toJsonValue(m_digital_output2));
    }
    if (m_family_type_isSet) {
        obj.insert(QString("FamilyType"), ::OpenAPI::toJsonValue(m_family_type));
    }
    if (m_flow_rate_isSet) {
        obj.insert(QString("FlowRate"), ::OpenAPI::toJsonValue(m_flow_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meter_sub_type_isSet) {
        obj.insert(QString("MeterSubType"), ::OpenAPI::toJsonValue(m_meter_sub_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_power_factor_isSet) {
        obj.insert(QString("PowerFactor"), ::OpenAPI::toJsonValue(m_power_factor));
    }
    if (m_power_factor_l1_isSet) {
        obj.insert(QString("PowerFactorL1"), ::OpenAPI::toJsonValue(m_power_factor_l1));
    }
    if (m_power_factor_l2_isSet) {
        obj.insert(QString("PowerFactorL2"), ::OpenAPI::toJsonValue(m_power_factor_l2));
    }
    if (m_power_factor_l3_isSet) {
        obj.insert(QString("PowerFactorL3"), ::OpenAPI::toJsonValue(m_power_factor_l3));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_switch_on_isSet) {
        obj.insert(QString("SwitchOn"), ::OpenAPI::toJsonValue(m_switch_on));
    }
    if (m_switch_phase_l1_on_isSet) {
        obj.insert(QString("SwitchPhaseL1On"), ::OpenAPI::toJsonValue(m_switch_phase_l1_on));
    }
    if (m_switch_phase_l2_on_isSet) {
        obj.insert(QString("SwitchPhaseL2On"), ::OpenAPI::toJsonValue(m_switch_phase_l2_on));
    }
    if (m_switch_phase_l3_on_isSet) {
        obj.insert(QString("SwitchPhaseL3On"), ::OpenAPI::toJsonValue(m_switch_phase_l3_on));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("Temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("ValueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("Voltage"), ::OpenAPI::toJsonValue(m_voltage));
    }
    if (m_voltage_l1_isSet) {
        obj.insert(QString("VoltageL1"), ::OpenAPI::toJsonValue(m_voltage_l1));
    }
    if (m_voltage_l2_isSet) {
        obj.insert(QString("VoltageL2"), ::OpenAPI::toJsonValue(m_voltage_l2));
    }
    if (m_voltage_l3_isSet) {
        obj.insert(QString("VoltageL3"), ::OpenAPI::toJsonValue(m_voltage_l3));
    }
    return obj;
}

double OAIDevice::getActivePower() const {
    return m_active_power;
}
void OAIDevice::setActivePower(const double &active_power) {
    m_active_power = active_power;
    m_active_power_isSet = true;
}

bool OAIDevice::is_active_power_Set() const{
    return m_active_power_isSet;
}

bool OAIDevice::is_active_power_Valid() const{
    return m_active_power_isValid;
}

double OAIDevice::getActivePowerL1() const {
    return m_active_power_l1;
}
void OAIDevice::setActivePowerL1(const double &active_power_l1) {
    m_active_power_l1 = active_power_l1;
    m_active_power_l1_isSet = true;
}

bool OAIDevice::is_active_power_l1_Set() const{
    return m_active_power_l1_isSet;
}

bool OAIDevice::is_active_power_l1_Valid() const{
    return m_active_power_l1_isValid;
}

double OAIDevice::getActivePowerL2() const {
    return m_active_power_l2;
}
void OAIDevice::setActivePowerL2(const double &active_power_l2) {
    m_active_power_l2 = active_power_l2;
    m_active_power_l2_isSet = true;
}

bool OAIDevice::is_active_power_l2_Set() const{
    return m_active_power_l2_isSet;
}

bool OAIDevice::is_active_power_l2_Valid() const{
    return m_active_power_l2_isValid;
}

double OAIDevice::getActivePowerL3() const {
    return m_active_power_l3;
}
void OAIDevice::setActivePowerL3(const double &active_power_l3) {
    m_active_power_l3 = active_power_l3;
    m_active_power_l3_isSet = true;
}

bool OAIDevice::is_active_power_l3_Set() const{
    return m_active_power_l3_isSet;
}

bool OAIDevice::is_active_power_l3_Valid() const{
    return m_active_power_l3_isValid;
}

QString OAIDevice::getActivePowerUnit() const {
    return m_active_power_unit;
}
void OAIDevice::setActivePowerUnit(const QString &active_power_unit) {
    m_active_power_unit = active_power_unit;
    m_active_power_unit_isSet = true;
}

bool OAIDevice::is_active_power_unit_Set() const{
    return m_active_power_unit_isSet;
}

bool OAIDevice::is_active_power_unit_Valid() const{
    return m_active_power_unit_isValid;
}

qint32 OAIDevice::getActiveTariff() const {
    return m_active_tariff;
}
void OAIDevice::setActiveTariff(const qint32 &active_tariff) {
    m_active_tariff = active_tariff;
    m_active_tariff_isSet = true;
}

bool OAIDevice::is_active_tariff_Set() const{
    return m_active_tariff_isSet;
}

bool OAIDevice::is_active_tariff_Valid() const{
    return m_active_tariff_isValid;
}

QString OAIDevice::getAdditionalMeterSerialNumber() const {
    return m_additional_meter_serial_number;
}
void OAIDevice::setAdditionalMeterSerialNumber(const QString &additional_meter_serial_number) {
    m_additional_meter_serial_number = additional_meter_serial_number;
    m_additional_meter_serial_number_isSet = true;
}

bool OAIDevice::is_additional_meter_serial_number_Set() const{
    return m_additional_meter_serial_number_isSet;
}

bool OAIDevice::is_additional_meter_serial_number_Valid() const{
    return m_additional_meter_serial_number_isValid;
}

qint32 OAIDevice::getAnalogOutput1() const {
    return m_analog_output1;
}
void OAIDevice::setAnalogOutput1(const qint32 &analog_output1) {
    m_analog_output1 = analog_output1;
    m_analog_output1_isSet = true;
}

bool OAIDevice::is_analog_output1_Set() const{
    return m_analog_output1_isSet;
}

bool OAIDevice::is_analog_output1_Valid() const{
    return m_analog_output1_isValid;
}

qint32 OAIDevice::getAnalogOutput2() const {
    return m_analog_output2;
}
void OAIDevice::setAnalogOutput2(const qint32 &analog_output2) {
    m_analog_output2 = analog_output2;
    m_analog_output2_isSet = true;
}

bool OAIDevice::is_analog_output2_Set() const{
    return m_analog_output2_isSet;
}

bool OAIDevice::is_analog_output2_Valid() const{
    return m_analog_output2_isValid;
}

QString OAIDevice::getChargingStationState() const {
    return m_charging_station_state;
}
void OAIDevice::setChargingStationState(const QString &charging_station_state) {
    m_charging_station_state = charging_station_state;
    m_charging_station_state_isSet = true;
}

bool OAIDevice::is_charging_station_state_Set() const{
    return m_charging_station_state_isSet;
}

bool OAIDevice::is_charging_station_state_Valid() const{
    return m_charging_station_state_isValid;
}

double OAIDevice::getCounterReading() const {
    return m_counter_reading;
}
void OAIDevice::setCounterReading(const double &counter_reading) {
    m_counter_reading = counter_reading;
    m_counter_reading_isSet = true;
}

bool OAIDevice::is_counter_reading_Set() const{
    return m_counter_reading_isSet;
}

bool OAIDevice::is_counter_reading_Valid() const{
    return m_counter_reading_isValid;
}

double OAIDevice::getCounterReadingExport() const {
    return m_counter_reading_export;
}
void OAIDevice::setCounterReadingExport(const double &counter_reading_export) {
    m_counter_reading_export = counter_reading_export;
    m_counter_reading_export_isSet = true;
}

bool OAIDevice::is_counter_reading_export_Set() const{
    return m_counter_reading_export_isSet;
}

bool OAIDevice::is_counter_reading_export_Valid() const{
    return m_counter_reading_export_isValid;
}

double OAIDevice::getCounterReadingImport() const {
    return m_counter_reading_import;
}
void OAIDevice::setCounterReadingImport(const double &counter_reading_import) {
    m_counter_reading_import = counter_reading_import;
    m_counter_reading_import_isSet = true;
}

bool OAIDevice::is_counter_reading_import_Set() const{
    return m_counter_reading_import_isSet;
}

bool OAIDevice::is_counter_reading_import_Valid() const{
    return m_counter_reading_import_isValid;
}

double OAIDevice::getCounterReadingT1() const {
    return m_counter_reading_t1;
}
void OAIDevice::setCounterReadingT1(const double &counter_reading_t1) {
    m_counter_reading_t1 = counter_reading_t1;
    m_counter_reading_t1_isSet = true;
}

bool OAIDevice::is_counter_reading_t1_Set() const{
    return m_counter_reading_t1_isSet;
}

bool OAIDevice::is_counter_reading_t1_Valid() const{
    return m_counter_reading_t1_isValid;
}

double OAIDevice::getCounterReadingT2() const {
    return m_counter_reading_t2;
}
void OAIDevice::setCounterReadingT2(const double &counter_reading_t2) {
    m_counter_reading_t2 = counter_reading_t2;
    m_counter_reading_t2_isSet = true;
}

bool OAIDevice::is_counter_reading_t2_Set() const{
    return m_counter_reading_t2_isSet;
}

bool OAIDevice::is_counter_reading_t2_Valid() const{
    return m_counter_reading_t2_isValid;
}

double OAIDevice::getCounterReadingT3() const {
    return m_counter_reading_t3;
}
void OAIDevice::setCounterReadingT3(const double &counter_reading_t3) {
    m_counter_reading_t3 = counter_reading_t3;
    m_counter_reading_t3_isSet = true;
}

bool OAIDevice::is_counter_reading_t3_Set() const{
    return m_counter_reading_t3_isSet;
}

bool OAIDevice::is_counter_reading_t3_Valid() const{
    return m_counter_reading_t3_isValid;
}

double OAIDevice::getCounterReadingT4() const {
    return m_counter_reading_t4;
}
void OAIDevice::setCounterReadingT4(const double &counter_reading_t4) {
    m_counter_reading_t4 = counter_reading_t4;
    m_counter_reading_t4_isSet = true;
}

bool OAIDevice::is_counter_reading_t4_Set() const{
    return m_counter_reading_t4_isSet;
}

bool OAIDevice::is_counter_reading_t4_Valid() const{
    return m_counter_reading_t4_isValid;
}

QString OAIDevice::getCounterReadingUnit() const {
    return m_counter_reading_unit;
}
void OAIDevice::setCounterReadingUnit(const QString &counter_reading_unit) {
    m_counter_reading_unit = counter_reading_unit;
    m_counter_reading_unit_isSet = true;
}

bool OAIDevice::is_counter_reading_unit_Set() const{
    return m_counter_reading_unit_isSet;
}

bool OAIDevice::is_counter_reading_unit_Valid() const{
    return m_counter_reading_unit_isValid;
}

double OAIDevice::getCurrent() const {
    return m_current;
}
void OAIDevice::setCurrent(const double &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIDevice::is_current_Set() const{
    return m_current_isSet;
}

bool OAIDevice::is_current_Valid() const{
    return m_current_isValid;
}

double OAIDevice::getCurrentL1() const {
    return m_current_l1;
}
void OAIDevice::setCurrentL1(const double &current_l1) {
    m_current_l1 = current_l1;
    m_current_l1_isSet = true;
}

bool OAIDevice::is_current_l1_Set() const{
    return m_current_l1_isSet;
}

bool OAIDevice::is_current_l1_Valid() const{
    return m_current_l1_isValid;
}

double OAIDevice::getCurrentL2() const {
    return m_current_l2;
}
void OAIDevice::setCurrentL2(const double &current_l2) {
    m_current_l2 = current_l2;
    m_current_l2_isSet = true;
}

bool OAIDevice::is_current_l2_Set() const{
    return m_current_l2_isSet;
}

bool OAIDevice::is_current_l2_Valid() const{
    return m_current_l2_isValid;
}

double OAIDevice::getCurrentL3() const {
    return m_current_l3;
}
void OAIDevice::setCurrentL3(const double &current_l3) {
    m_current_l3 = current_l3;
    m_current_l3_isSet = true;
}

bool OAIDevice::is_current_l3_Set() const{
    return m_current_l3_isSet;
}

bool OAIDevice::is_current_l3_Valid() const{
    return m_current_l3_isValid;
}

QString OAIDevice::getDeviceEnergyType() const {
    return m_device_energy_type;
}
void OAIDevice::setDeviceEnergyType(const QString &device_energy_type) {
    m_device_energy_type = device_energy_type;
    m_device_energy_type_isSet = true;
}

bool OAIDevice::is_device_energy_type_Set() const{
    return m_device_energy_type_isSet;
}

bool OAIDevice::is_device_energy_type_Valid() const{
    return m_device_energy_type_isValid;
}

bool OAIDevice::isDigitalInput1() const {
    return m_digital_input1;
}
void OAIDevice::setDigitalInput1(const bool &digital_input1) {
    m_digital_input1 = digital_input1;
    m_digital_input1_isSet = true;
}

bool OAIDevice::is_digital_input1_Set() const{
    return m_digital_input1_isSet;
}

bool OAIDevice::is_digital_input1_Valid() const{
    return m_digital_input1_isValid;
}

bool OAIDevice::isDigitalInput2() const {
    return m_digital_input2;
}
void OAIDevice::setDigitalInput2(const bool &digital_input2) {
    m_digital_input2 = digital_input2;
    m_digital_input2_isSet = true;
}

bool OAIDevice::is_digital_input2_Set() const{
    return m_digital_input2_isSet;
}

bool OAIDevice::is_digital_input2_Valid() const{
    return m_digital_input2_isValid;
}

bool OAIDevice::isDigitalOutput1() const {
    return m_digital_output1;
}
void OAIDevice::setDigitalOutput1(const bool &digital_output1) {
    m_digital_output1 = digital_output1;
    m_digital_output1_isSet = true;
}

bool OAIDevice::is_digital_output1_Set() const{
    return m_digital_output1_isSet;
}

bool OAIDevice::is_digital_output1_Valid() const{
    return m_digital_output1_isValid;
}

bool OAIDevice::isDigitalOutput2() const {
    return m_digital_output2;
}
void OAIDevice::setDigitalOutput2(const bool &digital_output2) {
    m_digital_output2 = digital_output2;
    m_digital_output2_isSet = true;
}

bool OAIDevice::is_digital_output2_Set() const{
    return m_digital_output2_isSet;
}

bool OAIDevice::is_digital_output2_Valid() const{
    return m_digital_output2_isValid;
}

QString OAIDevice::getFamilyType() const {
    return m_family_type;
}
void OAIDevice::setFamilyType(const QString &family_type) {
    m_family_type = family_type;
    m_family_type_isSet = true;
}

bool OAIDevice::is_family_type_Set() const{
    return m_family_type_isSet;
}

bool OAIDevice::is_family_type_Valid() const{
    return m_family_type_isValid;
}

double OAIDevice::getFlowRate() const {
    return m_flow_rate;
}
void OAIDevice::setFlowRate(const double &flow_rate) {
    m_flow_rate = flow_rate;
    m_flow_rate_isSet = true;
}

bool OAIDevice::is_flow_rate_Set() const{
    return m_flow_rate_isSet;
}

bool OAIDevice::is_flow_rate_Valid() const{
    return m_flow_rate_isValid;
}

QString OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDevice::getMeterSubType() const {
    return m_meter_sub_type;
}
void OAIDevice::setMeterSubType(const QString &meter_sub_type) {
    m_meter_sub_type = meter_sub_type;
    m_meter_sub_type_isSet = true;
}

bool OAIDevice::is_meter_sub_type_Set() const{
    return m_meter_sub_type_isSet;
}

bool OAIDevice::is_meter_sub_type_Valid() const{
    return m_meter_sub_type_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDevice::getPowerFactor() const {
    return m_power_factor;
}
void OAIDevice::setPowerFactor(const double &power_factor) {
    m_power_factor = power_factor;
    m_power_factor_isSet = true;
}

bool OAIDevice::is_power_factor_Set() const{
    return m_power_factor_isSet;
}

bool OAIDevice::is_power_factor_Valid() const{
    return m_power_factor_isValid;
}

double OAIDevice::getPowerFactorL1() const {
    return m_power_factor_l1;
}
void OAIDevice::setPowerFactorL1(const double &power_factor_l1) {
    m_power_factor_l1 = power_factor_l1;
    m_power_factor_l1_isSet = true;
}

bool OAIDevice::is_power_factor_l1_Set() const{
    return m_power_factor_l1_isSet;
}

bool OAIDevice::is_power_factor_l1_Valid() const{
    return m_power_factor_l1_isValid;
}

double OAIDevice::getPowerFactorL2() const {
    return m_power_factor_l2;
}
void OAIDevice::setPowerFactorL2(const double &power_factor_l2) {
    m_power_factor_l2 = power_factor_l2;
    m_power_factor_l2_isSet = true;
}

bool OAIDevice::is_power_factor_l2_Set() const{
    return m_power_factor_l2_isSet;
}

bool OAIDevice::is_power_factor_l2_Valid() const{
    return m_power_factor_l2_isValid;
}

double OAIDevice::getPowerFactorL3() const {
    return m_power_factor_l3;
}
void OAIDevice::setPowerFactorL3(const double &power_factor_l3) {
    m_power_factor_l3 = power_factor_l3;
    m_power_factor_l3_isSet = true;
}

bool OAIDevice::is_power_factor_l3_Set() const{
    return m_power_factor_l3_isSet;
}

bool OAIDevice::is_power_factor_l3_Valid() const{
    return m_power_factor_l3_isValid;
}

qint64 OAIDevice::getSerial() const {
    return m_serial;
}
void OAIDevice::setSerial(const qint64 &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDevice::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDevice::is_serial_Valid() const{
    return m_serial_isValid;
}

bool OAIDevice::isSwitchOn() const {
    return m_switch_on;
}
void OAIDevice::setSwitchOn(const bool &switch_on) {
    m_switch_on = switch_on;
    m_switch_on_isSet = true;
}

bool OAIDevice::is_switch_on_Set() const{
    return m_switch_on_isSet;
}

bool OAIDevice::is_switch_on_Valid() const{
    return m_switch_on_isValid;
}

bool OAIDevice::isSwitchPhaseL1On() const {
    return m_switch_phase_l1_on;
}
void OAIDevice::setSwitchPhaseL1On(const bool &switch_phase_l1_on) {
    m_switch_phase_l1_on = switch_phase_l1_on;
    m_switch_phase_l1_on_isSet = true;
}

bool OAIDevice::is_switch_phase_l1_on_Set() const{
    return m_switch_phase_l1_on_isSet;
}

bool OAIDevice::is_switch_phase_l1_on_Valid() const{
    return m_switch_phase_l1_on_isValid;
}

bool OAIDevice::isSwitchPhaseL2On() const {
    return m_switch_phase_l2_on;
}
void OAIDevice::setSwitchPhaseL2On(const bool &switch_phase_l2_on) {
    m_switch_phase_l2_on = switch_phase_l2_on;
    m_switch_phase_l2_on_isSet = true;
}

bool OAIDevice::is_switch_phase_l2_on_Set() const{
    return m_switch_phase_l2_on_isSet;
}

bool OAIDevice::is_switch_phase_l2_on_Valid() const{
    return m_switch_phase_l2_on_isValid;
}

bool OAIDevice::isSwitchPhaseL3On() const {
    return m_switch_phase_l3_on;
}
void OAIDevice::setSwitchPhaseL3On(const bool &switch_phase_l3_on) {
    m_switch_phase_l3_on = switch_phase_l3_on;
    m_switch_phase_l3_on_isSet = true;
}

bool OAIDevice::is_switch_phase_l3_on_Set() const{
    return m_switch_phase_l3_on_isSet;
}

bool OAIDevice::is_switch_phase_l3_on_Valid() const{
    return m_switch_phase_l3_on_isValid;
}

double OAIDevice::getTemperature() const {
    return m_temperature;
}
void OAIDevice::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIDevice::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIDevice::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QDateTime OAIDevice::getValueDate() const {
    return m_value_date;
}
void OAIDevice::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAIDevice::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAIDevice::is_value_date_Valid() const{
    return m_value_date_isValid;
}

double OAIDevice::getVoltage() const {
    return m_voltage;
}
void OAIDevice::setVoltage(const double &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAIDevice::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAIDevice::is_voltage_Valid() const{
    return m_voltage_isValid;
}

double OAIDevice::getVoltageL1() const {
    return m_voltage_l1;
}
void OAIDevice::setVoltageL1(const double &voltage_l1) {
    m_voltage_l1 = voltage_l1;
    m_voltage_l1_isSet = true;
}

bool OAIDevice::is_voltage_l1_Set() const{
    return m_voltage_l1_isSet;
}

bool OAIDevice::is_voltage_l1_Valid() const{
    return m_voltage_l1_isValid;
}

double OAIDevice::getVoltageL2() const {
    return m_voltage_l2;
}
void OAIDevice::setVoltageL2(const double &voltage_l2) {
    m_voltage_l2 = voltage_l2;
    m_voltage_l2_isSet = true;
}

bool OAIDevice::is_voltage_l2_Set() const{
    return m_voltage_l2_isSet;
}

bool OAIDevice::is_voltage_l2_Valid() const{
    return m_voltage_l2_isValid;
}

double OAIDevice::getVoltageL3() const {
    return m_voltage_l3;
}
void OAIDevice::setVoltageL3(const double &voltage_l3) {
    m_voltage_l3 = voltage_l3;
    m_voltage_l3_isSet = true;
}

bool OAIDevice::is_voltage_l3_Set() const{
    return m_voltage_l3_isSet;
}

bool OAIDevice::is_voltage_l3_Valid() const{
    return m_voltage_l3_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_power_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_power_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_power_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_power_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_tariff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_meter_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analog_output1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analog_output2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charging_station_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_energy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_input1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_input2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_output1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_output2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_factor_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_phase_l1_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_phase_l2_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_phase_l3_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_l3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
