/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValuesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValuesData::OAIValuesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValuesData::OAIValuesData() {
    this->initializeModel();
}

OAIValuesData::~OAIValuesData() {}

void OAIValuesData::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIValuesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValuesData::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;
}

QString OAIValuesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValuesData::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QDateTime OAIValuesData::getDate() const {
    return m_date;
}
void OAIValuesData::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIValuesData::is_date_Set() const{
    return m_date_isSet;
}

bool OAIValuesData::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIValuesData::getDeviceId() const {
    return m_device_id;
}
void OAIValuesData::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIValuesData::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIValuesData::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QList<OAIValueData> OAIValuesData::getValues() const {
    return m_values;
}
void OAIValuesData::setValues(const QList<OAIValueData> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIValuesData::is_values_Set() const{
    return m_values_isSet;
}

bool OAIValuesData::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIValuesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValuesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
