/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceInPast.h
 *
 * Container Class for the Web API. Conatinas the MeterValues in the Past
 */

#ifndef OAIDeviceInPast_H
#define OAIDeviceInPast_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeviceInPast : public OAIObject {
public:
    OAIDeviceInPast();
    OAIDeviceInPast(QString json);
    ~OAIDeviceInPast() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCounterReading() const;
    void setCounterReading(const double &counter_reading);
    bool is_counter_reading_Set() const;
    bool is_counter_reading_Valid() const;

    double getCounterReadingExport() const;
    void setCounterReadingExport(const double &counter_reading_export);
    bool is_counter_reading_export_Set() const;
    bool is_counter_reading_export_Valid() const;

    double getCounterReadingExportT1() const;
    void setCounterReadingExportT1(const double &counter_reading_export_t1);
    bool is_counter_reading_export_t1_Set() const;
    bool is_counter_reading_export_t1_Valid() const;

    double getCounterReadingExportT2() const;
    void setCounterReadingExportT2(const double &counter_reading_export_t2);
    bool is_counter_reading_export_t2_Set() const;
    bool is_counter_reading_export_t2_Valid() const;

    double getCounterReadingExportT3() const;
    void setCounterReadingExportT3(const double &counter_reading_export_t3);
    bool is_counter_reading_export_t3_Set() const;
    bool is_counter_reading_export_t3_Valid() const;

    double getCounterReadingExportT4() const;
    void setCounterReadingExportT4(const double &counter_reading_export_t4);
    bool is_counter_reading_export_t4_Set() const;
    bool is_counter_reading_export_t4_Valid() const;

    double getCounterReadingImport() const;
    void setCounterReadingImport(const double &counter_reading_import);
    bool is_counter_reading_import_Set() const;
    bool is_counter_reading_import_Valid() const;

    double getCounterReadingImportT1() const;
    void setCounterReadingImportT1(const double &counter_reading_import_t1);
    bool is_counter_reading_import_t1_Set() const;
    bool is_counter_reading_import_t1_Valid() const;

    double getCounterReadingImportT2() const;
    void setCounterReadingImportT2(const double &counter_reading_import_t2);
    bool is_counter_reading_import_t2_Set() const;
    bool is_counter_reading_import_t2_Valid() const;

    double getCounterReadingImportT3() const;
    void setCounterReadingImportT3(const double &counter_reading_import_t3);
    bool is_counter_reading_import_t3_Set() const;
    bool is_counter_reading_import_t3_Valid() const;

    double getCounterReadingImportT4() const;
    void setCounterReadingImportT4(const double &counter_reading_import_t4);
    bool is_counter_reading_import_t4_Set() const;
    bool is_counter_reading_import_t4_Valid() const;

    double getCounterReadingT1() const;
    void setCounterReadingT1(const double &counter_reading_t1);
    bool is_counter_reading_t1_Set() const;
    bool is_counter_reading_t1_Valid() const;

    double getCounterReadingT2() const;
    void setCounterReadingT2(const double &counter_reading_t2);
    bool is_counter_reading_t2_Set() const;
    bool is_counter_reading_t2_Valid() const;

    double getCounterReadingT3() const;
    void setCounterReadingT3(const double &counter_reading_t3);
    bool is_counter_reading_t3_Set() const;
    bool is_counter_reading_t3_Valid() const;

    double getCounterReadingT4() const;
    void setCounterReadingT4(const double &counter_reading_t4);
    bool is_counter_reading_t4_Set() const;
    bool is_counter_reading_t4_Valid() const;

    QString getCounterReadingUnit() const;
    void setCounterReadingUnit(const QString &counter_reading_unit);
    bool is_counter_reading_unit_Set() const;
    bool is_counter_reading_unit_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint64 getSerial() const;
    void setSerial(const qint64 &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_counter_reading;
    bool m_counter_reading_isSet;
    bool m_counter_reading_isValid;

    double m_counter_reading_export;
    bool m_counter_reading_export_isSet;
    bool m_counter_reading_export_isValid;

    double m_counter_reading_export_t1;
    bool m_counter_reading_export_t1_isSet;
    bool m_counter_reading_export_t1_isValid;

    double m_counter_reading_export_t2;
    bool m_counter_reading_export_t2_isSet;
    bool m_counter_reading_export_t2_isValid;

    double m_counter_reading_export_t3;
    bool m_counter_reading_export_t3_isSet;
    bool m_counter_reading_export_t3_isValid;

    double m_counter_reading_export_t4;
    bool m_counter_reading_export_t4_isSet;
    bool m_counter_reading_export_t4_isValid;

    double m_counter_reading_import;
    bool m_counter_reading_import_isSet;
    bool m_counter_reading_import_isValid;

    double m_counter_reading_import_t1;
    bool m_counter_reading_import_t1_isSet;
    bool m_counter_reading_import_t1_isValid;

    double m_counter_reading_import_t2;
    bool m_counter_reading_import_t2_isSet;
    bool m_counter_reading_import_t2_isValid;

    double m_counter_reading_import_t3;
    bool m_counter_reading_import_t3_isSet;
    bool m_counter_reading_import_t3_isValid;

    double m_counter_reading_import_t4;
    bool m_counter_reading_import_t4_isSet;
    bool m_counter_reading_import_t4_isValid;

    double m_counter_reading_t1;
    bool m_counter_reading_t1_isSet;
    bool m_counter_reading_t1_isValid;

    double m_counter_reading_t2;
    bool m_counter_reading_t2_isSet;
    bool m_counter_reading_t2_isValid;

    double m_counter_reading_t3;
    bool m_counter_reading_t3_isSet;
    bool m_counter_reading_t3_isValid;

    double m_counter_reading_t4;
    bool m_counter_reading_t4_isSet;
    bool m_counter_reading_t4_isValid;

    QString m_counter_reading_unit;
    bool m_counter_reading_unit_isSet;
    bool m_counter_reading_unit_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint64 m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceInPast)

#endif // OAIDeviceInPast_H
