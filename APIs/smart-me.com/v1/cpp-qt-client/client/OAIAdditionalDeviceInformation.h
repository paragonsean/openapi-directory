/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDeviceInformation.h
 *
 * Additional Information For a device
 */

#ifndef OAIAdditionalDeviceInformation_H
#define OAIAdditionalDeviceInformation_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDeviceInformation : public OAIObject {
public:
    OAIAdditionalDeviceInformation();
    OAIAdditionalDeviceInformation(QString json);
    ~OAIAdditionalDeviceInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalMeterSerialNumber() const;
    void setAdditionalMeterSerialNumber(const QString &additional_meter_serial_number);
    bool is_additional_meter_serial_number_Set() const;
    bool is_additional_meter_serial_number_Valid() const;

    qint32 getFirmwareVersion() const;
    void setFirmwareVersion(const qint32 &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    qint32 getHardwareVersion() const;
    void setHardwareVersion(const qint32 &hardware_version);
    bool is_hardware_version_Set() const;
    bool is_hardware_version_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getNetworkConnection() const;
    void setNetworkConnection(const QString &network_connection);
    bool is_network_connection_Set() const;
    bool is_network_connection_Valid() const;

    qint32 getNetworkConnectionRssi() const;
    void setNetworkConnectionRssi(const qint32 &network_connection_rssi);
    bool is_network_connection_rssi_Set() const;
    bool is_network_connection_rssi_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_meter_serial_number;
    bool m_additional_meter_serial_number_isSet;
    bool m_additional_meter_serial_number_isValid;

    qint32 m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    qint32 m_hardware_version;
    bool m_hardware_version_isSet;
    bool m_hardware_version_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_network_connection;
    bool m_network_connection_isSet;
    bool m_network_connection_isValid;

    qint32 m_network_connection_rssi;
    bool m_network_connection_rssi_isSet;
    bool m_network_connection_rssi_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDeviceInformation)

#endif // OAIAdditionalDeviceInformation_H
