/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenToPut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenToPut::OAIAccessTokenToPut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenToPut::OAIAccessTokenToPut() {
    this->initializeModel();
}

OAIAccessTokenToPut::~OAIAccessTokenToPut() {}

void OAIAccessTokenToPut::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAccessTokenToPut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenToPut::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("CardId")]);
    m_card_id_isSet = !json[QString("CardId")].isNull() && m_card_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIAccessTokenToPut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenToPut::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("CardId"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIAccessTokenToPut::getCardId() const {
    return m_card_id;
}
void OAIAccessTokenToPut::setCardId(const qint64 &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIAccessTokenToPut::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIAccessTokenToPut::is_card_id_Valid() const{
    return m_card_id_isValid;
}

qint64 OAIAccessTokenToPut::getUserId() const {
    return m_user_id;
}
void OAIAccessTokenToPut::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAccessTokenToPut::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAccessTokenToPut::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAccessTokenToPut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenToPut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
