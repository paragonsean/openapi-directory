/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInPast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInPast::OAIDeviceInPast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInPast::OAIDeviceInPast() {
    this->initializeModel();
}

OAIDeviceInPast::~OAIDeviceInPast() {}

void OAIDeviceInPast::initializeModel() {

    m_counter_reading_isSet = false;
    m_counter_reading_isValid = false;

    m_counter_reading_export_isSet = false;
    m_counter_reading_export_isValid = false;

    m_counter_reading_export_t1_isSet = false;
    m_counter_reading_export_t1_isValid = false;

    m_counter_reading_export_t2_isSet = false;
    m_counter_reading_export_t2_isValid = false;

    m_counter_reading_export_t3_isSet = false;
    m_counter_reading_export_t3_isValid = false;

    m_counter_reading_export_t4_isSet = false;
    m_counter_reading_export_t4_isValid = false;

    m_counter_reading_import_isSet = false;
    m_counter_reading_import_isValid = false;

    m_counter_reading_import_t1_isSet = false;
    m_counter_reading_import_t1_isValid = false;

    m_counter_reading_import_t2_isSet = false;
    m_counter_reading_import_t2_isValid = false;

    m_counter_reading_import_t3_isSet = false;
    m_counter_reading_import_t3_isValid = false;

    m_counter_reading_import_t4_isSet = false;
    m_counter_reading_import_t4_isValid = false;

    m_counter_reading_t1_isSet = false;
    m_counter_reading_t1_isValid = false;

    m_counter_reading_t2_isSet = false;
    m_counter_reading_t2_isValid = false;

    m_counter_reading_t3_isSet = false;
    m_counter_reading_t3_isValid = false;

    m_counter_reading_t4_isSet = false;
    m_counter_reading_t4_isValid = false;

    m_counter_reading_unit_isSet = false;
    m_counter_reading_unit_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;
}

void OAIDeviceInPast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInPast::fromJsonObject(QJsonObject json) {

    m_counter_reading_isValid = ::OpenAPI::fromJsonValue(m_counter_reading, json[QString("CounterReading")]);
    m_counter_reading_isSet = !json[QString("CounterReading")].isNull() && m_counter_reading_isValid;

    m_counter_reading_export_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export, json[QString("CounterReadingExport")]);
    m_counter_reading_export_isSet = !json[QString("CounterReadingExport")].isNull() && m_counter_reading_export_isValid;

    m_counter_reading_export_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t1, json[QString("CounterReadingExportT1")]);
    m_counter_reading_export_t1_isSet = !json[QString("CounterReadingExportT1")].isNull() && m_counter_reading_export_t1_isValid;

    m_counter_reading_export_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t2, json[QString("CounterReadingExportT2")]);
    m_counter_reading_export_t2_isSet = !json[QString("CounterReadingExportT2")].isNull() && m_counter_reading_export_t2_isValid;

    m_counter_reading_export_t3_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t3, json[QString("CounterReadingExportT3")]);
    m_counter_reading_export_t3_isSet = !json[QString("CounterReadingExportT3")].isNull() && m_counter_reading_export_t3_isValid;

    m_counter_reading_export_t4_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_export_t4, json[QString("CounterReadingExportT4")]);
    m_counter_reading_export_t4_isSet = !json[QString("CounterReadingExportT4")].isNull() && m_counter_reading_export_t4_isValid;

    m_counter_reading_import_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import, json[QString("CounterReadingImport")]);
    m_counter_reading_import_isSet = !json[QString("CounterReadingImport")].isNull() && m_counter_reading_import_isValid;

    m_counter_reading_import_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import_t1, json[QString("CounterReadingImportT1")]);
    m_counter_reading_import_t1_isSet = !json[QString("CounterReadingImportT1")].isNull() && m_counter_reading_import_t1_isValid;

    m_counter_reading_import_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import_t2, json[QString("CounterReadingImportT2")]);
    m_counter_reading_import_t2_isSet = !json[QString("CounterReadingImportT2")].isNull() && m_counter_reading_import_t2_isValid;

    m_counter_reading_import_t3_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import_t3, json[QString("CounterReadingImportT3")]);
    m_counter_reading_import_t3_isSet = !json[QString("CounterReadingImportT3")].isNull() && m_counter_reading_import_t3_isValid;

    m_counter_reading_import_t4_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_import_t4, json[QString("CounterReadingImportT4")]);
    m_counter_reading_import_t4_isSet = !json[QString("CounterReadingImportT4")].isNull() && m_counter_reading_import_t4_isValid;

    m_counter_reading_t1_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t1, json[QString("CounterReadingT1")]);
    m_counter_reading_t1_isSet = !json[QString("CounterReadingT1")].isNull() && m_counter_reading_t1_isValid;

    m_counter_reading_t2_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t2, json[QString("CounterReadingT2")]);
    m_counter_reading_t2_isSet = !json[QString("CounterReadingT2")].isNull() && m_counter_reading_t2_isValid;

    m_counter_reading_t3_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t3, json[QString("CounterReadingT3")]);
    m_counter_reading_t3_isSet = !json[QString("CounterReadingT3")].isNull() && m_counter_reading_t3_isValid;

    m_counter_reading_t4_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_t4, json[QString("CounterReadingT4")]);
    m_counter_reading_t4_isSet = !json[QString("CounterReadingT4")].isNull() && m_counter_reading_t4_isValid;

    m_counter_reading_unit_isValid = ::OpenAPI::fromJsonValue(m_counter_reading_unit, json[QString("CounterReadingUnit")]);
    m_counter_reading_unit_isSet = !json[QString("CounterReadingUnit")].isNull() && m_counter_reading_unit_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;
}

QString OAIDeviceInPast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInPast::asJsonObject() const {
    QJsonObject obj;
    if (m_counter_reading_isSet) {
        obj.insert(QString("CounterReading"), ::OpenAPI::toJsonValue(m_counter_reading));
    }
    if (m_counter_reading_export_isSet) {
        obj.insert(QString("CounterReadingExport"), ::OpenAPI::toJsonValue(m_counter_reading_export));
    }
    if (m_counter_reading_export_t1_isSet) {
        obj.insert(QString("CounterReadingExportT1"), ::OpenAPI::toJsonValue(m_counter_reading_export_t1));
    }
    if (m_counter_reading_export_t2_isSet) {
        obj.insert(QString("CounterReadingExportT2"), ::OpenAPI::toJsonValue(m_counter_reading_export_t2));
    }
    if (m_counter_reading_export_t3_isSet) {
        obj.insert(QString("CounterReadingExportT3"), ::OpenAPI::toJsonValue(m_counter_reading_export_t3));
    }
    if (m_counter_reading_export_t4_isSet) {
        obj.insert(QString("CounterReadingExportT4"), ::OpenAPI::toJsonValue(m_counter_reading_export_t4));
    }
    if (m_counter_reading_import_isSet) {
        obj.insert(QString("CounterReadingImport"), ::OpenAPI::toJsonValue(m_counter_reading_import));
    }
    if (m_counter_reading_import_t1_isSet) {
        obj.insert(QString("CounterReadingImportT1"), ::OpenAPI::toJsonValue(m_counter_reading_import_t1));
    }
    if (m_counter_reading_import_t2_isSet) {
        obj.insert(QString("CounterReadingImportT2"), ::OpenAPI::toJsonValue(m_counter_reading_import_t2));
    }
    if (m_counter_reading_import_t3_isSet) {
        obj.insert(QString("CounterReadingImportT3"), ::OpenAPI::toJsonValue(m_counter_reading_import_t3));
    }
    if (m_counter_reading_import_t4_isSet) {
        obj.insert(QString("CounterReadingImportT4"), ::OpenAPI::toJsonValue(m_counter_reading_import_t4));
    }
    if (m_counter_reading_t1_isSet) {
        obj.insert(QString("CounterReadingT1"), ::OpenAPI::toJsonValue(m_counter_reading_t1));
    }
    if (m_counter_reading_t2_isSet) {
        obj.insert(QString("CounterReadingT2"), ::OpenAPI::toJsonValue(m_counter_reading_t2));
    }
    if (m_counter_reading_t3_isSet) {
        obj.insert(QString("CounterReadingT3"), ::OpenAPI::toJsonValue(m_counter_reading_t3));
    }
    if (m_counter_reading_t4_isSet) {
        obj.insert(QString("CounterReadingT4"), ::OpenAPI::toJsonValue(m_counter_reading_t4));
    }
    if (m_counter_reading_unit_isSet) {
        obj.insert(QString("CounterReadingUnit"), ::OpenAPI::toJsonValue(m_counter_reading_unit));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    return obj;
}

double OAIDeviceInPast::getCounterReading() const {
    return m_counter_reading;
}
void OAIDeviceInPast::setCounterReading(const double &counter_reading) {
    m_counter_reading = counter_reading;
    m_counter_reading_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_Set() const{
    return m_counter_reading_isSet;
}

bool OAIDeviceInPast::is_counter_reading_Valid() const{
    return m_counter_reading_isValid;
}

double OAIDeviceInPast::getCounterReadingExport() const {
    return m_counter_reading_export;
}
void OAIDeviceInPast::setCounterReadingExport(const double &counter_reading_export) {
    m_counter_reading_export = counter_reading_export;
    m_counter_reading_export_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_export_Set() const{
    return m_counter_reading_export_isSet;
}

bool OAIDeviceInPast::is_counter_reading_export_Valid() const{
    return m_counter_reading_export_isValid;
}

double OAIDeviceInPast::getCounterReadingExportT1() const {
    return m_counter_reading_export_t1;
}
void OAIDeviceInPast::setCounterReadingExportT1(const double &counter_reading_export_t1) {
    m_counter_reading_export_t1 = counter_reading_export_t1;
    m_counter_reading_export_t1_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_export_t1_Set() const{
    return m_counter_reading_export_t1_isSet;
}

bool OAIDeviceInPast::is_counter_reading_export_t1_Valid() const{
    return m_counter_reading_export_t1_isValid;
}

double OAIDeviceInPast::getCounterReadingExportT2() const {
    return m_counter_reading_export_t2;
}
void OAIDeviceInPast::setCounterReadingExportT2(const double &counter_reading_export_t2) {
    m_counter_reading_export_t2 = counter_reading_export_t2;
    m_counter_reading_export_t2_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_export_t2_Set() const{
    return m_counter_reading_export_t2_isSet;
}

bool OAIDeviceInPast::is_counter_reading_export_t2_Valid() const{
    return m_counter_reading_export_t2_isValid;
}

double OAIDeviceInPast::getCounterReadingExportT3() const {
    return m_counter_reading_export_t3;
}
void OAIDeviceInPast::setCounterReadingExportT3(const double &counter_reading_export_t3) {
    m_counter_reading_export_t3 = counter_reading_export_t3;
    m_counter_reading_export_t3_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_export_t3_Set() const{
    return m_counter_reading_export_t3_isSet;
}

bool OAIDeviceInPast::is_counter_reading_export_t3_Valid() const{
    return m_counter_reading_export_t3_isValid;
}

double OAIDeviceInPast::getCounterReadingExportT4() const {
    return m_counter_reading_export_t4;
}
void OAIDeviceInPast::setCounterReadingExportT4(const double &counter_reading_export_t4) {
    m_counter_reading_export_t4 = counter_reading_export_t4;
    m_counter_reading_export_t4_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_export_t4_Set() const{
    return m_counter_reading_export_t4_isSet;
}

bool OAIDeviceInPast::is_counter_reading_export_t4_Valid() const{
    return m_counter_reading_export_t4_isValid;
}

double OAIDeviceInPast::getCounterReadingImport() const {
    return m_counter_reading_import;
}
void OAIDeviceInPast::setCounterReadingImport(const double &counter_reading_import) {
    m_counter_reading_import = counter_reading_import;
    m_counter_reading_import_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_import_Set() const{
    return m_counter_reading_import_isSet;
}

bool OAIDeviceInPast::is_counter_reading_import_Valid() const{
    return m_counter_reading_import_isValid;
}

double OAIDeviceInPast::getCounterReadingImportT1() const {
    return m_counter_reading_import_t1;
}
void OAIDeviceInPast::setCounterReadingImportT1(const double &counter_reading_import_t1) {
    m_counter_reading_import_t1 = counter_reading_import_t1;
    m_counter_reading_import_t1_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_import_t1_Set() const{
    return m_counter_reading_import_t1_isSet;
}

bool OAIDeviceInPast::is_counter_reading_import_t1_Valid() const{
    return m_counter_reading_import_t1_isValid;
}

double OAIDeviceInPast::getCounterReadingImportT2() const {
    return m_counter_reading_import_t2;
}
void OAIDeviceInPast::setCounterReadingImportT2(const double &counter_reading_import_t2) {
    m_counter_reading_import_t2 = counter_reading_import_t2;
    m_counter_reading_import_t2_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_import_t2_Set() const{
    return m_counter_reading_import_t2_isSet;
}

bool OAIDeviceInPast::is_counter_reading_import_t2_Valid() const{
    return m_counter_reading_import_t2_isValid;
}

double OAIDeviceInPast::getCounterReadingImportT3() const {
    return m_counter_reading_import_t3;
}
void OAIDeviceInPast::setCounterReadingImportT3(const double &counter_reading_import_t3) {
    m_counter_reading_import_t3 = counter_reading_import_t3;
    m_counter_reading_import_t3_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_import_t3_Set() const{
    return m_counter_reading_import_t3_isSet;
}

bool OAIDeviceInPast::is_counter_reading_import_t3_Valid() const{
    return m_counter_reading_import_t3_isValid;
}

double OAIDeviceInPast::getCounterReadingImportT4() const {
    return m_counter_reading_import_t4;
}
void OAIDeviceInPast::setCounterReadingImportT4(const double &counter_reading_import_t4) {
    m_counter_reading_import_t4 = counter_reading_import_t4;
    m_counter_reading_import_t4_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_import_t4_Set() const{
    return m_counter_reading_import_t4_isSet;
}

bool OAIDeviceInPast::is_counter_reading_import_t4_Valid() const{
    return m_counter_reading_import_t4_isValid;
}

double OAIDeviceInPast::getCounterReadingT1() const {
    return m_counter_reading_t1;
}
void OAIDeviceInPast::setCounterReadingT1(const double &counter_reading_t1) {
    m_counter_reading_t1 = counter_reading_t1;
    m_counter_reading_t1_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_t1_Set() const{
    return m_counter_reading_t1_isSet;
}

bool OAIDeviceInPast::is_counter_reading_t1_Valid() const{
    return m_counter_reading_t1_isValid;
}

double OAIDeviceInPast::getCounterReadingT2() const {
    return m_counter_reading_t2;
}
void OAIDeviceInPast::setCounterReadingT2(const double &counter_reading_t2) {
    m_counter_reading_t2 = counter_reading_t2;
    m_counter_reading_t2_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_t2_Set() const{
    return m_counter_reading_t2_isSet;
}

bool OAIDeviceInPast::is_counter_reading_t2_Valid() const{
    return m_counter_reading_t2_isValid;
}

double OAIDeviceInPast::getCounterReadingT3() const {
    return m_counter_reading_t3;
}
void OAIDeviceInPast::setCounterReadingT3(const double &counter_reading_t3) {
    m_counter_reading_t3 = counter_reading_t3;
    m_counter_reading_t3_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_t3_Set() const{
    return m_counter_reading_t3_isSet;
}

bool OAIDeviceInPast::is_counter_reading_t3_Valid() const{
    return m_counter_reading_t3_isValid;
}

double OAIDeviceInPast::getCounterReadingT4() const {
    return m_counter_reading_t4;
}
void OAIDeviceInPast::setCounterReadingT4(const double &counter_reading_t4) {
    m_counter_reading_t4 = counter_reading_t4;
    m_counter_reading_t4_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_t4_Set() const{
    return m_counter_reading_t4_isSet;
}

bool OAIDeviceInPast::is_counter_reading_t4_Valid() const{
    return m_counter_reading_t4_isValid;
}

QString OAIDeviceInPast::getCounterReadingUnit() const {
    return m_counter_reading_unit;
}
void OAIDeviceInPast::setCounterReadingUnit(const QString &counter_reading_unit) {
    m_counter_reading_unit = counter_reading_unit;
    m_counter_reading_unit_isSet = true;
}

bool OAIDeviceInPast::is_counter_reading_unit_Set() const{
    return m_counter_reading_unit_isSet;
}

bool OAIDeviceInPast::is_counter_reading_unit_Valid() const{
    return m_counter_reading_unit_isValid;
}

QDateTime OAIDeviceInPast::getDate() const {
    return m_date;
}
void OAIDeviceInPast::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDeviceInPast::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDeviceInPast::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIDeviceInPast::getId() const {
    return m_id;
}
void OAIDeviceInPast::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceInPast::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceInPast::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIDeviceInPast::getSerial() const {
    return m_serial;
}
void OAIDeviceInPast::setSerial(const qint64 &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDeviceInPast::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDeviceInPast::is_serial_Valid() const{
    return m_serial_isValid;
}

bool OAIDeviceInPast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counter_reading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_export_t4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_t3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_import_t4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_t4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_reading_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInPast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
