/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISmartMeDeviceConfigurationContainer.h
 *
 * API Container class for the meter configuration
 */

#ifndef OAISmartMeDeviceConfigurationContainer_H
#define OAISmartMeDeviceConfigurationContainer_H

#include <QJsonObject>

#include "OAIInputConfigurationContainer.h"
#include "OAIOutputConfigurationContainer.h"
#include "OAISwitchConfigurationContainer.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputConfigurationContainer;
class OAIOutputConfigurationContainer;
class OAISwitchConfigurationContainer;

class OAISmartMeDeviceConfigurationContainer : public OAIObject {
public:
    OAISmartMeDeviceConfigurationContainer();
    OAISmartMeDeviceConfigurationContainer(QString json);
    ~OAISmartMeDeviceConfigurationContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceEncryptionKey() const;
    void setDeviceEncryptionKey(const QString &device_encryption_key);
    bool is_device_encryption_key_Set() const;
    bool is_device_encryption_key_Valid() const;

    QString getDevicePinCode() const;
    void setDevicePinCode(const QString &device_pin_code);
    bool is_device_pin_code_Set() const;
    bool is_device_pin_code_Valid() const;

    QString getDnsUpdateState() const;
    void setDnsUpdateState(const QString &dns_update_state);
    bool is_dns_update_state_Set() const;
    bool is_dns_update_state_Valid() const;

    bool isEnableModbusTcp() const;
    void setEnableModbusTcp(const bool &enable_modbus_tcp);
    bool is_enable_modbus_tcp_Set() const;
    bool is_enable_modbus_tcp_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIInputConfigurationContainer> getInputConfiguration() const;
    void setInputConfiguration(const QList<OAIInputConfigurationContainer> &input_configuration);
    bool is_input_configuration_Set() const;
    bool is_input_configuration_Valid() const;

    QList<OAIOutputConfigurationContainer> getOutputConfiguration() const;
    void setOutputConfiguration(const QList<OAIOutputConfigurationContainer> &output_configuration);
    bool is_output_configuration_Set() const;
    bool is_output_configuration_Valid() const;

    bool isShowReactiveEnergy() const;
    void setShowReactiveEnergy(const bool &show_reactive_energy);
    bool is_show_reactive_energy_Set() const;
    bool is_show_reactive_energy_Valid() const;

    QList<OAISwitchConfigurationContainer> getSwitchConfiguration() const;
    void setSwitchConfiguration(const QList<OAISwitchConfigurationContainer> &switch_configuration);
    bool is_switch_configuration_Set() const;
    bool is_switch_configuration_Valid() const;

    QString getUploadInterval() const;
    void setUploadInterval(const QString &upload_interval);
    bool is_upload_interval_Set() const;
    bool is_upload_interval_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_encryption_key;
    bool m_device_encryption_key_isSet;
    bool m_device_encryption_key_isValid;

    QString m_device_pin_code;
    bool m_device_pin_code_isSet;
    bool m_device_pin_code_isValid;

    QString m_dns_update_state;
    bool m_dns_update_state_isSet;
    bool m_dns_update_state_isValid;

    bool m_enable_modbus_tcp;
    bool m_enable_modbus_tcp_isSet;
    bool m_enable_modbus_tcp_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIInputConfigurationContainer> m_input_configuration;
    bool m_input_configuration_isSet;
    bool m_input_configuration_isValid;

    QList<OAIOutputConfigurationContainer> m_output_configuration;
    bool m_output_configuration_isSet;
    bool m_output_configuration_isValid;

    bool m_show_reactive_energy;
    bool m_show_reactive_energy_isSet;
    bool m_show_reactive_energy_isValid;

    QList<OAISwitchConfigurationContainer> m_switch_configuration;
    bool m_switch_configuration_isSet;
    bool m_switch_configuration_isValid;

    QString m_upload_interval;
    bool m_upload_interval_isSet;
    bool m_upload_interval_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISmartMeDeviceConfigurationContainer)

#endif // OAISmartMeDeviceConfigurationContainer_H
