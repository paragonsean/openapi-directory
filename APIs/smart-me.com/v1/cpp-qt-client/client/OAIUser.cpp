/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_child_users_isSet = false;
    m_child_users_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_as_string_isSet = false;
    m_id_as_string_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_child_users_isValid = ::OpenAPI::fromJsonValue(m_child_users, json[QString("ChildUsers")]);
    m_child_users_isSet = !json[QString("ChildUsers")].isNull() && m_child_users_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_id_as_string_isValid = ::OpenAPI::fromJsonValue(m_id_as_string, json[QString("IdAsString")]);
    m_id_as_string_isSet = !json[QString("IdAsString")].isNull() && m_id_as_string_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("IsAdmin")]);
    m_is_admin_isSet = !json[QString("IsAdmin")].isNull() && m_is_admin_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_child_users.size() > 0) {
        obj.insert(QString("ChildUsers"), ::OpenAPI::toJsonValue(m_child_users));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_as_string_isSet) {
        obj.insert(QString("IdAsString"), ::OpenAPI::toJsonValue(m_id_as_string));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("IsAdmin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QList<OAIUser> OAIUser::getChildUsers() const {
    return m_child_users;
}
void OAIUser::setChildUsers(const QList<OAIUser> &child_users) {
    m_child_users = child_users;
    m_child_users_isSet = true;
}

bool OAIUser::is_child_users_Set() const{
    return m_child_users_isSet;
}

bool OAIUser::is_child_users_Valid() const{
    return m_child_users_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getIdAsString() const {
    return m_id_as_string;
}
void OAIUser::setIdAsString(const QString &id_as_string) {
    m_id_as_string = id_as_string;
    m_id_as_string_isSet = true;
}

bool OAIUser::is_id_as_string_Set() const{
    return m_id_as_string_isSet;
}

bool OAIUser::is_id_as_string_Valid() const{
    return m_id_as_string_isValid;
}

bool OAIUser::isIsAdmin() const {
    return m_is_admin;
}
void OAIUser::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIUser::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIUser::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

QList<QString> OAIUser::getPermissions() const {
    return m_permissions;
}
void OAIUser::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUser::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUser::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
