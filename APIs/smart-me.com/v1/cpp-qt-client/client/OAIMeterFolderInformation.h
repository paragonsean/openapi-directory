/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeterFolderInformation.h
 *
 * Container Class for the Web API
 */

#ifndef OAIMeterFolderInformation_H
#define OAIMeterFolderInformation_H

#include <QJsonObject>

#include "OAIInputInformation.h"
#include "OAIOutputInformation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputInformation;
class OAIOutputInformation;

class OAIMeterFolderInformation : public OAIObject {
public:
    OAIMeterFolderInformation();
    OAIMeterFolderInformation(QString json);
    ~OAIMeterFolderInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCommunicationModuleFirmwareVersion() const;
    void setCommunicationModuleFirmwareVersion(const qint32 &communication_module_firmware_version);
    bool is_communication_module_firmware_version_Set() const;
    bool is_communication_module_firmware_version_Valid() const;

    qint32 getCommunicationModuleHardwareVersion() const;
    void setCommunicationModuleHardwareVersion(const qint32 &communication_module_hardware_version);
    bool is_communication_module_hardware_version_Set() const;
    bool is_communication_module_hardware_version_Valid() const;

    qint32 getFirmwareVersion() const;
    void setFirmwareVersion(const qint32 &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    qint32 getHardwareVersion() const;
    void setHardwareVersion(const qint32 &hardware_version);
    bool is_hardware_version_Set() const;
    bool is_hardware_version_Valid() const;

    QList<OAIInputInformation> getInputInformations() const;
    void setInputInformations(const QList<OAIInputInformation> &input_informations);
    bool is_input_informations_Set() const;
    bool is_input_informations_Valid() const;

    bool isIsFolder() const;
    void setIsFolder(const bool &is_folder);
    bool is_is_folder_Set() const;
    bool is_is_folder_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIOutputInformation> getOutputInformations() const;
    void setOutputInformations(const QList<OAIOutputInformation> &output_informations);
    bool is_output_informations_Set() const;
    bool is_output_informations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_communication_module_firmware_version;
    bool m_communication_module_firmware_version_isSet;
    bool m_communication_module_firmware_version_isValid;

    qint32 m_communication_module_hardware_version;
    bool m_communication_module_hardware_version_isSet;
    bool m_communication_module_hardware_version_isValid;

    qint32 m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    qint32 m_hardware_version;
    bool m_hardware_version_isSet;
    bool m_hardware_version_isValid;

    QList<OAIInputInformation> m_input_informations;
    bool m_input_informations_isSet;
    bool m_input_informations_isValid;

    bool m_is_folder;
    bool m_is_folder_isSet;
    bool m_is_folder_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIOutputInformation> m_output_informations;
    bool m_output_informations_isSet;
    bool m_output_informations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeterFolderInformation)

#endif // OAIMeterFolderInformation_H
