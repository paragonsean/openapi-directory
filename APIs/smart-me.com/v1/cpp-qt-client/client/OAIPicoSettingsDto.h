/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPicoSettingsDto.h
 *
 * DTO for the pico charging station settings
 */

#ifndef OAIPicoSettingsDto_H
#define OAIPicoSettingsDto_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPicoSettingsDto : public OAIObject {
public:
    OAIPicoSettingsDto();
    OAIPicoSettingsDto(QString json);
    ~OAIPicoSettingsDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthenticationType() const;
    void setAuthenticationType(const QString &authentication_type);
    bool is_authentication_type_Set() const;
    bool is_authentication_type_Valid() const;

    bool isCarIdDetection() const;
    void setCarIdDetection(const bool &car_id_detection);
    bool is_car_id_detection_Set() const;
    bool is_car_id_detection_Valid() const;

    QByteArray getDisplayBrightness() const;
    void setDisplayBrightness(const QByteArray &display_brightness);
    bool is_display_brightness_Set() const;
    bool is_display_brightness_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    bool isFixCableLockEnable() const;
    void setFixCableLockEnable(const bool &fix_cable_lock_enable);
    bool is_fix_cable_lock_enable_Set() const;
    bool is_fix_cable_lock_enable_Valid() const;

    QString getIdleImageUrl() const;
    void setIdleImageUrl(const QString &idle_image_url);
    bool is_idle_image_url_Set() const;
    bool is_idle_image_url_Valid() const;

    QString getInternalIp() const;
    void setInternalIp(const QString &internal_ip);
    bool is_internal_ip_Set() const;
    bool is_internal_ip_Valid() const;

    QString getLoadmanagementGroupId() const;
    void setLoadmanagementGroupId(const QString &loadmanagement_group_id);
    bool is_loadmanagement_group_id_Set() const;
    bool is_loadmanagement_group_id_Valid() const;

    qint32 getMaxCurrent() const;
    void setMaxCurrent(const qint32 &max_current);
    bool is_max_current_Set() const;
    bool is_max_current_Valid() const;

    qint32 getMinCurrent() const;
    void setMinCurrent(const qint32 &min_current);
    bool is_min_current_Set() const;
    bool is_min_current_Valid() const;

    bool isModbusTcp() const;
    void setModbusTcp(const bool &modbus_tcp);
    bool is_modbus_tcp_Set() const;
    bool is_modbus_tcp_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authentication_type;
    bool m_authentication_type_isSet;
    bool m_authentication_type_isValid;

    bool m_car_id_detection;
    bool m_car_id_detection_isSet;
    bool m_car_id_detection_isValid;

    QByteArray m_display_brightness;
    bool m_display_brightness_isSet;
    bool m_display_brightness_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    bool m_fix_cable_lock_enable;
    bool m_fix_cable_lock_enable_isSet;
    bool m_fix_cable_lock_enable_isValid;

    QString m_idle_image_url;
    bool m_idle_image_url_isSet;
    bool m_idle_image_url_isValid;

    QString m_internal_ip;
    bool m_internal_ip_isSet;
    bool m_internal_ip_isValid;

    QString m_loadmanagement_group_id;
    bool m_loadmanagement_group_id_isSet;
    bool m_loadmanagement_group_id_isValid;

    qint32 m_max_current;
    bool m_max_current_isSet;
    bool m_max_current_isValid;

    qint32 m_min_current;
    bool m_min_current_isSet;
    bool m_min_current_isValid;

    bool m_modbus_tcp;
    bool m_modbus_tcp_isSet;
    bool m_modbus_tcp_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPicoSettingsDto)

#endif // OAIPicoSettingsDto_H
