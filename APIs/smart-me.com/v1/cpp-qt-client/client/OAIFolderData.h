/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFolderData.h
 *
 * Container class for the folder API
 */

#ifndef OAIFolderData_H
#define OAIFolderData_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFolderData : public OAIObject {
public:
    OAIFolderData();
    OAIFolderData(QString json);
    ~OAIFolderData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getElectricityCounterValue() const;
    void setElectricityCounterValue(const double &electricity_counter_value);
    bool is_electricity_counter_value_Set() const;
    bool is_electricity_counter_value_Valid() const;

    double getElectricityPower() const;
    void setElectricityPower(const double &electricity_power);
    bool is_electricity_power_Set() const;
    bool is_electricity_power_Valid() const;

    double getGasCounterValue() const;
    void setGasCounterValue(const double &gas_counter_value);
    bool is_gas_counter_value_Set() const;
    bool is_gas_counter_value_Valid() const;

    double getGasFlowRate() const;
    void setGasFlowRate(const double &gas_flow_rate);
    bool is_gas_flow_rate_Set() const;
    bool is_gas_flow_rate_Valid() const;

    double getHeatCounterValue() const;
    void setHeatCounterValue(const double &heat_counter_value);
    bool is_heat_counter_value_Set() const;
    bool is_heat_counter_value_Valid() const;

    double getHeatPower() const;
    void setHeatPower(const double &heat_power);
    bool is_heat_power_Set() const;
    bool is_heat_power_Valid() const;

    double getWaterCounterValue() const;
    void setWaterCounterValue(const double &water_counter_value);
    bool is_water_counter_value_Set() const;
    bool is_water_counter_value_Valid() const;

    double getWaterFlowRate() const;
    void setWaterFlowRate(const double &water_flow_rate);
    bool is_water_flow_rate_Set() const;
    bool is_water_flow_rate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_electricity_counter_value;
    bool m_electricity_counter_value_isSet;
    bool m_electricity_counter_value_isValid;

    double m_electricity_power;
    bool m_electricity_power_isSet;
    bool m_electricity_power_isValid;

    double m_gas_counter_value;
    bool m_gas_counter_value_isSet;
    bool m_gas_counter_value_isValid;

    double m_gas_flow_rate;
    bool m_gas_flow_rate_isSet;
    bool m_gas_flow_rate_isValid;

    double m_heat_counter_value;
    bool m_heat_counter_value_isSet;
    bool m_heat_counter_value_isValid;

    double m_heat_power;
    bool m_heat_power_isSet;
    bool m_heat_power_isValid;

    double m_water_counter_value;
    bool m_water_counter_value_isSet;
    bool m_water_counter_value_isValid;

    double m_water_flow_rate;
    bool m_water_flow_rate_isSet;
    bool m_water_flow_rate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFolderData)

#endif // OAIFolderData_H
