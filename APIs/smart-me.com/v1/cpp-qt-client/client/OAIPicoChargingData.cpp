/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPicoChargingData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPicoChargingData::OAIPicoChargingData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPicoChargingData::OAIPicoChargingData() {
    this->initializeModel();
}

OAIPicoChargingData::~OAIPicoChargingData() {}

void OAIPicoChargingData::initializeModel() {

    m_active_charging_energy_isSet = false;
    m_active_charging_energy_isValid = false;

    m_active_charging_power_isSet = false;
    m_active_charging_power_isValid = false;

    m_connection_mode_isSet = false;
    m_connection_mode_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_last_warning_or_error_isSet = false;
    m_last_warning_or_error_isValid = false;

    m_last_warning_or_error_message_isSet = false;
    m_last_warning_or_error_message_isValid = false;

    m_last_warning_or_error_time_isSet = false;
    m_last_warning_or_error_time_isValid = false;

    m_load_shedding_state_isSet = false;
    m_load_shedding_state_isValid = false;

    m_loadmanagement_group_name_isSet = false;
    m_loadmanagement_group_name_isValid = false;

    m_max_allowed_charging_current_isSet = false;
    m_max_allowed_charging_current_isValid = false;

    m_max_dynamic_current_isSet = false;
    m_max_dynamic_current_isValid = false;

    m_max_loadmanagement_group_current_isSet = false;
    m_max_loadmanagement_group_current_isValid = false;

    m_max_station_current_isSet = false;
    m_max_station_current_isValid = false;

    m_min_station_current_isSet = false;
    m_min_station_current_isValid = false;

    m_rssi_isSet = false;
    m_rssi_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;
}

void OAIPicoChargingData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPicoChargingData::fromJsonObject(QJsonObject json) {

    m_active_charging_energy_isValid = ::OpenAPI::fromJsonValue(m_active_charging_energy, json[QString("ActiveChargingEnergy")]);
    m_active_charging_energy_isSet = !json[QString("ActiveChargingEnergy")].isNull() && m_active_charging_energy_isValid;

    m_active_charging_power_isValid = ::OpenAPI::fromJsonValue(m_active_charging_power, json[QString("ActiveChargingPower")]);
    m_active_charging_power_isSet = !json[QString("ActiveChargingPower")].isNull() && m_active_charging_power_isValid;

    m_connection_mode_isValid = ::OpenAPI::fromJsonValue(m_connection_mode, json[QString("ConnectionMode")]);
    m_connection_mode_isSet = !json[QString("ConnectionMode")].isNull() && m_connection_mode_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_last_warning_or_error_isValid = ::OpenAPI::fromJsonValue(m_last_warning_or_error, json[QString("LastWarningOrError")]);
    m_last_warning_or_error_isSet = !json[QString("LastWarningOrError")].isNull() && m_last_warning_or_error_isValid;

    m_last_warning_or_error_message_isValid = ::OpenAPI::fromJsonValue(m_last_warning_or_error_message, json[QString("LastWarningOrErrorMessage")]);
    m_last_warning_or_error_message_isSet = !json[QString("LastWarningOrErrorMessage")].isNull() && m_last_warning_or_error_message_isValid;

    m_last_warning_or_error_time_isValid = ::OpenAPI::fromJsonValue(m_last_warning_or_error_time, json[QString("LastWarningOrErrorTime")]);
    m_last_warning_or_error_time_isSet = !json[QString("LastWarningOrErrorTime")].isNull() && m_last_warning_or_error_time_isValid;

    m_load_shedding_state_isValid = ::OpenAPI::fromJsonValue(m_load_shedding_state, json[QString("LoadSheddingState")]);
    m_load_shedding_state_isSet = !json[QString("LoadSheddingState")].isNull() && m_load_shedding_state_isValid;

    m_loadmanagement_group_name_isValid = ::OpenAPI::fromJsonValue(m_loadmanagement_group_name, json[QString("LoadmanagementGroupName")]);
    m_loadmanagement_group_name_isSet = !json[QString("LoadmanagementGroupName")].isNull() && m_loadmanagement_group_name_isValid;

    m_max_allowed_charging_current_isValid = ::OpenAPI::fromJsonValue(m_max_allowed_charging_current, json[QString("MaxAllowedChargingCurrent")]);
    m_max_allowed_charging_current_isSet = !json[QString("MaxAllowedChargingCurrent")].isNull() && m_max_allowed_charging_current_isValid;

    m_max_dynamic_current_isValid = ::OpenAPI::fromJsonValue(m_max_dynamic_current, json[QString("MaxDynamicCurrent")]);
    m_max_dynamic_current_isSet = !json[QString("MaxDynamicCurrent")].isNull() && m_max_dynamic_current_isValid;

    m_max_loadmanagement_group_current_isValid = ::OpenAPI::fromJsonValue(m_max_loadmanagement_group_current, json[QString("MaxLoadmanagementGroupCurrent")]);
    m_max_loadmanagement_group_current_isSet = !json[QString("MaxLoadmanagementGroupCurrent")].isNull() && m_max_loadmanagement_group_current_isValid;

    m_max_station_current_isValid = ::OpenAPI::fromJsonValue(m_max_station_current, json[QString("MaxStationCurrent")]);
    m_max_station_current_isSet = !json[QString("MaxStationCurrent")].isNull() && m_max_station_current_isValid;

    m_min_station_current_isValid = ::OpenAPI::fromJsonValue(m_min_station_current, json[QString("MinStationCurrent")]);
    m_min_station_current_isSet = !json[QString("MinStationCurrent")].isNull() && m_min_station_current_isValid;

    m_rssi_isValid = ::OpenAPI::fromJsonValue(m_rssi, json[QString("RSSI")]);
    m_rssi_isSet = !json[QString("RSSI")].isNull() && m_rssi_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("ValueDate")]);
    m_value_date_isSet = !json[QString("ValueDate")].isNull() && m_value_date_isValid;
}

QString OAIPicoChargingData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPicoChargingData::asJsonObject() const {
    QJsonObject obj;
    if (m_active_charging_energy_isSet) {
        obj.insert(QString("ActiveChargingEnergy"), ::OpenAPI::toJsonValue(m_active_charging_energy));
    }
    if (m_active_charging_power_isSet) {
        obj.insert(QString("ActiveChargingPower"), ::OpenAPI::toJsonValue(m_active_charging_power));
    }
    if (m_connection_mode_isSet) {
        obj.insert(QString("ConnectionMode"), ::OpenAPI::toJsonValue(m_connection_mode));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_last_warning_or_error_isSet) {
        obj.insert(QString("LastWarningOrError"), ::OpenAPI::toJsonValue(m_last_warning_or_error));
    }
    if (m_last_warning_or_error_message_isSet) {
        obj.insert(QString("LastWarningOrErrorMessage"), ::OpenAPI::toJsonValue(m_last_warning_or_error_message));
    }
    if (m_last_warning_or_error_time_isSet) {
        obj.insert(QString("LastWarningOrErrorTime"), ::OpenAPI::toJsonValue(m_last_warning_or_error_time));
    }
    if (m_load_shedding_state_isSet) {
        obj.insert(QString("LoadSheddingState"), ::OpenAPI::toJsonValue(m_load_shedding_state));
    }
    if (m_loadmanagement_group_name_isSet) {
        obj.insert(QString("LoadmanagementGroupName"), ::OpenAPI::toJsonValue(m_loadmanagement_group_name));
    }
    if (m_max_allowed_charging_current_isSet) {
        obj.insert(QString("MaxAllowedChargingCurrent"), ::OpenAPI::toJsonValue(m_max_allowed_charging_current));
    }
    if (m_max_dynamic_current_isSet) {
        obj.insert(QString("MaxDynamicCurrent"), ::OpenAPI::toJsonValue(m_max_dynamic_current));
    }
    if (m_max_loadmanagement_group_current_isSet) {
        obj.insert(QString("MaxLoadmanagementGroupCurrent"), ::OpenAPI::toJsonValue(m_max_loadmanagement_group_current));
    }
    if (m_max_station_current_isSet) {
        obj.insert(QString("MaxStationCurrent"), ::OpenAPI::toJsonValue(m_max_station_current));
    }
    if (m_min_station_current_isSet) {
        obj.insert(QString("MinStationCurrent"), ::OpenAPI::toJsonValue(m_min_station_current));
    }
    if (m_rssi_isSet) {
        obj.insert(QString("RSSI"), ::OpenAPI::toJsonValue(m_rssi));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("ValueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    return obj;
}

double OAIPicoChargingData::getActiveChargingEnergy() const {
    return m_active_charging_energy;
}
void OAIPicoChargingData::setActiveChargingEnergy(const double &active_charging_energy) {
    m_active_charging_energy = active_charging_energy;
    m_active_charging_energy_isSet = true;
}

bool OAIPicoChargingData::is_active_charging_energy_Set() const{
    return m_active_charging_energy_isSet;
}

bool OAIPicoChargingData::is_active_charging_energy_Valid() const{
    return m_active_charging_energy_isValid;
}

double OAIPicoChargingData::getActiveChargingPower() const {
    return m_active_charging_power;
}
void OAIPicoChargingData::setActiveChargingPower(const double &active_charging_power) {
    m_active_charging_power = active_charging_power;
    m_active_charging_power_isSet = true;
}

bool OAIPicoChargingData::is_active_charging_power_Set() const{
    return m_active_charging_power_isSet;
}

bool OAIPicoChargingData::is_active_charging_power_Valid() const{
    return m_active_charging_power_isValid;
}

QString OAIPicoChargingData::getConnectionMode() const {
    return m_connection_mode;
}
void OAIPicoChargingData::setConnectionMode(const QString &connection_mode) {
    m_connection_mode = connection_mode;
    m_connection_mode_isSet = true;
}

bool OAIPicoChargingData::is_connection_mode_Set() const{
    return m_connection_mode_isSet;
}

bool OAIPicoChargingData::is_connection_mode_Valid() const{
    return m_connection_mode_isValid;
}

qint32 OAIPicoChargingData::getDuration() const {
    return m_duration;
}
void OAIPicoChargingData::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPicoChargingData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPicoChargingData::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIPicoChargingData::getLastWarningOrError() const {
    return m_last_warning_or_error;
}
void OAIPicoChargingData::setLastWarningOrError(const QString &last_warning_or_error) {
    m_last_warning_or_error = last_warning_or_error;
    m_last_warning_or_error_isSet = true;
}

bool OAIPicoChargingData::is_last_warning_or_error_Set() const{
    return m_last_warning_or_error_isSet;
}

bool OAIPicoChargingData::is_last_warning_or_error_Valid() const{
    return m_last_warning_or_error_isValid;
}

QString OAIPicoChargingData::getLastWarningOrErrorMessage() const {
    return m_last_warning_or_error_message;
}
void OAIPicoChargingData::setLastWarningOrErrorMessage(const QString &last_warning_or_error_message) {
    m_last_warning_or_error_message = last_warning_or_error_message;
    m_last_warning_or_error_message_isSet = true;
}

bool OAIPicoChargingData::is_last_warning_or_error_message_Set() const{
    return m_last_warning_or_error_message_isSet;
}

bool OAIPicoChargingData::is_last_warning_or_error_message_Valid() const{
    return m_last_warning_or_error_message_isValid;
}

QDateTime OAIPicoChargingData::getLastWarningOrErrorTime() const {
    return m_last_warning_or_error_time;
}
void OAIPicoChargingData::setLastWarningOrErrorTime(const QDateTime &last_warning_or_error_time) {
    m_last_warning_or_error_time = last_warning_or_error_time;
    m_last_warning_or_error_time_isSet = true;
}

bool OAIPicoChargingData::is_last_warning_or_error_time_Set() const{
    return m_last_warning_or_error_time_isSet;
}

bool OAIPicoChargingData::is_last_warning_or_error_time_Valid() const{
    return m_last_warning_or_error_time_isValid;
}

QString OAIPicoChargingData::getLoadSheddingState() const {
    return m_load_shedding_state;
}
void OAIPicoChargingData::setLoadSheddingState(const QString &load_shedding_state) {
    m_load_shedding_state = load_shedding_state;
    m_load_shedding_state_isSet = true;
}

bool OAIPicoChargingData::is_load_shedding_state_Set() const{
    return m_load_shedding_state_isSet;
}

bool OAIPicoChargingData::is_load_shedding_state_Valid() const{
    return m_load_shedding_state_isValid;
}

QString OAIPicoChargingData::getLoadmanagementGroupName() const {
    return m_loadmanagement_group_name;
}
void OAIPicoChargingData::setLoadmanagementGroupName(const QString &loadmanagement_group_name) {
    m_loadmanagement_group_name = loadmanagement_group_name;
    m_loadmanagement_group_name_isSet = true;
}

bool OAIPicoChargingData::is_loadmanagement_group_name_Set() const{
    return m_loadmanagement_group_name_isSet;
}

bool OAIPicoChargingData::is_loadmanagement_group_name_Valid() const{
    return m_loadmanagement_group_name_isValid;
}

qint32 OAIPicoChargingData::getMaxAllowedChargingCurrent() const {
    return m_max_allowed_charging_current;
}
void OAIPicoChargingData::setMaxAllowedChargingCurrent(const qint32 &max_allowed_charging_current) {
    m_max_allowed_charging_current = max_allowed_charging_current;
    m_max_allowed_charging_current_isSet = true;
}

bool OAIPicoChargingData::is_max_allowed_charging_current_Set() const{
    return m_max_allowed_charging_current_isSet;
}

bool OAIPicoChargingData::is_max_allowed_charging_current_Valid() const{
    return m_max_allowed_charging_current_isValid;
}

qint32 OAIPicoChargingData::getMaxDynamicCurrent() const {
    return m_max_dynamic_current;
}
void OAIPicoChargingData::setMaxDynamicCurrent(const qint32 &max_dynamic_current) {
    m_max_dynamic_current = max_dynamic_current;
    m_max_dynamic_current_isSet = true;
}

bool OAIPicoChargingData::is_max_dynamic_current_Set() const{
    return m_max_dynamic_current_isSet;
}

bool OAIPicoChargingData::is_max_dynamic_current_Valid() const{
    return m_max_dynamic_current_isValid;
}

qint32 OAIPicoChargingData::getMaxLoadmanagementGroupCurrent() const {
    return m_max_loadmanagement_group_current;
}
void OAIPicoChargingData::setMaxLoadmanagementGroupCurrent(const qint32 &max_loadmanagement_group_current) {
    m_max_loadmanagement_group_current = max_loadmanagement_group_current;
    m_max_loadmanagement_group_current_isSet = true;
}

bool OAIPicoChargingData::is_max_loadmanagement_group_current_Set() const{
    return m_max_loadmanagement_group_current_isSet;
}

bool OAIPicoChargingData::is_max_loadmanagement_group_current_Valid() const{
    return m_max_loadmanagement_group_current_isValid;
}

qint32 OAIPicoChargingData::getMaxStationCurrent() const {
    return m_max_station_current;
}
void OAIPicoChargingData::setMaxStationCurrent(const qint32 &max_station_current) {
    m_max_station_current = max_station_current;
    m_max_station_current_isSet = true;
}

bool OAIPicoChargingData::is_max_station_current_Set() const{
    return m_max_station_current_isSet;
}

bool OAIPicoChargingData::is_max_station_current_Valid() const{
    return m_max_station_current_isValid;
}

qint32 OAIPicoChargingData::getMinStationCurrent() const {
    return m_min_station_current;
}
void OAIPicoChargingData::setMinStationCurrent(const qint32 &min_station_current) {
    m_min_station_current = min_station_current;
    m_min_station_current_isSet = true;
}

bool OAIPicoChargingData::is_min_station_current_Set() const{
    return m_min_station_current_isSet;
}

bool OAIPicoChargingData::is_min_station_current_Valid() const{
    return m_min_station_current_isValid;
}

qint32 OAIPicoChargingData::getRssi() const {
    return m_rssi;
}
void OAIPicoChargingData::setRssi(const qint32 &rssi) {
    m_rssi = rssi;
    m_rssi_isSet = true;
}

bool OAIPicoChargingData::is_rssi_Set() const{
    return m_rssi_isSet;
}

bool OAIPicoChargingData::is_rssi_Valid() const{
    return m_rssi_isValid;
}

QString OAIPicoChargingData::getState() const {
    return m_state;
}
void OAIPicoChargingData::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPicoChargingData::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPicoChargingData::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIPicoChargingData::getValueDate() const {
    return m_value_date;
}
void OAIPicoChargingData::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAIPicoChargingData::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAIPicoChargingData::is_value_date_Valid() const{
    return m_value_date_isValid;
}

bool OAIPicoChargingData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_charging_energy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_charging_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_warning_or_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_warning_or_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_warning_or_error_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_shedding_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loadmanagement_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_allowed_charging_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dynamic_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_loadmanagement_group_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_station_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_station_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rssi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPicoChargingData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
