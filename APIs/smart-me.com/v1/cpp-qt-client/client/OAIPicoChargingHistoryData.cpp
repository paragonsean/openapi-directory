/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPicoChargingHistoryData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPicoChargingHistoryData::OAIPicoChargingHistoryData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPicoChargingHistoryData::OAIPicoChargingHistoryData() {
    this->initializeModel();
}

OAIPicoChargingHistoryData::~OAIPicoChargingHistoryData() {}

void OAIPicoChargingHistoryData::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_energy_used_isSet = false;
    m_energy_used_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_transaction_stop_reason_isSet = false;
    m_transaction_stop_reason_isValid = false;
}

void OAIPicoChargingHistoryData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPicoChargingHistoryData::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_energy_used_isValid = ::OpenAPI::fromJsonValue(m_energy_used, json[QString("EnergyUsed")]);
    m_energy_used_isSet = !json[QString("EnergyUsed")].isNull() && m_energy_used_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_transaction_stop_reason_isValid = ::OpenAPI::fromJsonValue(m_transaction_stop_reason, json[QString("TransactionStopReason")]);
    m_transaction_stop_reason_isSet = !json[QString("TransactionStopReason")].isNull() && m_transaction_stop_reason_isValid;
}

QString OAIPicoChargingHistoryData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPicoChargingHistoryData::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_energy_used_isSet) {
        obj.insert(QString("EnergyUsed"), ::OpenAPI::toJsonValue(m_energy_used));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_transaction_stop_reason_isSet) {
        obj.insert(QString("TransactionStopReason"), ::OpenAPI::toJsonValue(m_transaction_stop_reason));
    }
    return obj;
}

qint32 OAIPicoChargingHistoryData::getDuration() const {
    return m_duration;
}
void OAIPicoChargingHistoryData::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPicoChargingHistoryData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPicoChargingHistoryData::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIPicoChargingHistoryData::getEnergyUsed() const {
    return m_energy_used;
}
void OAIPicoChargingHistoryData::setEnergyUsed(const double &energy_used) {
    m_energy_used = energy_used;
    m_energy_used_isSet = true;
}

bool OAIPicoChargingHistoryData::is_energy_used_Set() const{
    return m_energy_used_isSet;
}

bool OAIPicoChargingHistoryData::is_energy_used_Valid() const{
    return m_energy_used_isValid;
}

QDateTime OAIPicoChargingHistoryData::getStartTime() const {
    return m_start_time;
}
void OAIPicoChargingHistoryData::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPicoChargingHistoryData::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPicoChargingHistoryData::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIPicoChargingHistoryData::getTransactionStopReason() const {
    return m_transaction_stop_reason;
}
void OAIPicoChargingHistoryData::setTransactionStopReason(const QString &transaction_stop_reason) {
    m_transaction_stop_reason = transaction_stop_reason;
    m_transaction_stop_reason_isSet = true;
}

bool OAIPicoChargingHistoryData::is_transaction_stop_reason_Set() const{
    return m_transaction_stop_reason_isSet;
}

bool OAIPicoChargingHistoryData::is_transaction_stop_reason_Valid() const{
    return m_transaction_stop_reason_isValid;
}

bool OAIPicoChargingHistoryData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_energy_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_stop_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPicoChargingHistoryData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
