/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoExportSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoExportSettings::OAIAutoExportSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoExportSettings::OAIAutoExportSettings() {
    this->initializeModel();
}

OAIAutoExportSettings::~OAIAutoExportSettings() {}

void OAIAutoExportSettings::initializeModel() {

    m_export_format_isSet = false;
    m_export_format_isValid = false;

    m_export_interval_isSet = false;
    m_export_interval_isValid = false;

    m_meter_point_id_isSet = false;
    m_meter_point_id_isValid = false;

    m_upload_type_isSet = false;
    m_upload_type_isValid = false;
}

void OAIAutoExportSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoExportSettings::fromJsonObject(QJsonObject json) {

    m_export_format_isValid = ::OpenAPI::fromJsonValue(m_export_format, json[QString("ExportFormat")]);
    m_export_format_isSet = !json[QString("ExportFormat")].isNull() && m_export_format_isValid;

    m_export_interval_isValid = ::OpenAPI::fromJsonValue(m_export_interval, json[QString("ExportInterval")]);
    m_export_interval_isSet = !json[QString("ExportInterval")].isNull() && m_export_interval_isValid;

    m_meter_point_id_isValid = ::OpenAPI::fromJsonValue(m_meter_point_id, json[QString("MeterPointId")]);
    m_meter_point_id_isSet = !json[QString("MeterPointId")].isNull() && m_meter_point_id_isValid;

    m_upload_type_isValid = ::OpenAPI::fromJsonValue(m_upload_type, json[QString("UploadType")]);
    m_upload_type_isSet = !json[QString("UploadType")].isNull() && m_upload_type_isValid;
}

QString OAIAutoExportSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoExportSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_export_format_isSet) {
        obj.insert(QString("ExportFormat"), ::OpenAPI::toJsonValue(m_export_format));
    }
    if (m_export_interval_isSet) {
        obj.insert(QString("ExportInterval"), ::OpenAPI::toJsonValue(m_export_interval));
    }
    if (m_meter_point_id_isSet) {
        obj.insert(QString("MeterPointId"), ::OpenAPI::toJsonValue(m_meter_point_id));
    }
    if (m_upload_type_isSet) {
        obj.insert(QString("UploadType"), ::OpenAPI::toJsonValue(m_upload_type));
    }
    return obj;
}

QString OAIAutoExportSettings::getExportFormat() const {
    return m_export_format;
}
void OAIAutoExportSettings::setExportFormat(const QString &export_format) {
    m_export_format = export_format;
    m_export_format_isSet = true;
}

bool OAIAutoExportSettings::is_export_format_Set() const{
    return m_export_format_isSet;
}

bool OAIAutoExportSettings::is_export_format_Valid() const{
    return m_export_format_isValid;
}

QString OAIAutoExportSettings::getExportInterval() const {
    return m_export_interval;
}
void OAIAutoExportSettings::setExportInterval(const QString &export_interval) {
    m_export_interval = export_interval;
    m_export_interval_isSet = true;
}

bool OAIAutoExportSettings::is_export_interval_Set() const{
    return m_export_interval_isSet;
}

bool OAIAutoExportSettings::is_export_interval_Valid() const{
    return m_export_interval_isValid;
}

QString OAIAutoExportSettings::getMeterPointId() const {
    return m_meter_point_id;
}
void OAIAutoExportSettings::setMeterPointId(const QString &meter_point_id) {
    m_meter_point_id = meter_point_id;
    m_meter_point_id_isSet = true;
}

bool OAIAutoExportSettings::is_meter_point_id_Set() const{
    return m_meter_point_id_isSet;
}

bool OAIAutoExportSettings::is_meter_point_id_Valid() const{
    return m_meter_point_id_isValid;
}

QString OAIAutoExportSettings::getUploadType() const {
    return m_upload_type;
}
void OAIAutoExportSettings::setUploadType(const QString &upload_type) {
    m_upload_type = upload_type;
    m_upload_type_isSet = true;
}

bool OAIAutoExportSettings::is_upload_type_Set() const{
    return m_upload_type_isSet;
}

bool OAIAutoExportSettings::is_upload_type_Valid() const{
    return m_upload_type_isValid;
}

bool OAIAutoExportSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoExportSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
