/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterRealtimeApiData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterRealtimeApiData::OAIRegisterRealtimeApiData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterRealtimeApiData::OAIRegisterRealtimeApiData() {
    this->initializeModel();
}

OAIRegisterRealtimeApiData::~OAIRegisterRealtimeApiData() {}

void OAIRegisterRealtimeApiData::initializeModel() {

    m_api_url_isSet = false;
    m_api_url_isValid = false;

    m_basic_auth_password_isSet = false;
    m_basic_auth_password_isValid = false;

    m_basic_auth_username_isSet = false;
    m_basic_auth_username_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_registration_type_isSet = false;
    m_registration_type_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIRegisterRealtimeApiData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterRealtimeApiData::fromJsonObject(QJsonObject json) {

    m_api_url_isValid = ::OpenAPI::fromJsonValue(m_api_url, json[QString("ApiUrl")]);
    m_api_url_isSet = !json[QString("ApiUrl")].isNull() && m_api_url_isValid;

    m_basic_auth_password_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_password, json[QString("BasicAuthPassword")]);
    m_basic_auth_password_isSet = !json[QString("BasicAuthPassword")].isNull() && m_basic_auth_password_isValid;

    m_basic_auth_username_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_username, json[QString("BasicAuthUsername")]);
    m_basic_auth_username_isSet = !json[QString("BasicAuthUsername")].isNull() && m_basic_auth_username_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("MeterId")]);
    m_meter_id_isSet = !json[QString("MeterId")].isNull() && m_meter_id_isValid;

    m_registration_type_isValid = ::OpenAPI::fromJsonValue(m_registration_type, json[QString("RegistrationType")]);
    m_registration_type_isSet = !json[QString("RegistrationType")].isNull() && m_registration_type_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIRegisterRealtimeApiData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterRealtimeApiData::asJsonObject() const {
    QJsonObject obj;
    if (m_api_url_isSet) {
        obj.insert(QString("ApiUrl"), ::OpenAPI::toJsonValue(m_api_url));
    }
    if (m_basic_auth_password_isSet) {
        obj.insert(QString("BasicAuthPassword"), ::OpenAPI::toJsonValue(m_basic_auth_password));
    }
    if (m_basic_auth_username_isSet) {
        obj.insert(QString("BasicAuthUsername"), ::OpenAPI::toJsonValue(m_basic_auth_username));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("MeterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_registration_type_isSet) {
        obj.insert(QString("RegistrationType"), ::OpenAPI::toJsonValue(m_registration_type));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIRegisterRealtimeApiData::getApiUrl() const {
    return m_api_url;
}
void OAIRegisterRealtimeApiData::setApiUrl(const QString &api_url) {
    m_api_url = api_url;
    m_api_url_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_api_url_Set() const{
    return m_api_url_isSet;
}

bool OAIRegisterRealtimeApiData::is_api_url_Valid() const{
    return m_api_url_isValid;
}

QString OAIRegisterRealtimeApiData::getBasicAuthPassword() const {
    return m_basic_auth_password;
}
void OAIRegisterRealtimeApiData::setBasicAuthPassword(const QString &basic_auth_password) {
    m_basic_auth_password = basic_auth_password;
    m_basic_auth_password_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_basic_auth_password_Set() const{
    return m_basic_auth_password_isSet;
}

bool OAIRegisterRealtimeApiData::is_basic_auth_password_Valid() const{
    return m_basic_auth_password_isValid;
}

QString OAIRegisterRealtimeApiData::getBasicAuthUsername() const {
    return m_basic_auth_username;
}
void OAIRegisterRealtimeApiData::setBasicAuthUsername(const QString &basic_auth_username) {
    m_basic_auth_username = basic_auth_username;
    m_basic_auth_username_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_basic_auth_username_Set() const{
    return m_basic_auth_username_isSet;
}

bool OAIRegisterRealtimeApiData::is_basic_auth_username_Valid() const{
    return m_basic_auth_username_isValid;
}

QString OAIRegisterRealtimeApiData::getId() const {
    return m_id;
}
void OAIRegisterRealtimeApiData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRegisterRealtimeApiData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRegisterRealtimeApiData::getMeterId() const {
    return m_meter_id;
}
void OAIRegisterRealtimeApiData::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIRegisterRealtimeApiData::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIRegisterRealtimeApiData::getRegistrationType() const {
    return m_registration_type;
}
void OAIRegisterRealtimeApiData::setRegistrationType(const QString &registration_type) {
    m_registration_type = registration_type;
    m_registration_type_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_registration_type_Set() const{
    return m_registration_type_isSet;
}

bool OAIRegisterRealtimeApiData::is_registration_type_Valid() const{
    return m_registration_type_isValid;
}

QString OAIRegisterRealtimeApiData::getSerialNumber() const {
    return m_serial_number;
}
void OAIRegisterRealtimeApiData::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIRegisterRealtimeApiData::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIRegisterRealtimeApiData::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIRegisterRealtimeApiData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_auth_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basic_auth_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterRealtimeApiData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
