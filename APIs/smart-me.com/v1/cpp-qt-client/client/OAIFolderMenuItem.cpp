/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolderMenuItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolderMenuItem::OAIFolderMenuItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolderMenuItem::OAIFolderMenuItem() {
    this->initializeModel();
}

OAIFolderMenuItem::~OAIFolderMenuItem() {}

void OAIFolderMenuItem::initializeModel() {

    m_auto_export_settings_isSet = false;
    m_auto_export_settings_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_folder_type_isSet = false;
    m_folder_type_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_meter_serial_number_isSet = false;
    m_meter_serial_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIFolderMenuItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolderMenuItem::fromJsonObject(QJsonObject json) {

    m_auto_export_settings_isValid = ::OpenAPI::fromJsonValue(m_auto_export_settings, json[QString("AutoExportSettings")]);
    m_auto_export_settings_isSet = !json[QString("AutoExportSettings")].isNull() && m_auto_export_settings_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("Children")]);
    m_children_isSet = !json[QString("Children")].isNull() && m_children_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_folder_type_isValid = ::OpenAPI::fromJsonValue(m_folder_type, json[QString("FolderType")]);
    m_folder_type_isSet = !json[QString("FolderType")].isNull() && m_folder_type_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("Icon")]);
    m_icon_isSet = !json[QString("Icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_meter_serial_number_isValid = ::OpenAPI::fromJsonValue(m_meter_serial_number, json[QString("MeterSerialNumber")]);
    m_meter_serial_number_isSet = !json[QString("MeterSerialNumber")].isNull() && m_meter_serial_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;
}

QString OAIFolderMenuItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolderMenuItem::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_export_settings.isSet()) {
        obj.insert(QString("AutoExportSettings"), ::OpenAPI::toJsonValue(m_auto_export_settings));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("Children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_folder_type_isSet) {
        obj.insert(QString("FolderType"), ::OpenAPI::toJsonValue(m_folder_type));
    }
    if (m_icon_isSet) {
        obj.insert(QString("Icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meter_serial_number_isSet) {
        obj.insert(QString("MeterSerialNumber"), ::OpenAPI::toJsonValue(m_meter_serial_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIAutoExportSettings OAIFolderMenuItem::getAutoExportSettings() const {
    return m_auto_export_settings;
}
void OAIFolderMenuItem::setAutoExportSettings(const OAIAutoExportSettings &auto_export_settings) {
    m_auto_export_settings = auto_export_settings;
    m_auto_export_settings_isSet = true;
}

bool OAIFolderMenuItem::is_auto_export_settings_Set() const{
    return m_auto_export_settings_isSet;
}

bool OAIFolderMenuItem::is_auto_export_settings_Valid() const{
    return m_auto_export_settings_isValid;
}

QList<OAIFolderMenuItem> OAIFolderMenuItem::getChildren() const {
    return m_children;
}
void OAIFolderMenuItem::setChildren(const QList<OAIFolderMenuItem> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIFolderMenuItem::is_children_Set() const{
    return m_children_isSet;
}

bool OAIFolderMenuItem::is_children_Valid() const{
    return m_children_isValid;
}

QString OAIFolderMenuItem::getDescription() const {
    return m_description;
}
void OAIFolderMenuItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFolderMenuItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFolderMenuItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFolderMenuItem::getFolderType() const {
    return m_folder_type;
}
void OAIFolderMenuItem::setFolderType(const QString &folder_type) {
    m_folder_type = folder_type;
    m_folder_type_isSet = true;
}

bool OAIFolderMenuItem::is_folder_type_Set() const{
    return m_folder_type_isSet;
}

bool OAIFolderMenuItem::is_folder_type_Valid() const{
    return m_folder_type_isValid;
}

QString OAIFolderMenuItem::getIcon() const {
    return m_icon;
}
void OAIFolderMenuItem::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIFolderMenuItem::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIFolderMenuItem::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIFolderMenuItem::getId() const {
    return m_id;
}
void OAIFolderMenuItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFolderMenuItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFolderMenuItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFolderMenuItem::getMeterSerialNumber() const {
    return m_meter_serial_number;
}
void OAIFolderMenuItem::setMeterSerialNumber(const QString &meter_serial_number) {
    m_meter_serial_number = meter_serial_number;
    m_meter_serial_number_isSet = true;
}

bool OAIFolderMenuItem::is_meter_serial_number_Set() const{
    return m_meter_serial_number_isSet;
}

bool OAIFolderMenuItem::is_meter_serial_number_Valid() const{
    return m_meter_serial_number_isValid;
}

QString OAIFolderMenuItem::getName() const {
    return m_name;
}
void OAIFolderMenuItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFolderMenuItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFolderMenuItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFolderMenuItem::getUserId() const {
    return m_user_id;
}
void OAIFolderMenuItem::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIFolderMenuItem::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIFolderMenuItem::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIFolderMenuItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_export_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolderMenuItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
