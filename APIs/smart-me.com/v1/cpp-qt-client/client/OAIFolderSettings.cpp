/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolderSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolderSettings::OAIFolderSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolderSettings::OAIFolderSettings() {
    this->initializeModel();
}

OAIFolderSettings::~OAIFolderSettings() {}

void OAIFolderSettings::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_isSet = false;
    m_enable_isValid = false;

    m_folder_type_isSet = false;
    m_folder_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_useable_for_virtual_billing_meters_isSet = false;
    m_useable_for_virtual_billing_meters_isValid = false;

    m_value_correction_isSet = false;
    m_value_correction_isValid = false;

    m_value_correction_parent_folder_isSet = false;
    m_value_correction_parent_folder_isValid = false;

    m_visualization_name_isSet = false;
    m_visualization_name_isValid = false;
}

void OAIFolderSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolderSettings::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("Enable")]);
    m_enable_isSet = !json[QString("Enable")].isNull() && m_enable_isValid;

    m_folder_type_isValid = ::OpenAPI::fromJsonValue(m_folder_type, json[QString("FolderType")]);
    m_folder_type_isSet = !json[QString("FolderType")].isNull() && m_folder_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("ParentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("ParentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_useable_for_virtual_billing_meters_isValid = ::OpenAPI::fromJsonValue(m_useable_for_virtual_billing_meters, json[QString("UseableForVirtualBillingMeters")]);
    m_useable_for_virtual_billing_meters_isSet = !json[QString("UseableForVirtualBillingMeters")].isNull() && m_useable_for_virtual_billing_meters_isValid;

    m_value_correction_isValid = ::OpenAPI::fromJsonValue(m_value_correction, json[QString("ValueCorrection")]);
    m_value_correction_isSet = !json[QString("ValueCorrection")].isNull() && m_value_correction_isValid;

    m_value_correction_parent_folder_isValid = ::OpenAPI::fromJsonValue(m_value_correction_parent_folder, json[QString("ValueCorrectionParentFolder")]);
    m_value_correction_parent_folder_isSet = !json[QString("ValueCorrectionParentFolder")].isNull() && m_value_correction_parent_folder_isValid;

    m_visualization_name_isValid = ::OpenAPI::fromJsonValue(m_visualization_name, json[QString("VisualizationName")]);
    m_visualization_name_isSet = !json[QString("VisualizationName")].isNull() && m_visualization_name_isValid;
}

QString OAIFolderSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolderSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_isSet) {
        obj.insert(QString("Enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    if (m_folder_type_isSet) {
        obj.insert(QString("FolderType"), ::OpenAPI::toJsonValue(m_folder_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("ParentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_useable_for_virtual_billing_meters_isSet) {
        obj.insert(QString("UseableForVirtualBillingMeters"), ::OpenAPI::toJsonValue(m_useable_for_virtual_billing_meters));
    }
    if (m_value_correction_isSet) {
        obj.insert(QString("ValueCorrection"), ::OpenAPI::toJsonValue(m_value_correction));
    }
    if (m_value_correction_parent_folder_isSet) {
        obj.insert(QString("ValueCorrectionParentFolder"), ::OpenAPI::toJsonValue(m_value_correction_parent_folder));
    }
    if (m_visualization_name_isSet) {
        obj.insert(QString("VisualizationName"), ::OpenAPI::toJsonValue(m_visualization_name));
    }
    return obj;
}

QString OAIFolderSettings::getDescription() const {
    return m_description;
}
void OAIFolderSettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFolderSettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFolderSettings::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIFolderSettings::isEnable() const {
    return m_enable;
}
void OAIFolderSettings::setEnable(const bool &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAIFolderSettings::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAIFolderSettings::is_enable_Valid() const{
    return m_enable_isValid;
}

QString OAIFolderSettings::getFolderType() const {
    return m_folder_type;
}
void OAIFolderSettings::setFolderType(const QString &folder_type) {
    m_folder_type = folder_type;
    m_folder_type_isSet = true;
}

bool OAIFolderSettings::is_folder_type_Set() const{
    return m_folder_type_isSet;
}

bool OAIFolderSettings::is_folder_type_Valid() const{
    return m_folder_type_isValid;
}

QString OAIFolderSettings::getName() const {
    return m_name;
}
void OAIFolderSettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFolderSettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFolderSettings::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFolderSettings::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAIFolderSettings::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAIFolderSettings::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAIFolderSettings::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

qint64 OAIFolderSettings::getSerialNumber() const {
    return m_serial_number;
}
void OAIFolderSettings::setSerialNumber(const qint64 &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIFolderSettings::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIFolderSettings::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIFolderSettings::isUseableForVirtualBillingMeters() const {
    return m_useable_for_virtual_billing_meters;
}
void OAIFolderSettings::setUseableForVirtualBillingMeters(const bool &useable_for_virtual_billing_meters) {
    m_useable_for_virtual_billing_meters = useable_for_virtual_billing_meters;
    m_useable_for_virtual_billing_meters_isSet = true;
}

bool OAIFolderSettings::is_useable_for_virtual_billing_meters_Set() const{
    return m_useable_for_virtual_billing_meters_isSet;
}

bool OAIFolderSettings::is_useable_for_virtual_billing_meters_Valid() const{
    return m_useable_for_virtual_billing_meters_isValid;
}

double OAIFolderSettings::getValueCorrection() const {
    return m_value_correction;
}
void OAIFolderSettings::setValueCorrection(const double &value_correction) {
    m_value_correction = value_correction;
    m_value_correction_isSet = true;
}

bool OAIFolderSettings::is_value_correction_Set() const{
    return m_value_correction_isSet;
}

bool OAIFolderSettings::is_value_correction_Valid() const{
    return m_value_correction_isValid;
}

double OAIFolderSettings::getValueCorrectionParentFolder() const {
    return m_value_correction_parent_folder;
}
void OAIFolderSettings::setValueCorrectionParentFolder(const double &value_correction_parent_folder) {
    m_value_correction_parent_folder = value_correction_parent_folder;
    m_value_correction_parent_folder_isSet = true;
}

bool OAIFolderSettings::is_value_correction_parent_folder_Set() const{
    return m_value_correction_parent_folder_isSet;
}

bool OAIFolderSettings::is_value_correction_parent_folder_Valid() const{
    return m_value_correction_parent_folder_isValid;
}

QString OAIFolderSettings::getVisualizationName() const {
    return m_visualization_name;
}
void OAIFolderSettings::setVisualizationName(const QString &visualization_name) {
    m_visualization_name = visualization_name;
    m_visualization_name_isSet = true;
}

bool OAIFolderSettings::is_visualization_name_Set() const{
    return m_visualization_name_isSet;
}

bool OAIFolderSettings::is_visualization_name_Valid() const{
    return m_visualization_name_isValid;
}

bool OAIFolderSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_useable_for_virtual_billing_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_correction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_correction_parent_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visualization_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolderSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
