/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmartMeDeviceConfigurationContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmartMeDeviceConfigurationContainer::OAISmartMeDeviceConfigurationContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmartMeDeviceConfigurationContainer::OAISmartMeDeviceConfigurationContainer() {
    this->initializeModel();
}

OAISmartMeDeviceConfigurationContainer::~OAISmartMeDeviceConfigurationContainer() {}

void OAISmartMeDeviceConfigurationContainer::initializeModel() {

    m_device_encryption_key_isSet = false;
    m_device_encryption_key_isValid = false;

    m_device_pin_code_isSet = false;
    m_device_pin_code_isValid = false;

    m_dns_update_state_isSet = false;
    m_dns_update_state_isValid = false;

    m_enable_modbus_tcp_isSet = false;
    m_enable_modbus_tcp_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_configuration_isSet = false;
    m_input_configuration_isValid = false;

    m_output_configuration_isSet = false;
    m_output_configuration_isValid = false;

    m_show_reactive_energy_isSet = false;
    m_show_reactive_energy_isValid = false;

    m_switch_configuration_isSet = false;
    m_switch_configuration_isValid = false;

    m_upload_interval_isSet = false;
    m_upload_interval_isValid = false;
}

void OAISmartMeDeviceConfigurationContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmartMeDeviceConfigurationContainer::fromJsonObject(QJsonObject json) {

    m_device_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_device_encryption_key, json[QString("DeviceEncryptionKey")]);
    m_device_encryption_key_isSet = !json[QString("DeviceEncryptionKey")].isNull() && m_device_encryption_key_isValid;

    m_device_pin_code_isValid = ::OpenAPI::fromJsonValue(m_device_pin_code, json[QString("DevicePinCode")]);
    m_device_pin_code_isSet = !json[QString("DevicePinCode")].isNull() && m_device_pin_code_isValid;

    m_dns_update_state_isValid = ::OpenAPI::fromJsonValue(m_dns_update_state, json[QString("DnsUpdateState")]);
    m_dns_update_state_isSet = !json[QString("DnsUpdateState")].isNull() && m_dns_update_state_isValid;

    m_enable_modbus_tcp_isValid = ::OpenAPI::fromJsonValue(m_enable_modbus_tcp, json[QString("EnableModbusTcp")]);
    m_enable_modbus_tcp_isSet = !json[QString("EnableModbusTcp")].isNull() && m_enable_modbus_tcp_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_configuration, json[QString("InputConfiguration")]);
    m_input_configuration_isSet = !json[QString("InputConfiguration")].isNull() && m_input_configuration_isValid;

    m_output_configuration_isValid = ::OpenAPI::fromJsonValue(m_output_configuration, json[QString("OutputConfiguration")]);
    m_output_configuration_isSet = !json[QString("OutputConfiguration")].isNull() && m_output_configuration_isValid;

    m_show_reactive_energy_isValid = ::OpenAPI::fromJsonValue(m_show_reactive_energy, json[QString("ShowReactiveEnergy")]);
    m_show_reactive_energy_isSet = !json[QString("ShowReactiveEnergy")].isNull() && m_show_reactive_energy_isValid;

    m_switch_configuration_isValid = ::OpenAPI::fromJsonValue(m_switch_configuration, json[QString("SwitchConfiguration")]);
    m_switch_configuration_isSet = !json[QString("SwitchConfiguration")].isNull() && m_switch_configuration_isValid;

    m_upload_interval_isValid = ::OpenAPI::fromJsonValue(m_upload_interval, json[QString("UploadInterval")]);
    m_upload_interval_isSet = !json[QString("UploadInterval")].isNull() && m_upload_interval_isValid;
}

QString OAISmartMeDeviceConfigurationContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmartMeDeviceConfigurationContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_device_encryption_key_isSet) {
        obj.insert(QString("DeviceEncryptionKey"), ::OpenAPI::toJsonValue(m_device_encryption_key));
    }
    if (m_device_pin_code_isSet) {
        obj.insert(QString("DevicePinCode"), ::OpenAPI::toJsonValue(m_device_pin_code));
    }
    if (m_dns_update_state_isSet) {
        obj.insert(QString("DnsUpdateState"), ::OpenAPI::toJsonValue(m_dns_update_state));
    }
    if (m_enable_modbus_tcp_isSet) {
        obj.insert(QString("EnableModbusTcp"), ::OpenAPI::toJsonValue(m_enable_modbus_tcp));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_configuration.size() > 0) {
        obj.insert(QString("InputConfiguration"), ::OpenAPI::toJsonValue(m_input_configuration));
    }
    if (m_output_configuration.size() > 0) {
        obj.insert(QString("OutputConfiguration"), ::OpenAPI::toJsonValue(m_output_configuration));
    }
    if (m_show_reactive_energy_isSet) {
        obj.insert(QString("ShowReactiveEnergy"), ::OpenAPI::toJsonValue(m_show_reactive_energy));
    }
    if (m_switch_configuration.size() > 0) {
        obj.insert(QString("SwitchConfiguration"), ::OpenAPI::toJsonValue(m_switch_configuration));
    }
    if (m_upload_interval_isSet) {
        obj.insert(QString("UploadInterval"), ::OpenAPI::toJsonValue(m_upload_interval));
    }
    return obj;
}

QString OAISmartMeDeviceConfigurationContainer::getDeviceEncryptionKey() const {
    return m_device_encryption_key;
}
void OAISmartMeDeviceConfigurationContainer::setDeviceEncryptionKey(const QString &device_encryption_key) {
    m_device_encryption_key = device_encryption_key;
    m_device_encryption_key_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_device_encryption_key_Set() const{
    return m_device_encryption_key_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_device_encryption_key_Valid() const{
    return m_device_encryption_key_isValid;
}

QString OAISmartMeDeviceConfigurationContainer::getDevicePinCode() const {
    return m_device_pin_code;
}
void OAISmartMeDeviceConfigurationContainer::setDevicePinCode(const QString &device_pin_code) {
    m_device_pin_code = device_pin_code;
    m_device_pin_code_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_device_pin_code_Set() const{
    return m_device_pin_code_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_device_pin_code_Valid() const{
    return m_device_pin_code_isValid;
}

QString OAISmartMeDeviceConfigurationContainer::getDnsUpdateState() const {
    return m_dns_update_state;
}
void OAISmartMeDeviceConfigurationContainer::setDnsUpdateState(const QString &dns_update_state) {
    m_dns_update_state = dns_update_state;
    m_dns_update_state_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_dns_update_state_Set() const{
    return m_dns_update_state_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_dns_update_state_Valid() const{
    return m_dns_update_state_isValid;
}

bool OAISmartMeDeviceConfigurationContainer::isEnableModbusTcp() const {
    return m_enable_modbus_tcp;
}
void OAISmartMeDeviceConfigurationContainer::setEnableModbusTcp(const bool &enable_modbus_tcp) {
    m_enable_modbus_tcp = enable_modbus_tcp;
    m_enable_modbus_tcp_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_enable_modbus_tcp_Set() const{
    return m_enable_modbus_tcp_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_enable_modbus_tcp_Valid() const{
    return m_enable_modbus_tcp_isValid;
}

QString OAISmartMeDeviceConfigurationContainer::getId() const {
    return m_id;
}
void OAISmartMeDeviceConfigurationContainer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_id_Set() const{
    return m_id_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIInputConfigurationContainer> OAISmartMeDeviceConfigurationContainer::getInputConfiguration() const {
    return m_input_configuration;
}
void OAISmartMeDeviceConfigurationContainer::setInputConfiguration(const QList<OAIInputConfigurationContainer> &input_configuration) {
    m_input_configuration = input_configuration;
    m_input_configuration_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_input_configuration_Set() const{
    return m_input_configuration_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_input_configuration_Valid() const{
    return m_input_configuration_isValid;
}

QList<OAIOutputConfigurationContainer> OAISmartMeDeviceConfigurationContainer::getOutputConfiguration() const {
    return m_output_configuration;
}
void OAISmartMeDeviceConfigurationContainer::setOutputConfiguration(const QList<OAIOutputConfigurationContainer> &output_configuration) {
    m_output_configuration = output_configuration;
    m_output_configuration_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_output_configuration_Set() const{
    return m_output_configuration_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_output_configuration_Valid() const{
    return m_output_configuration_isValid;
}

bool OAISmartMeDeviceConfigurationContainer::isShowReactiveEnergy() const {
    return m_show_reactive_energy;
}
void OAISmartMeDeviceConfigurationContainer::setShowReactiveEnergy(const bool &show_reactive_energy) {
    m_show_reactive_energy = show_reactive_energy;
    m_show_reactive_energy_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_show_reactive_energy_Set() const{
    return m_show_reactive_energy_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_show_reactive_energy_Valid() const{
    return m_show_reactive_energy_isValid;
}

QList<OAISwitchConfigurationContainer> OAISmartMeDeviceConfigurationContainer::getSwitchConfiguration() const {
    return m_switch_configuration;
}
void OAISmartMeDeviceConfigurationContainer::setSwitchConfiguration(const QList<OAISwitchConfigurationContainer> &switch_configuration) {
    m_switch_configuration = switch_configuration;
    m_switch_configuration_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_switch_configuration_Set() const{
    return m_switch_configuration_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_switch_configuration_Valid() const{
    return m_switch_configuration_isValid;
}

QString OAISmartMeDeviceConfigurationContainer::getUploadInterval() const {
    return m_upload_interval;
}
void OAISmartMeDeviceConfigurationContainer::setUploadInterval(const QString &upload_interval) {
    m_upload_interval = upload_interval;
    m_upload_interval_isSet = true;
}

bool OAISmartMeDeviceConfigurationContainer::is_upload_interval_Set() const{
    return m_upload_interval_isSet;
}

bool OAISmartMeDeviceConfigurationContainer::is_upload_interval_Valid() const{
    return m_upload_interval_isValid;
}

bool OAISmartMeDeviceConfigurationContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_pin_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_update_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_modbus_tcp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_reactive_energy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmartMeDeviceConfigurationContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
