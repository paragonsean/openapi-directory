/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualTariffConsumptionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualTariffConsumptionData::OAIVirtualTariffConsumptionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualTariffConsumptionData::OAIVirtualTariffConsumptionData() {
    this->initializeModel();
}

OAIVirtualTariffConsumptionData::~OAIVirtualTariffConsumptionData() {}

void OAIVirtualTariffConsumptionData::initializeModel() {

    m_consumption_isSet = false;
    m_consumption_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_tariff_type_isSet = false;
    m_tariff_type_isValid = false;
}

void OAIVirtualTariffConsumptionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualTariffConsumptionData::fromJsonObject(QJsonObject json) {

    m_consumption_isValid = ::OpenAPI::fromJsonValue(m_consumption, json[QString("Consumption")]);
    m_consumption_isSet = !json[QString("Consumption")].isNull() && m_consumption_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_tariff_type_isValid = ::OpenAPI::fromJsonValue(m_tariff_type, json[QString("TariffType")]);
    m_tariff_type_isSet = !json[QString("TariffType")].isNull() && m_tariff_type_isValid;
}

QString OAIVirtualTariffConsumptionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualTariffConsumptionData::asJsonObject() const {
    QJsonObject obj;
    if (m_consumption_isSet) {
        obj.insert(QString("Consumption"), ::OpenAPI::toJsonValue(m_consumption));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_tariff_type_isSet) {
        obj.insert(QString("TariffType"), ::OpenAPI::toJsonValue(m_tariff_type));
    }
    return obj;
}

double OAIVirtualTariffConsumptionData::getConsumption() const {
    return m_consumption;
}
void OAIVirtualTariffConsumptionData::setConsumption(const double &consumption) {
    m_consumption = consumption;
    m_consumption_isSet = true;
}

bool OAIVirtualTariffConsumptionData::is_consumption_Set() const{
    return m_consumption_isSet;
}

bool OAIVirtualTariffConsumptionData::is_consumption_Valid() const{
    return m_consumption_isValid;
}

QString OAIVirtualTariffConsumptionData::getCurrency() const {
    return m_currency;
}
void OAIVirtualTariffConsumptionData::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIVirtualTariffConsumptionData::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIVirtualTariffConsumptionData::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIVirtualTariffConsumptionData::getName() const {
    return m_name;
}
void OAIVirtualTariffConsumptionData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualTariffConsumptionData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualTariffConsumptionData::is_name_Valid() const{
    return m_name_isValid;
}

double OAIVirtualTariffConsumptionData::getPrice() const {
    return m_price;
}
void OAIVirtualTariffConsumptionData::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIVirtualTariffConsumptionData::is_price_Set() const{
    return m_price_isSet;
}

bool OAIVirtualTariffConsumptionData::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIVirtualTariffConsumptionData::getTariffType() const {
    return m_tariff_type;
}
void OAIVirtualTariffConsumptionData::setTariffType(const QString &tariff_type) {
    m_tariff_type = tariff_type;
    m_tariff_type_isSet = true;
}

bool OAIVirtualTariffConsumptionData::is_tariff_type_Set() const{
    return m_tariff_type_isSet;
}

bool OAIVirtualTariffConsumptionData::is_tariff_type_Valid() const{
    return m_tariff_type_isValid;
}

bool OAIVirtualTariffConsumptionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tariff_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualTariffConsumptionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
