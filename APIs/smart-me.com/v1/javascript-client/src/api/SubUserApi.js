/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubUserData from '../model/SubUserData';

/**
* SubUser service.
* @module api/SubUserApi
* @version v1
*/
export default class SubUserApi {

    /**
    * Constructs a new SubUserApi. 
    * @alias module:api/SubUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subUserDelete operation.
     * @callback module:api/SubUserApi~subUserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a subuser
     * @param {String} id 
     * @param {module:api/SubUserApi~subUserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subUserDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subUserDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/SubUser/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subUserGet operation.
     * @callback module:api/SubUserApi~subUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubUserData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a sub user. The user must be assigend to the user that makes this call.
     * @param {String} id 
     * @param {module:api/SubUserApi~subUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubUserData}
     */
    subUserGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling subUserGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = SubUserData;
      return this.apiClient.callApi(
        '/api/SubUser/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subUserPost operation.
     * @callback module:api/SubUserApi~subUserPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a subuser.              To create a new user set no ID (empty)
     * @param {module:model/SubUserData} subUserData 
     * @param {module:api/SubUserApi~subUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subUserPost(subUserData, callback) {
      let postBody = subUserData;
      // verify the required parameter 'subUserData' is set
      if (subUserData === undefined || subUserData === null) {
        throw new Error("Missing the required parameter 'subUserData' when calling subUserPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/SubUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
