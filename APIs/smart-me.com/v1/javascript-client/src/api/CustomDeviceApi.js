/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomDeviceToPost from '../model/CustomDeviceToPost';

/**
* CustomDevice service.
* @module api/CustomDeviceApi
* @version v1
*/
export default class CustomDeviceApi {

    /**
    * Constructs a new CustomDeviceApi. 
    * @alias module:api/CustomDeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCustomDeviceIdGet operation.
     * @callback module:api/CustomDeviceApi~apiCustomDeviceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDeviceToPost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Custom Device by it's ID
     * Gets a Device by it's ID
     * @param {String} id The ID of the device
     * @param {module:api/CustomDeviceApi~apiCustomDeviceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDeviceToPost}
     */
    apiCustomDeviceIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCustomDeviceIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CustomDeviceToPost;
      return this.apiClient.callApi(
        '/api/CustomDevice/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customDeviceGet operation.
     * @callback module:api/CustomDeviceApi~customDeviceGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomDeviceToPost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Custom Devices
     * Gets all Devices
     * @param {module:api/CustomDeviceApi~customDeviceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomDeviceToPost>}
     */
    customDeviceGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [CustomDeviceToPost];
      return this.apiClient.callApi(
        '/api/CustomDevice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customDevicePost operation.
     * @callback module:api/CustomDeviceApi~customDevicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDeviceToPost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Custom Device or updates it's values.
     * Creates or updates a Custom Device or updates it's values.              A Custom Device can be any device that like to add some measurement values to the smart-me Cloud.              Only use a custom device for all non meters.              For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.              To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
     * @param {module:model/CustomDeviceToPost} customDeviceToPost Device object with all the data
     * @param {module:api/CustomDeviceApi~customDevicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDeviceToPost}
     */
    customDevicePost(customDeviceToPost, callback) {
      let postBody = customDeviceToPost;
      // verify the required parameter 'customDeviceToPost' is set
      if (customDeviceToPost === undefined || customDeviceToPost === null) {
        throw new Error("Missing the required parameter 'customDeviceToPost' when calling customDevicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = CustomDeviceToPost;
      return this.apiClient.callApi(
        '/api/CustomDevice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
