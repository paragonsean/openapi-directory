/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FolderMenuConfiguration from '../model/FolderMenuConfiguration';

/**
* FolderMenu service.
* @module api/FolderMenuApi
* @version v1
*/
export default class FolderMenuApi {

    /**
    * Constructs a new FolderMenuApi. 
    * @alias module:api/FolderMenuApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the folderMenuGet operation.
     * @callback module:api/FolderMenuApi~folderMenuGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FolderMenuConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the folder menu items (each item might contain child items)
     * @param {Object} opts Optional parameters
     * @param {String} [filter] (optional) Filter for the folders and meters:               all: load everything              assigned: load only folders and meters that are assigend to a folder              unassigend: load only meters that are not assigend to a folder              user: load only folder and all users assigned to this folders              subuserlist: load all subusers as a list
     * @param {module:api/FolderMenuApi~folderMenuGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FolderMenuConfiguration}
     */
    folderMenuGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = FolderMenuConfiguration;
      return this.apiClient.callApi(
        '/api/FolderMenu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the folderMenuPost operation.
     * @callback module:api/FolderMenuApi~folderMenuPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and updates the folder menu items
     * @param {module:model/FolderMenuConfiguration} folderMenuConfiguration 
     * @param {module:api/FolderMenuApi~folderMenuPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    folderMenuPost(folderMenuConfiguration, callback) {
      let postBody = folderMenuConfiguration;
      // verify the required parameter 'folderMenuConfiguration' is set
      if (folderMenuConfiguration === undefined || folderMenuConfiguration === null) {
        throw new Error("Missing the required parameter 'folderMenuConfiguration' when calling folderMenuPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/FolderMenu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
