/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegisterRealtimeApiData from '../model/RegisterRealtimeApiData';

/**
* RegisterForRealtimeApi service.
* @module api/RegisterForRealtimeApiApi
* @version v1
*/
export default class RegisterForRealtimeApiApi {

    /**
    * Constructs a new RegisterForRealtimeApiApi. 
    * @alias module:api/RegisterForRealtimeApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the registerForRealtimeApiDelete operation.
     * @callback module:api/RegisterForRealtimeApiApi~registerForRealtimeApiDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a realtime API registration.
     * Deletes a realtime API registration.
     * @param {String} id The ID of the realtime API registration
     * @param {module:api/RegisterForRealtimeApiApi~registerForRealtimeApiDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerForRealtimeApiDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling registerForRealtimeApiDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/RegisterForRealtimeApi/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerForRealtimeApiGet operation.
     * @callback module:api/RegisterForRealtimeApiApi~registerForRealtimeApiGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegisterRealtimeApiData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all registrations for the Realtime API.
     * Gets all registrations for the Realtime API.
     * @param {module:api/RegisterForRealtimeApiApi~registerForRealtimeApiGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegisterRealtimeApiData>}
     */
    registerForRealtimeApiGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [RegisterRealtimeApiData];
      return this.apiClient.callApi(
        '/api/RegisterForRealtimeApi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerForRealtimeApiPost operation.
     * @callback module:api/RegisterForRealtimeApiApi~registerForRealtimeApiPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud.               More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
     * Creates a new registration for the realtime API. The Realtime API sends you the data of the registred devices as soon as we have them on the cloud. More Information about the realtime API: https://www.smart-me.com/Description/api/realtimeapi.aspx
     * @param {module:model/RegisterRealtimeApiData} registerRealtimeApiData 
     * @param {module:api/RegisterForRealtimeApiApi~registerForRealtimeApiPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerForRealtimeApiPost(registerRealtimeApiData, callback) {
      let postBody = registerRealtimeApiData;
      // verify the required parameter 'registerRealtimeApiData' is set
      if (registerRealtimeApiData === undefined || registerRealtimeApiData === null) {
        throw new Error("Missing the required parameter 'registerRealtimeApiData' when calling registerForRealtimeApiPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/RegisterForRealtimeApi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
