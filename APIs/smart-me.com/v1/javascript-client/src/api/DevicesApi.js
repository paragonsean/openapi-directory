/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Device from '../model/Device';
import DeviceToPost from '../model/DeviceToPost';

/**
* Devices service.
* @module api/DevicesApi
* @version v1
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDevicesIdGet operation.
     * @callback module:api/DevicesApi~apiDevicesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Device by it's ID
     * Gets a Device by it's ID
     * @param {String} id The ID of the device
     * @param {module:api/DevicesApi~apiDevicesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    apiDevicesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDevicesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/api/Devices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGet operation.
     * @callback module:api/DevicesApi~devicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Devices
     * Gets all Devices
     * @param {module:api/DevicesApi~devicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    devicesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/api/Devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesPost operation.
     * @callback module:api/DevicesApi~devicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceToPost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Device or updates it's values.
     * Creates or updates a Device or updates it's values.               For a new device leave the ID empty. To create a device you have to set the DeviceEnergyType.              To update values, add the ID of the device and the values you like to set.  (See the Data Type Model for more Information)
     * @param {module:model/DeviceToPost} deviceToPost Device object with all the data
     * @param {module:api/DevicesApi~devicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceToPost}
     */
    devicesPost(deviceToPost, callback) {
      let postBody = deviceToPost;
      // verify the required parameter 'deviceToPost' is set
      if (deviceToPost === undefined || deviceToPost === null) {
        throw new Error("Missing the required parameter 'deviceToPost' when calling devicesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DeviceToPost;
      return this.apiClient.callApi(
        '/api/Devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesPut operation.
     * @callback module:api/DevicesApi~devicesPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the On/Off Switch on a device.               For new implementations please use the \"actions\" command
     * Updates the On/Off Switch on a device              For new implementations please use the \"actions\" command
     * @param {String} id The ID of the device
     * @param {Boolean} switchState The new state of the switch
     * @param {Object} opts Optional parameters
     * @param {Number} [switchNumber] The number of the switch if there are multiple (1 for L1, 3 for L3)
     * @param {module:api/DevicesApi~devicesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    devicesPut(id, switchState, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesPut");
      }
      // verify the required parameter 'switchState' is set
      if (switchState === undefined || switchState === null) {
        throw new Error("Missing the required parameter 'switchState' when calling devicesPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'switchState': switchState,
        'switchNumber': opts['switchNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/Devices/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
