/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Device from '../model/Device';

/**
* DeviceBySerial service.
* @module api/DeviceBySerialApi
* @version v1
*/
export default class DeviceBySerialApi {

    /**
    * Constructs a new DeviceBySerialApi. 
    * @alias module:api/DeviceBySerialApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceBySerialGet operation.
     * @callback module:api/DeviceBySerialApi~deviceBySerialGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Device by it's Serial Number. The Serial is the part before the \"-\".
     * Gets a Device by it's Serial Number. The Serial is the part before the \"-\".
     * @param {Number} serial The Serial Number of the device
     * @param {module:api/DeviceBySerialApi~deviceBySerialGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    deviceBySerialGet(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deviceBySerialGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'serial': serial
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/api/DeviceBySerial', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
