/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceToPost model module.
 * @module model/DeviceToPost
 * @version v1
 */
class DeviceToPost {
    /**
     * Constructs a new <code>DeviceToPost</code>.
     * Container Class for the Web API
     * @alias module:model/DeviceToPost
     */
    constructor() { 
        
        DeviceToPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceToPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceToPost} obj Optional instance to populate.
     * @return {module:model/DeviceToPost} The populated <code>DeviceToPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceToPost();

            if (data.hasOwnProperty('ActivePower')) {
                obj['ActivePower'] = ApiClient.convertToType(data['ActivePower'], 'Number');
            }
            if (data.hasOwnProperty('CounterReading')) {
                obj['CounterReading'] = ApiClient.convertToType(data['CounterReading'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExport')) {
                obj['CounterReadingExport'] = ApiClient.convertToType(data['CounterReadingExport'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT1')) {
                obj['CounterReadingExportT1'] = ApiClient.convertToType(data['CounterReadingExportT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT2')) {
                obj['CounterReadingExportT2'] = ApiClient.convertToType(data['CounterReadingExportT2'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT1')) {
                obj['CounterReadingT1'] = ApiClient.convertToType(data['CounterReadingT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT2')) {
                obj['CounterReadingT2'] = ApiClient.convertToType(data['CounterReadingT2'], 'Number');
            }
            if (data.hasOwnProperty('Current')) {
                obj['Current'] = ApiClient.convertToType(data['Current'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL1')) {
                obj['CurrentL1'] = ApiClient.convertToType(data['CurrentL1'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL2')) {
                obj['CurrentL2'] = ApiClient.convertToType(data['CurrentL2'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL3')) {
                obj['CurrentL3'] = ApiClient.convertToType(data['CurrentL3'], 'Number');
            }
            if (data.hasOwnProperty('DeviceEnergyType')) {
                obj['DeviceEnergyType'] = ApiClient.convertToType(data['DeviceEnergyType'], 'String');
            }
            if (data.hasOwnProperty('DigitalInput1')) {
                obj['DigitalInput1'] = ApiClient.convertToType(data['DigitalInput1'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MeterSubType')) {
                obj['MeterSubType'] = ApiClient.convertToType(data['MeterSubType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PowerFactor')) {
                obj['PowerFactor'] = ApiClient.convertToType(data['PowerFactor'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL1')) {
                obj['PowerFactorL1'] = ApiClient.convertToType(data['PowerFactorL1'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL2')) {
                obj['PowerFactorL2'] = ApiClient.convertToType(data['PowerFactorL2'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL3')) {
                obj['PowerFactorL3'] = ApiClient.convertToType(data['PowerFactorL3'], 'Number');
            }
            if (data.hasOwnProperty('Serial')) {
                obj['Serial'] = ApiClient.convertToType(data['Serial'], 'Number');
            }
            if (data.hasOwnProperty('Temperature')) {
                obj['Temperature'] = ApiClient.convertToType(data['Temperature'], 'Number');
            }
            if (data.hasOwnProperty('ValueDate')) {
                obj['ValueDate'] = ApiClient.convertToType(data['ValueDate'], 'Date');
            }
            if (data.hasOwnProperty('Voltage')) {
                obj['Voltage'] = ApiClient.convertToType(data['Voltage'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL1')) {
                obj['VoltageL1'] = ApiClient.convertToType(data['VoltageL1'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL2')) {
                obj['VoltageL2'] = ApiClient.convertToType(data['VoltageL2'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL3')) {
                obj['VoltageL3'] = ApiClient.convertToType(data['VoltageL3'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceToPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceToPost</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DeviceEnergyType'] && !(typeof data['DeviceEnergyType'] === 'string' || data['DeviceEnergyType'] instanceof String)) {
            throw new Error("Expected the field `DeviceEnergyType` to be a primitive type in the JSON string but got " + data['DeviceEnergyType']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['MeterSubType'] && !(typeof data['MeterSubType'] === 'string' || data['MeterSubType'] instanceof String)) {
            throw new Error("Expected the field `MeterSubType` to be a primitive type in the JSON string but got " + data['MeterSubType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * The Active Power or current flow rate. In kW or m3/h
 * @member {Number} ActivePower
 */
DeviceToPost.prototype['ActivePower'] = undefined;

/**
 * The Meter Counter Reading (Total Energy used) in kWh or m3.
 * @member {Number} CounterReading
 */
DeviceToPost.prototype['CounterReading'] = undefined;

/**
 * The Meter Counter Reading only export
 * @member {Number} CounterReadingExport
 */
DeviceToPost.prototype['CounterReadingExport'] = undefined;

/**
 * The Meter Counter Reading only export (Tariff 1)
 * @member {Number} CounterReadingExportT1
 */
DeviceToPost.prototype['CounterReadingExportT1'] = undefined;

/**
 * The Meter Counter Reading only export (Tariff 2)
 * @member {Number} CounterReadingExportT2
 */
DeviceToPost.prototype['CounterReadingExportT2'] = undefined;

/**
 * The Meter Counter Reading Tariff 1 in kWh or m3.
 * @member {Number} CounterReadingT1
 */
DeviceToPost.prototype['CounterReadingT1'] = undefined;

/**
 * The Meter Counter Reading Tariff 2 in kWh or m3.
 * @member {Number} CounterReadingT2
 */
DeviceToPost.prototype['CounterReadingT2'] = undefined;

/**
 * The Current (in A)
 * @member {Number} Current
 */
DeviceToPost.prototype['Current'] = undefined;

/**
 * The Current Phase L1 (in A)
 * @member {Number} CurrentL1
 */
DeviceToPost.prototype['CurrentL1'] = undefined;

/**
 * The Current Phase L2 (in A)
 * @member {Number} CurrentL2
 */
DeviceToPost.prototype['CurrentL2'] = undefined;

/**
 * The Current Phase L3 (in A)
 * @member {Number} CurrentL3
 */
DeviceToPost.prototype['CurrentL3'] = undefined;

/**
 * The Energy Type of this device
 * @member {module:model/DeviceToPost.DeviceEnergyTypeEnum} DeviceEnergyType
 */
DeviceToPost.prototype['DeviceEnergyType'] = undefined;

/**
 * The digital input number 1
 * @member {Boolean} DigitalInput1
 */
DeviceToPost.prototype['DigitalInput1'] = undefined;

/**
 * The ID of the device
 * @member {String} Id
 */
DeviceToPost.prototype['Id'] = undefined;

/**
 * The Sub Type of this Meter.
 * @member {module:model/DeviceToPost.MeterSubTypeEnum} MeterSubType
 */
DeviceToPost.prototype['MeterSubType'] = undefined;

/**
 * The Name of the Device
 * @member {String} Name
 */
DeviceToPost.prototype['Name'] = undefined;

/**
 * The Power Factor (cos phi). Range: 0 - 1
 * @member {Number} PowerFactor
 */
DeviceToPost.prototype['PowerFactor'] = undefined;

/**
 * The Power Factor (cos phi) Phase L1. Range: 0 - 1
 * @member {Number} PowerFactorL1
 */
DeviceToPost.prototype['PowerFactorL1'] = undefined;

/**
 * The Power Factor (cos phi) Phase L2. Range: 0 - 1
 * @member {Number} PowerFactorL2
 */
DeviceToPost.prototype['PowerFactorL2'] = undefined;

/**
 * The Power Factor (cos phi) Phase L3. Range: 0 - 1
 * @member {Number} PowerFactorL3
 */
DeviceToPost.prototype['PowerFactorL3'] = undefined;

/**
 * The Serial number
 * @member {Number} Serial
 */
DeviceToPost.prototype['Serial'] = undefined;

/**
 * The Temperature (in degree celsius)
 * @member {Number} Temperature
 */
DeviceToPost.prototype['Temperature'] = undefined;

/**
 * The Date of the Value (in UTC). If this is null the Server Time is used.
 * @member {Date} ValueDate
 */
DeviceToPost.prototype['ValueDate'] = undefined;

/**
 * The Voltage (in V)
 * @member {Number} Voltage
 */
DeviceToPost.prototype['Voltage'] = undefined;

/**
 * The Voltage Phase L1 (in V)
 * @member {Number} VoltageL1
 */
DeviceToPost.prototype['VoltageL1'] = undefined;

/**
 * The Voltage Phase L2 (in V)
 * @member {Number} VoltageL2
 */
DeviceToPost.prototype['VoltageL2'] = undefined;

/**
 * The Voltage Phase L3 (in V)
 * @member {Number} VoltageL3
 */
DeviceToPost.prototype['VoltageL3'] = undefined;





/**
 * Allowed values for the <code>DeviceEnergyType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceToPost['DeviceEnergyTypeEnum'] = {

    /**
     * value: "MeterTypeUnknown"
     * @const
     */
    "MeterTypeUnknown": "MeterTypeUnknown",

    /**
     * value: "MeterTypeElectricity"
     * @const
     */
    "MeterTypeElectricity": "MeterTypeElectricity",

    /**
     * value: "MeterTypeWater"
     * @const
     */
    "MeterTypeWater": "MeterTypeWater",

    /**
     * value: "MeterTypeGas"
     * @const
     */
    "MeterTypeGas": "MeterTypeGas",

    /**
     * value: "MeterTypeHeat"
     * @const
     */
    "MeterTypeHeat": "MeterTypeHeat",

    /**
     * value: "MeterTypeHCA"
     * @const
     */
    "MeterTypeHCA": "MeterTypeHCA",

    /**
     * value: "MeterTypeAllMeters"
     * @const
     */
    "MeterTypeAllMeters": "MeterTypeAllMeters",

    /**
     * value: "MeterTypeTemperature"
     * @const
     */
    "MeterTypeTemperature": "MeterTypeTemperature",

    /**
     * value: "MeterTypeMBusGateway"
     * @const
     */
    "MeterTypeMBusGateway": "MeterTypeMBusGateway",

    /**
     * value: "MeterTypeRS485Gateway"
     * @const
     */
    "MeterTypeRS485Gateway": "MeterTypeRS485Gateway",

    /**
     * value: "MeterTypeCustomDevice"
     * @const
     */
    "MeterTypeCustomDevice": "MeterTypeCustomDevice",

    /**
     * value: "MeterTypeCompressedAir"
     * @const
     */
    "MeterTypeCompressedAir": "MeterTypeCompressedAir",

    /**
     * value: "MeterTypeSolarLog"
     * @const
     */
    "MeterTypeSolarLog": "MeterTypeSolarLog",

    /**
     * value: "MeterTypeVirtualMeter"
     * @const
     */
    "MeterTypeVirtualMeter": "MeterTypeVirtualMeter",

    /**
     * value: "MeterTypeWMBusGateway"
     * @const
     */
    "MeterTypeWMBusGateway": "MeterTypeWMBusGateway"
};


/**
 * Allowed values for the <code>MeterSubType</code> property.
 * @enum {String}
 * @readonly
 */
DeviceToPost['MeterSubTypeEnum'] = {

    /**
     * value: "MeterSubTypeUnknown"
     * @const
     */
    "MeterSubTypeUnknown": "MeterSubTypeUnknown",

    /**
     * value: "MeterSubTypeCold"
     * @const
     */
    "MeterSubTypeCold": "MeterSubTypeCold",

    /**
     * value: "MeterSubTypeHeat"
     * @const
     */
    "MeterSubTypeHeat": "MeterSubTypeHeat",

    /**
     * value: "MeterSubTypeChargingStation"
     * @const
     */
    "MeterSubTypeChargingStation": "MeterSubTypeChargingStation",

    /**
     * value: "MeterSubTypeElectricity"
     * @const
     */
    "MeterSubTypeElectricity": "MeterSubTypeElectricity",

    /**
     * value: "MeterSubTypeWater"
     * @const
     */
    "MeterSubTypeWater": "MeterSubTypeWater",

    /**
     * value: "MeterSubTypeGas"
     * @const
     */
    "MeterSubTypeGas": "MeterSubTypeGas",

    /**
     * value: "MeterSubTypeElectricityHeat"
     * @const
     */
    "MeterSubTypeElectricityHeat": "MeterSubTypeElectricityHeat",

    /**
     * value: "MeterSubTypeTemperature"
     * @const
     */
    "MeterSubTypeTemperature": "MeterSubTypeTemperature",

    /**
     * value: "MeterSubTypeVirtualBattery"
     * @const
     */
    "MeterSubTypeVirtualBattery": "MeterSubTypeVirtualBattery"
};



export default DeviceToPost;

