/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoExportSettings from './AutoExportSettings';

/**
 * The FolderMenuItem model module.
 * @module model/FolderMenuItem
 * @version v1
 */
class FolderMenuItem {
    /**
     * Constructs a new <code>FolderMenuItem</code>.
     * A folder menu item
     * @alias module:model/FolderMenuItem
     */
    constructor() { 
        
        FolderMenuItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FolderMenuItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FolderMenuItem} obj Optional instance to populate.
     * @return {module:model/FolderMenuItem} The populated <code>FolderMenuItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FolderMenuItem();

            if (data.hasOwnProperty('AutoExportSettings')) {
                obj['AutoExportSettings'] = AutoExportSettings.constructFromObject(data['AutoExportSettings']);
            }
            if (data.hasOwnProperty('Children')) {
                obj['Children'] = ApiClient.convertToType(data['Children'], [FolderMenuItem]);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('FolderType')) {
                obj['FolderType'] = ApiClient.convertToType(data['FolderType'], 'String');
            }
            if (data.hasOwnProperty('Icon')) {
                obj['Icon'] = ApiClient.convertToType(data['Icon'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MeterSerialNumber')) {
                obj['MeterSerialNumber'] = ApiClient.convertToType(data['MeterSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FolderMenuItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FolderMenuItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AutoExportSettings`
        if (data['AutoExportSettings']) { // data not null
          AutoExportSettings.validateJSON(data['AutoExportSettings']);
        }
        if (data['Children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Children'])) {
                throw new Error("Expected the field `Children` to be an array in the JSON data but got " + data['Children']);
            }
            // validate the optional field `Children` (array)
            for (const item of data['Children']) {
                FolderMenuItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['FolderType'] && !(typeof data['FolderType'] === 'string' || data['FolderType'] instanceof String)) {
            throw new Error("Expected the field `FolderType` to be a primitive type in the JSON string but got " + data['FolderType']);
        }
        // ensure the json data is a string
        if (data['Icon'] && !(typeof data['Icon'] === 'string' || data['Icon'] instanceof String)) {
            throw new Error("Expected the field `Icon` to be a primitive type in the JSON string but got " + data['Icon']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['MeterSerialNumber'] && !(typeof data['MeterSerialNumber'] === 'string' || data['MeterSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `MeterSerialNumber` to be a primitive type in the JSON string but got " + data['MeterSerialNumber']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['UserId'] && !(typeof data['UserId'] === 'string' || data['UserId'] instanceof String)) {
            throw new Error("Expected the field `UserId` to be a primitive type in the JSON string but got " + data['UserId']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoExportSettings} AutoExportSettings
 */
FolderMenuItem.prototype['AutoExportSettings'] = undefined;

/**
 * Children folder menu items (sub folder menu items)
 * @member {Array.<module:model/FolderMenuItem>} Children
 */
FolderMenuItem.prototype['Children'] = undefined;

/**
 * The Description of the folder
 * @member {String} Description
 */
FolderMenuItem.prototype['Description'] = undefined;

/**
 * The folder type of the item
 * @member {module:model/FolderMenuItem.FolderTypeEnum} FolderType
 */
FolderMenuItem.prototype['FolderType'] = undefined;

/**
 * The path to the Icon of this folder
 * @member {String} Icon
 */
FolderMenuItem.prototype['Icon'] = undefined;

/**
 * The id of the folder menu item
 * @member {String} Id
 */
FolderMenuItem.prototype['Id'] = undefined;

/**
 * The serial number if the folder menu item is a meter.               Serial number is handled as a string, as javascript on client side cannot handle long integers properly.
 * @member {String} MeterSerialNumber
 */
FolderMenuItem.prototype['MeterSerialNumber'] = undefined;

/**
 * The Name of the item
 * @member {String} Name
 */
FolderMenuItem.prototype['Name'] = undefined;

/**
 * The ID of the user of this folder (only for foldertype user)
 * @member {String} UserId
 */
FolderMenuItem.prototype['UserId'] = undefined;





/**
 * Allowed values for the <code>FolderType</code> property.
 * @enum {String}
 * @readonly
 */
FolderMenuItem['FolderTypeEnum'] = {

    /**
     * value: "Folder"
     * @const
     */
    "Folder": "Folder",

    /**
     * value: "Location"
     * @const
     */
    "Location": "Location",

    /**
     * value: "Factory"
     * @const
     */
    "Factory": "Factory",

    /**
     * value: "House"
     * @const
     */
    "House": "House",

    /**
     * value: "Office"
     * @const
     */
    "Office": "Office",

    /**
     * value: "Machine"
     * @const
     */
    "Machine": "Machine",

    /**
     * value: "VirtualMeter"
     * @const
     */
    "VirtualMeter": "VirtualMeter",

    /**
     * value: "ElecticityFolder"
     * @const
     */
    "ElecticityFolder": "ElecticityFolder",

    /**
     * value: "WaterFolder"
     * @const
     */
    "WaterFolder": "WaterFolder",

    /**
     * value: "HeatFolder"
     * @const
     */
    "HeatFolder": "HeatFolder",

    /**
     * value: "GasFolder"
     * @const
     */
    "GasFolder": "GasFolder",

    /**
     * value: "TemperatureFolder"
     * @const
     */
    "TemperatureFolder": "TemperatureFolder",

    /**
     * value: "Sun"
     * @const
     */
    "Sun": "Sun",

    /**
     * value: "Light"
     * @const
     */
    "Light": "Light",

    /**
     * value: "Ice"
     * @const
     */
    "Ice": "Ice",

    /**
     * value: "Sofa"
     * @const
     */
    "Sofa": "Sofa",

    /**
     * value: "Food"
     * @const
     */
    "Food": "Food",

    /**
     * value: "Coffee"
     * @const
     */
    "Coffee": "Coffee",

    /**
     * value: "Car"
     * @const
     */
    "Car": "Car",

    /**
     * value: "ChargingStation"
     * @const
     */
    "ChargingStation": "ChargingStation",

    /**
     * value: "Meter"
     * @const
     */
    "Meter": "Meter",

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "Trash"
     * @const
     */
    "Trash": "Trash",

    /**
     * value: "GridPhotovoltaicPowerSystem"
     * @const
     */
    "GridPhotovoltaicPowerSystem": "GridPhotovoltaicPowerSystem"
};



export default FolderMenuItem;

