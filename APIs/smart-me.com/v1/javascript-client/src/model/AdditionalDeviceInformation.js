/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalDeviceInformation model module.
 * @module model/AdditionalDeviceInformation
 * @version v1
 */
class AdditionalDeviceInformation {
    /**
     * Constructs a new <code>AdditionalDeviceInformation</code>.
     * Additional Information For a device
     * @alias module:model/AdditionalDeviceInformation
     */
    constructor() { 
        
        AdditionalDeviceInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalDeviceInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalDeviceInformation} obj Optional instance to populate.
     * @return {module:model/AdditionalDeviceInformation} The populated <code>AdditionalDeviceInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalDeviceInformation();

            if (data.hasOwnProperty('AdditionalMeterSerialNumber')) {
                obj['AdditionalMeterSerialNumber'] = ApiClient.convertToType(data['AdditionalMeterSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('FirmwareVersion')) {
                obj['FirmwareVersion'] = ApiClient.convertToType(data['FirmwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('HardwareVersion')) {
                obj['HardwareVersion'] = ApiClient.convertToType(data['HardwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('NetworkConnection')) {
                obj['NetworkConnection'] = ApiClient.convertToType(data['NetworkConnection'], 'String');
            }
            if (data.hasOwnProperty('NetworkConnectionRSSI')) {
                obj['NetworkConnectionRSSI'] = ApiClient.convertToType(data['NetworkConnectionRSSI'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalDeviceInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalDeviceInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AdditionalMeterSerialNumber'] && !(typeof data['AdditionalMeterSerialNumber'] === 'string' || data['AdditionalMeterSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `AdditionalMeterSerialNumber` to be a primitive type in the JSON string but got " + data['AdditionalMeterSerialNumber']);
        }
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        // ensure the json data is a string
        if (data['NetworkConnection'] && !(typeof data['NetworkConnection'] === 'string' || data['NetworkConnection'] instanceof String)) {
            throw new Error("Expected the field `NetworkConnection` to be a primitive type in the JSON string but got " + data['NetworkConnection']);
        }

        return true;
    }


}



/**
 * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
 * @member {String} AdditionalMeterSerialNumber
 */
AdditionalDeviceInformation.prototype['AdditionalMeterSerialNumber'] = undefined;

/**
 * The Firmware Version of a Meter
 * @member {Number} FirmwareVersion
 */
AdditionalDeviceInformation.prototype['FirmwareVersion'] = undefined;

/**
 * The Hardware Version of a Meter.
 * @member {Number} HardwareVersion
 */
AdditionalDeviceInformation.prototype['HardwareVersion'] = undefined;

/**
 * The ID of the device
 * @member {String} ID
 */
AdditionalDeviceInformation.prototype['ID'] = undefined;

/**
 * The mode how the device is connected to the network. Valid values are:              wifi, gprs, ltecatm1, ltenbiot, meshmobile, meshwifi
 * @member {String} NetworkConnection
 */
AdditionalDeviceInformation.prototype['NetworkConnection'] = undefined;

/**
 * The connection RSSI value (0 is bad, 100 is best)
 * @member {Number} NetworkConnectionRSSI
 */
AdditionalDeviceInformation.prototype['NetworkConnectionRSSI'] = undefined;






export default AdditionalDeviceInformation;

