/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegisterRealtimeApiData model module.
 * @module model/RegisterRealtimeApiData
 * @version v1
 */
class RegisterRealtimeApiData {
    /**
     * Constructs a new <code>RegisterRealtimeApiData</code>.
     * Container class for the register realtime API API
     * @alias module:model/RegisterRealtimeApiData
     */
    constructor() { 
        
        RegisterRealtimeApiData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegisterRealtimeApiData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisterRealtimeApiData} obj Optional instance to populate.
     * @return {module:model/RegisterRealtimeApiData} The populated <code>RegisterRealtimeApiData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisterRealtimeApiData();

            if (data.hasOwnProperty('ApiUrl')) {
                obj['ApiUrl'] = ApiClient.convertToType(data['ApiUrl'], 'String');
            }
            if (data.hasOwnProperty('BasicAuthPassword')) {
                obj['BasicAuthPassword'] = ApiClient.convertToType(data['BasicAuthPassword'], 'String');
            }
            if (data.hasOwnProperty('BasicAuthUsername')) {
                obj['BasicAuthUsername'] = ApiClient.convertToType(data['BasicAuthUsername'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MeterId')) {
                obj['MeterId'] = ApiClient.convertToType(data['MeterId'], 'String');
            }
            if (data.hasOwnProperty('RegistrationType')) {
                obj['RegistrationType'] = ApiClient.convertToType(data['RegistrationType'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisterRealtimeApiData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisterRealtimeApiData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ApiUrl'] && !(typeof data['ApiUrl'] === 'string' || data['ApiUrl'] instanceof String)) {
            throw new Error("Expected the field `ApiUrl` to be a primitive type in the JSON string but got " + data['ApiUrl']);
        }
        // ensure the json data is a string
        if (data['BasicAuthPassword'] && !(typeof data['BasicAuthPassword'] === 'string' || data['BasicAuthPassword'] instanceof String)) {
            throw new Error("Expected the field `BasicAuthPassword` to be a primitive type in the JSON string but got " + data['BasicAuthPassword']);
        }
        // ensure the json data is a string
        if (data['BasicAuthUsername'] && !(typeof data['BasicAuthUsername'] === 'string' || data['BasicAuthUsername'] instanceof String)) {
            throw new Error("Expected the field `BasicAuthUsername` to be a primitive type in the JSON string but got " + data['BasicAuthUsername']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['MeterId'] && !(typeof data['MeterId'] === 'string' || data['MeterId'] instanceof String)) {
            throw new Error("Expected the field `MeterId` to be a primitive type in the JSON string but got " + data['MeterId']);
        }
        // ensure the json data is a string
        if (data['RegistrationType'] && !(typeof data['RegistrationType'] === 'string' || data['RegistrationType'] instanceof String)) {
            throw new Error("Expected the field `RegistrationType` to be a primitive type in the JSON string but got " + data['RegistrationType']);
        }
        // ensure the json data is a string
        if (data['SerialNumber'] && !(typeof data['SerialNumber'] === 'string' || data['SerialNumber'] instanceof String)) {
            throw new Error("Expected the field `SerialNumber` to be a primitive type in the JSON string but got " + data['SerialNumber']);
        }

        return true;
    }


}



/**
 * The URL of your endpoint. To this endpoint all the values are send to.
 * @member {String} ApiUrl
 */
RegisterRealtimeApiData.prototype['ApiUrl'] = undefined;

/**
 * The Password (basic auth) of your endpoint. Leave empty of none.
 * @member {String} BasicAuthPassword
 */
RegisterRealtimeApiData.prototype['BasicAuthPassword'] = undefined;

/**
 * The Username (basic auth) of your endpoint. Leave empty of none.
 * @member {String} BasicAuthUsername
 */
RegisterRealtimeApiData.prototype['BasicAuthUsername'] = undefined;

/**
 * The ID of the registration
 * @member {String} Id
 */
RegisterRealtimeApiData.prototype['Id'] = undefined;

/**
 * The ID of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\".
 * @member {String} MeterId
 */
RegisterRealtimeApiData.prototype['MeterId'] = undefined;

/**
 * The Type of this registration (per meter, per user, ...)
 * @member {module:model/RegisterRealtimeApiData.RegistrationTypeEnum} RegistrationType
 */
RegisterRealtimeApiData.prototype['RegistrationType'] = undefined;

/**
 * The serial number of the Meter. Just used if the RegistrationType is \"SingleMeterRegistration\" and the MeterId is null.               Example: 1 SME 01 63000000 or 6300000
 * @member {String} SerialNumber
 */
RegisterRealtimeApiData.prototype['SerialNumber'] = undefined;





/**
 * Allowed values for the <code>RegistrationType</code> property.
 * @enum {String}
 * @readonly
 */
RegisterRealtimeApiData['RegistrationTypeEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "SingleMeterRegistration"
     * @const
     */
    "SingleMeterRegistration": "SingleMeterRegistration",

    /**
     * value: "UserRegistration"
     * @const
     */
    "UserRegistration": "UserRegistration"
};



export default RegisterRealtimeApiData;

