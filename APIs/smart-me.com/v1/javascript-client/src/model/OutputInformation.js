/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutputInformation model module.
 * @module model/OutputInformation
 * @version v1
 */
class OutputInformation {
    /**
     * Constructs a new <code>OutputInformation</code>.
     * Informations about the Outputs of a Meter or Folder
     * @alias module:model/OutputInformation
     */
    constructor() { 
        
        OutputInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OutputInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputInformation} obj Optional instance to populate.
     * @return {module:model/OutputInformation} The populated <code>OutputInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputInformation();

            if (data.hasOwnProperty('ActionType')) {
                obj['ActionType'] = ApiClient.convertToType(data['ActionType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('ObisCode')) {
                obj['ObisCode'] = ApiClient.convertToType(data['ObisCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ActionType'] && !(typeof data['ActionType'] === 'string' || data['ActionType'] instanceof String)) {
            throw new Error("Expected the field `ActionType` to be a primitive type in the JSON string but got " + data['ActionType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ObisCode'] && !(typeof data['ObisCode'] === 'string' || data['ObisCode'] instanceof String)) {
            throw new Error("Expected the field `ObisCode` to be a primitive type in the JSON string but got " + data['ObisCode']);
        }

        return true;
    }


}



/**
 * The type of the Output
 * @member {module:model/OutputInformation.ActionTypeEnum} ActionType
 */
OutputInformation.prototype['ActionType'] = undefined;

/**
 * The Name of the Output
 * @member {String} Name
 */
OutputInformation.prototype['Name'] = undefined;

/**
 * The Number of this Output. Use this as ID to switch it on or off.
 * @member {Number} Number
 */
OutputInformation.prototype['Number'] = undefined;

/**
 * The Obis Code for this Output
 * @member {String} ObisCode
 */
OutputInformation.prototype['ObisCode'] = undefined;





/**
 * Allowed values for the <code>ActionType</code> property.
 * @enum {String}
 * @readonly
 */
OutputInformation['ActionTypeEnum'] = {

    /**
     * value: "OnOffAction"
     * @const
     */
    "OnOffAction": "OnOffAction",

    /**
     * value: "AnalogAction"
     * @const
     */
    "AnalogAction": "AnalogAction"
};



export default OutputInformation;

