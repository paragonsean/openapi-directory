/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputConfigurationContainer from './InputConfigurationContainer';
import OutputConfigurationContainer from './OutputConfigurationContainer';
import SwitchConfigurationContainer from './SwitchConfigurationContainer';

/**
 * The SmartMeDeviceConfigurationContainer model module.
 * @module model/SmartMeDeviceConfigurationContainer
 * @version v1
 */
class SmartMeDeviceConfigurationContainer {
    /**
     * Constructs a new <code>SmartMeDeviceConfigurationContainer</code>.
     * API Container class for the meter configuration
     * @alias module:model/SmartMeDeviceConfigurationContainer
     */
    constructor() { 
        
        SmartMeDeviceConfigurationContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SmartMeDeviceConfigurationContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmartMeDeviceConfigurationContainer} obj Optional instance to populate.
     * @return {module:model/SmartMeDeviceConfigurationContainer} The populated <code>SmartMeDeviceConfigurationContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmartMeDeviceConfigurationContainer();

            if (data.hasOwnProperty('DeviceEncryptionKey')) {
                obj['DeviceEncryptionKey'] = ApiClient.convertToType(data['DeviceEncryptionKey'], 'String');
            }
            if (data.hasOwnProperty('DevicePinCode')) {
                obj['DevicePinCode'] = ApiClient.convertToType(data['DevicePinCode'], 'String');
            }
            if (data.hasOwnProperty('DnsUpdateState')) {
                obj['DnsUpdateState'] = ApiClient.convertToType(data['DnsUpdateState'], 'String');
            }
            if (data.hasOwnProperty('EnableModbusTcp')) {
                obj['EnableModbusTcp'] = ApiClient.convertToType(data['EnableModbusTcp'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('InputConfiguration')) {
                obj['InputConfiguration'] = ApiClient.convertToType(data['InputConfiguration'], [InputConfigurationContainer]);
            }
            if (data.hasOwnProperty('OutputConfiguration')) {
                obj['OutputConfiguration'] = ApiClient.convertToType(data['OutputConfiguration'], [OutputConfigurationContainer]);
            }
            if (data.hasOwnProperty('ShowReactiveEnergy')) {
                obj['ShowReactiveEnergy'] = ApiClient.convertToType(data['ShowReactiveEnergy'], 'Boolean');
            }
            if (data.hasOwnProperty('SwitchConfiguration')) {
                obj['SwitchConfiguration'] = ApiClient.convertToType(data['SwitchConfiguration'], [SwitchConfigurationContainer]);
            }
            if (data.hasOwnProperty('UploadInterval')) {
                obj['UploadInterval'] = ApiClient.convertToType(data['UploadInterval'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SmartMeDeviceConfigurationContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SmartMeDeviceConfigurationContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DeviceEncryptionKey'] && !(typeof data['DeviceEncryptionKey'] === 'string' || data['DeviceEncryptionKey'] instanceof String)) {
            throw new Error("Expected the field `DeviceEncryptionKey` to be a primitive type in the JSON string but got " + data['DeviceEncryptionKey']);
        }
        // ensure the json data is a string
        if (data['DevicePinCode'] && !(typeof data['DevicePinCode'] === 'string' || data['DevicePinCode'] instanceof String)) {
            throw new Error("Expected the field `DevicePinCode` to be a primitive type in the JSON string but got " + data['DevicePinCode']);
        }
        // ensure the json data is a string
        if (data['DnsUpdateState'] && !(typeof data['DnsUpdateState'] === 'string' || data['DnsUpdateState'] instanceof String)) {
            throw new Error("Expected the field `DnsUpdateState` to be a primitive type in the JSON string but got " + data['DnsUpdateState']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        if (data['InputConfiguration']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['InputConfiguration'])) {
                throw new Error("Expected the field `InputConfiguration` to be an array in the JSON data but got " + data['InputConfiguration']);
            }
            // validate the optional field `InputConfiguration` (array)
            for (const item of data['InputConfiguration']) {
                InputConfigurationContainer.validateJSON(item);
            };
        }
        if (data['OutputConfiguration']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OutputConfiguration'])) {
                throw new Error("Expected the field `OutputConfiguration` to be an array in the JSON data but got " + data['OutputConfiguration']);
            }
            // validate the optional field `OutputConfiguration` (array)
            for (const item of data['OutputConfiguration']) {
                OutputConfigurationContainer.validateJSON(item);
            };
        }
        if (data['SwitchConfiguration']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SwitchConfiguration'])) {
                throw new Error("Expected the field `SwitchConfiguration` to be an array in the JSON data but got " + data['SwitchConfiguration']);
            }
            // validate the optional field `SwitchConfiguration` (array)
            for (const item of data['SwitchConfiguration']) {
                SwitchConfigurationContainer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['UploadInterval'] && !(typeof data['UploadInterval'] === 'string' || data['UploadInterval'] instanceof String)) {
            throw new Error("Expected the field `UploadInterval` to be a primitive type in the JSON string but got " + data['UploadInterval']);
        }

        return true;
    }


}



/**
 * The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
 * @member {String} DeviceEncryptionKey
 */
SmartMeDeviceConfigurationContainer.prototype['DeviceEncryptionKey'] = undefined;

/**
 * PIN code to enter on a external meter (e.g. for the FNN meters)
 * @member {String} DevicePinCode
 */
SmartMeDeviceConfigurationContainer.prototype['DevicePinCode'] = undefined;

/**
 * Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
 * @member {module:model/SmartMeDeviceConfigurationContainer.DnsUpdateStateEnum} DnsUpdateState
 */
SmartMeDeviceConfigurationContainer.prototype['DnsUpdateState'] = undefined;

/**
 * Enables or disables Modbus TCP (if the meter supports it).
 * @member {Boolean} EnableModbusTcp
 */
SmartMeDeviceConfigurationContainer.prototype['EnableModbusTcp'] = undefined;

/**
 * The ID of the device
 * @member {String} Id
 */
SmartMeDeviceConfigurationContainer.prototype['Id'] = undefined;

/**
 * The configuration for the intput outputs
 * @member {Array.<module:model/InputConfigurationContainer>} InputConfiguration
 */
SmartMeDeviceConfigurationContainer.prototype['InputConfiguration'] = undefined;

/**
 * The configuration for the external outputs
 * @member {Array.<module:model/OutputConfigurationContainer>} OutputConfiguration
 */
SmartMeDeviceConfigurationContainer.prototype['OutputConfiguration'] = undefined;

/**
 * Shows the reactive energy values (if the meter supports it).
 * @member {Boolean} ShowReactiveEnergy
 */
SmartMeDeviceConfigurationContainer.prototype['ShowReactiveEnergy'] = undefined;

/**
 * The configuration for the phase switches
 * @member {Array.<module:model/SwitchConfigurationContainer>} SwitchConfiguration
 */
SmartMeDeviceConfigurationContainer.prototype['SwitchConfiguration'] = undefined;

/**
 * Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
 * @member {module:model/SmartMeDeviceConfigurationContainer.UploadIntervalEnum} UploadInterval
 */
SmartMeDeviceConfigurationContainer.prototype['UploadInterval'] = undefined;





/**
 * Allowed values for the <code>DnsUpdateState</code> property.
 * @enum {String}
 * @readonly
 */
SmartMeDeviceConfigurationContainer['DnsUpdateStateEnum'] = {

    /**
     * value: "NoUpdate"
     * @const
     */
    "NoUpdate": "NoUpdate",

    /**
     * value: "DnsUpdatePublicIp"
     * @const
     */
    "DnsUpdatePublicIp": "DnsUpdatePublicIp",

    /**
     * value: "DnsUpdateInternalIp"
     * @const
     */
    "DnsUpdateInternalIp": "DnsUpdateInternalIp"
};


/**
 * Allowed values for the <code>UploadInterval</code> property.
 * @enum {String}
 * @readonly
 */
SmartMeDeviceConfigurationContainer['UploadIntervalEnum'] = {

    /**
     * value: "UploadInterval_1s"
     * @const
     */
    "1s": "UploadInterval_1s",

    /**
     * value: "UploadInterval_5s"
     * @const
     */
    "5s": "UploadInterval_5s",

    /**
     * value: "UploadInterval_10s"
     * @const
     */
    "10s": "UploadInterval_10s",

    /**
     * value: "UploadInterval_30s"
     * @const
     */
    "30s": "UploadInterval_30s",

    /**
     * value: "UploadInterval_60s"
     * @const
     */
    "60s": "UploadInterval_60s",

    /**
     * value: "UploadInterval_5min"
     * @const
     */
    "5min": "UploadInterval_5min",

    /**
     * value: "UploadInterval_15min"
     * @const
     */
    "15min": "UploadInterval_15min",

    /**
     * value: "UploadInterval_30min"
     * @const
     */
    "30min": "UploadInterval_30min",

    /**
     * value: "UploadInterval_60min"
     * @const
     */
    "60min": "UploadInterval_60min",

    /**
     * value: "UploadInterval_6h"
     * @const
     */
    "6h": "UploadInterval_6h",

    /**
     * value: "UploadInterval_12h"
     * @const
     */
    "12h": "UploadInterval_12h",

    /**
     * value: "UploadInterval_24h"
     * @const
     */
    "24h": "UploadInterval_24h"
};



export default SmartMeDeviceConfigurationContainer;

