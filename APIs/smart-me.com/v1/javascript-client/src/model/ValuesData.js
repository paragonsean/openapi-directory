/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValueData from './ValueData';

/**
 * The ValuesData model module.
 * @module model/ValuesData
 * @version v1
 */
class ValuesData {
    /**
     * Constructs a new <code>ValuesData</code>.
     * API Container for a Meter Value
     * @alias module:model/ValuesData
     */
    constructor() { 
        
        ValuesData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValuesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValuesData} obj Optional instance to populate.
     * @return {module:model/ValuesData} The populated <code>ValuesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValuesData();

            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'Date');
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('Values')) {
                obj['Values'] = ApiClient.convertToType(data['Values'], [ValueData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValuesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValuesData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DeviceId'] && !(typeof data['DeviceId'] === 'string' || data['DeviceId'] instanceof String)) {
            throw new Error("Expected the field `DeviceId` to be a primitive type in the JSON string but got " + data['DeviceId']);
        }
        if (data['Values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Values'])) {
                throw new Error("Expected the field `Values` to be an array in the JSON data but got " + data['Values']);
            }
            // validate the optional field `Values` (array)
            for (const item of data['Values']) {
                ValueData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Date of the Value
 * @member {Date} Date
 */
ValuesData.prototype['Date'] = undefined;

/**
 * The ID of the device
 * @member {String} DeviceId
 */
ValuesData.prototype['DeviceId'] = undefined;

/**
 * All values
 * @member {Array.<module:model/ValueData>} Values
 */
ValuesData.prototype['Values'] = undefined;






export default ValuesData;

