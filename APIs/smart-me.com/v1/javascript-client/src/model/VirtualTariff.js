/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualTariff model module.
 * @module model/VirtualTariff
 * @version v1
 */
class VirtualTariff {
    /**
     * Constructs a new <code>VirtualTariff</code>.
     * @alias module:model/VirtualTariff
     */
    constructor() { 
        
        VirtualTariff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualTariff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualTariff} obj Optional instance to populate.
     * @return {module:model/VirtualTariff} The populated <code>VirtualTariff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualTariff();

            if (data.hasOwnProperty('Factor')) {
                obj['Factor'] = ApiClient.convertToType(data['Factor'], 'Number');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Unit')) {
                obj['Unit'] = ApiClient.convertToType(data['Unit'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualTariff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualTariff</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Unit'] && !(typeof data['Unit'] === 'string' || data['Unit'] instanceof String)) {
            throw new Error("Expected the field `Unit` to be a primitive type in the JSON string but got " + data['Unit']);
        }

        return true;
    }


}



/**
 * Says how many of the active power is used in this tariff. This is calculated from the last meter values.
 * @member {Number} Factor
 */
VirtualTariff.prototype['Factor'] = undefined;

/**
 * @member {String} Id
 */
VirtualTariff.prototype['Id'] = undefined;

/**
 * @member {String} Name
 */
VirtualTariff.prototype['Name'] = undefined;

/**
 * @member {module:model/VirtualTariff.TypeEnum} Type
 */
VirtualTariff.prototype['Type'] = undefined;

/**
 * @member {String} Unit
 */
VirtualTariff.prototype['Unit'] = undefined;

/**
 * The Counter Value of this tariff
 * @member {Number} Value
 */
VirtualTariff.prototype['Value'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
VirtualTariff['TypeEnum'] = {

    /**
     * value: "Battery"
     * @const
     */
    "Battery": "Battery",

    /**
     * value: "Solar"
     * @const
     */
    "Solar": "Solar",

    /**
     * value: "Normal"
     * @const
     */
    "Normal": "Normal"
};



export default VirtualTariff;

