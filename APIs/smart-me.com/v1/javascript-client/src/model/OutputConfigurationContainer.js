/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutputConfigurationContainer model module.
 * @module model/OutputConfigurationContainer
 * @version v1
 */
class OutputConfigurationContainer {
    /**
     * Constructs a new <code>OutputConfigurationContainer</code>.
     * Configuration for the outputs of a meter (analog/digital outputs)
     * @alias module:model/OutputConfigurationContainer
     */
    constructor() { 
        
        OutputConfigurationContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OutputConfigurationContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputConfigurationContainer} obj Optional instance to populate.
     * @return {module:model/OutputConfigurationContainer} The populated <code>OutputConfigurationContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputConfigurationContainer();

            if (data.hasOwnProperty('DigitalOutputNoConnectionAction')) {
                obj['DigitalOutputNoConnectionAction'] = ApiClient.convertToType(data['DigitalOutputNoConnectionAction'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('S0PulseValue')) {
                obj['S0PulseValue'] = ApiClient.convertToType(data['S0PulseValue'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputConfigurationContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputConfigurationContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DigitalOutputNoConnectionAction'] && !(typeof data['DigitalOutputNoConnectionAction'] === 'string' || data['DigitalOutputNoConnectionAction'] instanceof String)) {
            throw new Error("Expected the field `DigitalOutputNoConnectionAction` to be a primitive type in the JSON string but got " + data['DigitalOutputNoConnectionAction']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['S0PulseValue'] && !(typeof data['S0PulseValue'] === 'string' || data['S0PulseValue'] instanceof String)) {
            throw new Error("Expected the field `S0PulseValue` to be a primitive type in the JSON string but got " + data['S0PulseValue']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * The Action when the device has lost the connection
 * @member {module:model/OutputConfigurationContainer.DigitalOutputNoConnectionActionEnum} DigitalOutputNoConnectionAction
 */
OutputConfigurationContainer.prototype['DigitalOutputNoConnectionAction'] = undefined;

/**
 * The Name of the Output
 * @member {String} Name
 */
OutputConfigurationContainer.prototype['Name'] = undefined;

/**
 * The number of the Output. (1 for Output 1, 2 for Output 2)
 * @member {Number} Number
 */
OutputConfigurationContainer.prototype['Number'] = undefined;

/**
 * The S0 Pulse Value
 * @member {module:model/OutputConfigurationContainer.S0PulseValueEnum} S0PulseValue
 */
OutputConfigurationContainer.prototype['S0PulseValue'] = undefined;

/**
 * The Type of the output
 * @member {module:model/OutputConfigurationContainer.TypeEnum} Type
 */
OutputConfigurationContainer.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>DigitalOutputNoConnectionAction</code> property.
 * @enum {String}
 * @readonly
 */
OutputConfigurationContainer['DigitalOutputNoConnectionActionEnum'] = {

    /**
     * value: "Nothing"
     * @const
     */
    "Nothing": "Nothing",

    /**
     * value: "TurnOff"
     * @const
     */
    "TurnOff": "TurnOff",

    /**
     * value: "TurnOn"
     * @const
     */
    "TurnOn": "TurnOn",

    /**
     * value: "SetPwmValue"
     * @const
     */
    "SetPwmValue": "SetPwmValue"
};


/**
 * Allowed values for the <code>S0PulseValue</code> property.
 * @enum {String}
 * @readonly
 */
OutputConfigurationContainer['S0PulseValueEnum'] = {

    /**
     * value: "PulseValue1000Kwh"
     * @const
     */
    "PulseValue1000Kwh": "PulseValue1000Kwh",

    /**
     * value: "PulseValue10000Kwh"
     * @const
     */
    "PulseValue10000Kwh": "PulseValue10000Kwh"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
OutputConfigurationContainer['TypeEnum'] = {

    /**
     * value: "ImpulseOutputActiveEnergy"
     * @const
     */
    "ImpulseOutputActiveEnergy": "ImpulseOutputActiveEnergy",

    /**
     * value: "ImpulseOutputActiveEnergyImport"
     * @const
     */
    "ImpulseOutputActiveEnergyImport": "ImpulseOutputActiveEnergyImport",

    /**
     * value: "ImpulseOutputActiveEnergyExport"
     * @const
     */
    "ImpulseOutputActiveEnergyExport": "ImpulseOutputActiveEnergyExport",

    /**
     * value: "ImpulseOutputReactiveEnergy"
     * @const
     */
    "ImpulseOutputReactiveEnergy": "ImpulseOutputReactiveEnergy",

    /**
     * value: "DigitalOutput"
     * @const
     */
    "DigitalOutput": "DigitalOutput",

    /**
     * value: "AnalogPwmSignalOutput"
     * @const
     */
    "AnalogPwmSignalOutput": "AnalogPwmSignalOutput",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default OutputConfigurationContainer;

