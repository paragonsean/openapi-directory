/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDeviceValues from './CustomDeviceValues';

/**
 * The CustomDeviceToPost model module.
 * @module model/CustomDeviceToPost
 * @version v1
 */
class CustomDeviceToPost {
    /**
     * Constructs a new <code>CustomDeviceToPost</code>.
     * Container Class for the Web API
     * @alias module:model/CustomDeviceToPost
     */
    constructor() { 
        
        CustomDeviceToPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomDeviceToPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDeviceToPost} obj Optional instance to populate.
     * @return {module:model/CustomDeviceToPost} The populated <code>CustomDeviceToPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDeviceToPost();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Serial')) {
                obj['Serial'] = ApiClient.convertToType(data['Serial'], 'Number');
            }
            if (data.hasOwnProperty('ValueDate')) {
                obj['ValueDate'] = ApiClient.convertToType(data['ValueDate'], 'Date');
            }
            if (data.hasOwnProperty('Values')) {
                obj['Values'] = ApiClient.convertToType(data['Values'], [CustomDeviceValues]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDeviceToPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDeviceToPost</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['Values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Values'])) {
                throw new Error("Expected the field `Values` to be an array in the JSON data but got " + data['Values']);
            }
            // validate the optional field `Values` (array)
            for (const item of data['Values']) {
                CustomDeviceValues.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the device
 * @member {String} Id
 */
CustomDeviceToPost.prototype['Id'] = undefined;

/**
 * The Name of the Device
 * @member {String} Name
 */
CustomDeviceToPost.prototype['Name'] = undefined;

/**
 * The Serial number
 * @member {Number} Serial
 */
CustomDeviceToPost.prototype['Serial'] = undefined;

/**
 * The Date of the Value (in UTC). If this is null the Server Time is used.
 * @member {Date} ValueDate
 */
CustomDeviceToPost.prototype['ValueDate'] = undefined;

/**
 * The Values of the custom Device
 * @member {Array.<module:model/CustomDeviceValues>} Values
 */
CustomDeviceToPost.prototype['Values'] = undefined;






export default CustomDeviceToPost;

