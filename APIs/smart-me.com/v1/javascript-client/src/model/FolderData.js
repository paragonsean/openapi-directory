/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FolderData model module.
 * @module model/FolderData
 * @version v1
 */
class FolderData {
    /**
     * Constructs a new <code>FolderData</code>.
     * Container class for the folder API
     * @alias module:model/FolderData
     */
    constructor() { 
        
        FolderData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FolderData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FolderData} obj Optional instance to populate.
     * @return {module:model/FolderData} The populated <code>FolderData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FolderData();

            if (data.hasOwnProperty('ElectricityCounterValue')) {
                obj['ElectricityCounterValue'] = ApiClient.convertToType(data['ElectricityCounterValue'], 'Number');
            }
            if (data.hasOwnProperty('ElectricityPower')) {
                obj['ElectricityPower'] = ApiClient.convertToType(data['ElectricityPower'], 'Number');
            }
            if (data.hasOwnProperty('GasCounterValue')) {
                obj['GasCounterValue'] = ApiClient.convertToType(data['GasCounterValue'], 'Number');
            }
            if (data.hasOwnProperty('GasFlowRate')) {
                obj['GasFlowRate'] = ApiClient.convertToType(data['GasFlowRate'], 'Number');
            }
            if (data.hasOwnProperty('HeatCounterValue')) {
                obj['HeatCounterValue'] = ApiClient.convertToType(data['HeatCounterValue'], 'Number');
            }
            if (data.hasOwnProperty('HeatPower')) {
                obj['HeatPower'] = ApiClient.convertToType(data['HeatPower'], 'Number');
            }
            if (data.hasOwnProperty('WaterCounterValue')) {
                obj['WaterCounterValue'] = ApiClient.convertToType(data['WaterCounterValue'], 'Number');
            }
            if (data.hasOwnProperty('WaterFlowRate')) {
                obj['WaterFlowRate'] = ApiClient.convertToType(data['WaterFlowRate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FolderData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FolderData</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The Counter values for electricity (kWh)
 * @member {Number} ElectricityCounterValue
 */
FolderData.prototype['ElectricityCounterValue'] = undefined;

/**
 * The Power for electricity (kW)
 * @member {Number} ElectricityPower
 */
FolderData.prototype['ElectricityPower'] = undefined;

/**
 * The Counter values for Gas (m3)
 * @member {Number} GasCounterValue
 */
FolderData.prototype['GasCounterValue'] = undefined;

/**
 * The Flow Rate for Gas (m3/h)
 * @member {Number} GasFlowRate
 */
FolderData.prototype['GasFlowRate'] = undefined;

/**
 * The Counter values for Heat (kWh)
 * @member {Number} HeatCounterValue
 */
FolderData.prototype['HeatCounterValue'] = undefined;

/**
 * The Power for Heat (kW)
 * @member {Number} HeatPower
 */
FolderData.prototype['HeatPower'] = undefined;

/**
 * The Counter values for Water (m3)
 * @member {Number} WaterCounterValue
 */
FolderData.prototype['WaterCounterValue'] = undefined;

/**
 * The Flow Rate for Water (m3/h)
 * @member {Number} WaterFlowRate
 */
FolderData.prototype['WaterFlowRate'] = undefined;






export default FolderData;

