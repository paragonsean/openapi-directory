/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PicoSettingsDto model module.
 * @module model/PicoSettingsDto
 * @version v1
 */
class PicoSettingsDto {
    /**
     * Constructs a new <code>PicoSettingsDto</code>.
     * DTO for the pico charging station settings
     * @alias module:model/PicoSettingsDto
     */
    constructor() { 
        
        PicoSettingsDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PicoSettingsDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PicoSettingsDto} obj Optional instance to populate.
     * @return {module:model/PicoSettingsDto} The populated <code>PicoSettingsDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PicoSettingsDto();

            if (data.hasOwnProperty('AuthenticationType')) {
                obj['AuthenticationType'] = ApiClient.convertToType(data['AuthenticationType'], 'String');
            }
            if (data.hasOwnProperty('CarIdDetection')) {
                obj['CarIdDetection'] = ApiClient.convertToType(data['CarIdDetection'], 'Boolean');
            }
            if (data.hasOwnProperty('DisplayBrightness')) {
                obj['DisplayBrightness'] = ApiClient.convertToType(data['DisplayBrightness'], 'Blob');
            }
            if (data.hasOwnProperty('DnsName')) {
                obj['DnsName'] = ApiClient.convertToType(data['DnsName'], 'String');
            }
            if (data.hasOwnProperty('FixCableLockEnable')) {
                obj['FixCableLockEnable'] = ApiClient.convertToType(data['FixCableLockEnable'], 'Boolean');
            }
            if (data.hasOwnProperty('IdleImageUrl')) {
                obj['IdleImageUrl'] = ApiClient.convertToType(data['IdleImageUrl'], 'String');
            }
            if (data.hasOwnProperty('InternalIp')) {
                obj['InternalIp'] = ApiClient.convertToType(data['InternalIp'], 'String');
            }
            if (data.hasOwnProperty('LoadmanagementGroupId')) {
                obj['LoadmanagementGroupId'] = ApiClient.convertToType(data['LoadmanagementGroupId'], 'String');
            }
            if (data.hasOwnProperty('MaxCurrent')) {
                obj['MaxCurrent'] = ApiClient.convertToType(data['MaxCurrent'], 'Number');
            }
            if (data.hasOwnProperty('MinCurrent')) {
                obj['MinCurrent'] = ApiClient.convertToType(data['MinCurrent'], 'Number');
            }
            if (data.hasOwnProperty('ModbusTcp')) {
                obj['ModbusTcp'] = ApiClient.convertToType(data['ModbusTcp'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PicoSettingsDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PicoSettingsDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AuthenticationType'] && !(typeof data['AuthenticationType'] === 'string' || data['AuthenticationType'] instanceof String)) {
            throw new Error("Expected the field `AuthenticationType` to be a primitive type in the JSON string but got " + data['AuthenticationType']);
        }
        // ensure the json data is a string
        if (data['DnsName'] && !(typeof data['DnsName'] === 'string' || data['DnsName'] instanceof String)) {
            throw new Error("Expected the field `DnsName` to be a primitive type in the JSON string but got " + data['DnsName']);
        }
        // ensure the json data is a string
        if (data['IdleImageUrl'] && !(typeof data['IdleImageUrl'] === 'string' || data['IdleImageUrl'] instanceof String)) {
            throw new Error("Expected the field `IdleImageUrl` to be a primitive type in the JSON string but got " + data['IdleImageUrl']);
        }
        // ensure the json data is a string
        if (data['InternalIp'] && !(typeof data['InternalIp'] === 'string' || data['InternalIp'] instanceof String)) {
            throw new Error("Expected the field `InternalIp` to be a primitive type in the JSON string but got " + data['InternalIp']);
        }
        // ensure the json data is a string
        if (data['LoadmanagementGroupId'] && !(typeof data['LoadmanagementGroupId'] === 'string' || data['LoadmanagementGroupId'] instanceof String)) {
            throw new Error("Expected the field `LoadmanagementGroupId` to be a primitive type in the JSON string but got " + data['LoadmanagementGroupId']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SerialNumber'] && !(typeof data['SerialNumber'] === 'string' || data['SerialNumber'] instanceof String)) {
            throw new Error("Expected the field `SerialNumber` to be a primitive type in the JSON string but got " + data['SerialNumber']);
        }

        return true;
    }


}



/**
 * The authentication type
 * @member {module:model/PicoSettingsDto.AuthenticationTypeEnum} AuthenticationType
 */
PicoSettingsDto.prototype['AuthenticationType'] = undefined;

/**
 * Flag if the car id detection is enabled
 * @member {Boolean} CarIdDetection
 */
PicoSettingsDto.prototype['CarIdDetection'] = undefined;

/**
 * The Brightness of the LCD Matrix display. 0 = minimum, 255 = maximum
 * @member {Blob} DisplayBrightness
 */
PicoSettingsDto.prototype['DisplayBrightness'] = undefined;

/**
 * The DNS name of the pico's internal ip
 * @member {String} DnsName
 */
PicoSettingsDto.prototype['DnsName'] = undefined;

/**
 * Enable the fix lock of the charging cable
 * @member {Boolean} FixCableLockEnable
 */
PicoSettingsDto.prototype['FixCableLockEnable'] = undefined;

/**
 * The url of the idle image
 * @member {String} IdleImageUrl
 */
PicoSettingsDto.prototype['IdleImageUrl'] = undefined;

/**
 * The internal IP address
 * @member {String} InternalIp
 */
PicoSettingsDto.prototype['InternalIp'] = undefined;

/**
 * The ID of the loadmanagement group
 * @member {String} LoadmanagementGroupId
 */
PicoSettingsDto.prototype['LoadmanagementGroupId'] = undefined;

/**
 * The max current of this station (in A)
 * @member {Number} MaxCurrent
 */
PicoSettingsDto.prototype['MaxCurrent'] = undefined;

/**
 * The max current of this station (in A)
 * @member {Number} MinCurrent
 */
PicoSettingsDto.prototype['MinCurrent'] = undefined;

/**
 * Flag if ModbusTcp is enabled
 * @member {Boolean} ModbusTcp
 */
PicoSettingsDto.prototype['ModbusTcp'] = undefined;

/**
 * The name of the station
 * @member {String} Name
 */
PicoSettingsDto.prototype['Name'] = undefined;

/**
 * The Serial number of the station
 * @member {String} SerialNumber
 */
PicoSettingsDto.prototype['SerialNumber'] = undefined;





/**
 * Allowed values for the <code>AuthenticationType</code> property.
 * @enum {String}
 * @readonly
 */
PicoSettingsDto['AuthenticationTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Backend"
     * @const
     */
    "Backend": "Backend"
};



export default PicoSettingsDto;

