/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AutoExportSettings model module.
 * @module model/AutoExportSettings
 * @version v1
 */
class AutoExportSettings {
    /**
     * Constructs a new <code>AutoExportSettings</code>.
     * Settings for the auto export functionality of a meter
     * @alias module:model/AutoExportSettings
     */
    constructor() { 
        
        AutoExportSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutoExportSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoExportSettings} obj Optional instance to populate.
     * @return {module:model/AutoExportSettings} The populated <code>AutoExportSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoExportSettings();

            if (data.hasOwnProperty('ExportFormat')) {
                obj['ExportFormat'] = ApiClient.convertToType(data['ExportFormat'], 'String');
            }
            if (data.hasOwnProperty('ExportInterval')) {
                obj['ExportInterval'] = ApiClient.convertToType(data['ExportInterval'], 'String');
            }
            if (data.hasOwnProperty('MeterPointId')) {
                obj['MeterPointId'] = ApiClient.convertToType(data['MeterPointId'], 'String');
            }
            if (data.hasOwnProperty('UploadType')) {
                obj['UploadType'] = ApiClient.convertToType(data['UploadType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoExportSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoExportSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ExportFormat'] && !(typeof data['ExportFormat'] === 'string' || data['ExportFormat'] instanceof String)) {
            throw new Error("Expected the field `ExportFormat` to be a primitive type in the JSON string but got " + data['ExportFormat']);
        }
        // ensure the json data is a string
        if (data['ExportInterval'] && !(typeof data['ExportInterval'] === 'string' || data['ExportInterval'] instanceof String)) {
            throw new Error("Expected the field `ExportInterval` to be a primitive type in the JSON string but got " + data['ExportInterval']);
        }
        // ensure the json data is a string
        if (data['MeterPointId'] && !(typeof data['MeterPointId'] === 'string' || data['MeterPointId'] instanceof String)) {
            throw new Error("Expected the field `MeterPointId` to be a primitive type in the JSON string but got " + data['MeterPointId']);
        }
        // ensure the json data is a string
        if (data['UploadType'] && !(typeof data['UploadType'] === 'string' || data['UploadType'] instanceof String)) {
            throw new Error("Expected the field `UploadType` to be a primitive type in the JSON string but got " + data['UploadType']);
        }

        return true;
    }


}



/**
 * The export format
 * @member {String} ExportFormat
 */
AutoExportSettings.prototype['ExportFormat'] = undefined;

/**
 * The export interval of the auto export
 * @member {module:model/AutoExportSettings.ExportIntervalEnum} ExportInterval
 */
AutoExportSettings.prototype['ExportInterval'] = undefined;

/**
 * The meter point id set by the user
 * @member {String} MeterPointId
 */
AutoExportSettings.prototype['MeterPointId'] = undefined;

/**
 * The upload type
 * @member {String} UploadType
 */
AutoExportSettings.prototype['UploadType'] = undefined;





/**
 * Allowed values for the <code>ExportInterval</code> property.
 * @enum {String}
 * @readonly
 */
AutoExportSettings['ExportIntervalEnum'] = {

    /**
     * value: "NoExport"
     * @const
     */
    "NoExport": "NoExport",

    /**
     * value: "Hourly"
     * @const
     */
    "Hourly": "Hourly",

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "QuaterYearly"
     * @const
     */
    "QuaterYearly": "QuaterYearly",

    /**
     * value: "HalfYearly"
     * @const
     */
    "HalfYearly": "HalfYearly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};



export default AutoExportSettings;

