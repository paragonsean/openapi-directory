/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PicoChargingHistoryData model module.
 * @module model/PicoChargingHistoryData
 * @version v1
 */
class PicoChargingHistoryData {
    /**
     * Constructs a new <code>PicoChargingHistoryData</code>.
     * Api container for the charging station history
     * @alias module:model/PicoChargingHistoryData
     */
    constructor() { 
        
        PicoChargingHistoryData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PicoChargingHistoryData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PicoChargingHistoryData} obj Optional instance to populate.
     * @return {module:model/PicoChargingHistoryData} The populated <code>PicoChargingHistoryData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PicoChargingHistoryData();

            if (data.hasOwnProperty('Duration')) {
                obj['Duration'] = ApiClient.convertToType(data['Duration'], 'Number');
            }
            if (data.hasOwnProperty('EnergyUsed')) {
                obj['EnergyUsed'] = ApiClient.convertToType(data['EnergyUsed'], 'Number');
            }
            if (data.hasOwnProperty('StartTime')) {
                obj['StartTime'] = ApiClient.convertToType(data['StartTime'], 'Date');
            }
            if (data.hasOwnProperty('TransactionStopReason')) {
                obj['TransactionStopReason'] = ApiClient.convertToType(data['TransactionStopReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PicoChargingHistoryData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PicoChargingHistoryData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['TransactionStopReason'] && !(typeof data['TransactionStopReason'] === 'string' || data['TransactionStopReason'] instanceof String)) {
            throw new Error("Expected the field `TransactionStopReason` to be a primitive type in the JSON string but got " + data['TransactionStopReason']);
        }

        return true;
    }


}



/**
 * The duration in seconds
 * @member {Number} Duration
 */
PicoChargingHistoryData.prototype['Duration'] = undefined;

/**
 * The energy used (in kWh)
 * @member {Number} EnergyUsed
 */
PicoChargingHistoryData.prototype['EnergyUsed'] = undefined;

/**
 * The starttime of the charging (in UTC)
 * @member {Date} StartTime
 */
PicoChargingHistoryData.prototype['StartTime'] = undefined;

/**
 * @member {module:model/PicoChargingHistoryData.TransactionStopReasonEnum} TransactionStopReason
 */
PicoChargingHistoryData.prototype['TransactionStopReason'] = undefined;





/**
 * Allowed values for the <code>TransactionStopReason</code> property.
 * @enum {String}
 * @readonly
 */
PicoChargingHistoryData['TransactionStopReasonEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "CarDisconnected"
     * @const
     */
    "CarDisconnected": "CarDisconnected",

    /**
     * value: "RemoteStop"
     * @const
     */
    "RemoteStop": "RemoteStop",

    /**
     * value: "ErrorStop"
     * @const
     */
    "ErrorStop": "ErrorStop",

    /**
     * value: "InstallationMode"
     * @const
     */
    "InstallationMode": "InstallationMode",

    /**
     * value: "CableError"
     * @const
     */
    "CableError": "CableError",

    /**
     * value: "DiodeError"
     * @const
     */
    "DiodeError": "DiodeError",

    /**
     * value: "RcdError"
     * @const
     */
    "RcdError": "RcdError",

    /**
     * value: "OverloadError"
     * @const
     */
    "OverloadError": "OverloadError"
};



export default PicoChargingHistoryData;

