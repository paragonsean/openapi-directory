/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualTariff from './VirtualTariff';

/**
 * The VirtualTariffsOfFolder model module.
 * @module model/VirtualTariffsOfFolder
 * @version v1
 */
class VirtualTariffsOfFolder {
    /**
     * Constructs a new <code>VirtualTariffsOfFolder</code>.
     * @alias module:model/VirtualTariffsOfFolder
     */
    constructor() { 
        
        VirtualTariffsOfFolder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualTariffsOfFolder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualTariffsOfFolder} obj Optional instance to populate.
     * @return {module:model/VirtualTariffsOfFolder} The populated <code>VirtualTariffsOfFolder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualTariffsOfFolder();

            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'Date');
            }
            if (data.hasOwnProperty('FolderId')) {
                obj['FolderId'] = ApiClient.convertToType(data['FolderId'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('VirtualTariffs')) {
                obj['VirtualTariffs'] = ApiClient.convertToType(data['VirtualTariffs'], [VirtualTariff]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualTariffsOfFolder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualTariffsOfFolder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['FolderId'] && !(typeof data['FolderId'] === 'string' || data['FolderId'] instanceof String)) {
            throw new Error("Expected the field `FolderId` to be a primitive type in the JSON string but got " + data['FolderId']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['VirtualTariffs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['VirtualTariffs'])) {
                throw new Error("Expected the field `VirtualTariffs` to be an array in the JSON data but got " + data['VirtualTariffs']);
            }
            // validate the optional field `VirtualTariffs` (array)
            for (const item of data['VirtualTariffs']) {
                VirtualTariff.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The DateTime (UTC) of this virtual tarfifs
 * @member {Date} Date
 */
VirtualTariffsOfFolder.prototype['Date'] = undefined;

/**
 * @member {String} FolderId
 */
VirtualTariffsOfFolder.prototype['FolderId'] = undefined;

/**
 * The name of this folder
 * @member {String} Name
 */
VirtualTariffsOfFolder.prototype['Name'] = undefined;

/**
 * @member {Array.<module:model/VirtualTariff>} VirtualTariffs
 */
VirtualTariffsOfFolder.prototype['VirtualTariffs'] = undefined;






export default VirtualTariffsOfFolder;

