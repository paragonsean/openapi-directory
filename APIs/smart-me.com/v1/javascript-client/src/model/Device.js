/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version v1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * Container Class for the Web API
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('ActivePower')) {
                obj['ActivePower'] = ApiClient.convertToType(data['ActivePower'], 'Number');
            }
            if (data.hasOwnProperty('ActivePowerL1')) {
                obj['ActivePowerL1'] = ApiClient.convertToType(data['ActivePowerL1'], 'Number');
            }
            if (data.hasOwnProperty('ActivePowerL2')) {
                obj['ActivePowerL2'] = ApiClient.convertToType(data['ActivePowerL2'], 'Number');
            }
            if (data.hasOwnProperty('ActivePowerL3')) {
                obj['ActivePowerL3'] = ApiClient.convertToType(data['ActivePowerL3'], 'Number');
            }
            if (data.hasOwnProperty('ActivePowerUnit')) {
                obj['ActivePowerUnit'] = ApiClient.convertToType(data['ActivePowerUnit'], 'String');
            }
            if (data.hasOwnProperty('ActiveTariff')) {
                obj['ActiveTariff'] = ApiClient.convertToType(data['ActiveTariff'], 'Number');
            }
            if (data.hasOwnProperty('AdditionalMeterSerialNumber')) {
                obj['AdditionalMeterSerialNumber'] = ApiClient.convertToType(data['AdditionalMeterSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('AnalogOutput1')) {
                obj['AnalogOutput1'] = ApiClient.convertToType(data['AnalogOutput1'], 'Number');
            }
            if (data.hasOwnProperty('AnalogOutput2')) {
                obj['AnalogOutput2'] = ApiClient.convertToType(data['AnalogOutput2'], 'Number');
            }
            if (data.hasOwnProperty('ChargingStationState')) {
                obj['ChargingStationState'] = ApiClient.convertToType(data['ChargingStationState'], 'String');
            }
            if (data.hasOwnProperty('CounterReading')) {
                obj['CounterReading'] = ApiClient.convertToType(data['CounterReading'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExport')) {
                obj['CounterReadingExport'] = ApiClient.convertToType(data['CounterReadingExport'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImport')) {
                obj['CounterReadingImport'] = ApiClient.convertToType(data['CounterReadingImport'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT1')) {
                obj['CounterReadingT1'] = ApiClient.convertToType(data['CounterReadingT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT2')) {
                obj['CounterReadingT2'] = ApiClient.convertToType(data['CounterReadingT2'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT3')) {
                obj['CounterReadingT3'] = ApiClient.convertToType(data['CounterReadingT3'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT4')) {
                obj['CounterReadingT4'] = ApiClient.convertToType(data['CounterReadingT4'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingUnit')) {
                obj['CounterReadingUnit'] = ApiClient.convertToType(data['CounterReadingUnit'], 'String');
            }
            if (data.hasOwnProperty('Current')) {
                obj['Current'] = ApiClient.convertToType(data['Current'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL1')) {
                obj['CurrentL1'] = ApiClient.convertToType(data['CurrentL1'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL2')) {
                obj['CurrentL2'] = ApiClient.convertToType(data['CurrentL2'], 'Number');
            }
            if (data.hasOwnProperty('CurrentL3')) {
                obj['CurrentL3'] = ApiClient.convertToType(data['CurrentL3'], 'Number');
            }
            if (data.hasOwnProperty('DeviceEnergyType')) {
                obj['DeviceEnergyType'] = ApiClient.convertToType(data['DeviceEnergyType'], 'String');
            }
            if (data.hasOwnProperty('DigitalInput1')) {
                obj['DigitalInput1'] = ApiClient.convertToType(data['DigitalInput1'], 'Boolean');
            }
            if (data.hasOwnProperty('DigitalInput2')) {
                obj['DigitalInput2'] = ApiClient.convertToType(data['DigitalInput2'], 'Boolean');
            }
            if (data.hasOwnProperty('DigitalOutput1')) {
                obj['DigitalOutput1'] = ApiClient.convertToType(data['DigitalOutput1'], 'Boolean');
            }
            if (data.hasOwnProperty('DigitalOutput2')) {
                obj['DigitalOutput2'] = ApiClient.convertToType(data['DigitalOutput2'], 'Boolean');
            }
            if (data.hasOwnProperty('FamilyType')) {
                obj['FamilyType'] = ApiClient.convertToType(data['FamilyType'], 'String');
            }
            if (data.hasOwnProperty('FlowRate')) {
                obj['FlowRate'] = ApiClient.convertToType(data['FlowRate'], 'Number');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MeterSubType')) {
                obj['MeterSubType'] = ApiClient.convertToType(data['MeterSubType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PowerFactor')) {
                obj['PowerFactor'] = ApiClient.convertToType(data['PowerFactor'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL1')) {
                obj['PowerFactorL1'] = ApiClient.convertToType(data['PowerFactorL1'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL2')) {
                obj['PowerFactorL2'] = ApiClient.convertToType(data['PowerFactorL2'], 'Number');
            }
            if (data.hasOwnProperty('PowerFactorL3')) {
                obj['PowerFactorL3'] = ApiClient.convertToType(data['PowerFactorL3'], 'Number');
            }
            if (data.hasOwnProperty('Serial')) {
                obj['Serial'] = ApiClient.convertToType(data['Serial'], 'Number');
            }
            if (data.hasOwnProperty('SwitchOn')) {
                obj['SwitchOn'] = ApiClient.convertToType(data['SwitchOn'], 'Boolean');
            }
            if (data.hasOwnProperty('SwitchPhaseL1On')) {
                obj['SwitchPhaseL1On'] = ApiClient.convertToType(data['SwitchPhaseL1On'], 'Boolean');
            }
            if (data.hasOwnProperty('SwitchPhaseL2On')) {
                obj['SwitchPhaseL2On'] = ApiClient.convertToType(data['SwitchPhaseL2On'], 'Boolean');
            }
            if (data.hasOwnProperty('SwitchPhaseL3On')) {
                obj['SwitchPhaseL3On'] = ApiClient.convertToType(data['SwitchPhaseL3On'], 'Boolean');
            }
            if (data.hasOwnProperty('Temperature')) {
                obj['Temperature'] = ApiClient.convertToType(data['Temperature'], 'Number');
            }
            if (data.hasOwnProperty('ValueDate')) {
                obj['ValueDate'] = ApiClient.convertToType(data['ValueDate'], 'Date');
            }
            if (data.hasOwnProperty('Voltage')) {
                obj['Voltage'] = ApiClient.convertToType(data['Voltage'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL1')) {
                obj['VoltageL1'] = ApiClient.convertToType(data['VoltageL1'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL2')) {
                obj['VoltageL2'] = ApiClient.convertToType(data['VoltageL2'], 'Number');
            }
            if (data.hasOwnProperty('VoltageL3')) {
                obj['VoltageL3'] = ApiClient.convertToType(data['VoltageL3'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ActivePowerUnit'] && !(typeof data['ActivePowerUnit'] === 'string' || data['ActivePowerUnit'] instanceof String)) {
            throw new Error("Expected the field `ActivePowerUnit` to be a primitive type in the JSON string but got " + data['ActivePowerUnit']);
        }
        // ensure the json data is a string
        if (data['AdditionalMeterSerialNumber'] && !(typeof data['AdditionalMeterSerialNumber'] === 'string' || data['AdditionalMeterSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `AdditionalMeterSerialNumber` to be a primitive type in the JSON string but got " + data['AdditionalMeterSerialNumber']);
        }
        // ensure the json data is a string
        if (data['ChargingStationState'] && !(typeof data['ChargingStationState'] === 'string' || data['ChargingStationState'] instanceof String)) {
            throw new Error("Expected the field `ChargingStationState` to be a primitive type in the JSON string but got " + data['ChargingStationState']);
        }
        // ensure the json data is a string
        if (data['CounterReadingUnit'] && !(typeof data['CounterReadingUnit'] === 'string' || data['CounterReadingUnit'] instanceof String)) {
            throw new Error("Expected the field `CounterReadingUnit` to be a primitive type in the JSON string but got " + data['CounterReadingUnit']);
        }
        // ensure the json data is a string
        if (data['DeviceEnergyType'] && !(typeof data['DeviceEnergyType'] === 'string' || data['DeviceEnergyType'] instanceof String)) {
            throw new Error("Expected the field `DeviceEnergyType` to be a primitive type in the JSON string but got " + data['DeviceEnergyType']);
        }
        // ensure the json data is a string
        if (data['FamilyType'] && !(typeof data['FamilyType'] === 'string' || data['FamilyType'] instanceof String)) {
            throw new Error("Expected the field `FamilyType` to be a primitive type in the JSON string but got " + data['FamilyType']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['MeterSubType'] && !(typeof data['MeterSubType'] === 'string' || data['MeterSubType'] instanceof String)) {
            throw new Error("Expected the field `MeterSubType` to be a primitive type in the JSON string but got " + data['MeterSubType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}



/**
 * The Actvie Power or current flow rate
 * @member {Number} ActivePower
 */
Device.prototype['ActivePower'] = undefined;

/**
 * The Actvie Power Phase L1
 * @member {Number} ActivePowerL1
 */
Device.prototype['ActivePowerL1'] = undefined;

/**
 * The Actvie Power Phase L2
 * @member {Number} ActivePowerL2
 */
Device.prototype['ActivePowerL2'] = undefined;

/**
 * The Actvie Power Phase L3
 * @member {Number} ActivePowerL3
 */
Device.prototype['ActivePowerL3'] = undefined;

/**
 * The Unit of the Active Power Value
 * @member {String} ActivePowerUnit
 */
Device.prototype['ActivePowerUnit'] = undefined;

/**
 * The Number of the Active Tariff
 * @member {Number} ActiveTariff
 */
Device.prototype['ActiveTariff'] = undefined;

/**
 * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
 * @member {String} AdditionalMeterSerialNumber
 */
Device.prototype['AdditionalMeterSerialNumber'] = undefined;

/**
 * The analog output number 1 (PWM signal) (0 - 32183)
 * @member {Number} AnalogOutput1
 */
Device.prototype['AnalogOutput1'] = undefined;

/**
 * The analog output number 2 (PWM signal) (0 - 32183)
 * @member {Number} AnalogOutput2
 */
Device.prototype['AnalogOutput2'] = undefined;

/**
 * The state of a pico charging station. (Only available for pico charging stations)
 * @member {module:model/Device.ChargingStationStateEnum} ChargingStationState
 */
Device.prototype['ChargingStationState'] = undefined;

/**
 * The Meter Counter Reading (Total Energy used)
 * @member {Number} CounterReading
 */
Device.prototype['CounterReading'] = undefined;

/**
 * The Meter Counter Reading only export
 * @member {Number} CounterReadingExport
 */
Device.prototype['CounterReadingExport'] = undefined;

/**
 * The Meter Counter Reading only import
 * @member {Number} CounterReadingImport
 */
Device.prototype['CounterReadingImport'] = undefined;

/**
 * The Meter Counter Reading Tariff 1
 * @member {Number} CounterReadingT1
 */
Device.prototype['CounterReadingT1'] = undefined;

/**
 * The Meter Counter Reading Tariff 2
 * @member {Number} CounterReadingT2
 */
Device.prototype['CounterReadingT2'] = undefined;

/**
 * The Meter Counter Reading Tariff 3
 * @member {Number} CounterReadingT3
 */
Device.prototype['CounterReadingT3'] = undefined;

/**
 * The Meter Counter Reading Tariff 4
 * @member {Number} CounterReadingT4
 */
Device.prototype['CounterReadingT4'] = undefined;

/**
 * The Unit of the Counter Reading
 * @member {String} CounterReadingUnit
 */
Device.prototype['CounterReadingUnit'] = undefined;

/**
 * The Current (in A)
 * @member {Number} Current
 */
Device.prototype['Current'] = undefined;

/**
 * The Current Phase L1 (in A)
 * @member {Number} CurrentL1
 */
Device.prototype['CurrentL1'] = undefined;

/**
 * The Current Phase L2 (in A)
 * @member {Number} CurrentL2
 */
Device.prototype['CurrentL2'] = undefined;

/**
 * The Current Phase L3 (in A)
 * @member {Number} CurrentL3
 */
Device.prototype['CurrentL3'] = undefined;

/**
 * The Energy Type of this device
 * @member {module:model/Device.DeviceEnergyTypeEnum} DeviceEnergyType
 */
Device.prototype['DeviceEnergyType'] = undefined;

/**
 * The digital input number 1
 * @member {Boolean} DigitalInput1
 */
Device.prototype['DigitalInput1'] = undefined;

/**
 * The digital input number 2
 * @member {Boolean} DigitalInput2
 */
Device.prototype['DigitalInput2'] = undefined;

/**
 * The digital output number 1
 * @member {Boolean} DigitalOutput1
 */
Device.prototype['DigitalOutput1'] = undefined;

/**
 * The digital output number 2
 * @member {Boolean} DigitalOutput2
 */
Device.prototype['DigitalOutput2'] = undefined;

/**
 * The Family Type of the device.
 * @member {module:model/Device.FamilyTypeEnum} FamilyType
 */
Device.prototype['FamilyType'] = undefined;

/**
 * The current flow rate (e.g. m3/h)
 * @member {Number} FlowRate
 */
Device.prototype['FlowRate'] = undefined;

/**
 * The ID of the device
 * @member {String} Id
 */
Device.prototype['Id'] = undefined;

/**
 * The sub meter type (e.g. warmwater or coldwater)
 * @member {module:model/Device.MeterSubTypeEnum} MeterSubType
 */
Device.prototype['MeterSubType'] = undefined;

/**
 * The Name of the Device
 * @member {String} Name
 */
Device.prototype['Name'] = undefined;

/**
 * The Power Factor (cos phi). Range: 0 - 1
 * @member {Number} PowerFactor
 */
Device.prototype['PowerFactor'] = undefined;

/**
 * The Power Factor (cos phi) Phase L1. Range: 0 - 1
 * @member {Number} PowerFactorL1
 */
Device.prototype['PowerFactorL1'] = undefined;

/**
 * The Power Factor (cos phi) Phase L2. Range: 0 - 1
 * @member {Number} PowerFactorL2
 */
Device.prototype['PowerFactorL2'] = undefined;

/**
 * The Power Factor (cos phi) Phase L3. Range: 0 - 1
 * @member {Number} PowerFactorL3
 */
Device.prototype['PowerFactorL3'] = undefined;

/**
 * The Serial number
 * @member {Number} Serial
 */
Device.prototype['Serial'] = undefined;

/**
 * Flag if the Switch is on on this device.
 * @member {Boolean} SwitchOn
 */
Device.prototype['SwitchOn'] = undefined;

/**
 * Flag if the Phase L1 is on on this device.
 * @member {Boolean} SwitchPhaseL1On
 */
Device.prototype['SwitchPhaseL1On'] = undefined;

/**
 * Flag if the Phase L2 is on on this device.
 * @member {Boolean} SwitchPhaseL2On
 */
Device.prototype['SwitchPhaseL2On'] = undefined;

/**
 * Flag if the Phase L3 is on on this device.
 * @member {Boolean} SwitchPhaseL3On
 */
Device.prototype['SwitchPhaseL3On'] = undefined;

/**
 * The Temperature (in degree celsius)
 * @member {Number} Temperature
 */
Device.prototype['Temperature'] = undefined;

/**
 * Time of last successful connection the the smart-me Cloud.
 * @member {Date} ValueDate
 */
Device.prototype['ValueDate'] = undefined;

/**
 * The Voltage (in V)
 * @member {Number} Voltage
 */
Device.prototype['Voltage'] = undefined;

/**
 * The Voltage Phase L1 (in V)
 * @member {Number} VoltageL1
 */
Device.prototype['VoltageL1'] = undefined;

/**
 * The Voltage Phase L2 (in V)
 * @member {Number} VoltageL2
 */
Device.prototype['VoltageL2'] = undefined;

/**
 * The Voltage Phase L3 (in V)
 * @member {Number} VoltageL3
 */
Device.prototype['VoltageL3'] = undefined;





/**
 * Allowed values for the <code>ChargingStationState</code> property.
 * @enum {String}
 * @readonly
 */
Device['ChargingStationStateEnum'] = {

    /**
     * value: "Booting"
     * @const
     */
    "Booting": "Booting",

    /**
     * value: "ReadyNoCarConnected"
     * @const
     */
    "ReadyNoCarConnected": "ReadyNoCarConnected",

    /**
     * value: "ReadyCarConnected"
     * @const
     */
    "ReadyCarConnected": "ReadyCarConnected",

    /**
     * value: "StartedWaitForCar"
     * @const
     */
    "StartedWaitForCar": "StartedWaitForCar",

    /**
     * value: "Charging"
     * @const
     */
    "Charging": "Charging",

    /**
     * value: "Installation"
     * @const
     */
    "Installation": "Installation",

    /**
     * value: "Authorize"
     * @const
     */
    "Authorize": "Authorize",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};


/**
 * Allowed values for the <code>DeviceEnergyType</code> property.
 * @enum {String}
 * @readonly
 */
Device['DeviceEnergyTypeEnum'] = {

    /**
     * value: "MeterTypeUnknown"
     * @const
     */
    "MeterTypeUnknown": "MeterTypeUnknown",

    /**
     * value: "MeterTypeElectricity"
     * @const
     */
    "MeterTypeElectricity": "MeterTypeElectricity",

    /**
     * value: "MeterTypeWater"
     * @const
     */
    "MeterTypeWater": "MeterTypeWater",

    /**
     * value: "MeterTypeGas"
     * @const
     */
    "MeterTypeGas": "MeterTypeGas",

    /**
     * value: "MeterTypeHeat"
     * @const
     */
    "MeterTypeHeat": "MeterTypeHeat",

    /**
     * value: "MeterTypeHCA"
     * @const
     */
    "MeterTypeHCA": "MeterTypeHCA",

    /**
     * value: "MeterTypeAllMeters"
     * @const
     */
    "MeterTypeAllMeters": "MeterTypeAllMeters",

    /**
     * value: "MeterTypeTemperature"
     * @const
     */
    "MeterTypeTemperature": "MeterTypeTemperature",

    /**
     * value: "MeterTypeMBusGateway"
     * @const
     */
    "MeterTypeMBusGateway": "MeterTypeMBusGateway",

    /**
     * value: "MeterTypeRS485Gateway"
     * @const
     */
    "MeterTypeRS485Gateway": "MeterTypeRS485Gateway",

    /**
     * value: "MeterTypeCustomDevice"
     * @const
     */
    "MeterTypeCustomDevice": "MeterTypeCustomDevice",

    /**
     * value: "MeterTypeCompressedAir"
     * @const
     */
    "MeterTypeCompressedAir": "MeterTypeCompressedAir",

    /**
     * value: "MeterTypeSolarLog"
     * @const
     */
    "MeterTypeSolarLog": "MeterTypeSolarLog",

    /**
     * value: "MeterTypeVirtualMeter"
     * @const
     */
    "MeterTypeVirtualMeter": "MeterTypeVirtualMeter",

    /**
     * value: "MeterTypeWMBusGateway"
     * @const
     */
    "MeterTypeWMBusGateway": "MeterTypeWMBusGateway"
};


/**
 * Allowed values for the <code>FamilyType</code> property.
 * @enum {String}
 * @readonly
 */
Device['FamilyTypeEnum'] = {

    /**
     * value: "MeterFamilyTypeUnknown"
     * @const
     */
    "MeterFamilyTypeUnknown": "MeterFamilyTypeUnknown",

    /**
     * value: "MeterFamilyTypeSmartMeConnectV1"
     * @const
     */
    "MeterFamilyTypeSmartMeConnectV1": "MeterFamilyTypeSmartMeConnectV1",

    /**
     * value: "MeterFamiliyTypeSmartMeMeter"
     * @const
     */
    "MeterFamiliyTypeSmartMeMeter": "MeterFamiliyTypeSmartMeMeter",

    /**
     * value: "MeterFamiliyTypeSmartMeMeterWithSwitch"
     * @const
     */
    "MeterFamiliyTypeSmartMeMeterWithSwitch": "MeterFamiliyTypeSmartMeMeterWithSwitch",

    /**
     * value: "MeterFamilyTypeMBusGatewayV1"
     * @const
     */
    "MeterFamilyTypeMBusGatewayV1": "MeterFamilyTypeMBusGatewayV1",

    /**
     * value: "MeterFamilyTypeRS485GatewayV1"
     * @const
     */
    "MeterFamilyTypeRS485GatewayV1": "MeterFamilyTypeRS485GatewayV1",

    /**
     * value: "MeterFamilyTypeKamstrupModule"
     * @const
     */
    "MeterFamilyTypeKamstrupModule": "MeterFamilyTypeKamstrupModule",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseMeter80A"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseMeter80A": "MeterFamilyTypeSmartMe3PhaseMeter80A",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseMeter32A"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseMeter32A": "MeterFamilyTypeSmartMe3PhaseMeter32A",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseTelstarTransformer"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseTelstarTransformer": "MeterFamilyTypeSmartMe3PhaseTelstarTransformer",

    /**
     * value: "MeterFamilyTypeLandisGyrModule"
     * @const
     */
    "MeterFamilyTypeLandisGyrModule": "MeterFamilyTypeLandisGyrModule",

    /**
     * value: "MeterFamilyTypeFnnOpticalModule"
     * @const
     */
    "MeterFamilyTypeFnnOpticalModule": "MeterFamilyTypeFnnOpticalModule",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi": "MeterFamilyTypeSmartMe3PhaseTelstar80AWiFi",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile": "MeterFamilyTypeSmartMe3PhaseTelstar80AMobile",

    /**
     * value: "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi"
     * @const
     */
    "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi": "MeterFamilyTypeSmartMe1PhaseMeter80AV2WiFi",

    /**
     * value: "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi"
     * @const
     */
    "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi": "MeterFamilyTypeSmartMe1PhaseMeter32AV2WiFi",

    /**
     * value: "MeterFamilyTypeSmartMe1PhaseMeter80AGprs"
     * @const
     */
    "MeterFamilyTypeSmartMe1PhaseMeter80AGprs": "MeterFamilyTypeSmartMe1PhaseMeter80AGprs",

    /**
     * value: "MeterFamilyTypeSmartMe1PhaseMeter32AGprs"
     * @const
     */
    "MeterFamilyTypeSmartMe1PhaseMeter32AGprs": "MeterFamilyTypeSmartMe1PhaseMeter32AGprs",

    /**
     * value: "MeterFamilyTypeWMBusGatewayV1"
     * @const
     */
    "MeterFamilyTypeWMBusGatewayV1": "MeterFamilyTypeWMBusGatewayV1",

    /**
     * value: "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile"
     * @const
     */
    "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile": "MeterFamilyTypeSmartMe3PhaseTelstarTransformerMobile",

    /**
     * value: "MeterFamilyTypeMithralHallV1"
     * @const
     */
    "MeterFamilyTypeMithralHallV1": "MeterFamilyTypeMithralHallV1",

    /**
     * value: "MeterFamilyTypeRestApiMeter"
     * @const
     */
    "MeterFamilyTypeRestApiMeter": "MeterFamilyTypeRestApiMeter",

    /**
     * value: "MeterFamilyTypeVirtualBillingMeter"
     * @const
     */
    "MeterFamilyTypeVirtualBillingMeter": "MeterFamilyTypeVirtualBillingMeter"
};


/**
 * Allowed values for the <code>MeterSubType</code> property.
 * @enum {String}
 * @readonly
 */
Device['MeterSubTypeEnum'] = {

    /**
     * value: "MeterSubTypeUnknown"
     * @const
     */
    "MeterSubTypeUnknown": "MeterSubTypeUnknown",

    /**
     * value: "MeterSubTypeCold"
     * @const
     */
    "MeterSubTypeCold": "MeterSubTypeCold",

    /**
     * value: "MeterSubTypeHeat"
     * @const
     */
    "MeterSubTypeHeat": "MeterSubTypeHeat",

    /**
     * value: "MeterSubTypeChargingStation"
     * @const
     */
    "MeterSubTypeChargingStation": "MeterSubTypeChargingStation",

    /**
     * value: "MeterSubTypeElectricity"
     * @const
     */
    "MeterSubTypeElectricity": "MeterSubTypeElectricity",

    /**
     * value: "MeterSubTypeWater"
     * @const
     */
    "MeterSubTypeWater": "MeterSubTypeWater",

    /**
     * value: "MeterSubTypeGas"
     * @const
     */
    "MeterSubTypeGas": "MeterSubTypeGas",

    /**
     * value: "MeterSubTypeElectricityHeat"
     * @const
     */
    "MeterSubTypeElectricityHeat": "MeterSubTypeElectricityHeat",

    /**
     * value: "MeterSubTypeTemperature"
     * @const
     */
    "MeterSubTypeTemperature": "MeterSubTypeTemperature",

    /**
     * value: "MeterSubTypeVirtualBattery"
     * @const
     */
    "MeterSubTypeVirtualBattery": "MeterSubTypeVirtualBattery"
};



export default Device;

