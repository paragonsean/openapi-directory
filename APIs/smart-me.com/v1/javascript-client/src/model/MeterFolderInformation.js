/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputInformation from './InputInformation';
import OutputInformation from './OutputInformation';

/**
 * The MeterFolderInformation model module.
 * @module model/MeterFolderInformation
 * @version v1
 */
class MeterFolderInformation {
    /**
     * Constructs a new <code>MeterFolderInformation</code>.
     * Container Class for the Web API
     * @alias module:model/MeterFolderInformation
     */
    constructor() { 
        
        MeterFolderInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeterFolderInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeterFolderInformation} obj Optional instance to populate.
     * @return {module:model/MeterFolderInformation} The populated <code>MeterFolderInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeterFolderInformation();

            if (data.hasOwnProperty('CommunicationModuleFirmwareVersion')) {
                obj['CommunicationModuleFirmwareVersion'] = ApiClient.convertToType(data['CommunicationModuleFirmwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('CommunicationModuleHardwareVersion')) {
                obj['CommunicationModuleHardwareVersion'] = ApiClient.convertToType(data['CommunicationModuleHardwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('FirmwareVersion')) {
                obj['FirmwareVersion'] = ApiClient.convertToType(data['FirmwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('HardwareVersion')) {
                obj['HardwareVersion'] = ApiClient.convertToType(data['HardwareVersion'], 'Number');
            }
            if (data.hasOwnProperty('InputInformations')) {
                obj['InputInformations'] = ApiClient.convertToType(data['InputInformations'], [InputInformation]);
            }
            if (data.hasOwnProperty('IsFolder')) {
                obj['IsFolder'] = ApiClient.convertToType(data['IsFolder'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OutputInformations')) {
                obj['OutputInformations'] = ApiClient.convertToType(data['OutputInformations'], [OutputInformation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeterFolderInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeterFolderInformation</code>.
     */
    static validateJSON(data) {
        if (data['InputInformations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['InputInformations'])) {
                throw new Error("Expected the field `InputInformations` to be an array in the JSON data but got " + data['InputInformations']);
            }
            // validate the optional field `InputInformations` (array)
            for (const item of data['InputInformations']) {
                InputInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        if (data['OutputInformations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OutputInformations'])) {
                throw new Error("Expected the field `OutputInformations` to be an array in the JSON data but got " + data['OutputInformations']);
            }
            // validate the optional field `OutputInformations` (array)
            for (const item of data['OutputInformations']) {
                OutputInformation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The Version of the Communication Module (if exists)
 * @member {Number} CommunicationModuleFirmwareVersion
 */
MeterFolderInformation.prototype['CommunicationModuleFirmwareVersion'] = undefined;

/**
 * The Version of the Communication Module (if exists)
 * @member {Number} CommunicationModuleHardwareVersion
 */
MeterFolderInformation.prototype['CommunicationModuleHardwareVersion'] = undefined;

/**
 * The Firmware Version of a Meter
 * @member {Number} FirmwareVersion
 */
MeterFolderInformation.prototype['FirmwareVersion'] = undefined;

/**
 * The Hardware Version of a Meter.
 * @member {Number} HardwareVersion
 */
MeterFolderInformation.prototype['HardwareVersion'] = undefined;

/**
 * Informations about the available Inputs
 * @member {Array.<module:model/InputInformation>} InputInformations
 */
MeterFolderInformation.prototype['InputInformations'] = undefined;

/**
 * Flag if it's a Folder or a Meter
 * @member {Boolean} IsFolder
 */
MeterFolderInformation.prototype['IsFolder'] = undefined;

/**
 * Name of the Meter or Folder
 * @member {String} Name
 */
MeterFolderInformation.prototype['Name'] = undefined;

/**
 * Informations about the available Outputs
 * @member {Array.<module:model/OutputInformation>} OutputInformations
 */
MeterFolderInformation.prototype['OutputInformations'] = undefined;






export default MeterFolderInformation;

