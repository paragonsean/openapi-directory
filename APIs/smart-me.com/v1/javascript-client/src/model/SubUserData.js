/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubUserData model module.
 * @module model/SubUserData
 * @version v1
 */
class SubUserData {
    /**
     * Constructs a new <code>SubUserData</code>.
     * Container data for the sub user
     * @alias module:model/SubUserData
     */
    constructor() { 
        
        SubUserData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubUserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubUserData} obj Optional instance to populate.
     * @return {module:model/SubUserData} The populated <code>SubUserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubUserData();

            if (data.hasOwnProperty('AccessEndDate')) {
                obj['AccessEndDate'] = ApiClient.convertToType(data['AccessEndDate'], 'Date');
            }
            if (data.hasOwnProperty('AccessTimeStartDate')) {
                obj['AccessTimeStartDate'] = ApiClient.convertToType(data['AccessTimeStartDate'], 'Date');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('NewPassword')) {
                obj['NewPassword'] = ApiClient.convertToType(data['NewPassword'], 'String');
            }
            if (data.hasOwnProperty('PermissionLevel')) {
                obj['PermissionLevel'] = ApiClient.convertToType(data['PermissionLevel'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubUserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubUserData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['NewPassword'] && !(typeof data['NewPassword'] === 'string' || data['NewPassword'] instanceof String)) {
            throw new Error("Expected the field `NewPassword` to be a primitive type in the JSON string but got " + data['NewPassword']);
        }
        // ensure the json data is a string
        if (data['PermissionLevel'] && !(typeof data['PermissionLevel'] === 'string' || data['PermissionLevel'] instanceof String)) {
            throw new Error("Expected the field `PermissionLevel` to be a primitive type in the JSON string but got " + data['PermissionLevel']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }

        return true;
    }


}



/**
 * The end date. until this date the user has access
 * @member {Date} AccessEndDate
 */
SubUserData.prototype['AccessEndDate'] = undefined;

/**
 * The start date. From this date the user has access
 * @member {Date} AccessTimeStartDate
 */
SubUserData.prototype['AccessTimeStartDate'] = undefined;

/**
 * The Email adress
 * @member {String} Email
 */
SubUserData.prototype['Email'] = undefined;

/**
 * The ID of the user
 * @member {String} Id
 */
SubUserData.prototype['Id'] = undefined;

/**
 * If set this is used a new password
 * @member {String} NewPassword
 */
SubUserData.prototype['NewPassword'] = undefined;

/**
 * The permission level of the user
 * @member {module:model/SubUserData.PermissionLevelEnum} PermissionLevel
 */
SubUserData.prototype['PermissionLevel'] = undefined;

/**
 * The username
 * @member {String} Username
 */
SubUserData.prototype['Username'] = undefined;





/**
 * Allowed values for the <code>PermissionLevel</code> property.
 * @enum {String}
 * @readonly
 */
SubUserData['PermissionLevelEnum'] = {

    /**
     * value: "SelectedFolderAndSubfoldersMeters"
     * @const
     */
    "SelectedFolderAndSubfoldersMeters": "SelectedFolderAndSubfoldersMeters",

    /**
     * value: "SelectedFolderOnly"
     * @const
     */
    "SelectedFolderOnly": "SelectedFolderOnly"
};



export default SubUserData;

