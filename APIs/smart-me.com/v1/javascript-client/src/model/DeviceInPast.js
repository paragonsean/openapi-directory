/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceInPast model module.
 * @module model/DeviceInPast
 * @version v1
 */
class DeviceInPast {
    /**
     * Constructs a new <code>DeviceInPast</code>.
     * Container Class for the Web API. Conatinas the MeterValues in the Past
     * @alias module:model/DeviceInPast
     */
    constructor() { 
        
        DeviceInPast.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceInPast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInPast} obj Optional instance to populate.
     * @return {module:model/DeviceInPast} The populated <code>DeviceInPast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInPast();

            if (data.hasOwnProperty('CounterReading')) {
                obj['CounterReading'] = ApiClient.convertToType(data['CounterReading'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExport')) {
                obj['CounterReadingExport'] = ApiClient.convertToType(data['CounterReadingExport'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT1')) {
                obj['CounterReadingExportT1'] = ApiClient.convertToType(data['CounterReadingExportT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT2')) {
                obj['CounterReadingExportT2'] = ApiClient.convertToType(data['CounterReadingExportT2'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT3')) {
                obj['CounterReadingExportT3'] = ApiClient.convertToType(data['CounterReadingExportT3'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingExportT4')) {
                obj['CounterReadingExportT4'] = ApiClient.convertToType(data['CounterReadingExportT4'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImport')) {
                obj['CounterReadingImport'] = ApiClient.convertToType(data['CounterReadingImport'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImportT1')) {
                obj['CounterReadingImportT1'] = ApiClient.convertToType(data['CounterReadingImportT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImportT2')) {
                obj['CounterReadingImportT2'] = ApiClient.convertToType(data['CounterReadingImportT2'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImportT3')) {
                obj['CounterReadingImportT3'] = ApiClient.convertToType(data['CounterReadingImportT3'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingImportT4')) {
                obj['CounterReadingImportT4'] = ApiClient.convertToType(data['CounterReadingImportT4'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT1')) {
                obj['CounterReadingT1'] = ApiClient.convertToType(data['CounterReadingT1'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT2')) {
                obj['CounterReadingT2'] = ApiClient.convertToType(data['CounterReadingT2'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT3')) {
                obj['CounterReadingT3'] = ApiClient.convertToType(data['CounterReadingT3'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingT4')) {
                obj['CounterReadingT4'] = ApiClient.convertToType(data['CounterReadingT4'], 'Number');
            }
            if (data.hasOwnProperty('CounterReadingUnit')) {
                obj['CounterReadingUnit'] = ApiClient.convertToType(data['CounterReadingUnit'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'Date');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Serial')) {
                obj['Serial'] = ApiClient.convertToType(data['Serial'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInPast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInPast</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CounterReadingUnit'] && !(typeof data['CounterReadingUnit'] === 'string' || data['CounterReadingUnit'] instanceof String)) {
            throw new Error("Expected the field `CounterReadingUnit` to be a primitive type in the JSON string but got " + data['CounterReadingUnit']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }

        return true;
    }


}



/**
 * The Meter Counter Reading (Total Energy used)
 * @member {Number} CounterReading
 */
DeviceInPast.prototype['CounterReading'] = undefined;

/**
 * The Meter Counter Reading Export
 * @member {Number} CounterReadingExport
 */
DeviceInPast.prototype['CounterReadingExport'] = undefined;

/**
 * The Meter Counter Reading Export Tariff 1
 * @member {Number} CounterReadingExportT1
 */
DeviceInPast.prototype['CounterReadingExportT1'] = undefined;

/**
 * The Meter Counter Reading Export Tariff 2
 * @member {Number} CounterReadingExportT2
 */
DeviceInPast.prototype['CounterReadingExportT2'] = undefined;

/**
 * The Meter Counter Reading Export Tariff 3
 * @member {Number} CounterReadingExportT3
 */
DeviceInPast.prototype['CounterReadingExportT3'] = undefined;

/**
 * The Meter Counter Reading Export Tariff 4
 * @member {Number} CounterReadingExportT4
 */
DeviceInPast.prototype['CounterReadingExportT4'] = undefined;

/**
 * The Meter Counter Reading Import
 * @member {Number} CounterReadingImport
 */
DeviceInPast.prototype['CounterReadingImport'] = undefined;

/**
 * The Meter Counter Reading Import Tariff 1
 * @member {Number} CounterReadingImportT1
 */
DeviceInPast.prototype['CounterReadingImportT1'] = undefined;

/**
 * The Meter Counter Reading Import Tariff 2
 * @member {Number} CounterReadingImportT2
 */
DeviceInPast.prototype['CounterReadingImportT2'] = undefined;

/**
 * The Meter Counter Reading Import Tariff 3
 * @member {Number} CounterReadingImportT3
 */
DeviceInPast.prototype['CounterReadingImportT3'] = undefined;

/**
 * The Meter Counter Reading Import Tariff 4
 * @member {Number} CounterReadingImportT4
 */
DeviceInPast.prototype['CounterReadingImportT4'] = undefined;

/**
 * The Meter Counter Reading Tariff 1
 * @member {Number} CounterReadingT1
 */
DeviceInPast.prototype['CounterReadingT1'] = undefined;

/**
 * The Meter Counter Reading Tariff 2
 * @member {Number} CounterReadingT2
 */
DeviceInPast.prototype['CounterReadingT2'] = undefined;

/**
 * The Meter Counter Reading Tariff 3
 * @member {Number} CounterReadingT3
 */
DeviceInPast.prototype['CounterReadingT3'] = undefined;

/**
 * The Meter Counter Reading Tariff 4
 * @member {Number} CounterReadingT4
 */
DeviceInPast.prototype['CounterReadingT4'] = undefined;

/**
 * The Unit of the Counter Reading
 * @member {String} CounterReadingUnit
 */
DeviceInPast.prototype['CounterReadingUnit'] = undefined;

/**
 * The Date of the Values
 * @member {Date} Date
 */
DeviceInPast.prototype['Date'] = undefined;

/**
 * The ID of the device
 * @member {String} Id
 */
DeviceInPast.prototype['Id'] = undefined;

/**
 * The Serial number
 * @member {Number} Serial
 */
DeviceInPast.prototype['Serial'] = undefined;






export default DeviceInPast;

