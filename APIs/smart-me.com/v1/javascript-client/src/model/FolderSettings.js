/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FolderSettings model module.
 * @module model/FolderSettings
 * @version v1
 */
class FolderSettings {
    /**
     * Constructs a new <code>FolderSettings</code>.
     * Container for the folder settings
     * @alias module:model/FolderSettings
     */
    constructor() { 
        
        FolderSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FolderSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FolderSettings} obj Optional instance to populate.
     * @return {module:model/FolderSettings} The populated <code>FolderSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FolderSettings();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Enable')) {
                obj['Enable'] = ApiClient.convertToType(data['Enable'], 'Boolean');
            }
            if (data.hasOwnProperty('FolderType')) {
                obj['FolderType'] = ApiClient.convertToType(data['FolderType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ParentFolderId')) {
                obj['ParentFolderId'] = ApiClient.convertToType(data['ParentFolderId'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'Number');
            }
            if (data.hasOwnProperty('UseableForVirtualBillingMeters')) {
                obj['UseableForVirtualBillingMeters'] = ApiClient.convertToType(data['UseableForVirtualBillingMeters'], 'Boolean');
            }
            if (data.hasOwnProperty('ValueCorrection')) {
                obj['ValueCorrection'] = ApiClient.convertToType(data['ValueCorrection'], 'Number');
            }
            if (data.hasOwnProperty('ValueCorrectionParentFolder')) {
                obj['ValueCorrectionParentFolder'] = ApiClient.convertToType(data['ValueCorrectionParentFolder'], 'Number');
            }
            if (data.hasOwnProperty('VisualizationName')) {
                obj['VisualizationName'] = ApiClient.convertToType(data['VisualizationName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FolderSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FolderSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['FolderType'] && !(typeof data['FolderType'] === 'string' || data['FolderType'] instanceof String)) {
            throw new Error("Expected the field `FolderType` to be a primitive type in the JSON string but got " + data['FolderType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ParentFolderId'] && !(typeof data['ParentFolderId'] === 'string' || data['ParentFolderId'] instanceof String)) {
            throw new Error("Expected the field `ParentFolderId` to be a primitive type in the JSON string but got " + data['ParentFolderId']);
        }
        // ensure the json data is a string
        if (data['VisualizationName'] && !(typeof data['VisualizationName'] === 'string' || data['VisualizationName'] instanceof String)) {
            throw new Error("Expected the field `VisualizationName` to be a primitive type in the JSON string but got " + data['VisualizationName']);
        }

        return true;
    }


}



/**
 * The Description of the folder or meter
 * @member {String} Description
 */
FolderSettings.prototype['Description'] = undefined;

/**
 * Flag if the meter is enabled (folder not supported yet)
 * @member {Boolean} Enable
 */
FolderSettings.prototype['Enable'] = undefined;

/**
 * The Type of the folder
 * @member {module:model/FolderSettings.FolderTypeEnum} FolderType
 */
FolderSettings.prototype['FolderType'] = undefined;

/**
 * The Name of the folder or meter
 * @member {String} Name
 */
FolderSettings.prototype['Name'] = undefined;

/**
 * The parent folder ID of this item
 * @member {String} ParentFolderId
 */
FolderSettings.prototype['ParentFolderId'] = undefined;

/**
 * The serial number (meter only)
 * @member {Number} SerialNumber
 */
FolderSettings.prototype['SerialNumber'] = undefined;

/**
 * Flag if the meter is usable for virtual billing meters (e.g. washroom)
 * @member {Boolean} UseableForVirtualBillingMeters
 */
FolderSettings.prototype['UseableForVirtualBillingMeters'] = undefined;

/**
 * The value correction on this meter
 * @member {Number} ValueCorrection
 */
FolderSettings.prototype['ValueCorrection'] = undefined;

/**
 * The value correction on all parent folders. but not on the meter itself
 * @member {Number} ValueCorrectionParentFolder
 */
FolderSettings.prototype['ValueCorrectionParentFolder'] = undefined;

/**
 * The name of the visualization of the folder
 * @member {String} VisualizationName
 */
FolderSettings.prototype['VisualizationName'] = undefined;





/**
 * Allowed values for the <code>FolderType</code> property.
 * @enum {String}
 * @readonly
 */
FolderSettings['FolderTypeEnum'] = {

    /**
     * value: "Folder"
     * @const
     */
    "Folder": "Folder",

    /**
     * value: "Location"
     * @const
     */
    "Location": "Location",

    /**
     * value: "Factory"
     * @const
     */
    "Factory": "Factory",

    /**
     * value: "House"
     * @const
     */
    "House": "House",

    /**
     * value: "Office"
     * @const
     */
    "Office": "Office",

    /**
     * value: "Machine"
     * @const
     */
    "Machine": "Machine",

    /**
     * value: "VirtualMeter"
     * @const
     */
    "VirtualMeter": "VirtualMeter",

    /**
     * value: "ElecticityFolder"
     * @const
     */
    "ElecticityFolder": "ElecticityFolder",

    /**
     * value: "WaterFolder"
     * @const
     */
    "WaterFolder": "WaterFolder",

    /**
     * value: "HeatFolder"
     * @const
     */
    "HeatFolder": "HeatFolder",

    /**
     * value: "GasFolder"
     * @const
     */
    "GasFolder": "GasFolder",

    /**
     * value: "TemperatureFolder"
     * @const
     */
    "TemperatureFolder": "TemperatureFolder",

    /**
     * value: "Sun"
     * @const
     */
    "Sun": "Sun",

    /**
     * value: "Light"
     * @const
     */
    "Light": "Light",

    /**
     * value: "Ice"
     * @const
     */
    "Ice": "Ice",

    /**
     * value: "Sofa"
     * @const
     */
    "Sofa": "Sofa",

    /**
     * value: "Food"
     * @const
     */
    "Food": "Food",

    /**
     * value: "Coffee"
     * @const
     */
    "Coffee": "Coffee",

    /**
     * value: "Car"
     * @const
     */
    "Car": "Car",

    /**
     * value: "ChargingStation"
     * @const
     */
    "ChargingStation": "ChargingStation",

    /**
     * value: "Meter"
     * @const
     */
    "Meter": "Meter",

    /**
     * value: "User"
     * @const
     */
    "User": "User",

    /**
     * value: "Trash"
     * @const
     */
    "Trash": "Trash",

    /**
     * value: "GridPhotovoltaicPowerSystem"
     * @const
     */
    "GridPhotovoltaicPowerSystem": "GridPhotovoltaicPowerSystem"
};



export default FolderSettings;

