/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessTokenToPut model module.
 * @module model/AccessTokenToPut
 * @version v1
 */
class AccessTokenToPut {
    /**
     * Constructs a new <code>AccessTokenToPut</code>.
     * Container Class for the Put action of an Access Token
     * @alias module:model/AccessTokenToPut
     */
    constructor() { 
        
        AccessTokenToPut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccessTokenToPut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessTokenToPut} obj Optional instance to populate.
     * @return {module:model/AccessTokenToPut} The populated <code>AccessTokenToPut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessTokenToPut();

            if (data.hasOwnProperty('CardId')) {
                obj['CardId'] = ApiClient.convertToType(data['CardId'], 'Number');
            }
            if (data.hasOwnProperty('UserId')) {
                obj['UserId'] = ApiClient.convertToType(data['UserId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessTokenToPut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessTokenToPut</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The ID of the Card
 * @member {Number} CardId
 */
AccessTokenToPut.prototype['CardId'] = undefined;

/**
 * The ID of the User. The credentials provided must have permission to edit the user.              If no ID is provided, the user in the credentials is taken.
 * @member {Number} UserId
 */
AccessTokenToPut.prototype['UserId'] = undefined;






export default AccessTokenToPut;

