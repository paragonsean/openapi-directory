/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionToPostItem from './ActionToPostItem';

/**
 * The ActionToPost model module.
 * @module model/ActionToPost
 * @version v1
 */
class ActionToPost {
    /**
     * Constructs a new <code>ActionToPost</code>.
     * Container Class for an action to post
     * @alias module:model/ActionToPost
     */
    constructor() { 
        
        ActionToPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActionToPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionToPost} obj Optional instance to populate.
     * @return {module:model/ActionToPost} The populated <code>ActionToPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionToPost();

            if (data.hasOwnProperty('Actions')) {
                obj['Actions'] = ApiClient.convertToType(data['Actions'], [ActionToPostItem]);
            }
            if (data.hasOwnProperty('DeviceID')) {
                obj['DeviceID'] = ApiClient.convertToType(data['DeviceID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionToPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionToPost</code>.
     */
    static validateJSON(data) {
        if (data['Actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Actions'])) {
                throw new Error("Expected the field `Actions` to be an array in the JSON data but got " + data['Actions']);
            }
            // validate the optional field `Actions` (array)
            for (const item of data['Actions']) {
                ActionToPostItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['DeviceID'] && !(typeof data['DeviceID'] === 'string' || data['DeviceID'] instanceof String)) {
            throw new Error("Expected the field `DeviceID` to be a primitive type in the JSON string but got " + data['DeviceID']);
        }

        return true;
    }


}



/**
 * List with all Actions for this device
 * @member {Array.<module:model/ActionToPostItem>} Actions
 */
ActionToPost.prototype['Actions'] = undefined;

/**
 * The ID of the Device
 * @member {String} DeviceID
 */
ActionToPost.prototype['DeviceID'] = undefined;






export default ActionToPost;

