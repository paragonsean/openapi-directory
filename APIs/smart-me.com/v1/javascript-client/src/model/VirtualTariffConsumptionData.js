/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualTariffConsumptionData model module.
 * @module model/VirtualTariffConsumptionData
 * @version v1
 */
class VirtualTariffConsumptionData {
    /**
     * Constructs a new <code>VirtualTariffConsumptionData</code>.
     * Container class for the virtual tariff consumption
     * @alias module:model/VirtualTariffConsumptionData
     */
    constructor() { 
        
        VirtualTariffConsumptionData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualTariffConsumptionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualTariffConsumptionData} obj Optional instance to populate.
     * @return {module:model/VirtualTariffConsumptionData} The populated <code>VirtualTariffConsumptionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualTariffConsumptionData();

            if (data.hasOwnProperty('Consumption')) {
                obj['Consumption'] = ApiClient.convertToType(data['Consumption'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('TariffType')) {
                obj['TariffType'] = ApiClient.convertToType(data['TariffType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualTariffConsumptionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualTariffConsumptionData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['TariffType'] && !(typeof data['TariffType'] === 'string' || data['TariffType'] instanceof String)) {
            throw new Error("Expected the field `TariffType` to be a primitive type in the JSON string but got " + data['TariffType']);
        }

        return true;
    }


}



/**
 * The consumption (e.g. kWh) of this tariff
 * @member {Number} Consumption
 */
VirtualTariffConsumptionData.prototype['Consumption'] = undefined;

/**
 * The currency of the price
 * @member {String} Currency
 */
VirtualTariffConsumptionData.prototype['Currency'] = undefined;

/**
 * The Name of this virtual tariff
 * @member {String} Name
 */
VirtualTariffConsumptionData.prototype['Name'] = undefined;

/**
 * The price of the energy in this timerange
 * @member {Number} Price
 */
VirtualTariffConsumptionData.prototype['Price'] = undefined;

/**
 * The type of the virtual tariff (e.g. solar)
 * @member {module:model/VirtualTariffConsumptionData.TariffTypeEnum} TariffType
 */
VirtualTariffConsumptionData.prototype['TariffType'] = undefined;





/**
 * Allowed values for the <code>TariffType</code> property.
 * @enum {String}
 * @readonly
 */
VirtualTariffConsumptionData['TariffTypeEnum'] = {

    /**
     * value: "Battery"
     * @const
     */
    "Battery": "Battery",

    /**
     * value: "Solar"
     * @const
     */
    "Solar": "Solar",

    /**
     * value: "Normal"
     * @const
     */
    "Normal": "Normal"
};



export default VirtualTariffConsumptionData;

