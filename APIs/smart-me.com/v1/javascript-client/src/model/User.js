/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version v1
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * Container Class for the Web API
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('ChildUsers')) {
                obj['ChildUsers'] = ApiClient.convertToType(data['ChildUsers'], [User]);
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('IdAsString')) {
                obj['IdAsString'] = ApiClient.convertToType(data['IdAsString'], 'String');
            }
            if (data.hasOwnProperty('IsAdmin')) {
                obj['IsAdmin'] = ApiClient.convertToType(data['IsAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('Permissions')) {
                obj['Permissions'] = ApiClient.convertToType(data['Permissions'], ['String']);
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        if (data['ChildUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ChildUsers'])) {
                throw new Error("Expected the field `ChildUsers` to be an array in the JSON data but got " + data['ChildUsers']);
            }
            // validate the optional field `ChildUsers` (array)
            for (const item of data['ChildUsers']) {
                User.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['IdAsString'] && !(typeof data['IdAsString'] === 'string' || data['IdAsString'] instanceof String)) {
            throw new Error("Expected the field `IdAsString` to be a primitive type in the JSON string but got " + data['IdAsString']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Permissions'])) {
            throw new Error("Expected the field `Permissions` to be an array in the JSON data but got " + data['Permissions']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }

        return true;
    }


}



/**
 * The Users created by this users.
 * @member {Array.<module:model/User>} ChildUsers
 */
User.prototype['ChildUsers'] = undefined;

/**
 * The EMail Address of the User
 * @member {String} Email
 */
User.prototype['Email'] = undefined;

/**
 * The ID of the User
 * @member {Number} Id
 */
User.prototype['Id'] = undefined;

/**
 * The ID of the user as string
 * @member {String} IdAsString
 */
User.prototype['IdAsString'] = undefined;

/**
 * Flag if this User is an Admin User
 * @member {Boolean} IsAdmin
 */
User.prototype['IsAdmin'] = undefined;

/**
 * Additional Permissions
 * @member {Array.<String>} Permissions
 */
User.prototype['Permissions'] = undefined;

/**
 * The Username of the User
 * @member {String} Username
 */
User.prototype['Username'] = undefined;






export default User;

