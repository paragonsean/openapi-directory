/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PicoChargingData model module.
 * @module model/PicoChargingData
 * @version v1
 */
class PicoChargingData {
    /**
     * Constructs a new <code>PicoChargingData</code>.
     * Container class for the pico charging station API
     * @alias module:model/PicoChargingData
     */
    constructor() { 
        
        PicoChargingData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PicoChargingData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PicoChargingData} obj Optional instance to populate.
     * @return {module:model/PicoChargingData} The populated <code>PicoChargingData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PicoChargingData();

            if (data.hasOwnProperty('ActiveChargingEnergy')) {
                obj['ActiveChargingEnergy'] = ApiClient.convertToType(data['ActiveChargingEnergy'], 'Number');
            }
            if (data.hasOwnProperty('ActiveChargingPower')) {
                obj['ActiveChargingPower'] = ApiClient.convertToType(data['ActiveChargingPower'], 'Number');
            }
            if (data.hasOwnProperty('ConnectionMode')) {
                obj['ConnectionMode'] = ApiClient.convertToType(data['ConnectionMode'], 'String');
            }
            if (data.hasOwnProperty('Duration')) {
                obj['Duration'] = ApiClient.convertToType(data['Duration'], 'Number');
            }
            if (data.hasOwnProperty('LastWarningOrError')) {
                obj['LastWarningOrError'] = ApiClient.convertToType(data['LastWarningOrError'], 'String');
            }
            if (data.hasOwnProperty('LastWarningOrErrorMessage')) {
                obj['LastWarningOrErrorMessage'] = ApiClient.convertToType(data['LastWarningOrErrorMessage'], 'String');
            }
            if (data.hasOwnProperty('LastWarningOrErrorTime')) {
                obj['LastWarningOrErrorTime'] = ApiClient.convertToType(data['LastWarningOrErrorTime'], 'Date');
            }
            if (data.hasOwnProperty('LoadSheddingState')) {
                obj['LoadSheddingState'] = ApiClient.convertToType(data['LoadSheddingState'], 'String');
            }
            if (data.hasOwnProperty('LoadmanagementGroupName')) {
                obj['LoadmanagementGroupName'] = ApiClient.convertToType(data['LoadmanagementGroupName'], 'String');
            }
            if (data.hasOwnProperty('MaxAllowedChargingCurrent')) {
                obj['MaxAllowedChargingCurrent'] = ApiClient.convertToType(data['MaxAllowedChargingCurrent'], 'Number');
            }
            if (data.hasOwnProperty('MaxDynamicCurrent')) {
                obj['MaxDynamicCurrent'] = ApiClient.convertToType(data['MaxDynamicCurrent'], 'Number');
            }
            if (data.hasOwnProperty('MaxLoadmanagementGroupCurrent')) {
                obj['MaxLoadmanagementGroupCurrent'] = ApiClient.convertToType(data['MaxLoadmanagementGroupCurrent'], 'Number');
            }
            if (data.hasOwnProperty('MaxStationCurrent')) {
                obj['MaxStationCurrent'] = ApiClient.convertToType(data['MaxStationCurrent'], 'Number');
            }
            if (data.hasOwnProperty('MinStationCurrent')) {
                obj['MinStationCurrent'] = ApiClient.convertToType(data['MinStationCurrent'], 'Number');
            }
            if (data.hasOwnProperty('RSSI')) {
                obj['RSSI'] = ApiClient.convertToType(data['RSSI'], 'Number');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('ValueDate')) {
                obj['ValueDate'] = ApiClient.convertToType(data['ValueDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PicoChargingData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PicoChargingData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ConnectionMode'] && !(typeof data['ConnectionMode'] === 'string' || data['ConnectionMode'] instanceof String)) {
            throw new Error("Expected the field `ConnectionMode` to be a primitive type in the JSON string but got " + data['ConnectionMode']);
        }
        // ensure the json data is a string
        if (data['LastWarningOrError'] && !(typeof data['LastWarningOrError'] === 'string' || data['LastWarningOrError'] instanceof String)) {
            throw new Error("Expected the field `LastWarningOrError` to be a primitive type in the JSON string but got " + data['LastWarningOrError']);
        }
        // ensure the json data is a string
        if (data['LastWarningOrErrorMessage'] && !(typeof data['LastWarningOrErrorMessage'] === 'string' || data['LastWarningOrErrorMessage'] instanceof String)) {
            throw new Error("Expected the field `LastWarningOrErrorMessage` to be a primitive type in the JSON string but got " + data['LastWarningOrErrorMessage']);
        }
        // ensure the json data is a string
        if (data['LoadSheddingState'] && !(typeof data['LoadSheddingState'] === 'string' || data['LoadSheddingState'] instanceof String)) {
            throw new Error("Expected the field `LoadSheddingState` to be a primitive type in the JSON string but got " + data['LoadSheddingState']);
        }
        // ensure the json data is a string
        if (data['LoadmanagementGroupName'] && !(typeof data['LoadmanagementGroupName'] === 'string' || data['LoadmanagementGroupName'] instanceof String)) {
            throw new Error("Expected the field `LoadmanagementGroupName` to be a primitive type in the JSON string but got " + data['LoadmanagementGroupName']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }

        return true;
    }


}



/**
 * The energy used by this active charging (in kWh)
 * @member {Number} ActiveChargingEnergy
 */
PicoChargingData.prototype['ActiveChargingEnergy'] = undefined;

/**
 * The power of the active charging (in kW)
 * @member {Number} ActiveChargingPower
 */
PicoChargingData.prototype['ActiveChargingPower'] = undefined;

/**
 * The mode how this station is connected to the cloud
 * @member {module:model/PicoChargingData.ConnectionModeEnum} ConnectionMode
 */
PicoChargingData.prototype['ConnectionMode'] = undefined;

/**
 * The duration of this charging in seconds
 * @member {Number} Duration
 */
PicoChargingData.prototype['Duration'] = undefined;

/**
 * The last warning or error of the station. This message is only shown if the warning or error happend in the last 5 minutes.
 * @member {module:model/PicoChargingData.LastWarningOrErrorEnum} LastWarningOrError
 */
PicoChargingData.prototype['LastWarningOrError'] = undefined;

/**
 * The message of the last warning or error of the station.
 * @member {String} LastWarningOrErrorMessage
 */
PicoChargingData.prototype['LastWarningOrErrorMessage'] = undefined;

/**
 * The time when the LastWarningOrError happend
 * @member {Date} LastWarningOrErrorTime
 */
PicoChargingData.prototype['LastWarningOrErrorTime'] = undefined;

/**
 * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
 * @member {module:model/PicoChargingData.LoadSheddingStateEnum} LoadSheddingState
 */
PicoChargingData.prototype['LoadSheddingState'] = undefined;

/**
 * The name of the loadmanagement group. Or string.empty if the station is not in a group
 * @member {String} LoadmanagementGroupName
 */
PicoChargingData.prototype['LoadmanagementGroupName'] = undefined;

/**
 * Max allowed charging current in A
 * @member {Number} MaxAllowedChargingCurrent
 */
PicoChargingData.prototype['MaxAllowedChargingCurrent'] = undefined;

/**
 * Max. dynamic current (e.g. set over API or Modbus TCP) of this station or the loadmanagement group of the station if the station is in a group. in A
 * @member {Number} MaxDynamicCurrent
 */
PicoChargingData.prototype['MaxDynamicCurrent'] = undefined;

/**
 * Max. current of the loadmanagement group of this station (if there is any) in A
 * @member {Number} MaxLoadmanagementGroupCurrent
 */
PicoChargingData.prototype['MaxLoadmanagementGroupCurrent'] = undefined;

/**
 * Max. current of the station in A
 * @member {Number} MaxStationCurrent
 */
PicoChargingData.prototype['MaxStationCurrent'] = undefined;

/**
 * Min. current of the station in A
 * @member {Number} MinStationCurrent
 */
PicoChargingData.prototype['MinStationCurrent'] = undefined;

/**
 * Received Signal Strength Indicator for the connection mode (wifi or mobile).               -127 (min) to 0 (Max)
 * @member {Number} RSSI
 */
PicoChargingData.prototype['RSSI'] = undefined;

/**
 * The state of the charging station
 * @member {module:model/PicoChargingData.StateEnum} State
 */
PicoChargingData.prototype['State'] = undefined;

/**
 * The date of this values
 * @member {Date} ValueDate
 */
PicoChargingData.prototype['ValueDate'] = undefined;





/**
 * Allowed values for the <code>ConnectionMode</code> property.
 * @enum {String}
 * @readonly
 */
PicoChargingData['ConnectionModeEnum'] = {

    /**
     * value: "NetworkToCloudConnectionMode_NoConnection"
     * @const
     */
    "NoConnection": "NetworkToCloudConnectionMode_NoConnection",

    /**
     * value: "NetworkToCloudConnectionMode_DirectWiFiConnection"
     * @const
     */
    "DirectWiFiConnection": "NetworkToCloudConnectionMode_DirectWiFiConnection",

    /**
     * value: "NetworkToCloudConnectionMode_GPRSConnection"
     * @const
     */
    "GPRSConnection": "NetworkToCloudConnectionMode_GPRSConnection",

    /**
     * value: "NetworkToCloudConnectionMode_NBIotConnection"
     * @const
     */
    "NBIotConnection": "NetworkToCloudConnectionMode_NBIotConnection",

    /**
     * value: "NetworkToCloudConnectionMode_LteCatM1Connection"
     * @const
     */
    "LteCatM1Connection": "NetworkToCloudConnectionMode_LteCatM1Connection",

    /**
     * value: "NetworkToCloudConnectionMode_MeshWiFiConnection"
     * @const
     */
    "MeshWiFiConnection": "NetworkToCloudConnectionMode_MeshWiFiConnection",

    /**
     * value: "NetworkToCloudConnectionMode_MeshMobileConnection"
     * @const
     */
    "MeshMobileConnection": "NetworkToCloudConnectionMode_MeshMobileConnection"
};


/**
 * Allowed values for the <code>LastWarningOrError</code> property.
 * @enum {String}
 * @readonly
 */
PicoChargingData['LastWarningOrErrorEnum'] = {

    /**
     * value: "MeterDataloggerEvent"
     * @const
     */
    "MeterDataloggerEvent": "MeterDataloggerEvent",

    /**
     * value: "MeterRestart"
     * @const
     */
    "MeterRestart": "MeterRestart",

    /**
     * value: "PowerDown"
     * @const
     */
    "PowerDown": "PowerDown",

    /**
     * value: "MissingPhaseL1"
     * @const
     */
    "MissingPhaseL1": "MissingPhaseL1",

    /**
     * value: "MissingPhaseL2"
     * @const
     */
    "MissingPhaseL2": "MissingPhaseL2",

    /**
     * value: "MissingPhaseL3"
     * @const
     */
    "MissingPhaseL3": "MissingPhaseL3",

    /**
     * value: "TamperDetectionCover"
     * @const
     */
    "TamperDetectionCover": "TamperDetectionCover",

    /**
     * value: "MagneticFieldDetection"
     * @const
     */
    "MagneticFieldDetection": "MagneticFieldDetection",

    /**
     * value: "ClockAdjusted"
     * @const
     */
    "ClockAdjusted": "ClockAdjusted",

    /**
     * value: "Overvoltage"
     * @const
     */
    "Overvoltage": "Overvoltage",

    /**
     * value: "Undervoltage"
     * @const
     */
    "Undervoltage": "Undervoltage",

    /**
     * value: "OvervoltageL1"
     * @const
     */
    "OvervoltageL1": "OvervoltageL1",

    /**
     * value: "OvervoltageL2"
     * @const
     */
    "OvervoltageL2": "OvervoltageL2",

    /**
     * value: "OvervoltageL3"
     * @const
     */
    "OvervoltageL3": "OvervoltageL3",

    /**
     * value: "ChargingTransaction"
     * @const
     */
    "ChargingTransaction": "ChargingTransaction",

    /**
     * value: "PicoErrorControllerPanic"
     * @const
     */
    "PicoErrorControllerPanic": "PicoErrorControllerPanic",

    /**
     * value: "PicoErrorMidServicePanic"
     * @const
     */
    "PicoErrorMidServicePanic": "PicoErrorMidServicePanic",

    /**
     * value: "PicoWarningRcdTriggered"
     * @const
     */
    "PicoWarningRcdTriggered": "PicoWarningRcdTriggered",

    /**
     * value: "PicoWarningCableLockError"
     * @const
     */
    "PicoWarningCableLockError": "PicoWarningCableLockError",

    /**
     * value: "PicoWarningDiodeFailure"
     * @const
     */
    "PicoWarningDiodeFailure": "PicoWarningDiodeFailure",

    /**
     * value: "PicoWarningOverload"
     * @const
     */
    "PicoWarningOverload": "PicoWarningOverload",

    /**
     * value: "PicoWarningHighTemperature"
     * @const
     */
    "PicoWarningHighTemperature": "PicoWarningHighTemperature"
};


/**
 * Allowed values for the <code>LoadSheddingState</code> property.
 * @enum {String}
 * @readonly
 */
PicoChargingData['LoadSheddingStateEnum'] = {

    /**
     * value: "MaxCurrent"
     * @const
     */
    "MaxCurrent": "MaxCurrent",

    /**
     * value: "HalfCurrent"
     * @const
     */
    "HalfCurrent": "HalfCurrent",

    /**
     * value: "MinCurrent"
     * @const
     */
    "MinCurrent": "MinCurrent",

    /**
     * value: "NoCurrent"
     * @const
     */
    "NoCurrent": "NoCurrent"
};


/**
 * Allowed values for the <code>State</code> property.
 * @enum {String}
 * @readonly
 */
PicoChargingData['StateEnum'] = {

    /**
     * value: "Booting"
     * @const
     */
    "Booting": "Booting",

    /**
     * value: "ReadyNoCarConnected"
     * @const
     */
    "ReadyNoCarConnected": "ReadyNoCarConnected",

    /**
     * value: "ReadyCarConnected"
     * @const
     */
    "ReadyCarConnected": "ReadyCarConnected",

    /**
     * value: "StartedWaitForCar"
     * @const
     */
    "StartedWaitForCar": "StartedWaitForCar",

    /**
     * value: "Charging"
     * @const
     */
    "Charging": "Charging",

    /**
     * value: "Installation"
     * @const
     */
    "Installation": "Installation",

    /**
     * value: "Authorize"
     * @const
     */
    "Authorize": "Authorize",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};



export default PicoChargingData;

