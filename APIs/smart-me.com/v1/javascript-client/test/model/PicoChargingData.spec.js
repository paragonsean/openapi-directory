/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartMe);
  }
}(this, function(expect, SmartMe) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartMe.PicoChargingData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PicoChargingData', function() {
    it('should create an instance of PicoChargingData', function() {
      // uncomment below and update the code to test PicoChargingData
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be.a(SmartMe.PicoChargingData);
    });

    it('should have the property activeChargingEnergy (base name: "ActiveChargingEnergy")', function() {
      // uncomment below and update the code to test the property activeChargingEnergy
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property activeChargingPower (base name: "ActiveChargingPower")', function() {
      // uncomment below and update the code to test the property activeChargingPower
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property connectionMode (base name: "ConnectionMode")', function() {
      // uncomment below and update the code to test the property connectionMode
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property lastWarningOrError (base name: "LastWarningOrError")', function() {
      // uncomment below and update the code to test the property lastWarningOrError
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property lastWarningOrErrorMessage (base name: "LastWarningOrErrorMessage")', function() {
      // uncomment below and update the code to test the property lastWarningOrErrorMessage
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property lastWarningOrErrorTime (base name: "LastWarningOrErrorTime")', function() {
      // uncomment below and update the code to test the property lastWarningOrErrorTime
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property loadSheddingState (base name: "LoadSheddingState")', function() {
      // uncomment below and update the code to test the property loadSheddingState
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property loadmanagementGroupName (base name: "LoadmanagementGroupName")', function() {
      // uncomment below and update the code to test the property loadmanagementGroupName
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property maxAllowedChargingCurrent (base name: "MaxAllowedChargingCurrent")', function() {
      // uncomment below and update the code to test the property maxAllowedChargingCurrent
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property maxDynamicCurrent (base name: "MaxDynamicCurrent")', function() {
      // uncomment below and update the code to test the property maxDynamicCurrent
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property maxLoadmanagementGroupCurrent (base name: "MaxLoadmanagementGroupCurrent")', function() {
      // uncomment below and update the code to test the property maxLoadmanagementGroupCurrent
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property maxStationCurrent (base name: "MaxStationCurrent")', function() {
      // uncomment below and update the code to test the property maxStationCurrent
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property minStationCurrent (base name: "MinStationCurrent")', function() {
      // uncomment below and update the code to test the property minStationCurrent
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property RSSI (base name: "RSSI")', function() {
      // uncomment below and update the code to test the property RSSI
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

    it('should have the property valueDate (base name: "ValueDate")', function() {
      // uncomment below and update the code to test the property valueDate
      //var instance = new SmartMe.PicoChargingData();
      //expect(instance).to.be();
    });

  });

}));
