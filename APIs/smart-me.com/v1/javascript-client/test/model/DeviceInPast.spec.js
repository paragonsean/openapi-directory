/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartMe);
  }
}(this, function(expect, SmartMe) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartMe.DeviceInPast();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceInPast', function() {
    it('should create an instance of DeviceInPast', function() {
      // uncomment below and update the code to test DeviceInPast
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be.a(SmartMe.DeviceInPast);
    });

    it('should have the property counterReading (base name: "CounterReading")', function() {
      // uncomment below and update the code to test the property counterReading
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingExport (base name: "CounterReadingExport")', function() {
      // uncomment below and update the code to test the property counterReadingExport
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingExportT1 (base name: "CounterReadingExportT1")', function() {
      // uncomment below and update the code to test the property counterReadingExportT1
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingExportT2 (base name: "CounterReadingExportT2")', function() {
      // uncomment below and update the code to test the property counterReadingExportT2
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingExportT3 (base name: "CounterReadingExportT3")', function() {
      // uncomment below and update the code to test the property counterReadingExportT3
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingExportT4 (base name: "CounterReadingExportT4")', function() {
      // uncomment below and update the code to test the property counterReadingExportT4
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingImport (base name: "CounterReadingImport")', function() {
      // uncomment below and update the code to test the property counterReadingImport
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingImportT1 (base name: "CounterReadingImportT1")', function() {
      // uncomment below and update the code to test the property counterReadingImportT1
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingImportT2 (base name: "CounterReadingImportT2")', function() {
      // uncomment below and update the code to test the property counterReadingImportT2
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingImportT3 (base name: "CounterReadingImportT3")', function() {
      // uncomment below and update the code to test the property counterReadingImportT3
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingImportT4 (base name: "CounterReadingImportT4")', function() {
      // uncomment below and update the code to test the property counterReadingImportT4
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingT1 (base name: "CounterReadingT1")', function() {
      // uncomment below and update the code to test the property counterReadingT1
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingT2 (base name: "CounterReadingT2")', function() {
      // uncomment below and update the code to test the property counterReadingT2
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingT3 (base name: "CounterReadingT3")', function() {
      // uncomment below and update the code to test the property counterReadingT3
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingT4 (base name: "CounterReadingT4")', function() {
      // uncomment below and update the code to test the property counterReadingT4
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property counterReadingUnit (base name: "CounterReadingUnit")', function() {
      // uncomment below and update the code to test the property counterReadingUnit
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "Date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

    it('should have the property serial (base name: "Serial")', function() {
      // uncomment below and update the code to test the property serial
      //var instance = new SmartMe.DeviceInPast();
      //expect(instance).to.be();
    });

  });

}));
