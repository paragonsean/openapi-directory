/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartMe);
  }
}(this, function(expect, SmartMe) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartMe.PicoSettingsDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PicoSettingsDto', function() {
    it('should create an instance of PicoSettingsDto', function() {
      // uncomment below and update the code to test PicoSettingsDto
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be.a(SmartMe.PicoSettingsDto);
    });

    it('should have the property authenticationType (base name: "AuthenticationType")', function() {
      // uncomment below and update the code to test the property authenticationType
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property carIdDetection (base name: "CarIdDetection")', function() {
      // uncomment below and update the code to test the property carIdDetection
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property displayBrightness (base name: "DisplayBrightness")', function() {
      // uncomment below and update the code to test the property displayBrightness
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property dnsName (base name: "DnsName")', function() {
      // uncomment below and update the code to test the property dnsName
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property fixCableLockEnable (base name: "FixCableLockEnable")', function() {
      // uncomment below and update the code to test the property fixCableLockEnable
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property idleImageUrl (base name: "IdleImageUrl")', function() {
      // uncomment below and update the code to test the property idleImageUrl
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property internalIp (base name: "InternalIp")', function() {
      // uncomment below and update the code to test the property internalIp
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property loadmanagementGroupId (base name: "LoadmanagementGroupId")', function() {
      // uncomment below and update the code to test the property loadmanagementGroupId
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property maxCurrent (base name: "MaxCurrent")', function() {
      // uncomment below and update the code to test the property maxCurrent
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property minCurrent (base name: "MinCurrent")', function() {
      // uncomment below and update the code to test the property minCurrent
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property modbusTcp (base name: "ModbusTcp")', function() {
      // uncomment below and update the code to test the property modbusTcp
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "SerialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new SmartMe.PicoSettingsDto();
      //expect(instance).to.be();
    });

  });

}));
