/**
 * smart-me
 * With the smart-me REST API you get Access to all your devices in the smart-me Cloud and you can add your own devices. So its an easy way to add the smart-me Cloud support to your Hardware or Software Product.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SmartMe);
  }
}(this, function(expect, SmartMe) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SmartMe.SmartMeDeviceConfigurationContainer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SmartMeDeviceConfigurationContainer', function() {
    it('should create an instance of SmartMeDeviceConfigurationContainer', function() {
      // uncomment below and update the code to test SmartMeDeviceConfigurationContainer
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be.a(SmartMe.SmartMeDeviceConfigurationContainer);
    });

    it('should have the property deviceEncryptionKey (base name: "DeviceEncryptionKey")', function() {
      // uncomment below and update the code to test the property deviceEncryptionKey
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property devicePinCode (base name: "DevicePinCode")', function() {
      // uncomment below and update the code to test the property devicePinCode
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property dnsUpdateState (base name: "DnsUpdateState")', function() {
      // uncomment below and update the code to test the property dnsUpdateState
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property enableModbusTcp (base name: "EnableModbusTcp")', function() {
      // uncomment below and update the code to test the property enableModbusTcp
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property inputConfiguration (base name: "InputConfiguration")', function() {
      // uncomment below and update the code to test the property inputConfiguration
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property outputConfiguration (base name: "OutputConfiguration")', function() {
      // uncomment below and update the code to test the property outputConfiguration
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property showReactiveEnergy (base name: "ShowReactiveEnergy")', function() {
      // uncomment below and update the code to test the property showReactiveEnergy
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property switchConfiguration (base name: "SwitchConfiguration")', function() {
      // uncomment below and update the code to test the property switchConfiguration
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

    it('should have the property uploadInterval (base name: "UploadInterval")', function() {
      // uncomment below and update the code to test the property uploadInterval
      //var instance = new SmartMe.SmartMeDeviceConfigurationContainer();
      //expect(instance).to.be();
    });

  });

}));
