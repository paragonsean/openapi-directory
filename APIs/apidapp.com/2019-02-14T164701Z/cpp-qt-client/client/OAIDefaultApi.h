/**
 * ApiDapp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-02-14T16:47:01Z
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void accountIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void accountIdOptions(const QString &id);


    virtual void accountOptions();


    virtual void accountPost();


    virtual void blockGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockIdOptions(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockIdTransactionGet(const QString &id);

    /**
    * @param[in]  index QString [required]
    * @param[in]  id QString [required]
    */
    virtual void blockIdTransactionIndexGet(const QString &index, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  index QString [required]
    */
    virtual void blockIdTransactionIndexOptions(const QString &id, const QString &index);

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockIdTransactionOptions(const QString &id);


    virtual void blockOptions();


    virtual void blockchainGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockchainIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void blockchainIdOptions(const QString &id);


    virtual void blockchainOptions();

    /**
    * @param[in]  id QString [required]
    */
    virtual void contractIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void contractIdOptions(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void contractIdPost(const QString &id);


    virtual void contractOptions();


    virtual void contractPost();


    virtual void echoOptions();

    /**
    * @param[in]  address QString [required]
    */
    virtual void erc20AddressGet(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void erc20AddressOptions(const QString &address);

    /**
    * @param[in]  address QString [required]
    */
    virtual void erc20AddressPost(const QString &address);


    virtual void erc20Get();


    virtual void erc20Options();


    virtual void erc20Post();

    /**
    * @param[in]  token QString [optional]
    */
    virtual void keyGet(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    */
    virtual void keyKeyDelete(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void keyKeyOptions(const QString &key);


    virtual void keyOptions();


    virtual void keyPost();


    virtual void rootOptions();

    /**
    * @param[in]  hash QString [required]
    */
    virtual void transactionHashGet(const QString &hash);

    /**
    * @param[in]  hash QString [required]
    */
    virtual void transactionHashOptions(const QString &hash);

    /**
    * @param[in]  hash QString [required]
    */
    virtual void transactionHashReceiptGet(const QString &hash);

    /**
    * @param[in]  hash QString [required]
    */
    virtual void transactionHashReceiptOptions(const QString &hash);


    virtual void transactionOptions();


    virtual void transactionPost();


    virtual void versionGet();


    virtual void versionOptions();


    virtual void walletAccountGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdContractPost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdErc20Post(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdOptions(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdPayOptions(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void walletAccountIdPayPost(const QString &id);


    virtual void walletAccountOptions();


    virtual void walletAccountPost();


    virtual void walletGet();


    virtual void walletOptions();


    virtual void walletPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountIdGetCallback(OAIHttpRequestWorker *worker);
    void accountIdOptionsCallback(OAIHttpRequestWorker *worker);
    void accountOptionsCallback(OAIHttpRequestWorker *worker);
    void accountPostCallback(OAIHttpRequestWorker *worker);
    void blockGetCallback(OAIHttpRequestWorker *worker);
    void blockIdGetCallback(OAIHttpRequestWorker *worker);
    void blockIdOptionsCallback(OAIHttpRequestWorker *worker);
    void blockIdTransactionGetCallback(OAIHttpRequestWorker *worker);
    void blockIdTransactionIndexGetCallback(OAIHttpRequestWorker *worker);
    void blockIdTransactionIndexOptionsCallback(OAIHttpRequestWorker *worker);
    void blockIdTransactionOptionsCallback(OAIHttpRequestWorker *worker);
    void blockOptionsCallback(OAIHttpRequestWorker *worker);
    void blockchainGetCallback(OAIHttpRequestWorker *worker);
    void blockchainIdGetCallback(OAIHttpRequestWorker *worker);
    void blockchainIdOptionsCallback(OAIHttpRequestWorker *worker);
    void blockchainOptionsCallback(OAIHttpRequestWorker *worker);
    void contractIdGetCallback(OAIHttpRequestWorker *worker);
    void contractIdOptionsCallback(OAIHttpRequestWorker *worker);
    void contractIdPostCallback(OAIHttpRequestWorker *worker);
    void contractOptionsCallback(OAIHttpRequestWorker *worker);
    void contractPostCallback(OAIHttpRequestWorker *worker);
    void echoOptionsCallback(OAIHttpRequestWorker *worker);
    void erc20AddressGetCallback(OAIHttpRequestWorker *worker);
    void erc20AddressOptionsCallback(OAIHttpRequestWorker *worker);
    void erc20AddressPostCallback(OAIHttpRequestWorker *worker);
    void erc20GetCallback(OAIHttpRequestWorker *worker);
    void erc20OptionsCallback(OAIHttpRequestWorker *worker);
    void erc20PostCallback(OAIHttpRequestWorker *worker);
    void keyGetCallback(OAIHttpRequestWorker *worker);
    void keyKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void keyKeyOptionsCallback(OAIHttpRequestWorker *worker);
    void keyOptionsCallback(OAIHttpRequestWorker *worker);
    void keyPostCallback(OAIHttpRequestWorker *worker);
    void rootOptionsCallback(OAIHttpRequestWorker *worker);
    void transactionHashGetCallback(OAIHttpRequestWorker *worker);
    void transactionHashOptionsCallback(OAIHttpRequestWorker *worker);
    void transactionHashReceiptGetCallback(OAIHttpRequestWorker *worker);
    void transactionHashReceiptOptionsCallback(OAIHttpRequestWorker *worker);
    void transactionOptionsCallback(OAIHttpRequestWorker *worker);
    void transactionPostCallback(OAIHttpRequestWorker *worker);
    void versionGetCallback(OAIHttpRequestWorker *worker);
    void versionOptionsCallback(OAIHttpRequestWorker *worker);
    void walletAccountGetCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdContractPostCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdErc20PostCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdGetCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdOptionsCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdPayOptionsCallback(OAIHttpRequestWorker *worker);
    void walletAccountIdPayPostCallback(OAIHttpRequestWorker *worker);
    void walletAccountOptionsCallback(OAIHttpRequestWorker *worker);
    void walletAccountPostCallback(OAIHttpRequestWorker *worker);
    void walletGetCallback(OAIHttpRequestWorker *worker);
    void walletOptionsCallback(OAIHttpRequestWorker *worker);
    void walletPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountIdGetSignal(OAIObject summary);
    void accountIdOptionsSignal(OAIObject summary);
    void accountOptionsSignal(OAIObject summary);
    void accountPostSignal(OAIObject summary);
    void blockGetSignal(OAIObject summary);
    void blockIdGetSignal(OAIObject summary);
    void blockIdOptionsSignal(OAIObject summary);
    void blockIdTransactionGetSignal(OAIObject summary);
    void blockIdTransactionIndexGetSignal(OAIObject summary);
    void blockIdTransactionIndexOptionsSignal(OAIObject summary);
    void blockIdTransactionOptionsSignal(OAIObject summary);
    void blockOptionsSignal(OAIObject summary);
    void blockchainGetSignal(OAIObject summary);
    void blockchainIdGetSignal(OAIObject summary);
    void blockchainIdOptionsSignal(OAIObject summary);
    void blockchainOptionsSignal(OAIObject summary);
    void contractIdGetSignal(OAIObject summary);
    void contractIdOptionsSignal(OAIObject summary);
    void contractIdPostSignal(OAIObject summary);
    void contractOptionsSignal(OAIObject summary);
    void contractPostSignal(OAIObject summary);
    void echoOptionsSignal(OAIObject summary);
    void erc20AddressGetSignal(OAIObject summary);
    void erc20AddressOptionsSignal(OAIObject summary);
    void erc20AddressPostSignal(OAIObject summary);
    void erc20GetSignal(OAIObject summary);
    void erc20OptionsSignal(OAIObject summary);
    void erc20PostSignal(OAIObject summary);
    void keyGetSignal(OAIObject summary);
    void keyKeyDeleteSignal(OAIObject summary);
    void keyKeyOptionsSignal(OAIObject summary);
    void keyOptionsSignal(OAIObject summary);
    void keyPostSignal(OAIObject summary);
    void rootOptionsSignal(OAIObject summary);
    void transactionHashGetSignal(OAIObject summary);
    void transactionHashOptionsSignal(OAIObject summary);
    void transactionHashReceiptGetSignal(OAIObject summary);
    void transactionHashReceiptOptionsSignal(OAIObject summary);
    void transactionOptionsSignal(OAIObject summary);
    void transactionPostSignal(OAIObject summary);
    void versionGetSignal(OAIObject summary);
    void versionOptionsSignal(OAIObject summary);
    void walletAccountGetSignal(OAIObject summary);
    void walletAccountIdContractPostSignal(OAIObject summary);
    void walletAccountIdErc20PostSignal(OAIObject summary);
    void walletAccountIdGetSignal(OAIObject summary);
    void walletAccountIdOptionsSignal(OAIObject summary);
    void walletAccountIdPayOptionsSignal(OAIObject summary);
    void walletAccountIdPayPostSignal(OAIObject summary);
    void walletAccountOptionsSignal(OAIObject summary);
    void walletAccountPostSignal(OAIObject summary);
    void walletGetSignal(OAIObject summary);
    void walletOptionsSignal(OAIObject summary);
    void walletPostSignal(OAIObject summary);


    void accountIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void accountIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void accountOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void accountPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdTransactionGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdTransactionIndexGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdTransactionIndexOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockIdTransactionOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockchainGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockchainIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockchainIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void blockchainOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contractIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contractIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contractIdPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contractOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void contractPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void echoOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20AddressGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20AddressOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20AddressPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20GetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20OptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void erc20PostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void keyGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void keyKeyDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void keyKeyOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void keyOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void keyPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void rootOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionHashGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionHashOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionHashReceiptGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionHashReceiptOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void transactionPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void versionGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void versionOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdContractPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdErc20PostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdPayOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountIdPayPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletAccountPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void walletPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use accountIdGetSignalError() instead")
    void accountIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountIdOptionsSignalError() instead")
    void accountIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountOptionsSignalError() instead")
    void accountOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostSignalError() instead")
    void accountPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockGetSignalError() instead")
    void blockGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdGetSignalError() instead")
    void blockIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdOptionsSignalError() instead")
    void blockIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionGetSignalError() instead")
    void blockIdTransactionGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionIndexGetSignalError() instead")
    void blockIdTransactionIndexGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionIndexGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionIndexOptionsSignalError() instead")
    void blockIdTransactionIndexOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionIndexOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionOptionsSignalError() instead")
    void blockIdTransactionOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockOptionsSignalError() instead")
    void blockOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainGetSignalError() instead")
    void blockchainGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainIdGetSignalError() instead")
    void blockchainIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainIdOptionsSignalError() instead")
    void blockchainIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainOptionsSignalError() instead")
    void blockchainOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdGetSignalError() instead")
    void contractIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdOptionsSignalError() instead")
    void contractIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdPostSignalError() instead")
    void contractIdPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractOptionsSignalError() instead")
    void contractOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contractOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractPostSignalError() instead")
    void contractPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contractPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoOptionsSignalError() instead")
    void echoOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void echoOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressGetSignalError() instead")
    void erc20AddressGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressOptionsSignalError() instead")
    void erc20AddressOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressPostSignalError() instead")
    void erc20AddressPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20GetSignalError() instead")
    void erc20GetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20GetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20OptionsSignalError() instead")
    void erc20OptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20OptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20PostSignalError() instead")
    void erc20PostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20PostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyGetSignalError() instead")
    void keyGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyKeyDeleteSignalError() instead")
    void keyKeyDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyKeyDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyKeyOptionsSignalError() instead")
    void keyKeyOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyKeyOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyOptionsSignalError() instead")
    void keyOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyPostSignalError() instead")
    void keyPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootOptionsSignalError() instead")
    void rootOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rootOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashGetSignalError() instead")
    void transactionHashGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashOptionsSignalError() instead")
    void transactionHashOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashReceiptGetSignalError() instead")
    void transactionHashReceiptGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashReceiptGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashReceiptOptionsSignalError() instead")
    void transactionHashReceiptOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashReceiptOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionOptionsSignalError() instead")
    void transactionOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionPostSignalError() instead")
    void transactionPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionGetSignalError() instead")
    void versionGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionOptionsSignalError() instead")
    void versionOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountGetSignalError() instead")
    void walletAccountGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdContractPostSignalError() instead")
    void walletAccountIdContractPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdContractPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdErc20PostSignalError() instead")
    void walletAccountIdErc20PostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdErc20PostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdGetSignalError() instead")
    void walletAccountIdGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdOptionsSignalError() instead")
    void walletAccountIdOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdPayOptionsSignalError() instead")
    void walletAccountIdPayOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdPayOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdPayPostSignalError() instead")
    void walletAccountIdPayPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdPayPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountOptionsSignalError() instead")
    void walletAccountOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountPostSignalError() instead")
    void walletAccountPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletGetSignalError() instead")
    void walletGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletOptionsSignalError() instead")
    void walletOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletPostSignalError() instead")
    void walletPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountIdGetSignalErrorFull() instead")
    void accountIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountIdOptionsSignalErrorFull() instead")
    void accountIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountOptionsSignalErrorFull() instead")
    void accountOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountPostSignalErrorFull() instead")
    void accountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockGetSignalErrorFull() instead")
    void blockGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdGetSignalErrorFull() instead")
    void blockIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdOptionsSignalErrorFull() instead")
    void blockIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionGetSignalErrorFull() instead")
    void blockIdTransactionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionIndexGetSignalErrorFull() instead")
    void blockIdTransactionIndexGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionIndexGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionIndexOptionsSignalErrorFull() instead")
    void blockIdTransactionIndexOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionIndexOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockIdTransactionOptionsSignalErrorFull() instead")
    void blockIdTransactionOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockIdTransactionOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockOptionsSignalErrorFull() instead")
    void blockOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainGetSignalErrorFull() instead")
    void blockchainGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainIdGetSignalErrorFull() instead")
    void blockchainIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainIdOptionsSignalErrorFull() instead")
    void blockchainIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blockchainOptionsSignalErrorFull() instead")
    void blockchainOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockchainOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdGetSignalErrorFull() instead")
    void contractIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdOptionsSignalErrorFull() instead")
    void contractIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractIdPostSignalErrorFull() instead")
    void contractIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contractIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractOptionsSignalErrorFull() instead")
    void contractOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contractOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use contractPostSignalErrorFull() instead")
    void contractPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contractPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use echoOptionsSignalErrorFull() instead")
    void echoOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void echoOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressGetSignalErrorFull() instead")
    void erc20AddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressOptionsSignalErrorFull() instead")
    void erc20AddressOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20AddressPostSignalErrorFull() instead")
    void erc20AddressPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20AddressPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20GetSignalErrorFull() instead")
    void erc20GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20OptionsSignalErrorFull() instead")
    void erc20OptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20OptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use erc20PostSignalErrorFull() instead")
    void erc20PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void erc20PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyGetSignalErrorFull() instead")
    void keyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyKeyDeleteSignalErrorFull() instead")
    void keyKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyKeyOptionsSignalErrorFull() instead")
    void keyKeyOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyKeyOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyOptionsSignalErrorFull() instead")
    void keyOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyPostSignalErrorFull() instead")
    void keyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rootOptionsSignalErrorFull() instead")
    void rootOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rootOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashGetSignalErrorFull() instead")
    void transactionHashGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashOptionsSignalErrorFull() instead")
    void transactionHashOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashReceiptGetSignalErrorFull() instead")
    void transactionHashReceiptGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashReceiptGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionHashReceiptOptionsSignalErrorFull() instead")
    void transactionHashReceiptOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionHashReceiptOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionOptionsSignalErrorFull() instead")
    void transactionOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionPostSignalErrorFull() instead")
    void transactionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionGetSignalErrorFull() instead")
    void versionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionOptionsSignalErrorFull() instead")
    void versionOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountGetSignalErrorFull() instead")
    void walletAccountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdContractPostSignalErrorFull() instead")
    void walletAccountIdContractPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdContractPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdErc20PostSignalErrorFull() instead")
    void walletAccountIdErc20PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdErc20PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdGetSignalErrorFull() instead")
    void walletAccountIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdOptionsSignalErrorFull() instead")
    void walletAccountIdOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdPayOptionsSignalErrorFull() instead")
    void walletAccountIdPayOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdPayOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountIdPayPostSignalErrorFull() instead")
    void walletAccountIdPayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountIdPayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountOptionsSignalErrorFull() instead")
    void walletAccountOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletAccountPostSignalErrorFull() instead")
    void walletAccountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletAccountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletGetSignalErrorFull() instead")
    void walletGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletOptionsSignalErrorFull() instead")
    void walletOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletPostSignalErrorFull() instead")
    void walletPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
