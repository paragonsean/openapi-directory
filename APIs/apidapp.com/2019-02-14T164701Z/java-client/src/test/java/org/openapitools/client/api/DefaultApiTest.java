/*
 * ApiDapp
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-02-14T16:47:01Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get account balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountIdGetTest() throws ApiException {
        String id = null;
        Object response = api.accountIdGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountIdOptionsTest() throws ApiException {
        String id = null;
        Object response = api.accountIdOptions(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountOptionsTest() throws ApiException {
        Object response = api.accountOptions();
        // TODO: test validations
    }

    /**
     * Create new account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPostTest() throws ApiException {
        Object response = api.accountPost();
        // TODO: test validations
    }

    /**
     * Access detailed block information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockGetTest() throws ApiException {
        Object response = api.blockGet();
        // TODO: test validations
    }

    /**
     * Get information about particular block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdGetTest() throws ApiException {
        String id = null;
        Object response = api.blockIdGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdOptionsTest() throws ApiException {
        String id = null;
        Object response = api.blockIdOptions(id);
        // TODO: test validations
    }

    /**
     * Get transaction count within block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdTransactionGetTest() throws ApiException {
        String id = null;
        Object response = api.blockIdTransactionGet(id);
        // TODO: test validations
    }

    /**
     * Get information about particular transaction within block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdTransactionIndexGetTest() throws ApiException {
        String index = null;
        String id = null;
        Object response = api.blockIdTransactionIndexGet(index, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdTransactionIndexOptionsTest() throws ApiException {
        String id = null;
        String index = null;
        Object response = api.blockIdTransactionIndexOptions(id, index);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockIdTransactionOptionsTest() throws ApiException {
        String id = null;
        Object response = api.blockIdTransactionOptions(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockOptionsTest() throws ApiException {
        Object response = api.blockOptions();
        // TODO: test validations
    }

    /**
     * Get a list of supported blockchains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockchainGetTest() throws ApiException {
        Object response = api.blockchainGet();
        // TODO: test validations
    }

    /**
     * Get information about blockchain woth given id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockchainIdGetTest() throws ApiException {
        String id = null;
        Object response = api.blockchainIdGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockchainIdOptionsTest() throws ApiException {
        String id = null;
        Object response = api.blockchainIdOptions(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blockchainOptionsTest() throws ApiException {
        Object response = api.blockchainOptions();
        // TODO: test validations
    }

    /**
     * Get contract balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractIdGetTest() throws ApiException {
        String id = null;
        Object response = api.contractIdGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractIdOptionsTest() throws ApiException {
        String id = null;
        Object response = api.contractIdOptions(id);
        // TODO: test validations
    }

    /**
     * Call the contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractIdPostTest() throws ApiException {
        String id = null;
        Object response = api.contractIdPost(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractOptionsTest() throws ApiException {
        Object response = api.contractOptions();
        // TODO: test validations
    }

    /**
     * Create a new smart contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contractPostTest() throws ApiException {
        Object response = api.contractPost();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void echoOptionsTest() throws ApiException {
        Object response = api.echoOptions();
        // TODO: test validations
    }

    /**
     * Get information amout token balance in the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20AddressGetTest() throws ApiException {
        String address = null;
        Object response = api.erc20AddressGet(address);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20AddressOptionsTest() throws ApiException {
        String address = null;
        Object response = api.erc20AddressOptions(address);
        // TODO: test validations
    }

    /**
     * Transfer tokens to another account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20AddressPostTest() throws ApiException {
        String address = null;
        Object response = api.erc20AddressPost(address);
        // TODO: test validations
    }

    /**
     * Get token information such as name, total amount in circulation, etc
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20GetTest() throws ApiException {
        Object response = api.erc20Get();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20OptionsTest() throws ApiException {
        Object response = api.erc20Options();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void erc20PostTest() throws ApiException {
        Object response = api.erc20Post();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyGetTest() throws ApiException {
        String token = null;
        Object response = api.keyGet(token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyKeyDeleteTest() throws ApiException {
        String key = null;
        Object response = api.keyKeyDelete(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyKeyOptionsTest() throws ApiException {
        String key = null;
        Object response = api.keyKeyOptions(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyOptionsTest() throws ApiException {
        Object response = api.keyOptions();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyPostTest() throws ApiException {
        Object response = api.keyPost();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rootOptionsTest() throws ApiException {
        Object response = api.rootOptions();
        // TODO: test validations
    }

    /**
     * Get information about transaction by the transaction hash value
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionHashGetTest() throws ApiException {
        String hash = null;
        Object response = api.transactionHashGet(hash);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionHashOptionsTest() throws ApiException {
        String hash = null;
        Object response = api.transactionHashOptions(hash);
        // TODO: test validations
    }

    /**
     * Get receipt detail information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionHashReceiptGetTest() throws ApiException {
        String hash = null;
        Object response = api.transactionHashReceiptGet(hash);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionHashReceiptOptionsTest() throws ApiException {
        String hash = null;
        Object response = api.transactionHashReceiptOptions(hash);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionOptionsTest() throws ApiException {
        Object response = api.transactionOptions();
        // TODO: test validations
    }

    /**
     * Create a new transaction. Transfer Ether between accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionPostTest() throws ApiException {
        Object response = api.transactionPost();
        // TODO: test validations
    }

    /**
     * Get API version info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionGetTest() throws ApiException {
        Object response = api.versionGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void versionOptionsTest() throws ApiException {
        Object response = api.versionOptions();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountGetTest() throws ApiException {
        Object response = api.walletAccountGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdContractPostTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdContractPost(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdErc20PostTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdErc20Post(id);
        // TODO: test validations
    }

    /**
     * Get account balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdGetTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdOptionsTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdOptions(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdPayOptionsTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdPayOptions(id);
        // TODO: test validations
    }

    /**
     * Send payment from the account held within the wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountIdPayPostTest() throws ApiException {
        String id = null;
        Object response = api.walletAccountIdPayPost(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountOptionsTest() throws ApiException {
        Object response = api.walletAccountOptions();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletAccountPostTest() throws ApiException {
        Object response = api.walletAccountPost();
        // TODO: test validations
    }

    /**
     * Get current account balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletGetTest() throws ApiException {
        Object response = api.walletGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletOptionsTest() throws ApiException {
        Object response = api.walletOptions();
        // TODO: test validations
    }

    /**
     * Create personal wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void walletPostTest() throws ApiException {
        Object response = api.walletPost();
        // TODO: test validations
    }

}
