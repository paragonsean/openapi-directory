/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeRecoveryQuestion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeRecoveryQuestion_request::OAIChangeRecoveryQuestion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeRecoveryQuestion_request::OAIChangeRecoveryQuestion_request() {
    this->initializeModel();
}

OAIChangeRecoveryQuestion_request::~OAIChangeRecoveryQuestion_request() {}

void OAIChangeRecoveryQuestion_request::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_recovery_question_isSet = false;
    m_recovery_question_isValid = false;
}

void OAIChangeRecoveryQuestion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeRecoveryQuestion_request::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_recovery_question_isValid = ::OpenAPI::fromJsonValue(m_recovery_question, json[QString("recovery_question")]);
    m_recovery_question_isSet = !json[QString("recovery_question")].isNull() && m_recovery_question_isValid;
}

QString OAIChangeRecoveryQuestion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeRecoveryQuestion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_password.isSet()) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_recovery_question.isSet()) {
        obj.insert(QString("recovery_question"), ::OpenAPI::toJsonValue(m_recovery_question));
    }
    return obj;
}

OAIChangePassword_request_oldPassword OAIChangeRecoveryQuestion_request::getPassword() const {
    return m_password;
}
void OAIChangeRecoveryQuestion_request::setPassword(const OAIChangePassword_request_oldPassword &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIChangeRecoveryQuestion_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIChangeRecoveryQuestion_request::is_password_Valid() const{
    return m_password_isValid;
}

OAIChangeRecoveryQuestion_request_recovery_question OAIChangeRecoveryQuestion_request::getRecoveryQuestion() const {
    return m_recovery_question;
}
void OAIChangeRecoveryQuestion_request::setRecoveryQuestion(const OAIChangeRecoveryQuestion_request_recovery_question &recovery_question) {
    m_recovery_question = recovery_question;
    m_recovery_question_isSet = true;
}

bool OAIChangeRecoveryQuestion_request::is_recovery_question_Set() const{
    return m_recovery_question_isSet;
}

bool OAIChangeRecoveryQuestion_request::is_recovery_question_Valid() const{
    return m_recovery_question_isValid;
}

bool OAIChangeRecoveryQuestion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_question.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeRecoveryQuestion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
