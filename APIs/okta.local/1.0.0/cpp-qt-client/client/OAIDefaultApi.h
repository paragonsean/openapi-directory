/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void clearUserSessions(const QString &user_id);

    /**
    * @param[in]  q QString [optional]
    */
    virtual void findUser(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getAssignedAppLinks(const QString &user_id);


    virtual void getCurrentUser();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getGroupsForUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void resetFactors(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clearUserSessionsCallback(OAIHttpRequestWorker *worker);
    void findUserCallback(OAIHttpRequestWorker *worker);
    void getAssignedAppLinksCallback(OAIHttpRequestWorker *worker);
    void getCurrentUserCallback(OAIHttpRequestWorker *worker);
    void getGroupsForUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void resetFactorsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clearUserSessionsSignal();
    void findUserSignal();
    void getAssignedAppLinksSignal();
    void getCurrentUserSignal();
    void getGroupsForUserSignal();
    void getUserSignal();
    void resetFactorsSignal();


    void clearUserSessionsSignalFull(OAIHttpRequestWorker *worker);
    void findUserSignalFull(OAIHttpRequestWorker *worker);
    void getAssignedAppLinksSignalFull(OAIHttpRequestWorker *worker);
    void getCurrentUserSignalFull(OAIHttpRequestWorker *worker);
    void getGroupsForUserSignalFull(OAIHttpRequestWorker *worker);
    void getUserSignalFull(OAIHttpRequestWorker *worker);
    void resetFactorsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use clearUserSessionsSignalError() instead")
    void clearUserSessionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clearUserSessionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserSignalError() instead")
    void findUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedAppLinksSignalError() instead")
    void getAssignedAppLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedAppLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalError() instead")
    void getCurrentUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsForUserSignalError() instead")
    void getGroupsForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFactorsSignalError() instead")
    void resetFactorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetFactorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clearUserSessionsSignalErrorFull() instead")
    void clearUserSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clearUserSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findUserSignalErrorFull() instead")
    void findUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssignedAppLinksSignalErrorFull() instead")
    void getAssignedAppLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssignedAppLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCurrentUserSignalErrorFull() instead")
    void getCurrentUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCurrentUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsForUserSignalErrorFull() instead")
    void getGroupsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetFactorsSignalErrorFull() instead")
    void resetFactorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetFactorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
