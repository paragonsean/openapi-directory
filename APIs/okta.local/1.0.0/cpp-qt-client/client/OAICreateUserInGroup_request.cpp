/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserInGroup_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserInGroup_request::OAICreateUserInGroup_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserInGroup_request::OAICreateUserInGroup_request() {
    this->initializeModel();
}

OAICreateUserInGroup_request::~OAICreateUserInGroup_request() {}

void OAICreateUserInGroup_request::initializeModel() {

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;
}

void OAICreateUserInGroup_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserInGroup_request::fromJsonObject(QJsonObject json) {

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("groupIds")]);
    m_group_ids_isSet = !json[QString("groupIds")].isNull() && m_group_ids_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;
}

QString OAICreateUserInGroup_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserInGroup_request::asJsonObject() const {
    QJsonObject obj;
    if (m_group_ids.size() > 0) {
        obj.insert(QString("groupIds"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    return obj;
}

QList<QString> OAICreateUserInGroup_request::getGroupIds() const {
    return m_group_ids;
}
void OAICreateUserInGroup_request::setGroupIds(const QList<QString> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAICreateUserInGroup_request::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAICreateUserInGroup_request::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

OAICreateUserInGroup_request_profile OAICreateUserInGroup_request::getProfile() const {
    return m_profile;
}
void OAICreateUserInGroup_request::setProfile(const OAICreateUserInGroup_request_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAICreateUserInGroup_request::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAICreateUserInGroup_request::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAICreateUserInGroup_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserInGroup_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
