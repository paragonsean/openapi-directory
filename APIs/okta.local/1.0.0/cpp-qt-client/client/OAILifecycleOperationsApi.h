/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILifecycleOperationsApi_H
#define OAI_OAILifecycleOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILifecycleOperationsApi : public QObject {
    Q_OBJECT

public:
    OAILifecycleOperationsApi(const int timeOut = 0);
    ~OAILifecycleOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  send_email QString [optional]
    */
    virtual void activateUser(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &send_email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void deactivateUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  send_email QString [optional]
    */
    virtual void resetPassword(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &send_email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  temp_password QString [optional]
    */
    virtual void setTempPassword(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &temp_password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void suspendUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void unlockUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void unsuspendUser(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateUserCallback(OAIHttpRequestWorker *worker);
    void deactivateUserCallback(OAIHttpRequestWorker *worker);
    void resetPasswordCallback(OAIHttpRequestWorker *worker);
    void setTempPasswordCallback(OAIHttpRequestWorker *worker);
    void suspendUserCallback(OAIHttpRequestWorker *worker);
    void unlockUserCallback(OAIHttpRequestWorker *worker);
    void unsuspendUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateUserSignal();
    void deactivateUserSignal();
    void resetPasswordSignal();
    void setTempPasswordSignal();
    void suspendUserSignal();
    void unlockUserSignal();
    void unsuspendUserSignal();


    void activateUserSignalFull(OAIHttpRequestWorker *worker);
    void deactivateUserSignalFull(OAIHttpRequestWorker *worker);
    void resetPasswordSignalFull(OAIHttpRequestWorker *worker);
    void setTempPasswordSignalFull(OAIHttpRequestWorker *worker);
    void suspendUserSignalFull(OAIHttpRequestWorker *worker);
    void unlockUserSignalFull(OAIHttpRequestWorker *worker);
    void unsuspendUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activateUserSignalError() instead")
    void activateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUserSignalError() instead")
    void deactivateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordSignalError() instead")
    void resetPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTempPasswordSignalError() instead")
    void setTempPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setTempPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalError() instead")
    void suspendUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockUserSignalError() instead")
    void unlockUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlockUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsuspendUserSignalError() instead")
    void unsuspendUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsuspendUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateUserSignalErrorFull() instead")
    void activateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUserSignalErrorFull() instead")
    void deactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordSignalErrorFull() instead")
    void resetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setTempPasswordSignalErrorFull() instead")
    void setTempPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTempPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suspendUserSignalErrorFull() instead")
    void suspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockUserSignalErrorFull() instead")
    void unlockUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsuspendUserSignalErrorFull() instead")
    void unsuspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsuspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
