/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* LifecycleOperations service.
* @module api/LifecycleOperationsApi
* @version 1.0.0
*/
export default class LifecycleOperationsApi {

    /**
    * Constructs a new LifecycleOperationsApi. 
    * @alias module:api/LifecycleOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateUser operation.
     * @callback module:api/LifecycleOperationsApi~activateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate User
     * Activate User
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} [sendEmail] 
     * @param {module:api/LifecycleOperationsApi~activateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling activateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'sendEmail': opts['sendEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUser operation.
     * @callback module:api/LifecycleOperationsApi~deactivateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate User
     * Deactivate User
     * @param {String} userId 
     * @param {module:api/LifecycleOperationsApi~deactivateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deactivateUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deactivateUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/LifecycleOperationsApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Password
     * Reset Password
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} [sendEmail] 
     * @param {module:api/LifecycleOperationsApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPassword(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resetPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'sendEmail': opts['sendEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTempPassword operation.
     * @callback module:api/LifecycleOperationsApi~setTempPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Temp Password
     * Set Temp Password
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} [tempPassword] 
     * @param {module:api/LifecycleOperationsApi~setTempPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setTempPassword(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setTempPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'tempPassword': opts['tempPassword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/expire_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suspendUser operation.
     * @callback module:api/LifecycleOperationsApi~suspendUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend User
     * Suspend User
     * @param {String} userId 
     * @param {module:api/LifecycleOperationsApi~suspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    suspendUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling suspendUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockUser operation.
     * @callback module:api/LifecycleOperationsApi~unlockUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock User
     * Unlock User
     * @param {String} userId 
     * @param {module:api/LifecycleOperationsApi~unlockUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlockUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unlockUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsuspendUser operation.
     * @callback module:api/LifecycleOperationsApi~unsuspendUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsuspend User
     * Unsuspend User
     * @param {String} userId 
     * @param {module:api/LifecycleOperationsApi~unsuspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsuspendUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unsuspendUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/lifecycle/unsuspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
