/**
 * Users (Okta API)
 * The [Okta User API](/docs/api/rest/users.html) provides operations to manage users in your organization.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangePasswordRequest from '../model/ChangePasswordRequest';
import ChangeRecoveryQuestionRequest from '../model/ChangeRecoveryQuestionRequest';
import SetRecoveryCredentialRequest from '../model/SetRecoveryCredentialRequest';

/**
* CredentialOperations service.
* @module api/CredentialOperationsApi
* @version 1.0.0
*/
export default class CredentialOperationsApi {

    /**
    * Constructs a new CredentialOperationsApi. 
    * @alias module:api/CredentialOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/CredentialOperationsApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Password
     * Change Password
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordRequest} [changePasswordRequest] 
     * @param {module:api/CredentialOperationsApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changePasswordRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changePassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/credentials/change_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeRecoveryQuestion operation.
     * @callback module:api/CredentialOperationsApi~changeRecoveryQuestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Recovery Question
     * Change Recovery Question
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeRecoveryQuestionRequest} [changeRecoveryQuestionRequest] 
     * @param {module:api/CredentialOperationsApi~changeRecoveryQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeRecoveryQuestion(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['changeRecoveryQuestionRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling changeRecoveryQuestion");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/credentials/change_recovery_question', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPasswordOneTimeCode operation.
     * @callback module:api/CredentialOperationsApi~forgotPasswordOneTimeCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forgot Password (One Time Code)
     * Forgot Password (One Time Code)
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} [sendEmail] 
     * @param {module:api/CredentialOperationsApi~forgotPasswordOneTimeCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    forgotPasswordOneTimeCode(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling forgotPasswordOneTimeCode");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'sendEmail': opts['sendEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}/credentials/forgot_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRecoveryCredential operation.
     * @callback module:api/CredentialOperationsApi~setRecoveryCredentialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Recovery Credential
     * Set Recovery Credential
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SetRecoveryCredentialRequest} [setRecoveryCredentialRequest] 
     * @param {module:api/CredentialOperationsApi~setRecoveryCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRecoveryCredential(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['setRecoveryCredentialRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setRecoveryCredential");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
