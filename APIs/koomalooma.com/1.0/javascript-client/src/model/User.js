/**
 * koomalooma Partner API
 * This is the koomalooma Partner API. koomalooma is the first Loyalty BPaaS (Business Process as a Service) for mobile and web companies. With koomalooma merchants issue points for actions their customers / users make on your mobile or web store, for example a purchase or a referral. koomalooma takes care of all the rest, from signing up users, keeping track of points and delivering rewards in over 80 countries. koomalooma offers an easy to integrate API and web backend to configure loyalty campaigns and track performance. You can find more at http://support.koomalooma.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@koomalooma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param partnerId {String} Your partner_id. You can use the value of data-partner-id parameter
     * @param partnerUserId {String} A unique string that identify your customer. !!IMPORTANT!! You should use always the same partner_user_id for the same customer
     * @param userSessionId {String} A unique string that identify the current user session. !!IMPORTANT!! This value should be the same set in %%sessionId%% of koomalooma javascript
     */
    constructor(partnerId, partnerUserId, userSessionId) { 
        
        User.initialize(this, partnerId, partnerUserId, userSessionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partnerId, partnerUserId, userSessionId) { 
        obj['partner_id'] = partnerId;
        obj['partner_user_id'] = partnerUserId;
        obj['user_session_id'] = userSessionId;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('partner_id')) {
                obj['partner_id'] = ApiClient.convertToType(data['partner_id'], 'String');
            }
            if (data.hasOwnProperty('partner_user_id')) {
                obj['partner_user_id'] = ApiClient.convertToType(data['partner_user_id'], 'String');
            }
            if (data.hasOwnProperty('user_session_id')) {
                obj['user_session_id'] = ApiClient.convertToType(data['user_session_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['partner_id'] && !(typeof data['partner_id'] === 'string' || data['partner_id'] instanceof String)) {
            throw new Error("Expected the field `partner_id` to be a primitive type in the JSON string but got " + data['partner_id']);
        }
        // ensure the json data is a string
        if (data['partner_user_id'] && !(typeof data['partner_user_id'] === 'string' || data['partner_user_id'] instanceof String)) {
            throw new Error("Expected the field `partner_user_id` to be a primitive type in the JSON string but got " + data['partner_user_id']);
        }
        // ensure the json data is a string
        if (data['user_session_id'] && !(typeof data['user_session_id'] === 'string' || data['user_session_id'] instanceof String)) {
            throw new Error("Expected the field `user_session_id` to be a primitive type in the JSON string but got " + data['user_session_id']);
        }

        return true;
    }


}

User.RequiredProperties = ["partner_id", "partner_user_id", "user_session_id"];

/**
 * Your partner_id. You can use the value of data-partner-id parameter
 * @member {String} partner_id
 */
User.prototype['partner_id'] = undefined;

/**
 * A unique string that identify your customer. !!IMPORTANT!! You should use always the same partner_user_id for the same customer
 * @member {String} partner_user_id
 */
User.prototype['partner_user_id'] = undefined;

/**
 * A unique string that identify the current user session. !!IMPORTANT!! This value should be the same set in %%sessionId%% of koomalooma javascript
 * @member {String} user_session_id
 */
User.prototype['user_session_id'] = undefined;






export default User;

