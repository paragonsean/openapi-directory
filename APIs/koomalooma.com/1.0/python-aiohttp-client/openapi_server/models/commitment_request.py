# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: str=None, promotion_goal_category: str=None, promotion_goal_description: str=None, transaction_value: str=None):
        """CommitmentRequest - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this CommitmentRequest.
        :param promotion_goal_category: The promotion_goal_category of this CommitmentRequest.
        :param promotion_goal_description: The promotion_goal_description of this CommitmentRequest.
        :param transaction_value: The transaction_value of this CommitmentRequest.
        """
        self.openapi_types = {
            'campaign_id': str,
            'promotion_goal_category': str,
            'promotion_goal_description': str,
            'transaction_value': str
        }

        self.attribute_map = {
            'campaign_id': 'campaign_id',
            'promotion_goal_category': 'promotion_goal_category',
            'promotion_goal_description': 'promotion_goal_description',
            'transaction_value': 'transaction_value'
        }

        self._campaign_id = campaign_id
        self._promotion_goal_category = promotion_goal_category
        self._promotion_goal_description = promotion_goal_description
        self._transaction_value = transaction_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitmentRequest of this CommitmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this CommitmentRequest.


        :return: The campaign_id of this CommitmentRequest.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this CommitmentRequest.


        :param campaign_id: The campaign_id of this CommitmentRequest.
        :type campaign_id: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def promotion_goal_category(self):
        """Gets the promotion_goal_category of this CommitmentRequest.


        :return: The promotion_goal_category of this CommitmentRequest.
        :rtype: str
        """
        return self._promotion_goal_category

    @promotion_goal_category.setter
    def promotion_goal_category(self, promotion_goal_category):
        """Sets the promotion_goal_category of this CommitmentRequest.


        :param promotion_goal_category: The promotion_goal_category of this CommitmentRequest.
        :type promotion_goal_category: str
        """
        if promotion_goal_category is None:
            raise ValueError("Invalid value for `promotion_goal_category`, must not be `None`")

        self._promotion_goal_category = promotion_goal_category

    @property
    def promotion_goal_description(self):
        """Gets the promotion_goal_description of this CommitmentRequest.


        :return: The promotion_goal_description of this CommitmentRequest.
        :rtype: str
        """
        return self._promotion_goal_description

    @promotion_goal_description.setter
    def promotion_goal_description(self, promotion_goal_description):
        """Sets the promotion_goal_description of this CommitmentRequest.


        :param promotion_goal_description: The promotion_goal_description of this CommitmentRequest.
        :type promotion_goal_description: str
        """
        if promotion_goal_description is None:
            raise ValueError("Invalid value for `promotion_goal_description`, must not be `None`")

        self._promotion_goal_description = promotion_goal_description

    @property
    def transaction_value(self):
        """Gets the transaction_value of this CommitmentRequest.


        :return: The transaction_value of this CommitmentRequest.
        :rtype: str
        """
        return self._transaction_value

    @transaction_value.setter
    def transaction_value(self, transaction_value):
        """Sets the transaction_value of this CommitmentRequest.


        :param transaction_value: The transaction_value of this CommitmentRequest.
        :type transaction_value: str
        """
        if transaction_value is None:
            raise ValueError("Invalid value for `transaction_value`, must not be `None`")

        self._transaction_value = transaction_value
