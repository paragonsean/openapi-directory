# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.goal import Goal
from openapi_server import util


class Commitment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmation_status: str=None, created_at: datetime=None, free_loyalty_units: int=None, goal: Goal=None, id: str=None, loyalty_accumulation_value: str=None, loyalty_units: int=None, partner_id: str=None, promotion_goal_category: str=None, promotion_goal_description: str=None, redeemable_loyalty_units: int=None, redeemed: bool=None, redeemed_loyalty_units: int=None, updated_at: datetime=None, user_id: str=None):
        """Commitment - a model defined in OpenAPI

        :param confirmation_status: The confirmation_status of this Commitment.
        :param created_at: The created_at of this Commitment.
        :param free_loyalty_units: The free_loyalty_units of this Commitment.
        :param goal: The goal of this Commitment.
        :param id: The id of this Commitment.
        :param loyalty_accumulation_value: The loyalty_accumulation_value of this Commitment.
        :param loyalty_units: The loyalty_units of this Commitment.
        :param partner_id: The partner_id of this Commitment.
        :param promotion_goal_category: The promotion_goal_category of this Commitment.
        :param promotion_goal_description: The promotion_goal_description of this Commitment.
        :param redeemable_loyalty_units: The redeemable_loyalty_units of this Commitment.
        :param redeemed: The redeemed of this Commitment.
        :param redeemed_loyalty_units: The redeemed_loyalty_units of this Commitment.
        :param updated_at: The updated_at of this Commitment.
        :param user_id: The user_id of this Commitment.
        """
        self.openapi_types = {
            'confirmation_status': str,
            'created_at': datetime,
            'free_loyalty_units': int,
            'goal': Goal,
            'id': str,
            'loyalty_accumulation_value': str,
            'loyalty_units': int,
            'partner_id': str,
            'promotion_goal_category': str,
            'promotion_goal_description': str,
            'redeemable_loyalty_units': int,
            'redeemed': bool,
            'redeemed_loyalty_units': int,
            'updated_at': datetime,
            'user_id': str
        }

        self.attribute_map = {
            'confirmation_status': 'confirmation_status',
            'created_at': 'created_at',
            'free_loyalty_units': 'free_loyalty_units',
            'goal': 'goal',
            'id': 'id',
            'loyalty_accumulation_value': 'loyalty_accumulation_value',
            'loyalty_units': 'loyalty_units',
            'partner_id': 'partner_id',
            'promotion_goal_category': 'promotion_goal_category',
            'promotion_goal_description': 'promotion_goal_description',
            'redeemable_loyalty_units': 'redeemable_loyalty_units',
            'redeemed': 'redeemed',
            'redeemed_loyalty_units': 'redeemed_loyalty_units',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._confirmation_status = confirmation_status
        self._created_at = created_at
        self._free_loyalty_units = free_loyalty_units
        self._goal = goal
        self._id = id
        self._loyalty_accumulation_value = loyalty_accumulation_value
        self._loyalty_units = loyalty_units
        self._partner_id = partner_id
        self._promotion_goal_category = promotion_goal_category
        self._promotion_goal_description = promotion_goal_description
        self._redeemable_loyalty_units = redeemable_loyalty_units
        self._redeemed = redeemed
        self._redeemed_loyalty_units = redeemed_loyalty_units
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Commitment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Commitment of this Commitment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmation_status(self):
        """Gets the confirmation_status of this Commitment.


        :return: The confirmation_status of this Commitment.
        :rtype: str
        """
        return self._confirmation_status

    @confirmation_status.setter
    def confirmation_status(self, confirmation_status):
        """Sets the confirmation_status of this Commitment.


        :param confirmation_status: The confirmation_status of this Commitment.
        :type confirmation_status: str
        """
        allowed_values = ["pending", "confirmed"]  # noqa: E501
        if confirmation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `confirmation_status` ({0}), must be one of {1}"
                .format(confirmation_status, allowed_values)
            )

        self._confirmation_status = confirmation_status

    @property
    def created_at(self):
        """Gets the created_at of this Commitment.


        :return: The created_at of this Commitment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Commitment.


        :param created_at: The created_at of this Commitment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def free_loyalty_units(self):
        """Gets the free_loyalty_units of this Commitment.


        :return: The free_loyalty_units of this Commitment.
        :rtype: int
        """
        return self._free_loyalty_units

    @free_loyalty_units.setter
    def free_loyalty_units(self, free_loyalty_units):
        """Sets the free_loyalty_units of this Commitment.


        :param free_loyalty_units: The free_loyalty_units of this Commitment.
        :type free_loyalty_units: int
        """
        if free_loyalty_units is None:
            raise ValueError("Invalid value for `free_loyalty_units`, must not be `None`")

        self._free_loyalty_units = free_loyalty_units

    @property
    def goal(self):
        """Gets the goal of this Commitment.


        :return: The goal of this Commitment.
        :rtype: Goal
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this Commitment.


        :param goal: The goal of this Commitment.
        :type goal: Goal
        """
        if goal is None:
            raise ValueError("Invalid value for `goal`, must not be `None`")

        self._goal = goal

    @property
    def id(self):
        """Gets the id of this Commitment.


        :return: The id of this Commitment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Commitment.


        :param id: The id of this Commitment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def loyalty_accumulation_value(self):
        """Gets the loyalty_accumulation_value of this Commitment.


        :return: The loyalty_accumulation_value of this Commitment.
        :rtype: str
        """
        return self._loyalty_accumulation_value

    @loyalty_accumulation_value.setter
    def loyalty_accumulation_value(self, loyalty_accumulation_value):
        """Sets the loyalty_accumulation_value of this Commitment.


        :param loyalty_accumulation_value: The loyalty_accumulation_value of this Commitment.
        :type loyalty_accumulation_value: str
        """
        if loyalty_accumulation_value is None:
            raise ValueError("Invalid value for `loyalty_accumulation_value`, must not be `None`")

        self._loyalty_accumulation_value = loyalty_accumulation_value

    @property
    def loyalty_units(self):
        """Gets the loyalty_units of this Commitment.


        :return: The loyalty_units of this Commitment.
        :rtype: int
        """
        return self._loyalty_units

    @loyalty_units.setter
    def loyalty_units(self, loyalty_units):
        """Sets the loyalty_units of this Commitment.


        :param loyalty_units: The loyalty_units of this Commitment.
        :type loyalty_units: int
        """
        if loyalty_units is None:
            raise ValueError("Invalid value for `loyalty_units`, must not be `None`")

        self._loyalty_units = loyalty_units

    @property
    def partner_id(self):
        """Gets the partner_id of this Commitment.


        :return: The partner_id of this Commitment.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this Commitment.


        :param partner_id: The partner_id of this Commitment.
        :type partner_id: str
        """
        if partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")

        self._partner_id = partner_id

    @property
    def promotion_goal_category(self):
        """Gets the promotion_goal_category of this Commitment.


        :return: The promotion_goal_category of this Commitment.
        :rtype: str
        """
        return self._promotion_goal_category

    @promotion_goal_category.setter
    def promotion_goal_category(self, promotion_goal_category):
        """Sets the promotion_goal_category of this Commitment.


        :param promotion_goal_category: The promotion_goal_category of this Commitment.
        :type promotion_goal_category: str
        """
        if promotion_goal_category is None:
            raise ValueError("Invalid value for `promotion_goal_category`, must not be `None`")

        self._promotion_goal_category = promotion_goal_category

    @property
    def promotion_goal_description(self):
        """Gets the promotion_goal_description of this Commitment.


        :return: The promotion_goal_description of this Commitment.
        :rtype: str
        """
        return self._promotion_goal_description

    @promotion_goal_description.setter
    def promotion_goal_description(self, promotion_goal_description):
        """Sets the promotion_goal_description of this Commitment.


        :param promotion_goal_description: The promotion_goal_description of this Commitment.
        :type promotion_goal_description: str
        """
        if promotion_goal_description is None:
            raise ValueError("Invalid value for `promotion_goal_description`, must not be `None`")

        self._promotion_goal_description = promotion_goal_description

    @property
    def redeemable_loyalty_units(self):
        """Gets the redeemable_loyalty_units of this Commitment.


        :return: The redeemable_loyalty_units of this Commitment.
        :rtype: int
        """
        return self._redeemable_loyalty_units

    @redeemable_loyalty_units.setter
    def redeemable_loyalty_units(self, redeemable_loyalty_units):
        """Sets the redeemable_loyalty_units of this Commitment.


        :param redeemable_loyalty_units: The redeemable_loyalty_units of this Commitment.
        :type redeemable_loyalty_units: int
        """
        if redeemable_loyalty_units is None:
            raise ValueError("Invalid value for `redeemable_loyalty_units`, must not be `None`")

        self._redeemable_loyalty_units = redeemable_loyalty_units

    @property
    def redeemed(self):
        """Gets the redeemed of this Commitment.


        :return: The redeemed of this Commitment.
        :rtype: bool
        """
        return self._redeemed

    @redeemed.setter
    def redeemed(self, redeemed):
        """Sets the redeemed of this Commitment.


        :param redeemed: The redeemed of this Commitment.
        :type redeemed: bool
        """
        if redeemed is None:
            raise ValueError("Invalid value for `redeemed`, must not be `None`")

        self._redeemed = redeemed

    @property
    def redeemed_loyalty_units(self):
        """Gets the redeemed_loyalty_units of this Commitment.


        :return: The redeemed_loyalty_units of this Commitment.
        :rtype: int
        """
        return self._redeemed_loyalty_units

    @redeemed_loyalty_units.setter
    def redeemed_loyalty_units(self, redeemed_loyalty_units):
        """Sets the redeemed_loyalty_units of this Commitment.


        :param redeemed_loyalty_units: The redeemed_loyalty_units of this Commitment.
        :type redeemed_loyalty_units: int
        """
        if redeemed_loyalty_units is None:
            raise ValueError("Invalid value for `redeemed_loyalty_units`, must not be `None`")

        self._redeemed_loyalty_units = redeemed_loyalty_units

    @property
    def updated_at(self):
        """Gets the updated_at of this Commitment.


        :return: The updated_at of this Commitment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Commitment.


        :param updated_at: The updated_at of this Commitment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this Commitment.


        :return: The user_id of this Commitment.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Commitment.


        :param user_id: The user_id of this Commitment.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
