# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partner_id: str=None, partner_user_id: str=None, user_session_id: str=None):
        """User - a model defined in OpenAPI

        :param partner_id: The partner_id of this User.
        :param partner_user_id: The partner_user_id of this User.
        :param user_session_id: The user_session_id of this User.
        """
        self.openapi_types = {
            'partner_id': str,
            'partner_user_id': str,
            'user_session_id': str
        }

        self.attribute_map = {
            'partner_id': 'partner_id',
            'partner_user_id': 'partner_user_id',
            'user_session_id': 'user_session_id'
        }

        self._partner_id = partner_id
        self._partner_user_id = partner_user_id
        self._user_session_id = user_session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partner_id(self):
        """Gets the partner_id of this User.

        Your partner_id. You can use the value of data-partner-id parameter

        :return: The partner_id of this User.
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this User.

        Your partner_id. You can use the value of data-partner-id parameter

        :param partner_id: The partner_id of this User.
        :type partner_id: str
        """
        if partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")

        self._partner_id = partner_id

    @property
    def partner_user_id(self):
        """Gets the partner_user_id of this User.

        A unique string that identify your customer. !!IMPORTANT!! You should use always the same partner_user_id for the same customer

        :return: The partner_user_id of this User.
        :rtype: str
        """
        return self._partner_user_id

    @partner_user_id.setter
    def partner_user_id(self, partner_user_id):
        """Sets the partner_user_id of this User.

        A unique string that identify your customer. !!IMPORTANT!! You should use always the same partner_user_id for the same customer

        :param partner_user_id: The partner_user_id of this User.
        :type partner_user_id: str
        """
        if partner_user_id is None:
            raise ValueError("Invalid value for `partner_user_id`, must not be `None`")

        self._partner_user_id = partner_user_id

    @property
    def user_session_id(self):
        """Gets the user_session_id of this User.

        A unique string that identify the current user session. !!IMPORTANT!! This value should be the same set in %%sessionId%% of koomalooma javascript

        :return: The user_session_id of this User.
        :rtype: str
        """
        return self._user_session_id

    @user_session_id.setter
    def user_session_id(self, user_session_id):
        """Sets the user_session_id of this User.

        A unique string that identify the current user session. !!IMPORTANT!! This value should be the same set in %%sessionId%% of koomalooma javascript

        :param user_session_id: The user_session_id of this User.
        :type user_session_id: str
        """
        if user_session_id is None:
            raise ValueError("Invalid value for `user_session_id`, must not be `None`")

        self._user_session_id = user_session_id
