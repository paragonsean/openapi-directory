/*
 * koomalooma Partner API
 * This is the koomalooma Partner API. koomalooma is the first Loyalty BPaaS (Business Process as a Service) for mobile and web companies. With koomalooma merchants issue points for actions their customers / users make on your mobile or web store, for example a purchase or a referral. koomalooma takes care of all the rest, from signing up users, keeping track of points and delivering rewards in over 80 countries. koomalooma offers an easy to integrate API and web backend to configure loyalty campaigns and track performance. You can find more at http://support.koomalooma.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@koomalooma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Goal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Commitment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:45.869634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Commitment {
  /**
   * Gets or Sets confirmationStatus
   */
  @JsonAdapter(ConfirmationStatusEnum.Adapter.class)
  public enum ConfirmationStatusEnum {
    PENDING("pending"),
    
    CONFIRMED("confirmed");

    private String value;

    ConfirmationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfirmationStatusEnum fromValue(String value) {
      for (ConfirmationStatusEnum b : ConfirmationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfirmationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfirmationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfirmationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfirmationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfirmationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIRMATION_STATUS = "confirmation_status";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_STATUS)
  private ConfirmationStatusEnum confirmationStatus;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_FREE_LOYALTY_UNITS = "free_loyalty_units";
  @SerializedName(SERIALIZED_NAME_FREE_LOYALTY_UNITS)
  private Integer freeLoyaltyUnits;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private Goal goal;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOYALTY_ACCUMULATION_VALUE = "loyalty_accumulation_value";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCUMULATION_VALUE)
  private String loyaltyAccumulationValue;

  public static final String SERIALIZED_NAME_LOYALTY_UNITS = "loyalty_units";
  @SerializedName(SERIALIZED_NAME_LOYALTY_UNITS)
  private Integer loyaltyUnits;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partner_id";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  public static final String SERIALIZED_NAME_PROMOTION_GOAL_CATEGORY = "promotion_goal_category";
  @SerializedName(SERIALIZED_NAME_PROMOTION_GOAL_CATEGORY)
  private String promotionGoalCategory;

  public static final String SERIALIZED_NAME_PROMOTION_GOAL_DESCRIPTION = "promotion_goal_description";
  @SerializedName(SERIALIZED_NAME_PROMOTION_GOAL_DESCRIPTION)
  private String promotionGoalDescription;

  public static final String SERIALIZED_NAME_REDEEMABLE_LOYALTY_UNITS = "redeemable_loyalty_units";
  @SerializedName(SERIALIZED_NAME_REDEEMABLE_LOYALTY_UNITS)
  private Integer redeemableLoyaltyUnits;

  public static final String SERIALIZED_NAME_REDEEMED = "redeemed";
  @SerializedName(SERIALIZED_NAME_REDEEMED)
  private Boolean redeemed;

  public static final String SERIALIZED_NAME_REDEEMED_LOYALTY_UNITS = "redeemed_loyalty_units";
  @SerializedName(SERIALIZED_NAME_REDEEMED_LOYALTY_UNITS)
  private Integer redeemedLoyaltyUnits;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Commitment() {
  }

  public Commitment confirmationStatus(ConfirmationStatusEnum confirmationStatus) {
    this.confirmationStatus = confirmationStatus;
    return this;
  }

  /**
   * Get confirmationStatus
   * @return confirmationStatus
   */
  @javax.annotation.Nonnull
  public ConfirmationStatusEnum getConfirmationStatus() {
    return confirmationStatus;
  }

  public void setConfirmationStatus(ConfirmationStatusEnum confirmationStatus) {
    this.confirmationStatus = confirmationStatus;
  }


  public Commitment createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Commitment freeLoyaltyUnits(Integer freeLoyaltyUnits) {
    this.freeLoyaltyUnits = freeLoyaltyUnits;
    return this;
  }

  /**
   * Get freeLoyaltyUnits
   * @return freeLoyaltyUnits
   */
  @javax.annotation.Nonnull
  public Integer getFreeLoyaltyUnits() {
    return freeLoyaltyUnits;
  }

  public void setFreeLoyaltyUnits(Integer freeLoyaltyUnits) {
    this.freeLoyaltyUnits = freeLoyaltyUnits;
  }


  public Commitment goal(Goal goal) {
    this.goal = goal;
    return this;
  }

  /**
   * Get goal
   * @return goal
   */
  @javax.annotation.Nonnull
  public Goal getGoal() {
    return goal;
  }

  public void setGoal(Goal goal) {
    this.goal = goal;
  }


  public Commitment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Commitment loyaltyAccumulationValue(String loyaltyAccumulationValue) {
    this.loyaltyAccumulationValue = loyaltyAccumulationValue;
    return this;
  }

  /**
   * Get loyaltyAccumulationValue
   * @return loyaltyAccumulationValue
   */
  @javax.annotation.Nonnull
  public String getLoyaltyAccumulationValue() {
    return loyaltyAccumulationValue;
  }

  public void setLoyaltyAccumulationValue(String loyaltyAccumulationValue) {
    this.loyaltyAccumulationValue = loyaltyAccumulationValue;
  }


  public Commitment loyaltyUnits(Integer loyaltyUnits) {
    this.loyaltyUnits = loyaltyUnits;
    return this;
  }

  /**
   * Get loyaltyUnits
   * @return loyaltyUnits
   */
  @javax.annotation.Nonnull
  public Integer getLoyaltyUnits() {
    return loyaltyUnits;
  }

  public void setLoyaltyUnits(Integer loyaltyUnits) {
    this.loyaltyUnits = loyaltyUnits;
  }


  public Commitment partnerId(String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  /**
   * Get partnerId
   * @return partnerId
   */
  @javax.annotation.Nonnull
  public String getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(String partnerId) {
    this.partnerId = partnerId;
  }


  public Commitment promotionGoalCategory(String promotionGoalCategory) {
    this.promotionGoalCategory = promotionGoalCategory;
    return this;
  }

  /**
   * Get promotionGoalCategory
   * @return promotionGoalCategory
   */
  @javax.annotation.Nonnull
  public String getPromotionGoalCategory() {
    return promotionGoalCategory;
  }

  public void setPromotionGoalCategory(String promotionGoalCategory) {
    this.promotionGoalCategory = promotionGoalCategory;
  }


  public Commitment promotionGoalDescription(String promotionGoalDescription) {
    this.promotionGoalDescription = promotionGoalDescription;
    return this;
  }

  /**
   * Get promotionGoalDescription
   * @return promotionGoalDescription
   */
  @javax.annotation.Nonnull
  public String getPromotionGoalDescription() {
    return promotionGoalDescription;
  }

  public void setPromotionGoalDescription(String promotionGoalDescription) {
    this.promotionGoalDescription = promotionGoalDescription;
  }


  public Commitment redeemableLoyaltyUnits(Integer redeemableLoyaltyUnits) {
    this.redeemableLoyaltyUnits = redeemableLoyaltyUnits;
    return this;
  }

  /**
   * Get redeemableLoyaltyUnits
   * @return redeemableLoyaltyUnits
   */
  @javax.annotation.Nonnull
  public Integer getRedeemableLoyaltyUnits() {
    return redeemableLoyaltyUnits;
  }

  public void setRedeemableLoyaltyUnits(Integer redeemableLoyaltyUnits) {
    this.redeemableLoyaltyUnits = redeemableLoyaltyUnits;
  }


  public Commitment redeemed(Boolean redeemed) {
    this.redeemed = redeemed;
    return this;
  }

  /**
   * Get redeemed
   * @return redeemed
   */
  @javax.annotation.Nonnull
  public Boolean getRedeemed() {
    return redeemed;
  }

  public void setRedeemed(Boolean redeemed) {
    this.redeemed = redeemed;
  }


  public Commitment redeemedLoyaltyUnits(Integer redeemedLoyaltyUnits) {
    this.redeemedLoyaltyUnits = redeemedLoyaltyUnits;
    return this;
  }

  /**
   * Get redeemedLoyaltyUnits
   * @return redeemedLoyaltyUnits
   */
  @javax.annotation.Nonnull
  public Integer getRedeemedLoyaltyUnits() {
    return redeemedLoyaltyUnits;
  }

  public void setRedeemedLoyaltyUnits(Integer redeemedLoyaltyUnits) {
    this.redeemedLoyaltyUnits = redeemedLoyaltyUnits;
  }


  public Commitment updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Commitment userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Commitment commitment = (Commitment) o;
    return Objects.equals(this.confirmationStatus, commitment.confirmationStatus) &&
        Objects.equals(this.createdAt, commitment.createdAt) &&
        Objects.equals(this.freeLoyaltyUnits, commitment.freeLoyaltyUnits) &&
        Objects.equals(this.goal, commitment.goal) &&
        Objects.equals(this.id, commitment.id) &&
        Objects.equals(this.loyaltyAccumulationValue, commitment.loyaltyAccumulationValue) &&
        Objects.equals(this.loyaltyUnits, commitment.loyaltyUnits) &&
        Objects.equals(this.partnerId, commitment.partnerId) &&
        Objects.equals(this.promotionGoalCategory, commitment.promotionGoalCategory) &&
        Objects.equals(this.promotionGoalDescription, commitment.promotionGoalDescription) &&
        Objects.equals(this.redeemableLoyaltyUnits, commitment.redeemableLoyaltyUnits) &&
        Objects.equals(this.redeemed, commitment.redeemed) &&
        Objects.equals(this.redeemedLoyaltyUnits, commitment.redeemedLoyaltyUnits) &&
        Objects.equals(this.updatedAt, commitment.updatedAt) &&
        Objects.equals(this.userId, commitment.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmationStatus, createdAt, freeLoyaltyUnits, goal, id, loyaltyAccumulationValue, loyaltyUnits, partnerId, promotionGoalCategory, promotionGoalDescription, redeemableLoyaltyUnits, redeemed, redeemedLoyaltyUnits, updatedAt, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Commitment {\n");
    sb.append("    confirmationStatus: ").append(toIndentedString(confirmationStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    freeLoyaltyUnits: ").append(toIndentedString(freeLoyaltyUnits)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loyaltyAccumulationValue: ").append(toIndentedString(loyaltyAccumulationValue)).append("\n");
    sb.append("    loyaltyUnits: ").append(toIndentedString(loyaltyUnits)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    promotionGoalCategory: ").append(toIndentedString(promotionGoalCategory)).append("\n");
    sb.append("    promotionGoalDescription: ").append(toIndentedString(promotionGoalDescription)).append("\n");
    sb.append("    redeemableLoyaltyUnits: ").append(toIndentedString(redeemableLoyaltyUnits)).append("\n");
    sb.append("    redeemed: ").append(toIndentedString(redeemed)).append("\n");
    sb.append("    redeemedLoyaltyUnits: ").append(toIndentedString(redeemedLoyaltyUnits)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmation_status");
    openapiFields.add("created_at");
    openapiFields.add("free_loyalty_units");
    openapiFields.add("goal");
    openapiFields.add("id");
    openapiFields.add("loyalty_accumulation_value");
    openapiFields.add("loyalty_units");
    openapiFields.add("partner_id");
    openapiFields.add("promotion_goal_category");
    openapiFields.add("promotion_goal_description");
    openapiFields.add("redeemable_loyalty_units");
    openapiFields.add("redeemed");
    openapiFields.add("redeemed_loyalty_units");
    openapiFields.add("updated_at");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confirmation_status");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("free_loyalty_units");
    openapiRequiredFields.add("goal");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("loyalty_accumulation_value");
    openapiRequiredFields.add("loyalty_units");
    openapiRequiredFields.add("partner_id");
    openapiRequiredFields.add("promotion_goal_category");
    openapiRequiredFields.add("promotion_goal_description");
    openapiRequiredFields.add("redeemable_loyalty_units");
    openapiRequiredFields.add("redeemed");
    openapiRequiredFields.add("redeemed_loyalty_units");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Commitment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Commitment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Commitment is not found in the empty JSON string", Commitment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Commitment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Commitment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Commitment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("confirmation_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_status").toString()));
      }
      // validate the required field `confirmation_status`
      ConfirmationStatusEnum.validateJsonElement(jsonObj.get("confirmation_status"));
      // validate the required field `goal`
      Goal.validateJsonElement(jsonObj.get("goal"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("loyalty_accumulation_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyalty_accumulation_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loyalty_accumulation_value").toString()));
      }
      if (!jsonObj.get("partner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner_id").toString()));
      }
      if (!jsonObj.get("promotion_goal_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotion_goal_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotion_goal_category").toString()));
      }
      if (!jsonObj.get("promotion_goal_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotion_goal_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotion_goal_description").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Commitment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Commitment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Commitment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Commitment.class));

       return (TypeAdapter<T>) new TypeAdapter<Commitment>() {
           @Override
           public void write(JsonWriter out, Commitment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Commitment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Commitment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Commitment
   * @throws IOException if the JSON string is invalid with respect to Commitment
   */
  public static Commitment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Commitment.class);
  }

  /**
   * Convert an instance of Commitment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

