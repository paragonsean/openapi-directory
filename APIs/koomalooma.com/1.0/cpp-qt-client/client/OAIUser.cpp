/**
 * koomalooma Partner API
 * This is the koomalooma Partner API. koomalooma is the first Loyalty BPaaS (Business Process as a Service) for mobile and web companies. With koomalooma merchants issue points for actions their customers / users make on your mobile or web store, for example a purchase or a referral. koomalooma takes care of all the rest, from signing up users, keeping track of points and delivering rewards in over 80 countries. koomalooma offers an easy to integrate API and web backend to configure loyalty campaigns and track performance. You can find more at http://support.koomalooma.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@koomalooma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_partner_user_id_isSet = false;
    m_partner_user_id_isValid = false;

    m_user_session_id_isSet = false;
    m_user_session_id_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partner_id")]);
    m_partner_id_isSet = !json[QString("partner_id")].isNull() && m_partner_id_isValid;

    m_partner_user_id_isValid = ::OpenAPI::fromJsonValue(m_partner_user_id, json[QString("partner_user_id")]);
    m_partner_user_id_isSet = !json[QString("partner_user_id")].isNull() && m_partner_user_id_isValid;

    m_user_session_id_isValid = ::OpenAPI::fromJsonValue(m_user_session_id, json[QString("user_session_id")]);
    m_user_session_id_isSet = !json[QString("user_session_id")].isNull() && m_user_session_id_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_partner_id_isSet) {
        obj.insert(QString("partner_id"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_partner_user_id_isSet) {
        obj.insert(QString("partner_user_id"), ::OpenAPI::toJsonValue(m_partner_user_id));
    }
    if (m_user_session_id_isSet) {
        obj.insert(QString("user_session_id"), ::OpenAPI::toJsonValue(m_user_session_id));
    }
    return obj;
}

QString OAIUser::getPartnerId() const {
    return m_partner_id;
}
void OAIUser::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIUser::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIUser::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIUser::getPartnerUserId() const {
    return m_partner_user_id;
}
void OAIUser::setPartnerUserId(const QString &partner_user_id) {
    m_partner_user_id = partner_user_id;
    m_partner_user_id_isSet = true;
}

bool OAIUser::is_partner_user_id_Set() const{
    return m_partner_user_id_isSet;
}

bool OAIUser::is_partner_user_id_Valid() const{
    return m_partner_user_id_isValid;
}

QString OAIUser::getUserSessionId() const {
    return m_user_session_id;
}
void OAIUser::setUserSessionId(const QString &user_session_id) {
    m_user_session_id = user_session_id;
    m_user_session_id_isSet = true;
}

bool OAIUser::is_user_session_id_Set() const{
    return m_user_session_id_isSet;
}

bool OAIUser::is_user_session_id_Valid() const{
    return m_user_session_id_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_partner_id_isValid && m_partner_user_id_isValid && m_user_session_id_isValid && true;
}

} // namespace OpenAPI
