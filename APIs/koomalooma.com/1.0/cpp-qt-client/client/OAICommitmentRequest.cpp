/**
 * koomalooma Partner API
 * This is the koomalooma Partner API. koomalooma is the first Loyalty BPaaS (Business Process as a Service) for mobile and web companies. With koomalooma merchants issue points for actions their customers / users make on your mobile or web store, for example a purchase or a referral. koomalooma takes care of all the rest, from signing up users, keeping track of points and delivering rewards in over 80 countries. koomalooma offers an easy to integrate API and web backend to configure loyalty campaigns and track performance. You can find more at http://support.koomalooma.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@koomalooma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitmentRequest::OAICommitmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitmentRequest::OAICommitmentRequest() {
    this->initializeModel();
}

OAICommitmentRequest::~OAICommitmentRequest() {}

void OAICommitmentRequest::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_promotion_goal_category_isSet = false;
    m_promotion_goal_category_isValid = false;

    m_promotion_goal_description_isSet = false;
    m_promotion_goal_description_isValid = false;

    m_transaction_value_isSet = false;
    m_transaction_value_isValid = false;
}

void OAICommitmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitmentRequest::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_promotion_goal_category_isValid = ::OpenAPI::fromJsonValue(m_promotion_goal_category, json[QString("promotion_goal_category")]);
    m_promotion_goal_category_isSet = !json[QString("promotion_goal_category")].isNull() && m_promotion_goal_category_isValid;

    m_promotion_goal_description_isValid = ::OpenAPI::fromJsonValue(m_promotion_goal_description, json[QString("promotion_goal_description")]);
    m_promotion_goal_description_isSet = !json[QString("promotion_goal_description")].isNull() && m_promotion_goal_description_isValid;

    m_transaction_value_isValid = ::OpenAPI::fromJsonValue(m_transaction_value, json[QString("transaction_value")]);
    m_transaction_value_isSet = !json[QString("transaction_value")].isNull() && m_transaction_value_isValid;
}

QString OAICommitmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_promotion_goal_category_isSet) {
        obj.insert(QString("promotion_goal_category"), ::OpenAPI::toJsonValue(m_promotion_goal_category));
    }
    if (m_promotion_goal_description_isSet) {
        obj.insert(QString("promotion_goal_description"), ::OpenAPI::toJsonValue(m_promotion_goal_description));
    }
    if (m_transaction_value_isSet) {
        obj.insert(QString("transaction_value"), ::OpenAPI::toJsonValue(m_transaction_value));
    }
    return obj;
}

QString OAICommitmentRequest::getCampaignId() const {
    return m_campaign_id;
}
void OAICommitmentRequest::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAICommitmentRequest::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAICommitmentRequest::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAICommitmentRequest::getPromotionGoalCategory() const {
    return m_promotion_goal_category;
}
void OAICommitmentRequest::setPromotionGoalCategory(const QString &promotion_goal_category) {
    m_promotion_goal_category = promotion_goal_category;
    m_promotion_goal_category_isSet = true;
}

bool OAICommitmentRequest::is_promotion_goal_category_Set() const{
    return m_promotion_goal_category_isSet;
}

bool OAICommitmentRequest::is_promotion_goal_category_Valid() const{
    return m_promotion_goal_category_isValid;
}

QString OAICommitmentRequest::getPromotionGoalDescription() const {
    return m_promotion_goal_description;
}
void OAICommitmentRequest::setPromotionGoalDescription(const QString &promotion_goal_description) {
    m_promotion_goal_description = promotion_goal_description;
    m_promotion_goal_description_isSet = true;
}

bool OAICommitmentRequest::is_promotion_goal_description_Set() const{
    return m_promotion_goal_description_isSet;
}

bool OAICommitmentRequest::is_promotion_goal_description_Valid() const{
    return m_promotion_goal_description_isValid;
}

QString OAICommitmentRequest::getTransactionValue() const {
    return m_transaction_value;
}
void OAICommitmentRequest::setTransactionValue(const QString &transaction_value) {
    m_transaction_value = transaction_value;
    m_transaction_value_isSet = true;
}

bool OAICommitmentRequest::is_transaction_value_Set() const{
    return m_transaction_value_isSet;
}

bool OAICommitmentRequest::is_transaction_value_Valid() const{
    return m_transaction_value_isValid;
}

bool OAICommitmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_goal_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_goal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_id_isValid && m_promotion_goal_category_isValid && m_promotion_goal_description_isValid && m_transaction_value_isValid && true;
}

} // namespace OpenAPI
