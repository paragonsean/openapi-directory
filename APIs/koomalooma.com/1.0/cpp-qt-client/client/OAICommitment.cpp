/**
 * koomalooma Partner API
 * This is the koomalooma Partner API. koomalooma is the first Loyalty BPaaS (Business Process as a Service) for mobile and web companies. With koomalooma merchants issue points for actions their customers / users make on your mobile or web store, for example a purchase or a referral. koomalooma takes care of all the rest, from signing up users, keeping track of points and delivering rewards in over 80 countries. koomalooma offers an easy to integrate API and web backend to configure loyalty campaigns and track performance. You can find more at http://support.koomalooma.com
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@koomalooma.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitment::OAICommitment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitment::OAICommitment() {
    this->initializeModel();
}

OAICommitment::~OAICommitment() {}

void OAICommitment::initializeModel() {

    m_confirmation_status_isSet = false;
    m_confirmation_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_free_loyalty_units_isSet = false;
    m_free_loyalty_units_isValid = false;

    m_goal_isSet = false;
    m_goal_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_loyalty_accumulation_value_isSet = false;
    m_loyalty_accumulation_value_isValid = false;

    m_loyalty_units_isSet = false;
    m_loyalty_units_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_promotion_goal_category_isSet = false;
    m_promotion_goal_category_isValid = false;

    m_promotion_goal_description_isSet = false;
    m_promotion_goal_description_isValid = false;

    m_redeemable_loyalty_units_isSet = false;
    m_redeemable_loyalty_units_isValid = false;

    m_redeemed_isSet = false;
    m_redeemed_isValid = false;

    m_redeemed_loyalty_units_isSet = false;
    m_redeemed_loyalty_units_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICommitment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitment::fromJsonObject(QJsonObject json) {

    m_confirmation_status_isValid = ::OpenAPI::fromJsonValue(m_confirmation_status, json[QString("confirmation_status")]);
    m_confirmation_status_isSet = !json[QString("confirmation_status")].isNull() && m_confirmation_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_free_loyalty_units_isValid = ::OpenAPI::fromJsonValue(m_free_loyalty_units, json[QString("free_loyalty_units")]);
    m_free_loyalty_units_isSet = !json[QString("free_loyalty_units")].isNull() && m_free_loyalty_units_isValid;

    m_goal_isValid = ::OpenAPI::fromJsonValue(m_goal, json[QString("goal")]);
    m_goal_isSet = !json[QString("goal")].isNull() && m_goal_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_loyalty_accumulation_value_isValid = ::OpenAPI::fromJsonValue(m_loyalty_accumulation_value, json[QString("loyalty_accumulation_value")]);
    m_loyalty_accumulation_value_isSet = !json[QString("loyalty_accumulation_value")].isNull() && m_loyalty_accumulation_value_isValid;

    m_loyalty_units_isValid = ::OpenAPI::fromJsonValue(m_loyalty_units, json[QString("loyalty_units")]);
    m_loyalty_units_isSet = !json[QString("loyalty_units")].isNull() && m_loyalty_units_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partner_id")]);
    m_partner_id_isSet = !json[QString("partner_id")].isNull() && m_partner_id_isValid;

    m_promotion_goal_category_isValid = ::OpenAPI::fromJsonValue(m_promotion_goal_category, json[QString("promotion_goal_category")]);
    m_promotion_goal_category_isSet = !json[QString("promotion_goal_category")].isNull() && m_promotion_goal_category_isValid;

    m_promotion_goal_description_isValid = ::OpenAPI::fromJsonValue(m_promotion_goal_description, json[QString("promotion_goal_description")]);
    m_promotion_goal_description_isSet = !json[QString("promotion_goal_description")].isNull() && m_promotion_goal_description_isValid;

    m_redeemable_loyalty_units_isValid = ::OpenAPI::fromJsonValue(m_redeemable_loyalty_units, json[QString("redeemable_loyalty_units")]);
    m_redeemable_loyalty_units_isSet = !json[QString("redeemable_loyalty_units")].isNull() && m_redeemable_loyalty_units_isValid;

    m_redeemed_isValid = ::OpenAPI::fromJsonValue(m_redeemed, json[QString("redeemed")]);
    m_redeemed_isSet = !json[QString("redeemed")].isNull() && m_redeemed_isValid;

    m_redeemed_loyalty_units_isValid = ::OpenAPI::fromJsonValue(m_redeemed_loyalty_units, json[QString("redeemed_loyalty_units")]);
    m_redeemed_loyalty_units_isSet = !json[QString("redeemed_loyalty_units")].isNull() && m_redeemed_loyalty_units_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICommitment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitment::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmation_status_isSet) {
        obj.insert(QString("confirmation_status"), ::OpenAPI::toJsonValue(m_confirmation_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_free_loyalty_units_isSet) {
        obj.insert(QString("free_loyalty_units"), ::OpenAPI::toJsonValue(m_free_loyalty_units));
    }
    if (m_goal.isSet()) {
        obj.insert(QString("goal"), ::OpenAPI::toJsonValue(m_goal));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_loyalty_accumulation_value_isSet) {
        obj.insert(QString("loyalty_accumulation_value"), ::OpenAPI::toJsonValue(m_loyalty_accumulation_value));
    }
    if (m_loyalty_units_isSet) {
        obj.insert(QString("loyalty_units"), ::OpenAPI::toJsonValue(m_loyalty_units));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partner_id"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_promotion_goal_category_isSet) {
        obj.insert(QString("promotion_goal_category"), ::OpenAPI::toJsonValue(m_promotion_goal_category));
    }
    if (m_promotion_goal_description_isSet) {
        obj.insert(QString("promotion_goal_description"), ::OpenAPI::toJsonValue(m_promotion_goal_description));
    }
    if (m_redeemable_loyalty_units_isSet) {
        obj.insert(QString("redeemable_loyalty_units"), ::OpenAPI::toJsonValue(m_redeemable_loyalty_units));
    }
    if (m_redeemed_isSet) {
        obj.insert(QString("redeemed"), ::OpenAPI::toJsonValue(m_redeemed));
    }
    if (m_redeemed_loyalty_units_isSet) {
        obj.insert(QString("redeemed_loyalty_units"), ::OpenAPI::toJsonValue(m_redeemed_loyalty_units));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICommitment::getConfirmationStatus() const {
    return m_confirmation_status;
}
void OAICommitment::setConfirmationStatus(const QString &confirmation_status) {
    m_confirmation_status = confirmation_status;
    m_confirmation_status_isSet = true;
}

bool OAICommitment::is_confirmation_status_Set() const{
    return m_confirmation_status_isSet;
}

bool OAICommitment::is_confirmation_status_Valid() const{
    return m_confirmation_status_isValid;
}

QDateTime OAICommitment::getCreatedAt() const {
    return m_created_at;
}
void OAICommitment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICommitment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICommitment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAICommitment::getFreeLoyaltyUnits() const {
    return m_free_loyalty_units;
}
void OAICommitment::setFreeLoyaltyUnits(const qint32 &free_loyalty_units) {
    m_free_loyalty_units = free_loyalty_units;
    m_free_loyalty_units_isSet = true;
}

bool OAICommitment::is_free_loyalty_units_Set() const{
    return m_free_loyalty_units_isSet;
}

bool OAICommitment::is_free_loyalty_units_Valid() const{
    return m_free_loyalty_units_isValid;
}

OAIGoal OAICommitment::getGoal() const {
    return m_goal;
}
void OAICommitment::setGoal(const OAIGoal &goal) {
    m_goal = goal;
    m_goal_isSet = true;
}

bool OAICommitment::is_goal_Set() const{
    return m_goal_isSet;
}

bool OAICommitment::is_goal_Valid() const{
    return m_goal_isValid;
}

QString OAICommitment::getId() const {
    return m_id;
}
void OAICommitment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommitment::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommitment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICommitment::getLoyaltyAccumulationValue() const {
    return m_loyalty_accumulation_value;
}
void OAICommitment::setLoyaltyAccumulationValue(const QString &loyalty_accumulation_value) {
    m_loyalty_accumulation_value = loyalty_accumulation_value;
    m_loyalty_accumulation_value_isSet = true;
}

bool OAICommitment::is_loyalty_accumulation_value_Set() const{
    return m_loyalty_accumulation_value_isSet;
}

bool OAICommitment::is_loyalty_accumulation_value_Valid() const{
    return m_loyalty_accumulation_value_isValid;
}

qint32 OAICommitment::getLoyaltyUnits() const {
    return m_loyalty_units;
}
void OAICommitment::setLoyaltyUnits(const qint32 &loyalty_units) {
    m_loyalty_units = loyalty_units;
    m_loyalty_units_isSet = true;
}

bool OAICommitment::is_loyalty_units_Set() const{
    return m_loyalty_units_isSet;
}

bool OAICommitment::is_loyalty_units_Valid() const{
    return m_loyalty_units_isValid;
}

QString OAICommitment::getPartnerId() const {
    return m_partner_id;
}
void OAICommitment::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAICommitment::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAICommitment::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAICommitment::getPromotionGoalCategory() const {
    return m_promotion_goal_category;
}
void OAICommitment::setPromotionGoalCategory(const QString &promotion_goal_category) {
    m_promotion_goal_category = promotion_goal_category;
    m_promotion_goal_category_isSet = true;
}

bool OAICommitment::is_promotion_goal_category_Set() const{
    return m_promotion_goal_category_isSet;
}

bool OAICommitment::is_promotion_goal_category_Valid() const{
    return m_promotion_goal_category_isValid;
}

QString OAICommitment::getPromotionGoalDescription() const {
    return m_promotion_goal_description;
}
void OAICommitment::setPromotionGoalDescription(const QString &promotion_goal_description) {
    m_promotion_goal_description = promotion_goal_description;
    m_promotion_goal_description_isSet = true;
}

bool OAICommitment::is_promotion_goal_description_Set() const{
    return m_promotion_goal_description_isSet;
}

bool OAICommitment::is_promotion_goal_description_Valid() const{
    return m_promotion_goal_description_isValid;
}

qint32 OAICommitment::getRedeemableLoyaltyUnits() const {
    return m_redeemable_loyalty_units;
}
void OAICommitment::setRedeemableLoyaltyUnits(const qint32 &redeemable_loyalty_units) {
    m_redeemable_loyalty_units = redeemable_loyalty_units;
    m_redeemable_loyalty_units_isSet = true;
}

bool OAICommitment::is_redeemable_loyalty_units_Set() const{
    return m_redeemable_loyalty_units_isSet;
}

bool OAICommitment::is_redeemable_loyalty_units_Valid() const{
    return m_redeemable_loyalty_units_isValid;
}

bool OAICommitment::isRedeemed() const {
    return m_redeemed;
}
void OAICommitment::setRedeemed(const bool &redeemed) {
    m_redeemed = redeemed;
    m_redeemed_isSet = true;
}

bool OAICommitment::is_redeemed_Set() const{
    return m_redeemed_isSet;
}

bool OAICommitment::is_redeemed_Valid() const{
    return m_redeemed_isValid;
}

qint32 OAICommitment::getRedeemedLoyaltyUnits() const {
    return m_redeemed_loyalty_units;
}
void OAICommitment::setRedeemedLoyaltyUnits(const qint32 &redeemed_loyalty_units) {
    m_redeemed_loyalty_units = redeemed_loyalty_units;
    m_redeemed_loyalty_units_isSet = true;
}

bool OAICommitment::is_redeemed_loyalty_units_Set() const{
    return m_redeemed_loyalty_units_isSet;
}

bool OAICommitment::is_redeemed_loyalty_units_Valid() const{
    return m_redeemed_loyalty_units_isValid;
}

QDateTime OAICommitment::getUpdatedAt() const {
    return m_updated_at;
}
void OAICommitment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICommitment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICommitment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICommitment::getUserId() const {
    return m_user_id;
}
void OAICommitment::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICommitment::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICommitment::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICommitment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_loyalty_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_accumulation_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_goal_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_goal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeemable_loyalty_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeemed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redeemed_loyalty_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confirmation_status_isValid && m_created_at_isValid && m_free_loyalty_units_isValid && m_goal_isValid && m_id_isValid && m_loyalty_accumulation_value_isValid && m_loyalty_units_isValid && m_partner_id_isValid && m_promotion_goal_category_isValid && m_promotion_goal_description_isValid && m_redeemable_loyalty_units_isValid && m_redeemed_isValid && m_redeemed_loyalty_units_isValid && m_updated_at_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
