/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import Migration from '../model/Migration';
import MigrationsStartForAuthenticatedUserRequest from '../model/MigrationsStartForAuthenticatedUserRequest';
import MigrationsStartForOrgRequest from '../model/MigrationsStartForOrgRequest';
import MinimalRepository from '../model/MinimalRepository';
import ValidationError from '../model/ValidationError';

/**
* Migrations service.
* @module api/MigrationsApi
* @version 1.1.4
*/
export default class MigrationsApi {

    /**
    * Constructs a new MigrationsApi. 
    * @alias module:api/MigrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the migrationsDeleteArchiveForOrg operation.
     * @callback module:api/MigrationsApi~migrationsDeleteArchiveForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization migration archive
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsDeleteArchiveForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsDeleteArchiveForOrg(org, migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsDeleteArchiveForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsDeleteArchiveForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsDownloadArchiveForOrg operation.
     * @callback module:api/MigrationsApi~migrationsDownloadArchiveForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an organization migration archive
     * Fetches the URL to a migration archive.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsDownloadArchiveForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsDownloadArchiveForOrg(org, migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsDownloadArchiveForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsDownloadArchiveForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetArchiveForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsGetArchiveForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a user migration archive
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsGetArchiveForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsGetArchiveForAuthenticatedUser(migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsGetArchiveForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetStatusForOrg operation.
     * @callback module:api/MigrationsApi~migrationsGetStatusForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization migration status
     * Fetches the status of a migration.  The `state` of a migration can be one of the following values:  *   `pending`, which means the migration hasn't started yet. *   `exporting`, which means the migration is in progress. *   `exported`, which means the migration finished successfully. *   `failed`, which means the migration failed.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [exclude] Exclude attributes from the API response to improve performance
     * @param {module:api/MigrationsApi~migrationsGetStatusForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsGetStatusForOrg(org, migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsGetStatusForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsGetStatusForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Migration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user migrations
     * Lists all migrations a user has started.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/MigrationsApi~migrationsListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Migration>}
     */
    migrationsListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Migration];
      return this.apiClient.callApi(
        '/user/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListForOrg operation.
     * @callback module:api/MigrationsApi~migrationsListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Migration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization migrations
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of `repositories` is only returned for export migrations.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Array.<module:model/String>} [exclude] Exclude attributes from the API response to improve performance
     * @param {module:api/MigrationsApi~migrationsListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Migration>}
     */
    migrationsListForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsListForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Migration];
      return this.apiClient.callApi(
        '/orgs/{org}/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListReposForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsListReposForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories for a user migration
     * Lists all the repositories for this user migration.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/MigrationsApi~migrationsListReposForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    migrationsListReposForAuthenticatedUser(migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsListReposForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListReposForOrg operation.
     * @callback module:api/MigrationsApi~migrationsListReposForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories in an organization migration
     * List all the repositories for this organization migration.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/MigrationsApi~migrationsListReposForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    migrationsListReposForOrg(org, migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsListReposForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsListReposForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsStartForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsStartForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a user migration
     * Initiates the generation of a user migration archive.
     * @param {module:model/MigrationsStartForAuthenticatedUserRequest} migrationsStartForAuthenticatedUserRequest 
     * @param {module:api/MigrationsApi~migrationsStartForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsStartForAuthenticatedUser(migrationsStartForAuthenticatedUserRequest, callback) {
      let postBody = migrationsStartForAuthenticatedUserRequest;
      // verify the required parameter 'migrationsStartForAuthenticatedUserRequest' is set
      if (migrationsStartForAuthenticatedUserRequest === undefined || migrationsStartForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'migrationsStartForAuthenticatedUserRequest' when calling migrationsStartForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/user/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsStartForOrg operation.
     * @callback module:api/MigrationsApi~migrationsStartForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an organization migration
     * Initiates the generation of a migration archive.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/MigrationsStartForOrgRequest} migrationsStartForOrgRequest 
     * @param {module:api/MigrationsApi~migrationsStartForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsStartForOrg(org, migrationsStartForOrgRequest, callback) {
      let postBody = migrationsStartForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsStartForOrg");
      }
      // verify the required parameter 'migrationsStartForOrgRequest' is set
      if (migrationsStartForOrgRequest === undefined || migrationsStartForOrgRequest === null) {
        throw new Error("Missing the required parameter 'migrationsStartForOrgRequest' when calling migrationsStartForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsUnlockRepoForOrg operation.
     * @callback module:api/MigrationsApi~migrationsUnlockRepoForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock an organization repository
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/enterprise-server@3.4/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {String} repoName repo_name parameter
     * @param {module:api/MigrationsApi~migrationsUnlockRepoForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsUnlockRepoForOrg(org, migrationId, repoName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsUnlockRepoForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsUnlockRepoForOrg");
      }
      // verify the required parameter 'repoName' is set
      if (repoName === undefined || repoName === null) {
        throw new Error("Missing the required parameter 'repoName' when calling migrationsUnlockRepoForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId,
        'repo_name': repoName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
