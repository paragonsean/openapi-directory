/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedSecurityActiveCommitters from '../model/AdvancedSecurityActiveCommitters';
import BasicError from '../model/BasicError';

/**
* Billing service.
* @module api/BillingApi
* @version 1.1.4
*/
export default class BillingApi {

    /**
    * Constructs a new BillingApi. 
    * @alias module:api/BillingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the billingGetGithubAdvancedSecurityBillingGhe operation.
     * @callback module:api/BillingApi~billingGetGithubAdvancedSecurityBillingGheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvancedSecurityActiveCommitters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Advanced Security active committers for an enterprise
     * Gets the GitHub Advanced Security active committers for an enterprise per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.  The total number of repositories with committer information is tracked by the `total_count` field.
     * @param {String} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/BillingApi~billingGetGithubAdvancedSecurityBillingGheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvancedSecurityActiveCommitters}
     */
    billingGetGithubAdvancedSecurityBillingGhe(enterprise, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterprise' is set
      if (enterprise === undefined || enterprise === null) {
        throw new Error("Missing the required parameter 'enterprise' when calling billingGetGithubAdvancedSecurityBillingGhe");
      }

      let pathParams = {
        'enterprise': enterprise
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdvancedSecurityActiveCommitters;
      return this.apiClient.callApi(
        '/enterprises/{enterprise}/settings/billing/advanced-security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the billingGetGithubAdvancedSecurityBillingOrg operation.
     * @callback module:api/BillingApi~billingGetGithubAdvancedSecurityBillingOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdvancedSecurityActiveCommitters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Advanced Security active committers for an organization
     * Gets the GitHub Advanced Security active committers for an organization per repository.  Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.  If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.  The total number of repositories with committer information is tracked by the `total_count` field.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/BillingApi~billingGetGithubAdvancedSecurityBillingOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdvancedSecurityActiveCommitters}
     */
    billingGetGithubAdvancedSecurityBillingOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling billingGetGithubAdvancedSecurityBillingOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdvancedSecurityActiveCommitters;
      return this.apiClient.callApi(
        '/orgs/{org}/settings/billing/advanced-security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
