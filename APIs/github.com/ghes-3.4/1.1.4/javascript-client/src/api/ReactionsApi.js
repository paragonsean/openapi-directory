/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import Reaction from '../model/Reaction';
import ReactionsCreateForCommitCommentRequest from '../model/ReactionsCreateForCommitCommentRequest';
import ReactionsCreateForIssueCommentRequest from '../model/ReactionsCreateForIssueCommentRequest';
import ReactionsCreateForIssueRequest from '../model/ReactionsCreateForIssueRequest';
import ReactionsCreateForPullRequestReviewCommentRequest from '../model/ReactionsCreateForPullRequestReviewCommentRequest';
import ReactionsCreateForReleaseRequest from '../model/ReactionsCreateForReleaseRequest';
import ReactionsCreateForTeamDiscussionCommentInOrgRequest from '../model/ReactionsCreateForTeamDiscussionCommentInOrgRequest';
import ReactionsCreateForTeamDiscussionInOrgRequest from '../model/ReactionsCreateForTeamDiscussionInOrgRequest';
import ValidationError from '../model/ValidationError';

/**
* Reactions service.
* @module api/ReactionsApi
* @version 1.1.4
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reactionsCreateForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:model/ReactionsCreateForCommitCommentRequest} reactionsCreateForCommitCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForCommitComment(owner, repo, commentId, reactionsCreateForCommitCommentRequest, callback) {
      let postBody = reactionsCreateForCommitCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForCommitComment");
      }
      // verify the required parameter 'reactionsCreateForCommitCommentRequest' is set
      if (reactionsCreateForCommitCommentRequest === undefined || reactionsCreateForCommitCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForCommitCommentRequest' when calling reactionsCreateForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssue operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} issueNumber The number that identifies the issue.
     * @param {module:model/ReactionsCreateForIssueRequest} reactionsCreateForIssueRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssue(owner, repo, issueNumber, reactionsCreateForIssueRequest, callback) {
      let postBody = reactionsCreateForIssueRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsCreateForIssue");
      }
      // verify the required parameter 'reactionsCreateForIssueRequest' is set
      if (reactionsCreateForIssueRequest === undefined || reactionsCreateForIssueRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForIssueRequest' when calling reactionsCreateForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:model/ReactionsCreateForIssueCommentRequest} reactionsCreateForIssueCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForIssueComment(owner, repo, commentId, reactionsCreateForIssueCommentRequest, callback) {
      let postBody = reactionsCreateForIssueCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForIssueComment");
      }
      // verify the required parameter 'reactionsCreateForIssueCommentRequest' is set
      if (reactionsCreateForIssueCommentRequest === undefined || reactionsCreateForIssueCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForIssueCommentRequest' when calling reactionsCreateForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {module:model/ReactionsCreateForPullRequestReviewCommentRequest} reactionsCreateForPullRequestReviewCommentRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForPullRequestReviewComment(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, callback) {
      let postBody = reactionsCreateForPullRequestReviewCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsCreateForPullRequestReviewComment");
      }
      // verify the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' is set
      if (reactionsCreateForPullRequestReviewCommentRequest === undefined || reactionsCreateForPullRequestReviewCommentRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' when calling reactionsCreateForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForRelease operation.
     * @callback module:api/ReactionsApi~reactionsCreateForReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a release
     * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} releaseId The unique identifier of the release.
     * @param {module:model/ReactionsCreateForReleaseRequest} reactionsCreateForReleaseRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForRelease(owner, repo, releaseId, reactionsCreateForReleaseRequest, callback) {
      let postBody = reactionsCreateForReleaseRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsCreateForRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsCreateForRelease");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling reactionsCreateForRelease");
      }
      // verify the required parameter 'reactionsCreateForReleaseRequest' is set
      if (reactionsCreateForReleaseRequest === undefined || reactionsCreateForReleaseRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForReleaseRequest' when calling reactionsCreateForRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'release_id': releaseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{release_id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionCommentInOrg operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:model/ReactionsCreateForTeamDiscussionCommentInOrgRequest} reactionsCreateForTeamDiscussionCommentInOrgRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionCommentInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' is set
      if (reactionsCreateForTeamDiscussionCommentInOrgRequest === undefined || reactionsCreateForTeamDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' when calling reactionsCreateForTeamDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionCommentLegacy operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:model/ReactionsCreateForTeamDiscussionCommentInOrgRequest} reactionsCreateForTeamDiscussionCommentInOrgRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionCommentInOrgRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' is set
      if (reactionsCreateForTeamDiscussionCommentInOrgRequest === undefined || reactionsCreateForTeamDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' when calling reactionsCreateForTeamDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionInOrg operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:model/ReactionsCreateForTeamDiscussionInOrgRequest} reactionsCreateForTeamDiscussionInOrgRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionInOrg(org, teamSlug, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionInOrg");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' is set
      if (reactionsCreateForTeamDiscussionInOrgRequest === undefined || reactionsCreateForTeamDiscussionInOrgRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' when calling reactionsCreateForTeamDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsCreateForTeamDiscussionLegacy operation.
     * @callback module:api/ReactionsApi~reactionsCreateForTeamDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reaction for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:model/ReactionsCreateForTeamDiscussionInOrgRequest} reactionsCreateForTeamDiscussionInOrgRequest 
     * @param {module:api/ReactionsApi~reactionsCreateForTeamDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reaction}
     */
    reactionsCreateForTeamDiscussionLegacy(teamId, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, callback) {
      let postBody = reactionsCreateForTeamDiscussionInOrgRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionLegacy");
      }
      // verify the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' is set
      if (reactionsCreateForTeamDiscussionInOrgRequest === undefined || reactionsCreateForTeamDiscussionInOrgRequest === null) {
        throw new Error("Missing the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' when calling reactionsCreateForTeamDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a commit comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForCommitComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForCommitComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForIssue operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForIssueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.  Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} issueNumber The number that identifies the issue.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForIssue(owner, repo, issueNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsDeleteForIssue");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.  Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForIssueComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForIssueComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForPullRequestComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForPullRequestCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pull request comment reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`  Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForPullRequestCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForPullRequestComment(owner, repo, commentId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsDeleteForPullRequestComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForPullRequestComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForRelease operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForReleaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a release reaction
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.  Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} releaseId The unique identifier of the release.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForRelease(owner, repo, releaseId, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsDeleteForRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsDeleteForRelease");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling reactionsDeleteForRelease");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'release_id': releaseId,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForTeamDiscussion operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete team discussion reaction
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForTeamDiscussion(org, teamSlug, discussionNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussion");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussion");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteForTeamDiscussionComment operation.
     * @callback module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete team discussion comment reaction
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.  Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteForTeamDiscussionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteForTeamDiscussionComment(org, teamSlug, discussionNumber, commentNumber, reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsDeleteForTeamDiscussionComment");
      }
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussionComment");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber,
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsDeleteLegacy operation.
     * @callback module:api/ReactionsApi~reactionsDeleteLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reaction (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments).
     * @param {Number} reactionId The unique identifier of the reaction.
     * @param {module:api/ReactionsApi~reactionsDeleteLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reactionsDeleteLegacy(reactionId, callback) {
      let postBody = null;
      // verify the required parameter 'reactionId' is set
      if (reactionId === undefined || reactionId === null) {
        throw new Error("Missing the required parameter 'reactionId' when calling reactionsDeleteLegacy");
      }

      let pathParams = {
        'reaction_id': reactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/reactions/{reaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForCommitComment operation.
     * @callback module:api/ReactionsApi~reactionsListForCommitCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForCommitCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForCommitComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForCommitComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForCommitComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssue operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} issueNumber The number that identifies the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssue(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling reactionsListForIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForIssueComment operation.
     * @callback module:api/ReactionsApi~reactionsListForIssueCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForIssueCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForIssueComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForIssueComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForIssueComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForPullRequestReviewComment operation.
     * @callback module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} commentId The unique identifier of the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForPullRequestReviewCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForPullRequestReviewComment(owner, repo, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForPullRequestReviewComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling reactionsListForPullRequestReviewComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForRelease operation.
     * @callback module:api/ReactionsApi~reactionsListForReleaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a release
     * List the reactions to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} releaseId The unique identifier of the release.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForRelease(owner, repo, releaseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling reactionsListForRelease");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling reactionsListForRelease");
      }
      // verify the required parameter 'releaseId' is set
      if (releaseId === undefined || releaseId === null) {
        throw new Error("Missing the required parameter 'releaseId' when calling reactionsListForRelease");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'release_id': releaseId
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/releases/{release_id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionCommentInOrg operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionCommentLegacy operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionInOrg operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionInOrg(org, teamSlug, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsListForTeamDiscussionLegacy operation.
     * @callback module:api/ReactionsApi~reactionsListForTeamDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reactions for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [content] Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ReactionsApi~reactionsListForTeamDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Reaction>}
     */
    reactionsListForTeamDiscussionLegacy(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'content': opts['content'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
