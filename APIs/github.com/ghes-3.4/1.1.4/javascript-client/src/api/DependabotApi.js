/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsListSelectedReposForOrgSecret200Response from '../model/ActionsListSelectedReposForOrgSecret200Response';
import DependabotCreateOrUpdateOrgSecretRequest from '../model/DependabotCreateOrUpdateOrgSecretRequest';
import DependabotCreateOrUpdateRepoSecretRequest from '../model/DependabotCreateOrUpdateRepoSecretRequest';
import DependabotListOrgSecrets200Response from '../model/DependabotListOrgSecrets200Response';
import DependabotListRepoSecrets200Response from '../model/DependabotListRepoSecrets200Response';
import DependabotPublicKey from '../model/DependabotPublicKey';
import DependabotSecret from '../model/DependabotSecret';
import DependabotSetSelectedReposForOrgSecretRequest from '../model/DependabotSetSelectedReposForOrgSecretRequest';
import OrganizationDependabotSecret from '../model/OrganizationDependabotSecret';

/**
* Dependabot service.
* @module api/DependabotApi
* @version 1.1.4
*/
export default class DependabotApi {

    /**
    * Constructs a new DependabotApi. 
    * @alias module:api/DependabotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dependabotAddSelectedRepoToOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotAddSelectedRepoToOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/DependabotApi~dependabotAddSelectedRepoToOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotAddSelectedRepoToOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling dependabotAddSelectedRepoToOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotCreateOrUpdateOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotCreateOrUpdateOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  ``` const sodium = require('libsodium-wrappers') const secret = 'plain-text-secret' // replace with the secret you want to encrypt const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() => {   // Convert Secret & Base64 key to Uint8Array.   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec = sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes = sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); ```  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotCreateOrUpdateOrgSecretRequest} dependabotCreateOrUpdateOrgSecretRequest 
     * @param {module:api/DependabotApi~dependabotCreateOrUpdateOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dependabotCreateOrUpdateOrgSecret(org, secretName, dependabotCreateOrUpdateOrgSecretRequest, callback) {
      let postBody = dependabotCreateOrUpdateOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'dependabotCreateOrUpdateOrgSecretRequest' is set
      if (dependabotCreateOrUpdateOrgSecretRequest === undefined || dependabotCreateOrUpdateOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotCreateOrUpdateOrgSecretRequest' when calling dependabotCreateOrUpdateOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotCreateOrUpdateRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotCreateOrUpdateRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  ``` const sodium = require('libsodium-wrappers') const secret = 'plain-text-secret' // replace with the secret you want to encrypt const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() => {   // Convert Secret & Base64 key to Uint8Array.   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec = sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes = sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); ```  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotCreateOrUpdateRepoSecretRequest} dependabotCreateOrUpdateRepoSecretRequest 
     * @param {module:api/DependabotApi~dependabotCreateOrUpdateRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dependabotCreateOrUpdateRepoSecret(owner, repo, secretName, dependabotCreateOrUpdateRepoSecretRequest, callback) {
      let postBody = dependabotCreateOrUpdateRepoSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'dependabotCreateOrUpdateRepoSecretRequest' is set
      if (dependabotCreateOrUpdateRepoSecretRequest === undefined || dependabotCreateOrUpdateRepoSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotCreateOrUpdateRepoSecretRequest' when calling dependabotCreateOrUpdateRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotDeleteOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotDeleteOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotDeleteOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotDeleteOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotDeleteOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotDeleteOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotDeleteRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotDeleteRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotDeleteRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotDeleteRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotDeleteRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotDeleteRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotDeleteRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetOrgPublicKey operation.
     * @callback module:api/DependabotApi~dependabotGetOrgPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/DependabotApi~dependabotGetOrgPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotPublicKey}
     */
    dependabotGetOrgPublicKey(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotGetOrgPublicKey");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotPublicKey;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotGetOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationDependabotSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotGetOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationDependabotSecret}
     */
    dependabotGetOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotGetOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotGetOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationDependabotSecret;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetRepoPublicKey operation.
     * @callback module:api/DependabotApi~dependabotGetRepoPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/DependabotApi~dependabotGetRepoPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotPublicKey}
     */
    dependabotGetRepoPublicKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotGetRepoPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotGetRepoPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotGetRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotGetRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotSecret}
     */
    dependabotGetRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotGetRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotGetRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotGetRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListOrgSecrets operation.
     * @callback module:api/DependabotApi~dependabotListOrgSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotListOrgSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/DependabotApi~dependabotListOrgSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotListOrgSecrets200Response}
     */
    dependabotListOrgSecrets(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotListOrgSecrets");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotListOrgSecrets200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListRepoSecrets operation.
     * @callback module:api/DependabotApi~dependabotListRepoSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotListRepoSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/DependabotApi~dependabotListRepoSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotListRepoSecrets200Response}
     */
    dependabotListRepoSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotListRepoSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotListRepoSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotListRepoSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListSelectedReposForOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotListSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {module:api/DependabotApi~dependabotListSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    dependabotListSelectedReposForOrgSecret(org, secretName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotListSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotListSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotRemoveSelectedRepoFromOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotRemoveSelectedRepoFromOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/DependabotApi~dependabotRemoveSelectedRepoFromOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotSetSelectedReposForOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotSetSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.4/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotSetSelectedReposForOrgSecretRequest} dependabotSetSelectedReposForOrgSecretRequest 
     * @param {module:api/DependabotApi~dependabotSetSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotSetSelectedReposForOrgSecret(org, secretName, dependabotSetSelectedReposForOrgSecretRequest, callback) {
      let postBody = dependabotSetSelectedReposForOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'dependabotSetSelectedReposForOrgSecretRequest' is set
      if (dependabotSetSelectedReposForOrgSecretRequest === undefined || dependabotSetSelectedReposForOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotSetSelectedReposForOrgSecretRequest' when calling dependabotSetSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
