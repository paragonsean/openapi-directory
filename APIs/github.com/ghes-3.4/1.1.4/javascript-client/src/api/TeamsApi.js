/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicError from '../model/BasicError';
import MinimalRepository from '../model/MinimalRepository';
import OrgsRemoveOutsideCollaborator422Response from '../model/OrgsRemoveOutsideCollaborator422Response';
import SimpleUser from '../model/SimpleUser';
import Team from '../model/Team';
import TeamDiscussion from '../model/TeamDiscussion';
import TeamDiscussionComment from '../model/TeamDiscussionComment';
import TeamFull from '../model/TeamFull';
import TeamMembership from '../model/TeamMembership';
import TeamProject from '../model/TeamProject';
import TeamRepository from '../model/TeamRepository';
import TeamsAddOrUpdateMembershipForUserInOrgRequest from '../model/TeamsAddOrUpdateMembershipForUserInOrgRequest';
import TeamsAddOrUpdateProjectPermissionsInOrgRequest from '../model/TeamsAddOrUpdateProjectPermissionsInOrgRequest';
import TeamsAddOrUpdateProjectPermissionsLegacyRequest from '../model/TeamsAddOrUpdateProjectPermissionsLegacyRequest';
import TeamsAddOrUpdateRepoPermissionsInOrgRequest from '../model/TeamsAddOrUpdateRepoPermissionsInOrgRequest';
import TeamsAddOrUpdateRepoPermissionsLegacyRequest from '../model/TeamsAddOrUpdateRepoPermissionsLegacyRequest';
import TeamsCreateDiscussionCommentInOrgRequest from '../model/TeamsCreateDiscussionCommentInOrgRequest';
import TeamsCreateDiscussionInOrgRequest from '../model/TeamsCreateDiscussionInOrgRequest';
import TeamsCreateRequest from '../model/TeamsCreateRequest';
import TeamsUpdateDiscussionInOrgRequest from '../model/TeamsUpdateDiscussionInOrgRequest';
import TeamsUpdateInOrgRequest from '../model/TeamsUpdateInOrgRequest';
import TeamsUpdateLegacyRequest from '../model/TeamsUpdateLegacyRequest';
import ValidationError from '../model/ValidationError';

/**
* Teams service.
* @module api/TeamsApi
* @version 1.1.4
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsAddMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsAddMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add team member (Legacy)
     * The \"Add team member\" endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsAddMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsAddMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateMembershipForUserInOrg operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateMembershipForUserInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team membership for a user
     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateMembershipForUserInOrgRequest} [teamsAddOrUpdateMembershipForUserInOrgRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateMembershipForUserInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsAddOrUpdateMembershipForUserInOrg(org, teamSlug, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateMembershipForUserInOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsAddOrUpdateMembershipForUserInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateMembershipForUserInOrg");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUserInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateMembershipForUserLegacy operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateMembershipForUserLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateMembershipForUserInOrgRequest} [teamsAddOrUpdateMembershipForUserInOrgRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateMembershipForUserLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsAddOrUpdateMembershipForUserLegacy(teamId, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateMembershipForUserInOrgRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateMembershipForUserLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsAddOrUpdateMembershipForUserLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateProjectPermissionsInOrg operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team project permissions
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} projectId The unique identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateProjectPermissionsInOrgRequest} [teamsAddOrUpdateProjectPermissionsInOrgRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateProjectPermissionsInOrg(org, teamSlug, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateProjectPermissionsInOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsAddOrUpdateProjectPermissionsInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateProjectPermissionsInOrg");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissionsInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateProjectPermissionsLegacy operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team project permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} projectId The unique identifier of the project.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateProjectPermissionsLegacyRequest} [teamsAddOrUpdateProjectPermissionsLegacyRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateProjectPermissionsLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateProjectPermissionsLegacy(teamId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateProjectPermissionsLegacyRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateProjectPermissionsLegacy");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsAddOrUpdateProjectPermissionsLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateRepoPermissionsInOrg operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team repository permissions
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.  For more information about the permission levels, see \"[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateRepoPermissionsInOrgRequest} [teamsAddOrUpdateRepoPermissionsInOrgRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateRepoPermissionsInOrg(org, teamSlug, owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateRepoPermissionsInOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsAddOrUpdateRepoPermissionsInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsAddOrUpdateRepoPermissionsInOrg");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissionsInOrg");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissionsInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddOrUpdateRepoPermissionsLegacy operation.
     * @callback module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update team repository permissions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#add-or-update-team-repository-permissions)\" endpoint.  To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsAddOrUpdateRepoPermissionsLegacyRequest} [teamsAddOrUpdateRepoPermissionsLegacyRequest] 
     * @param {module:api/TeamsApi~teamsAddOrUpdateRepoPermissionsLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsAddOrUpdateRepoPermissionsLegacy(teamId, owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsAddOrUpdateRepoPermissionsLegacyRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsAddOrUpdateRepoPermissionsLegacy");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsAddOrUpdateRepoPermissionsLegacy");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsAddOrUpdateRepoPermissionsLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForProjectInOrg operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForProjectInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a project
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} projectId The unique identifier of the project.
     * @param {module:api/TeamsApi~teamsCheckPermissionsForProjectInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamProject}
     */
    teamsCheckPermissionsForProjectInOrg(org, teamSlug, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCheckPermissionsForProjectInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsCheckPermissionsForProjectInOrg");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProjectInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamProject;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForProjectLegacy operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForProjectLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a project (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} projectId The unique identifier of the project.
     * @param {module:api/TeamsApi~teamsCheckPermissionsForProjectLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamProject}
     */
    teamsCheckPermissionsForProjectLegacy(teamId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForProjectLegacy");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsCheckPermissionsForProjectLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamProject;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForRepoInOrg operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForRepoInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a repository
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.  If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/TeamsApi~teamsCheckPermissionsForRepoInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamRepository}
     */
    teamsCheckPermissionsForRepoInOrg(org, teamSlug, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCheckPermissionsForRepoInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsCheckPermissionsForRepoInOrg");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepoInOrg");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepoInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamRepository;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCheckPermissionsForRepoLegacy operation.
     * @callback module:api/TeamsApi~teamsCheckPermissionsForRepoLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check team permissions for a repository (Legacy)
     * **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/) via the `Accept` header:
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/TeamsApi~teamsCheckPermissionsForRepoLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamRepository}
     */
    teamsCheckPermissionsForRepoLegacy(teamId, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCheckPermissionsForRepoLegacy");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsCheckPermissionsForRepoLegacy");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsCheckPermissionsForRepoLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamRepository;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreate operation.
     * @callback module:api/TeamsApi~teamsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a team
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://docs.github.com/enterprise-server@3.4/articles/setting-team-creation-permissions-in-your-organization).\"  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://docs.github.com/enterprise-server@3.4/github/setting-up-and-managing-organizations-and-teams/about-teams)\".
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/TeamsCreateRequest} teamsCreateRequest 
     * @param {module:api/TeamsApi~teamsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsCreate(org, teamsCreateRequest, callback) {
      let postBody = teamsCreateRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCreate");
      }
      // verify the required parameter 'teamsCreateRequest' is set
      if (teamsCreateRequest === undefined || teamsCreateRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateRequest' when calling teamsCreate");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/orgs/{org}/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussionCommentInOrg operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion comment
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:model/TeamsCreateDiscussionCommentInOrgRequest} teamsCreateDiscussionCommentInOrgRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsCreateDiscussionCommentInOrg(org, teamSlug, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionCommentInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCreateDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsCreateDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
      if (teamsCreateDiscussionCommentInOrgRequest === undefined || teamsCreateDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsCreateDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussionCommentLegacy operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:model/TeamsCreateDiscussionCommentInOrgRequest} teamsCreateDiscussionCommentInOrgRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsCreateDiscussionCommentLegacy(teamId, discussionNumber, teamsCreateDiscussionCommentInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionCommentInOrgRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsCreateDiscussionCommentLegacy");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
      if (teamsCreateDiscussionCommentInOrgRequest === undefined || teamsCreateDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsCreateDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussionInOrg operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:model/TeamsCreateDiscussionInOrgRequest} teamsCreateDiscussionInOrgRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsCreateDiscussionInOrg(org, teamSlug, teamsCreateDiscussionInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsCreateDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsCreateDiscussionInOrg");
      }
      // verify the required parameter 'teamsCreateDiscussionInOrgRequest' is set
      if (teamsCreateDiscussionInOrgRequest === undefined || teamsCreateDiscussionInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionInOrgRequest' when calling teamsCreateDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateDiscussionLegacy operation.
     * @callback module:api/TeamsApi~teamsCreateDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-discussion) endpoint.  Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {Number} teamId The unique identifier of the team.
     * @param {module:model/TeamsCreateDiscussionInOrgRequest} teamsCreateDiscussionInOrgRequest 
     * @param {module:api/TeamsApi~teamsCreateDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsCreateDiscussionLegacy(teamId, teamsCreateDiscussionInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionInOrgRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateDiscussionLegacy");
      }
      // verify the required parameter 'teamsCreateDiscussionInOrgRequest' is set
      if (teamsCreateDiscussionInOrgRequest === undefined || teamsCreateDiscussionInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionInOrgRequest' when calling teamsCreateDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussionCommentInOrg operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion comment
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:api/TeamsApi~teamsDeleteDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsDeleteDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsDeleteDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussionCommentLegacy operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:api/TeamsApi~teamsDeleteDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsDeleteDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussionInOrg operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:api/TeamsApi~teamsDeleteDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussionInOrg(org, teamSlug, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsDeleteDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsDeleteDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteDiscussionLegacy operation.
     * @callback module:api/TeamsApi~teamsDeleteDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-discussion) endpoint.  Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:api/TeamsApi~teamsDeleteDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteDiscussionLegacy(teamId, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsDeleteDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteInOrg operation.
     * @callback module:api/TeamsApi~teamsDeleteInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team
     * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:api/TeamsApi~teamsDeleteInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteInOrg(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsDeleteInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsDeleteInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteLegacy operation.
     * @callback module:api/TeamsApi~teamsDeleteLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     * @param {Number} teamId The unique identifier of the team.
     * @param {module:api/TeamsApi~teamsDeleteLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteLegacy(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetByName operation.
     * @callback module:api/TeamsApi~teamsGetByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team by name
     * Gets a team using the team's `slug`. To create the `slug`, GitHub Enterprise Server replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `\"My TEam Näme\"` would become `my-team-name`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:api/TeamsApi~teamsGetByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsGetByName(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsGetByName");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsGetByName");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussionCommentInOrg operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion comment
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:api/TeamsApi~teamsGetDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsGetDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsGetDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsGetDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussionCommentLegacy operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:api/TeamsApi~teamsGetDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsGetDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsGetDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussionInOrg operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:api/TeamsApi~teamsGetDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsGetDiscussionInOrg(org, teamSlug, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsGetDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsGetDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetDiscussionLegacy operation.
     * @callback module:api/TeamsApi~teamsGetDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-discussion) endpoint.  Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {module:api/TeamsApi~teamsGetDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsGetDiscussionLegacy(teamId, discussionNumber, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsGetDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetLegacy operation.
     * @callback module:api/TeamsApi~teamsGetLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-a-team-by-name) endpoint.
     * @param {Number} teamId The unique identifier of the team.
     * @param {module:api/TeamsApi~teamsGetLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsGetLegacy(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsGetMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team member (Legacy)
     * The \"Get team member\" endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsGetMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsGetMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsGetMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMembershipForUserInOrg operation.
     * @callback module:api/TeamsApi~teamsGetMembershipForUserInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team membership for a user
     * Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-team).
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsGetMembershipForUserInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsGetMembershipForUserInOrg(org, teamSlug, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsGetMembershipForUserInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsGetMembershipForUserInOrg");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsGetMembershipForUserInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMembershipForUserLegacy operation.
     * @callback module:api/TeamsApi~teamsGetMembershipForUserLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user's membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the `state` of the membership and the member's `role`.  The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#create-a-team).
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsGetMembershipForUserLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMembership}
     */
    teamsGetMembershipForUserLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetMembershipForUserLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsGetMembershipForUserLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamMembership;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsList operation.
     * @callback module:api/TeamsApi~teamsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List teams
     * Lists all teams in an organization that are visible to the authenticated user.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsList(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsList");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/orgs/{org}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListChildInOrg operation.
     * @callback module:api/TeamsApi~teamsListChildInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List child teams
     * Lists the child teams of the team specified by `{team_slug}`.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListChildInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsListChildInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListChildInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListChildInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListChildLegacy operation.
     * @callback module:api/TeamsApi~teamsListChildLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List child teams (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-child-teams) endpoint.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListChildLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    teamsListChildLegacy(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListChildLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/teams/{team_id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussionCommentsInOrg operation.
     * @callback module:api/TeamsApi~teamsListDiscussionCommentsInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussionComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussion comments
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListDiscussionCommentsInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussionComment>}
     */
    teamsListDiscussionCommentsInOrg(org, teamSlug, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListDiscussionCommentsInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListDiscussionCommentsInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionCommentsInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussionComment];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussionCommentsLegacy operation.
     * @callback module:api/TeamsApi~teamsListDiscussionCommentsLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussionComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussion comments (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-discussion-comments) endpoint.  List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListDiscussionCommentsLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussionComment>}
     */
    teamsListDiscussionCommentsLegacy(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListDiscussionCommentsLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsListDiscussionCommentsLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussionComment];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussionsInOrg operation.
     * @callback module:api/TeamsApi~teamsListDiscussionsInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussions
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {String} [pinned] Pinned discussions only filter
     * @param {module:api/TeamsApi~teamsListDiscussionsInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussion>}
     */
    teamsListDiscussionsInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListDiscussionsInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListDiscussionsInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'pinned': opts['pinned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussion];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListDiscussionsLegacy operation.
     * @callback module:api/TeamsApi~teamsListDiscussionsLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamDiscussion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List discussions (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-discussions) endpoint.  List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListDiscussionsLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamDiscussion>}
     */
    teamsListDiscussionsLegacy(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListDiscussionsLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamDiscussion];
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListForAuthenticatedUser operation.
     * @callback module:api/TeamsApi~teamsListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamFull>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List teams for the authenticated user
     * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/).
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamFull>}
     */
    teamsListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamFull];
      return this.apiClient.callApi(
        '/user/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListMembersInOrg operation.
     * @callback module:api/TeamsApi~teamsListMembersInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team members
     * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [role = 'all')] Filters members returned by their role in the team.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListMembersInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    teamsListMembersInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListMembersInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListMembersInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
        'role': opts['role'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListMembersLegacy operation.
     * @callback module:api/TeamsApi~teamsListMembersLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team members (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-members) endpoint.  Team members will include the members of child teams.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [role = 'all')] Filters members returned by their role in the team.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListMembersLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    teamsListMembersLegacy(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListMembersLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'role': opts['role'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/teams/{team_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListProjectsInOrg operation.
     * @callback module:api/TeamsApi~teamsListProjectsInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team projects
     * Lists the organization projects for a team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListProjectsInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamProject>}
     */
    teamsListProjectsInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListProjectsInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListProjectsInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamProject];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListProjectsLegacy operation.
     * @callback module:api/TeamsApi~teamsListProjectsLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team projects (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListProjectsLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamProject>}
     */
    teamsListProjectsLegacy(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListProjectsLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamProject];
      return this.apiClient.callApi(
        '/teams/{team_id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListReposInOrg operation.
     * @callback module:api/TeamsApi~teamsListReposInOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team repositories
     * Lists a team's repositories visible to the authenticated user.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListReposInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    teamsListReposInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsListReposInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsListReposInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsListReposLegacy operation.
     * @callback module:api/TeamsApi~teamsListReposLegacyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team repositories (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#list-team-repositories) endpoint.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/TeamsApi~teamsListReposLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    teamsListReposLegacy(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsListReposLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/teams/{team_id}/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveMemberLegacy operation.
     * @callback module:api/TeamsApi~teamsRemoveMemberLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove team member (Legacy)
     * The \"Remove team member\" endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsRemoveMemberLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveMemberLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveMemberLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsRemoveMemberLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/members/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveMembershipForUserInOrg operation.
     * @callback module:api/TeamsApi~teamsRemoveMembershipForUserInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove team membership for a user
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsRemoveMembershipForUserInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveMembershipForUserInOrg(org, teamSlug, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsRemoveMembershipForUserInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsRemoveMembershipForUserInOrg");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsRemoveMembershipForUserInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveMembershipForUserLegacy operation.
     * @callback module:api/TeamsApi~teamsRemoveMembershipForUserLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove team membership for a user (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/enterprise-server@3.4/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/TeamsApi~teamsRemoveMembershipForUserLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveMembershipForUserLegacy(teamId, username, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveMembershipForUserLegacy");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling teamsRemoveMembershipForUserLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/memberships/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveProjectInOrg operation.
     * @callback module:api/TeamsApi~teamsRemoveProjectInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a project from a team
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} projectId The unique identifier of the project.
     * @param {module:api/TeamsApi~teamsRemoveProjectInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveProjectInOrg(org, teamSlug, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsRemoveProjectInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsRemoveProjectInOrg");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsRemoveProjectInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveProjectLegacy operation.
     * @callback module:api/TeamsApi~teamsRemoveProjectLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a project from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} projectId The unique identifier of the project.
     * @param {module:api/TeamsApi~teamsRemoveProjectLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveProjectLegacy(teamId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveProjectLegacy");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling teamsRemoveProjectLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveRepoInOrg operation.
     * @callback module:api/TeamsApi~teamsRemoveRepoInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a repository from a team
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/TeamsApi~teamsRemoveRepoInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveRepoInOrg(org, teamSlug, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsRemoveRepoInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsRemoveRepoInOrg");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsRemoveRepoInOrg");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsRemoveRepoInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveRepoLegacy operation.
     * @callback module:api/TeamsApi~teamsRemoveRepoLegacyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a repository from a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     * @param {Number} teamId The unique identifier of the team.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/TeamsApi~teamsRemoveRepoLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsRemoveRepoLegacy(teamId, owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveRepoLegacy");
      }
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsRemoveRepoLegacy");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling teamsRemoveRepoLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{team_id}/repos/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussionCommentInOrg operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionCommentInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion comment
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:model/TeamsCreateDiscussionCommentInOrgRequest} teamsCreateDiscussionCommentInOrgRequest 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionCommentInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsUpdateDiscussionCommentInOrg(org, teamSlug, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionCommentInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsUpdateDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsUpdateDiscussionCommentInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionCommentInOrg");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionCommentInOrg");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
      if (teamsCreateDiscussionCommentInOrgRequest === undefined || teamsCreateDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsUpdateDiscussionCommentInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussionCommentLegacy operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionCommentLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussionComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Number} commentNumber The number that identifies the comment.
     * @param {module:model/TeamsCreateDiscussionCommentInOrgRequest} teamsCreateDiscussionCommentInOrgRequest 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionCommentLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussionComment}
     */
    teamsUpdateDiscussionCommentLegacy(teamId, discussionNumber, commentNumber, teamsCreateDiscussionCommentInOrgRequest, callback) {
      let postBody = teamsCreateDiscussionCommentInOrgRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionCommentLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionCommentLegacy");
      }
      // verify the required parameter 'commentNumber' is set
      if (commentNumber === undefined || commentNumber === null) {
        throw new Error("Missing the required parameter 'commentNumber' when calling teamsUpdateDiscussionCommentLegacy");
      }
      // verify the required parameter 'teamsCreateDiscussionCommentInOrgRequest' is set
      if (teamsCreateDiscussionCommentInOrgRequest === undefined || teamsCreateDiscussionCommentInOrgRequest === null) {
        throw new Error("Missing the required parameter 'teamsCreateDiscussionCommentInOrgRequest' when calling teamsUpdateDiscussionCommentLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber,
        'comment_number': commentNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussionComment;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussionInOrg operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateDiscussionInOrgRequest} [teamsUpdateDiscussionInOrgRequest] 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsUpdateDiscussionInOrg(org, teamSlug, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateDiscussionInOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsUpdateDiscussionInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsUpdateDiscussionInOrg");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateDiscussionLegacy operation.
     * @callback module:api/TeamsApi~teamsUpdateDiscussionLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDiscussion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param {Number} teamId The unique identifier of the team.
     * @param {Number} discussionNumber The number that identifies the discussion.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateDiscussionInOrgRequest} [teamsUpdateDiscussionInOrgRequest] 
     * @param {module:api/TeamsApi~teamsUpdateDiscussionLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDiscussion}
     */
    teamsUpdateDiscussionLegacy(teamId, discussionNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateDiscussionInOrgRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateDiscussionLegacy");
      }
      // verify the required parameter 'discussionNumber' is set
      if (discussionNumber === undefined || discussionNumber === null) {
        throw new Error("Missing the required parameter 'discussionNumber' when calling teamsUpdateDiscussionLegacy");
      }

      let pathParams = {
        'team_id': teamId,
        'discussion_number': discussionNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDiscussion;
      return this.apiClient.callApi(
        '/teams/{team_id}/discussions/{discussion_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateInOrg operation.
     * @callback module:api/TeamsApi~teamsUpdateInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateInOrgRequest} [teamsUpdateInOrgRequest] 
     * @param {module:api/TeamsApi~teamsUpdateInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsUpdateInOrg(org, teamSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateInOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling teamsUpdateInOrg");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling teamsUpdateInOrg");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/orgs/{org}/teams/{team_slug}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateLegacy operation.
     * @callback module:api/TeamsApi~teamsUpdateLegacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     * @param {Number} teamId The unique identifier of the team.
     * @param {module:model/TeamsUpdateLegacyRequest} teamsUpdateLegacyRequest 
     * @param {module:api/TeamsApi~teamsUpdateLegacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamFull}
     */
    teamsUpdateLegacy(teamId, teamsUpdateLegacyRequest, callback) {
      let postBody = teamsUpdateLegacyRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateLegacy");
      }
      // verify the required parameter 'teamsUpdateLegacyRequest' is set
      if (teamsUpdateLegacyRequest === undefined || teamsUpdateLegacyRequest === null) {
        throw new Error("Missing the required parameter 'teamsUpdateLegacyRequest' when calling teamsUpdateLegacy");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamFull;
      return this.apiClient.callApi(
        '/teams/{team_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
