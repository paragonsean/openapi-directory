/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssuesLockRequest model module.
 * @module model/IssuesLockRequest
 * @version 1.1.4
 */
class IssuesLockRequest {
    /**
     * Constructs a new <code>IssuesLockRequest</code>.
     * @alias module:model/IssuesLockRequest
     */
    constructor() { 
        
        IssuesLockRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuesLockRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuesLockRequest} obj Optional instance to populate.
     * @return {module:model/IssuesLockRequest} The populated <code>IssuesLockRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuesLockRequest();

            if (data.hasOwnProperty('lock_reason')) {
                obj['lock_reason'] = ApiClient.convertToType(data['lock_reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuesLockRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuesLockRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lock_reason'] && !(typeof data['lock_reason'] === 'string' || data['lock_reason'] instanceof String)) {
            throw new Error("Expected the field `lock_reason` to be a primitive type in the JSON string but got " + data['lock_reason']);
        }

        return true;
    }


}



/**
 * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:    * `off-topic`    * `too heated`    * `resolved`    * `spam`
 * @member {module:model/IssuesLockRequest.LockReasonEnum} lock_reason
 */
IssuesLockRequest.prototype['lock_reason'] = undefined;





/**
 * Allowed values for the <code>lock_reason</code> property.
 * @enum {String}
 * @readonly
 */
IssuesLockRequest['LockReasonEnum'] = {

    /**
     * value: "off-topic"
     * @const
     */
    "off-topic": "off-topic",

    /**
     * value: "too heated"
     * @const
     */
    "too heated": "too heated",

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved",

    /**
     * value: "spam"
     * @const
     */
    "spam": "spam"
};



export default IssuesLockRequest;

