/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposCreateCommitStatusRequest model module.
 * @module model/ReposCreateCommitStatusRequest
 * @version 1.1.4
 */
class ReposCreateCommitStatusRequest {
    /**
     * Constructs a new <code>ReposCreateCommitStatusRequest</code>.
     * @alias module:model/ReposCreateCommitStatusRequest
     * @param state {module:model/ReposCreateCommitStatusRequest.StateEnum} The state of the status.
     */
    constructor(state) { 
        
        ReposCreateCommitStatusRequest.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['context'] = 'default';
        obj['state'] = state;
    }

    /**
     * Constructs a <code>ReposCreateCommitStatusRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposCreateCommitStatusRequest} obj Optional instance to populate.
     * @return {module:model/ReposCreateCommitStatusRequest} The populated <code>ReposCreateCommitStatusRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposCreateCommitStatusRequest();

            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target_url')) {
                obj['target_url'] = ApiClient.convertToType(data['target_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposCreateCommitStatusRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposCreateCommitStatusRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposCreateCommitStatusRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['target_url'] && !(typeof data['target_url'] === 'string' || data['target_url'] instanceof String)) {
            throw new Error("Expected the field `target_url` to be a primitive type in the JSON string but got " + data['target_url']);
        }

        return true;
    }


}

ReposCreateCommitStatusRequest.RequiredProperties = ["state"];

/**
 * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
 * @member {String} context
 * @default 'default'
 */
ReposCreateCommitStatusRequest.prototype['context'] = 'default';

/**
 * A short description of the status.
 * @member {String} description
 */
ReposCreateCommitStatusRequest.prototype['description'] = undefined;

/**
 * The state of the status.
 * @member {module:model/ReposCreateCommitStatusRequest.StateEnum} state
 */
ReposCreateCommitStatusRequest.prototype['state'] = undefined;

/**
 * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha`
 * @member {String} target_url
 */
ReposCreateCommitStatusRequest.prototype['target_url'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ReposCreateCommitStatusRequest['StateEnum'] = {

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "success"
     * @const
     */
    "success": "success"
};



export default ReposCreateCommitStatusRequest;

