/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkWithType from './LinkWithType';

/**
 * The FeedLinks model module.
 * @module model/FeedLinks
 * @version 1.1.4
 */
class FeedLinks {
    /**
     * Constructs a new <code>FeedLinks</code>.
     * @alias module:model/FeedLinks
     * @param timeline {module:model/LinkWithType} 
     * @param user {module:model/LinkWithType} 
     */
    constructor(timeline, user) { 
        
        FeedLinks.initialize(this, timeline, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timeline, user) { 
        obj['timeline'] = timeline;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>FeedLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedLinks} obj Optional instance to populate.
     * @return {module:model/FeedLinks} The populated <code>FeedLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedLinks();

            if (data.hasOwnProperty('current_user')) {
                obj['current_user'] = LinkWithType.constructFromObject(data['current_user']);
            }
            if (data.hasOwnProperty('current_user_actor')) {
                obj['current_user_actor'] = LinkWithType.constructFromObject(data['current_user_actor']);
            }
            if (data.hasOwnProperty('current_user_organization')) {
                obj['current_user_organization'] = LinkWithType.constructFromObject(data['current_user_organization']);
            }
            if (data.hasOwnProperty('current_user_organizations')) {
                obj['current_user_organizations'] = ApiClient.convertToType(data['current_user_organizations'], [LinkWithType]);
            }
            if (data.hasOwnProperty('current_user_public')) {
                obj['current_user_public'] = LinkWithType.constructFromObject(data['current_user_public']);
            }
            if (data.hasOwnProperty('repository_discussions')) {
                obj['repository_discussions'] = LinkWithType.constructFromObject(data['repository_discussions']);
            }
            if (data.hasOwnProperty('repository_discussions_category')) {
                obj['repository_discussions_category'] = LinkWithType.constructFromObject(data['repository_discussions_category']);
            }
            if (data.hasOwnProperty('security_advisories')) {
                obj['security_advisories'] = LinkWithType.constructFromObject(data['security_advisories']);
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = LinkWithType.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = LinkWithType.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedLinks</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedLinks.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `current_user`
        if (data['current_user']) { // data not null
          LinkWithType.validateJSON(data['current_user']);
        }
        // validate the optional field `current_user_actor`
        if (data['current_user_actor']) { // data not null
          LinkWithType.validateJSON(data['current_user_actor']);
        }
        // validate the optional field `current_user_organization`
        if (data['current_user_organization']) { // data not null
          LinkWithType.validateJSON(data['current_user_organization']);
        }
        if (data['current_user_organizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['current_user_organizations'])) {
                throw new Error("Expected the field `current_user_organizations` to be an array in the JSON data but got " + data['current_user_organizations']);
            }
            // validate the optional field `current_user_organizations` (array)
            for (const item of data['current_user_organizations']) {
                LinkWithType.validateJSON(item);
            };
        }
        // validate the optional field `current_user_public`
        if (data['current_user_public']) { // data not null
          LinkWithType.validateJSON(data['current_user_public']);
        }
        // validate the optional field `repository_discussions`
        if (data['repository_discussions']) { // data not null
          LinkWithType.validateJSON(data['repository_discussions']);
        }
        // validate the optional field `repository_discussions_category`
        if (data['repository_discussions_category']) { // data not null
          LinkWithType.validateJSON(data['repository_discussions_category']);
        }
        // validate the optional field `security_advisories`
        if (data['security_advisories']) { // data not null
          LinkWithType.validateJSON(data['security_advisories']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          LinkWithType.validateJSON(data['timeline']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          LinkWithType.validateJSON(data['user']);
        }

        return true;
    }


}

FeedLinks.RequiredProperties = ["timeline", "user"];

/**
 * @member {module:model/LinkWithType} current_user
 */
FeedLinks.prototype['current_user'] = undefined;

/**
 * @member {module:model/LinkWithType} current_user_actor
 */
FeedLinks.prototype['current_user_actor'] = undefined;

/**
 * @member {module:model/LinkWithType} current_user_organization
 */
FeedLinks.prototype['current_user_organization'] = undefined;

/**
 * @member {Array.<module:model/LinkWithType>} current_user_organizations
 */
FeedLinks.prototype['current_user_organizations'] = undefined;

/**
 * @member {module:model/LinkWithType} current_user_public
 */
FeedLinks.prototype['current_user_public'] = undefined;

/**
 * @member {module:model/LinkWithType} repository_discussions
 */
FeedLinks.prototype['repository_discussions'] = undefined;

/**
 * @member {module:model/LinkWithType} repository_discussions_category
 */
FeedLinks.prototype['repository_discussions_category'] = undefined;

/**
 * @member {module:model/LinkWithType} security_advisories
 */
FeedLinks.prototype['security_advisories'] = undefined;

/**
 * @member {module:model/LinkWithType} timeline
 */
FeedLinks.prototype['timeline'] = undefined;

/**
 * @member {module:model/LinkWithType} user
 */
FeedLinks.prototype['user'] = undefined;






export default FeedLinks;

