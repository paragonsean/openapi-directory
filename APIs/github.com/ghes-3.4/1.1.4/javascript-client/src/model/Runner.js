/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunnerLabel from './RunnerLabel';

/**
 * The Runner model module.
 * @module model/Runner
 * @version 1.1.4
 */
class Runner {
    /**
     * Constructs a new <code>Runner</code>.
     * A self hosted runner
     * @alias module:model/Runner
     * @param busy {Boolean} 
     * @param id {Number} The id of the runner.
     * @param labels {Array.<module:model/RunnerLabel>} 
     * @param name {String} The name of the runner.
     * @param os {String} The Operating System of the runner.
     * @param status {String} The status of the runner.
     */
    constructor(busy, id, labels, name, os, status) { 
        
        Runner.initialize(this, busy, id, labels, name, os, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, busy, id, labels, name, os, status) { 
        obj['busy'] = busy;
        obj['id'] = id;
        obj['labels'] = labels;
        obj['name'] = name;
        obj['os'] = os;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Runner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Runner} obj Optional instance to populate.
     * @return {module:model/Runner} The populated <code>Runner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Runner();

            if (data.hasOwnProperty('busy')) {
                obj['busy'] = ApiClient.convertToType(data['busy'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [RunnerLabel]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Runner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Runner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Runner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                RunnerLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Runner.RequiredProperties = ["busy", "id", "labels", "name", "os", "status"];

/**
 * @member {Boolean} busy
 */
Runner.prototype['busy'] = undefined;

/**
 * The id of the runner.
 * @member {Number} id
 */
Runner.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/RunnerLabel>} labels
 */
Runner.prototype['labels'] = undefined;

/**
 * The name of the runner.
 * @member {String} name
 */
Runner.prototype['name'] = undefined;

/**
 * The Operating System of the runner.
 * @member {String} os
 */
Runner.prototype['os'] = undefined;

/**
 * The status of the runner.
 * @member {String} status
 */
Runner.prototype['status'] = undefined;






export default Runner;

