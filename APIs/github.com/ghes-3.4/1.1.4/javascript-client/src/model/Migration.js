/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableSimpleUser from './NullableSimpleUser';
import Repository from './Repository';

/**
 * The Migration model module.
 * @module model/Migration
 * @version 1.1.4
 */
class Migration {
    /**
     * Constructs a new <code>Migration</code>.
     * A migration.
     * @alias module:model/Migration
     * @param createdAt {Date} 
     * @param excludeAttachments {Boolean} 
     * @param excludeGitData {Boolean} 
     * @param excludeMetadata {Boolean} 
     * @param excludeOwnerProjects {Boolean} 
     * @param excludeReleases {Boolean} 
     * @param guid {String} 
     * @param id {Number} 
     * @param lockRepositories {Boolean} 
     * @param nodeId {String} 
     * @param orgMetadataOnly {Boolean} 
     * @param owner {module:model/NullableSimpleUser} 
     * @param repositories {Array.<module:model/Repository>} The repositories included in the migration. Only returned for export migrations.
     * @param state {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     */
    constructor(createdAt, excludeAttachments, excludeGitData, excludeMetadata, excludeOwnerProjects, excludeReleases, guid, id, lockRepositories, nodeId, orgMetadataOnly, owner, repositories, state, updatedAt, url) { 
        
        Migration.initialize(this, createdAt, excludeAttachments, excludeGitData, excludeMetadata, excludeOwnerProjects, excludeReleases, guid, id, lockRepositories, nodeId, orgMetadataOnly, owner, repositories, state, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, excludeAttachments, excludeGitData, excludeMetadata, excludeOwnerProjects, excludeReleases, guid, id, lockRepositories, nodeId, orgMetadataOnly, owner, repositories, state, updatedAt, url) { 
        obj['created_at'] = createdAt;
        obj['exclude_attachments'] = excludeAttachments;
        obj['exclude_git_data'] = excludeGitData;
        obj['exclude_metadata'] = excludeMetadata;
        obj['exclude_owner_projects'] = excludeOwnerProjects;
        obj['exclude_releases'] = excludeReleases;
        obj['guid'] = guid;
        obj['id'] = id;
        obj['lock_repositories'] = lockRepositories;
        obj['node_id'] = nodeId;
        obj['org_metadata_only'] = orgMetadataOnly;
        obj['owner'] = owner;
        obj['repositories'] = repositories;
        obj['state'] = state;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Migration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Migration} obj Optional instance to populate.
     * @return {module:model/Migration} The populated <code>Migration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Migration();

            if (data.hasOwnProperty('archive_url')) {
                obj['archive_url'] = ApiClient.convertToType(data['archive_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = ApiClient.convertToType(data['exclude'], [Object]);
            }
            if (data.hasOwnProperty('exclude_attachments')) {
                obj['exclude_attachments'] = ApiClient.convertToType(data['exclude_attachments'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_git_data')) {
                obj['exclude_git_data'] = ApiClient.convertToType(data['exclude_git_data'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_metadata')) {
                obj['exclude_metadata'] = ApiClient.convertToType(data['exclude_metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_owner_projects')) {
                obj['exclude_owner_projects'] = ApiClient.convertToType(data['exclude_owner_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_releases')) {
                obj['exclude_releases'] = ApiClient.convertToType(data['exclude_releases'], 'Boolean');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lock_repositories')) {
                obj['lock_repositories'] = ApiClient.convertToType(data['lock_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('org_metadata_only')) {
                obj['org_metadata_only'] = ApiClient.convertToType(data['org_metadata_only'], 'Boolean');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = NullableSimpleUser.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('repositories')) {
                obj['repositories'] = ApiClient.convertToType(data['repositories'], [Repository]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Migration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Migration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Migration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['archive_url'] && !(typeof data['archive_url'] === 'string' || data['archive_url'] instanceof String)) {
            throw new Error("Expected the field `archive_url` to be a primitive type in the JSON string but got " + data['archive_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclude'])) {
            throw new Error("Expected the field `exclude` to be an array in the JSON data but got " + data['exclude']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          NullableSimpleUser.validateJSON(data['owner']);
        }
        if (data['repositories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['repositories'])) {
                throw new Error("Expected the field `repositories` to be an array in the JSON data but got " + data['repositories']);
            }
            // validate the optional field `repositories` (array)
            for (const item of data['repositories']) {
                Repository.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Migration.RequiredProperties = ["created_at", "exclude_attachments", "exclude_git_data", "exclude_metadata", "exclude_owner_projects", "exclude_releases", "guid", "id", "lock_repositories", "node_id", "org_metadata_only", "owner", "repositories", "state", "updated_at", "url"];

/**
 * @member {String} archive_url
 */
Migration.prototype['archive_url'] = undefined;

/**
 * @member {Date} created_at
 */
Migration.prototype['created_at'] = undefined;

/**
 * @member {Array.<Object>} exclude
 */
Migration.prototype['exclude'] = undefined;

/**
 * @member {Boolean} exclude_attachments
 */
Migration.prototype['exclude_attachments'] = undefined;

/**
 * @member {Boolean} exclude_git_data
 */
Migration.prototype['exclude_git_data'] = undefined;

/**
 * @member {Boolean} exclude_metadata
 */
Migration.prototype['exclude_metadata'] = undefined;

/**
 * @member {Boolean} exclude_owner_projects
 */
Migration.prototype['exclude_owner_projects'] = undefined;

/**
 * @member {Boolean} exclude_releases
 */
Migration.prototype['exclude_releases'] = undefined;

/**
 * @member {String} guid
 */
Migration.prototype['guid'] = undefined;

/**
 * @member {Number} id
 */
Migration.prototype['id'] = undefined;

/**
 * @member {Boolean} lock_repositories
 */
Migration.prototype['lock_repositories'] = undefined;

/**
 * @member {String} node_id
 */
Migration.prototype['node_id'] = undefined;

/**
 * @member {Boolean} org_metadata_only
 */
Migration.prototype['org_metadata_only'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} owner
 */
Migration.prototype['owner'] = undefined;

/**
 * The repositories included in the migration. Only returned for export migrations.
 * @member {Array.<module:model/Repository>} repositories
 */
Migration.prototype['repositories'] = undefined;

/**
 * @member {String} state
 */
Migration.prototype['state'] = undefined;

/**
 * @member {Date} updated_at
 */
Migration.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
Migration.prototype['url'] = undefined;






export default Migration;

