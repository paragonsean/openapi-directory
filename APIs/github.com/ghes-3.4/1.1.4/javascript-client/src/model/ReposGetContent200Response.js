/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentDirectoryInner from './ContentDirectoryInner';
import ContentDirectoryInnerLinks from './ContentDirectoryInnerLinks';
import ContentFile from './ContentFile';
import ContentSubmodule from './ContentSubmodule';
import ContentSymlink from './ContentSymlink';

/**
 * The ReposGetContent200Response model module.
 * @module model/ReposGetContent200Response
 * @version 1.1.4
 */
class ReposGetContent200Response {
    /**
     * Constructs a new <code>ReposGetContent200Response</code>.
     * @alias module:model/ReposGetContent200Response
     * @param {(module:model/ContentFile|module:model/ContentSubmodule|module:model/ContentSymlink|module:model/[ContentDirectoryInner])} instance The actual instance to initialize ReposGetContent200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        // A list of directory items
        try {
            if (typeof instance === "[ContentDirectoryInner]") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                [ContentDirectoryInner].validateJSON(instance); // throw an exception if no match
                // create [ContentDirectoryInner] from JS object
                this.actualInstance = [ContentDirectoryInner].constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into [ContentDirectoryInner]
            errorMessages.push("Failed to construct [ContentDirectoryInner]: " + err)
        }

        try {
            if (typeof instance === "ContentFile") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContentFile.validateJSON(instance); // throw an exception if no match
                // create ContentFile from JS object
                this.actualInstance = ContentFile.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContentFile
            errorMessages.push("Failed to construct ContentFile: " + err)
        }

        try {
            if (typeof instance === "ContentSymlink") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContentSymlink.validateJSON(instance); // throw an exception if no match
                // create ContentSymlink from JS object
                this.actualInstance = ContentSymlink.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContentSymlink
            errorMessages.push("Failed to construct ContentSymlink: " + err)
        }

        try {
            if (typeof instance === "ContentSubmodule") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ContentSubmodule.validateJSON(instance); // throw an exception if no match
                // create ContentSubmodule from JS object
                this.actualInstance = ContentSubmodule.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ContentSubmodule
            errorMessages.push("Failed to construct ContentSubmodule: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ReposGetContent200Response` with oneOf schemas ContentFile, ContentSubmodule, ContentSymlink, [ContentDirectoryInner]. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ReposGetContent200Response` with oneOf schemas ContentFile, ContentSubmodule, ContentSymlink, [ContentDirectoryInner]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ReposGetContent200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposGetContent200Response} obj Optional instance to populate.
     * @return {module:model/ReposGetContent200Response} The populated <code>ReposGetContent200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ReposGetContent200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>ContentFile</code>, <code>ContentSubmodule</code>, <code>ContentSymlink</code>, <code>[ContentDirectoryInner]</code>.
     * @return {(module:model/ContentFile|module:model/ContentSubmodule|module:model/ContentSymlink|module:model/[ContentDirectoryInner])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ContentFile</code>, <code>ContentSubmodule</code>, <code>ContentSymlink</code>, <code>[ContentDirectoryInner]</code>.
     * @param {(module:model/ContentFile|module:model/ContentSubmodule|module:model/ContentSymlink|module:model/[ContentDirectoryInner])} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ReposGetContent200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ReposGetContent200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ReposGetContent200Response} An instance of ReposGetContent200Response.
     */
    static fromJSON = function(json_string){
        return ReposGetContent200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/ContentDirectoryInnerLinks} _links
 */
ReposGetContent200Response.prototype['_links'] = undefined;

/**
 * @member {String} content
 */
ReposGetContent200Response.prototype['content'] = undefined;

/**
 * @member {String} download_url
 */
ReposGetContent200Response.prototype['download_url'] = undefined;

/**
 * @member {String} encoding
 */
ReposGetContent200Response.prototype['encoding'] = undefined;

/**
 * @member {String} git_url
 */
ReposGetContent200Response.prototype['git_url'] = undefined;

/**
 * @member {String} html_url
 */
ReposGetContent200Response.prototype['html_url'] = undefined;

/**
 * @member {String} name
 */
ReposGetContent200Response.prototype['name'] = undefined;

/**
 * @member {String} path
 */
ReposGetContent200Response.prototype['path'] = undefined;

/**
 * @member {String} sha
 */
ReposGetContent200Response.prototype['sha'] = undefined;

/**
 * @member {Number} size
 */
ReposGetContent200Response.prototype['size'] = undefined;

/**
 * @member {String} submodule_git_url
 */
ReposGetContent200Response.prototype['submodule_git_url'] = undefined;

/**
 * @member {String} target
 */
ReposGetContent200Response.prototype['target'] = undefined;

/**
 * @member {module:model/ReposGetContent200Response.TypeEnum} type
 */
ReposGetContent200Response.prototype['type'] = undefined;

/**
 * @member {String} url
 */
ReposGetContent200Response.prototype['url'] = undefined;


ReposGetContent200Response.OneOf = ["ContentFile", "ContentSubmodule", "ContentSymlink", "[ContentDirectoryInner]"];

export default ReposGetContent200Response;

