/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReposCreateDeploymentRequestPayload from './ReposCreateDeploymentRequestPayload';

/**
 * The ReposCreateDeploymentRequest model module.
 * @module model/ReposCreateDeploymentRequest
 * @version 1.1.4
 */
class ReposCreateDeploymentRequest {
    /**
     * Constructs a new <code>ReposCreateDeploymentRequest</code>.
     * @alias module:model/ReposCreateDeploymentRequest
     * @param ref {String} The ref to deploy. This can be a branch, tag, or SHA.
     */
    constructor(ref) { 
        
        ReposCreateDeploymentRequest.initialize(this, ref);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ref) { 
        obj['auto_merge'] = true;
        obj['description'] = '';
        obj['environment'] = 'production';
        obj['ref'] = ref;
        obj['task'] = 'deploy';
        obj['transient_environment'] = false;
    }

    /**
     * Constructs a <code>ReposCreateDeploymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposCreateDeploymentRequest} obj Optional instance to populate.
     * @return {module:model/ReposCreateDeploymentRequest} The populated <code>ReposCreateDeploymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposCreateDeploymentRequest();

            if (data.hasOwnProperty('auto_merge')) {
                obj['auto_merge'] = ApiClient.convertToType(data['auto_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ReposCreateDeploymentRequestPayload.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('production_environment')) {
                obj['production_environment'] = ApiClient.convertToType(data['production_environment'], 'Boolean');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('required_contexts')) {
                obj['required_contexts'] = ApiClient.convertToType(data['required_contexts'], ['String']);
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], 'String');
            }
            if (data.hasOwnProperty('transient_environment')) {
                obj['transient_environment'] = ApiClient.convertToType(data['transient_environment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposCreateDeploymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposCreateDeploymentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReposCreateDeploymentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          ReposCreateDeploymentRequestPayload.validateJSON(data['payload']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required_contexts'])) {
            throw new Error("Expected the field `required_contexts` to be an array in the JSON data but got " + data['required_contexts']);
        }
        // ensure the json data is a string
        if (data['task'] && !(typeof data['task'] === 'string' || data['task'] instanceof String)) {
            throw new Error("Expected the field `task` to be a primitive type in the JSON string but got " + data['task']);
        }

        return true;
    }


}

ReposCreateDeploymentRequest.RequiredProperties = ["ref"];

/**
 * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
 * @member {Boolean} auto_merge
 * @default true
 */
ReposCreateDeploymentRequest.prototype['auto_merge'] = true;

/**
 * Short description of the deployment.
 * @member {String} description
 * @default ''
 */
ReposCreateDeploymentRequest.prototype['description'] = '';

/**
 * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
 * @member {String} environment
 * @default 'production'
 */
ReposCreateDeploymentRequest.prototype['environment'] = 'production';

/**
 * @member {module:model/ReposCreateDeploymentRequestPayload} payload
 */
ReposCreateDeploymentRequest.prototype['payload'] = undefined;

/**
 * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
 * @member {Boolean} production_environment
 */
ReposCreateDeploymentRequest.prototype['production_environment'] = undefined;

/**
 * The ref to deploy. This can be a branch, tag, or SHA.
 * @member {String} ref
 */
ReposCreateDeploymentRequest.prototype['ref'] = undefined;

/**
 * The [status](https://docs.github.com/enterprise-server@3.4/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
 * @member {Array.<String>} required_contexts
 */
ReposCreateDeploymentRequest.prototype['required_contexts'] = undefined;

/**
 * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
 * @member {String} task
 * @default 'deploy'
 */
ReposCreateDeploymentRequest.prototype['task'] = 'deploy';

/**
 * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
 * @member {Boolean} transient_environment
 * @default false
 */
ReposCreateDeploymentRequest.prototype['transient_environment'] = false;






export default ReposCreateDeploymentRequest;

