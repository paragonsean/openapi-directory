/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodeScanningSarifsStatus model module.
 * @module model/CodeScanningSarifsStatus
 * @version 1.1.4
 */
class CodeScanningSarifsStatus {
    /**
     * Constructs a new <code>CodeScanningSarifsStatus</code>.
     * @alias module:model/CodeScanningSarifsStatus
     */
    constructor() { 
        
        CodeScanningSarifsStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodeScanningSarifsStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeScanningSarifsStatus} obj Optional instance to populate.
     * @return {module:model/CodeScanningSarifsStatus} The populated <code>CodeScanningSarifsStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeScanningSarifsStatus();

            if (data.hasOwnProperty('analyses_url')) {
                obj['analyses_url'] = ApiClient.convertToType(data['analyses_url'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('processing_status')) {
                obj['processing_status'] = ApiClient.convertToType(data['processing_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeScanningSarifsStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeScanningSarifsStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['analyses_url'] && !(typeof data['analyses_url'] === 'string' || data['analyses_url'] instanceof String)) {
            throw new Error("Expected the field `analyses_url` to be a primitive type in the JSON string but got " + data['analyses_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }
        // ensure the json data is a string
        if (data['processing_status'] && !(typeof data['processing_status'] === 'string' || data['processing_status'] instanceof String)) {
            throw new Error("Expected the field `processing_status` to be a primitive type in the JSON string but got " + data['processing_status']);
        }

        return true;
    }


}



/**
 * The REST API URL for getting the analyses associated with the upload.
 * @member {String} analyses_url
 */
CodeScanningSarifsStatus.prototype['analyses_url'] = undefined;

/**
 * Any errors that ocurred during processing of the delivery.
 * @member {Array.<String>} errors
 */
CodeScanningSarifsStatus.prototype['errors'] = undefined;

/**
 * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
 * @member {module:model/CodeScanningSarifsStatus.ProcessingStatusEnum} processing_status
 */
CodeScanningSarifsStatus.prototype['processing_status'] = undefined;





/**
 * Allowed values for the <code>processing_status</code> property.
 * @enum {String}
 * @readonly
 */
CodeScanningSarifsStatus['ProcessingStatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"
};



export default CodeScanningSarifsStatus;

