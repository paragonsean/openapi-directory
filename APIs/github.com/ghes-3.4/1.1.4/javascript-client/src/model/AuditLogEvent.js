/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditLogEventActorLocation from './AuditLogEventActorLocation';

/**
 * The AuditLogEvent model module.
 * @module model/AuditLogEvent
 * @version 1.1.4
 */
class AuditLogEvent {
    /**
     * Constructs a new <code>AuditLogEvent</code>.
     * @alias module:model/AuditLogEvent
     */
    constructor() { 
        
        AuditLogEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuditLogEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditLogEvent} obj Optional instance to populate.
     * @return {module:model/AuditLogEvent} The populated <code>AuditLogEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditLogEvent();

            if (data.hasOwnProperty('@timestamp')) {
                obj['@timestamp'] = ApiClient.convertToType(data['@timestamp'], 'Number');
            }
            if (data.hasOwnProperty('_document_id')) {
                obj['_document_id'] = ApiClient.convertToType(data['_document_id'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('active_was')) {
                obj['active_was'] = ApiClient.convertToType(data['active_was'], 'Boolean');
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ApiClient.convertToType(data['actor'], 'String');
            }
            if (data.hasOwnProperty('actor_id')) {
                obj['actor_id'] = ApiClient.convertToType(data['actor_id'], 'Number');
            }
            if (data.hasOwnProperty('actor_location')) {
                obj['actor_location'] = AuditLogEventActorLocation.constructFromObject(data['actor_location']);
            }
            if (data.hasOwnProperty('blocked_user')) {
                obj['blocked_user'] = ApiClient.convertToType(data['blocked_user'], 'String');
            }
            if (data.hasOwnProperty('business')) {
                obj['business'] = ApiClient.convertToType(data['business'], 'String');
            }
            if (data.hasOwnProperty('business_id')) {
                obj['business_id'] = ApiClient.convertToType(data['business_id'], 'Number');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], [Object]);
            }
            if (data.hasOwnProperty('config_was')) {
                obj['config_was'] = ApiClient.convertToType(data['config_was'], [Object]);
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': Object});
            }
            if (data.hasOwnProperty('deploy_key_fingerprint')) {
                obj['deploy_key_fingerprint'] = ApiClient.convertToType(data['deploy_key_fingerprint'], 'String');
            }
            if (data.hasOwnProperty('emoji')) {
                obj['emoji'] = ApiClient.convertToType(data['emoji'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [Object]);
            }
            if (data.hasOwnProperty('events_were')) {
                obj['events_were'] = ApiClient.convertToType(data['events_were'], [Object]);
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('hook_id')) {
                obj['hook_id'] = ApiClient.convertToType(data['hook_id'], 'Number');
            }
            if (data.hasOwnProperty('limited_availability')) {
                obj['limited_availability'] = ApiClient.convertToType(data['limited_availability'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('old_user')) {
                obj['old_user'] = ApiClient.convertToType(data['old_user'], 'String');
            }
            if (data.hasOwnProperty('openssh_public_key')) {
                obj['openssh_public_key'] = ApiClient.convertToType(data['openssh_public_key'], 'String');
            }
            if (data.hasOwnProperty('operation_type')) {
                obj['operation_type'] = ApiClient.convertToType(data['operation_type'], 'String');
            }
            if (data.hasOwnProperty('org')) {
                obj['org'] = ApiClient.convertToType(data['org'], 'String');
            }
            if (data.hasOwnProperty('org_id')) {
                obj['org_id'] = ApiClient.convertToType(data['org_id'], 'Number');
            }
            if (data.hasOwnProperty('previous_visibility')) {
                obj['previous_visibility'] = ApiClient.convertToType(data['previous_visibility'], 'String');
            }
            if (data.hasOwnProperty('read_only')) {
                obj['read_only'] = ApiClient.convertToType(data['read_only'], 'Boolean');
            }
            if (data.hasOwnProperty('repo')) {
                obj['repo'] = ApiClient.convertToType(data['repo'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('repository_public')) {
                obj['repository_public'] = ApiClient.convertToType(data['repository_public'], 'Boolean');
            }
            if (data.hasOwnProperty('target_login')) {
                obj['target_login'] = ApiClient.convertToType(data['target_login'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('transport_protocol')) {
                obj['transport_protocol'] = ApiClient.convertToType(data['transport_protocol'], 'Number');
            }
            if (data.hasOwnProperty('transport_protocol_name')) {
                obj['transport_protocol_name'] = ApiClient.convertToType(data['transport_protocol_name'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditLogEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditLogEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_document_id'] && !(typeof data['_document_id'] === 'string' || data['_document_id'] instanceof String)) {
            throw new Error("Expected the field `_document_id` to be a primitive type in the JSON string but got " + data['_document_id']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['actor'] && !(typeof data['actor'] === 'string' || data['actor'] instanceof String)) {
            throw new Error("Expected the field `actor` to be a primitive type in the JSON string but got " + data['actor']);
        }
        // validate the optional field `actor_location`
        if (data['actor_location']) { // data not null
          AuditLogEventActorLocation.validateJSON(data['actor_location']);
        }
        // ensure the json data is a string
        if (data['blocked_user'] && !(typeof data['blocked_user'] === 'string' || data['blocked_user'] instanceof String)) {
            throw new Error("Expected the field `blocked_user` to be a primitive type in the JSON string but got " + data['blocked_user']);
        }
        // ensure the json data is a string
        if (data['business'] && !(typeof data['business'] === 'string' || data['business'] instanceof String)) {
            throw new Error("Expected the field `business` to be a primitive type in the JSON string but got " + data['business']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['config'])) {
            throw new Error("Expected the field `config` to be an array in the JSON data but got " + data['config']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['config_was'])) {
            throw new Error("Expected the field `config_was` to be an array in the JSON data but got " + data['config_was']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['deploy_key_fingerprint'] && !(typeof data['deploy_key_fingerprint'] === 'string' || data['deploy_key_fingerprint'] instanceof String)) {
            throw new Error("Expected the field `deploy_key_fingerprint` to be a primitive type in the JSON string but got " + data['deploy_key_fingerprint']);
        }
        // ensure the json data is a string
        if (data['emoji'] && !(typeof data['emoji'] === 'string' || data['emoji'] instanceof String)) {
            throw new Error("Expected the field `emoji` to be a primitive type in the JSON string but got " + data['emoji']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events_were'])) {
            throw new Error("Expected the field `events_were` to be an array in the JSON data but got " + data['events_were']);
        }
        // ensure the json data is a string
        if (data['explanation'] && !(typeof data['explanation'] === 'string' || data['explanation'] instanceof String)) {
            throw new Error("Expected the field `explanation` to be a primitive type in the JSON string but got " + data['explanation']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['old_user'] && !(typeof data['old_user'] === 'string' || data['old_user'] instanceof String)) {
            throw new Error("Expected the field `old_user` to be a primitive type in the JSON string but got " + data['old_user']);
        }
        // ensure the json data is a string
        if (data['openssh_public_key'] && !(typeof data['openssh_public_key'] === 'string' || data['openssh_public_key'] instanceof String)) {
            throw new Error("Expected the field `openssh_public_key` to be a primitive type in the JSON string but got " + data['openssh_public_key']);
        }
        // ensure the json data is a string
        if (data['operation_type'] && !(typeof data['operation_type'] === 'string' || data['operation_type'] instanceof String)) {
            throw new Error("Expected the field `operation_type` to be a primitive type in the JSON string but got " + data['operation_type']);
        }
        // ensure the json data is a string
        if (data['org'] && !(typeof data['org'] === 'string' || data['org'] instanceof String)) {
            throw new Error("Expected the field `org` to be a primitive type in the JSON string but got " + data['org']);
        }
        // ensure the json data is a string
        if (data['previous_visibility'] && !(typeof data['previous_visibility'] === 'string' || data['previous_visibility'] instanceof String)) {
            throw new Error("Expected the field `previous_visibility` to be a primitive type in the JSON string but got " + data['previous_visibility']);
        }
        // ensure the json data is a string
        if (data['repo'] && !(typeof data['repo'] === 'string' || data['repo'] instanceof String)) {
            throw new Error("Expected the field `repo` to be a primitive type in the JSON string but got " + data['repo']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['target_login'] && !(typeof data['target_login'] === 'string' || data['target_login'] instanceof String)) {
            throw new Error("Expected the field `target_login` to be a primitive type in the JSON string but got " + data['target_login']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['transport_protocol_name'] && !(typeof data['transport_protocol_name'] === 'string' || data['transport_protocol_name'] instanceof String)) {
            throw new Error("Expected the field `transport_protocol_name` to be a primitive type in the JSON string but got " + data['transport_protocol_name']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * @member {Number} @timestamp
 */
AuditLogEvent.prototype['@timestamp'] = undefined;

/**
 * A unique identifier for an audit event.
 * @member {String} _document_id
 */
AuditLogEvent.prototype['_document_id'] = undefined;

/**
 * The name of the action that was performed, for example `user.login` or `repo.create`.
 * @member {String} action
 */
AuditLogEvent.prototype['action'] = undefined;

/**
 * @member {Boolean} active
 */
AuditLogEvent.prototype['active'] = undefined;

/**
 * @member {Boolean} active_was
 */
AuditLogEvent.prototype['active_was'] = undefined;

/**
 * The actor who performed the action.
 * @member {String} actor
 */
AuditLogEvent.prototype['actor'] = undefined;

/**
 * The id of the actor who performed the action.
 * @member {Number} actor_id
 */
AuditLogEvent.prototype['actor_id'] = undefined;

/**
 * @member {module:model/AuditLogEventActorLocation} actor_location
 */
AuditLogEvent.prototype['actor_location'] = undefined;

/**
 * The username of the account being blocked.
 * @member {String} blocked_user
 */
AuditLogEvent.prototype['blocked_user'] = undefined;

/**
 * @member {String} business
 */
AuditLogEvent.prototype['business'] = undefined;

/**
 * @member {Number} business_id
 */
AuditLogEvent.prototype['business_id'] = undefined;

/**
 * @member {Array.<Object>} config
 */
AuditLogEvent.prototype['config'] = undefined;

/**
 * @member {Array.<Object>} config_was
 */
AuditLogEvent.prototype['config_was'] = undefined;

/**
 * @member {String} content_type
 */
AuditLogEvent.prototype['content_type'] = undefined;

/**
 * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
 * @member {Number} created_at
 */
AuditLogEvent.prototype['created_at'] = undefined;

/**
 * @member {Object.<String, Object>} data
 */
AuditLogEvent.prototype['data'] = undefined;

/**
 * @member {String} deploy_key_fingerprint
 */
AuditLogEvent.prototype['deploy_key_fingerprint'] = undefined;

/**
 * @member {String} emoji
 */
AuditLogEvent.prototype['emoji'] = undefined;

/**
 * @member {Array.<Object>} events
 */
AuditLogEvent.prototype['events'] = undefined;

/**
 * @member {Array.<Object>} events_were
 */
AuditLogEvent.prototype['events_were'] = undefined;

/**
 * @member {String} explanation
 */
AuditLogEvent.prototype['explanation'] = undefined;

/**
 * @member {String} fingerprint
 */
AuditLogEvent.prototype['fingerprint'] = undefined;

/**
 * @member {Number} hook_id
 */
AuditLogEvent.prototype['hook_id'] = undefined;

/**
 * @member {Boolean} limited_availability
 */
AuditLogEvent.prototype['limited_availability'] = undefined;

/**
 * @member {String} message
 */
AuditLogEvent.prototype['message'] = undefined;

/**
 * @member {String} name
 */
AuditLogEvent.prototype['name'] = undefined;

/**
 * @member {String} old_user
 */
AuditLogEvent.prototype['old_user'] = undefined;

/**
 * @member {String} openssh_public_key
 */
AuditLogEvent.prototype['openssh_public_key'] = undefined;

/**
 * @member {String} operation_type
 */
AuditLogEvent.prototype['operation_type'] = undefined;

/**
 * @member {String} org
 */
AuditLogEvent.prototype['org'] = undefined;

/**
 * @member {Number} org_id
 */
AuditLogEvent.prototype['org_id'] = undefined;

/**
 * @member {String} previous_visibility
 */
AuditLogEvent.prototype['previous_visibility'] = undefined;

/**
 * @member {Boolean} read_only
 */
AuditLogEvent.prototype['read_only'] = undefined;

/**
 * The name of the repository.
 * @member {String} repo
 */
AuditLogEvent.prototype['repo'] = undefined;

/**
 * The name of the repository.
 * @member {String} repository
 */
AuditLogEvent.prototype['repository'] = undefined;

/**
 * @member {Boolean} repository_public
 */
AuditLogEvent.prototype['repository_public'] = undefined;

/**
 * @member {String} target_login
 */
AuditLogEvent.prototype['target_login'] = undefined;

/**
 * @member {String} team
 */
AuditLogEvent.prototype['team'] = undefined;

/**
 * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
 * @member {Number} transport_protocol
 */
AuditLogEvent.prototype['transport_protocol'] = undefined;

/**
 * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
 * @member {String} transport_protocol_name
 */
AuditLogEvent.prototype['transport_protocol_name'] = undefined;

/**
 * The user that was affected by the action performed (if available).
 * @member {String} user
 */
AuditLogEvent.prototype['user'] = undefined;

/**
 * @member {Number} user_id
 */
AuditLogEvent.prototype['user_id'] = undefined;

/**
 * The repository visibility, for example `public` or `private`.
 * @member {String} visibility
 */
AuditLogEvent.prototype['visibility'] = undefined;






export default AuditLogEvent;

