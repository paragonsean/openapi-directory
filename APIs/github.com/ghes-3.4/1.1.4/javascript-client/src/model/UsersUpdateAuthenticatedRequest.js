/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsersUpdateAuthenticatedRequest model module.
 * @module model/UsersUpdateAuthenticatedRequest
 * @version 1.1.4
 */
class UsersUpdateAuthenticatedRequest {
    /**
     * Constructs a new <code>UsersUpdateAuthenticatedRequest</code>.
     * @alias module:model/UsersUpdateAuthenticatedRequest
     */
    constructor() { 
        
        UsersUpdateAuthenticatedRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsersUpdateAuthenticatedRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsersUpdateAuthenticatedRequest} obj Optional instance to populate.
     * @return {module:model/UsersUpdateAuthenticatedRequest} The populated <code>UsersUpdateAuthenticatedRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsersUpdateAuthenticatedRequest();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('blog')) {
                obj['blog'] = ApiClient.convertToType(data['blog'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('hireable')) {
                obj['hireable'] = ApiClient.convertToType(data['hireable'], 'Boolean');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('twitter_username')) {
                obj['twitter_username'] = ApiClient.convertToType(data['twitter_username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsersUpdateAuthenticatedRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsersUpdateAuthenticatedRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['blog'] && !(typeof data['blog'] === 'string' || data['blog'] instanceof String)) {
            throw new Error("Expected the field `blog` to be a primitive type in the JSON string but got " + data['blog']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['twitter_username'] && !(typeof data['twitter_username'] === 'string' || data['twitter_username'] instanceof String)) {
            throw new Error("Expected the field `twitter_username` to be a primitive type in the JSON string but got " + data['twitter_username']);
        }

        return true;
    }


}



/**
 * The new short biography of the user.
 * @member {String} bio
 */
UsersUpdateAuthenticatedRequest.prototype['bio'] = undefined;

/**
 * The new blog URL of the user.
 * @member {String} blog
 */
UsersUpdateAuthenticatedRequest.prototype['blog'] = undefined;

/**
 * The new company of the user.
 * @member {String} company
 */
UsersUpdateAuthenticatedRequest.prototype['company'] = undefined;

/**
 * The publicly visible email address of the user.
 * @member {String} email
 */
UsersUpdateAuthenticatedRequest.prototype['email'] = undefined;

/**
 * The new hiring availability of the user.
 * @member {Boolean} hireable
 */
UsersUpdateAuthenticatedRequest.prototype['hireable'] = undefined;

/**
 * The new location of the user.
 * @member {String} location
 */
UsersUpdateAuthenticatedRequest.prototype['location'] = undefined;

/**
 * The new name of the user.
 * @member {String} name
 */
UsersUpdateAuthenticatedRequest.prototype['name'] = undefined;

/**
 * The new Twitter username of the user.
 * @member {String} twitter_username
 */
UsersUpdateAuthenticatedRequest.prototype['twitter_username'] = undefined;






export default UsersUpdateAuthenticatedRequest;

