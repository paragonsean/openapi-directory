/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MigrationsStartForOrgRequest model module.
 * @module model/MigrationsStartForOrgRequest
 * @version 1.1.4
 */
class MigrationsStartForOrgRequest {
    /**
     * Constructs a new <code>MigrationsStartForOrgRequest</code>.
     * @alias module:model/MigrationsStartForOrgRequest
     * @param repositories {Array.<String>} A list of arrays indicating which repositories should be migrated.
     */
    constructor(repositories) { 
        
        MigrationsStartForOrgRequest.initialize(this, repositories);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositories) { 
        obj['exclude_attachments'] = false;
        obj['exclude_git_data'] = false;
        obj['exclude_metadata'] = false;
        obj['exclude_owner_projects'] = false;
        obj['exclude_releases'] = false;
        obj['lock_repositories'] = false;
        obj['org_metadata_only'] = false;
        obj['repositories'] = repositories;
    }

    /**
     * Constructs a <code>MigrationsStartForOrgRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrationsStartForOrgRequest} obj Optional instance to populate.
     * @return {module:model/MigrationsStartForOrgRequest} The populated <code>MigrationsStartForOrgRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrationsStartForOrgRequest();

            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = ApiClient.convertToType(data['exclude'], ['String']);
            }
            if (data.hasOwnProperty('exclude_attachments')) {
                obj['exclude_attachments'] = ApiClient.convertToType(data['exclude_attachments'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_git_data')) {
                obj['exclude_git_data'] = ApiClient.convertToType(data['exclude_git_data'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_metadata')) {
                obj['exclude_metadata'] = ApiClient.convertToType(data['exclude_metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_owner_projects')) {
                obj['exclude_owner_projects'] = ApiClient.convertToType(data['exclude_owner_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('exclude_releases')) {
                obj['exclude_releases'] = ApiClient.convertToType(data['exclude_releases'], 'Boolean');
            }
            if (data.hasOwnProperty('lock_repositories')) {
                obj['lock_repositories'] = ApiClient.convertToType(data['lock_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('org_metadata_only')) {
                obj['org_metadata_only'] = ApiClient.convertToType(data['org_metadata_only'], 'Boolean');
            }
            if (data.hasOwnProperty('repositories')) {
                obj['repositories'] = ApiClient.convertToType(data['repositories'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrationsStartForOrgRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrationsStartForOrgRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MigrationsStartForOrgRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclude'])) {
            throw new Error("Expected the field `exclude` to be an array in the JSON data but got " + data['exclude']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['repositories'])) {
            throw new Error("Expected the field `repositories` to be an array in the JSON data but got " + data['repositories']);
        }

        return true;
    }


}

MigrationsStartForOrgRequest.RequiredProperties = ["repositories"];

/**
 * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.
 * @member {Array.<module:model/MigrationsStartForOrgRequest.ExcludeEnum>} exclude
 */
MigrationsStartForOrgRequest.prototype['exclude'] = undefined;

/**
 * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
 * @member {Boolean} exclude_attachments
 * @default false
 */
MigrationsStartForOrgRequest.prototype['exclude_attachments'] = false;

/**
 * Indicates whether the repository git data should be excluded from the migration.
 * @member {Boolean} exclude_git_data
 * @default false
 */
MigrationsStartForOrgRequest.prototype['exclude_git_data'] = false;

/**
 * Indicates whether metadata should be excluded and only git source should be included for the migration.
 * @member {Boolean} exclude_metadata
 * @default false
 */
MigrationsStartForOrgRequest.prototype['exclude_metadata'] = false;

/**
 * Indicates whether projects owned by the organization or users should be excluded. from the migration.
 * @member {Boolean} exclude_owner_projects
 * @default false
 */
MigrationsStartForOrgRequest.prototype['exclude_owner_projects'] = false;

/**
 * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
 * @member {Boolean} exclude_releases
 * @default false
 */
MigrationsStartForOrgRequest.prototype['exclude_releases'] = false;

/**
 * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
 * @member {Boolean} lock_repositories
 * @default false
 */
MigrationsStartForOrgRequest.prototype['lock_repositories'] = false;

/**
 * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
 * @member {Boolean} org_metadata_only
 * @default false
 */
MigrationsStartForOrgRequest.prototype['org_metadata_only'] = false;

/**
 * A list of arrays indicating which repositories should be migrated.
 * @member {Array.<String>} repositories
 */
MigrationsStartForOrgRequest.prototype['repositories'] = undefined;





/**
 * Allowed values for the <code>exclude</code> property.
 * @enum {String}
 * @readonly
 */
MigrationsStartForOrgRequest['ExcludeEnum'] = {

    /**
     * value: "repositories"
     * @const
     */
    "repositories": "repositories"
};



export default MigrationsStartForOrgRequest;

