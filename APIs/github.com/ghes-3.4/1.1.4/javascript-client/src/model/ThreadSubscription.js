/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ThreadSubscription model module.
 * @module model/ThreadSubscription
 * @version 1.1.4
 */
class ThreadSubscription {
    /**
     * Constructs a new <code>ThreadSubscription</code>.
     * Thread Subscription
     * @alias module:model/ThreadSubscription
     * @param createdAt {Date} 
     * @param ignored {Boolean} 
     * @param reason {String} 
     * @param subscribed {Boolean} 
     * @param url {String} 
     */
    constructor(createdAt, ignored, reason, subscribed, url) { 
        
        ThreadSubscription.initialize(this, createdAt, ignored, reason, subscribed, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, ignored, reason, subscribed, url) { 
        obj['created_at'] = createdAt;
        obj['ignored'] = ignored;
        obj['reason'] = reason;
        obj['subscribed'] = subscribed;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ThreadSubscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThreadSubscription} obj Optional instance to populate.
     * @return {module:model/ThreadSubscription} The populated <code>ThreadSubscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThreadSubscription();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('ignored')) {
                obj['ignored'] = ApiClient.convertToType(data['ignored'], 'Boolean');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('repository_url')) {
                obj['repository_url'] = ApiClient.convertToType(data['repository_url'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'Boolean');
            }
            if (data.hasOwnProperty('thread_url')) {
                obj['thread_url'] = ApiClient.convertToType(data['thread_url'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThreadSubscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThreadSubscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ThreadSubscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['repository_url'] && !(typeof data['repository_url'] === 'string' || data['repository_url'] instanceof String)) {
            throw new Error("Expected the field `repository_url` to be a primitive type in the JSON string but got " + data['repository_url']);
        }
        // ensure the json data is a string
        if (data['thread_url'] && !(typeof data['thread_url'] === 'string' || data['thread_url'] instanceof String)) {
            throw new Error("Expected the field `thread_url` to be a primitive type in the JSON string but got " + data['thread_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ThreadSubscription.RequiredProperties = ["created_at", "ignored", "reason", "subscribed", "url"];

/**
 * @member {Date} created_at
 */
ThreadSubscription.prototype['created_at'] = undefined;

/**
 * @member {Boolean} ignored
 */
ThreadSubscription.prototype['ignored'] = undefined;

/**
 * @member {String} reason
 */
ThreadSubscription.prototype['reason'] = undefined;

/**
 * @member {String} repository_url
 */
ThreadSubscription.prototype['repository_url'] = undefined;

/**
 * @member {Boolean} subscribed
 */
ThreadSubscription.prototype['subscribed'] = undefined;

/**
 * @member {String} thread_url
 */
ThreadSubscription.prototype['thread_url'] = undefined;

/**
 * @member {String} url
 */
ThreadSubscription.prototype['url'] = undefined;






export default ThreadSubscription;

