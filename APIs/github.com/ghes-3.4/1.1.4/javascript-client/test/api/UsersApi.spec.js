/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('usersAddEmailForAuthenticatedUser', function() {
      it('should call usersAddEmailForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersAddEmailForAuthenticatedUser
        //instance.usersAddEmailForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCheckFollowingForUser', function() {
      it('should call usersCheckFollowingForUser successfully', function(done) {
        //uncomment below and update the code to test usersCheckFollowingForUser
        //instance.usersCheckFollowingForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCheckPersonIsFollowedByAuthenticated', function() {
      it('should call usersCheckPersonIsFollowedByAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersCheckPersonIsFollowedByAuthenticated
        //instance.usersCheckPersonIsFollowedByAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCreateGpgKeyForAuthenticatedUser', function() {
      it('should call usersCreateGpgKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersCreateGpgKeyForAuthenticatedUser
        //instance.usersCreateGpgKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCreatePublicSshKeyForAuthenticatedUser', function() {
      it('should call usersCreatePublicSshKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersCreatePublicSshKeyForAuthenticatedUser
        //instance.usersCreatePublicSshKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteEmailForAuthenticatedUser', function() {
      it('should call usersDeleteEmailForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersDeleteEmailForAuthenticatedUser
        //instance.usersDeleteEmailForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteGpgKeyForAuthenticatedUser', function() {
      it('should call usersDeleteGpgKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersDeleteGpgKeyForAuthenticatedUser
        //instance.usersDeleteGpgKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeletePublicSshKeyForAuthenticatedUser', function() {
      it('should call usersDeletePublicSshKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersDeletePublicSshKeyForAuthenticatedUser
        //instance.usersDeletePublicSshKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersFollow', function() {
      it('should call usersFollow successfully', function(done) {
        //uncomment below and update the code to test usersFollow
        //instance.usersFollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetAuthenticated', function() {
      it('should call usersGetAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersGetAuthenticated
        //instance.usersGetAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetByUsername', function() {
      it('should call usersGetByUsername successfully', function(done) {
        //uncomment below and update the code to test usersGetByUsername
        //instance.usersGetByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetContextForUser', function() {
      it('should call usersGetContextForUser successfully', function(done) {
        //uncomment below and update the code to test usersGetContextForUser
        //instance.usersGetContextForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetGpgKeyForAuthenticatedUser', function() {
      it('should call usersGetGpgKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersGetGpgKeyForAuthenticatedUser
        //instance.usersGetGpgKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetPublicSshKeyForAuthenticatedUser', function() {
      it('should call usersGetPublicSshKeyForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersGetPublicSshKeyForAuthenticatedUser
        //instance.usersGetPublicSshKeyForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersList', function() {
      it('should call usersList successfully', function(done) {
        //uncomment below and update the code to test usersList
        //instance.usersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListEmailsForAuthenticatedUser', function() {
      it('should call usersListEmailsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListEmailsForAuthenticatedUser
        //instance.usersListEmailsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowedByAuthenticatedUser', function() {
      it('should call usersListFollowedByAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowedByAuthenticatedUser
        //instance.usersListFollowedByAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowersForAuthenticatedUser', function() {
      it('should call usersListFollowersForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowersForAuthenticatedUser
        //instance.usersListFollowersForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowersForUser', function() {
      it('should call usersListFollowersForUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowersForUser
        //instance.usersListFollowersForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowingForUser', function() {
      it('should call usersListFollowingForUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowingForUser
        //instance.usersListFollowingForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListGpgKeysForAuthenticatedUser', function() {
      it('should call usersListGpgKeysForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListGpgKeysForAuthenticatedUser
        //instance.usersListGpgKeysForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListGpgKeysForUser', function() {
      it('should call usersListGpgKeysForUser successfully', function(done) {
        //uncomment below and update the code to test usersListGpgKeysForUser
        //instance.usersListGpgKeysForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicEmailsForAuthenticatedUser', function() {
      it('should call usersListPublicEmailsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListPublicEmailsForAuthenticatedUser
        //instance.usersListPublicEmailsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicKeysForUser', function() {
      it('should call usersListPublicKeysForUser successfully', function(done) {
        //uncomment below and update the code to test usersListPublicKeysForUser
        //instance.usersListPublicKeysForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicSshKeysForAuthenticatedUser', function() {
      it('should call usersListPublicSshKeysForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListPublicSshKeysForAuthenticatedUser
        //instance.usersListPublicSshKeysForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUnfollow', function() {
      it('should call usersUnfollow successfully', function(done) {
        //uncomment below and update the code to test usersUnfollow
        //instance.usersUnfollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUpdateAuthenticated', function() {
      it('should call usersUpdateAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersUpdateAuthenticated
        //instance.usersUpdateAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
