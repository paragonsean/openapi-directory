/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.ReposApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReposApi', function() {
    describe('reposAcceptInvitationForAuthenticatedUser', function() {
      it('should call reposAcceptInvitationForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test reposAcceptInvitationForAuthenticatedUser
        //instance.reposAcceptInvitationForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposAddAppAccessRestrictions', function() {
      it('should call reposAddAppAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposAddAppAccessRestrictions
        //instance.reposAddAppAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposAddCollaborator', function() {
      it('should call reposAddCollaborator successfully', function(done) {
        //uncomment below and update the code to test reposAddCollaborator
        //instance.reposAddCollaborator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposAddStatusCheckContexts', function() {
      it('should call reposAddStatusCheckContexts successfully', function(done) {
        //uncomment below and update the code to test reposAddStatusCheckContexts
        //instance.reposAddStatusCheckContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposAddTeamAccessRestrictions', function() {
      it('should call reposAddTeamAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposAddTeamAccessRestrictions
        //instance.reposAddTeamAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposAddUserAccessRestrictions', function() {
      it('should call reposAddUserAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposAddUserAccessRestrictions
        //instance.reposAddUserAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCheckCollaborator', function() {
      it('should call reposCheckCollaborator successfully', function(done) {
        //uncomment below and update the code to test reposCheckCollaborator
        //instance.reposCheckCollaborator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCompareCommits', function() {
      it('should call reposCompareCommits successfully', function(done) {
        //uncomment below and update the code to test reposCompareCommits
        //instance.reposCompareCommits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateAutolink', function() {
      it('should call reposCreateAutolink successfully', function(done) {
        //uncomment below and update the code to test reposCreateAutolink
        //instance.reposCreateAutolink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateCommitComment', function() {
      it('should call reposCreateCommitComment successfully', function(done) {
        //uncomment below and update the code to test reposCreateCommitComment
        //instance.reposCreateCommitComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateCommitSignatureProtection', function() {
      it('should call reposCreateCommitSignatureProtection successfully', function(done) {
        //uncomment below and update the code to test reposCreateCommitSignatureProtection
        //instance.reposCreateCommitSignatureProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateCommitStatus', function() {
      it('should call reposCreateCommitStatus successfully', function(done) {
        //uncomment below and update the code to test reposCreateCommitStatus
        //instance.reposCreateCommitStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateDeployKey', function() {
      it('should call reposCreateDeployKey successfully', function(done) {
        //uncomment below and update the code to test reposCreateDeployKey
        //instance.reposCreateDeployKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateDeployment', function() {
      it('should call reposCreateDeployment successfully', function(done) {
        //uncomment below and update the code to test reposCreateDeployment
        //instance.reposCreateDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateDeploymentBranchPolicy', function() {
      it('should call reposCreateDeploymentBranchPolicy successfully', function(done) {
        //uncomment below and update the code to test reposCreateDeploymentBranchPolicy
        //instance.reposCreateDeploymentBranchPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateDeploymentStatus', function() {
      it('should call reposCreateDeploymentStatus successfully', function(done) {
        //uncomment below and update the code to test reposCreateDeploymentStatus
        //instance.reposCreateDeploymentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateDispatchEvent', function() {
      it('should call reposCreateDispatchEvent successfully', function(done) {
        //uncomment below and update the code to test reposCreateDispatchEvent
        //instance.reposCreateDispatchEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateForAuthenticatedUser', function() {
      it('should call reposCreateForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test reposCreateForAuthenticatedUser
        //instance.reposCreateForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateFork', function() {
      it('should call reposCreateFork successfully', function(done) {
        //uncomment below and update the code to test reposCreateFork
        //instance.reposCreateFork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateInOrg', function() {
      it('should call reposCreateInOrg successfully', function(done) {
        //uncomment below and update the code to test reposCreateInOrg
        //instance.reposCreateInOrg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateOrUpdateEnvironment', function() {
      it('should call reposCreateOrUpdateEnvironment successfully', function(done) {
        //uncomment below and update the code to test reposCreateOrUpdateEnvironment
        //instance.reposCreateOrUpdateEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateOrUpdateFileContents', function() {
      it('should call reposCreateOrUpdateFileContents successfully', function(done) {
        //uncomment below and update the code to test reposCreateOrUpdateFileContents
        //instance.reposCreateOrUpdateFileContents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreatePagesSite', function() {
      it('should call reposCreatePagesSite successfully', function(done) {
        //uncomment below and update the code to test reposCreatePagesSite
        //instance.reposCreatePagesSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateRelease', function() {
      it('should call reposCreateRelease successfully', function(done) {
        //uncomment below and update the code to test reposCreateRelease
        //instance.reposCreateRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateUsingTemplate', function() {
      it('should call reposCreateUsingTemplate successfully', function(done) {
        //uncomment below and update the code to test reposCreateUsingTemplate
        //instance.reposCreateUsingTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposCreateWebhook', function() {
      it('should call reposCreateWebhook successfully', function(done) {
        //uncomment below and update the code to test reposCreateWebhook
        //instance.reposCreateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeclineInvitationForAuthenticatedUser', function() {
      it('should call reposDeclineInvitationForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test reposDeclineInvitationForAuthenticatedUser
        //instance.reposDeclineInvitationForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDelete', function() {
      it('should call reposDelete successfully', function(done) {
        //uncomment below and update the code to test reposDelete
        //instance.reposDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteAccessRestrictions', function() {
      it('should call reposDeleteAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposDeleteAccessRestrictions
        //instance.reposDeleteAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteAdminBranchProtection', function() {
      it('should call reposDeleteAdminBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposDeleteAdminBranchProtection
        //instance.reposDeleteAdminBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteAnEnvironment', function() {
      it('should call reposDeleteAnEnvironment successfully', function(done) {
        //uncomment below and update the code to test reposDeleteAnEnvironment
        //instance.reposDeleteAnEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteAutolink', function() {
      it('should call reposDeleteAutolink successfully', function(done) {
        //uncomment below and update the code to test reposDeleteAutolink
        //instance.reposDeleteAutolink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteBranchProtection', function() {
      it('should call reposDeleteBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposDeleteBranchProtection
        //instance.reposDeleteBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteCommitComment', function() {
      it('should call reposDeleteCommitComment successfully', function(done) {
        //uncomment below and update the code to test reposDeleteCommitComment
        //instance.reposDeleteCommitComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteCommitSignatureProtection', function() {
      it('should call reposDeleteCommitSignatureProtection successfully', function(done) {
        //uncomment below and update the code to test reposDeleteCommitSignatureProtection
        //instance.reposDeleteCommitSignatureProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteDeployKey', function() {
      it('should call reposDeleteDeployKey successfully', function(done) {
        //uncomment below and update the code to test reposDeleteDeployKey
        //instance.reposDeleteDeployKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteDeployment', function() {
      it('should call reposDeleteDeployment successfully', function(done) {
        //uncomment below and update the code to test reposDeleteDeployment
        //instance.reposDeleteDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteDeploymentBranchPolicy', function() {
      it('should call reposDeleteDeploymentBranchPolicy successfully', function(done) {
        //uncomment below and update the code to test reposDeleteDeploymentBranchPolicy
        //instance.reposDeleteDeploymentBranchPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteFile', function() {
      it('should call reposDeleteFile successfully', function(done) {
        //uncomment below and update the code to test reposDeleteFile
        //instance.reposDeleteFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteInvitation', function() {
      it('should call reposDeleteInvitation successfully', function(done) {
        //uncomment below and update the code to test reposDeleteInvitation
        //instance.reposDeleteInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeletePagesSite', function() {
      it('should call reposDeletePagesSite successfully', function(done) {
        //uncomment below and update the code to test reposDeletePagesSite
        //instance.reposDeletePagesSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeletePullRequestReviewProtection', function() {
      it('should call reposDeletePullRequestReviewProtection successfully', function(done) {
        //uncomment below and update the code to test reposDeletePullRequestReviewProtection
        //instance.reposDeletePullRequestReviewProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteRelease', function() {
      it('should call reposDeleteRelease successfully', function(done) {
        //uncomment below and update the code to test reposDeleteRelease
        //instance.reposDeleteRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteReleaseAsset', function() {
      it('should call reposDeleteReleaseAsset successfully', function(done) {
        //uncomment below and update the code to test reposDeleteReleaseAsset
        //instance.reposDeleteReleaseAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDeleteWebhook', function() {
      it('should call reposDeleteWebhook successfully', function(done) {
        //uncomment below and update the code to test reposDeleteWebhook
        //instance.reposDeleteWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDisableLfsForRepo', function() {
      it('should call reposDisableLfsForRepo successfully', function(done) {
        //uncomment below and update the code to test reposDisableLfsForRepo
        //instance.reposDisableLfsForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDownloadTarballArchive', function() {
      it('should call reposDownloadTarballArchive successfully', function(done) {
        //uncomment below and update the code to test reposDownloadTarballArchive
        //instance.reposDownloadTarballArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposDownloadZipballArchive', function() {
      it('should call reposDownloadZipballArchive successfully', function(done) {
        //uncomment below and update the code to test reposDownloadZipballArchive
        //instance.reposDownloadZipballArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposEnableLfsForRepo', function() {
      it('should call reposEnableLfsForRepo successfully', function(done) {
        //uncomment below and update the code to test reposEnableLfsForRepo
        //instance.reposEnableLfsForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGenerateReleaseNotes', function() {
      it('should call reposGenerateReleaseNotes successfully', function(done) {
        //uncomment below and update the code to test reposGenerateReleaseNotes
        //instance.reposGenerateReleaseNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGet', function() {
      it('should call reposGet successfully', function(done) {
        //uncomment below and update the code to test reposGet
        //instance.reposGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAccessRestrictions', function() {
      it('should call reposGetAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposGetAccessRestrictions
        //instance.reposGetAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAdminBranchProtection', function() {
      it('should call reposGetAdminBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposGetAdminBranchProtection
        //instance.reposGetAdminBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAllEnvironments', function() {
      it('should call reposGetAllEnvironments successfully', function(done) {
        //uncomment below and update the code to test reposGetAllEnvironments
        //instance.reposGetAllEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAllStatusCheckContexts', function() {
      it('should call reposGetAllStatusCheckContexts successfully', function(done) {
        //uncomment below and update the code to test reposGetAllStatusCheckContexts
        //instance.reposGetAllStatusCheckContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAllTopics', function() {
      it('should call reposGetAllTopics successfully', function(done) {
        //uncomment below and update the code to test reposGetAllTopics
        //instance.reposGetAllTopics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAppsWithAccessToProtectedBranch', function() {
      it('should call reposGetAppsWithAccessToProtectedBranch successfully', function(done) {
        //uncomment below and update the code to test reposGetAppsWithAccessToProtectedBranch
        //instance.reposGetAppsWithAccessToProtectedBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetAutolink', function() {
      it('should call reposGetAutolink successfully', function(done) {
        //uncomment below and update the code to test reposGetAutolink
        //instance.reposGetAutolink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetBranch', function() {
      it('should call reposGetBranch successfully', function(done) {
        //uncomment below and update the code to test reposGetBranch
        //instance.reposGetBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetBranchProtection', function() {
      it('should call reposGetBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposGetBranchProtection
        //instance.reposGetBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCodeFrequencyStats', function() {
      it('should call reposGetCodeFrequencyStats successfully', function(done) {
        //uncomment below and update the code to test reposGetCodeFrequencyStats
        //instance.reposGetCodeFrequencyStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCollaboratorPermissionLevel', function() {
      it('should call reposGetCollaboratorPermissionLevel successfully', function(done) {
        //uncomment below and update the code to test reposGetCollaboratorPermissionLevel
        //instance.reposGetCollaboratorPermissionLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCombinedStatusForRef', function() {
      it('should call reposGetCombinedStatusForRef successfully', function(done) {
        //uncomment below and update the code to test reposGetCombinedStatusForRef
        //instance.reposGetCombinedStatusForRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCommit', function() {
      it('should call reposGetCommit successfully', function(done) {
        //uncomment below and update the code to test reposGetCommit
        //instance.reposGetCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCommitActivityStats', function() {
      it('should call reposGetCommitActivityStats successfully', function(done) {
        //uncomment below and update the code to test reposGetCommitActivityStats
        //instance.reposGetCommitActivityStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCommitComment', function() {
      it('should call reposGetCommitComment successfully', function(done) {
        //uncomment below and update the code to test reposGetCommitComment
        //instance.reposGetCommitComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetCommitSignatureProtection', function() {
      it('should call reposGetCommitSignatureProtection successfully', function(done) {
        //uncomment below and update the code to test reposGetCommitSignatureProtection
        //instance.reposGetCommitSignatureProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetContent', function() {
      it('should call reposGetContent successfully', function(done) {
        //uncomment below and update the code to test reposGetContent
        //instance.reposGetContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetContributorsStats', function() {
      it('should call reposGetContributorsStats successfully', function(done) {
        //uncomment below and update the code to test reposGetContributorsStats
        //instance.reposGetContributorsStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetDeployKey', function() {
      it('should call reposGetDeployKey successfully', function(done) {
        //uncomment below and update the code to test reposGetDeployKey
        //instance.reposGetDeployKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetDeployment', function() {
      it('should call reposGetDeployment successfully', function(done) {
        //uncomment below and update the code to test reposGetDeployment
        //instance.reposGetDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetDeploymentBranchPolicy', function() {
      it('should call reposGetDeploymentBranchPolicy successfully', function(done) {
        //uncomment below and update the code to test reposGetDeploymentBranchPolicy
        //instance.reposGetDeploymentBranchPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetDeploymentStatus', function() {
      it('should call reposGetDeploymentStatus successfully', function(done) {
        //uncomment below and update the code to test reposGetDeploymentStatus
        //instance.reposGetDeploymentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetEnvironment', function() {
      it('should call reposGetEnvironment successfully', function(done) {
        //uncomment below and update the code to test reposGetEnvironment
        //instance.reposGetEnvironment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetLatestPagesBuild', function() {
      it('should call reposGetLatestPagesBuild successfully', function(done) {
        //uncomment below and update the code to test reposGetLatestPagesBuild
        //instance.reposGetLatestPagesBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetLatestRelease', function() {
      it('should call reposGetLatestRelease successfully', function(done) {
        //uncomment below and update the code to test reposGetLatestRelease
        //instance.reposGetLatestRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetPages', function() {
      it('should call reposGetPages successfully', function(done) {
        //uncomment below and update the code to test reposGetPages
        //instance.reposGetPages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetPagesBuild', function() {
      it('should call reposGetPagesBuild successfully', function(done) {
        //uncomment below and update the code to test reposGetPagesBuild
        //instance.reposGetPagesBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetParticipationStats', function() {
      it('should call reposGetParticipationStats successfully', function(done) {
        //uncomment below and update the code to test reposGetParticipationStats
        //instance.reposGetParticipationStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetPullRequestReviewProtection', function() {
      it('should call reposGetPullRequestReviewProtection successfully', function(done) {
        //uncomment below and update the code to test reposGetPullRequestReviewProtection
        //instance.reposGetPullRequestReviewProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetPunchCardStats', function() {
      it('should call reposGetPunchCardStats successfully', function(done) {
        //uncomment below and update the code to test reposGetPunchCardStats
        //instance.reposGetPunchCardStats(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetReadme', function() {
      it('should call reposGetReadme successfully', function(done) {
        //uncomment below and update the code to test reposGetReadme
        //instance.reposGetReadme(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetReadmeInDirectory', function() {
      it('should call reposGetReadmeInDirectory successfully', function(done) {
        //uncomment below and update the code to test reposGetReadmeInDirectory
        //instance.reposGetReadmeInDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetRelease', function() {
      it('should call reposGetRelease successfully', function(done) {
        //uncomment below and update the code to test reposGetRelease
        //instance.reposGetRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetReleaseAsset', function() {
      it('should call reposGetReleaseAsset successfully', function(done) {
        //uncomment below and update the code to test reposGetReleaseAsset
        //instance.reposGetReleaseAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetReleaseByTag', function() {
      it('should call reposGetReleaseByTag successfully', function(done) {
        //uncomment below and update the code to test reposGetReleaseByTag
        //instance.reposGetReleaseByTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetStatusChecksProtection', function() {
      it('should call reposGetStatusChecksProtection successfully', function(done) {
        //uncomment below and update the code to test reposGetStatusChecksProtection
        //instance.reposGetStatusChecksProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetTeamsWithAccessToProtectedBranch', function() {
      it('should call reposGetTeamsWithAccessToProtectedBranch successfully', function(done) {
        //uncomment below and update the code to test reposGetTeamsWithAccessToProtectedBranch
        //instance.reposGetTeamsWithAccessToProtectedBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetUsersWithAccessToProtectedBranch', function() {
      it('should call reposGetUsersWithAccessToProtectedBranch successfully', function(done) {
        //uncomment below and update the code to test reposGetUsersWithAccessToProtectedBranch
        //instance.reposGetUsersWithAccessToProtectedBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetWebhook', function() {
      it('should call reposGetWebhook successfully', function(done) {
        //uncomment below and update the code to test reposGetWebhook
        //instance.reposGetWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetWebhookConfigForRepo', function() {
      it('should call reposGetWebhookConfigForRepo successfully', function(done) {
        //uncomment below and update the code to test reposGetWebhookConfigForRepo
        //instance.reposGetWebhookConfigForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposGetWebhookDelivery', function() {
      it('should call reposGetWebhookDelivery successfully', function(done) {
        //uncomment below and update the code to test reposGetWebhookDelivery
        //instance.reposGetWebhookDelivery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListAutolinks', function() {
      it('should call reposListAutolinks successfully', function(done) {
        //uncomment below and update the code to test reposListAutolinks
        //instance.reposListAutolinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListBranches', function() {
      it('should call reposListBranches successfully', function(done) {
        //uncomment below and update the code to test reposListBranches
        //instance.reposListBranches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListBranchesForHeadCommit', function() {
      it('should call reposListBranchesForHeadCommit successfully', function(done) {
        //uncomment below and update the code to test reposListBranchesForHeadCommit
        //instance.reposListBranchesForHeadCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCacheInfo', function() {
      it('should call reposListCacheInfo successfully', function(done) {
        //uncomment below and update the code to test reposListCacheInfo
        //instance.reposListCacheInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCollaborators', function() {
      it('should call reposListCollaborators successfully', function(done) {
        //uncomment below and update the code to test reposListCollaborators
        //instance.reposListCollaborators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCommentsForCommit', function() {
      it('should call reposListCommentsForCommit successfully', function(done) {
        //uncomment below and update the code to test reposListCommentsForCommit
        //instance.reposListCommentsForCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCommitCommentsForRepo', function() {
      it('should call reposListCommitCommentsForRepo successfully', function(done) {
        //uncomment below and update the code to test reposListCommitCommentsForRepo
        //instance.reposListCommitCommentsForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCommitStatusesForRef', function() {
      it('should call reposListCommitStatusesForRef successfully', function(done) {
        //uncomment below and update the code to test reposListCommitStatusesForRef
        //instance.reposListCommitStatusesForRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListCommits', function() {
      it('should call reposListCommits successfully', function(done) {
        //uncomment below and update the code to test reposListCommits
        //instance.reposListCommits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListContributors', function() {
      it('should call reposListContributors successfully', function(done) {
        //uncomment below and update the code to test reposListContributors
        //instance.reposListContributors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListDeployKeys', function() {
      it('should call reposListDeployKeys successfully', function(done) {
        //uncomment below and update the code to test reposListDeployKeys
        //instance.reposListDeployKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListDeploymentBranchPolicies', function() {
      it('should call reposListDeploymentBranchPolicies successfully', function(done) {
        //uncomment below and update the code to test reposListDeploymentBranchPolicies
        //instance.reposListDeploymentBranchPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListDeploymentStatuses', function() {
      it('should call reposListDeploymentStatuses successfully', function(done) {
        //uncomment below and update the code to test reposListDeploymentStatuses
        //instance.reposListDeploymentStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListDeployments', function() {
      it('should call reposListDeployments successfully', function(done) {
        //uncomment below and update the code to test reposListDeployments
        //instance.reposListDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListForAuthenticatedUser', function() {
      it('should call reposListForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test reposListForAuthenticatedUser
        //instance.reposListForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListForOrg', function() {
      it('should call reposListForOrg successfully', function(done) {
        //uncomment below and update the code to test reposListForOrg
        //instance.reposListForOrg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListForUser', function() {
      it('should call reposListForUser successfully', function(done) {
        //uncomment below and update the code to test reposListForUser
        //instance.reposListForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListForks', function() {
      it('should call reposListForks successfully', function(done) {
        //uncomment below and update the code to test reposListForks
        //instance.reposListForks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListInvitations', function() {
      it('should call reposListInvitations successfully', function(done) {
        //uncomment below and update the code to test reposListInvitations
        //instance.reposListInvitations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListInvitationsForAuthenticatedUser', function() {
      it('should call reposListInvitationsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test reposListInvitationsForAuthenticatedUser
        //instance.reposListInvitationsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListLanguages', function() {
      it('should call reposListLanguages successfully', function(done) {
        //uncomment below and update the code to test reposListLanguages
        //instance.reposListLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListPagesBuilds', function() {
      it('should call reposListPagesBuilds successfully', function(done) {
        //uncomment below and update the code to test reposListPagesBuilds
        //instance.reposListPagesBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListPublic', function() {
      it('should call reposListPublic successfully', function(done) {
        //uncomment below and update the code to test reposListPublic
        //instance.reposListPublic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListPullRequestsAssociatedWithCommit', function() {
      it('should call reposListPullRequestsAssociatedWithCommit successfully', function(done) {
        //uncomment below and update the code to test reposListPullRequestsAssociatedWithCommit
        //instance.reposListPullRequestsAssociatedWithCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListReleaseAssets', function() {
      it('should call reposListReleaseAssets successfully', function(done) {
        //uncomment below and update the code to test reposListReleaseAssets
        //instance.reposListReleaseAssets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListReleases', function() {
      it('should call reposListReleases successfully', function(done) {
        //uncomment below and update the code to test reposListReleases
        //instance.reposListReleases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListTags', function() {
      it('should call reposListTags successfully', function(done) {
        //uncomment below and update the code to test reposListTags
        //instance.reposListTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListTeams', function() {
      it('should call reposListTeams successfully', function(done) {
        //uncomment below and update the code to test reposListTeams
        //instance.reposListTeams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListWebhookDeliveries', function() {
      it('should call reposListWebhookDeliveries successfully', function(done) {
        //uncomment below and update the code to test reposListWebhookDeliveries
        //instance.reposListWebhookDeliveries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposListWebhooks', function() {
      it('should call reposListWebhooks successfully', function(done) {
        //uncomment below and update the code to test reposListWebhooks
        //instance.reposListWebhooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposMerge', function() {
      it('should call reposMerge successfully', function(done) {
        //uncomment below and update the code to test reposMerge
        //instance.reposMerge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposMergeUpstream', function() {
      it('should call reposMergeUpstream successfully', function(done) {
        //uncomment below and update the code to test reposMergeUpstream
        //instance.reposMergeUpstream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposPingWebhook', function() {
      it('should call reposPingWebhook successfully', function(done) {
        //uncomment below and update the code to test reposPingWebhook
        //instance.reposPingWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRedeliverWebhookDelivery', function() {
      it('should call reposRedeliverWebhookDelivery successfully', function(done) {
        //uncomment below and update the code to test reposRedeliverWebhookDelivery
        //instance.reposRedeliverWebhookDelivery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveAppAccessRestrictions', function() {
      it('should call reposRemoveAppAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposRemoveAppAccessRestrictions
        //instance.reposRemoveAppAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveCollaborator', function() {
      it('should call reposRemoveCollaborator successfully', function(done) {
        //uncomment below and update the code to test reposRemoveCollaborator
        //instance.reposRemoveCollaborator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveStatusCheckContexts', function() {
      it('should call reposRemoveStatusCheckContexts successfully', function(done) {
        //uncomment below and update the code to test reposRemoveStatusCheckContexts
        //instance.reposRemoveStatusCheckContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveStatusCheckProtection', function() {
      it('should call reposRemoveStatusCheckProtection successfully', function(done) {
        //uncomment below and update the code to test reposRemoveStatusCheckProtection
        //instance.reposRemoveStatusCheckProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveTeamAccessRestrictions', function() {
      it('should call reposRemoveTeamAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposRemoveTeamAccessRestrictions
        //instance.reposRemoveTeamAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRemoveUserAccessRestrictions', function() {
      it('should call reposRemoveUserAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposRemoveUserAccessRestrictions
        //instance.reposRemoveUserAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRenameBranch', function() {
      it('should call reposRenameBranch successfully', function(done) {
        //uncomment below and update the code to test reposRenameBranch
        //instance.reposRenameBranch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposReplaceAllTopics', function() {
      it('should call reposReplaceAllTopics successfully', function(done) {
        //uncomment below and update the code to test reposReplaceAllTopics
        //instance.reposReplaceAllTopics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposRequestPagesBuild', function() {
      it('should call reposRequestPagesBuild successfully', function(done) {
        //uncomment below and update the code to test reposRequestPagesBuild
        //instance.reposRequestPagesBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposSetAdminBranchProtection', function() {
      it('should call reposSetAdminBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposSetAdminBranchProtection
        //instance.reposSetAdminBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposSetAppAccessRestrictions', function() {
      it('should call reposSetAppAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposSetAppAccessRestrictions
        //instance.reposSetAppAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposSetStatusCheckContexts', function() {
      it('should call reposSetStatusCheckContexts successfully', function(done) {
        //uncomment below and update the code to test reposSetStatusCheckContexts
        //instance.reposSetStatusCheckContexts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposSetTeamAccessRestrictions', function() {
      it('should call reposSetTeamAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposSetTeamAccessRestrictions
        //instance.reposSetTeamAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposSetUserAccessRestrictions', function() {
      it('should call reposSetUserAccessRestrictions successfully', function(done) {
        //uncomment below and update the code to test reposSetUserAccessRestrictions
        //instance.reposSetUserAccessRestrictions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposTestPushWebhook', function() {
      it('should call reposTestPushWebhook successfully', function(done) {
        //uncomment below and update the code to test reposTestPushWebhook
        //instance.reposTestPushWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposTransfer', function() {
      it('should call reposTransfer successfully', function(done) {
        //uncomment below and update the code to test reposTransfer
        //instance.reposTransfer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdate', function() {
      it('should call reposUpdate successfully', function(done) {
        //uncomment below and update the code to test reposUpdate
        //instance.reposUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateBranchProtection', function() {
      it('should call reposUpdateBranchProtection successfully', function(done) {
        //uncomment below and update the code to test reposUpdateBranchProtection
        //instance.reposUpdateBranchProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateCommitComment', function() {
      it('should call reposUpdateCommitComment successfully', function(done) {
        //uncomment below and update the code to test reposUpdateCommitComment
        //instance.reposUpdateCommitComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateDeploymentBranchPolicy', function() {
      it('should call reposUpdateDeploymentBranchPolicy successfully', function(done) {
        //uncomment below and update the code to test reposUpdateDeploymentBranchPolicy
        //instance.reposUpdateDeploymentBranchPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateInformationAboutPagesSite', function() {
      it('should call reposUpdateInformationAboutPagesSite successfully', function(done) {
        //uncomment below and update the code to test reposUpdateInformationAboutPagesSite
        //instance.reposUpdateInformationAboutPagesSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateInvitation', function() {
      it('should call reposUpdateInvitation successfully', function(done) {
        //uncomment below and update the code to test reposUpdateInvitation
        //instance.reposUpdateInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdatePullRequestReviewProtection', function() {
      it('should call reposUpdatePullRequestReviewProtection successfully', function(done) {
        //uncomment below and update the code to test reposUpdatePullRequestReviewProtection
        //instance.reposUpdatePullRequestReviewProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateRelease', function() {
      it('should call reposUpdateRelease successfully', function(done) {
        //uncomment below and update the code to test reposUpdateRelease
        //instance.reposUpdateRelease(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateReleaseAsset', function() {
      it('should call reposUpdateReleaseAsset successfully', function(done) {
        //uncomment below and update the code to test reposUpdateReleaseAsset
        //instance.reposUpdateReleaseAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateStatusCheckProtection', function() {
      it('should call reposUpdateStatusCheckProtection successfully', function(done) {
        //uncomment below and update the code to test reposUpdateStatusCheckProtection
        //instance.reposUpdateStatusCheckProtection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateWebhook', function() {
      it('should call reposUpdateWebhook successfully', function(done) {
        //uncomment below and update the code to test reposUpdateWebhook
        //instance.reposUpdateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUpdateWebhookConfigForRepo', function() {
      it('should call reposUpdateWebhookConfigForRepo successfully', function(done) {
        //uncomment below and update the code to test reposUpdateWebhookConfigForRepo
        //instance.reposUpdateWebhookConfigForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reposUploadReleaseAsset', function() {
      it('should call reposUploadReleaseAsset successfully', function(done) {
        //uncomment below and update the code to test reposUploadReleaseAsset
        //instance.reposUploadReleaseAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
