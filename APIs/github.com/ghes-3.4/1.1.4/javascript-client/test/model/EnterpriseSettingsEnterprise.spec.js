/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EnterpriseSettingsEnterprise', function() {
    it('should create an instance of EnterpriseSettingsEnterprise', function() {
      // uncomment below and update the code to test EnterpriseSettingsEnterprise
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be.a(GitHubV3RestApi.EnterpriseSettingsEnterprise);
    });

    it('should have the property adminPassword (base name: "admin_password")', function() {
      // uncomment below and update the code to test the property adminPassword
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property assets (base name: "assets")', function() {
      // uncomment below and update the code to test the property assets
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property authMode (base name: "auth_mode")', function() {
      // uncomment below and update the code to test the property authMode
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property avatar (base name: "avatar")', function() {
      // uncomment below and update the code to test the property avatar
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property cas (base name: "cas")', function() {
      // uncomment below and update the code to test the property cas
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property collectd (base name: "collectd")', function() {
      // uncomment below and update the code to test the property collectd
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property configurationId (base name: "configuration_id")', function() {
      // uncomment below and update the code to test the property configurationId
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property configurationRunCount (base name: "configuration_run_count")', function() {
      // uncomment below and update the code to test the property configurationRunCount
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property expireSessions (base name: "expire_sessions")', function() {
      // uncomment below and update the code to test the property expireSessions
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property githubHostname (base name: "github_hostname")', function() {
      // uncomment below and update the code to test the property githubHostname
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property githubOauth (base name: "github_oauth")', function() {
      // uncomment below and update the code to test the property githubOauth
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property githubSsl (base name: "github_ssl")', function() {
      // uncomment below and update the code to test the property githubSsl
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property httpProxy (base name: "http_proxy")', function() {
      // uncomment below and update the code to test the property httpProxy
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property identiconsHost (base name: "identicons_host")', function() {
      // uncomment below and update the code to test the property identiconsHost
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property ldap (base name: "ldap")', function() {
      // uncomment below and update the code to test the property ldap
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "load_balancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property mapping (base name: "mapping")', function() {
      // uncomment below and update the code to test the property mapping
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property ntp (base name: "ntp")', function() {
      // uncomment below and update the code to test the property ntp
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property pages (base name: "pages")', function() {
      // uncomment below and update the code to test the property pages
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property privateMode (base name: "private_mode")', function() {
      // uncomment below and update the code to test the property privateMode
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property publicPages (base name: "public_pages")', function() {
      // uncomment below and update the code to test the property publicPages
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property saml (base name: "saml")', function() {
      // uncomment below and update the code to test the property saml
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property signupEnabled (base name: "signup_enabled")', function() {
      // uncomment below and update the code to test the property signupEnabled
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property smtp (base name: "smtp")', function() {
      // uncomment below and update the code to test the property smtp
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property snmp (base name: "snmp")', function() {
      // uncomment below and update the code to test the property snmp
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property subdomainIsolation (base name: "subdomain_isolation")', function() {
      // uncomment below and update the code to test the property subdomainIsolation
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property syslog (base name: "syslog")', function() {
      // uncomment below and update the code to test the property syslog
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new GitHubV3RestApi.EnterpriseSettingsEnterprise();
      //expect(instance).to.be();
    });

  });

}));
