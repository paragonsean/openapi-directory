/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrations_start_for_authenticated_user_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrations_start_for_authenticated_user_request::OAIMigrations_start_for_authenticated_user_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrations_start_for_authenticated_user_request::OAIMigrations_start_for_authenticated_user_request() {
    this->initializeModel();
}

OAIMigrations_start_for_authenticated_user_request::~OAIMigrations_start_for_authenticated_user_request() {}

void OAIMigrations_start_for_authenticated_user_request::initializeModel() {

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_exclude_attachments_isSet = false;
    m_exclude_attachments_isValid = false;

    m_exclude_git_data_isSet = false;
    m_exclude_git_data_isValid = false;

    m_exclude_metadata_isSet = false;
    m_exclude_metadata_isValid = false;

    m_exclude_owner_projects_isSet = false;
    m_exclude_owner_projects_isValid = false;

    m_exclude_releases_isSet = false;
    m_exclude_releases_isValid = false;

    m_lock_repositories_isSet = false;
    m_lock_repositories_isValid = false;

    m_org_metadata_only_isSet = false;
    m_org_metadata_only_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;
}

void OAIMigrations_start_for_authenticated_user_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrations_start_for_authenticated_user_request::fromJsonObject(QJsonObject json) {

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("exclude")]);
    m_exclude_isSet = !json[QString("exclude")].isNull() && m_exclude_isValid;

    m_exclude_attachments_isValid = ::OpenAPI::fromJsonValue(m_exclude_attachments, json[QString("exclude_attachments")]);
    m_exclude_attachments_isSet = !json[QString("exclude_attachments")].isNull() && m_exclude_attachments_isValid;

    m_exclude_git_data_isValid = ::OpenAPI::fromJsonValue(m_exclude_git_data, json[QString("exclude_git_data")]);
    m_exclude_git_data_isSet = !json[QString("exclude_git_data")].isNull() && m_exclude_git_data_isValid;

    m_exclude_metadata_isValid = ::OpenAPI::fromJsonValue(m_exclude_metadata, json[QString("exclude_metadata")]);
    m_exclude_metadata_isSet = !json[QString("exclude_metadata")].isNull() && m_exclude_metadata_isValid;

    m_exclude_owner_projects_isValid = ::OpenAPI::fromJsonValue(m_exclude_owner_projects, json[QString("exclude_owner_projects")]);
    m_exclude_owner_projects_isSet = !json[QString("exclude_owner_projects")].isNull() && m_exclude_owner_projects_isValid;

    m_exclude_releases_isValid = ::OpenAPI::fromJsonValue(m_exclude_releases, json[QString("exclude_releases")]);
    m_exclude_releases_isSet = !json[QString("exclude_releases")].isNull() && m_exclude_releases_isValid;

    m_lock_repositories_isValid = ::OpenAPI::fromJsonValue(m_lock_repositories, json[QString("lock_repositories")]);
    m_lock_repositories_isSet = !json[QString("lock_repositories")].isNull() && m_lock_repositories_isValid;

    m_org_metadata_only_isValid = ::OpenAPI::fromJsonValue(m_org_metadata_only, json[QString("org_metadata_only")]);
    m_org_metadata_only_isSet = !json[QString("org_metadata_only")].isNull() && m_org_metadata_only_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;
}

QString OAIMigrations_start_for_authenticated_user_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrations_start_for_authenticated_user_request::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude.size() > 0) {
        obj.insert(QString("exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    if (m_exclude_attachments_isSet) {
        obj.insert(QString("exclude_attachments"), ::OpenAPI::toJsonValue(m_exclude_attachments));
    }
    if (m_exclude_git_data_isSet) {
        obj.insert(QString("exclude_git_data"), ::OpenAPI::toJsonValue(m_exclude_git_data));
    }
    if (m_exclude_metadata_isSet) {
        obj.insert(QString("exclude_metadata"), ::OpenAPI::toJsonValue(m_exclude_metadata));
    }
    if (m_exclude_owner_projects_isSet) {
        obj.insert(QString("exclude_owner_projects"), ::OpenAPI::toJsonValue(m_exclude_owner_projects));
    }
    if (m_exclude_releases_isSet) {
        obj.insert(QString("exclude_releases"), ::OpenAPI::toJsonValue(m_exclude_releases));
    }
    if (m_lock_repositories_isSet) {
        obj.insert(QString("lock_repositories"), ::OpenAPI::toJsonValue(m_lock_repositories));
    }
    if (m_org_metadata_only_isSet) {
        obj.insert(QString("org_metadata_only"), ::OpenAPI::toJsonValue(m_org_metadata_only));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    return obj;
}

QList<QString> OAIMigrations_start_for_authenticated_user_request::getExclude() const {
    return m_exclude;
}
void OAIMigrations_start_for_authenticated_user_request::setExclude(const QList<QString> &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_Valid() const{
    return m_exclude_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isExcludeAttachments() const {
    return m_exclude_attachments;
}
void OAIMigrations_start_for_authenticated_user_request::setExcludeAttachments(const bool &exclude_attachments) {
    m_exclude_attachments = exclude_attachments;
    m_exclude_attachments_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_attachments_Set() const{
    return m_exclude_attachments_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_attachments_Valid() const{
    return m_exclude_attachments_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isExcludeGitData() const {
    return m_exclude_git_data;
}
void OAIMigrations_start_for_authenticated_user_request::setExcludeGitData(const bool &exclude_git_data) {
    m_exclude_git_data = exclude_git_data;
    m_exclude_git_data_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_git_data_Set() const{
    return m_exclude_git_data_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_git_data_Valid() const{
    return m_exclude_git_data_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isExcludeMetadata() const {
    return m_exclude_metadata;
}
void OAIMigrations_start_for_authenticated_user_request::setExcludeMetadata(const bool &exclude_metadata) {
    m_exclude_metadata = exclude_metadata;
    m_exclude_metadata_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_metadata_Set() const{
    return m_exclude_metadata_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_metadata_Valid() const{
    return m_exclude_metadata_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isExcludeOwnerProjects() const {
    return m_exclude_owner_projects;
}
void OAIMigrations_start_for_authenticated_user_request::setExcludeOwnerProjects(const bool &exclude_owner_projects) {
    m_exclude_owner_projects = exclude_owner_projects;
    m_exclude_owner_projects_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_owner_projects_Set() const{
    return m_exclude_owner_projects_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_owner_projects_Valid() const{
    return m_exclude_owner_projects_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isExcludeReleases() const {
    return m_exclude_releases;
}
void OAIMigrations_start_for_authenticated_user_request::setExcludeReleases(const bool &exclude_releases) {
    m_exclude_releases = exclude_releases;
    m_exclude_releases_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_releases_Set() const{
    return m_exclude_releases_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_exclude_releases_Valid() const{
    return m_exclude_releases_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isLockRepositories() const {
    return m_lock_repositories;
}
void OAIMigrations_start_for_authenticated_user_request::setLockRepositories(const bool &lock_repositories) {
    m_lock_repositories = lock_repositories;
    m_lock_repositories_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_lock_repositories_Set() const{
    return m_lock_repositories_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_lock_repositories_Valid() const{
    return m_lock_repositories_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isOrgMetadataOnly() const {
    return m_org_metadata_only;
}
void OAIMigrations_start_for_authenticated_user_request::setOrgMetadataOnly(const bool &org_metadata_only) {
    m_org_metadata_only = org_metadata_only;
    m_org_metadata_only_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_org_metadata_only_Set() const{
    return m_org_metadata_only_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_org_metadata_only_Valid() const{
    return m_org_metadata_only_isValid;
}

QList<QString> OAIMigrations_start_for_authenticated_user_request::getRepositories() const {
    return m_repositories;
}
void OAIMigrations_start_for_authenticated_user_request::setRepositories(const QList<QString> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIMigrations_start_for_authenticated_user_request::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIMigrations_start_for_authenticated_user_request::is_repositories_Valid() const{
    return m_repositories_isValid;
}

bool OAIMigrations_start_for_authenticated_user_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_git_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_owner_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_metadata_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrations_start_for_authenticated_user_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repositories_isValid && true;
}

} // namespace OpenAPI
