/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_alert_instance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_alert_instance::OAICode_scanning_alert_instance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_alert_instance::OAICode_scanning_alert_instance() {
    this->initializeModel();
}

OAICode_scanning_alert_instance::~OAICode_scanning_alert_instance() {}

void OAICode_scanning_alert_instance::initializeModel() {

    m_analysis_key_isSet = false;
    m_analysis_key_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_classifications_isSet = false;
    m_classifications_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICode_scanning_alert_instance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_alert_instance::fromJsonObject(QJsonObject json) {

    m_analysis_key_isValid = ::OpenAPI::fromJsonValue(m_analysis_key, json[QString("analysis_key")]);
    m_analysis_key_isSet = !json[QString("analysis_key")].isNull() && m_analysis_key_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_classifications_isValid = ::OpenAPI::fromJsonValue(m_classifications, json[QString("classifications")]);
    m_classifications_isSet = !json[QString("classifications")].isNull() && m_classifications_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commit_sha")]);
    m_commit_sha_isSet = !json[QString("commit_sha")].isNull() && m_commit_sha_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICode_scanning_alert_instance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_alert_instance::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_key_isSet) {
        obj.insert(QString("analysis_key"), ::OpenAPI::toJsonValue(m_analysis_key));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_classifications.size() > 0) {
        obj.insert(QString("classifications"), ::OpenAPI::toJsonValue(m_classifications));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commit_sha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICode_scanning_alert_instance::getAnalysisKey() const {
    return m_analysis_key;
}
void OAICode_scanning_alert_instance::setAnalysisKey(const QString &analysis_key) {
    m_analysis_key = analysis_key;
    m_analysis_key_isSet = true;
}

bool OAICode_scanning_alert_instance::is_analysis_key_Set() const{
    return m_analysis_key_isSet;
}

bool OAICode_scanning_alert_instance::is_analysis_key_Valid() const{
    return m_analysis_key_isValid;
}

QString OAICode_scanning_alert_instance::getCategory() const {
    return m_category;
}
void OAICode_scanning_alert_instance::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAICode_scanning_alert_instance::is_category_Set() const{
    return m_category_isSet;
}

bool OAICode_scanning_alert_instance::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAICode_scanning_alert_classification> OAICode_scanning_alert_instance::getClassifications() const {
    return m_classifications;
}
void OAICode_scanning_alert_instance::setClassifications(const QList<OAICode_scanning_alert_classification> &classifications) {
    m_classifications = classifications;
    m_classifications_isSet = true;
}

bool OAICode_scanning_alert_instance::is_classifications_Set() const{
    return m_classifications_isSet;
}

bool OAICode_scanning_alert_instance::is_classifications_Valid() const{
    return m_classifications_isValid;
}

QString OAICode_scanning_alert_instance::getCommitSha() const {
    return m_commit_sha;
}
void OAICode_scanning_alert_instance::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAICode_scanning_alert_instance::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAICode_scanning_alert_instance::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QString OAICode_scanning_alert_instance::getEnvironment() const {
    return m_environment;
}
void OAICode_scanning_alert_instance::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAICode_scanning_alert_instance::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAICode_scanning_alert_instance::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAICode_scanning_alert_instance::getHtmlUrl() const {
    return m_html_url;
}
void OAICode_scanning_alert_instance::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICode_scanning_alert_instance::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICode_scanning_alert_instance::is_html_url_Valid() const{
    return m_html_url_isValid;
}

OAICode_scanning_alert_location OAICode_scanning_alert_instance::getLocation() const {
    return m_location;
}
void OAICode_scanning_alert_instance::setLocation(const OAICode_scanning_alert_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICode_scanning_alert_instance::is_location_Set() const{
    return m_location_isSet;
}

bool OAICode_scanning_alert_instance::is_location_Valid() const{
    return m_location_isValid;
}

OAICode_scanning_alert_instance_message OAICode_scanning_alert_instance::getMessage() const {
    return m_message;
}
void OAICode_scanning_alert_instance::setMessage(const OAICode_scanning_alert_instance_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICode_scanning_alert_instance::is_message_Set() const{
    return m_message_isSet;
}

bool OAICode_scanning_alert_instance::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICode_scanning_alert_instance::getRef() const {
    return m_ref;
}
void OAICode_scanning_alert_instance::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAICode_scanning_alert_instance::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAICode_scanning_alert_instance::is_ref_Valid() const{
    return m_ref_isValid;
}

OAICode_scanning_alert_state OAICode_scanning_alert_instance::getState() const {
    return m_state;
}
void OAICode_scanning_alert_instance::setState(const OAICode_scanning_alert_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICode_scanning_alert_instance::is_state_Set() const{
    return m_state_isSet;
}

bool OAICode_scanning_alert_instance::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICode_scanning_alert_instance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_alert_instance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
