/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDependabotApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDependabotApi::OAIDependabotApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDependabotApi::~OAIDependabotApi() {
}

void OAIDependabotApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://github.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}/api/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("dependabot_addSelectedRepoToOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_addSelectedRepoToOrgSecret", 0);
    _serverConfigs.insert("dependabot_createOrUpdateOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_createOrUpdateOrgSecret", 0);
    _serverConfigs.insert("dependabot_createOrUpdateRepoSecret", defaultConf);
    _serverIndices.insert("dependabot_createOrUpdateRepoSecret", 0);
    _serverConfigs.insert("dependabot_deleteOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_deleteOrgSecret", 0);
    _serverConfigs.insert("dependabot_deleteRepoSecret", defaultConf);
    _serverIndices.insert("dependabot_deleteRepoSecret", 0);
    _serverConfigs.insert("dependabot_getOrgPublicKey", defaultConf);
    _serverIndices.insert("dependabot_getOrgPublicKey", 0);
    _serverConfigs.insert("dependabot_getOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_getOrgSecret", 0);
    _serverConfigs.insert("dependabot_getRepoPublicKey", defaultConf);
    _serverIndices.insert("dependabot_getRepoPublicKey", 0);
    _serverConfigs.insert("dependabot_getRepoSecret", defaultConf);
    _serverIndices.insert("dependabot_getRepoSecret", 0);
    _serverConfigs.insert("dependabot_listOrgSecrets", defaultConf);
    _serverIndices.insert("dependabot_listOrgSecrets", 0);
    _serverConfigs.insert("dependabot_listRepoSecrets", defaultConf);
    _serverIndices.insert("dependabot_listRepoSecrets", 0);
    _serverConfigs.insert("dependabot_listSelectedReposForOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_listSelectedReposForOrgSecret", 0);
    _serverConfigs.insert("dependabot_removeSelectedRepoFromOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_removeSelectedRepoFromOrgSecret", 0);
    _serverConfigs.insert("dependabot_setSelectedReposForOrgSecret", defaultConf);
    _serverIndices.insert("dependabot_setSelectedReposForOrgSecret", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDependabotApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDependabotApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDependabotApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDependabotApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDependabotApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDependabotApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDependabotApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDependabotApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDependabotApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDependabotApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDependabotApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDependabotApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDependabotApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDependabotApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDependabotApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDependabotApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDependabotApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDependabotApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDependabotApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDependabotApi::dependabot_addSelectedRepoToOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id) {
    QString fullPath = QString(_serverConfigs["dependabot_addSelectedRepoToOrgSecret"][_serverIndices.value("dependabot_addSelectedRepoToOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    
    {
        QString repository_idPathParam("{");
        repository_idPathParam.append("repository_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repository_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repository_id"+pathSuffix : pathPrefix;
        fullPath.replace(repository_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repository_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_addSelectedRepoToOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_addSelectedRepoToOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignal();
        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignalE(error_type, error_str);
        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignalError(error_type, error_str);
        Q_EMIT dependabot_addSelectedRepoToOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_createOrUpdateOrgSecret(const QString &org, const QString &secret_name, const OAIDependabot_create_or_update_org_secret_request &oai_dependabot_create_or_update_org_secret_request) {
    QString fullPath = QString(_serverConfigs["dependabot_createOrUpdateOrgSecret"][_serverIndices.value("dependabot_createOrUpdateOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_dependabot_create_or_update_org_secret_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_createOrUpdateOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_createOrUpdateOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_createOrUpdateOrgSecretSignal(output);
        Q_EMIT dependabot_createOrUpdateOrgSecretSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_createOrUpdateOrgSecretSignalE(output, error_type, error_str);
        Q_EMIT dependabot_createOrUpdateOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_createOrUpdateOrgSecretSignalError(output, error_type, error_str);
        Q_EMIT dependabot_createOrUpdateOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_createOrUpdateRepoSecret(const QString &owner, const QString &repo, const QString &secret_name, const OAIDependabot_create_or_update_repo_secret_request &oai_dependabot_create_or_update_repo_secret_request) {
    QString fullPath = QString(_serverConfigs["dependabot_createOrUpdateRepoSecret"][_serverIndices.value("dependabot_createOrUpdateRepoSecret")].URL()+"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_dependabot_create_or_update_repo_secret_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_createOrUpdateRepoSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_createOrUpdateRepoSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_createOrUpdateRepoSecretSignal(output);
        Q_EMIT dependabot_createOrUpdateRepoSecretSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_createOrUpdateRepoSecretSignalE(output, error_type, error_str);
        Q_EMIT dependabot_createOrUpdateRepoSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_createOrUpdateRepoSecretSignalError(output, error_type, error_str);
        Q_EMIT dependabot_createOrUpdateRepoSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_deleteOrgSecret(const QString &org, const QString &secret_name) {
    QString fullPath = QString(_serverConfigs["dependabot_deleteOrgSecret"][_serverIndices.value("dependabot_deleteOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_deleteOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_deleteOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_deleteOrgSecretSignal();
        Q_EMIT dependabot_deleteOrgSecretSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_deleteOrgSecretSignalE(error_type, error_str);
        Q_EMIT dependabot_deleteOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_deleteOrgSecretSignalError(error_type, error_str);
        Q_EMIT dependabot_deleteOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_deleteRepoSecret(const QString &owner, const QString &repo, const QString &secret_name) {
    QString fullPath = QString(_serverConfigs["dependabot_deleteRepoSecret"][_serverIndices.value("dependabot_deleteRepoSecret")].URL()+"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_deleteRepoSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_deleteRepoSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_deleteRepoSecretSignal();
        Q_EMIT dependabot_deleteRepoSecretSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_deleteRepoSecretSignalE(error_type, error_str);
        Q_EMIT dependabot_deleteRepoSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_deleteRepoSecretSignalError(error_type, error_str);
        Q_EMIT dependabot_deleteRepoSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_getOrgPublicKey(const QString &org) {
    QString fullPath = QString(_serverConfigs["dependabot_getOrgPublicKey"][_serverIndices.value("dependabot_getOrgPublicKey")].URL()+"/orgs/{org}/dependabot/secrets/public-key");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_getOrgPublicKeyCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_getOrgPublicKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDependabot_public_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_getOrgPublicKeySignal(output);
        Q_EMIT dependabot_getOrgPublicKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_getOrgPublicKeySignalE(output, error_type, error_str);
        Q_EMIT dependabot_getOrgPublicKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_getOrgPublicKeySignalError(output, error_type, error_str);
        Q_EMIT dependabot_getOrgPublicKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_getOrgSecret(const QString &org, const QString &secret_name) {
    QString fullPath = QString(_serverConfigs["dependabot_getOrgSecret"][_serverIndices.value("dependabot_getOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_getOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_getOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrganization_dependabot_secret output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_getOrgSecretSignal(output);
        Q_EMIT dependabot_getOrgSecretSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_getOrgSecretSignalE(output, error_type, error_str);
        Q_EMIT dependabot_getOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_getOrgSecretSignalError(output, error_type, error_str);
        Q_EMIT dependabot_getOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_getRepoPublicKey(const QString &owner, const QString &repo) {
    QString fullPath = QString(_serverConfigs["dependabot_getRepoPublicKey"][_serverIndices.value("dependabot_getRepoPublicKey")].URL()+"/repos/{owner}/{repo}/dependabot/secrets/public-key");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_getRepoPublicKeyCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_getRepoPublicKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDependabot_public_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_getRepoPublicKeySignal(output);
        Q_EMIT dependabot_getRepoPublicKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_getRepoPublicKeySignalE(output, error_type, error_str);
        Q_EMIT dependabot_getRepoPublicKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_getRepoPublicKeySignalError(output, error_type, error_str);
        Q_EMIT dependabot_getRepoPublicKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_getRepoSecret(const QString &owner, const QString &repo, const QString &secret_name) {
    QString fullPath = QString(_serverConfigs["dependabot_getRepoSecret"][_serverIndices.value("dependabot_getRepoSecret")].URL()+"/repos/{owner}/{repo}/dependabot/secrets/{secret_name}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_getRepoSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_getRepoSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDependabot_secret output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_getRepoSecretSignal(output);
        Q_EMIT dependabot_getRepoSecretSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_getRepoSecretSignalE(output, error_type, error_str);
        Q_EMIT dependabot_getRepoSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_getRepoSecretSignalError(output, error_type, error_str);
        Q_EMIT dependabot_getRepoSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_listOrgSecrets(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["dependabot_listOrgSecrets"][_serverIndices.value("dependabot_listOrgSecrets")].URL()+"/orgs/{org}/dependabot/secrets");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_listOrgSecretsCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_listOrgSecretsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDependabot_list_org_secrets_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_listOrgSecretsSignal(output);
        Q_EMIT dependabot_listOrgSecretsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_listOrgSecretsSignalE(output, error_type, error_str);
        Q_EMIT dependabot_listOrgSecretsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_listOrgSecretsSignalError(output, error_type, error_str);
        Q_EMIT dependabot_listOrgSecretsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_listRepoSecrets(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["dependabot_listRepoSecrets"][_serverIndices.value("dependabot_listRepoSecrets")].URL()+"/repos/{owner}/{repo}/dependabot/secrets");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_listRepoSecretsCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_listRepoSecretsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDependabot_list_repo_secrets_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_listRepoSecretsSignal(output);
        Q_EMIT dependabot_listRepoSecretsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_listRepoSecretsSignalE(output, error_type, error_str);
        Q_EMIT dependabot_listRepoSecretsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_listRepoSecretsSignalError(output, error_type, error_str);
        Q_EMIT dependabot_listRepoSecretsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_listSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &per_page) {
    QString fullPath = QString(_serverConfigs["dependabot_listSelectedReposForOrgSecret"][_serverIndices.value("dependabot_listSelectedReposForOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}/repositories");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_listSelectedReposForOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_listSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIActions_list_selected_repos_for_org_secret_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_listSelectedReposForOrgSecretSignal(output);
        Q_EMIT dependabot_listSelectedReposForOrgSecretSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_listSelectedReposForOrgSecretSignalE(output, error_type, error_str);
        Q_EMIT dependabot_listSelectedReposForOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_listSelectedReposForOrgSecretSignalError(output, error_type, error_str);
        Q_EMIT dependabot_listSelectedReposForOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_removeSelectedRepoFromOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id) {
    QString fullPath = QString(_serverConfigs["dependabot_removeSelectedRepoFromOrgSecret"][_serverIndices.value("dependabot_removeSelectedRepoFromOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    
    {
        QString repository_idPathParam("{");
        repository_idPathParam.append("repository_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repository_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repository_id"+pathSuffix : pathPrefix;
        fullPath.replace(repository_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repository_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_removeSelectedRepoFromOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_removeSelectedRepoFromOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignal();
        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignalE(error_type, error_str);
        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignalError(error_type, error_str);
        Q_EMIT dependabot_removeSelectedRepoFromOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::dependabot_setSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const OAIDependabot_set_selected_repos_for_org_secret_request &oai_dependabot_set_selected_repos_for_org_secret_request) {
    QString fullPath = QString(_serverConfigs["dependabot_setSelectedReposForOrgSecret"][_serverIndices.value("dependabot_setSelectedReposForOrgSecret")].URL()+"/orgs/{org}/dependabot/secrets/{secret_name}/repositories");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString secret_namePathParam("{");
        secret_namePathParam.append("secret_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "secret_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"secret_name"+pathSuffix : pathPrefix;
        fullPath.replace(secret_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(secret_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_dependabot_set_selected_repos_for_org_secret_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDependabotApi::dependabot_setSelectedReposForOrgSecretCallback);
    connect(this, &OAIDependabotApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDependabotApi::dependabot_setSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT dependabot_setSelectedReposForOrgSecretSignal();
        Q_EMIT dependabot_setSelectedReposForOrgSecretSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT dependabot_setSelectedReposForOrgSecretSignalE(error_type, error_str);
        Q_EMIT dependabot_setSelectedReposForOrgSecretSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT dependabot_setSelectedReposForOrgSecretSignalError(error_type, error_str);
        Q_EMIT dependabot_setSelectedReposForOrgSecretSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDependabotApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
