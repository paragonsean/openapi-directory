/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrg_membership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrg_membership::OAIOrg_membership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrg_membership::OAIOrg_membership() {
    this->initializeModel();
}

OAIOrg_membership::~OAIOrg_membership() {}

void OAIOrg_membership::initializeModel() {

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_organization_url_isSet = false;
    m_organization_url_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOrg_membership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrg_membership::fromJsonObject(QJsonObject json) {

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_organization_url_isValid = ::OpenAPI::fromJsonValue(m_organization_url, json[QString("organization_url")]);
    m_organization_url_isSet = !json[QString("organization_url")].isNull() && m_organization_url_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOrg_membership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrg_membership::asJsonObject() const {
    QJsonObject obj;
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_organization_url_isSet) {
        obj.insert(QString("organization_url"), ::OpenAPI::toJsonValue(m_organization_url));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIOrganization_simple OAIOrg_membership::getOrganization() const {
    return m_organization;
}
void OAIOrg_membership::setOrganization(const OAIOrganization_simple &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIOrg_membership::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIOrg_membership::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIOrg_membership::getOrganizationUrl() const {
    return m_organization_url;
}
void OAIOrg_membership::setOrganizationUrl(const QString &organization_url) {
    m_organization_url = organization_url;
    m_organization_url_isSet = true;
}

bool OAIOrg_membership::is_organization_url_Set() const{
    return m_organization_url_isSet;
}

bool OAIOrg_membership::is_organization_url_Valid() const{
    return m_organization_url_isValid;
}

OAIOrg_membership_permissions OAIOrg_membership::getPermissions() const {
    return m_permissions;
}
void OAIOrg_membership::setPermissions(const OAIOrg_membership_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIOrg_membership::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIOrg_membership::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIOrg_membership::getRole() const {
    return m_role;
}
void OAIOrg_membership::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIOrg_membership::is_role_Set() const{
    return m_role_isSet;
}

bool OAIOrg_membership::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIOrg_membership::getState() const {
    return m_state;
}
void OAIOrg_membership::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIOrg_membership::is_state_Set() const{
    return m_state_isSet;
}

bool OAIOrg_membership::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIOrg_membership::getUrl() const {
    return m_url;
}
void OAIOrg_membership::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIOrg_membership::is_url_Set() const{
    return m_url_isSet;
}

bool OAIOrg_membership::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIOrg_membership::getUser() const {
    return m_user;
}
void OAIOrg_membership::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOrg_membership::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOrg_membership::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOrg_membership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrg_membership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_isValid && m_organization_url_isValid && m_role_isValid && m_state_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
