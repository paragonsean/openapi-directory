/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigration::OAIMigration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigration::OAIMigration() {
    this->initializeModel();
}

OAIMigration::~OAIMigration() {}

void OAIMigration::initializeModel() {

    m_archive_url_isSet = false;
    m_archive_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_exclude_attachments_isSet = false;
    m_exclude_attachments_isValid = false;

    m_exclude_git_data_isSet = false;
    m_exclude_git_data_isValid = false;

    m_exclude_metadata_isSet = false;
    m_exclude_metadata_isValid = false;

    m_exclude_owner_projects_isSet = false;
    m_exclude_owner_projects_isValid = false;

    m_exclude_releases_isSet = false;
    m_exclude_releases_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lock_repositories_isSet = false;
    m_lock_repositories_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_org_metadata_only_isSet = false;
    m_org_metadata_only_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMigration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigration::fromJsonObject(QJsonObject json) {

    m_archive_url_isValid = ::OpenAPI::fromJsonValue(m_archive_url, json[QString("archive_url")]);
    m_archive_url_isSet = !json[QString("archive_url")].isNull() && m_archive_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("exclude")]);
    m_exclude_isSet = !json[QString("exclude")].isNull() && m_exclude_isValid;

    m_exclude_attachments_isValid = ::OpenAPI::fromJsonValue(m_exclude_attachments, json[QString("exclude_attachments")]);
    m_exclude_attachments_isSet = !json[QString("exclude_attachments")].isNull() && m_exclude_attachments_isValid;

    m_exclude_git_data_isValid = ::OpenAPI::fromJsonValue(m_exclude_git_data, json[QString("exclude_git_data")]);
    m_exclude_git_data_isSet = !json[QString("exclude_git_data")].isNull() && m_exclude_git_data_isValid;

    m_exclude_metadata_isValid = ::OpenAPI::fromJsonValue(m_exclude_metadata, json[QString("exclude_metadata")]);
    m_exclude_metadata_isSet = !json[QString("exclude_metadata")].isNull() && m_exclude_metadata_isValid;

    m_exclude_owner_projects_isValid = ::OpenAPI::fromJsonValue(m_exclude_owner_projects, json[QString("exclude_owner_projects")]);
    m_exclude_owner_projects_isSet = !json[QString("exclude_owner_projects")].isNull() && m_exclude_owner_projects_isValid;

    m_exclude_releases_isValid = ::OpenAPI::fromJsonValue(m_exclude_releases, json[QString("exclude_releases")]);
    m_exclude_releases_isSet = !json[QString("exclude_releases")].isNull() && m_exclude_releases_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lock_repositories_isValid = ::OpenAPI::fromJsonValue(m_lock_repositories, json[QString("lock_repositories")]);
    m_lock_repositories_isSet = !json[QString("lock_repositories")].isNull() && m_lock_repositories_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_org_metadata_only_isValid = ::OpenAPI::fromJsonValue(m_org_metadata_only, json[QString("org_metadata_only")]);
    m_org_metadata_only_isSet = !json[QString("org_metadata_only")].isNull() && m_org_metadata_only_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMigration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigration::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_url_isSet) {
        obj.insert(QString("archive_url"), ::OpenAPI::toJsonValue(m_archive_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_exclude.size() > 0) {
        obj.insert(QString("exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    if (m_exclude_attachments_isSet) {
        obj.insert(QString("exclude_attachments"), ::OpenAPI::toJsonValue(m_exclude_attachments));
    }
    if (m_exclude_git_data_isSet) {
        obj.insert(QString("exclude_git_data"), ::OpenAPI::toJsonValue(m_exclude_git_data));
    }
    if (m_exclude_metadata_isSet) {
        obj.insert(QString("exclude_metadata"), ::OpenAPI::toJsonValue(m_exclude_metadata));
    }
    if (m_exclude_owner_projects_isSet) {
        obj.insert(QString("exclude_owner_projects"), ::OpenAPI::toJsonValue(m_exclude_owner_projects));
    }
    if (m_exclude_releases_isSet) {
        obj.insert(QString("exclude_releases"), ::OpenAPI::toJsonValue(m_exclude_releases));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lock_repositories_isSet) {
        obj.insert(QString("lock_repositories"), ::OpenAPI::toJsonValue(m_lock_repositories));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_org_metadata_only_isSet) {
        obj.insert(QString("org_metadata_only"), ::OpenAPI::toJsonValue(m_org_metadata_only));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMigration::getArchiveUrl() const {
    return m_archive_url;
}
void OAIMigration::setArchiveUrl(const QString &archive_url) {
    m_archive_url = archive_url;
    m_archive_url_isSet = true;
}

bool OAIMigration::is_archive_url_Set() const{
    return m_archive_url_isSet;
}

bool OAIMigration::is_archive_url_Valid() const{
    return m_archive_url_isValid;
}

QDateTime OAIMigration::getCreatedAt() const {
    return m_created_at;
}
void OAIMigration::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMigration::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMigration::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QJsonValue> OAIMigration::getExclude() const {
    return m_exclude;
}
void OAIMigration::setExclude(const QList<QJsonValue> &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIMigration::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIMigration::is_exclude_Valid() const{
    return m_exclude_isValid;
}

bool OAIMigration::isExcludeAttachments() const {
    return m_exclude_attachments;
}
void OAIMigration::setExcludeAttachments(const bool &exclude_attachments) {
    m_exclude_attachments = exclude_attachments;
    m_exclude_attachments_isSet = true;
}

bool OAIMigration::is_exclude_attachments_Set() const{
    return m_exclude_attachments_isSet;
}

bool OAIMigration::is_exclude_attachments_Valid() const{
    return m_exclude_attachments_isValid;
}

bool OAIMigration::isExcludeGitData() const {
    return m_exclude_git_data;
}
void OAIMigration::setExcludeGitData(const bool &exclude_git_data) {
    m_exclude_git_data = exclude_git_data;
    m_exclude_git_data_isSet = true;
}

bool OAIMigration::is_exclude_git_data_Set() const{
    return m_exclude_git_data_isSet;
}

bool OAIMigration::is_exclude_git_data_Valid() const{
    return m_exclude_git_data_isValid;
}

bool OAIMigration::isExcludeMetadata() const {
    return m_exclude_metadata;
}
void OAIMigration::setExcludeMetadata(const bool &exclude_metadata) {
    m_exclude_metadata = exclude_metadata;
    m_exclude_metadata_isSet = true;
}

bool OAIMigration::is_exclude_metadata_Set() const{
    return m_exclude_metadata_isSet;
}

bool OAIMigration::is_exclude_metadata_Valid() const{
    return m_exclude_metadata_isValid;
}

bool OAIMigration::isExcludeOwnerProjects() const {
    return m_exclude_owner_projects;
}
void OAIMigration::setExcludeOwnerProjects(const bool &exclude_owner_projects) {
    m_exclude_owner_projects = exclude_owner_projects;
    m_exclude_owner_projects_isSet = true;
}

bool OAIMigration::is_exclude_owner_projects_Set() const{
    return m_exclude_owner_projects_isSet;
}

bool OAIMigration::is_exclude_owner_projects_Valid() const{
    return m_exclude_owner_projects_isValid;
}

bool OAIMigration::isExcludeReleases() const {
    return m_exclude_releases;
}
void OAIMigration::setExcludeReleases(const bool &exclude_releases) {
    m_exclude_releases = exclude_releases;
    m_exclude_releases_isSet = true;
}

bool OAIMigration::is_exclude_releases_Set() const{
    return m_exclude_releases_isSet;
}

bool OAIMigration::is_exclude_releases_Valid() const{
    return m_exclude_releases_isValid;
}

QString OAIMigration::getGuid() const {
    return m_guid;
}
void OAIMigration::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIMigration::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIMigration::is_guid_Valid() const{
    return m_guid_isValid;
}

qint32 OAIMigration::getId() const {
    return m_id;
}
void OAIMigration::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMigration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMigration::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMigration::isLockRepositories() const {
    return m_lock_repositories;
}
void OAIMigration::setLockRepositories(const bool &lock_repositories) {
    m_lock_repositories = lock_repositories;
    m_lock_repositories_isSet = true;
}

bool OAIMigration::is_lock_repositories_Set() const{
    return m_lock_repositories_isSet;
}

bool OAIMigration::is_lock_repositories_Valid() const{
    return m_lock_repositories_isValid;
}

QString OAIMigration::getNodeId() const {
    return m_node_id;
}
void OAIMigration::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIMigration::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIMigration::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAIMigration::isOrgMetadataOnly() const {
    return m_org_metadata_only;
}
void OAIMigration::setOrgMetadataOnly(const bool &org_metadata_only) {
    m_org_metadata_only = org_metadata_only;
    m_org_metadata_only_isSet = true;
}

bool OAIMigration::is_org_metadata_only_Set() const{
    return m_org_metadata_only_isSet;
}

bool OAIMigration::is_org_metadata_only_Valid() const{
    return m_org_metadata_only_isValid;
}

OAINullable_simple_user OAIMigration::getOwner() const {
    return m_owner;
}
void OAIMigration::setOwner(const OAINullable_simple_user &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIMigration::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIMigration::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAIRepository> OAIMigration::getRepositories() const {
    return m_repositories;
}
void OAIMigration::setRepositories(const QList<OAIRepository> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIMigration::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIMigration::is_repositories_Valid() const{
    return m_repositories_isValid;
}

QString OAIMigration::getState() const {
    return m_state;
}
void OAIMigration::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMigration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMigration::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIMigration::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMigration::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMigration::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMigration::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIMigration::getUrl() const {
    return m_url;
}
void OAIMigration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMigration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMigration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMigration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_git_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_owner_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_releases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_metadata_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_exclude_attachments_isValid && m_exclude_git_data_isValid && m_exclude_metadata_isValid && m_exclude_owner_projects_isValid && m_exclude_releases_isValid && m_guid_isValid && m_id_isValid && m_lock_repositories_isValid && m_node_id_isValid && m_org_metadata_only_isValid && m_owner_isValid && m_repositories_isValid && m_state_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
