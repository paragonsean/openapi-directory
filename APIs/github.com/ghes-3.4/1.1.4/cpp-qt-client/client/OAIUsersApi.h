/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIEmail.h"
#include "OAIGpg_key.h"
#include "OAIHovercard.h"
#include "OAIKey.h"
#include "OAIKey_simple.h"
#include "OAIPrivate_user.h"
#include "OAISimple_user.h"
#include "OAIUsers_add_email_for_authenticated_user_request.h"
#include "OAIUsers_create_gpg_key_for_authenticated_user_request.h"
#include "OAIUsers_create_public_ssh_key_for_authenticated_user_request.h"
#include "OAIUsers_delete_email_for_authenticated_user_request.h"
#include "OAIUsers_get_authenticated_200_response.h"
#include "OAIUsers_update_authenticated_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_users_add_email_for_authenticated_user_request OAIUsers_add_email_for_authenticated_user_request [optional]
    */
    virtual void users_addEmailForAuthenticatedUser(const ::OpenAPI::OptionalParam<OAIUsers_add_email_for_authenticated_user_request> &oai_users_add_email_for_authenticated_user_request = ::OpenAPI::OptionalParam<OAIUsers_add_email_for_authenticated_user_request>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  target_user QString [required]
    */
    virtual void users_checkFollowingForUser(const QString &username, const QString &target_user);

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_checkPersonIsFollowedByAuthenticated(const QString &username);

    /**
    * @param[in]  oai_users_create_gpg_key_for_authenticated_user_request OAIUsers_create_gpg_key_for_authenticated_user_request [required]
    */
    virtual void users_createGpgKeyForAuthenticatedUser(const OAIUsers_create_gpg_key_for_authenticated_user_request &oai_users_create_gpg_key_for_authenticated_user_request);

    /**
    * @param[in]  oai_users_create_public_ssh_key_for_authenticated_user_request OAIUsers_create_public_ssh_key_for_authenticated_user_request [required]
    */
    virtual void users_createPublicSshKeyForAuthenticatedUser(const OAIUsers_create_public_ssh_key_for_authenticated_user_request &oai_users_create_public_ssh_key_for_authenticated_user_request);

    /**
    * @param[in]  oai_users_delete_email_for_authenticated_user_request OAIUsers_delete_email_for_authenticated_user_request [optional]
    */
    virtual void users_deleteEmailForAuthenticatedUser(const ::OpenAPI::OptionalParam<OAIUsers_delete_email_for_authenticated_user_request> &oai_users_delete_email_for_authenticated_user_request = ::OpenAPI::OptionalParam<OAIUsers_delete_email_for_authenticated_user_request>());

    /**
    * @param[in]  gpg_key_id qint32 [required]
    */
    virtual void users_deleteGpgKeyForAuthenticatedUser(const qint32 &gpg_key_id);

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void users_deletePublicSshKeyForAuthenticatedUser(const qint32 &key_id);

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_follow(const QString &username);


    virtual void users_getAuthenticated();

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_getByUsername(const QString &username);

    /**
    * @param[in]  username QString [required]
    * @param[in]  subject_type QString [optional]
    * @param[in]  subject_id QString [optional]
    */
    virtual void users_getContextForUser(const QString &username, const ::OpenAPI::OptionalParam<QString> &subject_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gpg_key_id qint32 [required]
    */
    virtual void users_getGpgKeyForAuthenticatedUser(const qint32 &gpg_key_id);

    /**
    * @param[in]  key_id qint32 [required]
    */
    virtual void users_getPublicSshKeyForAuthenticatedUser(const qint32 &key_id);

    /**
    * @param[in]  since qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void users_list(const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listEmailsForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowedByAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowersForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowersForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listFollowingForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listGpgKeysForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listGpgKeysForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicEmailsForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicKeysForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void users_listPublicSshKeysForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void users_unfollow(const QString &username);

    /**
    * @param[in]  oai_users_update_authenticated_request OAIUsers_update_authenticated_request [optional]
    */
    virtual void users_updateAuthenticated(const ::OpenAPI::OptionalParam<OAIUsers_update_authenticated_request> &oai_users_update_authenticated_request = ::OpenAPI::OptionalParam<OAIUsers_update_authenticated_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void users_addEmailForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_checkFollowingForUserCallback(OAIHttpRequestWorker *worker);
    void users_checkPersonIsFollowedByAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_createGpgKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_createPublicSshKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_deleteEmailForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_deleteGpgKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_deletePublicSshKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_followCallback(OAIHttpRequestWorker *worker);
    void users_getAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void users_getByUsernameCallback(OAIHttpRequestWorker *worker);
    void users_getContextForUserCallback(OAIHttpRequestWorker *worker);
    void users_getGpgKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_getPublicSshKeyForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listCallback(OAIHttpRequestWorker *worker);
    void users_listEmailsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowedByAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowersForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowersForUserCallback(OAIHttpRequestWorker *worker);
    void users_listFollowingForUserCallback(OAIHttpRequestWorker *worker);
    void users_listGpgKeysForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listGpgKeysForUserCallback(OAIHttpRequestWorker *worker);
    void users_listPublicEmailsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_listPublicKeysForUserCallback(OAIHttpRequestWorker *worker);
    void users_listPublicSshKeysForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void users_unfollowCallback(OAIHttpRequestWorker *worker);
    void users_updateAuthenticatedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void users_addEmailForAuthenticatedUserSignal(QList<OAIEmail> summary);
    void users_checkFollowingForUserSignal();
    void users_checkPersonIsFollowedByAuthenticatedSignal();
    void users_createGpgKeyForAuthenticatedUserSignal(OAIGpg_key summary);
    void users_createPublicSshKeyForAuthenticatedUserSignal(OAIKey summary);
    void users_deleteEmailForAuthenticatedUserSignal();
    void users_deleteGpgKeyForAuthenticatedUserSignal();
    void users_deletePublicSshKeyForAuthenticatedUserSignal();
    void users_followSignal();
    void users_getAuthenticatedSignal(OAIUsers_get_authenticated_200_response summary);
    void users_getByUsernameSignal(OAIUsers_get_authenticated_200_response summary);
    void users_getContextForUserSignal(OAIHovercard summary);
    void users_getGpgKeyForAuthenticatedUserSignal(OAIGpg_key summary);
    void users_getPublicSshKeyForAuthenticatedUserSignal(OAIKey summary);
    void users_listSignal(QList<OAISimple_user> summary);
    void users_listEmailsForAuthenticatedUserSignal(QList<OAIEmail> summary);
    void users_listFollowedByAuthenticatedUserSignal(QList<OAISimple_user> summary);
    void users_listFollowersForAuthenticatedUserSignal(QList<OAISimple_user> summary);
    void users_listFollowersForUserSignal(QList<OAISimple_user> summary);
    void users_listFollowingForUserSignal(QList<OAISimple_user> summary);
    void users_listGpgKeysForAuthenticatedUserSignal(QList<OAIGpg_key> summary);
    void users_listGpgKeysForUserSignal(QList<OAIGpg_key> summary);
    void users_listPublicEmailsForAuthenticatedUserSignal(QList<OAIEmail> summary);
    void users_listPublicKeysForUserSignal(QList<OAIKey_simple> summary);
    void users_listPublicSshKeysForAuthenticatedUserSignal(QList<OAIKey> summary);
    void users_unfollowSignal();
    void users_updateAuthenticatedSignal(OAIPrivate_user summary);


    void users_addEmailForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_checkFollowingForUserSignalFull(OAIHttpRequestWorker *worker);
    void users_checkPersonIsFollowedByAuthenticatedSignalFull(OAIHttpRequestWorker *worker);
    void users_createGpgKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIGpg_key summary);
    void users_createPublicSshKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void users_deleteEmailForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void users_deleteGpgKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void users_deletePublicSshKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void users_followSignalFull(OAIHttpRequestWorker *worker);
    void users_getAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIUsers_get_authenticated_200_response summary);
    void users_getByUsernameSignalFull(OAIHttpRequestWorker *worker, OAIUsers_get_authenticated_200_response summary);
    void users_getContextForUserSignalFull(OAIHttpRequestWorker *worker, OAIHovercard summary);
    void users_getGpgKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIGpg_key summary);
    void users_getPublicSshKeyForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void users_listSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listEmailsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_listFollowedByAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowersForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowersForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listFollowingForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void users_listGpgKeysForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIGpg_key> summary);
    void users_listGpgKeysForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIGpg_key> summary);
    void users_listPublicEmailsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEmail> summary);
    void users_listPublicKeysForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey_simple> summary);
    void users_listPublicSshKeysForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void users_unfollowSignalFull(OAIHttpRequestWorker *worker);
    void users_updateAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIPrivate_user summary);

    Q_DECL_DEPRECATED_X("Use users_addEmailForAuthenticatedUserSignalError() instead")
    void users_addEmailForAuthenticatedUserSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_addEmailForAuthenticatedUserSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkFollowingForUserSignalError() instead")
    void users_checkFollowingForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkFollowingForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkPersonIsFollowedByAuthenticatedSignalError() instead")
    void users_checkPersonIsFollowedByAuthenticatedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkPersonIsFollowedByAuthenticatedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createGpgKeyForAuthenticatedUserSignalError() instead")
    void users_createGpgKeyForAuthenticatedUserSignalE(OAIGpg_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createGpgKeyForAuthenticatedUserSignalError(OAIGpg_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createPublicSshKeyForAuthenticatedUserSignalError() instead")
    void users_createPublicSshKeyForAuthenticatedUserSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createPublicSshKeyForAuthenticatedUserSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteEmailForAuthenticatedUserSignalError() instead")
    void users_deleteEmailForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteEmailForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteGpgKeyForAuthenticatedUserSignalError() instead")
    void users_deleteGpgKeyForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteGpgKeyForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deletePublicSshKeyForAuthenticatedUserSignalError() instead")
    void users_deletePublicSshKeyForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_deletePublicSshKeyForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_followSignalError() instead")
    void users_followSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_followSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getAuthenticatedSignalError() instead")
    void users_getAuthenticatedSignalE(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getAuthenticatedSignalError(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getByUsernameSignalError() instead")
    void users_getByUsernameSignalE(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getByUsernameSignalError(OAIUsers_get_authenticated_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getContextForUserSignalError() instead")
    void users_getContextForUserSignalE(OAIHovercard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getContextForUserSignalError(OAIHovercard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getGpgKeyForAuthenticatedUserSignalError() instead")
    void users_getGpgKeyForAuthenticatedUserSignalE(OAIGpg_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getGpgKeyForAuthenticatedUserSignalError(OAIGpg_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getPublicSshKeyForAuthenticatedUserSignalError() instead")
    void users_getPublicSshKeyForAuthenticatedUserSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getPublicSshKeyForAuthenticatedUserSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listSignalError() instead")
    void users_listSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listEmailsForAuthenticatedUserSignalError() instead")
    void users_listEmailsForAuthenticatedUserSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listEmailsForAuthenticatedUserSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowedByAuthenticatedUserSignalError() instead")
    void users_listFollowedByAuthenticatedUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowedByAuthenticatedUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForAuthenticatedUserSignalError() instead")
    void users_listFollowersForAuthenticatedUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForAuthenticatedUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForUserSignalError() instead")
    void users_listFollowersForUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowingForUserSignalError() instead")
    void users_listFollowingForUserSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowingForUserSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForAuthenticatedUserSignalError() instead")
    void users_listGpgKeysForAuthenticatedUserSignalE(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForAuthenticatedUserSignalError(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForUserSignalError() instead")
    void users_listGpgKeysForUserSignalE(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForUserSignalError(QList<OAIGpg_key> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicEmailsForAuthenticatedUserSignalError() instead")
    void users_listPublicEmailsForAuthenticatedUserSignalE(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicEmailsForAuthenticatedUserSignalError(QList<OAIEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicKeysForUserSignalError() instead")
    void users_listPublicKeysForUserSignalE(QList<OAIKey_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicKeysForUserSignalError(QList<OAIKey_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicSshKeysForAuthenticatedUserSignalError() instead")
    void users_listPublicSshKeysForAuthenticatedUserSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicSshKeysForAuthenticatedUserSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_unfollowSignalError() instead")
    void users_unfollowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void users_unfollowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_updateAuthenticatedSignalError() instead")
    void users_updateAuthenticatedSignalE(OAIPrivate_user summary, QNetworkReply::NetworkError error_type, QString error_str);
    void users_updateAuthenticatedSignalError(OAIPrivate_user summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use users_addEmailForAuthenticatedUserSignalErrorFull() instead")
    void users_addEmailForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_addEmailForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkFollowingForUserSignalErrorFull() instead")
    void users_checkFollowingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkFollowingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_checkPersonIsFollowedByAuthenticatedSignalErrorFull() instead")
    void users_checkPersonIsFollowedByAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_checkPersonIsFollowedByAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createGpgKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_createGpgKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createGpgKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_createPublicSshKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_createPublicSshKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_createPublicSshKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteEmailForAuthenticatedUserSignalErrorFull() instead")
    void users_deleteEmailForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteEmailForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deleteGpgKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_deleteGpgKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deleteGpgKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_deletePublicSshKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_deletePublicSshKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_deletePublicSshKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_followSignalErrorFull() instead")
    void users_followSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_followSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getAuthenticatedSignalErrorFull() instead")
    void users_getAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getByUsernameSignalErrorFull() instead")
    void users_getByUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getByUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getContextForUserSignalErrorFull() instead")
    void users_getContextForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getContextForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getGpgKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_getGpgKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getGpgKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_getPublicSshKeyForAuthenticatedUserSignalErrorFull() instead")
    void users_getPublicSshKeyForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_getPublicSshKeyForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listSignalErrorFull() instead")
    void users_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listEmailsForAuthenticatedUserSignalErrorFull() instead")
    void users_listEmailsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listEmailsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowedByAuthenticatedUserSignalErrorFull() instead")
    void users_listFollowedByAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowedByAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForAuthenticatedUserSignalErrorFull() instead")
    void users_listFollowersForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowersForUserSignalErrorFull() instead")
    void users_listFollowersForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowersForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listFollowingForUserSignalErrorFull() instead")
    void users_listFollowingForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listFollowingForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForAuthenticatedUserSignalErrorFull() instead")
    void users_listGpgKeysForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listGpgKeysForUserSignalErrorFull() instead")
    void users_listGpgKeysForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listGpgKeysForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicEmailsForAuthenticatedUserSignalErrorFull() instead")
    void users_listPublicEmailsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicEmailsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicKeysForUserSignalErrorFull() instead")
    void users_listPublicKeysForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicKeysForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_listPublicSshKeysForAuthenticatedUserSignalErrorFull() instead")
    void users_listPublicSshKeysForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_listPublicSshKeysForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_unfollowSignalErrorFull() instead")
    void users_unfollowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_unfollowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use users_updateAuthenticatedSignalErrorFull() instead")
    void users_updateAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void users_updateAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
