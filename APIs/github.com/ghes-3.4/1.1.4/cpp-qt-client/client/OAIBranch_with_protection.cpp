/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_with_protection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_with_protection::OAIBranch_with_protection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_with_protection::OAIBranch_with_protection() {
    this->initializeModel();
}

OAIBranch_with_protection::~OAIBranch_with_protection() {}

void OAIBranch_with_protection::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_r_protected_isSet = false;
    m_r_protected_isValid = false;

    m_protection_isSet = false;
    m_protection_isValid = false;

    m_protection_url_isSet = false;
    m_protection_url_isValid = false;

    m_required_approving_review_count_isSet = false;
    m_required_approving_review_count_isValid = false;
}

void OAIBranch_with_protection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_with_protection::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_r_protected_isValid = ::OpenAPI::fromJsonValue(m_r_protected, json[QString("protected")]);
    m_r_protected_isSet = !json[QString("protected")].isNull() && m_r_protected_isValid;

    m_protection_isValid = ::OpenAPI::fromJsonValue(m_protection, json[QString("protection")]);
    m_protection_isSet = !json[QString("protection")].isNull() && m_protection_isValid;

    m_protection_url_isValid = ::OpenAPI::fromJsonValue(m_protection_url, json[QString("protection_url")]);
    m_protection_url_isSet = !json[QString("protection_url")].isNull() && m_protection_url_isValid;

    m_required_approving_review_count_isValid = ::OpenAPI::fromJsonValue(m_required_approving_review_count, json[QString("required_approving_review_count")]);
    m_required_approving_review_count_isSet = !json[QString("required_approving_review_count")].isNull() && m_required_approving_review_count_isValid;
}

QString OAIBranch_with_protection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_with_protection::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_r_protected_isSet) {
        obj.insert(QString("protected"), ::OpenAPI::toJsonValue(m_r_protected));
    }
    if (m_protection.isSet()) {
        obj.insert(QString("protection"), ::OpenAPI::toJsonValue(m_protection));
    }
    if (m_protection_url_isSet) {
        obj.insert(QString("protection_url"), ::OpenAPI::toJsonValue(m_protection_url));
    }
    if (m_required_approving_review_count_isSet) {
        obj.insert(QString("required_approving_review_count"), ::OpenAPI::toJsonValue(m_required_approving_review_count));
    }
    return obj;
}

OAIBranch_with_protection__links OAIBranch_with_protection::getLinks() const {
    return m__links;
}
void OAIBranch_with_protection::setLinks(const OAIBranch_with_protection__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIBranch_with_protection::is__links_Set() const{
    return m__links_isSet;
}

bool OAIBranch_with_protection::is__links_Valid() const{
    return m__links_isValid;
}

OAICommit OAIBranch_with_protection::getCommit() const {
    return m_commit;
}
void OAIBranch_with_protection::setCommit(const OAICommit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIBranch_with_protection::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIBranch_with_protection::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIBranch_with_protection::getName() const {
    return m_name;
}
void OAIBranch_with_protection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBranch_with_protection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBranch_with_protection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBranch_with_protection::getPattern() const {
    return m_pattern;
}
void OAIBranch_with_protection::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAIBranch_with_protection::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAIBranch_with_protection::is_pattern_Valid() const{
    return m_pattern_isValid;
}

bool OAIBranch_with_protection::isRProtected() const {
    return m_r_protected;
}
void OAIBranch_with_protection::setRProtected(const bool &r_protected) {
    m_r_protected = r_protected;
    m_r_protected_isSet = true;
}

bool OAIBranch_with_protection::is_r_protected_Set() const{
    return m_r_protected_isSet;
}

bool OAIBranch_with_protection::is_r_protected_Valid() const{
    return m_r_protected_isValid;
}

OAIBranch_protection OAIBranch_with_protection::getProtection() const {
    return m_protection;
}
void OAIBranch_with_protection::setProtection(const OAIBranch_protection &protection) {
    m_protection = protection;
    m_protection_isSet = true;
}

bool OAIBranch_with_protection::is_protection_Set() const{
    return m_protection_isSet;
}

bool OAIBranch_with_protection::is_protection_Valid() const{
    return m_protection_isValid;
}

QString OAIBranch_with_protection::getProtectionUrl() const {
    return m_protection_url;
}
void OAIBranch_with_protection::setProtectionUrl(const QString &protection_url) {
    m_protection_url = protection_url;
    m_protection_url_isSet = true;
}

bool OAIBranch_with_protection::is_protection_url_Set() const{
    return m_protection_url_isSet;
}

bool OAIBranch_with_protection::is_protection_url_Valid() const{
    return m_protection_url_isValid;
}

qint32 OAIBranch_with_protection::getRequiredApprovingReviewCount() const {
    return m_required_approving_review_count;
}
void OAIBranch_with_protection::setRequiredApprovingReviewCount(const qint32 &required_approving_review_count) {
    m_required_approving_review_count = required_approving_review_count;
    m_required_approving_review_count_isSet = true;
}

bool OAIBranch_with_protection::is_required_approving_review_count_Set() const{
    return m_required_approving_review_count_isSet;
}

bool OAIBranch_with_protection::is_required_approving_review_count_Valid() const{
    return m_required_approving_review_count_isValid;
}

bool OAIBranch_with_protection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_approving_review_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_with_protection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_commit_isValid && m_name_isValid && m_r_protected_isValid && m_protection_isValid && m_protection_url_isValid && true;
}

} // namespace OpenAPI
