/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_check_token_request.h"
#include "OAIApps_create_from_manifest_201_response.h"
#include "OAIApps_create_installation_access_token_request.h"
#include "OAIApps_delete_authorization_request.h"
#include "OAIApps_list_installation_repos_for_authenticated_user_200_response.h"
#include "OAIApps_list_repos_accessible_to_installation_200_response.h"
#include "OAIApps_scope_token_request.h"
#include "OAIApps_update_webhook_config_for_app_request.h"
#include "OAIAuthorization.h"
#include "OAIBasic_error.h"
#include "OAIHook_delivery.h"
#include "OAIHook_delivery_item.h"
#include "OAIInstallation.h"
#include "OAIInstallation_token.h"
#include "OAIIntegration.h"
#include "OAIObject.h"
#include "OAIOrgs_list_app_installations_200_response.h"
#include "OAIScim_error.h"
#include "OAIValidation_error.h"
#include "OAIValidation_error_simple.h"
#include "OAIWebhook_config.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void apps_addRepoToInstallationForAuthenticatedUser(const qint32 &installation_id, const qint32 &repository_id);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_apps_check_token_request OAIApps_check_token_request [required]
    */
    virtual void apps_checkToken(const QString &client_id, const OAIApps_check_token_request &oai_apps_check_token_request);

    /**
    * @param[in]  code QString [required]
    */
    virtual void apps_createFromManifest(const QString &code);

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  oai_apps_create_installation_access_token_request OAIApps_create_installation_access_token_request [optional]
    */
    virtual void apps_createInstallationAccessToken(const qint32 &installation_id, const ::OpenAPI::OptionalParam<OAIApps_create_installation_access_token_request> &oai_apps_create_installation_access_token_request = ::OpenAPI::OptionalParam<OAIApps_create_installation_access_token_request>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_apps_delete_authorization_request OAIApps_delete_authorization_request [required]
    */
    virtual void apps_deleteAuthorization(const QString &client_id, const OAIApps_delete_authorization_request &oai_apps_delete_authorization_request);

    /**
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_deleteInstallation(const qint32 &installation_id);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_apps_delete_authorization_request OAIApps_delete_authorization_request [required]
    */
    virtual void apps_deleteToken(const QString &client_id, const OAIApps_delete_authorization_request &oai_apps_delete_authorization_request);


    virtual void apps_getAuthenticated();

    /**
    * @param[in]  app_slug QString [required]
    */
    virtual void apps_getBySlug(const QString &app_slug);

    /**
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_getInstallation(const qint32 &installation_id);

    /**
    * @param[in]  org QString [required]
    */
    virtual void apps_getOrgInstallation(const QString &org);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void apps_getRepoInstallation(const QString &owner, const QString &repo);

    /**
    * @param[in]  username QString [required]
    */
    virtual void apps_getUserInstallation(const QString &username);


    virtual void apps_getWebhookConfigForApp();

    /**
    * @param[in]  delivery_id qint32 [required]
    */
    virtual void apps_getWebhookDelivery(const qint32 &delivery_id);

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listInstallationReposForAuthenticatedUser(const qint32 &installation_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  outdated QString [optional]
    */
    virtual void apps_listInstallations(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &outdated = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listInstallationsForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listReposAccessibleToInstallation(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  redelivery bool [optional]
    */
    virtual void apps_listWebhookDeliveries(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &redelivery = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  delivery_id qint32 [required]
    */
    virtual void apps_redeliverWebhookDelivery(const qint32 &delivery_id);

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void apps_removeRepoFromInstallationForAuthenticatedUser(const qint32 &installation_id, const qint32 &repository_id);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_apps_check_token_request OAIApps_check_token_request [required]
    */
    virtual void apps_resetToken(const QString &client_id, const OAIApps_check_token_request &oai_apps_check_token_request);


    virtual void apps_revokeInstallationAccessToken();

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_apps_scope_token_request OAIApps_scope_token_request [required]
    */
    virtual void apps_scopeToken(const QString &client_id, const OAIApps_scope_token_request &oai_apps_scope_token_request);

    /**
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_suspendInstallation(const qint32 &installation_id);

    /**
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_unsuspendInstallation(const qint32 &installation_id);

    /**
    * @param[in]  oai_apps_update_webhook_config_for_app_request OAIApps_update_webhook_config_for_app_request [required]
    */
    virtual void apps_updateWebhookConfigForApp(const OAIApps_update_webhook_config_for_app_request &oai_apps_update_webhook_config_for_app_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apps_addRepoToInstallationForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_checkTokenCallback(OAIHttpRequestWorker *worker);
    void apps_createFromManifestCallback(OAIHttpRequestWorker *worker);
    void apps_createInstallationAccessTokenCallback(OAIHttpRequestWorker *worker);
    void apps_deleteAuthorizationCallback(OAIHttpRequestWorker *worker);
    void apps_deleteInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_deleteTokenCallback(OAIHttpRequestWorker *worker);
    void apps_getAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void apps_getBySlugCallback(OAIHttpRequestWorker *worker);
    void apps_getInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getOrgInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getRepoInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getUserInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getWebhookConfigForAppCallback(OAIHttpRequestWorker *worker);
    void apps_getWebhookDeliveryCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationReposForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationsCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_listReposAccessibleToInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_listWebhookDeliveriesCallback(OAIHttpRequestWorker *worker);
    void apps_redeliverWebhookDeliveryCallback(OAIHttpRequestWorker *worker);
    void apps_removeRepoFromInstallationForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_resetTokenCallback(OAIHttpRequestWorker *worker);
    void apps_revokeInstallationAccessTokenCallback(OAIHttpRequestWorker *worker);
    void apps_scopeTokenCallback(OAIHttpRequestWorker *worker);
    void apps_suspendInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_unsuspendInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_updateWebhookConfigForAppCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apps_addRepoToInstallationForAuthenticatedUserSignal();
    void apps_checkTokenSignal(OAIAuthorization summary);
    void apps_createFromManifestSignal(OAIApps_create_from_manifest_201_response summary);
    void apps_createInstallationAccessTokenSignal(OAIInstallation_token summary);
    void apps_deleteAuthorizationSignal();
    void apps_deleteInstallationSignal();
    void apps_deleteTokenSignal();
    void apps_getAuthenticatedSignal(OAIIntegration summary);
    void apps_getBySlugSignal(OAIIntegration summary);
    void apps_getInstallationSignal(OAIInstallation summary);
    void apps_getOrgInstallationSignal(OAIInstallation summary);
    void apps_getRepoInstallationSignal(OAIInstallation summary);
    void apps_getUserInstallationSignal(OAIInstallation summary);
    void apps_getWebhookConfigForAppSignal(OAIWebhook_config summary);
    void apps_getWebhookDeliverySignal(OAIHook_delivery summary);
    void apps_listInstallationReposForAuthenticatedUserSignal(OAIApps_list_installation_repos_for_authenticated_user_200_response summary);
    void apps_listInstallationsSignal(QList<OAIInstallation> summary);
    void apps_listInstallationsForAuthenticatedUserSignal(OAIOrgs_list_app_installations_200_response summary);
    void apps_listReposAccessibleToInstallationSignal(OAIApps_list_repos_accessible_to_installation_200_response summary);
    void apps_listWebhookDeliveriesSignal(QList<OAIHook_delivery_item> summary);
    void apps_redeliverWebhookDeliverySignal(OAIObject summary);
    void apps_removeRepoFromInstallationForAuthenticatedUserSignal();
    void apps_resetTokenSignal(OAIAuthorization summary);
    void apps_revokeInstallationAccessTokenSignal();
    void apps_scopeTokenSignal(OAIAuthorization summary);
    void apps_suspendInstallationSignal();
    void apps_unsuspendInstallationSignal();
    void apps_updateWebhookConfigForAppSignal(OAIWebhook_config summary);


    void apps_addRepoToInstallationForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void apps_checkTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void apps_createFromManifestSignalFull(OAIHttpRequestWorker *worker, OAIApps_create_from_manifest_201_response summary);
    void apps_createInstallationAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_token summary);
    void apps_deleteAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void apps_deleteInstallationSignalFull(OAIHttpRequestWorker *worker);
    void apps_deleteTokenSignalFull(OAIHttpRequestWorker *worker);
    void apps_getAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIIntegration summary);
    void apps_getBySlugSignalFull(OAIHttpRequestWorker *worker, OAIIntegration summary);
    void apps_getInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation summary);
    void apps_getOrgInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation summary);
    void apps_getRepoInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation summary);
    void apps_getUserInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation summary);
    void apps_getWebhookConfigForAppSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_config summary);
    void apps_getWebhookDeliverySignalFull(OAIHttpRequestWorker *worker, OAIHook_delivery summary);
    void apps_listInstallationReposForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_installation_repos_for_authenticated_user_200_response summary);
    void apps_listInstallationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstallation> summary);
    void apps_listInstallationsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIOrgs_list_app_installations_200_response summary);
    void apps_listReposAccessibleToInstallationSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_repos_accessible_to_installation_200_response summary);
    void apps_listWebhookDeliveriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook_delivery_item> summary);
    void apps_redeliverWebhookDeliverySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void apps_removeRepoFromInstallationForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void apps_resetTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void apps_revokeInstallationAccessTokenSignalFull(OAIHttpRequestWorker *worker);
    void apps_scopeTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuthorization summary);
    void apps_suspendInstallationSignalFull(OAIHttpRequestWorker *worker);
    void apps_unsuspendInstallationSignalFull(OAIHttpRequestWorker *worker);
    void apps_updateWebhookConfigForAppSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_config summary);

    Q_DECL_DEPRECATED_X("Use apps_addRepoToInstallationForAuthenticatedUserSignalError() instead")
    void apps_addRepoToInstallationForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_addRepoToInstallationForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_checkTokenSignalError() instead")
    void apps_checkTokenSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_checkTokenSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createFromManifestSignalError() instead")
    void apps_createFromManifestSignalE(OAIApps_create_from_manifest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createFromManifestSignalError(OAIApps_create_from_manifest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createInstallationAccessTokenSignalError() instead")
    void apps_createInstallationAccessTokenSignalE(OAIInstallation_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createInstallationAccessTokenSignalError(OAIInstallation_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteAuthorizationSignalError() instead")
    void apps_deleteAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteInstallationSignalError() instead")
    void apps_deleteInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteTokenSignalError() instead")
    void apps_deleteTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getAuthenticatedSignalError() instead")
    void apps_getAuthenticatedSignalE(OAIIntegration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getAuthenticatedSignalError(OAIIntegration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getBySlugSignalError() instead")
    void apps_getBySlugSignalE(OAIIntegration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getBySlugSignalError(OAIIntegration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getInstallationSignalError() instead")
    void apps_getInstallationSignalE(OAIInstallation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getInstallationSignalError(OAIInstallation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getOrgInstallationSignalError() instead")
    void apps_getOrgInstallationSignalE(OAIInstallation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getOrgInstallationSignalError(OAIInstallation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getRepoInstallationSignalError() instead")
    void apps_getRepoInstallationSignalE(OAIInstallation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getRepoInstallationSignalError(OAIInstallation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getUserInstallationSignalError() instead")
    void apps_getUserInstallationSignalE(OAIInstallation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getUserInstallationSignalError(OAIInstallation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getWebhookConfigForAppSignalError() instead")
    void apps_getWebhookConfigForAppSignalE(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getWebhookConfigForAppSignalError(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getWebhookDeliverySignalError() instead")
    void apps_getWebhookDeliverySignalE(OAIHook_delivery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getWebhookDeliverySignalError(OAIHook_delivery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationReposForAuthenticatedUserSignalError() instead")
    void apps_listInstallationReposForAuthenticatedUserSignalE(OAIApps_list_installation_repos_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationReposForAuthenticatedUserSignalError(OAIApps_list_installation_repos_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsSignalError() instead")
    void apps_listInstallationsSignalE(QList<OAIInstallation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsSignalError(QList<OAIInstallation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsForAuthenticatedUserSignalError() instead")
    void apps_listInstallationsForAuthenticatedUserSignalE(OAIOrgs_list_app_installations_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsForAuthenticatedUserSignalError(OAIOrgs_list_app_installations_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listReposAccessibleToInstallationSignalError() instead")
    void apps_listReposAccessibleToInstallationSignalE(OAIApps_list_repos_accessible_to_installation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listReposAccessibleToInstallationSignalError(OAIApps_list_repos_accessible_to_installation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listWebhookDeliveriesSignalError() instead")
    void apps_listWebhookDeliveriesSignalE(QList<OAIHook_delivery_item> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listWebhookDeliveriesSignalError(QList<OAIHook_delivery_item> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_redeliverWebhookDeliverySignalError() instead")
    void apps_redeliverWebhookDeliverySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_redeliverWebhookDeliverySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_removeRepoFromInstallationForAuthenticatedUserSignalError() instead")
    void apps_removeRepoFromInstallationForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_removeRepoFromInstallationForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_resetTokenSignalError() instead")
    void apps_resetTokenSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_resetTokenSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_revokeInstallationAccessTokenSignalError() instead")
    void apps_revokeInstallationAccessTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_revokeInstallationAccessTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_scopeTokenSignalError() instead")
    void apps_scopeTokenSignalE(OAIAuthorization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_scopeTokenSignalError(OAIAuthorization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_suspendInstallationSignalError() instead")
    void apps_suspendInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_suspendInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_unsuspendInstallationSignalError() instead")
    void apps_unsuspendInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_unsuspendInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_updateWebhookConfigForAppSignalError() instead")
    void apps_updateWebhookConfigForAppSignalE(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_updateWebhookConfigForAppSignalError(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apps_addRepoToInstallationForAuthenticatedUserSignalErrorFull() instead")
    void apps_addRepoToInstallationForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_addRepoToInstallationForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_checkTokenSignalErrorFull() instead")
    void apps_checkTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_checkTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createFromManifestSignalErrorFull() instead")
    void apps_createFromManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createFromManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createInstallationAccessTokenSignalErrorFull() instead")
    void apps_createInstallationAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createInstallationAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteAuthorizationSignalErrorFull() instead")
    void apps_deleteAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteInstallationSignalErrorFull() instead")
    void apps_deleteInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteTokenSignalErrorFull() instead")
    void apps_deleteTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getAuthenticatedSignalErrorFull() instead")
    void apps_getAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getBySlugSignalErrorFull() instead")
    void apps_getBySlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getBySlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getInstallationSignalErrorFull() instead")
    void apps_getInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getOrgInstallationSignalErrorFull() instead")
    void apps_getOrgInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getOrgInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getRepoInstallationSignalErrorFull() instead")
    void apps_getRepoInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getRepoInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getUserInstallationSignalErrorFull() instead")
    void apps_getUserInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getUserInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getWebhookConfigForAppSignalErrorFull() instead")
    void apps_getWebhookConfigForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getWebhookConfigForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getWebhookDeliverySignalErrorFull() instead")
    void apps_getWebhookDeliverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getWebhookDeliverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationReposForAuthenticatedUserSignalErrorFull() instead")
    void apps_listInstallationReposForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationReposForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsSignalErrorFull() instead")
    void apps_listInstallationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsForAuthenticatedUserSignalErrorFull() instead")
    void apps_listInstallationsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listReposAccessibleToInstallationSignalErrorFull() instead")
    void apps_listReposAccessibleToInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listReposAccessibleToInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listWebhookDeliveriesSignalErrorFull() instead")
    void apps_listWebhookDeliveriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listWebhookDeliveriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_redeliverWebhookDeliverySignalErrorFull() instead")
    void apps_redeliverWebhookDeliverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_redeliverWebhookDeliverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_removeRepoFromInstallationForAuthenticatedUserSignalErrorFull() instead")
    void apps_removeRepoFromInstallationForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_removeRepoFromInstallationForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_resetTokenSignalErrorFull() instead")
    void apps_resetTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_resetTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_revokeInstallationAccessTokenSignalErrorFull() instead")
    void apps_revokeInstallationAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_revokeInstallationAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_scopeTokenSignalErrorFull() instead")
    void apps_scopeTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_scopeTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_suspendInstallationSignalErrorFull() instead")
    void apps_suspendInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_suspendInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_unsuspendInstallationSignalErrorFull() instead")
    void apps_unsuspendInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_unsuspendInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_updateWebhookConfigForAppSignalErrorFull() instead")
    void apps_updateWebhookConfigForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_updateWebhookConfigForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
