/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_pull_request_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_pull_request_overview::OAIEnterprise_pull_request_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_pull_request_overview::OAIEnterprise_pull_request_overview() {
    this->initializeModel();
}

OAIEnterprise_pull_request_overview::~OAIEnterprise_pull_request_overview() {}

void OAIEnterprise_pull_request_overview::initializeModel() {

    m_mergeable_pulls_isSet = false;
    m_mergeable_pulls_isValid = false;

    m_merged_pulls_isSet = false;
    m_merged_pulls_isValid = false;

    m_total_pulls_isSet = false;
    m_total_pulls_isValid = false;

    m_unmergeable_pulls_isSet = false;
    m_unmergeable_pulls_isValid = false;
}

void OAIEnterprise_pull_request_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_pull_request_overview::fromJsonObject(QJsonObject json) {

    m_mergeable_pulls_isValid = ::OpenAPI::fromJsonValue(m_mergeable_pulls, json[QString("mergeable_pulls")]);
    m_mergeable_pulls_isSet = !json[QString("mergeable_pulls")].isNull() && m_mergeable_pulls_isValid;

    m_merged_pulls_isValid = ::OpenAPI::fromJsonValue(m_merged_pulls, json[QString("merged_pulls")]);
    m_merged_pulls_isSet = !json[QString("merged_pulls")].isNull() && m_merged_pulls_isValid;

    m_total_pulls_isValid = ::OpenAPI::fromJsonValue(m_total_pulls, json[QString("total_pulls")]);
    m_total_pulls_isSet = !json[QString("total_pulls")].isNull() && m_total_pulls_isValid;

    m_unmergeable_pulls_isValid = ::OpenAPI::fromJsonValue(m_unmergeable_pulls, json[QString("unmergeable_pulls")]);
    m_unmergeable_pulls_isSet = !json[QString("unmergeable_pulls")].isNull() && m_unmergeable_pulls_isValid;
}

QString OAIEnterprise_pull_request_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_pull_request_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_mergeable_pulls_isSet) {
        obj.insert(QString("mergeable_pulls"), ::OpenAPI::toJsonValue(m_mergeable_pulls));
    }
    if (m_merged_pulls_isSet) {
        obj.insert(QString("merged_pulls"), ::OpenAPI::toJsonValue(m_merged_pulls));
    }
    if (m_total_pulls_isSet) {
        obj.insert(QString("total_pulls"), ::OpenAPI::toJsonValue(m_total_pulls));
    }
    if (m_unmergeable_pulls_isSet) {
        obj.insert(QString("unmergeable_pulls"), ::OpenAPI::toJsonValue(m_unmergeable_pulls));
    }
    return obj;
}

qint32 OAIEnterprise_pull_request_overview::getMergeablePulls() const {
    return m_mergeable_pulls;
}
void OAIEnterprise_pull_request_overview::setMergeablePulls(const qint32 &mergeable_pulls) {
    m_mergeable_pulls = mergeable_pulls;
    m_mergeable_pulls_isSet = true;
}

bool OAIEnterprise_pull_request_overview::is_mergeable_pulls_Set() const{
    return m_mergeable_pulls_isSet;
}

bool OAIEnterprise_pull_request_overview::is_mergeable_pulls_Valid() const{
    return m_mergeable_pulls_isValid;
}

qint32 OAIEnterprise_pull_request_overview::getMergedPulls() const {
    return m_merged_pulls;
}
void OAIEnterprise_pull_request_overview::setMergedPulls(const qint32 &merged_pulls) {
    m_merged_pulls = merged_pulls;
    m_merged_pulls_isSet = true;
}

bool OAIEnterprise_pull_request_overview::is_merged_pulls_Set() const{
    return m_merged_pulls_isSet;
}

bool OAIEnterprise_pull_request_overview::is_merged_pulls_Valid() const{
    return m_merged_pulls_isValid;
}

qint32 OAIEnterprise_pull_request_overview::getTotalPulls() const {
    return m_total_pulls;
}
void OAIEnterprise_pull_request_overview::setTotalPulls(const qint32 &total_pulls) {
    m_total_pulls = total_pulls;
    m_total_pulls_isSet = true;
}

bool OAIEnterprise_pull_request_overview::is_total_pulls_Set() const{
    return m_total_pulls_isSet;
}

bool OAIEnterprise_pull_request_overview::is_total_pulls_Valid() const{
    return m_total_pulls_isValid;
}

qint32 OAIEnterprise_pull_request_overview::getUnmergeablePulls() const {
    return m_unmergeable_pulls;
}
void OAIEnterprise_pull_request_overview::setUnmergeablePulls(const qint32 &unmergeable_pulls) {
    m_unmergeable_pulls = unmergeable_pulls;
    m_unmergeable_pulls_isSet = true;
}

bool OAIEnterprise_pull_request_overview::is_unmergeable_pulls_Set() const{
    return m_unmergeable_pulls_isSet;
}

bool OAIEnterprise_pull_request_overview::is_unmergeable_pulls_Valid() const{
    return m_unmergeable_pulls_isValid;
}

bool OAIEnterprise_pull_request_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mergeable_pulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_pulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pulls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmergeable_pulls_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_pull_request_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mergeable_pulls_isValid && m_merged_pulls_isValid && m_total_pulls_isValid && m_unmergeable_pulls_isValid && true;
}

} // namespace OpenAPI
