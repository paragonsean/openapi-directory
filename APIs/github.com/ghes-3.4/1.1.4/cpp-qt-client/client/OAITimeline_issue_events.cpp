/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline_issue_events.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline_issue_events::OAITimeline_issue_events(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline_issue_events::OAITimeline_issue_events() {
    this->initializeModel();
}

OAITimeline_issue_events::~OAITimeline_issue_events() {}

void OAITimeline_issue_events::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_rename_isSet = false;
    m_rename_isValid = false;

    m_requested_reviewer_isSet = false;
    m_requested_reviewer_isValid = false;

    m_requested_team_isSet = false;
    m_requested_team_isValid = false;

    m_review_requester_isSet = false;
    m_review_requester_isValid = false;

    m_dismissed_review_isSet = false;
    m_dismissed_review_isValid = false;

    m_lock_reason_isSet = false;
    m_lock_reason_isValid = false;

    m_project_card_isSet = false;
    m_project_card_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_body_text_isSet = false;
    m_body_text_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submitted_at_isSet = false;
    m_submitted_at_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;
}

void OAITimeline_issue_events::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline_issue_events::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_rename_isValid = ::OpenAPI::fromJsonValue(m_rename, json[QString("rename")]);
    m_rename_isSet = !json[QString("rename")].isNull() && m_rename_isValid;

    m_requested_reviewer_isValid = ::OpenAPI::fromJsonValue(m_requested_reviewer, json[QString("requested_reviewer")]);
    m_requested_reviewer_isSet = !json[QString("requested_reviewer")].isNull() && m_requested_reviewer_isValid;

    m_requested_team_isValid = ::OpenAPI::fromJsonValue(m_requested_team, json[QString("requested_team")]);
    m_requested_team_isSet = !json[QString("requested_team")].isNull() && m_requested_team_isValid;

    m_review_requester_isValid = ::OpenAPI::fromJsonValue(m_review_requester, json[QString("review_requester")]);
    m_review_requester_isSet = !json[QString("review_requester")].isNull() && m_review_requester_isValid;

    m_dismissed_review_isValid = ::OpenAPI::fromJsonValue(m_dismissed_review, json[QString("dismissed_review")]);
    m_dismissed_review_isSet = !json[QString("dismissed_review")].isNull() && m_dismissed_review_isValid;

    m_lock_reason_isValid = ::OpenAPI::fromJsonValue(m_lock_reason, json[QString("lock_reason")]);
    m_lock_reason_isSet = !json[QString("lock_reason")].isNull() && m_lock_reason_isValid;

    m_project_card_isValid = ::OpenAPI::fromJsonValue(m_project_card, json[QString("project_card")]);
    m_project_card_isSet = !json[QString("project_card")].isNull() && m_project_card_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_body_text_isValid = ::OpenAPI::fromJsonValue(m_body_text, json[QString("body_text")]);
    m_body_text_isSet = !json[QString("body_text")].isNull() && m_body_text_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submitted_at_isValid = ::OpenAPI::fromJsonValue(m_submitted_at, json[QString("submitted_at")]);
    m_submitted_at_isSet = !json[QString("submitted_at")].isNull() && m_submitted_at_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("state_reason")]);
    m_state_reason_isSet = !json[QString("state_reason")].isNull() && m_state_reason_isValid;
}

QString OAITimeline_issue_events::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline_issue_events::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label.isSet()) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_rename.isSet()) {
        obj.insert(QString("rename"), ::OpenAPI::toJsonValue(m_rename));
    }
    if (m_requested_reviewer.isSet()) {
        obj.insert(QString("requested_reviewer"), ::OpenAPI::toJsonValue(m_requested_reviewer));
    }
    if (m_requested_team.isSet()) {
        obj.insert(QString("requested_team"), ::OpenAPI::toJsonValue(m_requested_team));
    }
    if (m_review_requester.isSet()) {
        obj.insert(QString("review_requester"), ::OpenAPI::toJsonValue(m_review_requester));
    }
    if (m_dismissed_review.isSet()) {
        obj.insert(QString("dismissed_review"), ::OpenAPI::toJsonValue(m_dismissed_review));
    }
    if (m_lock_reason_isSet) {
        obj.insert(QString("lock_reason"), ::OpenAPI::toJsonValue(m_lock_reason));
    }
    if (m_project_card.isSet()) {
        obj.insert(QString("project_card"), ::OpenAPI::toJsonValue(m_project_card));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_body_text_isSet) {
        obj.insert(QString("body_text"), ::OpenAPI::toJsonValue(m_body_text));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_tree.isSet()) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submitted_at_isSet) {
        obj.insert(QString("submitted_at"), ::OpenAPI::toJsonValue(m_submitted_at));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("state_reason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    return obj;
}

OAISimple_user OAITimeline_issue_events::getActor() const {
    return m_actor;
}
void OAITimeline_issue_events::setActor(const OAISimple_user &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAITimeline_issue_events::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAITimeline_issue_events::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAITimeline_issue_events::getCommitId() const {
    return m_commit_id;
}
void OAITimeline_issue_events::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAITimeline_issue_events::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAITimeline_issue_events::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAITimeline_issue_events::getCommitUrl() const {
    return m_commit_url;
}
void OAITimeline_issue_events::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAITimeline_issue_events::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAITimeline_issue_events::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QString OAITimeline_issue_events::getCreatedAt() const {
    return m_created_at;
}
void OAITimeline_issue_events::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITimeline_issue_events::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITimeline_issue_events::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITimeline_issue_events::getEvent() const {
    return m_event;
}
void OAITimeline_issue_events::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAITimeline_issue_events::is_event_Set() const{
    return m_event_isSet;
}

bool OAITimeline_issue_events::is_event_Valid() const{
    return m_event_isValid;
}

qint32 OAITimeline_issue_events::getId() const {
    return m_id;
}
void OAITimeline_issue_events::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimeline_issue_events::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimeline_issue_events::is_id_Valid() const{
    return m_id_isValid;
}

OAILabeled_issue_event_label OAITimeline_issue_events::getLabel() const {
    return m_label;
}
void OAITimeline_issue_events::setLabel(const OAILabeled_issue_event_label &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAITimeline_issue_events::is_label_Set() const{
    return m_label_isSet;
}

bool OAITimeline_issue_events::is_label_Valid() const{
    return m_label_isValid;
}

QString OAITimeline_issue_events::getNodeId() const {
    return m_node_id;
}
void OAITimeline_issue_events::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITimeline_issue_events::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITimeline_issue_events::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINullable_integration OAITimeline_issue_events::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAITimeline_issue_events::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAITimeline_issue_events::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAITimeline_issue_events::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

QString OAITimeline_issue_events::getUrl() const {
    return m_url;
}
void OAITimeline_issue_events::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITimeline_issue_events::is_url_Set() const{
    return m_url_isSet;
}

bool OAITimeline_issue_events::is_url_Valid() const{
    return m_url_isValid;
}

OAIDemilestoned_issue_event_milestone OAITimeline_issue_events::getMilestone() const {
    return m_milestone;
}
void OAITimeline_issue_events::setMilestone(const OAIDemilestoned_issue_event_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAITimeline_issue_events::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAITimeline_issue_events::is_milestone_Valid() const{
    return m_milestone_isValid;
}

OAIRenamed_issue_event_rename OAITimeline_issue_events::getRename() const {
    return m_rename;
}
void OAITimeline_issue_events::setRename(const OAIRenamed_issue_event_rename &rename) {
    m_rename = rename;
    m_rename_isSet = true;
}

bool OAITimeline_issue_events::is_rename_Set() const{
    return m_rename_isSet;
}

bool OAITimeline_issue_events::is_rename_Valid() const{
    return m_rename_isValid;
}

OAISimple_user OAITimeline_issue_events::getRequestedReviewer() const {
    return m_requested_reviewer;
}
void OAITimeline_issue_events::setRequestedReviewer(const OAISimple_user &requested_reviewer) {
    m_requested_reviewer = requested_reviewer;
    m_requested_reviewer_isSet = true;
}

bool OAITimeline_issue_events::is_requested_reviewer_Set() const{
    return m_requested_reviewer_isSet;
}

bool OAITimeline_issue_events::is_requested_reviewer_Valid() const{
    return m_requested_reviewer_isValid;
}

OAITeam OAITimeline_issue_events::getRequestedTeam() const {
    return m_requested_team;
}
void OAITimeline_issue_events::setRequestedTeam(const OAITeam &requested_team) {
    m_requested_team = requested_team;
    m_requested_team_isSet = true;
}

bool OAITimeline_issue_events::is_requested_team_Set() const{
    return m_requested_team_isSet;
}

bool OAITimeline_issue_events::is_requested_team_Valid() const{
    return m_requested_team_isValid;
}

OAISimple_user OAITimeline_issue_events::getReviewRequester() const {
    return m_review_requester;
}
void OAITimeline_issue_events::setReviewRequester(const OAISimple_user &review_requester) {
    m_review_requester = review_requester;
    m_review_requester_isSet = true;
}

bool OAITimeline_issue_events::is_review_requester_Set() const{
    return m_review_requester_isSet;
}

bool OAITimeline_issue_events::is_review_requester_Valid() const{
    return m_review_requester_isValid;
}

OAIReview_dismissed_issue_event_dismissed_review OAITimeline_issue_events::getDismissedReview() const {
    return m_dismissed_review;
}
void OAITimeline_issue_events::setDismissedReview(const OAIReview_dismissed_issue_event_dismissed_review &dismissed_review) {
    m_dismissed_review = dismissed_review;
    m_dismissed_review_isSet = true;
}

bool OAITimeline_issue_events::is_dismissed_review_Set() const{
    return m_dismissed_review_isSet;
}

bool OAITimeline_issue_events::is_dismissed_review_Valid() const{
    return m_dismissed_review_isValid;
}

QString OAITimeline_issue_events::getLockReason() const {
    return m_lock_reason;
}
void OAITimeline_issue_events::setLockReason(const QString &lock_reason) {
    m_lock_reason = lock_reason;
    m_lock_reason_isSet = true;
}

bool OAITimeline_issue_events::is_lock_reason_Set() const{
    return m_lock_reason_isSet;
}

bool OAITimeline_issue_events::is_lock_reason_Valid() const{
    return m_lock_reason_isValid;
}

OAIAdded_to_project_issue_event_project_card OAITimeline_issue_events::getProjectCard() const {
    return m_project_card;
}
void OAITimeline_issue_events::setProjectCard(const OAIAdded_to_project_issue_event_project_card &project_card) {
    m_project_card = project_card;
    m_project_card_isSet = true;
}

bool OAITimeline_issue_events::is_project_card_Set() const{
    return m_project_card_isSet;
}

bool OAITimeline_issue_events::is_project_card_Valid() const{
    return m_project_card_isValid;
}

OAIAuthor_association OAITimeline_issue_events::getAuthorAssociation() const {
    return m_author_association;
}
void OAITimeline_issue_events::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAITimeline_issue_events::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAITimeline_issue_events::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAITimeline_issue_events::getBody() const {
    return m_body;
}
void OAITimeline_issue_events::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITimeline_issue_events::is_body_Set() const{
    return m_body_isSet;
}

bool OAITimeline_issue_events::is_body_Valid() const{
    return m_body_isValid;
}

QString OAITimeline_issue_events::getBodyHtml() const {
    return m_body_html;
}
void OAITimeline_issue_events::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAITimeline_issue_events::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAITimeline_issue_events::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAITimeline_issue_events::getBodyText() const {
    return m_body_text;
}
void OAITimeline_issue_events::setBodyText(const QString &body_text) {
    m_body_text = body_text;
    m_body_text_isSet = true;
}

bool OAITimeline_issue_events::is_body_text_Set() const{
    return m_body_text_isSet;
}

bool OAITimeline_issue_events::is_body_text_Valid() const{
    return m_body_text_isValid;
}

QString OAITimeline_issue_events::getHtmlUrl() const {
    return m_html_url;
}
void OAITimeline_issue_events::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITimeline_issue_events::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITimeline_issue_events::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAITimeline_issue_events::getIssueUrl() const {
    return m_issue_url;
}
void OAITimeline_issue_events::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAITimeline_issue_events::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAITimeline_issue_events::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

OAIReaction_rollup OAITimeline_issue_events::getReactions() const {
    return m_reactions;
}
void OAITimeline_issue_events::setReactions(const OAIReaction_rollup &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAITimeline_issue_events::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAITimeline_issue_events::is_reactions_Valid() const{
    return m_reactions_isValid;
}

QDateTime OAITimeline_issue_events::getUpdatedAt() const {
    return m_updated_at;
}
void OAITimeline_issue_events::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITimeline_issue_events::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITimeline_issue_events::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAISimple_user OAITimeline_issue_events::getUser() const {
    return m_user;
}
void OAITimeline_issue_events::setUser(const OAISimple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITimeline_issue_events::is_user_Set() const{
    return m_user_isSet;
}

bool OAITimeline_issue_events::is_user_Valid() const{
    return m_user_isValid;
}

OAITimeline_cross_referenced_event_source OAITimeline_issue_events::getSource() const {
    return m_source;
}
void OAITimeline_issue_events::setSource(const OAITimeline_cross_referenced_event_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITimeline_issue_events::is_source_Set() const{
    return m_source_isSet;
}

bool OAITimeline_issue_events::is_source_Valid() const{
    return m_source_isValid;
}

OAIGit_commit_author OAITimeline_issue_events::getAuthor() const {
    return m_author;
}
void OAITimeline_issue_events::setAuthor(const OAIGit_commit_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAITimeline_issue_events::is_author_Set() const{
    return m_author_isSet;
}

bool OAITimeline_issue_events::is_author_Valid() const{
    return m_author_isValid;
}

OAIGit_commit_author OAITimeline_issue_events::getCommitter() const {
    return m_committer;
}
void OAITimeline_issue_events::setCommitter(const OAIGit_commit_author &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAITimeline_issue_events::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAITimeline_issue_events::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAITimeline_issue_events::getMessage() const {
    return m_message;
}
void OAITimeline_issue_events::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITimeline_issue_events::is_message_Set() const{
    return m_message_isSet;
}

bool OAITimeline_issue_events::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIGit_commit_parents_inner> OAITimeline_issue_events::getParents() const {
    return m_parents;
}
void OAITimeline_issue_events::setParents(const QList<OAIGit_commit_parents_inner> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAITimeline_issue_events::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAITimeline_issue_events::is_parents_Valid() const{
    return m_parents_isValid;
}

QString OAITimeline_issue_events::getSha() const {
    return m_sha;
}
void OAITimeline_issue_events::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAITimeline_issue_events::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAITimeline_issue_events::is_sha_Valid() const{
    return m_sha_isValid;
}

OAIGit_commit_tree OAITimeline_issue_events::getTree() const {
    return m_tree;
}
void OAITimeline_issue_events::setTree(const OAIGit_commit_tree &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAITimeline_issue_events::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAITimeline_issue_events::is_tree_Valid() const{
    return m_tree_isValid;
}

OAIGit_commit_verification OAITimeline_issue_events::getVerification() const {
    return m_verification;
}
void OAITimeline_issue_events::setVerification(const OAIGit_commit_verification &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAITimeline_issue_events::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAITimeline_issue_events::is_verification_Valid() const{
    return m_verification_isValid;
}

OAIPull_request_review__links OAITimeline_issue_events::getLinks() const {
    return m__links;
}
void OAITimeline_issue_events::setLinks(const OAIPull_request_review__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAITimeline_issue_events::is__links_Set() const{
    return m__links_isSet;
}

bool OAITimeline_issue_events::is__links_Valid() const{
    return m__links_isValid;
}

QString OAITimeline_issue_events::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAITimeline_issue_events::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAITimeline_issue_events::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAITimeline_issue_events::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

QString OAITimeline_issue_events::getState() const {
    return m_state;
}
void OAITimeline_issue_events::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITimeline_issue_events::is_state_Set() const{
    return m_state_isSet;
}

bool OAITimeline_issue_events::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAITimeline_issue_events::getSubmittedAt() const {
    return m_submitted_at;
}
void OAITimeline_issue_events::setSubmittedAt(const QDateTime &submitted_at) {
    m_submitted_at = submitted_at;
    m_submitted_at_isSet = true;
}

bool OAITimeline_issue_events::is_submitted_at_Set() const{
    return m_submitted_at_isSet;
}

bool OAITimeline_issue_events::is_submitted_at_Valid() const{
    return m_submitted_at_isValid;
}

QList<OAICommit_comment> OAITimeline_issue_events::getComments() const {
    return m_comments;
}
void OAITimeline_issue_events::setComments(const QList<OAICommit_comment> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAITimeline_issue_events::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAITimeline_issue_events::is_comments_Valid() const{
    return m_comments_isValid;
}

OAISimple_user OAITimeline_issue_events::getAssignee() const {
    return m_assignee;
}
void OAITimeline_issue_events::setAssignee(const OAISimple_user &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAITimeline_issue_events::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAITimeline_issue_events::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QString OAITimeline_issue_events::getStateReason() const {
    return m_state_reason;
}
void OAITimeline_issue_events::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAITimeline_issue_events::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAITimeline_issue_events::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

bool OAITimeline_issue_events::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_reviewer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_requester.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline_issue_events::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actor_isValid && m_commit_id_isValid && m_commit_url_isValid && m_created_at_isValid && m_event_isValid && m_id_isValid && m_label_isValid && m_node_id_isValid && m_performed_via_github_app_isValid && m_url_isValid && m_milestone_isValid && m_rename_isValid && m_review_requester_isValid && m_dismissed_review_isValid && m_lock_reason_isValid && m_author_association_isValid && m_body_isValid && m_html_url_isValid && m_issue_url_isValid && m_updated_at_isValid && m_user_isValid && m_source_isValid && m_author_isValid && m_committer_isValid && m_message_isValid && m_parents_isValid && m_sha_isValid && m_tree_isValid && m_verification_isValid && m__links_isValid && m_pull_request_url_isValid && m_state_isValid && m_assignee_isValid && true;
}

} // namespace OpenAPI
