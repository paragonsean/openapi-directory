/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDependabotApi_H
#define OAI_OAIDependabotApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActions_list_selected_repos_for_org_secret_200_response.h"
#include "OAIDependabot_create_or_update_org_secret_request.h"
#include "OAIDependabot_create_or_update_repo_secret_request.h"
#include "OAIDependabot_list_org_secrets_200_response.h"
#include "OAIDependabot_list_repo_secrets_200_response.h"
#include "OAIDependabot_public_key.h"
#include "OAIDependabot_secret.h"
#include "OAIDependabot_set_selected_repos_for_org_secret_request.h"
#include "OAIObject.h"
#include "OAIOrganization_dependabot_secret.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDependabotApi : public QObject {
    Q_OBJECT

public:
    OAIDependabotApi(const int timeOut = 0);
    ~OAIDependabotApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void dependabot_addSelectedRepoToOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_dependabot_create_or_update_org_secret_request OAIDependabot_create_or_update_org_secret_request [required]
    */
    virtual void dependabot_createOrUpdateOrgSecret(const QString &org, const QString &secret_name, const OAIDependabot_create_or_update_org_secret_request &oai_dependabot_create_or_update_org_secret_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_dependabot_create_or_update_repo_secret_request OAIDependabot_create_or_update_repo_secret_request [required]
    */
    virtual void dependabot_createOrUpdateRepoSecret(const QString &owner, const QString &repo, const QString &secret_name, const OAIDependabot_create_or_update_repo_secret_request &oai_dependabot_create_or_update_repo_secret_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void dependabot_deleteOrgSecret(const QString &org, const QString &secret_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void dependabot_deleteRepoSecret(const QString &owner, const QString &repo, const QString &secret_name);

    /**
    * @param[in]  org QString [required]
    */
    virtual void dependabot_getOrgPublicKey(const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void dependabot_getOrgSecret(const QString &org, const QString &secret_name);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void dependabot_getRepoPublicKey(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  secret_name QString [required]
    */
    virtual void dependabot_getRepoSecret(const QString &owner, const QString &repo, const QString &secret_name);

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void dependabot_listOrgSecrets(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void dependabot_listRepoSecrets(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void dependabot_listSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void dependabot_removeSelectedRepoFromOrgSecret(const QString &org, const QString &secret_name, const qint32 &repository_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  oai_dependabot_set_selected_repos_for_org_secret_request OAIDependabot_set_selected_repos_for_org_secret_request [required]
    */
    virtual void dependabot_setSelectedReposForOrgSecret(const QString &org, const QString &secret_name, const OAIDependabot_set_selected_repos_for_org_secret_request &oai_dependabot_set_selected_repos_for_org_secret_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dependabot_addSelectedRepoToOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_createOrUpdateOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_createOrUpdateRepoSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_deleteOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_deleteRepoSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_getOrgPublicKeyCallback(OAIHttpRequestWorker *worker);
    void dependabot_getOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_getRepoPublicKeyCallback(OAIHttpRequestWorker *worker);
    void dependabot_getRepoSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_listOrgSecretsCallback(OAIHttpRequestWorker *worker);
    void dependabot_listRepoSecretsCallback(OAIHttpRequestWorker *worker);
    void dependabot_listSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_removeSelectedRepoFromOrgSecretCallback(OAIHttpRequestWorker *worker);
    void dependabot_setSelectedReposForOrgSecretCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dependabot_addSelectedRepoToOrgSecretSignal();
    void dependabot_createOrUpdateOrgSecretSignal(OAIObject summary);
    void dependabot_createOrUpdateRepoSecretSignal(OAIObject summary);
    void dependabot_deleteOrgSecretSignal();
    void dependabot_deleteRepoSecretSignal();
    void dependabot_getOrgPublicKeySignal(OAIDependabot_public_key summary);
    void dependabot_getOrgSecretSignal(OAIOrganization_dependabot_secret summary);
    void dependabot_getRepoPublicKeySignal(OAIDependabot_public_key summary);
    void dependabot_getRepoSecretSignal(OAIDependabot_secret summary);
    void dependabot_listOrgSecretsSignal(OAIDependabot_list_org_secrets_200_response summary);
    void dependabot_listRepoSecretsSignal(OAIDependabot_list_repo_secrets_200_response summary);
    void dependabot_listSelectedReposForOrgSecretSignal(OAIActions_list_selected_repos_for_org_secret_200_response summary);
    void dependabot_removeSelectedRepoFromOrgSecretSignal();
    void dependabot_setSelectedReposForOrgSecretSignal();


    void dependabot_addSelectedRepoToOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void dependabot_createOrUpdateOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dependabot_createOrUpdateRepoSecretSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dependabot_deleteOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void dependabot_deleteRepoSecretSignalFull(OAIHttpRequestWorker *worker);
    void dependabot_getOrgPublicKeySignalFull(OAIHttpRequestWorker *worker, OAIDependabot_public_key summary);
    void dependabot_getOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIOrganization_dependabot_secret summary);
    void dependabot_getRepoPublicKeySignalFull(OAIHttpRequestWorker *worker, OAIDependabot_public_key summary);
    void dependabot_getRepoSecretSignalFull(OAIHttpRequestWorker *worker, OAIDependabot_secret summary);
    void dependabot_listOrgSecretsSignalFull(OAIHttpRequestWorker *worker, OAIDependabot_list_org_secrets_200_response summary);
    void dependabot_listRepoSecretsSignalFull(OAIHttpRequestWorker *worker, OAIDependabot_list_repo_secrets_200_response summary);
    void dependabot_listSelectedReposForOrgSecretSignalFull(OAIHttpRequestWorker *worker, OAIActions_list_selected_repos_for_org_secret_200_response summary);
    void dependabot_removeSelectedRepoFromOrgSecretSignalFull(OAIHttpRequestWorker *worker);
    void dependabot_setSelectedReposForOrgSecretSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use dependabot_addSelectedRepoToOrgSecretSignalError() instead")
    void dependabot_addSelectedRepoToOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_addSelectedRepoToOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_createOrUpdateOrgSecretSignalError() instead")
    void dependabot_createOrUpdateOrgSecretSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_createOrUpdateOrgSecretSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_createOrUpdateRepoSecretSignalError() instead")
    void dependabot_createOrUpdateRepoSecretSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_createOrUpdateRepoSecretSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_deleteOrgSecretSignalError() instead")
    void dependabot_deleteOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_deleteOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_deleteRepoSecretSignalError() instead")
    void dependabot_deleteRepoSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_deleteRepoSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getOrgPublicKeySignalError() instead")
    void dependabot_getOrgPublicKeySignalE(OAIDependabot_public_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getOrgPublicKeySignalError(OAIDependabot_public_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getOrgSecretSignalError() instead")
    void dependabot_getOrgSecretSignalE(OAIOrganization_dependabot_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getOrgSecretSignalError(OAIOrganization_dependabot_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getRepoPublicKeySignalError() instead")
    void dependabot_getRepoPublicKeySignalE(OAIDependabot_public_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getRepoPublicKeySignalError(OAIDependabot_public_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getRepoSecretSignalError() instead")
    void dependabot_getRepoSecretSignalE(OAIDependabot_secret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getRepoSecretSignalError(OAIDependabot_secret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listOrgSecretsSignalError() instead")
    void dependabot_listOrgSecretsSignalE(OAIDependabot_list_org_secrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listOrgSecretsSignalError(OAIDependabot_list_org_secrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listRepoSecretsSignalError() instead")
    void dependabot_listRepoSecretsSignalE(OAIDependabot_list_repo_secrets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listRepoSecretsSignalError(OAIDependabot_list_repo_secrets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listSelectedReposForOrgSecretSignalError() instead")
    void dependabot_listSelectedReposForOrgSecretSignalE(OAIActions_list_selected_repos_for_org_secret_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listSelectedReposForOrgSecretSignalError(OAIActions_list_selected_repos_for_org_secret_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_removeSelectedRepoFromOrgSecretSignalError() instead")
    void dependabot_removeSelectedRepoFromOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_removeSelectedRepoFromOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_setSelectedReposForOrgSecretSignalError() instead")
    void dependabot_setSelectedReposForOrgSecretSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_setSelectedReposForOrgSecretSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dependabot_addSelectedRepoToOrgSecretSignalErrorFull() instead")
    void dependabot_addSelectedRepoToOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_addSelectedRepoToOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_createOrUpdateOrgSecretSignalErrorFull() instead")
    void dependabot_createOrUpdateOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_createOrUpdateOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_createOrUpdateRepoSecretSignalErrorFull() instead")
    void dependabot_createOrUpdateRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_createOrUpdateRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_deleteOrgSecretSignalErrorFull() instead")
    void dependabot_deleteOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_deleteOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_deleteRepoSecretSignalErrorFull() instead")
    void dependabot_deleteRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_deleteRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getOrgPublicKeySignalErrorFull() instead")
    void dependabot_getOrgPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getOrgPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getOrgSecretSignalErrorFull() instead")
    void dependabot_getOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getRepoPublicKeySignalErrorFull() instead")
    void dependabot_getRepoPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getRepoPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_getRepoSecretSignalErrorFull() instead")
    void dependabot_getRepoSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_getRepoSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listOrgSecretsSignalErrorFull() instead")
    void dependabot_listOrgSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listOrgSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listRepoSecretsSignalErrorFull() instead")
    void dependabot_listRepoSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listRepoSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_listSelectedReposForOrgSecretSignalErrorFull() instead")
    void dependabot_listSelectedReposForOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_listSelectedReposForOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_removeSelectedRepoFromOrgSecretSignalErrorFull() instead")
    void dependabot_removeSelectedRepoFromOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_removeSelectedRepoFromOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dependabot_setSelectedReposForOrgSecretSignalErrorFull() instead")
    void dependabot_setSelectedReposForOrgSecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dependabot_setSelectedReposForOrgSecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
