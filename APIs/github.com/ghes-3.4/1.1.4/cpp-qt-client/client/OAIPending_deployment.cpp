/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPending_deployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPending_deployment::OAIPending_deployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPending_deployment::OAIPending_deployment() {
    this->initializeModel();
}

OAIPending_deployment::~OAIPending_deployment() {}

void OAIPending_deployment::initializeModel() {

    m_current_user_can_approve_isSet = false;
    m_current_user_can_approve_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_reviewers_isSet = false;
    m_reviewers_isValid = false;

    m_wait_timer_isSet = false;
    m_wait_timer_isValid = false;

    m_wait_timer_started_at_isSet = false;
    m_wait_timer_started_at_isValid = false;
}

void OAIPending_deployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPending_deployment::fromJsonObject(QJsonObject json) {

    m_current_user_can_approve_isValid = ::OpenAPI::fromJsonValue(m_current_user_can_approve, json[QString("current_user_can_approve")]);
    m_current_user_can_approve_isSet = !json[QString("current_user_can_approve")].isNull() && m_current_user_can_approve_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_reviewers_isValid = ::OpenAPI::fromJsonValue(m_reviewers, json[QString("reviewers")]);
    m_reviewers_isSet = !json[QString("reviewers")].isNull() && m_reviewers_isValid;

    m_wait_timer_isValid = ::OpenAPI::fromJsonValue(m_wait_timer, json[QString("wait_timer")]);
    m_wait_timer_isSet = !json[QString("wait_timer")].isNull() && m_wait_timer_isValid;

    m_wait_timer_started_at_isValid = ::OpenAPI::fromJsonValue(m_wait_timer_started_at, json[QString("wait_timer_started_at")]);
    m_wait_timer_started_at_isSet = !json[QString("wait_timer_started_at")].isNull() && m_wait_timer_started_at_isValid;
}

QString OAIPending_deployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPending_deployment::asJsonObject() const {
    QJsonObject obj;
    if (m_current_user_can_approve_isSet) {
        obj.insert(QString("current_user_can_approve"), ::OpenAPI::toJsonValue(m_current_user_can_approve));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_reviewers.size() > 0) {
        obj.insert(QString("reviewers"), ::OpenAPI::toJsonValue(m_reviewers));
    }
    if (m_wait_timer_isSet) {
        obj.insert(QString("wait_timer"), ::OpenAPI::toJsonValue(m_wait_timer));
    }
    if (m_wait_timer_started_at_isSet) {
        obj.insert(QString("wait_timer_started_at"), ::OpenAPI::toJsonValue(m_wait_timer_started_at));
    }
    return obj;
}

bool OAIPending_deployment::isCurrentUserCanApprove() const {
    return m_current_user_can_approve;
}
void OAIPending_deployment::setCurrentUserCanApprove(const bool &current_user_can_approve) {
    m_current_user_can_approve = current_user_can_approve;
    m_current_user_can_approve_isSet = true;
}

bool OAIPending_deployment::is_current_user_can_approve_Set() const{
    return m_current_user_can_approve_isSet;
}

bool OAIPending_deployment::is_current_user_can_approve_Valid() const{
    return m_current_user_can_approve_isValid;
}

OAIPending_deployment_environment OAIPending_deployment::getEnvironment() const {
    return m_environment;
}
void OAIPending_deployment::setEnvironment(const OAIPending_deployment_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPending_deployment::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPending_deployment::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIEnvironment_protection_rules_inner_anyOf_1_reviewers_inner> OAIPending_deployment::getReviewers() const {
    return m_reviewers;
}
void OAIPending_deployment::setReviewers(const QList<OAIEnvironment_protection_rules_inner_anyOf_1_reviewers_inner> &reviewers) {
    m_reviewers = reviewers;
    m_reviewers_isSet = true;
}

bool OAIPending_deployment::is_reviewers_Set() const{
    return m_reviewers_isSet;
}

bool OAIPending_deployment::is_reviewers_Valid() const{
    return m_reviewers_isValid;
}

qint32 OAIPending_deployment::getWaitTimer() const {
    return m_wait_timer;
}
void OAIPending_deployment::setWaitTimer(const qint32 &wait_timer) {
    m_wait_timer = wait_timer;
    m_wait_timer_isSet = true;
}

bool OAIPending_deployment::is_wait_timer_Set() const{
    return m_wait_timer_isSet;
}

bool OAIPending_deployment::is_wait_timer_Valid() const{
    return m_wait_timer_isValid;
}

QDateTime OAIPending_deployment::getWaitTimerStartedAt() const {
    return m_wait_timer_started_at;
}
void OAIPending_deployment::setWaitTimerStartedAt(const QDateTime &wait_timer_started_at) {
    m_wait_timer_started_at = wait_timer_started_at;
    m_wait_timer_started_at_isSet = true;
}

bool OAIPending_deployment::is_wait_timer_started_at_Set() const{
    return m_wait_timer_started_at_isSet;
}

bool OAIPending_deployment::is_wait_timer_started_at_Valid() const{
    return m_wait_timer_started_at_isValid;
}

bool OAIPending_deployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_user_can_approve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_timer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_timer_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPending_deployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_user_can_approve_isValid && m_environment_isValid && m_reviewers_isValid && m_wait_timer_isValid && m_wait_timer_started_at_isValid && true;
}

} // namespace OpenAPI
