/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDependabot_set_selected_repos_for_org_secret_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDependabot_set_selected_repos_for_org_secret_request::OAIDependabot_set_selected_repos_for_org_secret_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDependabot_set_selected_repos_for_org_secret_request::OAIDependabot_set_selected_repos_for_org_secret_request() {
    this->initializeModel();
}

OAIDependabot_set_selected_repos_for_org_secret_request::~OAIDependabot_set_selected_repos_for_org_secret_request() {}

void OAIDependabot_set_selected_repos_for_org_secret_request::initializeModel() {

    m_selected_repository_ids_isSet = false;
    m_selected_repository_ids_isValid = false;
}

void OAIDependabot_set_selected_repos_for_org_secret_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDependabot_set_selected_repos_for_org_secret_request::fromJsonObject(QJsonObject json) {

    m_selected_repository_ids_isValid = ::OpenAPI::fromJsonValue(m_selected_repository_ids, json[QString("selected_repository_ids")]);
    m_selected_repository_ids_isSet = !json[QString("selected_repository_ids")].isNull() && m_selected_repository_ids_isValid;
}

QString OAIDependabot_set_selected_repos_for_org_secret_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDependabot_set_selected_repos_for_org_secret_request::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_repository_ids.size() > 0) {
        obj.insert(QString("selected_repository_ids"), ::OpenAPI::toJsonValue(m_selected_repository_ids));
    }
    return obj;
}

QList<qint32> OAIDependabot_set_selected_repos_for_org_secret_request::getSelectedRepositoryIds() const {
    return m_selected_repository_ids;
}
void OAIDependabot_set_selected_repos_for_org_secret_request::setSelectedRepositoryIds(const QList<qint32> &selected_repository_ids) {
    m_selected_repository_ids = selected_repository_ids;
    m_selected_repository_ids_isSet = true;
}

bool OAIDependabot_set_selected_repos_for_org_secret_request::is_selected_repository_ids_Set() const{
    return m_selected_repository_ids_isSet;
}

bool OAIDependabot_set_selected_repos_for_org_secret_request::is_selected_repository_ids_Valid() const{
    return m_selected_repository_ids_isValid;
}

bool OAIDependabot_set_selected_repos_for_org_secret_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_repository_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDependabot_set_selected_repos_for_org_secret_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_selected_repository_ids_isValid && true;
}

} // namespace OpenAPI
