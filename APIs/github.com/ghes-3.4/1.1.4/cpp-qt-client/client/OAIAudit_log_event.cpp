/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudit_log_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudit_log_event::OAIAudit_log_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudit_log_event::OAIAudit_log_event() {
    this->initializeModel();
}

OAIAudit_log_event::~OAIAudit_log_event() {}

void OAIAudit_log_event::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m__document_id_isSet = false;
    m__document_id_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_active_was_isSet = false;
    m_active_was_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_actor_id_isSet = false;
    m_actor_id_isValid = false;

    m_actor_location_isSet = false;
    m_actor_location_isValid = false;

    m_blocked_user_isSet = false;
    m_blocked_user_isValid = false;

    m_business_isSet = false;
    m_business_isValid = false;

    m_business_id_isSet = false;
    m_business_id_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_config_was_isSet = false;
    m_config_was_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_deploy_key_fingerprint_isSet = false;
    m_deploy_key_fingerprint_isValid = false;

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_events_were_isSet = false;
    m_events_were_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_hook_id_isSet = false;
    m_hook_id_isValid = false;

    m_limited_availability_isSet = false;
    m_limited_availability_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_old_user_isSet = false;
    m_old_user_isValid = false;

    m_openssh_public_key_isSet = false;
    m_openssh_public_key_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_previous_visibility_isSet = false;
    m_previous_visibility_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_repository_public_isSet = false;
    m_repository_public_isValid = false;

    m_target_login_isSet = false;
    m_target_login_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_transport_protocol_isSet = false;
    m_transport_protocol_isValid = false;

    m_transport_protocol_name_isSet = false;
    m_transport_protocol_name_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIAudit_log_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudit_log_event::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("@timestamp")]);
    m_timestamp_isSet = !json[QString("@timestamp")].isNull() && m_timestamp_isValid;

    m__document_id_isValid = ::OpenAPI::fromJsonValue(m__document_id, json[QString("_document_id")]);
    m__document_id_isSet = !json[QString("_document_id")].isNull() && m__document_id_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_active_was_isValid = ::OpenAPI::fromJsonValue(m_active_was, json[QString("active_was")]);
    m_active_was_isSet = !json[QString("active_was")].isNull() && m_active_was_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_actor_id_isValid = ::OpenAPI::fromJsonValue(m_actor_id, json[QString("actor_id")]);
    m_actor_id_isSet = !json[QString("actor_id")].isNull() && m_actor_id_isValid;

    m_actor_location_isValid = ::OpenAPI::fromJsonValue(m_actor_location, json[QString("actor_location")]);
    m_actor_location_isSet = !json[QString("actor_location")].isNull() && m_actor_location_isValid;

    m_blocked_user_isValid = ::OpenAPI::fromJsonValue(m_blocked_user, json[QString("blocked_user")]);
    m_blocked_user_isSet = !json[QString("blocked_user")].isNull() && m_blocked_user_isValid;

    m_business_isValid = ::OpenAPI::fromJsonValue(m_business, json[QString("business")]);
    m_business_isSet = !json[QString("business")].isNull() && m_business_isValid;

    m_business_id_isValid = ::OpenAPI::fromJsonValue(m_business_id, json[QString("business_id")]);
    m_business_id_isSet = !json[QString("business_id")].isNull() && m_business_id_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_config_was_isValid = ::OpenAPI::fromJsonValue(m_config_was, json[QString("config_was")]);
    m_config_was_isSet = !json[QString("config_was")].isNull() && m_config_was_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_deploy_key_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_deploy_key_fingerprint, json[QString("deploy_key_fingerprint")]);
    m_deploy_key_fingerprint_isSet = !json[QString("deploy_key_fingerprint")].isNull() && m_deploy_key_fingerprint_isValid;

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_events_were_isValid = ::OpenAPI::fromJsonValue(m_events_were, json[QString("events_were")]);
    m_events_were_isSet = !json[QString("events_were")].isNull() && m_events_were_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_hook_id_isValid = ::OpenAPI::fromJsonValue(m_hook_id, json[QString("hook_id")]);
    m_hook_id_isSet = !json[QString("hook_id")].isNull() && m_hook_id_isValid;

    m_limited_availability_isValid = ::OpenAPI::fromJsonValue(m_limited_availability, json[QString("limited_availability")]);
    m_limited_availability_isSet = !json[QString("limited_availability")].isNull() && m_limited_availability_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_old_user_isValid = ::OpenAPI::fromJsonValue(m_old_user, json[QString("old_user")]);
    m_old_user_isSet = !json[QString("old_user")].isNull() && m_old_user_isValid;

    m_openssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_openssh_public_key, json[QString("openssh_public_key")]);
    m_openssh_public_key_isSet = !json[QString("openssh_public_key")].isNull() && m_openssh_public_key_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operation_type")]);
    m_operation_type_isSet = !json[QString("operation_type")].isNull() && m_operation_type_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_previous_visibility_isValid = ::OpenAPI::fromJsonValue(m_previous_visibility, json[QString("previous_visibility")]);
    m_previous_visibility_isSet = !json[QString("previous_visibility")].isNull() && m_previous_visibility_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_repository_public_isValid = ::OpenAPI::fromJsonValue(m_repository_public, json[QString("repository_public")]);
    m_repository_public_isSet = !json[QString("repository_public")].isNull() && m_repository_public_isValid;

    m_target_login_isValid = ::OpenAPI::fromJsonValue(m_target_login, json[QString("target_login")]);
    m_target_login_isSet = !json[QString("target_login")].isNull() && m_target_login_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_transport_protocol_isValid = ::OpenAPI::fromJsonValue(m_transport_protocol, json[QString("transport_protocol")]);
    m_transport_protocol_isSet = !json[QString("transport_protocol")].isNull() && m_transport_protocol_isValid;

    m_transport_protocol_name_isValid = ::OpenAPI::fromJsonValue(m_transport_protocol_name, json[QString("transport_protocol_name")]);
    m_transport_protocol_name_isSet = !json[QString("transport_protocol_name")].isNull() && m_transport_protocol_name_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIAudit_log_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudit_log_event::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("@timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m__document_id_isSet) {
        obj.insert(QString("_document_id"), ::OpenAPI::toJsonValue(m__document_id));
    }
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_active_was_isSet) {
        obj.insert(QString("active_was"), ::OpenAPI::toJsonValue(m_active_was));
    }
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_actor_id_isSet) {
        obj.insert(QString("actor_id"), ::OpenAPI::toJsonValue(m_actor_id));
    }
    if (m_actor_location.isSet()) {
        obj.insert(QString("actor_location"), ::OpenAPI::toJsonValue(m_actor_location));
    }
    if (m_blocked_user_isSet) {
        obj.insert(QString("blocked_user"), ::OpenAPI::toJsonValue(m_blocked_user));
    }
    if (m_business_isSet) {
        obj.insert(QString("business"), ::OpenAPI::toJsonValue(m_business));
    }
    if (m_business_id_isSet) {
        obj.insert(QString("business_id"), ::OpenAPI::toJsonValue(m_business_id));
    }
    if (m_config.size() > 0) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_config_was.size() > 0) {
        obj.insert(QString("config_was"), ::OpenAPI::toJsonValue(m_config_was));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_deploy_key_fingerprint_isSet) {
        obj.insert(QString("deploy_key_fingerprint"), ::OpenAPI::toJsonValue(m_deploy_key_fingerprint));
    }
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_events_were.size() > 0) {
        obj.insert(QString("events_were"), ::OpenAPI::toJsonValue(m_events_were));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_hook_id_isSet) {
        obj.insert(QString("hook_id"), ::OpenAPI::toJsonValue(m_hook_id));
    }
    if (m_limited_availability_isSet) {
        obj.insert(QString("limited_availability"), ::OpenAPI::toJsonValue(m_limited_availability));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_old_user_isSet) {
        obj.insert(QString("old_user"), ::OpenAPI::toJsonValue(m_old_user));
    }
    if (m_openssh_public_key_isSet) {
        obj.insert(QString("openssh_public_key"), ::OpenAPI::toJsonValue(m_openssh_public_key));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operation_type"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_previous_visibility_isSet) {
        obj.insert(QString("previous_visibility"), ::OpenAPI::toJsonValue(m_previous_visibility));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_repository_public_isSet) {
        obj.insert(QString("repository_public"), ::OpenAPI::toJsonValue(m_repository_public));
    }
    if (m_target_login_isSet) {
        obj.insert(QString("target_login"), ::OpenAPI::toJsonValue(m_target_login));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_transport_protocol_isSet) {
        obj.insert(QString("transport_protocol"), ::OpenAPI::toJsonValue(m_transport_protocol));
    }
    if (m_transport_protocol_name_isSet) {
        obj.insert(QString("transport_protocol_name"), ::OpenAPI::toJsonValue(m_transport_protocol_name));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

qint32 OAIAudit_log_event::getTimestamp() const {
    return m_timestamp;
}
void OAIAudit_log_event::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAudit_log_event::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAudit_log_event::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIAudit_log_event::getDocumentId() const {
    return m__document_id;
}
void OAIAudit_log_event::setDocumentId(const QString &_document_id) {
    m__document_id = _document_id;
    m__document_id_isSet = true;
}

bool OAIAudit_log_event::is__document_id_Set() const{
    return m__document_id_isSet;
}

bool OAIAudit_log_event::is__document_id_Valid() const{
    return m__document_id_isValid;
}

QString OAIAudit_log_event::getAction() const {
    return m_action;
}
void OAIAudit_log_event::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAudit_log_event::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAudit_log_event::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIAudit_log_event::isActive() const {
    return m_active;
}
void OAIAudit_log_event::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAudit_log_event::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAudit_log_event::is_active_Valid() const{
    return m_active_isValid;
}

bool OAIAudit_log_event::isActiveWas() const {
    return m_active_was;
}
void OAIAudit_log_event::setActiveWas(const bool &active_was) {
    m_active_was = active_was;
    m_active_was_isSet = true;
}

bool OAIAudit_log_event::is_active_was_Set() const{
    return m_active_was_isSet;
}

bool OAIAudit_log_event::is_active_was_Valid() const{
    return m_active_was_isValid;
}

QString OAIAudit_log_event::getActor() const {
    return m_actor;
}
void OAIAudit_log_event::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIAudit_log_event::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIAudit_log_event::is_actor_Valid() const{
    return m_actor_isValid;
}

qint32 OAIAudit_log_event::getActorId() const {
    return m_actor_id;
}
void OAIAudit_log_event::setActorId(const qint32 &actor_id) {
    m_actor_id = actor_id;
    m_actor_id_isSet = true;
}

bool OAIAudit_log_event::is_actor_id_Set() const{
    return m_actor_id_isSet;
}

bool OAIAudit_log_event::is_actor_id_Valid() const{
    return m_actor_id_isValid;
}

OAIAudit_log_event_actor_location OAIAudit_log_event::getActorLocation() const {
    return m_actor_location;
}
void OAIAudit_log_event::setActorLocation(const OAIAudit_log_event_actor_location &actor_location) {
    m_actor_location = actor_location;
    m_actor_location_isSet = true;
}

bool OAIAudit_log_event::is_actor_location_Set() const{
    return m_actor_location_isSet;
}

bool OAIAudit_log_event::is_actor_location_Valid() const{
    return m_actor_location_isValid;
}

QString OAIAudit_log_event::getBlockedUser() const {
    return m_blocked_user;
}
void OAIAudit_log_event::setBlockedUser(const QString &blocked_user) {
    m_blocked_user = blocked_user;
    m_blocked_user_isSet = true;
}

bool OAIAudit_log_event::is_blocked_user_Set() const{
    return m_blocked_user_isSet;
}

bool OAIAudit_log_event::is_blocked_user_Valid() const{
    return m_blocked_user_isValid;
}

QString OAIAudit_log_event::getBusiness() const {
    return m_business;
}
void OAIAudit_log_event::setBusiness(const QString &business) {
    m_business = business;
    m_business_isSet = true;
}

bool OAIAudit_log_event::is_business_Set() const{
    return m_business_isSet;
}

bool OAIAudit_log_event::is_business_Valid() const{
    return m_business_isValid;
}

qint32 OAIAudit_log_event::getBusinessId() const {
    return m_business_id;
}
void OAIAudit_log_event::setBusinessId(const qint32 &business_id) {
    m_business_id = business_id;
    m_business_id_isSet = true;
}

bool OAIAudit_log_event::is_business_id_Set() const{
    return m_business_id_isSet;
}

bool OAIAudit_log_event::is_business_id_Valid() const{
    return m_business_id_isValid;
}

QList<OAIObject> OAIAudit_log_event::getConfig() const {
    return m_config;
}
void OAIAudit_log_event::setConfig(const QList<OAIObject> &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIAudit_log_event::is_config_Set() const{
    return m_config_isSet;
}

bool OAIAudit_log_event::is_config_Valid() const{
    return m_config_isValid;
}

QList<OAIObject> OAIAudit_log_event::getConfigWas() const {
    return m_config_was;
}
void OAIAudit_log_event::setConfigWas(const QList<OAIObject> &config_was) {
    m_config_was = config_was;
    m_config_was_isSet = true;
}

bool OAIAudit_log_event::is_config_was_Set() const{
    return m_config_was_isSet;
}

bool OAIAudit_log_event::is_config_was_Valid() const{
    return m_config_was_isValid;
}

QString OAIAudit_log_event::getContentType() const {
    return m_content_type;
}
void OAIAudit_log_event::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAudit_log_event::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAudit_log_event::is_content_type_Valid() const{
    return m_content_type_isValid;
}

qint32 OAIAudit_log_event::getCreatedAt() const {
    return m_created_at;
}
void OAIAudit_log_event::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAudit_log_event::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAudit_log_event::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QMap<QString, QJsonValue> OAIAudit_log_event::getData() const {
    return m_data;
}
void OAIAudit_log_event::setData(const QMap<QString, QJsonValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAudit_log_event::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAudit_log_event::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIAudit_log_event::getDeployKeyFingerprint() const {
    return m_deploy_key_fingerprint;
}
void OAIAudit_log_event::setDeployKeyFingerprint(const QString &deploy_key_fingerprint) {
    m_deploy_key_fingerprint = deploy_key_fingerprint;
    m_deploy_key_fingerprint_isSet = true;
}

bool OAIAudit_log_event::is_deploy_key_fingerprint_Set() const{
    return m_deploy_key_fingerprint_isSet;
}

bool OAIAudit_log_event::is_deploy_key_fingerprint_Valid() const{
    return m_deploy_key_fingerprint_isValid;
}

QString OAIAudit_log_event::getEmoji() const {
    return m_emoji;
}
void OAIAudit_log_event::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIAudit_log_event::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIAudit_log_event::is_emoji_Valid() const{
    return m_emoji_isValid;
}

QList<OAIObject> OAIAudit_log_event::getEvents() const {
    return m_events;
}
void OAIAudit_log_event::setEvents(const QList<OAIObject> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIAudit_log_event::is_events_Set() const{
    return m_events_isSet;
}

bool OAIAudit_log_event::is_events_Valid() const{
    return m_events_isValid;
}

QList<OAIObject> OAIAudit_log_event::getEventsWere() const {
    return m_events_were;
}
void OAIAudit_log_event::setEventsWere(const QList<OAIObject> &events_were) {
    m_events_were = events_were;
    m_events_were_isSet = true;
}

bool OAIAudit_log_event::is_events_were_Set() const{
    return m_events_were_isSet;
}

bool OAIAudit_log_event::is_events_were_Valid() const{
    return m_events_were_isValid;
}

QString OAIAudit_log_event::getExplanation() const {
    return m_explanation;
}
void OAIAudit_log_event::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAIAudit_log_event::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAIAudit_log_event::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QString OAIAudit_log_event::getFingerprint() const {
    return m_fingerprint;
}
void OAIAudit_log_event::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIAudit_log_event::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIAudit_log_event::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

qint32 OAIAudit_log_event::getHookId() const {
    return m_hook_id;
}
void OAIAudit_log_event::setHookId(const qint32 &hook_id) {
    m_hook_id = hook_id;
    m_hook_id_isSet = true;
}

bool OAIAudit_log_event::is_hook_id_Set() const{
    return m_hook_id_isSet;
}

bool OAIAudit_log_event::is_hook_id_Valid() const{
    return m_hook_id_isValid;
}

bool OAIAudit_log_event::isLimitedAvailability() const {
    return m_limited_availability;
}
void OAIAudit_log_event::setLimitedAvailability(const bool &limited_availability) {
    m_limited_availability = limited_availability;
    m_limited_availability_isSet = true;
}

bool OAIAudit_log_event::is_limited_availability_Set() const{
    return m_limited_availability_isSet;
}

bool OAIAudit_log_event::is_limited_availability_Valid() const{
    return m_limited_availability_isValid;
}

QString OAIAudit_log_event::getMessage() const {
    return m_message;
}
void OAIAudit_log_event::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAudit_log_event::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAudit_log_event::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAudit_log_event::getName() const {
    return m_name;
}
void OAIAudit_log_event::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAudit_log_event::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudit_log_event::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAudit_log_event::getOldUser() const {
    return m_old_user;
}
void OAIAudit_log_event::setOldUser(const QString &old_user) {
    m_old_user = old_user;
    m_old_user_isSet = true;
}

bool OAIAudit_log_event::is_old_user_Set() const{
    return m_old_user_isSet;
}

bool OAIAudit_log_event::is_old_user_Valid() const{
    return m_old_user_isValid;
}

QString OAIAudit_log_event::getOpensshPublicKey() const {
    return m_openssh_public_key;
}
void OAIAudit_log_event::setOpensshPublicKey(const QString &openssh_public_key) {
    m_openssh_public_key = openssh_public_key;
    m_openssh_public_key_isSet = true;
}

bool OAIAudit_log_event::is_openssh_public_key_Set() const{
    return m_openssh_public_key_isSet;
}

bool OAIAudit_log_event::is_openssh_public_key_Valid() const{
    return m_openssh_public_key_isValid;
}

QString OAIAudit_log_event::getOperationType() const {
    return m_operation_type;
}
void OAIAudit_log_event::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIAudit_log_event::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIAudit_log_event::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIAudit_log_event::getOrg() const {
    return m_org;
}
void OAIAudit_log_event::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIAudit_log_event::is_org_Set() const{
    return m_org_isSet;
}

bool OAIAudit_log_event::is_org_Valid() const{
    return m_org_isValid;
}

qint32 OAIAudit_log_event::getOrgId() const {
    return m_org_id;
}
void OAIAudit_log_event::setOrgId(const qint32 &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIAudit_log_event::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIAudit_log_event::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIAudit_log_event::getPreviousVisibility() const {
    return m_previous_visibility;
}
void OAIAudit_log_event::setPreviousVisibility(const QString &previous_visibility) {
    m_previous_visibility = previous_visibility;
    m_previous_visibility_isSet = true;
}

bool OAIAudit_log_event::is_previous_visibility_Set() const{
    return m_previous_visibility_isSet;
}

bool OAIAudit_log_event::is_previous_visibility_Valid() const{
    return m_previous_visibility_isValid;
}

bool OAIAudit_log_event::isReadOnly() const {
    return m_read_only;
}
void OAIAudit_log_event::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIAudit_log_event::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIAudit_log_event::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIAudit_log_event::getRepo() const {
    return m_repo;
}
void OAIAudit_log_event::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIAudit_log_event::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIAudit_log_event::is_repo_Valid() const{
    return m_repo_isValid;
}

QString OAIAudit_log_event::getRepository() const {
    return m_repository;
}
void OAIAudit_log_event::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIAudit_log_event::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIAudit_log_event::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIAudit_log_event::isRepositoryPublic() const {
    return m_repository_public;
}
void OAIAudit_log_event::setRepositoryPublic(const bool &repository_public) {
    m_repository_public = repository_public;
    m_repository_public_isSet = true;
}

bool OAIAudit_log_event::is_repository_public_Set() const{
    return m_repository_public_isSet;
}

bool OAIAudit_log_event::is_repository_public_Valid() const{
    return m_repository_public_isValid;
}

QString OAIAudit_log_event::getTargetLogin() const {
    return m_target_login;
}
void OAIAudit_log_event::setTargetLogin(const QString &target_login) {
    m_target_login = target_login;
    m_target_login_isSet = true;
}

bool OAIAudit_log_event::is_target_login_Set() const{
    return m_target_login_isSet;
}

bool OAIAudit_log_event::is_target_login_Valid() const{
    return m_target_login_isValid;
}

QString OAIAudit_log_event::getTeam() const {
    return m_team;
}
void OAIAudit_log_event::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIAudit_log_event::is_team_Set() const{
    return m_team_isSet;
}

bool OAIAudit_log_event::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIAudit_log_event::getTransportProtocol() const {
    return m_transport_protocol;
}
void OAIAudit_log_event::setTransportProtocol(const qint32 &transport_protocol) {
    m_transport_protocol = transport_protocol;
    m_transport_protocol_isSet = true;
}

bool OAIAudit_log_event::is_transport_protocol_Set() const{
    return m_transport_protocol_isSet;
}

bool OAIAudit_log_event::is_transport_protocol_Valid() const{
    return m_transport_protocol_isValid;
}

QString OAIAudit_log_event::getTransportProtocolName() const {
    return m_transport_protocol_name;
}
void OAIAudit_log_event::setTransportProtocolName(const QString &transport_protocol_name) {
    m_transport_protocol_name = transport_protocol_name;
    m_transport_protocol_name_isSet = true;
}

bool OAIAudit_log_event::is_transport_protocol_name_Set() const{
    return m_transport_protocol_name_isSet;
}

bool OAIAudit_log_event::is_transport_protocol_name_Valid() const{
    return m_transport_protocol_name_isValid;
}

QString OAIAudit_log_event::getUser() const {
    return m_user;
}
void OAIAudit_log_event::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAudit_log_event::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAudit_log_event::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIAudit_log_event::getUserId() const {
    return m_user_id;
}
void OAIAudit_log_event::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAudit_log_event::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAudit_log_event::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAudit_log_event::getVisibility() const {
    return m_visibility;
}
void OAIAudit_log_event::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIAudit_log_event::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIAudit_log_event::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIAudit_log_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_was_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_was.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_key_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_were.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hook_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limited_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_protocol_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudit_log_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
