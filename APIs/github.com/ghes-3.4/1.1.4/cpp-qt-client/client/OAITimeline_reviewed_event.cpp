/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline_reviewed_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline_reviewed_event::OAITimeline_reviewed_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline_reviewed_event::OAITimeline_reviewed_event() {
    this->initializeModel();
}

OAITimeline_reviewed_event::~OAITimeline_reviewed_event() {}

void OAITimeline_reviewed_event::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_body_text_isSet = false;
    m_body_text_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_pull_request_url_isSet = false;
    m_pull_request_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submitted_at_isSet = false;
    m_submitted_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITimeline_reviewed_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline_reviewed_event::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_body_text_isValid = ::OpenAPI::fromJsonValue(m_body_text, json[QString("body_text")]);
    m_body_text_isSet = !json[QString("body_text")].isNull() && m_body_text_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_pull_request_url_isValid = ::OpenAPI::fromJsonValue(m_pull_request_url, json[QString("pull_request_url")]);
    m_pull_request_url_isSet = !json[QString("pull_request_url")].isNull() && m_pull_request_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submitted_at_isValid = ::OpenAPI::fromJsonValue(m_submitted_at, json[QString("submitted_at")]);
    m_submitted_at_isSet = !json[QString("submitted_at")].isNull() && m_submitted_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITimeline_reviewed_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline_reviewed_event::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_body_text_isSet) {
        obj.insert(QString("body_text"), ::OpenAPI::toJsonValue(m_body_text));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_pull_request_url_isSet) {
        obj.insert(QString("pull_request_url"), ::OpenAPI::toJsonValue(m_pull_request_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submitted_at_isSet) {
        obj.insert(QString("submitted_at"), ::OpenAPI::toJsonValue(m_submitted_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIPull_request_review__links OAITimeline_reviewed_event::getLinks() const {
    return m__links;
}
void OAITimeline_reviewed_event::setLinks(const OAIPull_request_review__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAITimeline_reviewed_event::is__links_Set() const{
    return m__links_isSet;
}

bool OAITimeline_reviewed_event::is__links_Valid() const{
    return m__links_isValid;
}

OAIAuthor_association OAITimeline_reviewed_event::getAuthorAssociation() const {
    return m_author_association;
}
void OAITimeline_reviewed_event::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAITimeline_reviewed_event::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAITimeline_reviewed_event::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAITimeline_reviewed_event::getBody() const {
    return m_body;
}
void OAITimeline_reviewed_event::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITimeline_reviewed_event::is_body_Set() const{
    return m_body_isSet;
}

bool OAITimeline_reviewed_event::is_body_Valid() const{
    return m_body_isValid;
}

QString OAITimeline_reviewed_event::getBodyHtml() const {
    return m_body_html;
}
void OAITimeline_reviewed_event::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAITimeline_reviewed_event::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAITimeline_reviewed_event::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAITimeline_reviewed_event::getBodyText() const {
    return m_body_text;
}
void OAITimeline_reviewed_event::setBodyText(const QString &body_text) {
    m_body_text = body_text;
    m_body_text_isSet = true;
}

bool OAITimeline_reviewed_event::is_body_text_Set() const{
    return m_body_text_isSet;
}

bool OAITimeline_reviewed_event::is_body_text_Valid() const{
    return m_body_text_isValid;
}

QString OAITimeline_reviewed_event::getCommitId() const {
    return m_commit_id;
}
void OAITimeline_reviewed_event::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAITimeline_reviewed_event::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAITimeline_reviewed_event::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAITimeline_reviewed_event::getEvent() const {
    return m_event;
}
void OAITimeline_reviewed_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAITimeline_reviewed_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAITimeline_reviewed_event::is_event_Valid() const{
    return m_event_isValid;
}

QString OAITimeline_reviewed_event::getHtmlUrl() const {
    return m_html_url;
}
void OAITimeline_reviewed_event::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITimeline_reviewed_event::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITimeline_reviewed_event::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAITimeline_reviewed_event::getId() const {
    return m_id;
}
void OAITimeline_reviewed_event::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimeline_reviewed_event::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimeline_reviewed_event::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITimeline_reviewed_event::getNodeId() const {
    return m_node_id;
}
void OAITimeline_reviewed_event::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITimeline_reviewed_event::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITimeline_reviewed_event::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAITimeline_reviewed_event::getPullRequestUrl() const {
    return m_pull_request_url;
}
void OAITimeline_reviewed_event::setPullRequestUrl(const QString &pull_request_url) {
    m_pull_request_url = pull_request_url;
    m_pull_request_url_isSet = true;
}

bool OAITimeline_reviewed_event::is_pull_request_url_Set() const{
    return m_pull_request_url_isSet;
}

bool OAITimeline_reviewed_event::is_pull_request_url_Valid() const{
    return m_pull_request_url_isValid;
}

QString OAITimeline_reviewed_event::getState() const {
    return m_state;
}
void OAITimeline_reviewed_event::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITimeline_reviewed_event::is_state_Set() const{
    return m_state_isSet;
}

bool OAITimeline_reviewed_event::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAITimeline_reviewed_event::getSubmittedAt() const {
    return m_submitted_at;
}
void OAITimeline_reviewed_event::setSubmittedAt(const QDateTime &submitted_at) {
    m_submitted_at = submitted_at;
    m_submitted_at_isSet = true;
}

bool OAITimeline_reviewed_event::is_submitted_at_Set() const{
    return m_submitted_at_isSet;
}

bool OAITimeline_reviewed_event::is_submitted_at_Valid() const{
    return m_submitted_at_isValid;
}

OAISimple_user OAITimeline_reviewed_event::getUser() const {
    return m_user;
}
void OAITimeline_reviewed_event::setUser(const OAISimple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITimeline_reviewed_event::is_user_Set() const{
    return m_user_isSet;
}

bool OAITimeline_reviewed_event::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITimeline_reviewed_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline_reviewed_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_author_association_isValid && m_body_isValid && m_commit_id_isValid && m_event_isValid && m_html_url_isValid && m_id_isValid && m_node_id_isValid && m_pull_request_url_isValid && m_state_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
