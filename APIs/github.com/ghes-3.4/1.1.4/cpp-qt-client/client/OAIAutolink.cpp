/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutolink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutolink::OAIAutolink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutolink::OAIAutolink() {
    this->initializeModel();
}

OAIAutolink::~OAIAutolink() {}

void OAIAutolink::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_prefix_isSet = false;
    m_key_prefix_isValid = false;

    m_url_template_isSet = false;
    m_url_template_isValid = false;
}

void OAIAutolink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutolink::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_key_prefix, json[QString("key_prefix")]);
    m_key_prefix_isSet = !json[QString("key_prefix")].isNull() && m_key_prefix_isValid;

    m_url_template_isValid = ::OpenAPI::fromJsonValue(m_url_template, json[QString("url_template")]);
    m_url_template_isSet = !json[QString("url_template")].isNull() && m_url_template_isValid;
}

QString OAIAutolink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutolink::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_prefix_isSet) {
        obj.insert(QString("key_prefix"), ::OpenAPI::toJsonValue(m_key_prefix));
    }
    if (m_url_template_isSet) {
        obj.insert(QString("url_template"), ::OpenAPI::toJsonValue(m_url_template));
    }
    return obj;
}

qint32 OAIAutolink::getId() const {
    return m_id;
}
void OAIAutolink::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAutolink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAutolink::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAutolink::getKeyPrefix() const {
    return m_key_prefix;
}
void OAIAutolink::setKeyPrefix(const QString &key_prefix) {
    m_key_prefix = key_prefix;
    m_key_prefix_isSet = true;
}

bool OAIAutolink::is_key_prefix_Set() const{
    return m_key_prefix_isSet;
}

bool OAIAutolink::is_key_prefix_Valid() const{
    return m_key_prefix_isValid;
}

QString OAIAutolink::getUrlTemplate() const {
    return m_url_template;
}
void OAIAutolink::setUrlTemplate(const QString &url_template) {
    m_url_template = url_template;
    m_url_template_isSet = true;
}

bool OAIAutolink::is_url_template_Set() const{
    return m_url_template_isSet;
}

bool OAIAutolink::is_url_template_Valid() const{
    return m_url_template_isValid;
}

bool OAIAutolink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutolink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_key_prefix_isValid && m_url_template_isValid && true;
}

} // namespace OpenAPI
