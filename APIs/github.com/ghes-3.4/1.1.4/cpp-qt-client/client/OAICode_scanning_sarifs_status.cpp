/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_sarifs_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_sarifs_status::OAICode_scanning_sarifs_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_sarifs_status::OAICode_scanning_sarifs_status() {
    this->initializeModel();
}

OAICode_scanning_sarifs_status::~OAICode_scanning_sarifs_status() {}

void OAICode_scanning_sarifs_status::initializeModel() {

    m_analyses_url_isSet = false;
    m_analyses_url_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_processing_status_isSet = false;
    m_processing_status_isValid = false;
}

void OAICode_scanning_sarifs_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_sarifs_status::fromJsonObject(QJsonObject json) {

    m_analyses_url_isValid = ::OpenAPI::fromJsonValue(m_analyses_url, json[QString("analyses_url")]);
    m_analyses_url_isSet = !json[QString("analyses_url")].isNull() && m_analyses_url_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_processing_status_isValid = ::OpenAPI::fromJsonValue(m_processing_status, json[QString("processing_status")]);
    m_processing_status_isSet = !json[QString("processing_status")].isNull() && m_processing_status_isValid;
}

QString OAICode_scanning_sarifs_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_sarifs_status::asJsonObject() const {
    QJsonObject obj;
    if (m_analyses_url_isSet) {
        obj.insert(QString("analyses_url"), ::OpenAPI::toJsonValue(m_analyses_url));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_processing_status_isSet) {
        obj.insert(QString("processing_status"), ::OpenAPI::toJsonValue(m_processing_status));
    }
    return obj;
}

QString OAICode_scanning_sarifs_status::getAnalysesUrl() const {
    return m_analyses_url;
}
void OAICode_scanning_sarifs_status::setAnalysesUrl(const QString &analyses_url) {
    m_analyses_url = analyses_url;
    m_analyses_url_isSet = true;
}

bool OAICode_scanning_sarifs_status::is_analyses_url_Set() const{
    return m_analyses_url_isSet;
}

bool OAICode_scanning_sarifs_status::is_analyses_url_Valid() const{
    return m_analyses_url_isValid;
}

QList<QString> OAICode_scanning_sarifs_status::getErrors() const {
    return m_errors;
}
void OAICode_scanning_sarifs_status::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICode_scanning_sarifs_status::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICode_scanning_sarifs_status::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICode_scanning_sarifs_status::getProcessingStatus() const {
    return m_processing_status;
}
void OAICode_scanning_sarifs_status::setProcessingStatus(const QString &processing_status) {
    m_processing_status = processing_status;
    m_processing_status_isSet = true;
}

bool OAICode_scanning_sarifs_status::is_processing_status_Set() const{
    return m_processing_status_isSet;
}

bool OAICode_scanning_sarifs_status::is_processing_status_Valid() const{
    return m_processing_status_isValid;
}

bool OAICode_scanning_sarifs_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_sarifs_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
