/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_request_minimal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_request_minimal::OAIPull_request_minimal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_request_minimal::OAIPull_request_minimal() {
    this->initializeModel();
}

OAIPull_request_minimal::~OAIPull_request_minimal() {}

void OAIPull_request_minimal::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_head_isSet = false;
    m_head_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPull_request_minimal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_request_minimal::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_head_isValid = ::OpenAPI::fromJsonValue(m_head, json[QString("head")]);
    m_head_isSet = !json[QString("head")].isNull() && m_head_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPull_request_minimal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_request_minimal::asJsonObject() const {
    QJsonObject obj;
    if (m_base.isSet()) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_head.isSet()) {
        obj.insert(QString("head"), ::OpenAPI::toJsonValue(m_head));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIPull_request_minimal_base OAIPull_request_minimal::getBase() const {
    return m_base;
}
void OAIPull_request_minimal::setBase(const OAIPull_request_minimal_base &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIPull_request_minimal::is_base_Set() const{
    return m_base_isSet;
}

bool OAIPull_request_minimal::is_base_Valid() const{
    return m_base_isValid;
}

OAIPull_request_minimal_base OAIPull_request_minimal::getHead() const {
    return m_head;
}
void OAIPull_request_minimal::setHead(const OAIPull_request_minimal_base &head) {
    m_head = head;
    m_head_isSet = true;
}

bool OAIPull_request_minimal::is_head_Set() const{
    return m_head_isSet;
}

bool OAIPull_request_minimal::is_head_Valid() const{
    return m_head_isValid;
}

qint32 OAIPull_request_minimal::getId() const {
    return m_id;
}
void OAIPull_request_minimal::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPull_request_minimal::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPull_request_minimal::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPull_request_minimal::getNumber() const {
    return m_number;
}
void OAIPull_request_minimal::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPull_request_minimal::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPull_request_minimal::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPull_request_minimal::getUrl() const {
    return m_url;
}
void OAIPull_request_minimal::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPull_request_minimal::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPull_request_minimal::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPull_request_minimal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_request_minimal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_isValid && m_head_isValid && m_id_isValid && m_number_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
