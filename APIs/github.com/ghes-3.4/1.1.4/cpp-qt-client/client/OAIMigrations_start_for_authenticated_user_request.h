/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMigrations_start_for_authenticated_user_request.h
 *
 * 
 */

#ifndef OAIMigrations_start_for_authenticated_user_request_H
#define OAIMigrations_start_for_authenticated_user_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMigrations_start_for_authenticated_user_request : public OAIObject {
public:
    OAIMigrations_start_for_authenticated_user_request();
    OAIMigrations_start_for_authenticated_user_request(QString json);
    ~OAIMigrations_start_for_authenticated_user_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getExclude() const;
    void setExclude(const QList<QString> &exclude);
    bool is_exclude_Set() const;
    bool is_exclude_Valid() const;

    bool isExcludeAttachments() const;
    void setExcludeAttachments(const bool &exclude_attachments);
    bool is_exclude_attachments_Set() const;
    bool is_exclude_attachments_Valid() const;

    bool isExcludeGitData() const;
    void setExcludeGitData(const bool &exclude_git_data);
    bool is_exclude_git_data_Set() const;
    bool is_exclude_git_data_Valid() const;

    bool isExcludeMetadata() const;
    void setExcludeMetadata(const bool &exclude_metadata);
    bool is_exclude_metadata_Set() const;
    bool is_exclude_metadata_Valid() const;

    bool isExcludeOwnerProjects() const;
    void setExcludeOwnerProjects(const bool &exclude_owner_projects);
    bool is_exclude_owner_projects_Set() const;
    bool is_exclude_owner_projects_Valid() const;

    bool isExcludeReleases() const;
    void setExcludeReleases(const bool &exclude_releases);
    bool is_exclude_releases_Set() const;
    bool is_exclude_releases_Valid() const;

    bool isLockRepositories() const;
    void setLockRepositories(const bool &lock_repositories);
    bool is_lock_repositories_Set() const;
    bool is_lock_repositories_Valid() const;

    bool isOrgMetadataOnly() const;
    void setOrgMetadataOnly(const bool &org_metadata_only);
    bool is_org_metadata_only_Set() const;
    bool is_org_metadata_only_Valid() const;

    QList<QString> getRepositories() const;
    void setRepositories(const QList<QString> &repositories);
    bool is_repositories_Set() const;
    bool is_repositories_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_exclude;
    bool m_exclude_isSet;
    bool m_exclude_isValid;

    bool m_exclude_attachments;
    bool m_exclude_attachments_isSet;
    bool m_exclude_attachments_isValid;

    bool m_exclude_git_data;
    bool m_exclude_git_data_isSet;
    bool m_exclude_git_data_isValid;

    bool m_exclude_metadata;
    bool m_exclude_metadata_isSet;
    bool m_exclude_metadata_isValid;

    bool m_exclude_owner_projects;
    bool m_exclude_owner_projects_isSet;
    bool m_exclude_owner_projects_isValid;

    bool m_exclude_releases;
    bool m_exclude_releases_isSet;
    bool m_exclude_releases_isValid;

    bool m_lock_repositories;
    bool m_lock_repositories_isSet;
    bool m_lock_repositories_isValid;

    bool m_org_metadata_only;
    bool m_org_metadata_only_isSet;
    bool m_org_metadata_only_isValid;

    QList<QString> m_repositories;
    bool m_repositories_isSet;
    bool m_repositories_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMigrations_start_for_authenticated_user_request)

#endif // OAIMigrations_start_for_authenticated_user_request_H
