/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_comment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_comment::OAIIssue_comment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_comment::OAIIssue_comment() {
    this->initializeModel();
}

OAIIssue_comment::~OAIIssue_comment() {}

void OAIIssue_comment::initializeModel() {

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_body_text_isSet = false;
    m_body_text_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIssue_comment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_comment::fromJsonObject(QJsonObject json) {

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_body_text_isValid = ::OpenAPI::fromJsonValue(m_body_text, json[QString("body_text")]);
    m_body_text_isSet = !json[QString("body_text")].isNull() && m_body_text_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIssue_comment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_comment::asJsonObject() const {
    QJsonObject obj;
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_body_text_isSet) {
        obj.insert(QString("body_text"), ::OpenAPI::toJsonValue(m_body_text));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAuthor_association OAIIssue_comment::getAuthorAssociation() const {
    return m_author_association;
}
void OAIIssue_comment::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAIIssue_comment::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAIIssue_comment::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAIIssue_comment::getBody() const {
    return m_body;
}
void OAIIssue_comment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIIssue_comment::is_body_Set() const{
    return m_body_isSet;
}

bool OAIIssue_comment::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIIssue_comment::getBodyHtml() const {
    return m_body_html;
}
void OAIIssue_comment::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAIIssue_comment::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAIIssue_comment::is_body_html_Valid() const{
    return m_body_html_isValid;
}

QString OAIIssue_comment::getBodyText() const {
    return m_body_text;
}
void OAIIssue_comment::setBodyText(const QString &body_text) {
    m_body_text = body_text;
    m_body_text_isSet = true;
}

bool OAIIssue_comment::is_body_text_Set() const{
    return m_body_text_isSet;
}

bool OAIIssue_comment::is_body_text_Valid() const{
    return m_body_text_isValid;
}

QDateTime OAIIssue_comment::getCreatedAt() const {
    return m_created_at;
}
void OAIIssue_comment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIssue_comment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIssue_comment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIIssue_comment::getHtmlUrl() const {
    return m_html_url;
}
void OAIIssue_comment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIIssue_comment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIIssue_comment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIIssue_comment::getId() const {
    return m_id;
}
void OAIIssue_comment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssue_comment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssue_comment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIssue_comment::getIssueUrl() const {
    return m_issue_url;
}
void OAIIssue_comment::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAIIssue_comment::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAIIssue_comment::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

QString OAIIssue_comment::getNodeId() const {
    return m_node_id;
}
void OAIIssue_comment::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIIssue_comment::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIIssue_comment::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINullable_integration OAIIssue_comment::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAIIssue_comment::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAIIssue_comment::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAIIssue_comment::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

OAIReaction_rollup OAIIssue_comment::getReactions() const {
    return m_reactions;
}
void OAIIssue_comment::setReactions(const OAIReaction_rollup &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIIssue_comment::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIIssue_comment::is_reactions_Valid() const{
    return m_reactions_isValid;
}

QDateTime OAIIssue_comment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIIssue_comment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIIssue_comment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIIssue_comment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIIssue_comment::getUrl() const {
    return m_url;
}
void OAIIssue_comment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIssue_comment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIssue_comment::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIIssue_comment::getUser() const {
    return m_user;
}
void OAIIssue_comment::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIssue_comment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIssue_comment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIssue_comment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_comment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_association_isValid && m_created_at_isValid && m_html_url_isValid && m_id_isValid && m_issue_url_isValid && m_node_id_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
