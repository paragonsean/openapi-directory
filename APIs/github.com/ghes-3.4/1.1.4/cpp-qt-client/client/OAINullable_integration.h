/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINullable_integration.h
 *
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */

#ifndef OAINullable_integration_H
#define OAINullable_integration_H

#include <QJsonObject>

#include "OAIIntegration_permissions.h"
#include "OAINullable_simple_user.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_user;

class OAINullable_integration : public OAIObject {
public:
    OAINullable_integration();
    OAINullable_integration(QString json);
    ~OAINullable_integration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientSecret() const;
    void setClientSecret(const QString &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getEvents() const;
    void setEvents(const QList<QString> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getExternalUrl() const;
    void setExternalUrl(const QString &external_url);
    bool is_external_url_Set() const;
    bool is_external_url_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getInstallationsCount() const;
    void setInstallationsCount(const qint32 &installations_count);
    bool is_installations_count_Set() const;
    bool is_installations_count_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAINullable_simple_user getOwner() const;
    void setOwner(const OAINullable_simple_user &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getPem() const;
    void setPem(const QString &pem);
    bool is_pem_Set() const;
    bool is_pem_Valid() const;

    OAIIntegration_permissions getPermissions() const;
    void setPermissions(const OAIIntegration_permissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getWebhookSecret() const;
    void setWebhookSecret(const QString &webhook_secret);
    bool is_webhook_secret_Set() const;
    bool is_webhook_secret_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_external_url;
    bool m_external_url_isSet;
    bool m_external_url_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_installations_count;
    bool m_installations_count_isSet;
    bool m_installations_count_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAINullable_simple_user m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_pem;
    bool m_pem_isSet;
    bool m_pem_isValid;

    OAIIntegration_permissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_webhook_secret;
    bool m_webhook_secret_isSet;
    bool m_webhook_secret_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINullable_integration)

#endif // OAINullable_integration_H
