/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_list_cache_info_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_list_cache_info_200_response_inner::OAIRepos_list_cache_info_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_list_cache_info_200_response_inner::OAIRepos_list_cache_info_200_response_inner() {
    this->initializeModel();
}

OAIRepos_list_cache_info_200_response_inner::~OAIRepos_list_cache_info_200_response_inner() {}

void OAIRepos_list_cache_info_200_response_inner::initializeModel() {

    m_git_isSet = false;
    m_git_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIRepos_list_cache_info_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_list_cache_info_200_response_inner::fromJsonObject(QJsonObject json) {

    m_git_isValid = ::OpenAPI::fromJsonValue(m_git, json[QString("git")]);
    m_git_isSet = !json[QString("git")].isNull() && m_git_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIRepos_list_cache_info_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_list_cache_info_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_git.isSet()) {
        obj.insert(QString("git"), ::OpenAPI::toJsonValue(m_git));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

OAIRepos_list_cache_info_200_response_inner_git OAIRepos_list_cache_info_200_response_inner::getGit() const {
    return m_git;
}
void OAIRepos_list_cache_info_200_response_inner::setGit(const OAIRepos_list_cache_info_200_response_inner_git &git) {
    m_git = git;
    m_git_isSet = true;
}

bool OAIRepos_list_cache_info_200_response_inner::is_git_Set() const{
    return m_git_isSet;
}

bool OAIRepos_list_cache_info_200_response_inner::is_git_Valid() const{
    return m_git_isValid;
}

QString OAIRepos_list_cache_info_200_response_inner::getHost() const {
    return m_host;
}
void OAIRepos_list_cache_info_200_response_inner::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIRepos_list_cache_info_200_response_inner::is_host_Set() const{
    return m_host_isSet;
}

bool OAIRepos_list_cache_info_200_response_inner::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIRepos_list_cache_info_200_response_inner::getLocation() const {
    return m_location;
}
void OAIRepos_list_cache_info_200_response_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRepos_list_cache_info_200_response_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRepos_list_cache_info_200_response_inner::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIRepos_list_cache_info_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_git.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_list_cache_info_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_git_isValid && m_host_isValid && m_location_isValid && true;
}

} // namespace OpenAPI
