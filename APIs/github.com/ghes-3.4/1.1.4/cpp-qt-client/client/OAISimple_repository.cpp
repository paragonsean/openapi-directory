/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimple_repository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimple_repository::OAISimple_repository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimple_repository::OAISimple_repository() {
    this->initializeModel();
}

OAISimple_repository::~OAISimple_repository() {}

void OAISimple_repository::initializeModel() {

    m_archive_url_isSet = false;
    m_archive_url_isValid = false;

    m_assignees_url_isSet = false;
    m_assignees_url_isValid = false;

    m_blobs_url_isSet = false;
    m_blobs_url_isValid = false;

    m_branches_url_isSet = false;
    m_branches_url_isValid = false;

    m_collaborators_url_isSet = false;
    m_collaborators_url_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commits_url_isSet = false;
    m_commits_url_isValid = false;

    m_compare_url_isSet = false;
    m_compare_url_isValid = false;

    m_contents_url_isSet = false;
    m_contents_url_isValid = false;

    m_contributors_url_isSet = false;
    m_contributors_url_isValid = false;

    m_deployments_url_isSet = false;
    m_deployments_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_downloads_url_isSet = false;
    m_downloads_url_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_fork_isSet = false;
    m_fork_isValid = false;

    m_forks_url_isSet = false;
    m_forks_url_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_git_commits_url_isSet = false;
    m_git_commits_url_isValid = false;

    m_git_refs_url_isSet = false;
    m_git_refs_url_isValid = false;

    m_git_tags_url_isSet = false;
    m_git_tags_url_isValid = false;

    m_hooks_url_isSet = false;
    m_hooks_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_comment_url_isSet = false;
    m_issue_comment_url_isValid = false;

    m_issue_events_url_isSet = false;
    m_issue_events_url_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_keys_url_isSet = false;
    m_keys_url_isValid = false;

    m_labels_url_isSet = false;
    m_labels_url_isValid = false;

    m_languages_url_isSet = false;
    m_languages_url_isValid = false;

    m_merges_url_isSet = false;
    m_merges_url_isValid = false;

    m_milestones_url_isSet = false;
    m_milestones_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_notifications_url_isSet = false;
    m_notifications_url_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_pulls_url_isSet = false;
    m_pulls_url_isValid = false;

    m_releases_url_isSet = false;
    m_releases_url_isValid = false;

    m_stargazers_url_isSet = false;
    m_stargazers_url_isValid = false;

    m_statuses_url_isSet = false;
    m_statuses_url_isValid = false;

    m_subscribers_url_isSet = false;
    m_subscribers_url_isValid = false;

    m_subscription_url_isSet = false;
    m_subscription_url_isValid = false;

    m_tags_url_isSet = false;
    m_tags_url_isValid = false;

    m_teams_url_isSet = false;
    m_teams_url_isValid = false;

    m_trees_url_isSet = false;
    m_trees_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISimple_repository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimple_repository::fromJsonObject(QJsonObject json) {

    m_archive_url_isValid = ::OpenAPI::fromJsonValue(m_archive_url, json[QString("archive_url")]);
    m_archive_url_isSet = !json[QString("archive_url")].isNull() && m_archive_url_isValid;

    m_assignees_url_isValid = ::OpenAPI::fromJsonValue(m_assignees_url, json[QString("assignees_url")]);
    m_assignees_url_isSet = !json[QString("assignees_url")].isNull() && m_assignees_url_isValid;

    m_blobs_url_isValid = ::OpenAPI::fromJsonValue(m_blobs_url, json[QString("blobs_url")]);
    m_blobs_url_isSet = !json[QString("blobs_url")].isNull() && m_blobs_url_isValid;

    m_branches_url_isValid = ::OpenAPI::fromJsonValue(m_branches_url, json[QString("branches_url")]);
    m_branches_url_isSet = !json[QString("branches_url")].isNull() && m_branches_url_isValid;

    m_collaborators_url_isValid = ::OpenAPI::fromJsonValue(m_collaborators_url, json[QString("collaborators_url")]);
    m_collaborators_url_isSet = !json[QString("collaborators_url")].isNull() && m_collaborators_url_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commits_url_isValid = ::OpenAPI::fromJsonValue(m_commits_url, json[QString("commits_url")]);
    m_commits_url_isSet = !json[QString("commits_url")].isNull() && m_commits_url_isValid;

    m_compare_url_isValid = ::OpenAPI::fromJsonValue(m_compare_url, json[QString("compare_url")]);
    m_compare_url_isSet = !json[QString("compare_url")].isNull() && m_compare_url_isValid;

    m_contents_url_isValid = ::OpenAPI::fromJsonValue(m_contents_url, json[QString("contents_url")]);
    m_contents_url_isSet = !json[QString("contents_url")].isNull() && m_contents_url_isValid;

    m_contributors_url_isValid = ::OpenAPI::fromJsonValue(m_contributors_url, json[QString("contributors_url")]);
    m_contributors_url_isSet = !json[QString("contributors_url")].isNull() && m_contributors_url_isValid;

    m_deployments_url_isValid = ::OpenAPI::fromJsonValue(m_deployments_url, json[QString("deployments_url")]);
    m_deployments_url_isSet = !json[QString("deployments_url")].isNull() && m_deployments_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_downloads_url_isValid = ::OpenAPI::fromJsonValue(m_downloads_url, json[QString("downloads_url")]);
    m_downloads_url_isSet = !json[QString("downloads_url")].isNull() && m_downloads_url_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_fork_isValid = ::OpenAPI::fromJsonValue(m_fork, json[QString("fork")]);
    m_fork_isSet = !json[QString("fork")].isNull() && m_fork_isValid;

    m_forks_url_isValid = ::OpenAPI::fromJsonValue(m_forks_url, json[QString("forks_url")]);
    m_forks_url_isSet = !json[QString("forks_url")].isNull() && m_forks_url_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_git_commits_url_isValid = ::OpenAPI::fromJsonValue(m_git_commits_url, json[QString("git_commits_url")]);
    m_git_commits_url_isSet = !json[QString("git_commits_url")].isNull() && m_git_commits_url_isValid;

    m_git_refs_url_isValid = ::OpenAPI::fromJsonValue(m_git_refs_url, json[QString("git_refs_url")]);
    m_git_refs_url_isSet = !json[QString("git_refs_url")].isNull() && m_git_refs_url_isValid;

    m_git_tags_url_isValid = ::OpenAPI::fromJsonValue(m_git_tags_url, json[QString("git_tags_url")]);
    m_git_tags_url_isSet = !json[QString("git_tags_url")].isNull() && m_git_tags_url_isValid;

    m_hooks_url_isValid = ::OpenAPI::fromJsonValue(m_hooks_url, json[QString("hooks_url")]);
    m_hooks_url_isSet = !json[QString("hooks_url")].isNull() && m_hooks_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_comment_url_isValid = ::OpenAPI::fromJsonValue(m_issue_comment_url, json[QString("issue_comment_url")]);
    m_issue_comment_url_isSet = !json[QString("issue_comment_url")].isNull() && m_issue_comment_url_isValid;

    m_issue_events_url_isValid = ::OpenAPI::fromJsonValue(m_issue_events_url, json[QString("issue_events_url")]);
    m_issue_events_url_isSet = !json[QString("issue_events_url")].isNull() && m_issue_events_url_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_keys_url_isValid = ::OpenAPI::fromJsonValue(m_keys_url, json[QString("keys_url")]);
    m_keys_url_isSet = !json[QString("keys_url")].isNull() && m_keys_url_isValid;

    m_labels_url_isValid = ::OpenAPI::fromJsonValue(m_labels_url, json[QString("labels_url")]);
    m_labels_url_isSet = !json[QString("labels_url")].isNull() && m_labels_url_isValid;

    m_languages_url_isValid = ::OpenAPI::fromJsonValue(m_languages_url, json[QString("languages_url")]);
    m_languages_url_isSet = !json[QString("languages_url")].isNull() && m_languages_url_isValid;

    m_merges_url_isValid = ::OpenAPI::fromJsonValue(m_merges_url, json[QString("merges_url")]);
    m_merges_url_isSet = !json[QString("merges_url")].isNull() && m_merges_url_isValid;

    m_milestones_url_isValid = ::OpenAPI::fromJsonValue(m_milestones_url, json[QString("milestones_url")]);
    m_milestones_url_isSet = !json[QString("milestones_url")].isNull() && m_milestones_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_notifications_url_isValid = ::OpenAPI::fromJsonValue(m_notifications_url, json[QString("notifications_url")]);
    m_notifications_url_isSet = !json[QString("notifications_url")].isNull() && m_notifications_url_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_pulls_url_isValid = ::OpenAPI::fromJsonValue(m_pulls_url, json[QString("pulls_url")]);
    m_pulls_url_isSet = !json[QString("pulls_url")].isNull() && m_pulls_url_isValid;

    m_releases_url_isValid = ::OpenAPI::fromJsonValue(m_releases_url, json[QString("releases_url")]);
    m_releases_url_isSet = !json[QString("releases_url")].isNull() && m_releases_url_isValid;

    m_stargazers_url_isValid = ::OpenAPI::fromJsonValue(m_stargazers_url, json[QString("stargazers_url")]);
    m_stargazers_url_isSet = !json[QString("stargazers_url")].isNull() && m_stargazers_url_isValid;

    m_statuses_url_isValid = ::OpenAPI::fromJsonValue(m_statuses_url, json[QString("statuses_url")]);
    m_statuses_url_isSet = !json[QString("statuses_url")].isNull() && m_statuses_url_isValid;

    m_subscribers_url_isValid = ::OpenAPI::fromJsonValue(m_subscribers_url, json[QString("subscribers_url")]);
    m_subscribers_url_isSet = !json[QString("subscribers_url")].isNull() && m_subscribers_url_isValid;

    m_subscription_url_isValid = ::OpenAPI::fromJsonValue(m_subscription_url, json[QString("subscription_url")]);
    m_subscription_url_isSet = !json[QString("subscription_url")].isNull() && m_subscription_url_isValid;

    m_tags_url_isValid = ::OpenAPI::fromJsonValue(m_tags_url, json[QString("tags_url")]);
    m_tags_url_isSet = !json[QString("tags_url")].isNull() && m_tags_url_isValid;

    m_teams_url_isValid = ::OpenAPI::fromJsonValue(m_teams_url, json[QString("teams_url")]);
    m_teams_url_isSet = !json[QString("teams_url")].isNull() && m_teams_url_isValid;

    m_trees_url_isValid = ::OpenAPI::fromJsonValue(m_trees_url, json[QString("trees_url")]);
    m_trees_url_isSet = !json[QString("trees_url")].isNull() && m_trees_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISimple_repository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimple_repository::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_url_isSet) {
        obj.insert(QString("archive_url"), ::OpenAPI::toJsonValue(m_archive_url));
    }
    if (m_assignees_url_isSet) {
        obj.insert(QString("assignees_url"), ::OpenAPI::toJsonValue(m_assignees_url));
    }
    if (m_blobs_url_isSet) {
        obj.insert(QString("blobs_url"), ::OpenAPI::toJsonValue(m_blobs_url));
    }
    if (m_branches_url_isSet) {
        obj.insert(QString("branches_url"), ::OpenAPI::toJsonValue(m_branches_url));
    }
    if (m_collaborators_url_isSet) {
        obj.insert(QString("collaborators_url"), ::OpenAPI::toJsonValue(m_collaborators_url));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commits_url_isSet) {
        obj.insert(QString("commits_url"), ::OpenAPI::toJsonValue(m_commits_url));
    }
    if (m_compare_url_isSet) {
        obj.insert(QString("compare_url"), ::OpenAPI::toJsonValue(m_compare_url));
    }
    if (m_contents_url_isSet) {
        obj.insert(QString("contents_url"), ::OpenAPI::toJsonValue(m_contents_url));
    }
    if (m_contributors_url_isSet) {
        obj.insert(QString("contributors_url"), ::OpenAPI::toJsonValue(m_contributors_url));
    }
    if (m_deployments_url_isSet) {
        obj.insert(QString("deployments_url"), ::OpenAPI::toJsonValue(m_deployments_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_downloads_url_isSet) {
        obj.insert(QString("downloads_url"), ::OpenAPI::toJsonValue(m_downloads_url));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_fork_isSet) {
        obj.insert(QString("fork"), ::OpenAPI::toJsonValue(m_fork));
    }
    if (m_forks_url_isSet) {
        obj.insert(QString("forks_url"), ::OpenAPI::toJsonValue(m_forks_url));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_git_commits_url_isSet) {
        obj.insert(QString("git_commits_url"), ::OpenAPI::toJsonValue(m_git_commits_url));
    }
    if (m_git_refs_url_isSet) {
        obj.insert(QString("git_refs_url"), ::OpenAPI::toJsonValue(m_git_refs_url));
    }
    if (m_git_tags_url_isSet) {
        obj.insert(QString("git_tags_url"), ::OpenAPI::toJsonValue(m_git_tags_url));
    }
    if (m_hooks_url_isSet) {
        obj.insert(QString("hooks_url"), ::OpenAPI::toJsonValue(m_hooks_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_comment_url_isSet) {
        obj.insert(QString("issue_comment_url"), ::OpenAPI::toJsonValue(m_issue_comment_url));
    }
    if (m_issue_events_url_isSet) {
        obj.insert(QString("issue_events_url"), ::OpenAPI::toJsonValue(m_issue_events_url));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_keys_url_isSet) {
        obj.insert(QString("keys_url"), ::OpenAPI::toJsonValue(m_keys_url));
    }
    if (m_labels_url_isSet) {
        obj.insert(QString("labels_url"), ::OpenAPI::toJsonValue(m_labels_url));
    }
    if (m_languages_url_isSet) {
        obj.insert(QString("languages_url"), ::OpenAPI::toJsonValue(m_languages_url));
    }
    if (m_merges_url_isSet) {
        obj.insert(QString("merges_url"), ::OpenAPI::toJsonValue(m_merges_url));
    }
    if (m_milestones_url_isSet) {
        obj.insert(QString("milestones_url"), ::OpenAPI::toJsonValue(m_milestones_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_notifications_url_isSet) {
        obj.insert(QString("notifications_url"), ::OpenAPI::toJsonValue(m_notifications_url));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_pulls_url_isSet) {
        obj.insert(QString("pulls_url"), ::OpenAPI::toJsonValue(m_pulls_url));
    }
    if (m_releases_url_isSet) {
        obj.insert(QString("releases_url"), ::OpenAPI::toJsonValue(m_releases_url));
    }
    if (m_stargazers_url_isSet) {
        obj.insert(QString("stargazers_url"), ::OpenAPI::toJsonValue(m_stargazers_url));
    }
    if (m_statuses_url_isSet) {
        obj.insert(QString("statuses_url"), ::OpenAPI::toJsonValue(m_statuses_url));
    }
    if (m_subscribers_url_isSet) {
        obj.insert(QString("subscribers_url"), ::OpenAPI::toJsonValue(m_subscribers_url));
    }
    if (m_subscription_url_isSet) {
        obj.insert(QString("subscription_url"), ::OpenAPI::toJsonValue(m_subscription_url));
    }
    if (m_tags_url_isSet) {
        obj.insert(QString("tags_url"), ::OpenAPI::toJsonValue(m_tags_url));
    }
    if (m_teams_url_isSet) {
        obj.insert(QString("teams_url"), ::OpenAPI::toJsonValue(m_teams_url));
    }
    if (m_trees_url_isSet) {
        obj.insert(QString("trees_url"), ::OpenAPI::toJsonValue(m_trees_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISimple_repository::getArchiveUrl() const {
    return m_archive_url;
}
void OAISimple_repository::setArchiveUrl(const QString &archive_url) {
    m_archive_url = archive_url;
    m_archive_url_isSet = true;
}

bool OAISimple_repository::is_archive_url_Set() const{
    return m_archive_url_isSet;
}

bool OAISimple_repository::is_archive_url_Valid() const{
    return m_archive_url_isValid;
}

QString OAISimple_repository::getAssigneesUrl() const {
    return m_assignees_url;
}
void OAISimple_repository::setAssigneesUrl(const QString &assignees_url) {
    m_assignees_url = assignees_url;
    m_assignees_url_isSet = true;
}

bool OAISimple_repository::is_assignees_url_Set() const{
    return m_assignees_url_isSet;
}

bool OAISimple_repository::is_assignees_url_Valid() const{
    return m_assignees_url_isValid;
}

QString OAISimple_repository::getBlobsUrl() const {
    return m_blobs_url;
}
void OAISimple_repository::setBlobsUrl(const QString &blobs_url) {
    m_blobs_url = blobs_url;
    m_blobs_url_isSet = true;
}

bool OAISimple_repository::is_blobs_url_Set() const{
    return m_blobs_url_isSet;
}

bool OAISimple_repository::is_blobs_url_Valid() const{
    return m_blobs_url_isValid;
}

QString OAISimple_repository::getBranchesUrl() const {
    return m_branches_url;
}
void OAISimple_repository::setBranchesUrl(const QString &branches_url) {
    m_branches_url = branches_url;
    m_branches_url_isSet = true;
}

bool OAISimple_repository::is_branches_url_Set() const{
    return m_branches_url_isSet;
}

bool OAISimple_repository::is_branches_url_Valid() const{
    return m_branches_url_isValid;
}

QString OAISimple_repository::getCollaboratorsUrl() const {
    return m_collaborators_url;
}
void OAISimple_repository::setCollaboratorsUrl(const QString &collaborators_url) {
    m_collaborators_url = collaborators_url;
    m_collaborators_url_isSet = true;
}

bool OAISimple_repository::is_collaborators_url_Set() const{
    return m_collaborators_url_isSet;
}

bool OAISimple_repository::is_collaborators_url_Valid() const{
    return m_collaborators_url_isValid;
}

QString OAISimple_repository::getCommentsUrl() const {
    return m_comments_url;
}
void OAISimple_repository::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAISimple_repository::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAISimple_repository::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

QString OAISimple_repository::getCommitsUrl() const {
    return m_commits_url;
}
void OAISimple_repository::setCommitsUrl(const QString &commits_url) {
    m_commits_url = commits_url;
    m_commits_url_isSet = true;
}

bool OAISimple_repository::is_commits_url_Set() const{
    return m_commits_url_isSet;
}

bool OAISimple_repository::is_commits_url_Valid() const{
    return m_commits_url_isValid;
}

QString OAISimple_repository::getCompareUrl() const {
    return m_compare_url;
}
void OAISimple_repository::setCompareUrl(const QString &compare_url) {
    m_compare_url = compare_url;
    m_compare_url_isSet = true;
}

bool OAISimple_repository::is_compare_url_Set() const{
    return m_compare_url_isSet;
}

bool OAISimple_repository::is_compare_url_Valid() const{
    return m_compare_url_isValid;
}

QString OAISimple_repository::getContentsUrl() const {
    return m_contents_url;
}
void OAISimple_repository::setContentsUrl(const QString &contents_url) {
    m_contents_url = contents_url;
    m_contents_url_isSet = true;
}

bool OAISimple_repository::is_contents_url_Set() const{
    return m_contents_url_isSet;
}

bool OAISimple_repository::is_contents_url_Valid() const{
    return m_contents_url_isValid;
}

QString OAISimple_repository::getContributorsUrl() const {
    return m_contributors_url;
}
void OAISimple_repository::setContributorsUrl(const QString &contributors_url) {
    m_contributors_url = contributors_url;
    m_contributors_url_isSet = true;
}

bool OAISimple_repository::is_contributors_url_Set() const{
    return m_contributors_url_isSet;
}

bool OAISimple_repository::is_contributors_url_Valid() const{
    return m_contributors_url_isValid;
}

QString OAISimple_repository::getDeploymentsUrl() const {
    return m_deployments_url;
}
void OAISimple_repository::setDeploymentsUrl(const QString &deployments_url) {
    m_deployments_url = deployments_url;
    m_deployments_url_isSet = true;
}

bool OAISimple_repository::is_deployments_url_Set() const{
    return m_deployments_url_isSet;
}

bool OAISimple_repository::is_deployments_url_Valid() const{
    return m_deployments_url_isValid;
}

QString OAISimple_repository::getDescription() const {
    return m_description;
}
void OAISimple_repository::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISimple_repository::is_description_Set() const{
    return m_description_isSet;
}

bool OAISimple_repository::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISimple_repository::getDownloadsUrl() const {
    return m_downloads_url;
}
void OAISimple_repository::setDownloadsUrl(const QString &downloads_url) {
    m_downloads_url = downloads_url;
    m_downloads_url_isSet = true;
}

bool OAISimple_repository::is_downloads_url_Set() const{
    return m_downloads_url_isSet;
}

bool OAISimple_repository::is_downloads_url_Valid() const{
    return m_downloads_url_isValid;
}

QString OAISimple_repository::getEventsUrl() const {
    return m_events_url;
}
void OAISimple_repository::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAISimple_repository::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAISimple_repository::is_events_url_Valid() const{
    return m_events_url_isValid;
}

bool OAISimple_repository::isFork() const {
    return m_fork;
}
void OAISimple_repository::setFork(const bool &fork) {
    m_fork = fork;
    m_fork_isSet = true;
}

bool OAISimple_repository::is_fork_Set() const{
    return m_fork_isSet;
}

bool OAISimple_repository::is_fork_Valid() const{
    return m_fork_isValid;
}

QString OAISimple_repository::getForksUrl() const {
    return m_forks_url;
}
void OAISimple_repository::setForksUrl(const QString &forks_url) {
    m_forks_url = forks_url;
    m_forks_url_isSet = true;
}

bool OAISimple_repository::is_forks_url_Set() const{
    return m_forks_url_isSet;
}

bool OAISimple_repository::is_forks_url_Valid() const{
    return m_forks_url_isValid;
}

QString OAISimple_repository::getFullName() const {
    return m_full_name;
}
void OAISimple_repository::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAISimple_repository::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAISimple_repository::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAISimple_repository::getGitCommitsUrl() const {
    return m_git_commits_url;
}
void OAISimple_repository::setGitCommitsUrl(const QString &git_commits_url) {
    m_git_commits_url = git_commits_url;
    m_git_commits_url_isSet = true;
}

bool OAISimple_repository::is_git_commits_url_Set() const{
    return m_git_commits_url_isSet;
}

bool OAISimple_repository::is_git_commits_url_Valid() const{
    return m_git_commits_url_isValid;
}

QString OAISimple_repository::getGitRefsUrl() const {
    return m_git_refs_url;
}
void OAISimple_repository::setGitRefsUrl(const QString &git_refs_url) {
    m_git_refs_url = git_refs_url;
    m_git_refs_url_isSet = true;
}

bool OAISimple_repository::is_git_refs_url_Set() const{
    return m_git_refs_url_isSet;
}

bool OAISimple_repository::is_git_refs_url_Valid() const{
    return m_git_refs_url_isValid;
}

QString OAISimple_repository::getGitTagsUrl() const {
    return m_git_tags_url;
}
void OAISimple_repository::setGitTagsUrl(const QString &git_tags_url) {
    m_git_tags_url = git_tags_url;
    m_git_tags_url_isSet = true;
}

bool OAISimple_repository::is_git_tags_url_Set() const{
    return m_git_tags_url_isSet;
}

bool OAISimple_repository::is_git_tags_url_Valid() const{
    return m_git_tags_url_isValid;
}

QString OAISimple_repository::getHooksUrl() const {
    return m_hooks_url;
}
void OAISimple_repository::setHooksUrl(const QString &hooks_url) {
    m_hooks_url = hooks_url;
    m_hooks_url_isSet = true;
}

bool OAISimple_repository::is_hooks_url_Set() const{
    return m_hooks_url_isSet;
}

bool OAISimple_repository::is_hooks_url_Valid() const{
    return m_hooks_url_isValid;
}

QString OAISimple_repository::getHtmlUrl() const {
    return m_html_url;
}
void OAISimple_repository::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAISimple_repository::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAISimple_repository::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAISimple_repository::getId() const {
    return m_id;
}
void OAISimple_repository::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimple_repository::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimple_repository::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISimple_repository::getIssueCommentUrl() const {
    return m_issue_comment_url;
}
void OAISimple_repository::setIssueCommentUrl(const QString &issue_comment_url) {
    m_issue_comment_url = issue_comment_url;
    m_issue_comment_url_isSet = true;
}

bool OAISimple_repository::is_issue_comment_url_Set() const{
    return m_issue_comment_url_isSet;
}

bool OAISimple_repository::is_issue_comment_url_Valid() const{
    return m_issue_comment_url_isValid;
}

QString OAISimple_repository::getIssueEventsUrl() const {
    return m_issue_events_url;
}
void OAISimple_repository::setIssueEventsUrl(const QString &issue_events_url) {
    m_issue_events_url = issue_events_url;
    m_issue_events_url_isSet = true;
}

bool OAISimple_repository::is_issue_events_url_Set() const{
    return m_issue_events_url_isSet;
}

bool OAISimple_repository::is_issue_events_url_Valid() const{
    return m_issue_events_url_isValid;
}

QString OAISimple_repository::getIssuesUrl() const {
    return m_issues_url;
}
void OAISimple_repository::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAISimple_repository::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAISimple_repository::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAISimple_repository::getKeysUrl() const {
    return m_keys_url;
}
void OAISimple_repository::setKeysUrl(const QString &keys_url) {
    m_keys_url = keys_url;
    m_keys_url_isSet = true;
}

bool OAISimple_repository::is_keys_url_Set() const{
    return m_keys_url_isSet;
}

bool OAISimple_repository::is_keys_url_Valid() const{
    return m_keys_url_isValid;
}

QString OAISimple_repository::getLabelsUrl() const {
    return m_labels_url;
}
void OAISimple_repository::setLabelsUrl(const QString &labels_url) {
    m_labels_url = labels_url;
    m_labels_url_isSet = true;
}

bool OAISimple_repository::is_labels_url_Set() const{
    return m_labels_url_isSet;
}

bool OAISimple_repository::is_labels_url_Valid() const{
    return m_labels_url_isValid;
}

QString OAISimple_repository::getLanguagesUrl() const {
    return m_languages_url;
}
void OAISimple_repository::setLanguagesUrl(const QString &languages_url) {
    m_languages_url = languages_url;
    m_languages_url_isSet = true;
}

bool OAISimple_repository::is_languages_url_Set() const{
    return m_languages_url_isSet;
}

bool OAISimple_repository::is_languages_url_Valid() const{
    return m_languages_url_isValid;
}

QString OAISimple_repository::getMergesUrl() const {
    return m_merges_url;
}
void OAISimple_repository::setMergesUrl(const QString &merges_url) {
    m_merges_url = merges_url;
    m_merges_url_isSet = true;
}

bool OAISimple_repository::is_merges_url_Set() const{
    return m_merges_url_isSet;
}

bool OAISimple_repository::is_merges_url_Valid() const{
    return m_merges_url_isValid;
}

QString OAISimple_repository::getMilestonesUrl() const {
    return m_milestones_url;
}
void OAISimple_repository::setMilestonesUrl(const QString &milestones_url) {
    m_milestones_url = milestones_url;
    m_milestones_url_isSet = true;
}

bool OAISimple_repository::is_milestones_url_Set() const{
    return m_milestones_url_isSet;
}

bool OAISimple_repository::is_milestones_url_Valid() const{
    return m_milestones_url_isValid;
}

QString OAISimple_repository::getName() const {
    return m_name;
}
void OAISimple_repository::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISimple_repository::is_name_Set() const{
    return m_name_isSet;
}

bool OAISimple_repository::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISimple_repository::getNodeId() const {
    return m_node_id;
}
void OAISimple_repository::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAISimple_repository::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAISimple_repository::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAISimple_repository::getNotificationsUrl() const {
    return m_notifications_url;
}
void OAISimple_repository::setNotificationsUrl(const QString &notifications_url) {
    m_notifications_url = notifications_url;
    m_notifications_url_isSet = true;
}

bool OAISimple_repository::is_notifications_url_Set() const{
    return m_notifications_url_isSet;
}

bool OAISimple_repository::is_notifications_url_Valid() const{
    return m_notifications_url_isValid;
}

OAISimple_user OAISimple_repository::getOwner() const {
    return m_owner;
}
void OAISimple_repository::setOwner(const OAISimple_user &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISimple_repository::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISimple_repository::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAISimple_repository::isRPrivate() const {
    return m_r_private;
}
void OAISimple_repository::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAISimple_repository::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAISimple_repository::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAISimple_repository::getPullsUrl() const {
    return m_pulls_url;
}
void OAISimple_repository::setPullsUrl(const QString &pulls_url) {
    m_pulls_url = pulls_url;
    m_pulls_url_isSet = true;
}

bool OAISimple_repository::is_pulls_url_Set() const{
    return m_pulls_url_isSet;
}

bool OAISimple_repository::is_pulls_url_Valid() const{
    return m_pulls_url_isValid;
}

QString OAISimple_repository::getReleasesUrl() const {
    return m_releases_url;
}
void OAISimple_repository::setReleasesUrl(const QString &releases_url) {
    m_releases_url = releases_url;
    m_releases_url_isSet = true;
}

bool OAISimple_repository::is_releases_url_Set() const{
    return m_releases_url_isSet;
}

bool OAISimple_repository::is_releases_url_Valid() const{
    return m_releases_url_isValid;
}

QString OAISimple_repository::getStargazersUrl() const {
    return m_stargazers_url;
}
void OAISimple_repository::setStargazersUrl(const QString &stargazers_url) {
    m_stargazers_url = stargazers_url;
    m_stargazers_url_isSet = true;
}

bool OAISimple_repository::is_stargazers_url_Set() const{
    return m_stargazers_url_isSet;
}

bool OAISimple_repository::is_stargazers_url_Valid() const{
    return m_stargazers_url_isValid;
}

QString OAISimple_repository::getStatusesUrl() const {
    return m_statuses_url;
}
void OAISimple_repository::setStatusesUrl(const QString &statuses_url) {
    m_statuses_url = statuses_url;
    m_statuses_url_isSet = true;
}

bool OAISimple_repository::is_statuses_url_Set() const{
    return m_statuses_url_isSet;
}

bool OAISimple_repository::is_statuses_url_Valid() const{
    return m_statuses_url_isValid;
}

QString OAISimple_repository::getSubscribersUrl() const {
    return m_subscribers_url;
}
void OAISimple_repository::setSubscribersUrl(const QString &subscribers_url) {
    m_subscribers_url = subscribers_url;
    m_subscribers_url_isSet = true;
}

bool OAISimple_repository::is_subscribers_url_Set() const{
    return m_subscribers_url_isSet;
}

bool OAISimple_repository::is_subscribers_url_Valid() const{
    return m_subscribers_url_isValid;
}

QString OAISimple_repository::getSubscriptionUrl() const {
    return m_subscription_url;
}
void OAISimple_repository::setSubscriptionUrl(const QString &subscription_url) {
    m_subscription_url = subscription_url;
    m_subscription_url_isSet = true;
}

bool OAISimple_repository::is_subscription_url_Set() const{
    return m_subscription_url_isSet;
}

bool OAISimple_repository::is_subscription_url_Valid() const{
    return m_subscription_url_isValid;
}

QString OAISimple_repository::getTagsUrl() const {
    return m_tags_url;
}
void OAISimple_repository::setTagsUrl(const QString &tags_url) {
    m_tags_url = tags_url;
    m_tags_url_isSet = true;
}

bool OAISimple_repository::is_tags_url_Set() const{
    return m_tags_url_isSet;
}

bool OAISimple_repository::is_tags_url_Valid() const{
    return m_tags_url_isValid;
}

QString OAISimple_repository::getTeamsUrl() const {
    return m_teams_url;
}
void OAISimple_repository::setTeamsUrl(const QString &teams_url) {
    m_teams_url = teams_url;
    m_teams_url_isSet = true;
}

bool OAISimple_repository::is_teams_url_Set() const{
    return m_teams_url_isSet;
}

bool OAISimple_repository::is_teams_url_Valid() const{
    return m_teams_url_isValid;
}

QString OAISimple_repository::getTreesUrl() const {
    return m_trees_url;
}
void OAISimple_repository::setTreesUrl(const QString &trees_url) {
    m_trees_url = trees_url;
    m_trees_url_isSet = true;
}

bool OAISimple_repository::is_trees_url_Set() const{
    return m_trees_url_isSet;
}

bool OAISimple_repository::is_trees_url_Valid() const{
    return m_trees_url_isValid;
}

QString OAISimple_repository::getUrl() const {
    return m_url;
}
void OAISimple_repository::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISimple_repository::is_url_Set() const{
    return m_url_isSet;
}

bool OAISimple_repository::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISimple_repository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloads_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_refs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_tags_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_comment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merges_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestones_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pulls_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stargazers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trees_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimple_repository::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archive_url_isValid && m_assignees_url_isValid && m_blobs_url_isValid && m_branches_url_isValid && m_collaborators_url_isValid && m_comments_url_isValid && m_commits_url_isValid && m_compare_url_isValid && m_contents_url_isValid && m_contributors_url_isValid && m_deployments_url_isValid && m_description_isValid && m_downloads_url_isValid && m_events_url_isValid && m_fork_isValid && m_forks_url_isValid && m_full_name_isValid && m_git_commits_url_isValid && m_git_refs_url_isValid && m_git_tags_url_isValid && m_hooks_url_isValid && m_html_url_isValid && m_id_isValid && m_issue_comment_url_isValid && m_issue_events_url_isValid && m_issues_url_isValid && m_keys_url_isValid && m_labels_url_isValid && m_languages_url_isValid && m_merges_url_isValid && m_milestones_url_isValid && m_name_isValid && m_node_id_isValid && m_notifications_url_isValid && m_owner_isValid && m_r_private_isValid && m_pulls_url_isValid && m_releases_url_isValid && m_stargazers_url_isValid && m_statuses_url_isValid && m_subscribers_url_isValid && m_subscription_url_isValid && m_tags_url_isValid && m_teams_url_isValid && m_trees_url_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
