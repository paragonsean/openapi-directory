/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecret_scanning_location_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecret_scanning_location_details::OAISecret_scanning_location_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecret_scanning_location_details::OAISecret_scanning_location_details() {
    this->initializeModel();
}

OAISecret_scanning_location_details::~OAISecret_scanning_location_details() {}

void OAISecret_scanning_location_details::initializeModel() {

    m_blob_sha_isSet = false;
    m_blob_sha_isValid = false;

    m_blob_url_isSet = false;
    m_blob_url_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_end_column_isSet = false;
    m_end_column_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;
}

void OAISecret_scanning_location_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecret_scanning_location_details::fromJsonObject(QJsonObject json) {

    m_blob_sha_isValid = ::OpenAPI::fromJsonValue(m_blob_sha, json[QString("blob_sha")]);
    m_blob_sha_isSet = !json[QString("blob_sha")].isNull() && m_blob_sha_isValid;

    m_blob_url_isValid = ::OpenAPI::fromJsonValue(m_blob_url, json[QString("blob_url")]);
    m_blob_url_isSet = !json[QString("blob_url")].isNull() && m_blob_url_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commit_sha")]);
    m_commit_sha_isSet = !json[QString("commit_sha")].isNull() && m_commit_sha_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_end_column_isValid = ::OpenAPI::fromJsonValue(m_end_column, json[QString("end_column")]);
    m_end_column_isSet = !json[QString("end_column")].isNull() && m_end_column_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("end_line")]);
    m_end_line_isSet = !json[QString("end_line")].isNull() && m_end_line_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("start_column")]);
    m_start_column_isSet = !json[QString("start_column")].isNull() && m_start_column_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("start_line")]);
    m_start_line_isSet = !json[QString("start_line")].isNull() && m_start_line_isValid;
}

QString OAISecret_scanning_location_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecret_scanning_location_details::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_sha_isSet) {
        obj.insert(QString("blob_sha"), ::OpenAPI::toJsonValue(m_blob_sha));
    }
    if (m_blob_url_isSet) {
        obj.insert(QString("blob_url"), ::OpenAPI::toJsonValue(m_blob_url));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commit_sha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_end_column_isSet) {
        obj.insert(QString("end_column"), ::OpenAPI::toJsonValue(m_end_column));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("end_line"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("start_column"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("start_line"), ::OpenAPI::toJsonValue(m_start_line));
    }
    return obj;
}

QString OAISecret_scanning_location_details::getBlobSha() const {
    return m_blob_sha;
}
void OAISecret_scanning_location_details::setBlobSha(const QString &blob_sha) {
    m_blob_sha = blob_sha;
    m_blob_sha_isSet = true;
}

bool OAISecret_scanning_location_details::is_blob_sha_Set() const{
    return m_blob_sha_isSet;
}

bool OAISecret_scanning_location_details::is_blob_sha_Valid() const{
    return m_blob_sha_isValid;
}

QString OAISecret_scanning_location_details::getBlobUrl() const {
    return m_blob_url;
}
void OAISecret_scanning_location_details::setBlobUrl(const QString &blob_url) {
    m_blob_url = blob_url;
    m_blob_url_isSet = true;
}

bool OAISecret_scanning_location_details::is_blob_url_Set() const{
    return m_blob_url_isSet;
}

bool OAISecret_scanning_location_details::is_blob_url_Valid() const{
    return m_blob_url_isValid;
}

QString OAISecret_scanning_location_details::getCommitSha() const {
    return m_commit_sha;
}
void OAISecret_scanning_location_details::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAISecret_scanning_location_details::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAISecret_scanning_location_details::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

QString OAISecret_scanning_location_details::getCommitUrl() const {
    return m_commit_url;
}
void OAISecret_scanning_location_details::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAISecret_scanning_location_details::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAISecret_scanning_location_details::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

double OAISecret_scanning_location_details::getEndColumn() const {
    return m_end_column;
}
void OAISecret_scanning_location_details::setEndColumn(const double &end_column) {
    m_end_column = end_column;
    m_end_column_isSet = true;
}

bool OAISecret_scanning_location_details::is_end_column_Set() const{
    return m_end_column_isSet;
}

bool OAISecret_scanning_location_details::is_end_column_Valid() const{
    return m_end_column_isValid;
}

double OAISecret_scanning_location_details::getEndLine() const {
    return m_end_line;
}
void OAISecret_scanning_location_details::setEndLine(const double &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAISecret_scanning_location_details::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAISecret_scanning_location_details::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAISecret_scanning_location_details::getPath() const {
    return m_path;
}
void OAISecret_scanning_location_details::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISecret_scanning_location_details::is_path_Set() const{
    return m_path_isSet;
}

bool OAISecret_scanning_location_details::is_path_Valid() const{
    return m_path_isValid;
}

double OAISecret_scanning_location_details::getStartColumn() const {
    return m_start_column;
}
void OAISecret_scanning_location_details::setStartColumn(const double &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAISecret_scanning_location_details::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAISecret_scanning_location_details::is_start_column_Valid() const{
    return m_start_column_isValid;
}

double OAISecret_scanning_location_details::getStartLine() const {
    return m_start_line;
}
void OAISecret_scanning_location_details::setStartLine(const double &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAISecret_scanning_location_details::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAISecret_scanning_location_details::is_start_line_Valid() const{
    return m_start_line_isValid;
}

bool OAISecret_scanning_location_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecret_scanning_location_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blob_sha_isValid && m_blob_url_isValid && m_commit_sha_isValid && m_commit_url_isValid && m_end_column_isValid && m_end_line_isValid && m_path_isValid && m_start_column_isValid && m_start_line_isValid && true;
}

} // namespace OpenAPI
