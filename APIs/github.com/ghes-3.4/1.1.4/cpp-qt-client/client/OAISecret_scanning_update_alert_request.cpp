/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecret_scanning_update_alert_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecret_scanning_update_alert_request::OAISecret_scanning_update_alert_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecret_scanning_update_alert_request::OAISecret_scanning_update_alert_request() {
    this->initializeModel();
}

OAISecret_scanning_update_alert_request::~OAISecret_scanning_update_alert_request() {}

void OAISecret_scanning_update_alert_request::initializeModel() {

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISecret_scanning_update_alert_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecret_scanning_update_alert_request::fromJsonObject(QJsonObject json) {

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISecret_scanning_update_alert_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecret_scanning_update_alert_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAISecret_scanning_alert_resolution OAISecret_scanning_update_alert_request::getResolution() const {
    return m_resolution;
}
void OAISecret_scanning_update_alert_request::setResolution(const OAISecret_scanning_alert_resolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAISecret_scanning_update_alert_request::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAISecret_scanning_update_alert_request::is_resolution_Valid() const{
    return m_resolution_isValid;
}

OAISecret_scanning_alert_state OAISecret_scanning_update_alert_request::getState() const {
    return m_state;
}
void OAISecret_scanning_update_alert_request::setState(const OAISecret_scanning_alert_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISecret_scanning_update_alert_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAISecret_scanning_update_alert_request::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISecret_scanning_update_alert_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecret_scanning_update_alert_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
