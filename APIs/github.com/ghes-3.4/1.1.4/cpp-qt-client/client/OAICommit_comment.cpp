/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_comment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_comment::OAICommit_comment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_comment::OAICommit_comment() {
    this->initializeModel();
}

OAICommit_comment::~OAICommit_comment() {}

void OAICommit_comment::initializeModel() {

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICommit_comment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_comment::fromJsonObject(QJsonObject json) {

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICommit_comment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_comment::asJsonObject() const {
    QJsonObject obj;
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_reactions.isSet()) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIAuthor_association OAICommit_comment::getAuthorAssociation() const {
    return m_author_association;
}
void OAICommit_comment::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAICommit_comment::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAICommit_comment::is_author_association_Valid() const{
    return m_author_association_isValid;
}

QString OAICommit_comment::getBody() const {
    return m_body;
}
void OAICommit_comment::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICommit_comment::is_body_Set() const{
    return m_body_isSet;
}

bool OAICommit_comment::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICommit_comment::getCommitId() const {
    return m_commit_id;
}
void OAICommit_comment::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAICommit_comment::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAICommit_comment::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QDateTime OAICommit_comment::getCreatedAt() const {
    return m_created_at;
}
void OAICommit_comment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICommit_comment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICommit_comment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICommit_comment::getHtmlUrl() const {
    return m_html_url;
}
void OAICommit_comment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAICommit_comment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAICommit_comment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAICommit_comment::getId() const {
    return m_id;
}
void OAICommit_comment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommit_comment::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommit_comment::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICommit_comment::getLine() const {
    return m_line;
}
void OAICommit_comment::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAICommit_comment::is_line_Set() const{
    return m_line_isSet;
}

bool OAICommit_comment::is_line_Valid() const{
    return m_line_isValid;
}

QString OAICommit_comment::getNodeId() const {
    return m_node_id;
}
void OAICommit_comment::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICommit_comment::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICommit_comment::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAICommit_comment::getPath() const {
    return m_path;
}
void OAICommit_comment::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICommit_comment::is_path_Set() const{
    return m_path_isSet;
}

bool OAICommit_comment::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAICommit_comment::getPosition() const {
    return m_position;
}
void OAICommit_comment::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICommit_comment::is_position_Set() const{
    return m_position_isSet;
}

bool OAICommit_comment::is_position_Valid() const{
    return m_position_isValid;
}

OAIReaction_rollup OAICommit_comment::getReactions() const {
    return m_reactions;
}
void OAICommit_comment::setReactions(const OAIReaction_rollup &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAICommit_comment::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAICommit_comment::is_reactions_Valid() const{
    return m_reactions_isValid;
}

QDateTime OAICommit_comment::getUpdatedAt() const {
    return m_updated_at;
}
void OAICommit_comment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICommit_comment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICommit_comment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICommit_comment::getUrl() const {
    return m_url;
}
void OAICommit_comment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommit_comment::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommit_comment::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAICommit_comment::getUser() const {
    return m_user;
}
void OAICommit_comment::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICommit_comment::is_user_Set() const{
    return m_user_isSet;
}

bool OAICommit_comment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICommit_comment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_comment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_association_isValid && m_body_isValid && m_commit_id_isValid && m_created_at_isValid && m_html_url_isValid && m_id_isValid && m_line_isValid && m_node_id_isValid && m_path_isValid && m_position_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
