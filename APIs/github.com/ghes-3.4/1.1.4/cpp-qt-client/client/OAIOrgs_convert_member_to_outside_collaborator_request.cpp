/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgs_convert_member_to_outside_collaborator_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgs_convert_member_to_outside_collaborator_request::OAIOrgs_convert_member_to_outside_collaborator_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgs_convert_member_to_outside_collaborator_request::OAIOrgs_convert_member_to_outside_collaborator_request() {
    this->initializeModel();
}

OAIOrgs_convert_member_to_outside_collaborator_request::~OAIOrgs_convert_member_to_outside_collaborator_request() {}

void OAIOrgs_convert_member_to_outside_collaborator_request::initializeModel() {

    m_async_isSet = false;
    m_async_isValid = false;
}

void OAIOrgs_convert_member_to_outside_collaborator_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgs_convert_member_to_outside_collaborator_request::fromJsonObject(QJsonObject json) {

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("async")]);
    m_async_isSet = !json[QString("async")].isNull() && m_async_isValid;
}

QString OAIOrgs_convert_member_to_outside_collaborator_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgs_convert_member_to_outside_collaborator_request::asJsonObject() const {
    QJsonObject obj;
    if (m_async_isSet) {
        obj.insert(QString("async"), ::OpenAPI::toJsonValue(m_async));
    }
    return obj;
}

bool OAIOrgs_convert_member_to_outside_collaborator_request::isAsync() const {
    return m_async;
}
void OAIOrgs_convert_member_to_outside_collaborator_request::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIOrgs_convert_member_to_outside_collaborator_request::is_async_Set() const{
    return m_async_isSet;
}

bool OAIOrgs_convert_member_to_outside_collaborator_request::is_async_Valid() const{
    return m_async_isValid;
}

bool OAIOrgs_convert_member_to_outside_collaborator_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgs_convert_member_to_outside_collaborator_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
