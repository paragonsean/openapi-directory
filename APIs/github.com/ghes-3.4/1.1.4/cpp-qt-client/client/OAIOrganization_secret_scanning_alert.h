/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrganization_secret_scanning_alert.h
 *
 * 
 */

#ifndef OAIOrganization_secret_scanning_alert_H
#define OAIOrganization_secret_scanning_alert_H

#include <QJsonObject>

#include "OAINullable_simple_user.h"
#include "OAISecret_scanning_alert_resolution.h"
#include "OAISecret_scanning_alert_state.h"
#include "OAISimple_repository.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimple_repository;
class OAINullable_simple_user;

class OAIOrganization_secret_scanning_alert : public OAIObject {
public:
    OAIOrganization_secret_scanning_alert();
    OAIOrganization_secret_scanning_alert(QString json);
    ~OAIOrganization_secret_scanning_alert() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    QString getLocationsUrl() const;
    void setLocationsUrl(const QString &locations_url);
    bool is_locations_url_Set() const;
    bool is_locations_url_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    OAISimple_repository getRepository() const;
    void setRepository(const OAISimple_repository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    OAISecret_scanning_alert_resolution getResolution() const;
    void setResolution(const OAISecret_scanning_alert_resolution &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QDateTime getResolvedAt() const;
    void setResolvedAt(const QDateTime &resolved_at);
    bool is_resolved_at_Set() const;
    bool is_resolved_at_Valid() const;

    OAINullable_simple_user getResolvedBy() const;
    void setResolvedBy(const OAINullable_simple_user &resolved_by);
    bool is_resolved_by_Set() const;
    bool is_resolved_by_Valid() const;

    QString getSecret() const;
    void setSecret(const QString &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    QString getSecretType() const;
    void setSecretType(const QString &secret_type);
    bool is_secret_type_Set() const;
    bool is_secret_type_Valid() const;

    OAISecret_scanning_alert_state getState() const;
    void setState(const OAISecret_scanning_alert_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    QString m_locations_url;
    bool m_locations_url_isSet;
    bool m_locations_url_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    OAISimple_repository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    OAISecret_scanning_alert_resolution m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QDateTime m_resolved_at;
    bool m_resolved_at_isSet;
    bool m_resolved_at_isValid;

    OAINullable_simple_user m_resolved_by;
    bool m_resolved_by_isSet;
    bool m_resolved_by_isValid;

    QString m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;

    QString m_secret_type;
    bool m_secret_type_isSet;
    bool m_secret_type_isValid;

    OAISecret_scanning_alert_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrganization_secret_scanning_alert)

#endif // OAIOrganization_secret_scanning_alert_H
