/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActivityApi_H
#define OAI_OAIActivityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity_list_repos_starred_by_user_200_response.h"
#include "OAIActivity_list_stargazers_for_repo_200_response.h"
#include "OAIActivity_mark_notifications_as_read_202_response.h"
#include "OAIActivity_mark_notifications_as_read_request.h"
#include "OAIActivity_mark_repo_notifications_as_read_request.h"
#include "OAIActivity_set_repo_subscription_request.h"
#include "OAIActivity_set_thread_subscription_request.h"
#include "OAIBasic_error.h"
#include "OAIEnterprise_admin_update_org_name_202_response.h"
#include "OAIEvent.h"
#include "OAIFeed.h"
#include "OAIMinimal_repository.h"
#include "OAIRepository.h"
#include "OAIRepository_subscription.h"
#include "OAISecret_scanning_list_alerts_for_enterprise_503_response.h"
#include "OAISimple_user.h"
#include "OAIStarred_repository.h"
#include "OAIThread.h"
#include "OAIThread_subscription.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActivityApi : public QObject {
    Q_OBJECT

public:
    OAIActivityApi(const int timeOut = 0);
    ~OAIActivityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void activity_checkRepoIsStarredByAuthenticatedUser(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void activity_deleteRepoSubscription(const QString &owner, const QString &repo);

    /**
    * @param[in]  thread_id qint32 [required]
    */
    virtual void activity_deleteThreadSubscription(const qint32 &thread_id);


    virtual void activity_getFeeds();

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void activity_getRepoSubscription(const QString &owner, const QString &repo);

    /**
    * @param[in]  thread_id qint32 [required]
    */
    virtual void activity_getThread(const qint32 &thread_id);

    /**
    * @param[in]  thread_id qint32 [required]
    */
    virtual void activity_getThreadSubscriptionForAuthenticatedUser(const qint32 &thread_id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listEventsForAuthenticatedUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  all bool [optional]
    * @param[in]  participating bool [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void activity_listNotificationsForAuthenticatedUser(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &participating = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listOrgEventsForAuthenticatedUser(const QString &username, const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listPublicEvents(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listPublicEventsForRepoNetwork(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listPublicEventsForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listPublicOrgEvents(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listReceivedEventsForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listReceivedPublicEventsForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listRepoEvents(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  all bool [optional]
    * @param[in]  participating bool [optional]
    * @param[in]  since QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listRepoNotificationsForAuthenticatedUser(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &participating = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listReposStarredByAuthenticatedUser(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listReposStarredByUser(const QString &username, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listReposWatchedByUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listStargazersForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listWatchedReposForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void activity_listWatchersForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_activity_mark_notifications_as_read_request OAIActivity_mark_notifications_as_read_request [optional]
    */
    virtual void activity_markNotificationsAsRead(const ::OpenAPI::OptionalParam<OAIActivity_mark_notifications_as_read_request> &oai_activity_mark_notifications_as_read_request = ::OpenAPI::OptionalParam<OAIActivity_mark_notifications_as_read_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_activity_mark_repo_notifications_as_read_request OAIActivity_mark_repo_notifications_as_read_request [optional]
    */
    virtual void activity_markRepoNotificationsAsRead(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIActivity_mark_repo_notifications_as_read_request> &oai_activity_mark_repo_notifications_as_read_request = ::OpenAPI::OptionalParam<OAIActivity_mark_repo_notifications_as_read_request>());

    /**
    * @param[in]  thread_id qint32 [required]
    */
    virtual void activity_markThreadAsRead(const qint32 &thread_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_activity_set_repo_subscription_request OAIActivity_set_repo_subscription_request [optional]
    */
    virtual void activity_setRepoSubscription(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAIActivity_set_repo_subscription_request> &oai_activity_set_repo_subscription_request = ::OpenAPI::OptionalParam<OAIActivity_set_repo_subscription_request>());

    /**
    * @param[in]  thread_id qint32 [required]
    * @param[in]  oai_activity_set_thread_subscription_request OAIActivity_set_thread_subscription_request [optional]
    */
    virtual void activity_setThreadSubscription(const qint32 &thread_id, const ::OpenAPI::OptionalParam<OAIActivity_set_thread_subscription_request> &oai_activity_set_thread_subscription_request = ::OpenAPI::OptionalParam<OAIActivity_set_thread_subscription_request>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void activity_starRepoForAuthenticatedUser(const QString &owner, const QString &repo);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void activity_unstarRepoForAuthenticatedUser(const QString &owner, const QString &repo);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activity_checkRepoIsStarredByAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_deleteRepoSubscriptionCallback(OAIHttpRequestWorker *worker);
    void activity_deleteThreadSubscriptionCallback(OAIHttpRequestWorker *worker);
    void activity_getFeedsCallback(OAIHttpRequestWorker *worker);
    void activity_getRepoSubscriptionCallback(OAIHttpRequestWorker *worker);
    void activity_getThreadCallback(OAIHttpRequestWorker *worker);
    void activity_getThreadSubscriptionForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listEventsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listNotificationsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listOrgEventsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listPublicEventsCallback(OAIHttpRequestWorker *worker);
    void activity_listPublicEventsForRepoNetworkCallback(OAIHttpRequestWorker *worker);
    void activity_listPublicEventsForUserCallback(OAIHttpRequestWorker *worker);
    void activity_listPublicOrgEventsCallback(OAIHttpRequestWorker *worker);
    void activity_listReceivedEventsForUserCallback(OAIHttpRequestWorker *worker);
    void activity_listReceivedPublicEventsForUserCallback(OAIHttpRequestWorker *worker);
    void activity_listRepoEventsCallback(OAIHttpRequestWorker *worker);
    void activity_listRepoNotificationsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listReposStarredByAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listReposStarredByUserCallback(OAIHttpRequestWorker *worker);
    void activity_listReposWatchedByUserCallback(OAIHttpRequestWorker *worker);
    void activity_listStargazersForRepoCallback(OAIHttpRequestWorker *worker);
    void activity_listWatchedReposForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_listWatchersForRepoCallback(OAIHttpRequestWorker *worker);
    void activity_markNotificationsAsReadCallback(OAIHttpRequestWorker *worker);
    void activity_markRepoNotificationsAsReadCallback(OAIHttpRequestWorker *worker);
    void activity_markThreadAsReadCallback(OAIHttpRequestWorker *worker);
    void activity_setRepoSubscriptionCallback(OAIHttpRequestWorker *worker);
    void activity_setThreadSubscriptionCallback(OAIHttpRequestWorker *worker);
    void activity_starRepoForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void activity_unstarRepoForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activity_checkRepoIsStarredByAuthenticatedUserSignal();
    void activity_deleteRepoSubscriptionSignal();
    void activity_deleteThreadSubscriptionSignal();
    void activity_getFeedsSignal(OAIFeed summary);
    void activity_getRepoSubscriptionSignal(OAIRepository_subscription summary);
    void activity_getThreadSignal(OAIThread summary);
    void activity_getThreadSubscriptionForAuthenticatedUserSignal(OAIThread_subscription summary);
    void activity_listEventsForAuthenticatedUserSignal(QList<OAIEvent> summary);
    void activity_listNotificationsForAuthenticatedUserSignal(QList<OAIThread> summary);
    void activity_listOrgEventsForAuthenticatedUserSignal(QList<OAIEvent> summary);
    void activity_listPublicEventsSignal(QList<OAIEvent> summary);
    void activity_listPublicEventsForRepoNetworkSignal(QList<OAIEvent> summary);
    void activity_listPublicEventsForUserSignal(QList<OAIEvent> summary);
    void activity_listPublicOrgEventsSignal(QList<OAIEvent> summary);
    void activity_listReceivedEventsForUserSignal(QList<OAIEvent> summary);
    void activity_listReceivedPublicEventsForUserSignal(QList<OAIEvent> summary);
    void activity_listRepoEventsSignal(QList<OAIEvent> summary);
    void activity_listRepoNotificationsForAuthenticatedUserSignal(QList<OAIThread> summary);
    void activity_listReposStarredByAuthenticatedUserSignal(QList<OAIRepository> summary);
    void activity_listReposStarredByUserSignal(OAIActivity_list_repos_starred_by_user_200_response summary);
    void activity_listReposWatchedByUserSignal(QList<OAIMinimal_repository> summary);
    void activity_listStargazersForRepoSignal(OAIActivity_list_stargazers_for_repo_200_response summary);
    void activity_listWatchedReposForAuthenticatedUserSignal(QList<OAIMinimal_repository> summary);
    void activity_listWatchersForRepoSignal(QList<OAISimple_user> summary);
    void activity_markNotificationsAsReadSignal(OAIActivity_mark_notifications_as_read_202_response summary);
    void activity_markRepoNotificationsAsReadSignal(OAIEnterprise_admin_update_org_name_202_response summary);
    void activity_markThreadAsReadSignal();
    void activity_setRepoSubscriptionSignal(OAIRepository_subscription summary);
    void activity_setThreadSubscriptionSignal(OAIThread_subscription summary);
    void activity_starRepoForAuthenticatedUserSignal();
    void activity_unstarRepoForAuthenticatedUserSignal();


    void activity_checkRepoIsStarredByAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void activity_deleteRepoSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void activity_deleteThreadSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void activity_getFeedsSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void activity_getRepoSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRepository_subscription summary);
    void activity_getThreadSignalFull(OAIHttpRequestWorker *worker, OAIThread summary);
    void activity_getThreadSubscriptionForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIThread_subscription summary);
    void activity_listEventsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listNotificationsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIThread> summary);
    void activity_listOrgEventsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listPublicEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listPublicEventsForRepoNetworkSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listPublicEventsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listPublicOrgEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listReceivedEventsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listReceivedPublicEventsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listRepoEventsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void activity_listRepoNotificationsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIThread> summary);
    void activity_listReposStarredByAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepository> summary);
    void activity_listReposStarredByUserSignalFull(OAIHttpRequestWorker *worker, OAIActivity_list_repos_starred_by_user_200_response summary);
    void activity_listReposWatchedByUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void activity_listStargazersForRepoSignalFull(OAIHttpRequestWorker *worker, OAIActivity_list_stargazers_for_repo_200_response summary);
    void activity_listWatchedReposForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void activity_listWatchersForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void activity_markNotificationsAsReadSignalFull(OAIHttpRequestWorker *worker, OAIActivity_mark_notifications_as_read_202_response summary);
    void activity_markRepoNotificationsAsReadSignalFull(OAIHttpRequestWorker *worker, OAIEnterprise_admin_update_org_name_202_response summary);
    void activity_markThreadAsReadSignalFull(OAIHttpRequestWorker *worker);
    void activity_setRepoSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRepository_subscription summary);
    void activity_setThreadSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIThread_subscription summary);
    void activity_starRepoForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void activity_unstarRepoForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activity_checkRepoIsStarredByAuthenticatedUserSignalError() instead")
    void activity_checkRepoIsStarredByAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_checkRepoIsStarredByAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_deleteRepoSubscriptionSignalError() instead")
    void activity_deleteRepoSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_deleteRepoSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_deleteThreadSubscriptionSignalError() instead")
    void activity_deleteThreadSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_deleteThreadSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getFeedsSignalError() instead")
    void activity_getFeedsSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getFeedsSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getRepoSubscriptionSignalError() instead")
    void activity_getRepoSubscriptionSignalE(OAIRepository_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getRepoSubscriptionSignalError(OAIRepository_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getThreadSignalError() instead")
    void activity_getThreadSignalE(OAIThread summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getThreadSignalError(OAIThread summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getThreadSubscriptionForAuthenticatedUserSignalError() instead")
    void activity_getThreadSubscriptionForAuthenticatedUserSignalE(OAIThread_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getThreadSubscriptionForAuthenticatedUserSignalError(OAIThread_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listEventsForAuthenticatedUserSignalError() instead")
    void activity_listEventsForAuthenticatedUserSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listEventsForAuthenticatedUserSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listNotificationsForAuthenticatedUserSignalError() instead")
    void activity_listNotificationsForAuthenticatedUserSignalE(QList<OAIThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listNotificationsForAuthenticatedUserSignalError(QList<OAIThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listOrgEventsForAuthenticatedUserSignalError() instead")
    void activity_listOrgEventsForAuthenticatedUserSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listOrgEventsForAuthenticatedUserSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsSignalError() instead")
    void activity_listPublicEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsForRepoNetworkSignalError() instead")
    void activity_listPublicEventsForRepoNetworkSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsForRepoNetworkSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsForUserSignalError() instead")
    void activity_listPublicEventsForUserSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsForUserSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicOrgEventsSignalError() instead")
    void activity_listPublicOrgEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicOrgEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReceivedEventsForUserSignalError() instead")
    void activity_listReceivedEventsForUserSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReceivedEventsForUserSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReceivedPublicEventsForUserSignalError() instead")
    void activity_listReceivedPublicEventsForUserSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReceivedPublicEventsForUserSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listRepoEventsSignalError() instead")
    void activity_listRepoEventsSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listRepoEventsSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listRepoNotificationsForAuthenticatedUserSignalError() instead")
    void activity_listRepoNotificationsForAuthenticatedUserSignalE(QList<OAIThread> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listRepoNotificationsForAuthenticatedUserSignalError(QList<OAIThread> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposStarredByAuthenticatedUserSignalError() instead")
    void activity_listReposStarredByAuthenticatedUserSignalE(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposStarredByAuthenticatedUserSignalError(QList<OAIRepository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposStarredByUserSignalError() instead")
    void activity_listReposStarredByUserSignalE(OAIActivity_list_repos_starred_by_user_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposStarredByUserSignalError(OAIActivity_list_repos_starred_by_user_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposWatchedByUserSignalError() instead")
    void activity_listReposWatchedByUserSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposWatchedByUserSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listStargazersForRepoSignalError() instead")
    void activity_listStargazersForRepoSignalE(OAIActivity_list_stargazers_for_repo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listStargazersForRepoSignalError(OAIActivity_list_stargazers_for_repo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listWatchedReposForAuthenticatedUserSignalError() instead")
    void activity_listWatchedReposForAuthenticatedUserSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listWatchedReposForAuthenticatedUserSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listWatchersForRepoSignalError() instead")
    void activity_listWatchersForRepoSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listWatchersForRepoSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markNotificationsAsReadSignalError() instead")
    void activity_markNotificationsAsReadSignalE(OAIActivity_mark_notifications_as_read_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markNotificationsAsReadSignalError(OAIActivity_mark_notifications_as_read_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markRepoNotificationsAsReadSignalError() instead")
    void activity_markRepoNotificationsAsReadSignalE(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markRepoNotificationsAsReadSignalError(OAIEnterprise_admin_update_org_name_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markThreadAsReadSignalError() instead")
    void activity_markThreadAsReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markThreadAsReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_setRepoSubscriptionSignalError() instead")
    void activity_setRepoSubscriptionSignalE(OAIRepository_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_setRepoSubscriptionSignalError(OAIRepository_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_setThreadSubscriptionSignalError() instead")
    void activity_setThreadSubscriptionSignalE(OAIThread_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_setThreadSubscriptionSignalError(OAIThread_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_starRepoForAuthenticatedUserSignalError() instead")
    void activity_starRepoForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_starRepoForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_unstarRepoForAuthenticatedUserSignalError() instead")
    void activity_unstarRepoForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activity_unstarRepoForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activity_checkRepoIsStarredByAuthenticatedUserSignalErrorFull() instead")
    void activity_checkRepoIsStarredByAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_checkRepoIsStarredByAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_deleteRepoSubscriptionSignalErrorFull() instead")
    void activity_deleteRepoSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_deleteRepoSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_deleteThreadSubscriptionSignalErrorFull() instead")
    void activity_deleteThreadSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_deleteThreadSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getFeedsSignalErrorFull() instead")
    void activity_getFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getRepoSubscriptionSignalErrorFull() instead")
    void activity_getRepoSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getRepoSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getThreadSignalErrorFull() instead")
    void activity_getThreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getThreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_getThreadSubscriptionForAuthenticatedUserSignalErrorFull() instead")
    void activity_getThreadSubscriptionForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_getThreadSubscriptionForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listEventsForAuthenticatedUserSignalErrorFull() instead")
    void activity_listEventsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listEventsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listNotificationsForAuthenticatedUserSignalErrorFull() instead")
    void activity_listNotificationsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listNotificationsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listOrgEventsForAuthenticatedUserSignalErrorFull() instead")
    void activity_listOrgEventsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listOrgEventsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsSignalErrorFull() instead")
    void activity_listPublicEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsForRepoNetworkSignalErrorFull() instead")
    void activity_listPublicEventsForRepoNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsForRepoNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicEventsForUserSignalErrorFull() instead")
    void activity_listPublicEventsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicEventsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listPublicOrgEventsSignalErrorFull() instead")
    void activity_listPublicOrgEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listPublicOrgEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReceivedEventsForUserSignalErrorFull() instead")
    void activity_listReceivedEventsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReceivedEventsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReceivedPublicEventsForUserSignalErrorFull() instead")
    void activity_listReceivedPublicEventsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReceivedPublicEventsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listRepoEventsSignalErrorFull() instead")
    void activity_listRepoEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listRepoEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listRepoNotificationsForAuthenticatedUserSignalErrorFull() instead")
    void activity_listRepoNotificationsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listRepoNotificationsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposStarredByAuthenticatedUserSignalErrorFull() instead")
    void activity_listReposStarredByAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposStarredByAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposStarredByUserSignalErrorFull() instead")
    void activity_listReposStarredByUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposStarredByUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listReposWatchedByUserSignalErrorFull() instead")
    void activity_listReposWatchedByUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listReposWatchedByUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listStargazersForRepoSignalErrorFull() instead")
    void activity_listStargazersForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listStargazersForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listWatchedReposForAuthenticatedUserSignalErrorFull() instead")
    void activity_listWatchedReposForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listWatchedReposForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_listWatchersForRepoSignalErrorFull() instead")
    void activity_listWatchersForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_listWatchersForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markNotificationsAsReadSignalErrorFull() instead")
    void activity_markNotificationsAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markNotificationsAsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markRepoNotificationsAsReadSignalErrorFull() instead")
    void activity_markRepoNotificationsAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markRepoNotificationsAsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_markThreadAsReadSignalErrorFull() instead")
    void activity_markThreadAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_markThreadAsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_setRepoSubscriptionSignalErrorFull() instead")
    void activity_setRepoSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_setRepoSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_setThreadSubscriptionSignalErrorFull() instead")
    void activity_setThreadSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_setThreadSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_starRepoForAuthenticatedUserSignalErrorFull() instead")
    void activity_starRepoForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_starRepoForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use activity_unstarRepoForAuthenticatedUserSignalErrorFull() instead")
    void activity_unstarRepoForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activity_unstarRepoForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
