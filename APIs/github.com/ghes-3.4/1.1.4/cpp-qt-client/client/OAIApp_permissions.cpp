/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_permissions::OAIApp_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_permissions::OAIApp_permissions() {
    this->initializeModel();
}

OAIApp_permissions::~OAIApp_permissions() {}

void OAIApp_permissions::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_administration_isSet = false;
    m_administration_isValid = false;

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_organization_administration_isSet = false;
    m_organization_administration_isValid = false;

    m_organization_hooks_isSet = false;
    m_organization_hooks_isValid = false;

    m_organization_packages_isSet = false;
    m_organization_packages_isValid = false;

    m_organization_plan_isSet = false;
    m_organization_plan_isValid = false;

    m_organization_projects_isSet = false;
    m_organization_projects_isValid = false;

    m_organization_secrets_isSet = false;
    m_organization_secrets_isValid = false;

    m_organization_self_hosted_runners_isSet = false;
    m_organization_self_hosted_runners_isValid = false;

    m_organization_user_blocking_isSet = false;
    m_organization_user_blocking_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_pull_requests_isSet = false;
    m_pull_requests_isValid = false;

    m_repository_hooks_isSet = false;
    m_repository_hooks_isValid = false;

    m_repository_projects_isSet = false;
    m_repository_projects_isValid = false;

    m_secret_scanning_alerts_isSet = false;
    m_secret_scanning_alerts_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;

    m_security_events_isSet = false;
    m_security_events_isValid = false;

    m_single_file_isSet = false;
    m_single_file_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_team_discussions_isSet = false;
    m_team_discussions_isValid = false;

    m_vulnerability_alerts_isSet = false;
    m_vulnerability_alerts_isValid = false;

    m_workflows_isSet = false;
    m_workflows_isValid = false;
}

void OAIApp_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_permissions::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_administration_isValid = ::OpenAPI::fromJsonValue(m_administration, json[QString("administration")]);
    m_administration_isSet = !json[QString("administration")].isNull() && m_administration_isValid;

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_organization_administration_isValid = ::OpenAPI::fromJsonValue(m_organization_administration, json[QString("organization_administration")]);
    m_organization_administration_isSet = !json[QString("organization_administration")].isNull() && m_organization_administration_isValid;

    m_organization_hooks_isValid = ::OpenAPI::fromJsonValue(m_organization_hooks, json[QString("organization_hooks")]);
    m_organization_hooks_isSet = !json[QString("organization_hooks")].isNull() && m_organization_hooks_isValid;

    m_organization_packages_isValid = ::OpenAPI::fromJsonValue(m_organization_packages, json[QString("organization_packages")]);
    m_organization_packages_isSet = !json[QString("organization_packages")].isNull() && m_organization_packages_isValid;

    m_organization_plan_isValid = ::OpenAPI::fromJsonValue(m_organization_plan, json[QString("organization_plan")]);
    m_organization_plan_isSet = !json[QString("organization_plan")].isNull() && m_organization_plan_isValid;

    m_organization_projects_isValid = ::OpenAPI::fromJsonValue(m_organization_projects, json[QString("organization_projects")]);
    m_organization_projects_isSet = !json[QString("organization_projects")].isNull() && m_organization_projects_isValid;

    m_organization_secrets_isValid = ::OpenAPI::fromJsonValue(m_organization_secrets, json[QString("organization_secrets")]);
    m_organization_secrets_isSet = !json[QString("organization_secrets")].isNull() && m_organization_secrets_isValid;

    m_organization_self_hosted_runners_isValid = ::OpenAPI::fromJsonValue(m_organization_self_hosted_runners, json[QString("organization_self_hosted_runners")]);
    m_organization_self_hosted_runners_isSet = !json[QString("organization_self_hosted_runners")].isNull() && m_organization_self_hosted_runners_isValid;

    m_organization_user_blocking_isValid = ::OpenAPI::fromJsonValue(m_organization_user_blocking, json[QString("organization_user_blocking")]);
    m_organization_user_blocking_isSet = !json[QString("organization_user_blocking")].isNull() && m_organization_user_blocking_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_pull_requests, json[QString("pull_requests")]);
    m_pull_requests_isSet = !json[QString("pull_requests")].isNull() && m_pull_requests_isValid;

    m_repository_hooks_isValid = ::OpenAPI::fromJsonValue(m_repository_hooks, json[QString("repository_hooks")]);
    m_repository_hooks_isSet = !json[QString("repository_hooks")].isNull() && m_repository_hooks_isValid;

    m_repository_projects_isValid = ::OpenAPI::fromJsonValue(m_repository_projects, json[QString("repository_projects")]);
    m_repository_projects_isSet = !json[QString("repository_projects")].isNull() && m_repository_projects_isValid;

    m_secret_scanning_alerts_isValid = ::OpenAPI::fromJsonValue(m_secret_scanning_alerts, json[QString("secret_scanning_alerts")]);
    m_secret_scanning_alerts_isSet = !json[QString("secret_scanning_alerts")].isNull() && m_secret_scanning_alerts_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;

    m_security_events_isValid = ::OpenAPI::fromJsonValue(m_security_events, json[QString("security_events")]);
    m_security_events_isSet = !json[QString("security_events")].isNull() && m_security_events_isValid;

    m_single_file_isValid = ::OpenAPI::fromJsonValue(m_single_file, json[QString("single_file")]);
    m_single_file_isSet = !json[QString("single_file")].isNull() && m_single_file_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;

    m_team_discussions_isValid = ::OpenAPI::fromJsonValue(m_team_discussions, json[QString("team_discussions")]);
    m_team_discussions_isSet = !json[QString("team_discussions")].isNull() && m_team_discussions_isValid;

    m_vulnerability_alerts_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_alerts, json[QString("vulnerability_alerts")]);
    m_vulnerability_alerts_isSet = !json[QString("vulnerability_alerts")].isNull() && m_vulnerability_alerts_isValid;

    m_workflows_isValid = ::OpenAPI::fromJsonValue(m_workflows, json[QString("workflows")]);
    m_workflows_isSet = !json[QString("workflows")].isNull() && m_workflows_isValid;
}

QString OAIApp_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_isSet) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_administration_isSet) {
        obj.insert(QString("administration"), ::OpenAPI::toJsonValue(m_administration));
    }
    if (m_checks_isSet) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_deployments_isSet) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_environments_isSet) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_issues_isSet) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_members_isSet) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_organization_administration_isSet) {
        obj.insert(QString("organization_administration"), ::OpenAPI::toJsonValue(m_organization_administration));
    }
    if (m_organization_hooks_isSet) {
        obj.insert(QString("organization_hooks"), ::OpenAPI::toJsonValue(m_organization_hooks));
    }
    if (m_organization_packages_isSet) {
        obj.insert(QString("organization_packages"), ::OpenAPI::toJsonValue(m_organization_packages));
    }
    if (m_organization_plan_isSet) {
        obj.insert(QString("organization_plan"), ::OpenAPI::toJsonValue(m_organization_plan));
    }
    if (m_organization_projects_isSet) {
        obj.insert(QString("organization_projects"), ::OpenAPI::toJsonValue(m_organization_projects));
    }
    if (m_organization_secrets_isSet) {
        obj.insert(QString("organization_secrets"), ::OpenAPI::toJsonValue(m_organization_secrets));
    }
    if (m_organization_self_hosted_runners_isSet) {
        obj.insert(QString("organization_self_hosted_runners"), ::OpenAPI::toJsonValue(m_organization_self_hosted_runners));
    }
    if (m_organization_user_blocking_isSet) {
        obj.insert(QString("organization_user_blocking"), ::OpenAPI::toJsonValue(m_organization_user_blocking));
    }
    if (m_packages_isSet) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_pull_requests_isSet) {
        obj.insert(QString("pull_requests"), ::OpenAPI::toJsonValue(m_pull_requests));
    }
    if (m_repository_hooks_isSet) {
        obj.insert(QString("repository_hooks"), ::OpenAPI::toJsonValue(m_repository_hooks));
    }
    if (m_repository_projects_isSet) {
        obj.insert(QString("repository_projects"), ::OpenAPI::toJsonValue(m_repository_projects));
    }
    if (m_secret_scanning_alerts_isSet) {
        obj.insert(QString("secret_scanning_alerts"), ::OpenAPI::toJsonValue(m_secret_scanning_alerts));
    }
    if (m_secrets_isSet) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    if (m_security_events_isSet) {
        obj.insert(QString("security_events"), ::OpenAPI::toJsonValue(m_security_events));
    }
    if (m_single_file_isSet) {
        obj.insert(QString("single_file"), ::OpenAPI::toJsonValue(m_single_file));
    }
    if (m_statuses_isSet) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_team_discussions_isSet) {
        obj.insert(QString("team_discussions"), ::OpenAPI::toJsonValue(m_team_discussions));
    }
    if (m_vulnerability_alerts_isSet) {
        obj.insert(QString("vulnerability_alerts"), ::OpenAPI::toJsonValue(m_vulnerability_alerts));
    }
    if (m_workflows_isSet) {
        obj.insert(QString("workflows"), ::OpenAPI::toJsonValue(m_workflows));
    }
    return obj;
}

QString OAIApp_permissions::getActions() const {
    return m_actions;
}
void OAIApp_permissions::setActions(const QString &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIApp_permissions::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIApp_permissions::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIApp_permissions::getAdministration() const {
    return m_administration;
}
void OAIApp_permissions::setAdministration(const QString &administration) {
    m_administration = administration;
    m_administration_isSet = true;
}

bool OAIApp_permissions::is_administration_Set() const{
    return m_administration_isSet;
}

bool OAIApp_permissions::is_administration_Valid() const{
    return m_administration_isValid;
}

QString OAIApp_permissions::getChecks() const {
    return m_checks;
}
void OAIApp_permissions::setChecks(const QString &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAIApp_permissions::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAIApp_permissions::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAIApp_permissions::getContents() const {
    return m_contents;
}
void OAIApp_permissions::setContents(const QString &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIApp_permissions::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIApp_permissions::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIApp_permissions::getDeployments() const {
    return m_deployments;
}
void OAIApp_permissions::setDeployments(const QString &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIApp_permissions::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIApp_permissions::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIApp_permissions::getEnvironments() const {
    return m_environments;
}
void OAIApp_permissions::setEnvironments(const QString &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAIApp_permissions::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAIApp_permissions::is_environments_Valid() const{
    return m_environments_isValid;
}

QString OAIApp_permissions::getIssues() const {
    return m_issues;
}
void OAIApp_permissions::setIssues(const QString &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIApp_permissions::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIApp_permissions::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIApp_permissions::getMembers() const {
    return m_members;
}
void OAIApp_permissions::setMembers(const QString &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIApp_permissions::is_members_Set() const{
    return m_members_isSet;
}

bool OAIApp_permissions::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIApp_permissions::getMetadata() const {
    return m_metadata;
}
void OAIApp_permissions::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIApp_permissions::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIApp_permissions::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIApp_permissions::getOrganizationAdministration() const {
    return m_organization_administration;
}
void OAIApp_permissions::setOrganizationAdministration(const QString &organization_administration) {
    m_organization_administration = organization_administration;
    m_organization_administration_isSet = true;
}

bool OAIApp_permissions::is_organization_administration_Set() const{
    return m_organization_administration_isSet;
}

bool OAIApp_permissions::is_organization_administration_Valid() const{
    return m_organization_administration_isValid;
}

QString OAIApp_permissions::getOrganizationHooks() const {
    return m_organization_hooks;
}
void OAIApp_permissions::setOrganizationHooks(const QString &organization_hooks) {
    m_organization_hooks = organization_hooks;
    m_organization_hooks_isSet = true;
}

bool OAIApp_permissions::is_organization_hooks_Set() const{
    return m_organization_hooks_isSet;
}

bool OAIApp_permissions::is_organization_hooks_Valid() const{
    return m_organization_hooks_isValid;
}

QString OAIApp_permissions::getOrganizationPackages() const {
    return m_organization_packages;
}
void OAIApp_permissions::setOrganizationPackages(const QString &organization_packages) {
    m_organization_packages = organization_packages;
    m_organization_packages_isSet = true;
}

bool OAIApp_permissions::is_organization_packages_Set() const{
    return m_organization_packages_isSet;
}

bool OAIApp_permissions::is_organization_packages_Valid() const{
    return m_organization_packages_isValid;
}

QString OAIApp_permissions::getOrganizationPlan() const {
    return m_organization_plan;
}
void OAIApp_permissions::setOrganizationPlan(const QString &organization_plan) {
    m_organization_plan = organization_plan;
    m_organization_plan_isSet = true;
}

bool OAIApp_permissions::is_organization_plan_Set() const{
    return m_organization_plan_isSet;
}

bool OAIApp_permissions::is_organization_plan_Valid() const{
    return m_organization_plan_isValid;
}

QString OAIApp_permissions::getOrganizationProjects() const {
    return m_organization_projects;
}
void OAIApp_permissions::setOrganizationProjects(const QString &organization_projects) {
    m_organization_projects = organization_projects;
    m_organization_projects_isSet = true;
}

bool OAIApp_permissions::is_organization_projects_Set() const{
    return m_organization_projects_isSet;
}

bool OAIApp_permissions::is_organization_projects_Valid() const{
    return m_organization_projects_isValid;
}

QString OAIApp_permissions::getOrganizationSecrets() const {
    return m_organization_secrets;
}
void OAIApp_permissions::setOrganizationSecrets(const QString &organization_secrets) {
    m_organization_secrets = organization_secrets;
    m_organization_secrets_isSet = true;
}

bool OAIApp_permissions::is_organization_secrets_Set() const{
    return m_organization_secrets_isSet;
}

bool OAIApp_permissions::is_organization_secrets_Valid() const{
    return m_organization_secrets_isValid;
}

QString OAIApp_permissions::getOrganizationSelfHostedRunners() const {
    return m_organization_self_hosted_runners;
}
void OAIApp_permissions::setOrganizationSelfHostedRunners(const QString &organization_self_hosted_runners) {
    m_organization_self_hosted_runners = organization_self_hosted_runners;
    m_organization_self_hosted_runners_isSet = true;
}

bool OAIApp_permissions::is_organization_self_hosted_runners_Set() const{
    return m_organization_self_hosted_runners_isSet;
}

bool OAIApp_permissions::is_organization_self_hosted_runners_Valid() const{
    return m_organization_self_hosted_runners_isValid;
}

QString OAIApp_permissions::getOrganizationUserBlocking() const {
    return m_organization_user_blocking;
}
void OAIApp_permissions::setOrganizationUserBlocking(const QString &organization_user_blocking) {
    m_organization_user_blocking = organization_user_blocking;
    m_organization_user_blocking_isSet = true;
}

bool OAIApp_permissions::is_organization_user_blocking_Set() const{
    return m_organization_user_blocking_isSet;
}

bool OAIApp_permissions::is_organization_user_blocking_Valid() const{
    return m_organization_user_blocking_isValid;
}

QString OAIApp_permissions::getPackages() const {
    return m_packages;
}
void OAIApp_permissions::setPackages(const QString &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIApp_permissions::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIApp_permissions::is_packages_Valid() const{
    return m_packages_isValid;
}

QString OAIApp_permissions::getPages() const {
    return m_pages;
}
void OAIApp_permissions::setPages(const QString &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIApp_permissions::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIApp_permissions::is_pages_Valid() const{
    return m_pages_isValid;
}

QString OAIApp_permissions::getPullRequests() const {
    return m_pull_requests;
}
void OAIApp_permissions::setPullRequests(const QString &pull_requests) {
    m_pull_requests = pull_requests;
    m_pull_requests_isSet = true;
}

bool OAIApp_permissions::is_pull_requests_Set() const{
    return m_pull_requests_isSet;
}

bool OAIApp_permissions::is_pull_requests_Valid() const{
    return m_pull_requests_isValid;
}

QString OAIApp_permissions::getRepositoryHooks() const {
    return m_repository_hooks;
}
void OAIApp_permissions::setRepositoryHooks(const QString &repository_hooks) {
    m_repository_hooks = repository_hooks;
    m_repository_hooks_isSet = true;
}

bool OAIApp_permissions::is_repository_hooks_Set() const{
    return m_repository_hooks_isSet;
}

bool OAIApp_permissions::is_repository_hooks_Valid() const{
    return m_repository_hooks_isValid;
}

QString OAIApp_permissions::getRepositoryProjects() const {
    return m_repository_projects;
}
void OAIApp_permissions::setRepositoryProjects(const QString &repository_projects) {
    m_repository_projects = repository_projects;
    m_repository_projects_isSet = true;
}

bool OAIApp_permissions::is_repository_projects_Set() const{
    return m_repository_projects_isSet;
}

bool OAIApp_permissions::is_repository_projects_Valid() const{
    return m_repository_projects_isValid;
}

QString OAIApp_permissions::getSecretScanningAlerts() const {
    return m_secret_scanning_alerts;
}
void OAIApp_permissions::setSecretScanningAlerts(const QString &secret_scanning_alerts) {
    m_secret_scanning_alerts = secret_scanning_alerts;
    m_secret_scanning_alerts_isSet = true;
}

bool OAIApp_permissions::is_secret_scanning_alerts_Set() const{
    return m_secret_scanning_alerts_isSet;
}

bool OAIApp_permissions::is_secret_scanning_alerts_Valid() const{
    return m_secret_scanning_alerts_isValid;
}

QString OAIApp_permissions::getSecrets() const {
    return m_secrets;
}
void OAIApp_permissions::setSecrets(const QString &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAIApp_permissions::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAIApp_permissions::is_secrets_Valid() const{
    return m_secrets_isValid;
}

QString OAIApp_permissions::getSecurityEvents() const {
    return m_security_events;
}
void OAIApp_permissions::setSecurityEvents(const QString &security_events) {
    m_security_events = security_events;
    m_security_events_isSet = true;
}

bool OAIApp_permissions::is_security_events_Set() const{
    return m_security_events_isSet;
}

bool OAIApp_permissions::is_security_events_Valid() const{
    return m_security_events_isValid;
}

QString OAIApp_permissions::getSingleFile() const {
    return m_single_file;
}
void OAIApp_permissions::setSingleFile(const QString &single_file) {
    m_single_file = single_file;
    m_single_file_isSet = true;
}

bool OAIApp_permissions::is_single_file_Set() const{
    return m_single_file_isSet;
}

bool OAIApp_permissions::is_single_file_Valid() const{
    return m_single_file_isValid;
}

QString OAIApp_permissions::getStatuses() const {
    return m_statuses;
}
void OAIApp_permissions::setStatuses(const QString &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIApp_permissions::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIApp_permissions::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QString OAIApp_permissions::getTeamDiscussions() const {
    return m_team_discussions;
}
void OAIApp_permissions::setTeamDiscussions(const QString &team_discussions) {
    m_team_discussions = team_discussions;
    m_team_discussions_isSet = true;
}

bool OAIApp_permissions::is_team_discussions_Set() const{
    return m_team_discussions_isSet;
}

bool OAIApp_permissions::is_team_discussions_Valid() const{
    return m_team_discussions_isValid;
}

QString OAIApp_permissions::getVulnerabilityAlerts() const {
    return m_vulnerability_alerts;
}
void OAIApp_permissions::setVulnerabilityAlerts(const QString &vulnerability_alerts) {
    m_vulnerability_alerts = vulnerability_alerts;
    m_vulnerability_alerts_isSet = true;
}

bool OAIApp_permissions::is_vulnerability_alerts_Set() const{
    return m_vulnerability_alerts_isSet;
}

bool OAIApp_permissions::is_vulnerability_alerts_Valid() const{
    return m_vulnerability_alerts_isValid;
}

QString OAIApp_permissions::getWorkflows() const {
    return m_workflows;
}
void OAIApp_permissions::setWorkflows(const QString &workflows) {
    m_workflows = workflows;
    m_workflows_isSet = true;
}

bool OAIApp_permissions::is_workflows_Set() const{
    return m_workflows_isSet;
}

bool OAIApp_permissions::is_workflows_Valid() const{
    return m_workflows_isValid;
}

bool OAIApp_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_administration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_hooks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_secrets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_self_hosted_runners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_user_blocking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_requests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_hooks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_scanning_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_discussions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
