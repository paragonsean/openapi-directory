/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGist_simple_forks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGist_simple_forks_inner::OAIGist_simple_forks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGist_simple_forks_inner::OAIGist_simple_forks_inner() {
    this->initializeModel();
}

OAIGist_simple_forks_inner::~OAIGist_simple_forks_inner() {}

void OAIGist_simple_forks_inner::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGist_simple_forks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGist_simple_forks_inner::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGist_simple_forks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGist_simple_forks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIGist_simple_forks_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIGist_simple_forks_inner::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGist_simple_forks_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGist_simple_forks_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGist_simple_forks_inner::getId() const {
    return m_id;
}
void OAIGist_simple_forks_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGist_simple_forks_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGist_simple_forks_inner::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIGist_simple_forks_inner::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGist_simple_forks_inner::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGist_simple_forks_inner::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGist_simple_forks_inner::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIGist_simple_forks_inner::getUrl() const {
    return m_url;
}
void OAIGist_simple_forks_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGist_simple_forks_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGist_simple_forks_inner::is_url_Valid() const{
    return m_url_isValid;
}

OAIPublic_user OAIGist_simple_forks_inner::getUser() const {
    return m_user;
}
void OAIGist_simple_forks_inner::setUser(const OAIPublic_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGist_simple_forks_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGist_simple_forks_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGist_simple_forks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGist_simple_forks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
