/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMigration.h
 *
 * A migration.
 */

#ifndef OAIMigration_H
#define OAIMigration_H

#include <QJsonObject>

#include "OAINullable_simple_user.h"
#include "OAIRepository.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_user;
class OAIRepository;

class OAIMigration : public OAIObject {
public:
    OAIMigration();
    OAIMigration(QString json);
    ~OAIMigration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchiveUrl() const;
    void setArchiveUrl(const QString &archive_url);
    bool is_archive_url_Set() const;
    bool is_archive_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QList<QJsonValue> getExclude() const;
    void setExclude(const QList<QJsonValue> &exclude);
    bool is_exclude_Set() const;
    bool is_exclude_Valid() const;

    bool isExcludeAttachments() const;
    void setExcludeAttachments(const bool &exclude_attachments);
    bool is_exclude_attachments_Set() const;
    bool is_exclude_attachments_Valid() const;

    bool isExcludeGitData() const;
    void setExcludeGitData(const bool &exclude_git_data);
    bool is_exclude_git_data_Set() const;
    bool is_exclude_git_data_Valid() const;

    bool isExcludeMetadata() const;
    void setExcludeMetadata(const bool &exclude_metadata);
    bool is_exclude_metadata_Set() const;
    bool is_exclude_metadata_Valid() const;

    bool isExcludeOwnerProjects() const;
    void setExcludeOwnerProjects(const bool &exclude_owner_projects);
    bool is_exclude_owner_projects_Set() const;
    bool is_exclude_owner_projects_Valid() const;

    bool isExcludeReleases() const;
    void setExcludeReleases(const bool &exclude_releases);
    bool is_exclude_releases_Set() const;
    bool is_exclude_releases_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isLockRepositories() const;
    void setLockRepositories(const bool &lock_repositories);
    bool is_lock_repositories_Set() const;
    bool is_lock_repositories_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    bool isOrgMetadataOnly() const;
    void setOrgMetadataOnly(const bool &org_metadata_only);
    bool is_org_metadata_only_Set() const;
    bool is_org_metadata_only_Valid() const;

    OAINullable_simple_user getOwner() const;
    void setOwner(const OAINullable_simple_user &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QList<OAIRepository> getRepositories() const;
    void setRepositories(const QList<OAIRepository> &repositories);
    bool is_repositories_Set() const;
    bool is_repositories_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_archive_url;
    bool m_archive_url_isSet;
    bool m_archive_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QList<QJsonValue> m_exclude;
    bool m_exclude_isSet;
    bool m_exclude_isValid;

    bool m_exclude_attachments;
    bool m_exclude_attachments_isSet;
    bool m_exclude_attachments_isValid;

    bool m_exclude_git_data;
    bool m_exclude_git_data_isSet;
    bool m_exclude_git_data_isValid;

    bool m_exclude_metadata;
    bool m_exclude_metadata_isSet;
    bool m_exclude_metadata_isValid;

    bool m_exclude_owner_projects;
    bool m_exclude_owner_projects_isSet;
    bool m_exclude_owner_projects_isValid;

    bool m_exclude_releases;
    bool m_exclude_releases_isSet;
    bool m_exclude_releases_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_lock_repositories;
    bool m_lock_repositories_isSet;
    bool m_lock_repositories_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    bool m_org_metadata_only;
    bool m_org_metadata_only_isSet;
    bool m_org_metadata_only_isValid;

    OAINullable_simple_user m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QList<OAIRepository> m_repositories;
    bool m_repositories_isSet;
    bool m_repositories_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMigration)

#endif // OAIMigration_H
