/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_repository_overview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_repository_overview::OAIEnterprise_repository_overview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_repository_overview::OAIEnterprise_repository_overview() {
    this->initializeModel();
}

OAIEnterprise_repository_overview::~OAIEnterprise_repository_overview() {}

void OAIEnterprise_repository_overview::initializeModel() {

    m_fork_repos_isSet = false;
    m_fork_repos_isValid = false;

    m_org_repos_isSet = false;
    m_org_repos_isValid = false;

    m_root_repos_isSet = false;
    m_root_repos_isValid = false;

    m_total_pushes_isSet = false;
    m_total_pushes_isValid = false;

    m_total_repos_isSet = false;
    m_total_repos_isValid = false;

    m_total_wikis_isSet = false;
    m_total_wikis_isValid = false;
}

void OAIEnterprise_repository_overview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_repository_overview::fromJsonObject(QJsonObject json) {

    m_fork_repos_isValid = ::OpenAPI::fromJsonValue(m_fork_repos, json[QString("fork_repos")]);
    m_fork_repos_isSet = !json[QString("fork_repos")].isNull() && m_fork_repos_isValid;

    m_org_repos_isValid = ::OpenAPI::fromJsonValue(m_org_repos, json[QString("org_repos")]);
    m_org_repos_isSet = !json[QString("org_repos")].isNull() && m_org_repos_isValid;

    m_root_repos_isValid = ::OpenAPI::fromJsonValue(m_root_repos, json[QString("root_repos")]);
    m_root_repos_isSet = !json[QString("root_repos")].isNull() && m_root_repos_isValid;

    m_total_pushes_isValid = ::OpenAPI::fromJsonValue(m_total_pushes, json[QString("total_pushes")]);
    m_total_pushes_isSet = !json[QString("total_pushes")].isNull() && m_total_pushes_isValid;

    m_total_repos_isValid = ::OpenAPI::fromJsonValue(m_total_repos, json[QString("total_repos")]);
    m_total_repos_isSet = !json[QString("total_repos")].isNull() && m_total_repos_isValid;

    m_total_wikis_isValid = ::OpenAPI::fromJsonValue(m_total_wikis, json[QString("total_wikis")]);
    m_total_wikis_isSet = !json[QString("total_wikis")].isNull() && m_total_wikis_isValid;
}

QString OAIEnterprise_repository_overview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_repository_overview::asJsonObject() const {
    QJsonObject obj;
    if (m_fork_repos_isSet) {
        obj.insert(QString("fork_repos"), ::OpenAPI::toJsonValue(m_fork_repos));
    }
    if (m_org_repos_isSet) {
        obj.insert(QString("org_repos"), ::OpenAPI::toJsonValue(m_org_repos));
    }
    if (m_root_repos_isSet) {
        obj.insert(QString("root_repos"), ::OpenAPI::toJsonValue(m_root_repos));
    }
    if (m_total_pushes_isSet) {
        obj.insert(QString("total_pushes"), ::OpenAPI::toJsonValue(m_total_pushes));
    }
    if (m_total_repos_isSet) {
        obj.insert(QString("total_repos"), ::OpenAPI::toJsonValue(m_total_repos));
    }
    if (m_total_wikis_isSet) {
        obj.insert(QString("total_wikis"), ::OpenAPI::toJsonValue(m_total_wikis));
    }
    return obj;
}

qint32 OAIEnterprise_repository_overview::getForkRepos() const {
    return m_fork_repos;
}
void OAIEnterprise_repository_overview::setForkRepos(const qint32 &fork_repos) {
    m_fork_repos = fork_repos;
    m_fork_repos_isSet = true;
}

bool OAIEnterprise_repository_overview::is_fork_repos_Set() const{
    return m_fork_repos_isSet;
}

bool OAIEnterprise_repository_overview::is_fork_repos_Valid() const{
    return m_fork_repos_isValid;
}

qint32 OAIEnterprise_repository_overview::getOrgRepos() const {
    return m_org_repos;
}
void OAIEnterprise_repository_overview::setOrgRepos(const qint32 &org_repos) {
    m_org_repos = org_repos;
    m_org_repos_isSet = true;
}

bool OAIEnterprise_repository_overview::is_org_repos_Set() const{
    return m_org_repos_isSet;
}

bool OAIEnterprise_repository_overview::is_org_repos_Valid() const{
    return m_org_repos_isValid;
}

qint32 OAIEnterprise_repository_overview::getRootRepos() const {
    return m_root_repos;
}
void OAIEnterprise_repository_overview::setRootRepos(const qint32 &root_repos) {
    m_root_repos = root_repos;
    m_root_repos_isSet = true;
}

bool OAIEnterprise_repository_overview::is_root_repos_Set() const{
    return m_root_repos_isSet;
}

bool OAIEnterprise_repository_overview::is_root_repos_Valid() const{
    return m_root_repos_isValid;
}

qint32 OAIEnterprise_repository_overview::getTotalPushes() const {
    return m_total_pushes;
}
void OAIEnterprise_repository_overview::setTotalPushes(const qint32 &total_pushes) {
    m_total_pushes = total_pushes;
    m_total_pushes_isSet = true;
}

bool OAIEnterprise_repository_overview::is_total_pushes_Set() const{
    return m_total_pushes_isSet;
}

bool OAIEnterprise_repository_overview::is_total_pushes_Valid() const{
    return m_total_pushes_isValid;
}

qint32 OAIEnterprise_repository_overview::getTotalRepos() const {
    return m_total_repos;
}
void OAIEnterprise_repository_overview::setTotalRepos(const qint32 &total_repos) {
    m_total_repos = total_repos;
    m_total_repos_isSet = true;
}

bool OAIEnterprise_repository_overview::is_total_repos_Set() const{
    return m_total_repos_isSet;
}

bool OAIEnterprise_repository_overview::is_total_repos_Valid() const{
    return m_total_repos_isValid;
}

qint32 OAIEnterprise_repository_overview::getTotalWikis() const {
    return m_total_wikis;
}
void OAIEnterprise_repository_overview::setTotalWikis(const qint32 &total_wikis) {
    m_total_wikis = total_wikis;
    m_total_wikis_isSet = true;
}

bool OAIEnterprise_repository_overview::is_total_wikis_Set() const{
    return m_total_wikis_isSet;
}

bool OAIEnterprise_repository_overview::is_total_wikis_Valid() const{
    return m_total_wikis_isValid;
}

bool OAIEnterprise_repository_overview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fork_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pushes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_wikis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_repository_overview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fork_repos_isValid && m_org_repos_isValid && m_root_repos_isValid && m_total_pushes_isValid && m_total_repos_isValid && m_total_wikis_isValid && true;
}

} // namespace OpenAPI
