/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_create_tag_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_create_tag_request::OAIGit_create_tag_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_create_tag_request::OAIGit_create_tag_request() {
    this->initializeModel();
}

OAIGit_create_tag_request::~OAIGit_create_tag_request() {}

void OAIGit_create_tag_request::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_tagger_isSet = false;
    m_tagger_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGit_create_tag_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_create_tag_request::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_tagger_isValid = ::OpenAPI::fromJsonValue(m_tagger, json[QString("tagger")]);
    m_tagger_isSet = !json[QString("tagger")].isNull() && m_tagger_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGit_create_tag_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_create_tag_request::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_tagger.isSet()) {
        obj.insert(QString("tagger"), ::OpenAPI::toJsonValue(m_tagger));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGit_create_tag_request::getMessage() const {
    return m_message;
}
void OAIGit_create_tag_request::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGit_create_tag_request::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGit_create_tag_request::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGit_create_tag_request::getObject() const {
    return m_object;
}
void OAIGit_create_tag_request::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIGit_create_tag_request::is_object_Set() const{
    return m_object_isSet;
}

bool OAIGit_create_tag_request::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIGit_create_tag_request::getTag() const {
    return m_tag;
}
void OAIGit_create_tag_request::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIGit_create_tag_request::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIGit_create_tag_request::is_tag_Valid() const{
    return m_tag_isValid;
}

OAIGit_create_tag_request_tagger OAIGit_create_tag_request::getTagger() const {
    return m_tagger;
}
void OAIGit_create_tag_request::setTagger(const OAIGit_create_tag_request_tagger &tagger) {
    m_tagger = tagger;
    m_tagger_isSet = true;
}

bool OAIGit_create_tag_request::is_tagger_Set() const{
    return m_tagger_isSet;
}

bool OAIGit_create_tag_request::is_tagger_Valid() const{
    return m_tagger_isValid;
}

QString OAIGit_create_tag_request::getType() const {
    return m_type;
}
void OAIGit_create_tag_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGit_create_tag_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGit_create_tag_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGit_create_tag_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_create_tag_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_object_isValid && m_tag_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
