/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrgsApi_H
#define OAI_OAIOrgsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_update_webhook_config_for_app_request.h"
#include "OAIAudit_log_event.h"
#include "OAIBasic_error.h"
#include "OAIHook_delivery.h"
#include "OAIHook_delivery_item.h"
#include "OAIObject.h"
#include "OAIOrg_hook.h"
#include "OAIOrg_membership.h"
#include "OAIOrganization_full.h"
#include "OAIOrganization_simple.h"
#include "OAIOrgs_convert_member_to_outside_collaborator_request.h"
#include "OAIOrgs_create_webhook_request.h"
#include "OAIOrgs_list_app_installations_200_response.h"
#include "OAIOrgs_list_custom_roles_200_response.h"
#include "OAIOrgs_remove_outside_collaborator_422_response.h"
#include "OAIOrgs_set_membership_for_user_request.h"
#include "OAIOrgs_update_422_response.h"
#include "OAIOrgs_update_membership_for_authenticated_user_request.h"
#include "OAIOrgs_update_request.h"
#include "OAIOrgs_update_webhook_request.h"
#include "OAIScim_error.h"
#include "OAISimple_user.h"
#include "OAIValidation_error.h"
#include "OAIWebhook_config.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrgsApi : public QObject {
    Q_OBJECT

public:
    OAIOrgsApi(const int timeOut = 0);
    ~OAIOrgsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_checkMembershipForUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_checkPublicMembershipForUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_orgs_convert_member_to_outside_collaborator_request OAIOrgs_convert_member_to_outside_collaborator_request [optional]
    */
    virtual void orgs_convertMemberToOutsideCollaborator(const QString &org, const QString &username, const ::OpenAPI::OptionalParam<OAIOrgs_convert_member_to_outside_collaborator_request> &oai_orgs_convert_member_to_outside_collaborator_request = ::OpenAPI::OptionalParam<OAIOrgs_convert_member_to_outside_collaborator_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_orgs_create_webhook_request OAIOrgs_create_webhook_request [required]
    */
    virtual void orgs_createWebhook(const QString &org, const OAIOrgs_create_webhook_request &oai_orgs_create_webhook_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void orgs_deleteWebhook(const QString &org, const qint32 &hook_id);

    /**
    * @param[in]  org QString [required]
    */
    virtual void orgs_get(const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  phrase QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  after QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_getAuditLog(const QString &org, const ::OpenAPI::OptionalParam<QString> &phrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    */
    virtual void orgs_getMembershipForAuthenticatedUser(const QString &org);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_getMembershipForUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void orgs_getWebhook(const QString &org, const qint32 &hook_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void orgs_getWebhookConfigForOrg(const QString &org, const qint32 &hook_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  delivery_id qint32 [required]
    */
    virtual void orgs_getWebhookDelivery(const QString &org, const qint32 &hook_id, const qint32 &delivery_id);

    /**
    * @param[in]  since qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void orgs_list(const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listAppInstallations(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization_id QString [required]
    */
    virtual void orgs_listCustomRoles(const QString &organization_id);

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listForUser(const QString &username, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listMembers(const QString &org, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  state QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listMembershipsForAuthenticatedUser(const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listOutsideCollaborators(const QString &org, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listPublicMembers(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  redelivery bool [optional]
    */
    virtual void orgs_listWebhookDeliveries(const QString &org, const qint32 &hook_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &redelivery = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void orgs_listWebhooks(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    */
    virtual void orgs_pingWebhook(const QString &org, const qint32 &hook_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  delivery_id qint32 [required]
    */
    virtual void orgs_redeliverWebhookDelivery(const QString &org, const qint32 &hook_id, const qint32 &delivery_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_removeMember(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_removeMembershipForUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_removeOutsideCollaborator(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_removePublicMembershipForAuthenticatedUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_orgs_set_membership_for_user_request OAIOrgs_set_membership_for_user_request [optional]
    */
    virtual void orgs_setMembershipForUser(const QString &org, const QString &username, const ::OpenAPI::OptionalParam<OAIOrgs_set_membership_for_user_request> &oai_orgs_set_membership_for_user_request = ::OpenAPI::OptionalParam<OAIOrgs_set_membership_for_user_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  username QString [required]
    */
    virtual void orgs_setPublicMembershipForAuthenticatedUser(const QString &org, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_orgs_update_request OAIOrgs_update_request [optional]
    */
    virtual void orgs_update(const QString &org, const ::OpenAPI::OptionalParam<OAIOrgs_update_request> &oai_orgs_update_request = ::OpenAPI::OptionalParam<OAIOrgs_update_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_orgs_update_membership_for_authenticated_user_request OAIOrgs_update_membership_for_authenticated_user_request [required]
    */
    virtual void orgs_updateMembershipForAuthenticatedUser(const QString &org, const OAIOrgs_update_membership_for_authenticated_user_request &oai_orgs_update_membership_for_authenticated_user_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  oai_orgs_update_webhook_request OAIOrgs_update_webhook_request [optional]
    */
    virtual void orgs_updateWebhook(const QString &org, const qint32 &hook_id, const ::OpenAPI::OptionalParam<OAIOrgs_update_webhook_request> &oai_orgs_update_webhook_request = ::OpenAPI::OptionalParam<OAIOrgs_update_webhook_request>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  hook_id qint32 [required]
    * @param[in]  oai_apps_update_webhook_config_for_app_request OAIApps_update_webhook_config_for_app_request [optional]
    */
    virtual void orgs_updateWebhookConfigForOrg(const QString &org, const qint32 &hook_id, const ::OpenAPI::OptionalParam<OAIApps_update_webhook_config_for_app_request> &oai_apps_update_webhook_config_for_app_request = ::OpenAPI::OptionalParam<OAIApps_update_webhook_config_for_app_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orgs_checkMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_checkPublicMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_convertMemberToOutsideCollaboratorCallback(OAIHttpRequestWorker *worker);
    void orgs_createWebhookCallback(OAIHttpRequestWorker *worker);
    void orgs_deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void orgs_getCallback(OAIHttpRequestWorker *worker);
    void orgs_getAuditLogCallback(OAIHttpRequestWorker *worker);
    void orgs_getMembershipForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_getMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_getWebhookCallback(OAIHttpRequestWorker *worker);
    void orgs_getWebhookConfigForOrgCallback(OAIHttpRequestWorker *worker);
    void orgs_getWebhookDeliveryCallback(OAIHttpRequestWorker *worker);
    void orgs_listCallback(OAIHttpRequestWorker *worker);
    void orgs_listAppInstallationsCallback(OAIHttpRequestWorker *worker);
    void orgs_listCustomRolesCallback(OAIHttpRequestWorker *worker);
    void orgs_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_listForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_listMembersCallback(OAIHttpRequestWorker *worker);
    void orgs_listMembershipsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_listOutsideCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void orgs_listPublicMembersCallback(OAIHttpRequestWorker *worker);
    void orgs_listWebhookDeliveriesCallback(OAIHttpRequestWorker *worker);
    void orgs_listWebhooksCallback(OAIHttpRequestWorker *worker);
    void orgs_pingWebhookCallback(OAIHttpRequestWorker *worker);
    void orgs_redeliverWebhookDeliveryCallback(OAIHttpRequestWorker *worker);
    void orgs_removeMemberCallback(OAIHttpRequestWorker *worker);
    void orgs_removeMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_removeOutsideCollaboratorCallback(OAIHttpRequestWorker *worker);
    void orgs_removePublicMembershipForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_setMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void orgs_setPublicMembershipForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_updateCallback(OAIHttpRequestWorker *worker);
    void orgs_updateMembershipForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void orgs_updateWebhookCallback(OAIHttpRequestWorker *worker);
    void orgs_updateWebhookConfigForOrgCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void orgs_checkMembershipForUserSignal();
    void orgs_checkPublicMembershipForUserSignal();
    void orgs_convertMemberToOutsideCollaboratorSignal(OAIObject summary);
    void orgs_createWebhookSignal(OAIOrg_hook summary);
    void orgs_deleteWebhookSignal();
    void orgs_getSignal(OAIOrganization_full summary);
    void orgs_getAuditLogSignal(QList<OAIAudit_log_event> summary);
    void orgs_getMembershipForAuthenticatedUserSignal(OAIOrg_membership summary);
    void orgs_getMembershipForUserSignal(OAIOrg_membership summary);
    void orgs_getWebhookSignal(OAIOrg_hook summary);
    void orgs_getWebhookConfigForOrgSignal(OAIWebhook_config summary);
    void orgs_getWebhookDeliverySignal(OAIHook_delivery summary);
    void orgs_listSignal(QList<OAIOrganization_simple> summary);
    void orgs_listAppInstallationsSignal(OAIOrgs_list_app_installations_200_response summary);
    void orgs_listCustomRolesSignal(OAIOrgs_list_custom_roles_200_response summary);
    void orgs_listForAuthenticatedUserSignal(QList<OAIOrganization_simple> summary);
    void orgs_listForUserSignal(QList<OAIOrganization_simple> summary);
    void orgs_listMembersSignal(QList<OAISimple_user> summary);
    void orgs_listMembershipsForAuthenticatedUserSignal(QList<OAIOrg_membership> summary);
    void orgs_listOutsideCollaboratorsSignal(QList<OAISimple_user> summary);
    void orgs_listPublicMembersSignal(QList<OAISimple_user> summary);
    void orgs_listWebhookDeliveriesSignal(QList<OAIHook_delivery_item> summary);
    void orgs_listWebhooksSignal(QList<OAIOrg_hook> summary);
    void orgs_pingWebhookSignal();
    void orgs_redeliverWebhookDeliverySignal(OAIObject summary);
    void orgs_removeMemberSignal();
    void orgs_removeMembershipForUserSignal();
    void orgs_removeOutsideCollaboratorSignal();
    void orgs_removePublicMembershipForAuthenticatedUserSignal();
    void orgs_setMembershipForUserSignal(OAIOrg_membership summary);
    void orgs_setPublicMembershipForAuthenticatedUserSignal();
    void orgs_updateSignal(OAIOrganization_full summary);
    void orgs_updateMembershipForAuthenticatedUserSignal(OAIOrg_membership summary);
    void orgs_updateWebhookSignal(OAIOrg_hook summary);
    void orgs_updateWebhookConfigForOrgSignal(OAIWebhook_config summary);


    void orgs_checkMembershipForUserSignalFull(OAIHttpRequestWorker *worker);
    void orgs_checkPublicMembershipForUserSignalFull(OAIHttpRequestWorker *worker);
    void orgs_convertMemberToOutsideCollaboratorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orgs_createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIOrg_hook summary);
    void orgs_deleteWebhookSignalFull(OAIHttpRequestWorker *worker);
    void orgs_getSignalFull(OAIHttpRequestWorker *worker, OAIOrganization_full summary);
    void orgs_getAuditLogSignalFull(OAIHttpRequestWorker *worker, QList<OAIAudit_log_event> summary);
    void orgs_getMembershipForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIOrg_membership summary);
    void orgs_getMembershipForUserSignalFull(OAIHttpRequestWorker *worker, OAIOrg_membership summary);
    void orgs_getWebhookSignalFull(OAIHttpRequestWorker *worker, OAIOrg_hook summary);
    void orgs_getWebhookConfigForOrgSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_config summary);
    void orgs_getWebhookDeliverySignalFull(OAIHttpRequestWorker *worker, OAIHook_delivery summary);
    void orgs_listSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization_simple> summary);
    void orgs_listAppInstallationsSignalFull(OAIHttpRequestWorker *worker, OAIOrgs_list_app_installations_200_response summary);
    void orgs_listCustomRolesSignalFull(OAIHttpRequestWorker *worker, OAIOrgs_list_custom_roles_200_response summary);
    void orgs_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization_simple> summary);
    void orgs_listForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganization_simple> summary);
    void orgs_listMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void orgs_listMembershipsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrg_membership> summary);
    void orgs_listOutsideCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void orgs_listPublicMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void orgs_listWebhookDeliveriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook_delivery_item> summary);
    void orgs_listWebhooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrg_hook> summary);
    void orgs_pingWebhookSignalFull(OAIHttpRequestWorker *worker);
    void orgs_redeliverWebhookDeliverySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void orgs_removeMemberSignalFull(OAIHttpRequestWorker *worker);
    void orgs_removeMembershipForUserSignalFull(OAIHttpRequestWorker *worker);
    void orgs_removeOutsideCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void orgs_removePublicMembershipForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void orgs_setMembershipForUserSignalFull(OAIHttpRequestWorker *worker, OAIOrg_membership summary);
    void orgs_setPublicMembershipForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void orgs_updateSignalFull(OAIHttpRequestWorker *worker, OAIOrganization_full summary);
    void orgs_updateMembershipForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIOrg_membership summary);
    void orgs_updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIOrg_hook summary);
    void orgs_updateWebhookConfigForOrgSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_config summary);

    Q_DECL_DEPRECATED_X("Use orgs_checkMembershipForUserSignalError() instead")
    void orgs_checkMembershipForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_checkMembershipForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_checkPublicMembershipForUserSignalError() instead")
    void orgs_checkPublicMembershipForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_checkPublicMembershipForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_convertMemberToOutsideCollaboratorSignalError() instead")
    void orgs_convertMemberToOutsideCollaboratorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_convertMemberToOutsideCollaboratorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_createWebhookSignalError() instead")
    void orgs_createWebhookSignalE(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_createWebhookSignalError(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_deleteWebhookSignalError() instead")
    void orgs_deleteWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_deleteWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getSignalError() instead")
    void orgs_getSignalE(OAIOrganization_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getSignalError(OAIOrganization_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getAuditLogSignalError() instead")
    void orgs_getAuditLogSignalE(QList<OAIAudit_log_event> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getAuditLogSignalError(QList<OAIAudit_log_event> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getMembershipForAuthenticatedUserSignalError() instead")
    void orgs_getMembershipForAuthenticatedUserSignalE(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getMembershipForAuthenticatedUserSignalError(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getMembershipForUserSignalError() instead")
    void orgs_getMembershipForUserSignalE(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getMembershipForUserSignalError(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookSignalError() instead")
    void orgs_getWebhookSignalE(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookSignalError(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookConfigForOrgSignalError() instead")
    void orgs_getWebhookConfigForOrgSignalE(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookConfigForOrgSignalError(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookDeliverySignalError() instead")
    void orgs_getWebhookDeliverySignalE(OAIHook_delivery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookDeliverySignalError(OAIHook_delivery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listSignalError() instead")
    void orgs_listSignalE(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listSignalError(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listAppInstallationsSignalError() instead")
    void orgs_listAppInstallationsSignalE(OAIOrgs_list_app_installations_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listAppInstallationsSignalError(OAIOrgs_list_app_installations_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listCustomRolesSignalError() instead")
    void orgs_listCustomRolesSignalE(OAIOrgs_list_custom_roles_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listCustomRolesSignalError(OAIOrgs_list_custom_roles_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listForAuthenticatedUserSignalError() instead")
    void orgs_listForAuthenticatedUserSignalE(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listForAuthenticatedUserSignalError(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listForUserSignalError() instead")
    void orgs_listForUserSignalE(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listForUserSignalError(QList<OAIOrganization_simple> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listMembersSignalError() instead")
    void orgs_listMembersSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listMembersSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listMembershipsForAuthenticatedUserSignalError() instead")
    void orgs_listMembershipsForAuthenticatedUserSignalE(QList<OAIOrg_membership> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listMembershipsForAuthenticatedUserSignalError(QList<OAIOrg_membership> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listOutsideCollaboratorsSignalError() instead")
    void orgs_listOutsideCollaboratorsSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listOutsideCollaboratorsSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listPublicMembersSignalError() instead")
    void orgs_listPublicMembersSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listPublicMembersSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listWebhookDeliveriesSignalError() instead")
    void orgs_listWebhookDeliveriesSignalE(QList<OAIHook_delivery_item> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listWebhookDeliveriesSignalError(QList<OAIHook_delivery_item> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listWebhooksSignalError() instead")
    void orgs_listWebhooksSignalE(QList<OAIOrg_hook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listWebhooksSignalError(QList<OAIOrg_hook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_pingWebhookSignalError() instead")
    void orgs_pingWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_pingWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_redeliverWebhookDeliverySignalError() instead")
    void orgs_redeliverWebhookDeliverySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_redeliverWebhookDeliverySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeMemberSignalError() instead")
    void orgs_removeMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeMembershipForUserSignalError() instead")
    void orgs_removeMembershipForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeMembershipForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeOutsideCollaboratorSignalError() instead")
    void orgs_removeOutsideCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeOutsideCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removePublicMembershipForAuthenticatedUserSignalError() instead")
    void orgs_removePublicMembershipForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removePublicMembershipForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_setMembershipForUserSignalError() instead")
    void orgs_setMembershipForUserSignalE(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_setMembershipForUserSignalError(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_setPublicMembershipForAuthenticatedUserSignalError() instead")
    void orgs_setPublicMembershipForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_setPublicMembershipForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateSignalError() instead")
    void orgs_updateSignalE(OAIOrganization_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateSignalError(OAIOrganization_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateMembershipForAuthenticatedUserSignalError() instead")
    void orgs_updateMembershipForAuthenticatedUserSignalE(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateMembershipForAuthenticatedUserSignalError(OAIOrg_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateWebhookSignalError() instead")
    void orgs_updateWebhookSignalE(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateWebhookSignalError(OAIOrg_hook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateWebhookConfigForOrgSignalError() instead")
    void orgs_updateWebhookConfigForOrgSignalE(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateWebhookConfigForOrgSignalError(OAIWebhook_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use orgs_checkMembershipForUserSignalErrorFull() instead")
    void orgs_checkMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_checkMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_checkPublicMembershipForUserSignalErrorFull() instead")
    void orgs_checkPublicMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_checkPublicMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_convertMemberToOutsideCollaboratorSignalErrorFull() instead")
    void orgs_convertMemberToOutsideCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_convertMemberToOutsideCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_createWebhookSignalErrorFull() instead")
    void orgs_createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_deleteWebhookSignalErrorFull() instead")
    void orgs_deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getSignalErrorFull() instead")
    void orgs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getAuditLogSignalErrorFull() instead")
    void orgs_getAuditLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getAuditLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getMembershipForAuthenticatedUserSignalErrorFull() instead")
    void orgs_getMembershipForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getMembershipForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getMembershipForUserSignalErrorFull() instead")
    void orgs_getMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookSignalErrorFull() instead")
    void orgs_getWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookConfigForOrgSignalErrorFull() instead")
    void orgs_getWebhookConfigForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookConfigForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_getWebhookDeliverySignalErrorFull() instead")
    void orgs_getWebhookDeliverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_getWebhookDeliverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listSignalErrorFull() instead")
    void orgs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listAppInstallationsSignalErrorFull() instead")
    void orgs_listAppInstallationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listAppInstallationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listCustomRolesSignalErrorFull() instead")
    void orgs_listCustomRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listCustomRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listForAuthenticatedUserSignalErrorFull() instead")
    void orgs_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listForUserSignalErrorFull() instead")
    void orgs_listForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listMembersSignalErrorFull() instead")
    void orgs_listMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listMembershipsForAuthenticatedUserSignalErrorFull() instead")
    void orgs_listMembershipsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listMembershipsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listOutsideCollaboratorsSignalErrorFull() instead")
    void orgs_listOutsideCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listOutsideCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listPublicMembersSignalErrorFull() instead")
    void orgs_listPublicMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listPublicMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listWebhookDeliveriesSignalErrorFull() instead")
    void orgs_listWebhookDeliveriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listWebhookDeliveriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_listWebhooksSignalErrorFull() instead")
    void orgs_listWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_listWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_pingWebhookSignalErrorFull() instead")
    void orgs_pingWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_pingWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_redeliverWebhookDeliverySignalErrorFull() instead")
    void orgs_redeliverWebhookDeliverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_redeliverWebhookDeliverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeMemberSignalErrorFull() instead")
    void orgs_removeMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeMembershipForUserSignalErrorFull() instead")
    void orgs_removeMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removeOutsideCollaboratorSignalErrorFull() instead")
    void orgs_removeOutsideCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removeOutsideCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_removePublicMembershipForAuthenticatedUserSignalErrorFull() instead")
    void orgs_removePublicMembershipForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_removePublicMembershipForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_setMembershipForUserSignalErrorFull() instead")
    void orgs_setMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_setMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_setPublicMembershipForAuthenticatedUserSignalErrorFull() instead")
    void orgs_setPublicMembershipForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_setPublicMembershipForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateSignalErrorFull() instead")
    void orgs_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateMembershipForAuthenticatedUserSignalErrorFull() instead")
    void orgs_updateMembershipForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateMembershipForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateWebhookSignalErrorFull() instead")
    void orgs_updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgs_updateWebhookConfigForOrgSignalErrorFull() instead")
    void orgs_updateWebhookConfigForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgs_updateWebhookConfigForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
