/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetaApi_H
#define OAI_OAIMetaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_overview.h"
#include "OAIRoot.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetaApi : public QObject {
    Q_OBJECT

public:
    OAIMetaApi(const int timeOut = 0);
    ~OAIMetaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void meta_get();

    /**
    * @param[in]  s QString [optional]
    */
    virtual void meta_getOctocat(const ::OpenAPI::OptionalParam<QString> &s = ::OpenAPI::OptionalParam<QString>());


    virtual void meta_getZen();


    virtual void meta_root();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void meta_getCallback(OAIHttpRequestWorker *worker);
    void meta_getOctocatCallback(OAIHttpRequestWorker *worker);
    void meta_getZenCallback(OAIHttpRequestWorker *worker);
    void meta_rootCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void meta_getSignal(OAIApi_overview summary);
    void meta_getOctocatSignal(QString summary);
    void meta_getZenSignal(QString summary);
    void meta_rootSignal(OAIRoot summary);


    void meta_getSignalFull(OAIHttpRequestWorker *worker, OAIApi_overview summary);
    void meta_getOctocatSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void meta_getZenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void meta_rootSignalFull(OAIHttpRequestWorker *worker, OAIRoot summary);

    Q_DECL_DEPRECATED_X("Use meta_getSignalError() instead")
    void meta_getSignalE(OAIApi_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getSignalError(OAIApi_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_getOctocatSignalError() instead")
    void meta_getOctocatSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getOctocatSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_getZenSignalError() instead")
    void meta_getZenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getZenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_rootSignalError() instead")
    void meta_rootSignalE(OAIRoot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_rootSignalError(OAIRoot summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use meta_getSignalErrorFull() instead")
    void meta_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_getOctocatSignalErrorFull() instead")
    void meta_getOctocatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getOctocatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_getZenSignalErrorFull() instead")
    void meta_getZenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_getZenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meta_rootSignalErrorFull() instead")
    void meta_rootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meta_rootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
