/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICodeScanningApi_H
#define OAI_OAICodeScanningApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAICode_scanning_alert.h"
#include "OAICode_scanning_alert_instance.h"
#include "OAICode_scanning_alert_items.h"
#include "OAICode_scanning_alert_state.h"
#include "OAICode_scanning_analysis.h"
#include "OAICode_scanning_analysis_deletion.h"
#include "OAICode_scanning_sarifs_receipt.h"
#include "OAICode_scanning_sarifs_status.h"
#include "OAICode_scanning_update_alert_request.h"
#include "OAICode_scanning_upload_sarif_request.h"
#include "OAIScim_error.h"
#include "OAISecret_scanning_list_alerts_for_enterprise_503_response.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICodeScanningApi : public QObject {
    Q_OBJECT

public:
    OAICodeScanningApi(const int timeOut = 0);
    ~OAICodeScanningApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  analysis_id qint32 [required]
    * @param[in]  confirm_delete QString [optional]
    */
    virtual void codeScanning_deleteAnalysis(const QString &owner, const QString &repo, const qint32 &analysis_id, const ::OpenAPI::OptionalParam<QString> &confirm_delete = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  alert_number qint32 [required]
    */
    virtual void codeScanning_getAlert(const QString &owner, const QString &repo, const qint32 &alert_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  analysis_id qint32 [required]
    */
    virtual void codeScanning_getAnalysis(const QString &owner, const QString &repo, const qint32 &analysis_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  sarif_id QString [required]
    */
    virtual void codeScanning_getSarif(const QString &owner, const QString &repo, const QString &sarif_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  alert_number qint32 [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  ref QString [optional]
    */
    virtual void codeScanning_listAlertInstances(const QString &owner, const QString &repo, const qint32 &alert_number, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tool_name QString [optional]
    * @param[in]  tool_guid QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  ref QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  state OAICode_scanning_alert_state [optional]
    */
    virtual void codeScanning_listAlertsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &tool_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tool_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICode_scanning_alert_state> &state = ::OpenAPI::OptionalParam<OAICode_scanning_alert_state>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tool_name QString [optional]
    * @param[in]  tool_guid QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  ref QString [optional]
    * @param[in]  sarif_id QString [optional]
    */
    virtual void codeScanning_listRecentAnalyses(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &tool_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tool_guid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sarif_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  alert_number qint32 [required]
    * @param[in]  oai_code_scanning_update_alert_request OAICode_scanning_update_alert_request [required]
    */
    virtual void codeScanning_updateAlert(const QString &owner, const QString &repo, const qint32 &alert_number, const OAICode_scanning_update_alert_request &oai_code_scanning_update_alert_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_code_scanning_upload_sarif_request OAICode_scanning_upload_sarif_request [required]
    */
    virtual void codeScanning_uploadSarif(const QString &owner, const QString &repo, const OAICode_scanning_upload_sarif_request &oai_code_scanning_upload_sarif_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void codeScanning_deleteAnalysisCallback(OAIHttpRequestWorker *worker);
    void codeScanning_getAlertCallback(OAIHttpRequestWorker *worker);
    void codeScanning_getAnalysisCallback(OAIHttpRequestWorker *worker);
    void codeScanning_getSarifCallback(OAIHttpRequestWorker *worker);
    void codeScanning_listAlertInstancesCallback(OAIHttpRequestWorker *worker);
    void codeScanning_listAlertsForRepoCallback(OAIHttpRequestWorker *worker);
    void codeScanning_listRecentAnalysesCallback(OAIHttpRequestWorker *worker);
    void codeScanning_updateAlertCallback(OAIHttpRequestWorker *worker);
    void codeScanning_uploadSarifCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void codeScanning_deleteAnalysisSignal(OAICode_scanning_analysis_deletion summary);
    void codeScanning_getAlertSignal(OAICode_scanning_alert summary);
    void codeScanning_getAnalysisSignal(OAICode_scanning_analysis summary);
    void codeScanning_getSarifSignal(OAICode_scanning_sarifs_status summary);
    void codeScanning_listAlertInstancesSignal(QList<OAICode_scanning_alert_instance> summary);
    void codeScanning_listAlertsForRepoSignal(QList<OAICode_scanning_alert_items> summary);
    void codeScanning_listRecentAnalysesSignal(QList<OAICode_scanning_analysis> summary);
    void codeScanning_updateAlertSignal(OAICode_scanning_alert summary);
    void codeScanning_uploadSarifSignal(OAICode_scanning_sarifs_receipt summary);


    void codeScanning_deleteAnalysisSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_analysis_deletion summary);
    void codeScanning_getAlertSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_alert summary);
    void codeScanning_getAnalysisSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_analysis summary);
    void codeScanning_getSarifSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_sarifs_status summary);
    void codeScanning_listAlertInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAICode_scanning_alert_instance> summary);
    void codeScanning_listAlertsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAICode_scanning_alert_items> summary);
    void codeScanning_listRecentAnalysesSignalFull(OAIHttpRequestWorker *worker, QList<OAICode_scanning_analysis> summary);
    void codeScanning_updateAlertSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_alert summary);
    void codeScanning_uploadSarifSignalFull(OAIHttpRequestWorker *worker, OAICode_scanning_sarifs_receipt summary);

    Q_DECL_DEPRECATED_X("Use codeScanning_deleteAnalysisSignalError() instead")
    void codeScanning_deleteAnalysisSignalE(OAICode_scanning_analysis_deletion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_deleteAnalysisSignalError(OAICode_scanning_analysis_deletion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getAlertSignalError() instead")
    void codeScanning_getAlertSignalE(OAICode_scanning_alert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getAlertSignalError(OAICode_scanning_alert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getAnalysisSignalError() instead")
    void codeScanning_getAnalysisSignalE(OAICode_scanning_analysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getAnalysisSignalError(OAICode_scanning_analysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getSarifSignalError() instead")
    void codeScanning_getSarifSignalE(OAICode_scanning_sarifs_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getSarifSignalError(OAICode_scanning_sarifs_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listAlertInstancesSignalError() instead")
    void codeScanning_listAlertInstancesSignalE(QList<OAICode_scanning_alert_instance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listAlertInstancesSignalError(QList<OAICode_scanning_alert_instance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listAlertsForRepoSignalError() instead")
    void codeScanning_listAlertsForRepoSignalE(QList<OAICode_scanning_alert_items> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listAlertsForRepoSignalError(QList<OAICode_scanning_alert_items> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listRecentAnalysesSignalError() instead")
    void codeScanning_listRecentAnalysesSignalE(QList<OAICode_scanning_analysis> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listRecentAnalysesSignalError(QList<OAICode_scanning_analysis> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_updateAlertSignalError() instead")
    void codeScanning_updateAlertSignalE(OAICode_scanning_alert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_updateAlertSignalError(OAICode_scanning_alert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_uploadSarifSignalError() instead")
    void codeScanning_uploadSarifSignalE(OAICode_scanning_sarifs_receipt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_uploadSarifSignalError(OAICode_scanning_sarifs_receipt summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use codeScanning_deleteAnalysisSignalErrorFull() instead")
    void codeScanning_deleteAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_deleteAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getAlertSignalErrorFull() instead")
    void codeScanning_getAlertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getAlertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getAnalysisSignalErrorFull() instead")
    void codeScanning_getAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_getSarifSignalErrorFull() instead")
    void codeScanning_getSarifSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_getSarifSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listAlertInstancesSignalErrorFull() instead")
    void codeScanning_listAlertInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listAlertInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listAlertsForRepoSignalErrorFull() instead")
    void codeScanning_listAlertsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listAlertsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_listRecentAnalysesSignalErrorFull() instead")
    void codeScanning_listRecentAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_listRecentAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_updateAlertSignalErrorFull() instead")
    void codeScanning_updateAlertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_updateAlertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeScanning_uploadSarifSignalErrorFull() instead")
    void codeScanning_uploadSarifSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeScanning_uploadSarifSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
