/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMigrationsApi_H
#define OAI_OAIMigrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIMigration.h"
#include "OAIMigrations_start_for_authenticated_user_request.h"
#include "OAIMigrations_start_for_org_request.h"
#include "OAIMinimal_repository.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMigrationsApi : public QObject {
    Q_OBJECT

public:
    OAIMigrationsApi(const int timeOut = 0);
    ~OAIMigrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org QString [required]
    * @param[in]  migration_id qint32 [required]
    */
    virtual void migrations_deleteArchiveForOrg(const QString &org, const qint32 &migration_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  migration_id qint32 [required]
    */
    virtual void migrations_downloadArchiveForOrg(const QString &org, const qint32 &migration_id);

    /**
    * @param[in]  migration_id qint32 [required]
    */
    virtual void migrations_getArchiveForAuthenticatedUser(const qint32 &migration_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  migration_id qint32 [required]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void migrations_getStatusForOrg(const QString &org, const qint32 &migration_id, const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void migrations_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void migrations_listForOrg(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  migration_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void migrations_listReposForAuthenticatedUser(const qint32 &migration_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  migration_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void migrations_listReposForOrg(const QString &org, const qint32 &migration_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_migrations_start_for_authenticated_user_request OAIMigrations_start_for_authenticated_user_request [required]
    */
    virtual void migrations_startForAuthenticatedUser(const OAIMigrations_start_for_authenticated_user_request &oai_migrations_start_for_authenticated_user_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_migrations_start_for_org_request OAIMigrations_start_for_org_request [required]
    */
    virtual void migrations_startForOrg(const QString &org, const OAIMigrations_start_for_org_request &oai_migrations_start_for_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  migration_id qint32 [required]
    * @param[in]  repo_name QString [required]
    */
    virtual void migrations_unlockRepoForOrg(const QString &org, const qint32 &migration_id, const QString &repo_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void migrations_deleteArchiveForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_downloadArchiveForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_getArchiveForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void migrations_getStatusForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void migrations_listForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_listReposForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void migrations_listReposForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_startForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void migrations_startForOrgCallback(OAIHttpRequestWorker *worker);
    void migrations_unlockRepoForOrgCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void migrations_deleteArchiveForOrgSignal();
    void migrations_downloadArchiveForOrgSignal();
    void migrations_getArchiveForAuthenticatedUserSignal();
    void migrations_getStatusForOrgSignal(OAIMigration summary);
    void migrations_listForAuthenticatedUserSignal(QList<OAIMigration> summary);
    void migrations_listForOrgSignal(QList<OAIMigration> summary);
    void migrations_listReposForAuthenticatedUserSignal(QList<OAIMinimal_repository> summary);
    void migrations_listReposForOrgSignal(QList<OAIMinimal_repository> summary);
    void migrations_startForAuthenticatedUserSignal(OAIMigration summary);
    void migrations_startForOrgSignal(OAIMigration summary);
    void migrations_unlockRepoForOrgSignal();


    void migrations_deleteArchiveForOrgSignalFull(OAIHttpRequestWorker *worker);
    void migrations_downloadArchiveForOrgSignalFull(OAIHttpRequestWorker *worker);
    void migrations_getArchiveForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker);
    void migrations_getStatusForOrgSignalFull(OAIHttpRequestWorker *worker, OAIMigration summary);
    void migrations_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIMigration> summary);
    void migrations_listForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIMigration> summary);
    void migrations_listReposForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void migrations_listReposForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void migrations_startForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIMigration summary);
    void migrations_startForOrgSignalFull(OAIHttpRequestWorker *worker, OAIMigration summary);
    void migrations_unlockRepoForOrgSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use migrations_deleteArchiveForOrgSignalError() instead")
    void migrations_deleteArchiveForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_deleteArchiveForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_downloadArchiveForOrgSignalError() instead")
    void migrations_downloadArchiveForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_downloadArchiveForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_getArchiveForAuthenticatedUserSignalError() instead")
    void migrations_getArchiveForAuthenticatedUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_getArchiveForAuthenticatedUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_getStatusForOrgSignalError() instead")
    void migrations_getStatusForOrgSignalE(OAIMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_getStatusForOrgSignalError(OAIMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listForAuthenticatedUserSignalError() instead")
    void migrations_listForAuthenticatedUserSignalE(QList<OAIMigration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listForAuthenticatedUserSignalError(QList<OAIMigration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listForOrgSignalError() instead")
    void migrations_listForOrgSignalE(QList<OAIMigration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listForOrgSignalError(QList<OAIMigration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listReposForAuthenticatedUserSignalError() instead")
    void migrations_listReposForAuthenticatedUserSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listReposForAuthenticatedUserSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listReposForOrgSignalError() instead")
    void migrations_listReposForOrgSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listReposForOrgSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_startForAuthenticatedUserSignalError() instead")
    void migrations_startForAuthenticatedUserSignalE(OAIMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_startForAuthenticatedUserSignalError(OAIMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_startForOrgSignalError() instead")
    void migrations_startForOrgSignalE(OAIMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_startForOrgSignalError(OAIMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_unlockRepoForOrgSignalError() instead")
    void migrations_unlockRepoForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_unlockRepoForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use migrations_deleteArchiveForOrgSignalErrorFull() instead")
    void migrations_deleteArchiveForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_deleteArchiveForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_downloadArchiveForOrgSignalErrorFull() instead")
    void migrations_downloadArchiveForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_downloadArchiveForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_getArchiveForAuthenticatedUserSignalErrorFull() instead")
    void migrations_getArchiveForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_getArchiveForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_getStatusForOrgSignalErrorFull() instead")
    void migrations_getStatusForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_getStatusForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listForAuthenticatedUserSignalErrorFull() instead")
    void migrations_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listForOrgSignalErrorFull() instead")
    void migrations_listForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listReposForAuthenticatedUserSignalErrorFull() instead")
    void migrations_listReposForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listReposForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_listReposForOrgSignalErrorFull() instead")
    void migrations_listReposForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_listReposForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_startForAuthenticatedUserSignalErrorFull() instead")
    void migrations_startForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_startForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_startForOrgSignalErrorFull() instead")
    void migrations_startForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_startForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use migrations_unlockRepoForOrgSignalErrorFull() instead")
    void migrations_unlockRepoForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void migrations_unlockRepoForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
