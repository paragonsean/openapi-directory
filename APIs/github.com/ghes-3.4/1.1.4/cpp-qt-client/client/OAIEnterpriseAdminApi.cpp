/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterpriseAdminApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEnterpriseAdminApi::OAIEnterpriseAdminApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEnterpriseAdminApi::~OAIEnterpriseAdminApi() {
}

void OAIEnterpriseAdminApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://github.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}/api/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server or Enterprise Cloud protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_addAuthorizedSshKey", serverConf);
    _serverIndices.insert("enterpriseAdmin_addAuthorizedSshKey", 0);
    _serverConfigs.insert("enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_createEnterpriseServerLicense", serverConf);
    _serverIndices.insert("enterpriseAdmin_createEnterpriseServerLicense", 0);
    _serverConfigs.insert("enterpriseAdmin_createGlobalWebhook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createGlobalWebhook", 0);
    _serverConfigs.insert("enterpriseAdmin_createImpersonationOAuthToken", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createImpersonationOAuthToken", 0);
    _serverConfigs.insert("enterpriseAdmin_createOrg", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createOrg", 0);
    _serverConfigs.insert("enterpriseAdmin_createPreReceiveEnvironment", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createPreReceiveEnvironment", 0);
    _serverConfigs.insert("enterpriseAdmin_createPreReceiveHook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createPreReceiveHook", 0);
    _serverConfigs.insert("enterpriseAdmin_createRegistrationTokenForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createRegistrationTokenForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_createRemoveTokenForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createRemoveTokenForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_createUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_createUser", 0);
    _serverConfigs.insert("enterpriseAdmin_deleteGlobalWebhook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deleteGlobalWebhook", 0);
    _serverConfigs.insert("enterpriseAdmin_deleteImpersonationOAuthToken", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deleteImpersonationOAuthToken", 0);
    _serverConfigs.insert("enterpriseAdmin_deletePersonalAccessToken", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deletePersonalAccessToken", 0);
    _serverConfigs.insert("enterpriseAdmin_deletePreReceiveEnvironment", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deletePreReceiveEnvironment", 0);
    _serverConfigs.insert("enterpriseAdmin_deletePreReceiveHook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deletePreReceiveHook", 0);
    _serverConfigs.insert("enterpriseAdmin_deletePublicKey", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deletePublicKey", 0);
    _serverConfigs.insert("enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_deleteUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_deleteUser", 0);
    _serverConfigs.insert("enterpriseAdmin_demoteSiteAdministrator", defaultConf);
    _serverIndices.insert("enterpriseAdmin_demoteSiteAdministrator", 0);
    _serverConfigs.insert("enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_enableOrDisableMaintenanceMode", serverConf);
    _serverIndices.insert("enterpriseAdmin_enableOrDisableMaintenanceMode", 0);
    _serverConfigs.insert("enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_getAllAuthorizedSshKeys", serverConf);
    _serverIndices.insert("enterpriseAdmin_getAllAuthorizedSshKeys", 0);
    _serverConfigs.insert("enterpriseAdmin_getAllStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getAllStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getAllowedActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getAllowedActionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_getAnnouncement", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getAnnouncement", 0);
    _serverConfigs.insert("enterpriseAdmin_getAuditLog", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getAuditLog", 0);
    _serverConfigs.insert("enterpriseAdmin_getCommentStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getCommentStats", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_getConfigurationStatus", serverConf);
    _serverIndices.insert("enterpriseAdmin_getConfigurationStatus", 0);
    _serverConfigs.insert("enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment", 0);
    _serverConfigs.insert("enterpriseAdmin_getGistStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getGistStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getGithubActionsPermissionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getGithubActionsPermissionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_getGlobalWebhook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getGlobalWebhook", 0);
    _serverConfigs.insert("enterpriseAdmin_getHooksStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getHooksStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getIssueStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getIssueStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getLicenseInformation", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getLicenseInformation", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_getMaintenanceStatus", serverConf);
    _serverIndices.insert("enterpriseAdmin_getMaintenanceStatus", 0);
    _serverConfigs.insert("enterpriseAdmin_getMilestoneStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getMilestoneStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getOrgStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getOrgStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getPagesStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPagesStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getPreReceiveEnvironment", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPreReceiveEnvironment", 0);
    _serverConfigs.insert("enterpriseAdmin_getPreReceiveHook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPreReceiveHook", 0);
    _serverConfigs.insert("enterpriseAdmin_getPreReceiveHookForOrg", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPreReceiveHookForOrg", 0);
    _serverConfigs.insert("enterpriseAdmin_getPreReceiveHookForRepo", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPreReceiveHookForRepo", 0);
    _serverConfigs.insert("enterpriseAdmin_getPullRequestStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getPullRequestStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getRepoStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getRepoStats", 0);
    _serverConfigs.insert("enterpriseAdmin_getSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_getSettings", serverConf);
    _serverIndices.insert("enterpriseAdmin_getSettings", 0);
    _serverConfigs.insert("enterpriseAdmin_getUserStats", defaultConf);
    _serverIndices.insert("enterpriseAdmin_getUserStats", 0);
    _serverConfigs.insert("enterpriseAdmin_listGlobalWebhooks", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listGlobalWebhooks", 0);
    _serverConfigs.insert("enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listPersonalAccessTokens", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPersonalAccessTokens", 0);
    _serverConfigs.insert("enterpriseAdmin_listPreReceiveEnvironments", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPreReceiveEnvironments", 0);
    _serverConfigs.insert("enterpriseAdmin_listPreReceiveHooks", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPreReceiveHooks", 0);
    _serverConfigs.insert("enterpriseAdmin_listPreReceiveHooksForOrg", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPreReceiveHooksForOrg", 0);
    _serverConfigs.insert("enterpriseAdmin_listPreReceiveHooksForRepo", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPreReceiveHooksForRepo", 0);
    _serverConfigs.insert("enterpriseAdmin_listPublicKeys", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listPublicKeys", 0);
    _serverConfigs.insert("enterpriseAdmin_listRunnerApplicationsForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listRunnerApplicationsForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listSelfHostedRunnersForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listSelfHostedRunnersForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_pingGlobalWebhook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_pingGlobalWebhook", 0);
    _serverConfigs.insert("enterpriseAdmin_promoteUserToBeSiteAdministrator", defaultConf);
    _serverIndices.insert("enterpriseAdmin_promoteUserToBeSiteAdministrator", 0);
    _serverConfigs.insert("enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_removeAnnouncement", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removeAnnouncement", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_removeAuthorizedSshKey", serverConf);
    _serverIndices.insert("enterpriseAdmin_removeAuthorizedSshKey", 0);
    _serverConfigs.insert("enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_removePreReceiveHookEnforcementForOrg", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removePreReceiveHookEnforcementForOrg", 0);
    _serverConfigs.insert("enterpriseAdmin_removePreReceiveHookEnforcementForRepo", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removePreReceiveHookEnforcementForRepo", 0);
    _serverConfigs.insert("enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setAllowedActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setAllowedActionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setAnnouncement", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setAnnouncement", 0);
    _serverConfigs.insert("enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setGithubActionsPermissionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setGithubActionsPermissionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_setSettings", serverConf);
    _serverIndices.insert("enterpriseAdmin_setSettings", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_startConfigurationProcess", serverConf);
    _serverIndices.insert("enterpriseAdmin_startConfigurationProcess", 0);
    _serverConfigs.insert("enterpriseAdmin_startPreReceiveEnvironmentDownload", defaultConf);
    _serverIndices.insert("enterpriseAdmin_startPreReceiveEnvironmentDownload", 0);
    _serverConfigs.insert("enterpriseAdmin_suspendUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_suspendUser", 0);
    _serverConfigs.insert("enterpriseAdmin_syncLdapMappingForTeam", defaultConf);
    _serverIndices.insert("enterpriseAdmin_syncLdapMappingForTeam", 0);
    _serverConfigs.insert("enterpriseAdmin_syncLdapMappingForUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_syncLdapMappingForUser", 0);
    _serverConfigs.insert("enterpriseAdmin_unsuspendUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_unsuspendUser", 0);
    _serverConfigs.insert("enterpriseAdmin_updateGlobalWebhook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateGlobalWebhook", 0);
    _serverConfigs.insert("enterpriseAdmin_updateLdapMappingForTeam", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateLdapMappingForTeam", 0);
    _serverConfigs.insert("enterpriseAdmin_updateLdapMappingForUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateLdapMappingForUser", 0);
    _serverConfigs.insert("enterpriseAdmin_updateOrgName", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateOrgName", 0);
    _serverConfigs.insert("enterpriseAdmin_updatePreReceiveEnvironment", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updatePreReceiveEnvironment", 0);
    _serverConfigs.insert("enterpriseAdmin_updatePreReceiveHook", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updatePreReceiveHook", 0);
    _serverConfigs.insert("enterpriseAdmin_updatePreReceiveHookEnforcementForOrg", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updatePreReceiveHookEnforcementForOrg", 0);
    _serverConfigs.insert("enterpriseAdmin_updatePreReceiveHookEnforcementForRepo", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updatePreReceiveHookEnforcementForRepo", 0);
    _serverConfigs.insert("enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise", 0);
    _serverConfigs.insert("enterpriseAdmin_updateUsernameForUser", defaultConf);
    _serverIndices.insert("enterpriseAdmin_updateUsernameForUser", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("{protocol}://{hostname}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"hostname", OAIServerVariable("Self-hosted Enterprise Server hostname","HOSTNAME",
    QSet<QString>{ {"HOSTNAME"} })},
    
    {"protocol", OAIServerVariable("Self-hosted Enterprise Server protocol","http",
    QSet<QString>{ {"http"} })}, }));
    
    _serverConfigs.insert("enterpriseAdmin_upgradeLicense", serverConf);
    _serverIndices.insert("enterpriseAdmin_upgradeLicense", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEnterpriseAdminApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEnterpriseAdminApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEnterpriseAdminApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEnterpriseAdminApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEnterpriseAdminApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEnterpriseAdminApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEnterpriseAdminApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEnterpriseAdminApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEnterpriseAdminApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEnterpriseAdminApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEnterpriseAdminApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEnterpriseAdminApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEnterpriseAdminApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEnterpriseAdminApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEnterpriseAdminApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEnterpriseAdminApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEnterpriseAdminApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEnterpriseAdminApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEnterpriseAdminApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addAuthorizedSshKey(const QString &authorized_key) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_addAuthorizedSshKey"][_serverIndices.value("enterpriseAdmin_addAuthorizedSshKey")].URL()+"/setup/api/settings/authorized-keys");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("authorized_key", ::OpenAPI::toStringValue(authorized_key));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_addAuthorizedSshKeyCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addAuthorizedSshKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISsh_key> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISsh_key val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignal(output);
        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_addAuthorizedSshKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id, const OAIEnterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request &oai_enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}/labels");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_addCustomLabelsToSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &org_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise"][_serverIndices.value("enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    
    {
        QString org_idPathParam("{");
        org_idPathParam.append("org_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org_id"+pathSuffix : pathPrefix;
        fullPath.replace(org_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_addOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_addSelfHostedRunnerToGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignal();
        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_addSelfHostedRunnerToGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createEnterpriseServerLicense(const QString &license, const ::OpenAPI::OptionalParam<QString> &password, const ::OpenAPI::OptionalParam<QString> &settings) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createEnterpriseServerLicense"][_serverIndices.value("enterpriseAdmin_createEnterpriseServerLicense")].URL()+"/setup/api/start");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("license", ::OpenAPI::toStringValue(license));
    }
    if (password.hasValue())
    {
        input.add_var("password", ::OpenAPI::toStringValue(password.value()));
    }
    if (settings.hasValue())
    {
        input.add_var("settings", ::OpenAPI::toStringValue(settings.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createEnterpriseServerLicenseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createEnterpriseServerLicenseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignal();
        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_createEnterpriseServerLicenseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createGlobalWebhook(const OAIEnterprise_admin_create_global_webhook_request &oai_enterprise_admin_create_global_webhook_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createGlobalWebhook"][_serverIndices.value("enterpriseAdmin_createGlobalWebhook")].URL()+"/admin/hooks");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_global_webhook_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createGlobalWebhookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createGlobalWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlobal_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createGlobalWebhookSignal(output);
        Q_EMIT enterpriseAdmin_createGlobalWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createGlobalWebhookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createGlobalWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createGlobalWebhookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createGlobalWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createImpersonationOAuthToken(const QString &username, const OAIEnterprise_admin_create_impersonation_o_auth_token_request &oai_enterprise_admin_create_impersonation_o_auth_token_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createImpersonationOAuthToken"][_serverIndices.value("enterpriseAdmin_createImpersonationOAuthToken")].URL()+"/admin/users/{username}/authorizations");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_impersonation_o_auth_token_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createImpersonationOAuthTokenCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createImpersonationOAuthTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorization output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignal(output);
        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createImpersonationOAuthTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createOrg(const OAIEnterprise_admin_create_org_request &oai_enterprise_admin_create_org_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createOrg"][_serverIndices.value("enterpriseAdmin_createOrg")].URL()+"/admin/organizations");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_org_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createOrgCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrganization_simple output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createOrgSignal(output);
        Q_EMIT enterpriseAdmin_createOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createOrgSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createOrgSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveEnvironment(const OAIEnterprise_admin_create_pre_receive_environment_request &oai_enterprise_admin_create_pre_receive_environment_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createPreReceiveEnvironment"][_serverIndices.value("enterpriseAdmin_createPreReceiveEnvironment")].URL()+"/admin/pre-receive-environments");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_pre_receive_environment_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveEnvironmentCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_environment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignal(output);
        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createPreReceiveEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveHook(const OAIEnterprise_admin_create_pre_receive_hook_request &oai_enterprise_admin_create_pre_receive_hook_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createPreReceiveHook"][_serverIndices.value("enterpriseAdmin_createPreReceiveHook")].URL()+"/admin/pre-receive-hooks");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_pre_receive_hook_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveHookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createPreReceiveHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createPreReceiveHookSignal(output);
        Q_EMIT enterpriseAdmin_createPreReceiveHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createPreReceiveHookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createPreReceiveHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createPreReceiveHookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createPreReceiveHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createRegistrationTokenForEnterprise(const QString &enterprise) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createRegistrationTokenForEnterprise"][_serverIndices.value("enterpriseAdmin_createRegistrationTokenForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/registration-token");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createRegistrationTokenForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createRegistrationTokenForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthentication_token output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createRegistrationTokenForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createRemoveTokenForEnterprise(const QString &enterprise) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createRemoveTokenForEnterprise"][_serverIndices.value("enterpriseAdmin_createRemoveTokenForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/remove-token");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createRemoveTokenForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createRemoveTokenForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthentication_token output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createRemoveTokenForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const OAIEnterprise_admin_create_self_hosted_runner_group_for_enterprise_request &oai_enterprise_admin_create_self_hosted_runner_group_for_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_createSelfHostedRunnerGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_self_hosted_runner_group_for_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRunner_groups_enterprise output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createSelfHostedRunnerGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createUser(const OAIEnterprise_admin_create_user_request &oai_enterprise_admin_create_user_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_createUser"][_serverIndices.value("enterpriseAdmin_createUser")].URL()+"/admin/users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_enterprise_admin_create_user_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_createUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_createUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISimple_user output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_createUserSignal(output);
        Q_EMIT enterpriseAdmin_createUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_createUserSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_createUserSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_createUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteGlobalWebhook(const qint32 &hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deleteGlobalWebhook"][_serverIndices.value("enterpriseAdmin_deleteGlobalWebhook")].URL()+"/admin/hooks/{hook_id}");
    
    
    {
        QString hook_idPathParam("{");
        hook_idPathParam.append("hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deleteGlobalWebhookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteGlobalWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignal();
        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteGlobalWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteImpersonationOAuthToken(const QString &username) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deleteImpersonationOAuthToken"][_serverIndices.value("enterpriseAdmin_deleteImpersonationOAuthToken")].URL()+"/admin/users/{username}/authorizations");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deleteImpersonationOAuthTokenCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteImpersonationOAuthTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignal();
        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteImpersonationOAuthTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePersonalAccessToken(const qint32 &token_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deletePersonalAccessToken"][_serverIndices.value("enterpriseAdmin_deletePersonalAccessToken")].URL()+"/admin/tokens/{token_id}");
    
    
    {
        QString token_idPathParam("{");
        token_idPathParam.append("token_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "token_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"token_id"+pathSuffix : pathPrefix;
        fullPath.replace(token_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(token_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deletePersonalAccessTokenCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePersonalAccessTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignal();
        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePersonalAccessTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveEnvironment(const qint32 &pre_receive_environment_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deletePreReceiveEnvironment"][_serverIndices.value("enterpriseAdmin_deletePreReceiveEnvironment")].URL()+"/admin/pre-receive-environments/{pre_receive_environment_id}");
    
    
    {
        QString pre_receive_environment_idPathParam("{");
        pre_receive_environment_idPathParam.append("pre_receive_environment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_environment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_environment_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_environment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_environment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveEnvironmentCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignal();
        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePreReceiveEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveHook(const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deletePreReceiveHook"][_serverIndices.value("enterpriseAdmin_deletePreReceiveHook")].URL()+"/admin/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveHookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePreReceiveHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignal();
        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePreReceiveHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePublicKey(const QString &key_ids) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deletePublicKey"][_serverIndices.value("enterpriseAdmin_deletePublicKey")].URL()+"/admin/keys/{key_ids}");
    
    
    {
        QString key_idsPathParam("{");
        key_idsPathParam.append("key_ids").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_ids", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_ids"+pathSuffix : pathPrefix;
        fullPath.replace(key_idsPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_ids)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deletePublicKeyCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deletePublicKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deletePublicKeySignal();
        Q_EMIT enterpriseAdmin_deletePublicKeySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deletePublicKeySignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePublicKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deletePublicKeySignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deletePublicKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise(const QString &enterprise, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise"][_serverIndices.value("enterpriseAdmin_deleteSelfHostedRunnerFromEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignal();
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerFromEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise(const QString &enterprise, const qint32 &runner_group_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise"][_serverIndices.value("enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignal();
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteSelfHostedRunnerGroupFromEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteUser(const QString &username) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_deleteUser"][_serverIndices.value("enterpriseAdmin_deleteUser")].URL()+"/admin/users/{username}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_deleteUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_deleteUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_deleteUserSignal();
        Q_EMIT enterpriseAdmin_deleteUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_deleteUserSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_deleteUserSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_deleteUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_demoteSiteAdministrator(const QString &username) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_demoteSiteAdministrator"][_serverIndices.value("enterpriseAdmin_demoteSiteAdministrator")].URL()+"/users/{username}/site_admin");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_demoteSiteAdministratorCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_demoteSiteAdministratorCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignal();
        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_demoteSiteAdministratorSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise(const QString &enterprise, const qint32 &org_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise"][_serverIndices.value("enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/organizations/{org_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString org_idPathParam("{");
        org_idPathParam.append("org_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org_id"+pathSuffix : pathPrefix;
        fullPath.replace(org_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignal();
        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_disableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_enableOrDisableMaintenanceMode(const QString &maintenance) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_enableOrDisableMaintenanceMode"][_serverIndices.value("enterpriseAdmin_enableOrDisableMaintenanceMode")].URL()+"/setup/api/maintenance");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("maintenance", ::OpenAPI::toStringValue(maintenance));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_enableOrDisableMaintenanceModeCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_enableOrDisableMaintenanceModeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMaintenance_status output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignal(output);
        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_enableOrDisableMaintenanceModeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise(const QString &enterprise, const qint32 &org_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise"][_serverIndices.value("enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/organizations/{org_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString org_idPathParam("{");
        org_idPathParam.append("org_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org_id"+pathSuffix : pathPrefix;
        fullPath.replace(org_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignal();
        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_enableSelectedOrganizationGithubActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllAuthorizedSshKeys() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getAllAuthorizedSshKeys"][_serverIndices.value("enterpriseAdmin_getAllAuthorizedSshKeys")].URL()+"/setup/api/settings/authorized-keys");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getAllAuthorizedSshKeysCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllAuthorizedSshKeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISsh_key> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISsh_key val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignal(output);
        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllAuthorizedSshKeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getAllStats"][_serverIndices.value("enterpriseAdmin_getAllStats")].URL()+"/enterprise/stats/all");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getAllStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getAllStatsSignal(output);
        Q_EMIT enterpriseAdmin_getAllStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getAllStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getAllStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllowedActionsEnterprise(const QString &enterprise) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getAllowedActionsEnterprise"][_serverIndices.value("enterpriseAdmin_getAllowedActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/selected-actions");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getAllowedActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAllowedActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISelected_actions output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAllowedActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAnnouncement() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getAnnouncement"][_serverIndices.value("enterpriseAdmin_getAnnouncement")].URL()+"/enterprise/announcement");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getAnnouncementCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAnnouncementCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAnnouncement output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getAnnouncementSignal(output);
        Q_EMIT enterpriseAdmin_getAnnouncementSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getAnnouncementSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAnnouncementSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getAnnouncementSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAnnouncementSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAuditLog(const QString &enterprise, const ::OpenAPI::OptionalParam<QString> &phrase, const ::OpenAPI::OptionalParam<QString> &include, const ::OpenAPI::OptionalParam<QString> &after, const ::OpenAPI::OptionalParam<QString> &before, const ::OpenAPI::OptionalParam<QString> &order, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &per_page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getAuditLog"][_serverIndices.value("enterpriseAdmin_getAuditLog")].URL()+"/enterprises/{enterprise}/audit-log");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (phrase.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "phrase", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("phrase")).append(querySuffix).append(QUrl::toPercentEncoding(phrase.stringValue()));
    }
    if (include.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include")).append(querySuffix).append(QUrl::toPercentEncoding(include.stringValue()));
    }
    if (after.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("after")).append(querySuffix).append(QUrl::toPercentEncoding(after.stringValue()));
    }
    if (before.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("before")).append(querySuffix).append(QUrl::toPercentEncoding(before.stringValue()));
    }
    if (order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getAuditLogCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getAuditLogCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAudit_log_event> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAudit_log_event val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getAuditLogSignal(output);
        Q_EMIT enterpriseAdmin_getAuditLogSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getAuditLogSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAuditLogSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getAuditLogSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getAuditLogSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getCommentStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getCommentStats"][_serverIndices.value("enterpriseAdmin_getCommentStats")].URL()+"/enterprise/stats/comments");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getCommentStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getCommentStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_comment_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getCommentStatsSignal(output);
        Q_EMIT enterpriseAdmin_getCommentStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getCommentStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getCommentStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getCommentStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getCommentStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getConfigurationStatus() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getConfigurationStatus"][_serverIndices.value("enterpriseAdmin_getConfigurationStatus")].URL()+"/setup/api/configcheck");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getConfigurationStatusCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getConfigurationStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConfiguration_status output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getConfigurationStatusSignal(output);
        Q_EMIT enterpriseAdmin_getConfigurationStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getConfigurationStatusSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getConfigurationStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getConfigurationStatusSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getConfigurationStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment(const qint32 &pre_receive_environment_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment"][_serverIndices.value("enterpriseAdmin_getDownloadStatusForPreReceiveEnvironment")].URL()+"/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest");
    
    
    {
        QString pre_receive_environment_idPathParam("{");
        pre_receive_environment_idPathParam.append("pre_receive_environment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_environment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_environment_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_environment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_environment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_environment_download_status output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignal(output);
        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getDownloadStatusForPreReceiveEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGistStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getGistStats"][_serverIndices.value("enterpriseAdmin_getGistStats")].URL()+"/enterprise/stats/gists");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getGistStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGistStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_gist_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getGistStatsSignal(output);
        Q_EMIT enterpriseAdmin_getGistStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getGistStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGistStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getGistStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGistStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGithubActionsPermissionsEnterprise(const QString &enterprise) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getGithubActionsPermissionsEnterprise"][_serverIndices.value("enterpriseAdmin_getGithubActionsPermissionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getGithubActionsPermissionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGithubActionsPermissionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIActions_enterprise_permissions output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGithubActionsPermissionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGlobalWebhook(const qint32 &hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getGlobalWebhook"][_serverIndices.value("enterpriseAdmin_getGlobalWebhook")].URL()+"/admin/hooks/{hook_id}");
    
    
    {
        QString hook_idPathParam("{");
        hook_idPathParam.append("hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getGlobalWebhookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getGlobalWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlobal_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getGlobalWebhookSignal(output);
        Q_EMIT enterpriseAdmin_getGlobalWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getGlobalWebhookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGlobalWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getGlobalWebhookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getGlobalWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getHooksStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getHooksStats"][_serverIndices.value("enterpriseAdmin_getHooksStats")].URL()+"/enterprise/stats/hooks");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getHooksStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getHooksStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_hook_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getHooksStatsSignal(output);
        Q_EMIT enterpriseAdmin_getHooksStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getHooksStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getHooksStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getHooksStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getHooksStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getIssueStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getIssueStats"][_serverIndices.value("enterpriseAdmin_getIssueStats")].URL()+"/enterprise/stats/issues");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getIssueStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getIssueStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_issue_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getIssueStatsSignal(output);
        Q_EMIT enterpriseAdmin_getIssueStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getIssueStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getIssueStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getIssueStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getIssueStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getLicenseInformation() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getLicenseInformation"][_serverIndices.value("enterpriseAdmin_getLicenseInformation")].URL()+"/enterprise/settings/license");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getLicenseInformationCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getLicenseInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILicense_info output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getLicenseInformationSignal(output);
        Q_EMIT enterpriseAdmin_getLicenseInformationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getLicenseInformationSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getLicenseInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getLicenseInformationSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getLicenseInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getMaintenanceStatus() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getMaintenanceStatus"][_serverIndices.value("enterpriseAdmin_getMaintenanceStatus")].URL()+"/setup/api/maintenance");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getMaintenanceStatusCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getMaintenanceStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMaintenance_status output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignal(output);
        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getMaintenanceStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getMilestoneStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getMilestoneStats"][_serverIndices.value("enterpriseAdmin_getMilestoneStats")].URL()+"/enterprise/stats/milestones");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getMilestoneStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getMilestoneStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_milestone_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getMilestoneStatsSignal(output);
        Q_EMIT enterpriseAdmin_getMilestoneStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getMilestoneStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getMilestoneStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getMilestoneStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getMilestoneStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getOrgStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getOrgStats"][_serverIndices.value("enterpriseAdmin_getOrgStats")].URL()+"/enterprise/stats/orgs");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getOrgStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getOrgStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_organization_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getOrgStatsSignal(output);
        Q_EMIT enterpriseAdmin_getOrgStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getOrgStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getOrgStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getOrgStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getOrgStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPagesStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPagesStats"][_serverIndices.value("enterpriseAdmin_getPagesStats")].URL()+"/enterprise/stats/pages");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPagesStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPagesStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_page_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPagesStatsSignal(output);
        Q_EMIT enterpriseAdmin_getPagesStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPagesStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPagesStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPagesStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPagesStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveEnvironment(const qint32 &pre_receive_environment_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPreReceiveEnvironment"][_serverIndices.value("enterpriseAdmin_getPreReceiveEnvironment")].URL()+"/admin/pre-receive-environments/{pre_receive_environment_id}");
    
    
    {
        QString pre_receive_environment_idPathParam("{");
        pre_receive_environment_idPathParam.append("pre_receive_environment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_environment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_environment_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_environment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_environment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveEnvironmentCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_environment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignal(output);
        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHook(const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPreReceiveHook"][_serverIndices.value("enterpriseAdmin_getPreReceiveHook")].URL()+"/admin/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPreReceiveHookSignal(output);
        Q_EMIT enterpriseAdmin_getPreReceiveHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForOrg(const QString &org, const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPreReceiveHookForOrg"][_serverIndices.value("enterpriseAdmin_getPreReceiveHookForOrg")].URL()+"/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForOrgCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrg_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignal(output);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPreReceiveHookForRepo"][_serverIndices.value("enterpriseAdmin_getPreReceiveHookForRepo")].URL()+"/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForRepoCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPreReceiveHookForRepoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRepository_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignal(output);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPreReceiveHookForRepoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPullRequestStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getPullRequestStats"][_serverIndices.value("enterpriseAdmin_getPullRequestStats")].URL()+"/enterprise/stats/pulls");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getPullRequestStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getPullRequestStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_pull_request_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getPullRequestStatsSignal(output);
        Q_EMIT enterpriseAdmin_getPullRequestStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getPullRequestStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPullRequestStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getPullRequestStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getPullRequestStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getRepoStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getRepoStats"][_serverIndices.value("enterpriseAdmin_getRepoStats")].URL()+"/enterprise/stats/repos");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getRepoStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getRepoStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_repository_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getRepoStatsSignal(output);
        Q_EMIT enterpriseAdmin_getRepoStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getRepoStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getRepoStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getRepoStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getRepoStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_getSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRunner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_getSelfHostedRunnerGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRunner_groups_enterprise output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSelfHostedRunnerGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSettings() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getSettings"][_serverIndices.value("enterpriseAdmin_getSettings")].URL()+"/setup/api/settings");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getSettingsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_settings output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getSettingsSignal(output);
        Q_EMIT enterpriseAdmin_getSettingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getSettingsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getSettingsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getUserStats() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_getUserStats"][_serverIndices.value("enterpriseAdmin_getUserStats")].URL()+"/enterprise/stats/users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_getUserStatsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_getUserStatsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_user_overview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_getUserStatsSignal(output);
        Q_EMIT enterpriseAdmin_getUserStatsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_getUserStatsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getUserStatsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_getUserStatsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_getUserStatsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listGlobalWebhooks(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listGlobalWebhooks"][_serverIndices.value("enterpriseAdmin_listGlobalWebhooks")].URL()+"/admin/hooks");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listGlobalWebhooksCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listGlobalWebhooksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIGlobal_hook> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIGlobal_hook val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignal(output);
        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listGlobalWebhooksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}/labels");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listLabelsForSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise"][_serverIndices.value("enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPersonalAccessTokens(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPersonalAccessTokens"][_serverIndices.value("enterpriseAdmin_listPersonalAccessTokens")].URL()+"/admin/tokens");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPersonalAccessTokensCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPersonalAccessTokensCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIAuthorization> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIAuthorization val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignal(output);
        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPersonalAccessTokensSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveEnvironments(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &sort) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPreReceiveEnvironments"][_serverIndices.value("enterpriseAdmin_listPreReceiveEnvironments")].URL()+"/admin/pre-receive-environments");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveEnvironmentsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveEnvironmentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPre_receive_environment> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPre_receive_environment val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignal(output);
        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveEnvironmentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooks(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &sort) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPreReceiveHooks"][_serverIndices.value("enterpriseAdmin_listPreReceiveHooks")].URL()+"/admin/pre-receive-hooks");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPre_receive_hook> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPre_receive_hook val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignal(output);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForOrg(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &sort) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPreReceiveHooksForOrg"][_serverIndices.value("enterpriseAdmin_listPreReceiveHooksForOrg")].URL()+"/orgs/{org}/pre-receive-hooks");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForOrgCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIOrg_pre_receive_hook> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIOrg_pre_receive_hook val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignal(output);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &sort) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPreReceiveHooksForRepo"][_serverIndices.value("enterpriseAdmin_listPreReceiveHooksForRepo")].URL()+"/repos/{owner}/{repo}/pre-receive-hooks");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForRepoCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPreReceiveHooksForRepoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRepository_pre_receive_hook> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRepository_pre_receive_hook val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignal(output);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPreReceiveHooksForRepoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPublicKeys(const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &since) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listPublicKeys"][_serverIndices.value("enterpriseAdmin_listPublicKeys")].URL()+"/admin/keys");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "since", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("since")).append(querySuffix).append(QUrl::toPercentEncoding(since.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listPublicKeysCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listPublicKeysCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPublic_key_full> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPublic_key_full val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listPublicKeysSignal(output);
        Q_EMIT enterpriseAdmin_listPublicKeysSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listPublicKeysSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPublicKeysSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listPublicKeysSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listPublicKeysSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listRunnerApplicationsForEnterprise(const QString &enterprise) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listRunnerApplicationsForEnterprise"][_serverIndices.value("enterpriseAdmin_listRunnerApplicationsForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/downloads");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listRunnerApplicationsForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listRunnerApplicationsForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRunner_application> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRunner_application val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listRunnerApplicationsForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise"][_serverIndices.value("enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/organizations");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise"][_serverIndices.value("enterpriseAdmin_listSelfHostedRunnerGroupsForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnerGroupsForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersForEnterprise(const QString &enterprise, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listSelfHostedRunnersForEnterprise"][_serverIndices.value("enterpriseAdmin_listSelfHostedRunnersForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_self_hosted_runners_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<qint32> &per_page, const ::OpenAPI::OptionalParam<qint32> &page) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_listSelfHostedRunnersInGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_listSelfHostedRunnersInGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_pingGlobalWebhook(const qint32 &hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_pingGlobalWebhook"][_serverIndices.value("enterpriseAdmin_pingGlobalWebhook")].URL()+"/admin/hooks/{hook_id}/pings");
    
    
    {
        QString hook_idPathParam("{");
        hook_idPathParam.append("hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_pingGlobalWebhookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_pingGlobalWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignal();
        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_pingGlobalWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_promoteUserToBeSiteAdministrator(const QString &username) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_promoteUserToBeSiteAdministrator"][_serverIndices.value("enterpriseAdmin_promoteUserToBeSiteAdministrator")].URL()+"/users/{username}/site_admin");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_promoteUserToBeSiteAdministratorCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_promoteUserToBeSiteAdministratorCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignal();
        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_promoteUserToBeSiteAdministratorSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}/labels");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAllCustomLabelsFromSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAnnouncement() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeAnnouncement"][_serverIndices.value("enterpriseAdmin_removeAnnouncement")].URL()+"/enterprise/announcement");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeAnnouncementCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAnnouncementCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeAnnouncementSignal();
        Q_EMIT enterpriseAdmin_removeAnnouncementSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeAnnouncementSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAnnouncementSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeAnnouncementSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAnnouncementSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAuthorizedSshKey(const QString &authorized_key) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeAuthorizedSshKey"][_serverIndices.value("enterpriseAdmin_removeAuthorizedSshKey")].URL()+"/setup/api/settings/authorized-keys");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    
    {
        input.add_var("authorized_key", ::OpenAPI::toStringValue(authorized_key));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeAuthorizedSshKeyCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeAuthorizedSshKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISsh_key> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISsh_key val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignal(output);
        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeAuthorizedSshKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id, const QString &name) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removeCustomLabelFromSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &org_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise"][_serverIndices.value("enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    
    {
        QString org_idPathParam("{");
        org_idPathParam.append("org_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org_id"+pathSuffix : pathPrefix;
        fullPath.replace(org_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForOrg(const QString &org, const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removePreReceiveHookEnforcementForOrg"][_serverIndices.value("enterpriseAdmin_removePreReceiveHookEnforcementForOrg")].URL()+"/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForOrgCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrg_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignal(output);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removePreReceiveHookEnforcementForRepo"][_serverIndices.value("enterpriseAdmin_removePreReceiveHookEnforcementForRepo")].URL()+"/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForRepoCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removePreReceiveHookEnforcementForRepoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRepository_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignal(output);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_removePreReceiveHookEnforcementForRepoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const qint32 &runner_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignal();
        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_removeSelfHostedRunnerFromGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setAllowedActionsEnterprise(const QString &enterprise, const OAISelected_actions &oai_selected_actions) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setAllowedActionsEnterprise"][_serverIndices.value("enterpriseAdmin_setAllowedActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/selected-actions");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_selected_actions.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setAllowedActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setAllowedActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignal();
        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setAllowedActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setAnnouncement(const OAIAnnouncement &oai_announcement) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setAnnouncement"][_serverIndices.value("enterpriseAdmin_setAnnouncement")].URL()+"/enterprise/announcement");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_announcement.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setAnnouncementCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setAnnouncementCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAnnouncement output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setAnnouncementSignal(output);
        Q_EMIT enterpriseAdmin_setAnnouncementSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setAnnouncementSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_setAnnouncementSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setAnnouncementSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_setAnnouncementSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterprise(const QString &enterprise, const qint32 &runner_id, const OAIEnterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request &oai_enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterprise"][_serverIndices.value("enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runners/{runner_id}/labels");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_idPathParam("{");
        runner_idPathParam.append("runner_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_setCustomLabelsForSelfHostedRunnerForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setGithubActionsPermissionsEnterprise(const QString &enterprise, const OAIEnterprise_admin_set_github_actions_permissions_enterprise_request &oai_enterprise_admin_set_github_actions_permissions_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setGithubActionsPermissionsEnterprise"][_serverIndices.value("enterpriseAdmin_setGithubActionsPermissionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_enterprise_admin_set_github_actions_permissions_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setGithubActionsPermissionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setGithubActionsPermissionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignal();
        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setGithubActionsPermissionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise(const QString &enterprise, const qint32 &runner_group_id, const OAIEnterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request &oai_enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise"][_serverIndices.value("enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignal();
        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setOrgAccessToSelfHostedRunnerGroupInEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise(const QString &enterprise, const OAIEnterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request &oai_enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise"][_serverIndices.value("enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterprise")].URL()+"/enterprises/{enterprise}/actions/permissions/organizations");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignal();
        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSelectedOrganizationsEnabledGithubActionsEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const OAIEnterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request &oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_setSelfHostedRunnersInGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_enterprise_admin_set_self_hosted_runners_in_group_for_enterprise_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignal();
        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSelfHostedRunnersInGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSettings(const QString &settings) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_setSettings"][_serverIndices.value("enterpriseAdmin_setSettings")].URL()+"/setup/api/settings");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    
    {
        input.add_var("settings", ::OpenAPI::toStringValue(settings));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_setSettingsCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_setSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_setSettingsSignal();
        Q_EMIT enterpriseAdmin_setSettingsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_setSettingsSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_setSettingsSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_setSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_startConfigurationProcess() {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_startConfigurationProcess"][_serverIndices.value("enterpriseAdmin_startConfigurationProcess")].URL()+"/setup/api/configure");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_startConfigurationProcessCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_startConfigurationProcessCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_startConfigurationProcessSignal();
        Q_EMIT enterpriseAdmin_startConfigurationProcessSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_startConfigurationProcessSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_startConfigurationProcessSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_startConfigurationProcessSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_startConfigurationProcessSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_startPreReceiveEnvironmentDownload(const qint32 &pre_receive_environment_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_startPreReceiveEnvironmentDownload"][_serverIndices.value("enterpriseAdmin_startPreReceiveEnvironmentDownload")].URL()+"/admin/pre-receive-environments/{pre_receive_environment_id}/downloads");
    
    
    {
        QString pre_receive_environment_idPathParam("{");
        pre_receive_environment_idPathParam.append("pre_receive_environment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_environment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_environment_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_environment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_environment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_startPreReceiveEnvironmentDownloadCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_startPreReceiveEnvironmentDownloadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_environment_download_status output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignal(output);
        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_startPreReceiveEnvironmentDownloadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_suspendUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_suspend_user_request> &oai_enterprise_admin_suspend_user_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_suspendUser"][_serverIndices.value("enterpriseAdmin_suspendUser")].URL()+"/users/{username}/suspended");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_enterprise_admin_suspend_user_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_suspend_user_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_suspendUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_suspendUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_suspendUserSignal();
        Q_EMIT enterpriseAdmin_suspendUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_suspendUserSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_suspendUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_suspendUserSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_suspendUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForTeam(const qint32 &team_id) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_syncLdapMappingForTeam"][_serverIndices.value("enterpriseAdmin_syncLdapMappingForTeam")].URL()+"/admin/ldap/teams/{team_id}/sync");
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("team_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_id"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForTeamCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignal(output);
        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_syncLdapMappingForTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForUser(const QString &username) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_syncLdapMappingForUser"][_serverIndices.value("enterpriseAdmin_syncLdapMappingForUser")].URL()+"/admin/ldap/users/{username}/sync");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_syncLdapMappingForUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_sync_ldap_mapping_for_team_201_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignal(output);
        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_syncLdapMappingForUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_unsuspendUser(const QString &username, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_unsuspend_user_request> &oai_enterprise_admin_unsuspend_user_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_unsuspendUser"][_serverIndices.value("enterpriseAdmin_unsuspendUser")].URL()+"/users/{username}/suspended");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (oai_enterprise_admin_unsuspend_user_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_unsuspend_user_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_unsuspendUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_unsuspendUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_unsuspendUserSignal();
        Q_EMIT enterpriseAdmin_unsuspendUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_unsuspendUserSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_unsuspendUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_unsuspendUserSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_unsuspendUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateGlobalWebhook(const qint32 &hook_id, const OAIEnterprise_admin_update_global_webhook_request &oai_enterprise_admin_update_global_webhook_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateGlobalWebhook"][_serverIndices.value("enterpriseAdmin_updateGlobalWebhook")].URL()+"/admin/hooks/{hook_id}");
    
    
    {
        QString hook_idPathParam("{");
        hook_idPathParam.append("hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_enterprise_admin_update_global_webhook_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateGlobalWebhookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateGlobalWebhookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGlobal_hook_2 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignal(output);
        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateGlobalWebhookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForTeam(const qint32 &team_id, const OAIEnterprise_admin_update_ldap_mapping_for_team_request &oai_enterprise_admin_update_ldap_mapping_for_team_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateLdapMappingForTeam"][_serverIndices.value("enterpriseAdmin_updateLdapMappingForTeam")].URL()+"/admin/ldap/teams/{team_id}/mapping");
    
    
    {
        QString team_idPathParam("{");
        team_idPathParam.append("team_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "team_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"team_id"+pathSuffix : pathPrefix;
        fullPath.replace(team_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_enterprise_admin_update_ldap_mapping_for_team_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForTeamCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForTeamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILdap_mapping_team output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignal(output);
        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateLdapMappingForTeamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForUser(const QString &username, const OAIEnterprise_admin_update_ldap_mapping_for_team_request &oai_enterprise_admin_update_ldap_mapping_for_team_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateLdapMappingForUser"][_serverIndices.value("enterpriseAdmin_updateLdapMappingForUser")].URL()+"/admin/ldap/users/{username}/mapping");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_enterprise_admin_update_ldap_mapping_for_team_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateLdapMappingForUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILdap_mapping_user output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignal(output);
        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateLdapMappingForUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateOrgName(const QString &org, const OAIEnterprise_admin_update_org_name_request &oai_enterprise_admin_update_org_name_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateOrgName"][_serverIndices.value("enterpriseAdmin_updateOrgName")].URL()+"/admin/organizations/{org}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_enterprise_admin_update_org_name_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateOrgNameCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateOrgNameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_update_org_name_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateOrgNameSignal(output);
        Q_EMIT enterpriseAdmin_updateOrgNameSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateOrgNameSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateOrgNameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateOrgNameSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateOrgNameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveEnvironment(const qint32 &pre_receive_environment_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_environment_request> &oai_enterprise_admin_update_pre_receive_environment_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updatePreReceiveEnvironment"][_serverIndices.value("enterpriseAdmin_updatePreReceiveEnvironment")].URL()+"/admin/pre-receive-environments/{pre_receive_environment_id}");
    
    
    {
        QString pre_receive_environment_idPathParam("{");
        pre_receive_environment_idPathParam.append("pre_receive_environment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_environment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_environment_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_environment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_environment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_enterprise_admin_update_pre_receive_environment_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_update_pre_receive_environment_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveEnvironmentCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_environment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignal(output);
        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHook(const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_request> &oai_enterprise_admin_update_pre_receive_hook_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updatePreReceiveHook"][_serverIndices.value("enterpriseAdmin_updatePreReceiveHook")].URL()+"/admin/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_enterprise_admin_update_pre_receive_hook_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_update_pre_receive_hook_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignal(output);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForOrg(const QString &org, const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_org_request> &oai_enterprise_admin_update_pre_receive_hook_enforcement_for_org_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updatePreReceiveHookEnforcementForOrg"][_serverIndices.value("enterpriseAdmin_updatePreReceiveHookEnforcementForOrg")].URL()+"/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString orgPathParam("{");
        orgPathParam.append("org").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "org", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"org"+pathSuffix : pathPrefix;
        fullPath.replace(orgPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(org)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_enterprise_admin_update_pre_receive_hook_enforcement_for_org_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_update_pre_receive_hook_enforcement_for_org_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForOrgCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForOrgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOrg_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignal(output);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForOrgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForRepo(const QString &owner, const QString &repo, const qint32 &pre_receive_hook_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_pre_receive_hook_enforcement_for_repo_request> &oai_enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updatePreReceiveHookEnforcementForRepo"][_serverIndices.value("enterpriseAdmin_updatePreReceiveHookEnforcementForRepo")].URL()+"/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}");
    
    
    {
        QString ownerPathParam("{");
        ownerPathParam.append("owner").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner"+pathSuffix : pathPrefix;
        fullPath.replace(ownerPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner)));
    }
    
    {
        QString repoPathParam("{");
        repoPathParam.append("repo").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo"+pathSuffix : pathPrefix;
        fullPath.replace(repoPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo)));
    }
    
    {
        QString pre_receive_hook_idPathParam("{");
        pre_receive_hook_idPathParam.append("pre_receive_hook_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "pre_receive_hook_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"pre_receive_hook_id"+pathSuffix : pathPrefix;
        fullPath.replace(pre_receive_hook_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pre_receive_hook_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_update_pre_receive_hook_enforcement_for_repo_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForRepoCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updatePreReceiveHookEnforcementForRepoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRepository_pre_receive_hook output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignal(output);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updatePreReceiveHookEnforcementForRepoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise(const QString &enterprise, const qint32 &runner_group_id, const ::OpenAPI::OptionalParam<OAIEnterprise_admin_update_self_hosted_runner_group_for_enterprise_request> &oai_enterprise_admin_update_self_hosted_runner_group_for_enterprise_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise"][_serverIndices.value("enterpriseAdmin_updateSelfHostedRunnerGroupForEnterprise")].URL()+"/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}");
    
    
    {
        QString enterprisePathParam("{");
        enterprisePathParam.append("enterprise").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "enterprise", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"enterprise"+pathSuffix : pathPrefix;
        fullPath.replace(enterprisePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(enterprise)));
    }
    
    {
        QString runner_group_idPathParam("{");
        runner_group_idPathParam.append("runner_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "runner_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"runner_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(runner_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(runner_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_enterprise_admin_update_self_hosted_runner_group_for_enterprise_request.hasValue()){

        
        QByteArray output = oai_enterprise_admin_update_self_hosted_runner_group_for_enterprise_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRunner_groups_enterprise output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignal(output);
        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateSelfHostedRunnerGroupForEnterpriseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateUsernameForUser(const QString &username, const OAIEnterprise_admin_update_username_for_user_request &oai_enterprise_admin_update_username_for_user_request) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_updateUsernameForUser"][_serverIndices.value("enterpriseAdmin_updateUsernameForUser")].URL()+"/admin/users/{username}");
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_enterprise_admin_update_username_for_user_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_updateUsernameForUserCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_updateUsernameForUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnterprise_admin_update_org_name_202_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_updateUsernameForUserSignal(output);
        Q_EMIT enterpriseAdmin_updateUsernameForUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_updateUsernameForUserSignalE(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateUsernameForUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_updateUsernameForUserSignalError(output, error_type, error_str);
        Q_EMIT enterpriseAdmin_updateUsernameForUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::enterpriseAdmin_upgradeLicense(const ::OpenAPI::OptionalParam<QString> &license) {
    QString fullPath = QString(_serverConfigs["enterpriseAdmin_upgradeLicense"][_serverIndices.value("enterpriseAdmin_upgradeLicense")].URL()+"/setup/api/upgrade");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (license.hasValue())
    {
        input.add_var("license", ::OpenAPI::toStringValue(license.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEnterpriseAdminApi::enterpriseAdmin_upgradeLicenseCallback);
    connect(this, &OAIEnterpriseAdminApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEnterpriseAdminApi::enterpriseAdmin_upgradeLicenseCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enterpriseAdmin_upgradeLicenseSignal();
        Q_EMIT enterpriseAdmin_upgradeLicenseSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enterpriseAdmin_upgradeLicenseSignalE(error_type, error_str);
        Q_EMIT enterpriseAdmin_upgradeLicenseSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enterpriseAdmin_upgradeLicenseSignalError(error_type, error_str);
        Q_EMIT enterpriseAdmin_upgradeLicenseSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEnterpriseAdminApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
