/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NullableIntegration;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentSimple {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_ORIGINAL_ENVIRONMENT = "original_environment";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ENVIRONMENT)
  private String originalEnvironment;

  public static final String SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP = "performed_via_github_app";
  @SerializedName(SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP)
  private NullableIntegration performedViaGithubApp;

  public static final String SERIALIZED_NAME_PRODUCTION_ENVIRONMENT = "production_environment";
  @SerializedName(SERIALIZED_NAME_PRODUCTION_ENVIRONMENT)
  private Boolean productionEnvironment;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repository_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private URI repositoryUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private URI statusesUrl;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private String task;

  public static final String SERIALIZED_NAME_TRANSIENT_ENVIRONMENT = "transient_environment";
  @SerializedName(SERIALIZED_NAME_TRANSIENT_ENVIRONMENT)
  private Boolean transientEnvironment;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public DeploymentSimple() {
  }

  public DeploymentSimple createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DeploymentSimple description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DeploymentSimple environment(String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Name for the target deployment environment.
   * @return environment
   */
  @javax.annotation.Nonnull
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public DeploymentSimple id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the deployment
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public DeploymentSimple nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public DeploymentSimple originalEnvironment(String originalEnvironment) {
    this.originalEnvironment = originalEnvironment;
    return this;
  }

  /**
   * Get originalEnvironment
   * @return originalEnvironment
   */
  @javax.annotation.Nullable
  public String getOriginalEnvironment() {
    return originalEnvironment;
  }

  public void setOriginalEnvironment(String originalEnvironment) {
    this.originalEnvironment = originalEnvironment;
  }


  public DeploymentSimple performedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
    return this;
  }

  /**
   * Get performedViaGithubApp
   * @return performedViaGithubApp
   */
  @javax.annotation.Nullable
  public NullableIntegration getPerformedViaGithubApp() {
    return performedViaGithubApp;
  }

  public void setPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
  }


  public DeploymentSimple productionEnvironment(Boolean productionEnvironment) {
    this.productionEnvironment = productionEnvironment;
    return this;
  }

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @return productionEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getProductionEnvironment() {
    return productionEnvironment;
  }

  public void setProductionEnvironment(Boolean productionEnvironment) {
    this.productionEnvironment = productionEnvironment;
  }


  public DeploymentSimple repositoryUrl(URI repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

  /**
   * Get repositoryUrl
   * @return repositoryUrl
   */
  @javax.annotation.Nonnull
  public URI getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(URI repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public DeploymentSimple statusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
    return this;
  }

  /**
   * Get statusesUrl
   * @return statusesUrl
   */
  @javax.annotation.Nonnull
  public URI getStatusesUrl() {
    return statusesUrl;
  }

  public void setStatusesUrl(URI statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public DeploymentSimple task(String task) {
    this.task = task;
    return this;
  }

  /**
   * Parameter to specify a task to execute
   * @return task
   */
  @javax.annotation.Nonnull
  public String getTask() {
    return task;
  }

  public void setTask(String task) {
    this.task = task;
  }


  public DeploymentSimple transientEnvironment(Boolean transientEnvironment) {
    this.transientEnvironment = transientEnvironment;
    return this;
  }

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @return transientEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getTransientEnvironment() {
    return transientEnvironment;
  }

  public void setTransientEnvironment(Boolean transientEnvironment) {
    this.transientEnvironment = transientEnvironment;
  }


  public DeploymentSimple updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DeploymentSimple url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentSimple deploymentSimple = (DeploymentSimple) o;
    return Objects.equals(this.createdAt, deploymentSimple.createdAt) &&
        Objects.equals(this.description, deploymentSimple.description) &&
        Objects.equals(this.environment, deploymentSimple.environment) &&
        Objects.equals(this.id, deploymentSimple.id) &&
        Objects.equals(this.nodeId, deploymentSimple.nodeId) &&
        Objects.equals(this.originalEnvironment, deploymentSimple.originalEnvironment) &&
        Objects.equals(this.performedViaGithubApp, deploymentSimple.performedViaGithubApp) &&
        Objects.equals(this.productionEnvironment, deploymentSimple.productionEnvironment) &&
        Objects.equals(this.repositoryUrl, deploymentSimple.repositoryUrl) &&
        Objects.equals(this.statusesUrl, deploymentSimple.statusesUrl) &&
        Objects.equals(this.task, deploymentSimple.task) &&
        Objects.equals(this.transientEnvironment, deploymentSimple.transientEnvironment) &&
        Objects.equals(this.updatedAt, deploymentSimple.updatedAt) &&
        Objects.equals(this.url, deploymentSimple.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, description, environment, id, nodeId, originalEnvironment, performedViaGithubApp, productionEnvironment, repositoryUrl, statusesUrl, task, transientEnvironment, updatedAt, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentSimple {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    originalEnvironment: ").append(toIndentedString(originalEnvironment)).append("\n");
    sb.append("    performedViaGithubApp: ").append(toIndentedString(performedViaGithubApp)).append("\n");
    sb.append("    productionEnvironment: ").append(toIndentedString(productionEnvironment)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    transientEnvironment: ").append(toIndentedString(transientEnvironment)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("environment");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("original_environment");
    openapiFields.add("performed_via_github_app");
    openapiFields.add("production_environment");
    openapiFields.add("repository_url");
    openapiFields.add("statuses_url");
    openapiFields.add("task");
    openapiFields.add("transient_environment");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("environment");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("repository_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("task");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentSimple
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentSimple.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentSimple is not found in the empty JSON string", DeploymentSimple.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentSimple.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentSimple` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentSimple.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("original_environment") != null && !jsonObj.get("original_environment").isJsonNull()) && !jsonObj.get("original_environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_environment").toString()));
      }
      // validate the optional field `performed_via_github_app`
      if (jsonObj.get("performed_via_github_app") != null && !jsonObj.get("performed_via_github_app").isJsonNull()) {
        NullableIntegration.validateJsonElement(jsonObj.get("performed_via_github_app"));
      }
      if (!jsonObj.get("repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentSimple.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentSimple' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentSimple> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentSimple.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentSimple>() {
           @Override
           public void write(JsonWriter out, DeploymentSimple value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentSimple read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentSimple given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentSimple
   * @throws IOException if the JSON string is invalid with respect to DeploymentSimple
   */
  public static DeploymentSimple fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentSimple.class);
  }

  /**
   * Convert an instance of DeploymentSimple to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

