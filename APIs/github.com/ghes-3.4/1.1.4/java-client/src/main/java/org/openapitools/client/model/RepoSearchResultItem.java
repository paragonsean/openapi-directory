/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CollaboratorPermissions;
import org.openapitools.client.model.NullableLicenseSimple;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.SearchResultTextMatchesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Repo Search Result Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepoSearchResultItem {
  public static final String SERIALIZED_NAME_ALLOW_AUTO_MERGE = "allow_auto_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_AUTO_MERGE)
  private Boolean allowAutoMerge;

  public static final String SERIALIZED_NAME_ALLOW_FORKING = "allow_forking";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORKING)
  private Boolean allowForking;

  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMIT = "allow_merge_commit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMIT)
  private Boolean allowMergeCommit;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_MERGE = "allow_rebase_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_MERGE)
  private Boolean allowRebaseMerge;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge;

  public static final String SERIALIZED_NAME_ARCHIVE_URL = "archive_url";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_URL)
  private String archiveUrl;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_ASSIGNEES_URL = "assignees_url";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES_URL)
  private String assigneesUrl;

  public static final String SERIALIZED_NAME_BLOBS_URL = "blobs_url";
  @SerializedName(SERIALIZED_NAME_BLOBS_URL)
  private String blobsUrl;

  public static final String SERIALIZED_NAME_BRANCHES_URL = "branches_url";
  @SerializedName(SERIALIZED_NAME_BRANCHES_URL)
  private String branchesUrl;

  public static final String SERIALIZED_NAME_CLONE_URL = "clone_url";
  @SerializedName(SERIALIZED_NAME_CLONE_URL)
  private String cloneUrl;

  public static final String SERIALIZED_NAME_COLLABORATORS_URL = "collaborators_url";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS_URL)
  private String collaboratorsUrl;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_COMPARE_URL = "compare_url";
  @SerializedName(SERIALIZED_NAME_COMPARE_URL)
  private String compareUrl;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_CONTRIBUTORS_URL = "contributors_url";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTORS_URL)
  private URI contributorsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge;

  public static final String SERIALIZED_NAME_DEPLOYMENTS_URL = "deployments_url";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS_URL)
  private URI deploymentsUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DOWNLOADS_URL = "downloads_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS_URL)
  private URI downloadsUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private URI eventsUrl;

  public static final String SERIALIZED_NAME_FORK = "fork";
  @SerializedName(SERIALIZED_NAME_FORK)
  private Boolean fork;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private Integer forks;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private Integer forksCount;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private URI forksUrl;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GIT_COMMITS_URL = "git_commits_url";
  @SerializedName(SERIALIZED_NAME_GIT_COMMITS_URL)
  private String gitCommitsUrl;

  public static final String SERIALIZED_NAME_GIT_REFS_URL = "git_refs_url";
  @SerializedName(SERIALIZED_NAME_GIT_REFS_URL)
  private String gitRefsUrl;

  public static final String SERIALIZED_NAME_GIT_TAGS_URL = "git_tags_url";
  @SerializedName(SERIALIZED_NAME_GIT_TAGS_URL)
  private String gitTagsUrl;

  public static final String SERIALIZED_NAME_GIT_URL = "git_url";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private String gitUrl;

  public static final String SERIALIZED_NAME_HAS_DOWNLOADS = "has_downloads";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOADS)
  private Boolean hasDownloads;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues;

  public static final String SERIALIZED_NAME_HAS_PAGES = "has_pages";
  @SerializedName(SERIALIZED_NAME_HAS_PAGES)
  private Boolean hasPages;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private URI homepage;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private URI hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate;

  public static final String SERIALIZED_NAME_ISSUE_COMMENT_URL = "issue_comment_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_COMMENT_URL)
  private String issueCommentUrl;

  public static final String SERIALIZED_NAME_ISSUE_EVENTS_URL = "issue_events_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_EVENTS_URL)
  private String issueEventsUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LANGUAGES_URL = "languages_url";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_URL)
  private URI languagesUrl;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private NullableLicenseSimple license;

  public static final String SERIALIZED_NAME_MASTER_BRANCH = "master_branch";
  @SerializedName(SERIALIZED_NAME_MASTER_BRANCH)
  private String masterBranch;

  public static final String SERIALIZED_NAME_MERGES_URL = "merges_url";
  @SerializedName(SERIALIZED_NAME_MERGES_URL)
  private URI mergesUrl;

  public static final String SERIALIZED_NAME_MILESTONES_URL = "milestones_url";
  @SerializedName(SERIALIZED_NAME_MILESTONES_URL)
  private String milestonesUrl;

  public static final String SERIALIZED_NAME_MIRROR_URL = "mirror_url";
  @SerializedName(SERIALIZED_NAME_MIRROR_URL)
  private URI mirrorUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_OPEN_ISSUES = "open_issues";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES)
  private Integer openIssues;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private Integer openIssuesCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private NullableSimpleUser owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private CollaboratorPermissions permissions;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_PULLS_URL = "pulls_url";
  @SerializedName(SERIALIZED_NAME_PULLS_URL)
  private String pullsUrl;

  public static final String SERIALIZED_NAME_PUSHED_AT = "pushed_at";
  @SerializedName(SERIALIZED_NAME_PUSHED_AT)
  private OffsetDateTime pushedAt;

  public static final String SERIALIZED_NAME_RELEASES_URL = "releases_url";
  @SerializedName(SERIALIZED_NAME_RELEASES_URL)
  private String releasesUrl;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_SSH_URL = "ssh_url";
  @SerializedName(SERIALIZED_NAME_SSH_URL)
  private String sshUrl;

  public static final String SERIALIZED_NAME_STARGAZERS_COUNT = "stargazers_count";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_COUNT)
  private Integer stargazersCount;

  public static final String SERIALIZED_NAME_STARGAZERS_URL = "stargazers_url";
  @SerializedName(SERIALIZED_NAME_STARGAZERS_URL)
  private URI stargazersUrl;

  public static final String SERIALIZED_NAME_STATUSES_URL = "statuses_url";
  @SerializedName(SERIALIZED_NAME_STATUSES_URL)
  private String statusesUrl;

  public static final String SERIALIZED_NAME_SUBSCRIBERS_URL = "subscribers_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS_URL)
  private URI subscribersUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_URL = "subscription_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_URL)
  private URI subscriptionUrl;

  public static final String SERIALIZED_NAME_SVN_URL = "svn_url";
  @SerializedName(SERIALIZED_NAME_SVN_URL)
  private URI svnUrl;

  public static final String SERIALIZED_NAME_TAGS_URL = "tags_url";
  @SerializedName(SERIALIZED_NAME_TAGS_URL)
  private URI tagsUrl;

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private URI teamsUrl;

  public static final String SERIALIZED_NAME_TEMP_CLONE_TOKEN = "temp_clone_token";
  @SerializedName(SERIALIZED_NAME_TEMP_CLONE_TOKEN)
  private String tempCloneToken;

  public static final String SERIALIZED_NAME_TEXT_MATCHES = "text_matches";
  @SerializedName(SERIALIZED_NAME_TEXT_MATCHES)
  private List<SearchResultTextMatchesInner> textMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = new ArrayList<>();

  public static final String SERIALIZED_NAME_TREES_URL = "trees_url";
  @SerializedName(SERIALIZED_NAME_TREES_URL)
  private String treesUrl;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private Integer watchers;

  public static final String SERIALIZED_NAME_WATCHERS_COUNT = "watchers_count";
  @SerializedName(SERIALIZED_NAME_WATCHERS_COUNT)
  private Integer watchersCount;

  public RepoSearchResultItem() {
  }

  public RepoSearchResultItem allowAutoMerge(Boolean allowAutoMerge) {
    this.allowAutoMerge = allowAutoMerge;
    return this;
  }

  /**
   * Get allowAutoMerge
   * @return allowAutoMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowAutoMerge() {
    return allowAutoMerge;
  }

  public void setAllowAutoMerge(Boolean allowAutoMerge) {
    this.allowAutoMerge = allowAutoMerge;
  }


  public RepoSearchResultItem allowForking(Boolean allowForking) {
    this.allowForking = allowForking;
    return this;
  }

  /**
   * Get allowForking
   * @return allowForking
   */
  @javax.annotation.Nullable
  public Boolean getAllowForking() {
    return allowForking;
  }

  public void setAllowForking(Boolean allowForking) {
    this.allowForking = allowForking;
  }


  public RepoSearchResultItem allowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
    return this;
  }

  /**
   * Get allowMergeCommit
   * @return allowMergeCommit
   */
  @javax.annotation.Nullable
  public Boolean getAllowMergeCommit() {
    return allowMergeCommit;
  }

  public void setAllowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
  }


  public RepoSearchResultItem allowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
    return this;
  }

  /**
   * Get allowRebaseMerge
   * @return allowRebaseMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseMerge() {
    return allowRebaseMerge;
  }

  public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
  }


  public RepoSearchResultItem allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * Get allowSquashMerge
   * @return allowSquashMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public RepoSearchResultItem archiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
    return this;
  }

  /**
   * Get archiveUrl
   * @return archiveUrl
   */
  @javax.annotation.Nonnull
  public String getArchiveUrl() {
    return archiveUrl;
  }

  public void setArchiveUrl(String archiveUrl) {
    this.archiveUrl = archiveUrl;
  }


  public RepoSearchResultItem archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nonnull
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public RepoSearchResultItem assigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
    return this;
  }

  /**
   * Get assigneesUrl
   * @return assigneesUrl
   */
  @javax.annotation.Nonnull
  public String getAssigneesUrl() {
    return assigneesUrl;
  }

  public void setAssigneesUrl(String assigneesUrl) {
    this.assigneesUrl = assigneesUrl;
  }


  public RepoSearchResultItem blobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
    return this;
  }

  /**
   * Get blobsUrl
   * @return blobsUrl
   */
  @javax.annotation.Nonnull
  public String getBlobsUrl() {
    return blobsUrl;
  }

  public void setBlobsUrl(String blobsUrl) {
    this.blobsUrl = blobsUrl;
  }


  public RepoSearchResultItem branchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
    return this;
  }

  /**
   * Get branchesUrl
   * @return branchesUrl
   */
  @javax.annotation.Nonnull
  public String getBranchesUrl() {
    return branchesUrl;
  }

  public void setBranchesUrl(String branchesUrl) {
    this.branchesUrl = branchesUrl;
  }


  public RepoSearchResultItem cloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
    return this;
  }

  /**
   * Get cloneUrl
   * @return cloneUrl
   */
  @javax.annotation.Nonnull
  public String getCloneUrl() {
    return cloneUrl;
  }

  public void setCloneUrl(String cloneUrl) {
    this.cloneUrl = cloneUrl;
  }


  public RepoSearchResultItem collaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
    return this;
  }

  /**
   * Get collaboratorsUrl
   * @return collaboratorsUrl
   */
  @javax.annotation.Nonnull
  public String getCollaboratorsUrl() {
    return collaboratorsUrl;
  }

  public void setCollaboratorsUrl(String collaboratorsUrl) {
    this.collaboratorsUrl = collaboratorsUrl;
  }


  public RepoSearchResultItem commentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nonnull
  public String getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public RepoSearchResultItem commitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
    return this;
  }

  /**
   * Get commitsUrl
   * @return commitsUrl
   */
  @javax.annotation.Nonnull
  public String getCommitsUrl() {
    return commitsUrl;
  }

  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public RepoSearchResultItem compareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
    return this;
  }

  /**
   * Get compareUrl
   * @return compareUrl
   */
  @javax.annotation.Nonnull
  public String getCompareUrl() {
    return compareUrl;
  }

  public void setCompareUrl(String compareUrl) {
    this.compareUrl = compareUrl;
  }


  public RepoSearchResultItem contentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
    return this;
  }

  /**
   * Get contentsUrl
   * @return contentsUrl
   */
  @javax.annotation.Nonnull
  public String getContentsUrl() {
    return contentsUrl;
  }

  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public RepoSearchResultItem contributorsUrl(URI contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
    return this;
  }

  /**
   * Get contributorsUrl
   * @return contributorsUrl
   */
  @javax.annotation.Nonnull
  public URI getContributorsUrl() {
    return contributorsUrl;
  }

  public void setContributorsUrl(URI contributorsUrl) {
    this.contributorsUrl = contributorsUrl;
  }


  public RepoSearchResultItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RepoSearchResultItem defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Get defaultBranch
   * @return defaultBranch
   */
  @javax.annotation.Nonnull
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public RepoSearchResultItem deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

  /**
   * Get deleteBranchOnMerge
   * @return deleteBranchOnMerge
   */
  @javax.annotation.Nullable
  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }

  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public RepoSearchResultItem deploymentsUrl(URI deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
    return this;
  }

  /**
   * Get deploymentsUrl
   * @return deploymentsUrl
   */
  @javax.annotation.Nonnull
  public URI getDeploymentsUrl() {
    return deploymentsUrl;
  }

  public void setDeploymentsUrl(URI deploymentsUrl) {
    this.deploymentsUrl = deploymentsUrl;
  }


  public RepoSearchResultItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RepoSearchResultItem disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Returns whether or not this repository disabled.
   * @return disabled
   */
  @javax.annotation.Nonnull
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public RepoSearchResultItem downloadsUrl(URI downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
    return this;
  }

  /**
   * Get downloadsUrl
   * @return downloadsUrl
   */
  @javax.annotation.Nonnull
  public URI getDownloadsUrl() {
    return downloadsUrl;
  }

  public void setDownloadsUrl(URI downloadsUrl) {
    this.downloadsUrl = downloadsUrl;
  }


  public RepoSearchResultItem eventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nonnull
  public URI getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public RepoSearchResultItem fork(Boolean fork) {
    this.fork = fork;
    return this;
  }

  /**
   * Get fork
   * @return fork
   */
  @javax.annotation.Nonnull
  public Boolean getFork() {
    return fork;
  }

  public void setFork(Boolean fork) {
    this.fork = fork;
  }


  public RepoSearchResultItem forks(Integer forks) {
    this.forks = forks;
    return this;
  }

  /**
   * Get forks
   * @return forks
   */
  @javax.annotation.Nonnull
  public Integer getForks() {
    return forks;
  }

  public void setForks(Integer forks) {
    this.forks = forks;
  }


  public RepoSearchResultItem forksCount(Integer forksCount) {
    this.forksCount = forksCount;
    return this;
  }

  /**
   * Get forksCount
   * @return forksCount
   */
  @javax.annotation.Nonnull
  public Integer getForksCount() {
    return forksCount;
  }

  public void setForksCount(Integer forksCount) {
    this.forksCount = forksCount;
  }


  public RepoSearchResultItem forksUrl(URI forksUrl) {
    this.forksUrl = forksUrl;
    return this;
  }

  /**
   * Get forksUrl
   * @return forksUrl
   */
  @javax.annotation.Nonnull
  public URI getForksUrl() {
    return forksUrl;
  }

  public void setForksUrl(URI forksUrl) {
    this.forksUrl = forksUrl;
  }


  public RepoSearchResultItem fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public RepoSearchResultItem gitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
    return this;
  }

  /**
   * Get gitCommitsUrl
   * @return gitCommitsUrl
   */
  @javax.annotation.Nonnull
  public String getGitCommitsUrl() {
    return gitCommitsUrl;
  }

  public void setGitCommitsUrl(String gitCommitsUrl) {
    this.gitCommitsUrl = gitCommitsUrl;
  }


  public RepoSearchResultItem gitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
    return this;
  }

  /**
   * Get gitRefsUrl
   * @return gitRefsUrl
   */
  @javax.annotation.Nonnull
  public String getGitRefsUrl() {
    return gitRefsUrl;
  }

  public void setGitRefsUrl(String gitRefsUrl) {
    this.gitRefsUrl = gitRefsUrl;
  }


  public RepoSearchResultItem gitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
    return this;
  }

  /**
   * Get gitTagsUrl
   * @return gitTagsUrl
   */
  @javax.annotation.Nonnull
  public String getGitTagsUrl() {
    return gitTagsUrl;
  }

  public void setGitTagsUrl(String gitTagsUrl) {
    this.gitTagsUrl = gitTagsUrl;
  }


  public RepoSearchResultItem gitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
    return this;
  }

  /**
   * Get gitUrl
   * @return gitUrl
   */
  @javax.annotation.Nonnull
  public String getGitUrl() {
    return gitUrl;
  }

  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }


  public RepoSearchResultItem hasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
    return this;
  }

  /**
   * Get hasDownloads
   * @return hasDownloads
   */
  @javax.annotation.Nonnull
  public Boolean getHasDownloads() {
    return hasDownloads;
  }

  public void setHasDownloads(Boolean hasDownloads) {
    this.hasDownloads = hasDownloads;
  }


  public RepoSearchResultItem hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Get hasIssues
   * @return hasIssues
   */
  @javax.annotation.Nonnull
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public RepoSearchResultItem hasPages(Boolean hasPages) {
    this.hasPages = hasPages;
    return this;
  }

  /**
   * Get hasPages
   * @return hasPages
   */
  @javax.annotation.Nonnull
  public Boolean getHasPages() {
    return hasPages;
  }

  public void setHasPages(Boolean hasPages) {
    this.hasPages = hasPages;
  }


  public RepoSearchResultItem hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * Get hasProjects
   * @return hasProjects
   */
  @javax.annotation.Nonnull
  public Boolean getHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public RepoSearchResultItem hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * Get hasWiki
   * @return hasWiki
   */
  @javax.annotation.Nonnull
  public Boolean getHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public RepoSearchResultItem homepage(URI homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nullable
  public URI getHomepage() {
    return homepage;
  }

  public void setHomepage(URI homepage) {
    this.homepage = homepage;
  }


  public RepoSearchResultItem hooksUrl(URI hooksUrl) {
    this.hooksUrl = hooksUrl;
    return this;
  }

  /**
   * Get hooksUrl
   * @return hooksUrl
   */
  @javax.annotation.Nonnull
  public URI getHooksUrl() {
    return hooksUrl;
  }

  public void setHooksUrl(URI hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public RepoSearchResultItem htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public RepoSearchResultItem id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RepoSearchResultItem isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

  /**
   * Get isTemplate
   * @return isTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public RepoSearchResultItem issueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
    return this;
  }

  /**
   * Get issueCommentUrl
   * @return issueCommentUrl
   */
  @javax.annotation.Nonnull
  public String getIssueCommentUrl() {
    return issueCommentUrl;
  }

  public void setIssueCommentUrl(String issueCommentUrl) {
    this.issueCommentUrl = issueCommentUrl;
  }


  public RepoSearchResultItem issueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
    return this;
  }

  /**
   * Get issueEventsUrl
   * @return issueEventsUrl
   */
  @javax.annotation.Nonnull
  public String getIssueEventsUrl() {
    return issueEventsUrl;
  }

  public void setIssueEventsUrl(String issueEventsUrl) {
    this.issueEventsUrl = issueEventsUrl;
  }


  public RepoSearchResultItem issuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
    return this;
  }

  /**
   * Get issuesUrl
   * @return issuesUrl
   */
  @javax.annotation.Nonnull
  public String getIssuesUrl() {
    return issuesUrl;
  }

  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public RepoSearchResultItem keysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
    return this;
  }

  /**
   * Get keysUrl
   * @return keysUrl
   */
  @javax.annotation.Nonnull
  public String getKeysUrl() {
    return keysUrl;
  }

  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public RepoSearchResultItem labelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
    return this;
  }

  /**
   * Get labelsUrl
   * @return labelsUrl
   */
  @javax.annotation.Nonnull
  public String getLabelsUrl() {
    return labelsUrl;
  }

  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public RepoSearchResultItem language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public RepoSearchResultItem languagesUrl(URI languagesUrl) {
    this.languagesUrl = languagesUrl;
    return this;
  }

  /**
   * Get languagesUrl
   * @return languagesUrl
   */
  @javax.annotation.Nonnull
  public URI getLanguagesUrl() {
    return languagesUrl;
  }

  public void setLanguagesUrl(URI languagesUrl) {
    this.languagesUrl = languagesUrl;
  }


  public RepoSearchResultItem license(NullableLicenseSimple license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public NullableLicenseSimple getLicense() {
    return license;
  }

  public void setLicense(NullableLicenseSimple license) {
    this.license = license;
  }


  public RepoSearchResultItem masterBranch(String masterBranch) {
    this.masterBranch = masterBranch;
    return this;
  }

  /**
   * Get masterBranch
   * @return masterBranch
   */
  @javax.annotation.Nullable
  public String getMasterBranch() {
    return masterBranch;
  }

  public void setMasterBranch(String masterBranch) {
    this.masterBranch = masterBranch;
  }


  public RepoSearchResultItem mergesUrl(URI mergesUrl) {
    this.mergesUrl = mergesUrl;
    return this;
  }

  /**
   * Get mergesUrl
   * @return mergesUrl
   */
  @javax.annotation.Nonnull
  public URI getMergesUrl() {
    return mergesUrl;
  }

  public void setMergesUrl(URI mergesUrl) {
    this.mergesUrl = mergesUrl;
  }


  public RepoSearchResultItem milestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
    return this;
  }

  /**
   * Get milestonesUrl
   * @return milestonesUrl
   */
  @javax.annotation.Nonnull
  public String getMilestonesUrl() {
    return milestonesUrl;
  }

  public void setMilestonesUrl(String milestonesUrl) {
    this.milestonesUrl = milestonesUrl;
  }


  public RepoSearchResultItem mirrorUrl(URI mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
    return this;
  }

  /**
   * Get mirrorUrl
   * @return mirrorUrl
   */
  @javax.annotation.Nullable
  public URI getMirrorUrl() {
    return mirrorUrl;
  }

  public void setMirrorUrl(URI mirrorUrl) {
    this.mirrorUrl = mirrorUrl;
  }


  public RepoSearchResultItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RepoSearchResultItem nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public RepoSearchResultItem notificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
    return this;
  }

  /**
   * Get notificationsUrl
   * @return notificationsUrl
   */
  @javax.annotation.Nonnull
  public String getNotificationsUrl() {
    return notificationsUrl;
  }

  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public RepoSearchResultItem openIssues(Integer openIssues) {
    this.openIssues = openIssues;
    return this;
  }

  /**
   * Get openIssues
   * @return openIssues
   */
  @javax.annotation.Nonnull
  public Integer getOpenIssues() {
    return openIssues;
  }

  public void setOpenIssues(Integer openIssues) {
    this.openIssues = openIssues;
  }


  public RepoSearchResultItem openIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
    return this;
  }

  /**
   * Get openIssuesCount
   * @return openIssuesCount
   */
  @javax.annotation.Nonnull
  public Integer getOpenIssuesCount() {
    return openIssuesCount;
  }

  public void setOpenIssuesCount(Integer openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public RepoSearchResultItem owner(NullableSimpleUser owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getOwner() {
    return owner;
  }

  public void setOwner(NullableSimpleUser owner) {
    this.owner = owner;
  }


  public RepoSearchResultItem permissions(CollaboratorPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public CollaboratorPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(CollaboratorPermissions permissions) {
    this.permissions = permissions;
  }


  public RepoSearchResultItem _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Get _private
   * @return _private
   */
  @javax.annotation.Nonnull
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public RepoSearchResultItem pullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
    return this;
  }

  /**
   * Get pullsUrl
   * @return pullsUrl
   */
  @javax.annotation.Nonnull
  public String getPullsUrl() {
    return pullsUrl;
  }

  public void setPullsUrl(String pullsUrl) {
    this.pullsUrl = pullsUrl;
  }


  public RepoSearchResultItem pushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
    return this;
  }

  /**
   * Get pushedAt
   * @return pushedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPushedAt() {
    return pushedAt;
  }

  public void setPushedAt(OffsetDateTime pushedAt) {
    this.pushedAt = pushedAt;
  }


  public RepoSearchResultItem releasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
    return this;
  }

  /**
   * Get releasesUrl
   * @return releasesUrl
   */
  @javax.annotation.Nonnull
  public String getReleasesUrl() {
    return releasesUrl;
  }

  public void setReleasesUrl(String releasesUrl) {
    this.releasesUrl = releasesUrl;
  }


  public RepoSearchResultItem score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public RepoSearchResultItem size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public RepoSearchResultItem sshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
    return this;
  }

  /**
   * Get sshUrl
   * @return sshUrl
   */
  @javax.annotation.Nonnull
  public String getSshUrl() {
    return sshUrl;
  }

  public void setSshUrl(String sshUrl) {
    this.sshUrl = sshUrl;
  }


  public RepoSearchResultItem stargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
    return this;
  }

  /**
   * Get stargazersCount
   * @return stargazersCount
   */
  @javax.annotation.Nonnull
  public Integer getStargazersCount() {
    return stargazersCount;
  }

  public void setStargazersCount(Integer stargazersCount) {
    this.stargazersCount = stargazersCount;
  }


  public RepoSearchResultItem stargazersUrl(URI stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
    return this;
  }

  /**
   * Get stargazersUrl
   * @return stargazersUrl
   */
  @javax.annotation.Nonnull
  public URI getStargazersUrl() {
    return stargazersUrl;
  }

  public void setStargazersUrl(URI stargazersUrl) {
    this.stargazersUrl = stargazersUrl;
  }


  public RepoSearchResultItem statusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
    return this;
  }

  /**
   * Get statusesUrl
   * @return statusesUrl
   */
  @javax.annotation.Nonnull
  public String getStatusesUrl() {
    return statusesUrl;
  }

  public void setStatusesUrl(String statusesUrl) {
    this.statusesUrl = statusesUrl;
  }


  public RepoSearchResultItem subscribersUrl(URI subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
    return this;
  }

  /**
   * Get subscribersUrl
   * @return subscribersUrl
   */
  @javax.annotation.Nonnull
  public URI getSubscribersUrl() {
    return subscribersUrl;
  }

  public void setSubscribersUrl(URI subscribersUrl) {
    this.subscribersUrl = subscribersUrl;
  }


  public RepoSearchResultItem subscriptionUrl(URI subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
    return this;
  }

  /**
   * Get subscriptionUrl
   * @return subscriptionUrl
   */
  @javax.annotation.Nonnull
  public URI getSubscriptionUrl() {
    return subscriptionUrl;
  }

  public void setSubscriptionUrl(URI subscriptionUrl) {
    this.subscriptionUrl = subscriptionUrl;
  }


  public RepoSearchResultItem svnUrl(URI svnUrl) {
    this.svnUrl = svnUrl;
    return this;
  }

  /**
   * Get svnUrl
   * @return svnUrl
   */
  @javax.annotation.Nonnull
  public URI getSvnUrl() {
    return svnUrl;
  }

  public void setSvnUrl(URI svnUrl) {
    this.svnUrl = svnUrl;
  }


  public RepoSearchResultItem tagsUrl(URI tagsUrl) {
    this.tagsUrl = tagsUrl;
    return this;
  }

  /**
   * Get tagsUrl
   * @return tagsUrl
   */
  @javax.annotation.Nonnull
  public URI getTagsUrl() {
    return tagsUrl;
  }

  public void setTagsUrl(URI tagsUrl) {
    this.tagsUrl = tagsUrl;
  }


  public RepoSearchResultItem teamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
    return this;
  }

  /**
   * Get teamsUrl
   * @return teamsUrl
   */
  @javax.annotation.Nonnull
  public URI getTeamsUrl() {
    return teamsUrl;
  }

  public void setTeamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public RepoSearchResultItem tempCloneToken(String tempCloneToken) {
    this.tempCloneToken = tempCloneToken;
    return this;
  }

  /**
   * Get tempCloneToken
   * @return tempCloneToken
   */
  @javax.annotation.Nullable
  public String getTempCloneToken() {
    return tempCloneToken;
  }

  public void setTempCloneToken(String tempCloneToken) {
    this.tempCloneToken = tempCloneToken;
  }


  public RepoSearchResultItem textMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
    return this;
  }

  public RepoSearchResultItem addTextMatchesItem(SearchResultTextMatchesInner textMatchesItem) {
    if (this.textMatches == null) {
      this.textMatches = new ArrayList<>();
    }
    this.textMatches.add(textMatchesItem);
    return this;
  }

  /**
   * Get textMatches
   * @return textMatches
   */
  @javax.annotation.Nullable
  public List<SearchResultTextMatchesInner> getTextMatches() {
    return textMatches;
  }

  public void setTextMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
  }


  public RepoSearchResultItem topics(List<String> topics) {
    this.topics = topics;
    return this;
  }

  public RepoSearchResultItem addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * Get topics
   * @return topics
   */
  @javax.annotation.Nullable
  public List<String> getTopics() {
    return topics;
  }

  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public RepoSearchResultItem treesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
    return this;
  }

  /**
   * Get treesUrl
   * @return treesUrl
   */
  @javax.annotation.Nonnull
  public String getTreesUrl() {
    return treesUrl;
  }

  public void setTreesUrl(String treesUrl) {
    this.treesUrl = treesUrl;
  }


  public RepoSearchResultItem updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public RepoSearchResultItem url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public RepoSearchResultItem visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The repository visibility: public, private, or internal.
   * @return visibility
   */
  @javax.annotation.Nullable
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }


  public RepoSearchResultItem watchers(Integer watchers) {
    this.watchers = watchers;
    return this;
  }

  /**
   * Get watchers
   * @return watchers
   */
  @javax.annotation.Nonnull
  public Integer getWatchers() {
    return watchers;
  }

  public void setWatchers(Integer watchers) {
    this.watchers = watchers;
  }


  public RepoSearchResultItem watchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
    return this;
  }

  /**
   * Get watchersCount
   * @return watchersCount
   */
  @javax.annotation.Nonnull
  public Integer getWatchersCount() {
    return watchersCount;
  }

  public void setWatchersCount(Integer watchersCount) {
    this.watchersCount = watchersCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepoSearchResultItem repoSearchResultItem = (RepoSearchResultItem) o;
    return Objects.equals(this.allowAutoMerge, repoSearchResultItem.allowAutoMerge) &&
        Objects.equals(this.allowForking, repoSearchResultItem.allowForking) &&
        Objects.equals(this.allowMergeCommit, repoSearchResultItem.allowMergeCommit) &&
        Objects.equals(this.allowRebaseMerge, repoSearchResultItem.allowRebaseMerge) &&
        Objects.equals(this.allowSquashMerge, repoSearchResultItem.allowSquashMerge) &&
        Objects.equals(this.archiveUrl, repoSearchResultItem.archiveUrl) &&
        Objects.equals(this.archived, repoSearchResultItem.archived) &&
        Objects.equals(this.assigneesUrl, repoSearchResultItem.assigneesUrl) &&
        Objects.equals(this.blobsUrl, repoSearchResultItem.blobsUrl) &&
        Objects.equals(this.branchesUrl, repoSearchResultItem.branchesUrl) &&
        Objects.equals(this.cloneUrl, repoSearchResultItem.cloneUrl) &&
        Objects.equals(this.collaboratorsUrl, repoSearchResultItem.collaboratorsUrl) &&
        Objects.equals(this.commentsUrl, repoSearchResultItem.commentsUrl) &&
        Objects.equals(this.commitsUrl, repoSearchResultItem.commitsUrl) &&
        Objects.equals(this.compareUrl, repoSearchResultItem.compareUrl) &&
        Objects.equals(this.contentsUrl, repoSearchResultItem.contentsUrl) &&
        Objects.equals(this.contributorsUrl, repoSearchResultItem.contributorsUrl) &&
        Objects.equals(this.createdAt, repoSearchResultItem.createdAt) &&
        Objects.equals(this.defaultBranch, repoSearchResultItem.defaultBranch) &&
        Objects.equals(this.deleteBranchOnMerge, repoSearchResultItem.deleteBranchOnMerge) &&
        Objects.equals(this.deploymentsUrl, repoSearchResultItem.deploymentsUrl) &&
        Objects.equals(this.description, repoSearchResultItem.description) &&
        Objects.equals(this.disabled, repoSearchResultItem.disabled) &&
        Objects.equals(this.downloadsUrl, repoSearchResultItem.downloadsUrl) &&
        Objects.equals(this.eventsUrl, repoSearchResultItem.eventsUrl) &&
        Objects.equals(this.fork, repoSearchResultItem.fork) &&
        Objects.equals(this.forks, repoSearchResultItem.forks) &&
        Objects.equals(this.forksCount, repoSearchResultItem.forksCount) &&
        Objects.equals(this.forksUrl, repoSearchResultItem.forksUrl) &&
        Objects.equals(this.fullName, repoSearchResultItem.fullName) &&
        Objects.equals(this.gitCommitsUrl, repoSearchResultItem.gitCommitsUrl) &&
        Objects.equals(this.gitRefsUrl, repoSearchResultItem.gitRefsUrl) &&
        Objects.equals(this.gitTagsUrl, repoSearchResultItem.gitTagsUrl) &&
        Objects.equals(this.gitUrl, repoSearchResultItem.gitUrl) &&
        Objects.equals(this.hasDownloads, repoSearchResultItem.hasDownloads) &&
        Objects.equals(this.hasIssues, repoSearchResultItem.hasIssues) &&
        Objects.equals(this.hasPages, repoSearchResultItem.hasPages) &&
        Objects.equals(this.hasProjects, repoSearchResultItem.hasProjects) &&
        Objects.equals(this.hasWiki, repoSearchResultItem.hasWiki) &&
        Objects.equals(this.homepage, repoSearchResultItem.homepage) &&
        Objects.equals(this.hooksUrl, repoSearchResultItem.hooksUrl) &&
        Objects.equals(this.htmlUrl, repoSearchResultItem.htmlUrl) &&
        Objects.equals(this.id, repoSearchResultItem.id) &&
        Objects.equals(this.isTemplate, repoSearchResultItem.isTemplate) &&
        Objects.equals(this.issueCommentUrl, repoSearchResultItem.issueCommentUrl) &&
        Objects.equals(this.issueEventsUrl, repoSearchResultItem.issueEventsUrl) &&
        Objects.equals(this.issuesUrl, repoSearchResultItem.issuesUrl) &&
        Objects.equals(this.keysUrl, repoSearchResultItem.keysUrl) &&
        Objects.equals(this.labelsUrl, repoSearchResultItem.labelsUrl) &&
        Objects.equals(this.language, repoSearchResultItem.language) &&
        Objects.equals(this.languagesUrl, repoSearchResultItem.languagesUrl) &&
        Objects.equals(this.license, repoSearchResultItem.license) &&
        Objects.equals(this.masterBranch, repoSearchResultItem.masterBranch) &&
        Objects.equals(this.mergesUrl, repoSearchResultItem.mergesUrl) &&
        Objects.equals(this.milestonesUrl, repoSearchResultItem.milestonesUrl) &&
        Objects.equals(this.mirrorUrl, repoSearchResultItem.mirrorUrl) &&
        Objects.equals(this.name, repoSearchResultItem.name) &&
        Objects.equals(this.nodeId, repoSearchResultItem.nodeId) &&
        Objects.equals(this.notificationsUrl, repoSearchResultItem.notificationsUrl) &&
        Objects.equals(this.openIssues, repoSearchResultItem.openIssues) &&
        Objects.equals(this.openIssuesCount, repoSearchResultItem.openIssuesCount) &&
        Objects.equals(this.owner, repoSearchResultItem.owner) &&
        Objects.equals(this.permissions, repoSearchResultItem.permissions) &&
        Objects.equals(this._private, repoSearchResultItem._private) &&
        Objects.equals(this.pullsUrl, repoSearchResultItem.pullsUrl) &&
        Objects.equals(this.pushedAt, repoSearchResultItem.pushedAt) &&
        Objects.equals(this.releasesUrl, repoSearchResultItem.releasesUrl) &&
        Objects.equals(this.score, repoSearchResultItem.score) &&
        Objects.equals(this.size, repoSearchResultItem.size) &&
        Objects.equals(this.sshUrl, repoSearchResultItem.sshUrl) &&
        Objects.equals(this.stargazersCount, repoSearchResultItem.stargazersCount) &&
        Objects.equals(this.stargazersUrl, repoSearchResultItem.stargazersUrl) &&
        Objects.equals(this.statusesUrl, repoSearchResultItem.statusesUrl) &&
        Objects.equals(this.subscribersUrl, repoSearchResultItem.subscribersUrl) &&
        Objects.equals(this.subscriptionUrl, repoSearchResultItem.subscriptionUrl) &&
        Objects.equals(this.svnUrl, repoSearchResultItem.svnUrl) &&
        Objects.equals(this.tagsUrl, repoSearchResultItem.tagsUrl) &&
        Objects.equals(this.teamsUrl, repoSearchResultItem.teamsUrl) &&
        Objects.equals(this.tempCloneToken, repoSearchResultItem.tempCloneToken) &&
        Objects.equals(this.textMatches, repoSearchResultItem.textMatches) &&
        Objects.equals(this.topics, repoSearchResultItem.topics) &&
        Objects.equals(this.treesUrl, repoSearchResultItem.treesUrl) &&
        Objects.equals(this.updatedAt, repoSearchResultItem.updatedAt) &&
        Objects.equals(this.url, repoSearchResultItem.url) &&
        Objects.equals(this.visibility, repoSearchResultItem.visibility) &&
        Objects.equals(this.watchers, repoSearchResultItem.watchers) &&
        Objects.equals(this.watchersCount, repoSearchResultItem.watchersCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAutoMerge, allowForking, allowMergeCommit, allowRebaseMerge, allowSquashMerge, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deleteBranchOnMerge, deploymentsUrl, description, disabled, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, isTemplate, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, masterBranch, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, permissions, _private, pullsUrl, pushedAt, releasesUrl, score, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, tempCloneToken, textMatches, topics, treesUrl, updatedAt, url, visibility, watchers, watchersCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepoSearchResultItem {\n");
    sb.append("    allowAutoMerge: ").append(toIndentedString(allowAutoMerge)).append("\n");
    sb.append("    allowForking: ").append(toIndentedString(allowForking)).append("\n");
    sb.append("    allowMergeCommit: ").append(toIndentedString(allowMergeCommit)).append("\n");
    sb.append("    allowRebaseMerge: ").append(toIndentedString(allowRebaseMerge)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    assigneesUrl: ").append(toIndentedString(assigneesUrl)).append("\n");
    sb.append("    blobsUrl: ").append(toIndentedString(blobsUrl)).append("\n");
    sb.append("    branchesUrl: ").append(toIndentedString(branchesUrl)).append("\n");
    sb.append("    cloneUrl: ").append(toIndentedString(cloneUrl)).append("\n");
    sb.append("    collaboratorsUrl: ").append(toIndentedString(collaboratorsUrl)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    compareUrl: ").append(toIndentedString(compareUrl)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    contributorsUrl: ").append(toIndentedString(contributorsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    deploymentsUrl: ").append(toIndentedString(deploymentsUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    downloadsUrl: ").append(toIndentedString(downloadsUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    fork: ").append(toIndentedString(fork)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    gitCommitsUrl: ").append(toIndentedString(gitCommitsUrl)).append("\n");
    sb.append("    gitRefsUrl: ").append(toIndentedString(gitRefsUrl)).append("\n");
    sb.append("    gitTagsUrl: ").append(toIndentedString(gitTagsUrl)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hasDownloads: ").append(toIndentedString(hasDownloads)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasPages: ").append(toIndentedString(hasPages)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    issueCommentUrl: ").append(toIndentedString(issueCommentUrl)).append("\n");
    sb.append("    issueEventsUrl: ").append(toIndentedString(issueEventsUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languagesUrl: ").append(toIndentedString(languagesUrl)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    masterBranch: ").append(toIndentedString(masterBranch)).append("\n");
    sb.append("    mergesUrl: ").append(toIndentedString(mergesUrl)).append("\n");
    sb.append("    milestonesUrl: ").append(toIndentedString(milestonesUrl)).append("\n");
    sb.append("    mirrorUrl: ").append(toIndentedString(mirrorUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    openIssues: ").append(toIndentedString(openIssues)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    pullsUrl: ").append(toIndentedString(pullsUrl)).append("\n");
    sb.append("    pushedAt: ").append(toIndentedString(pushedAt)).append("\n");
    sb.append("    releasesUrl: ").append(toIndentedString(releasesUrl)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sshUrl: ").append(toIndentedString(sshUrl)).append("\n");
    sb.append("    stargazersCount: ").append(toIndentedString(stargazersCount)).append("\n");
    sb.append("    stargazersUrl: ").append(toIndentedString(stargazersUrl)).append("\n");
    sb.append("    statusesUrl: ").append(toIndentedString(statusesUrl)).append("\n");
    sb.append("    subscribersUrl: ").append(toIndentedString(subscribersUrl)).append("\n");
    sb.append("    subscriptionUrl: ").append(toIndentedString(subscriptionUrl)).append("\n");
    sb.append("    svnUrl: ").append(toIndentedString(svnUrl)).append("\n");
    sb.append("    tagsUrl: ").append(toIndentedString(tagsUrl)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    tempCloneToken: ").append(toIndentedString(tempCloneToken)).append("\n");
    sb.append("    textMatches: ").append(toIndentedString(textMatches)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    treesUrl: ").append(toIndentedString(treesUrl)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("    watchersCount: ").append(toIndentedString(watchersCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_auto_merge");
    openapiFields.add("allow_forking");
    openapiFields.add("allow_merge_commit");
    openapiFields.add("allow_rebase_merge");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("archive_url");
    openapiFields.add("archived");
    openapiFields.add("assignees_url");
    openapiFields.add("blobs_url");
    openapiFields.add("branches_url");
    openapiFields.add("clone_url");
    openapiFields.add("collaborators_url");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("compare_url");
    openapiFields.add("contents_url");
    openapiFields.add("contributors_url");
    openapiFields.add("created_at");
    openapiFields.add("default_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("deployments_url");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("downloads_url");
    openapiFields.add("events_url");
    openapiFields.add("fork");
    openapiFields.add("forks");
    openapiFields.add("forks_count");
    openapiFields.add("forks_url");
    openapiFields.add("full_name");
    openapiFields.add("git_commits_url");
    openapiFields.add("git_refs_url");
    openapiFields.add("git_tags_url");
    openapiFields.add("git_url");
    openapiFields.add("has_downloads");
    openapiFields.add("has_issues");
    openapiFields.add("has_pages");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("homepage");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_template");
    openapiFields.add("issue_comment_url");
    openapiFields.add("issue_events_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("labels_url");
    openapiFields.add("language");
    openapiFields.add("languages_url");
    openapiFields.add("license");
    openapiFields.add("master_branch");
    openapiFields.add("merges_url");
    openapiFields.add("milestones_url");
    openapiFields.add("mirror_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("notifications_url");
    openapiFields.add("open_issues");
    openapiFields.add("open_issues_count");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("private");
    openapiFields.add("pulls_url");
    openapiFields.add("pushed_at");
    openapiFields.add("releases_url");
    openapiFields.add("score");
    openapiFields.add("size");
    openapiFields.add("ssh_url");
    openapiFields.add("stargazers_count");
    openapiFields.add("stargazers_url");
    openapiFields.add("statuses_url");
    openapiFields.add("subscribers_url");
    openapiFields.add("subscription_url");
    openapiFields.add("svn_url");
    openapiFields.add("tags_url");
    openapiFields.add("teams_url");
    openapiFields.add("temp_clone_token");
    openapiFields.add("text_matches");
    openapiFields.add("topics");
    openapiFields.add("trees_url");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("visibility");
    openapiFields.add("watchers");
    openapiFields.add("watchers_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archive_url");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("assignees_url");
    openapiRequiredFields.add("blobs_url");
    openapiRequiredFields.add("branches_url");
    openapiRequiredFields.add("clone_url");
    openapiRequiredFields.add("collaborators_url");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("commits_url");
    openapiRequiredFields.add("compare_url");
    openapiRequiredFields.add("contents_url");
    openapiRequiredFields.add("contributors_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("default_branch");
    openapiRequiredFields.add("deployments_url");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("disabled");
    openapiRequiredFields.add("downloads_url");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("fork");
    openapiRequiredFields.add("forks");
    openapiRequiredFields.add("forks_count");
    openapiRequiredFields.add("forks_url");
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("git_commits_url");
    openapiRequiredFields.add("git_refs_url");
    openapiRequiredFields.add("git_tags_url");
    openapiRequiredFields.add("git_url");
    openapiRequiredFields.add("has_downloads");
    openapiRequiredFields.add("has_issues");
    openapiRequiredFields.add("has_pages");
    openapiRequiredFields.add("has_projects");
    openapiRequiredFields.add("has_wiki");
    openapiRequiredFields.add("homepage");
    openapiRequiredFields.add("hooks_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issue_comment_url");
    openapiRequiredFields.add("issue_events_url");
    openapiRequiredFields.add("issues_url");
    openapiRequiredFields.add("keys_url");
    openapiRequiredFields.add("labels_url");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("languages_url");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("merges_url");
    openapiRequiredFields.add("milestones_url");
    openapiRequiredFields.add("mirror_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("notifications_url");
    openapiRequiredFields.add("open_issues");
    openapiRequiredFields.add("open_issues_count");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("private");
    openapiRequiredFields.add("pulls_url");
    openapiRequiredFields.add("pushed_at");
    openapiRequiredFields.add("releases_url");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("ssh_url");
    openapiRequiredFields.add("stargazers_count");
    openapiRequiredFields.add("stargazers_url");
    openapiRequiredFields.add("statuses_url");
    openapiRequiredFields.add("subscribers_url");
    openapiRequiredFields.add("subscription_url");
    openapiRequiredFields.add("svn_url");
    openapiRequiredFields.add("tags_url");
    openapiRequiredFields.add("teams_url");
    openapiRequiredFields.add("trees_url");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("watchers");
    openapiRequiredFields.add("watchers_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepoSearchResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepoSearchResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepoSearchResultItem is not found in the empty JSON string", RepoSearchResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepoSearchResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepoSearchResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepoSearchResultItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("archive_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archive_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archive_url").toString()));
      }
      if (!jsonObj.get("assignees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignees_url").toString()));
      }
      if (!jsonObj.get("blobs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobs_url").toString()));
      }
      if (!jsonObj.get("branches_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branches_url").toString()));
      }
      if (!jsonObj.get("clone_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clone_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clone_url").toString()));
      }
      if (!jsonObj.get("collaborators_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborators_url").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if (!jsonObj.get("compare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_url").toString()));
      }
      if (!jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if (!jsonObj.get("contributors_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributors_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributors_url").toString()));
      }
      if (!jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if (!jsonObj.get("deployments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployments_url").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("downloads_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloads_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloads_url").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (!jsonObj.get("git_commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_commits_url").toString()));
      }
      if (!jsonObj.get("git_refs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_refs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_refs_url").toString()));
      }
      if (!jsonObj.get("git_tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_tags_url").toString()));
      }
      if (!jsonObj.get("git_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_url").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if (!jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issue_comment_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_comment_url").toString()));
      }
      if (!jsonObj.get("issue_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_events_url").toString()));
      }
      if (!jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if (!jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if (!jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("languages_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages_url").toString()));
      }
      // validate the required field `license`
      NullableLicenseSimple.validateJsonElement(jsonObj.get("license"));
      if ((jsonObj.get("master_branch") != null && !jsonObj.get("master_branch").isJsonNull()) && !jsonObj.get("master_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_branch").toString()));
      }
      if (!jsonObj.get("merges_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merges_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merges_url").toString()));
      }
      if (!jsonObj.get("milestones_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `milestones_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("milestones_url").toString()));
      }
      if ((jsonObj.get("mirror_url") != null && !jsonObj.get("mirror_url").isJsonNull()) && !jsonObj.get("mirror_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirror_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirror_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      // validate the required field `owner`
      NullableSimpleUser.validateJsonElement(jsonObj.get("owner"));
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        CollaboratorPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      if (!jsonObj.get("pulls_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pulls_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pulls_url").toString()));
      }
      if (!jsonObj.get("releases_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releases_url").toString()));
      }
      if (!jsonObj.get("ssh_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url").toString()));
      }
      if (!jsonObj.get("stargazers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stargazers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stargazers_url").toString()));
      }
      if (!jsonObj.get("statuses_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses_url").toString()));
      }
      if (!jsonObj.get("subscribers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribers_url").toString()));
      }
      if (!jsonObj.get("subscription_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_url").toString()));
      }
      if (!jsonObj.get("svn_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `svn_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("svn_url").toString()));
      }
      if (!jsonObj.get("tags_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_url").toString()));
      }
      if (!jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      if ((jsonObj.get("temp_clone_token") != null && !jsonObj.get("temp_clone_token").isJsonNull()) && !jsonObj.get("temp_clone_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temp_clone_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temp_clone_token").toString()));
      }
      if (jsonObj.get("text_matches") != null && !jsonObj.get("text_matches").isJsonNull()) {
        JsonArray jsonArraytextMatches = jsonObj.getAsJsonArray("text_matches");
        if (jsonArraytextMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_matches` to be an array in the JSON string but got `%s`", jsonObj.get("text_matches").toString()));
          }

          // validate the optional field `text_matches` (array)
          for (int i = 0; i < jsonArraytextMatches.size(); i++) {
            SearchResultTextMatchesInner.validateJsonElement(jsonArraytextMatches.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull() && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if (!jsonObj.get("trees_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trees_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trees_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepoSearchResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepoSearchResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepoSearchResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepoSearchResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RepoSearchResultItem>() {
           @Override
           public void write(JsonWriter out, RepoSearchResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepoSearchResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepoSearchResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepoSearchResultItem
   * @throws IOException if the JSON string is invalid with respect to RepoSearchResultItem
   */
  public static RepoSearchResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepoSearchResultItem.class);
  }

  /**
   * Convert an instance of RepoSearchResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

