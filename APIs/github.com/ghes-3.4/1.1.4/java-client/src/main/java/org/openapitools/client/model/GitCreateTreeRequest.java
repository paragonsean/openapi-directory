/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GitCreateTreeRequestTreeInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GitCreateTreeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GitCreateTreeRequest {
  public static final String SERIALIZED_NAME_BASE_TREE = "base_tree";
  @SerializedName(SERIALIZED_NAME_BASE_TREE)
  private String baseTree;

  public static final String SERIALIZED_NAME_TREE = "tree";
  @SerializedName(SERIALIZED_NAME_TREE)
  private List<GitCreateTreeRequestTreeInner> tree = new ArrayList<>();

  public GitCreateTreeRequest() {
  }

  public GitCreateTreeRequest baseTree(String baseTree) {
    this.baseTree = baseTree;
    return this;
  }

  /**
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by &#x60;base_tree&#x60; and entries defined in the &#x60;tree&#x60; parameter. Entries defined in the &#x60;tree&#x60; parameter will overwrite items from &#x60;base_tree&#x60; with the same &#x60;path&#x60;. If you&#39;re creating new changes on a branch, then normally you&#39;d set &#x60;base_tree&#x60; to the SHA1 of the Git tree object of the current latest commit on the branch you&#39;re working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the &#x60;tree&#x60; parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit&#39;s tree and were not defined in the &#x60;tree&#x60; parameter will be listed as deleted by the new commit. 
   * @return baseTree
   */
  @javax.annotation.Nullable
  public String getBaseTree() {
    return baseTree;
  }

  public void setBaseTree(String baseTree) {
    this.baseTree = baseTree;
  }


  public GitCreateTreeRequest tree(List<GitCreateTreeRequestTreeInner> tree) {
    this.tree = tree;
    return this;
  }

  public GitCreateTreeRequest addTreeItem(GitCreateTreeRequestTreeInner treeItem) {
    if (this.tree == null) {
      this.tree = new ArrayList<>();
    }
    this.tree.add(treeItem);
    return this;
  }

  /**
   * Objects (of &#x60;path&#x60;, &#x60;mode&#x60;, &#x60;type&#x60;, and &#x60;sha&#x60;) specifying a tree structure.
   * @return tree
   */
  @javax.annotation.Nonnull
  public List<GitCreateTreeRequestTreeInner> getTree() {
    return tree;
  }

  public void setTree(List<GitCreateTreeRequestTreeInner> tree) {
    this.tree = tree;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitCreateTreeRequest gitCreateTreeRequest = (GitCreateTreeRequest) o;
    return Objects.equals(this.baseTree, gitCreateTreeRequest.baseTree) &&
        Objects.equals(this.tree, gitCreateTreeRequest.tree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTree, tree);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitCreateTreeRequest {\n");
    sb.append("    baseTree: ").append(toIndentedString(baseTree)).append("\n");
    sb.append("    tree: ").append(toIndentedString(tree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_tree");
    openapiFields.add("tree");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tree");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GitCreateTreeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GitCreateTreeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GitCreateTreeRequest is not found in the empty JSON string", GitCreateTreeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GitCreateTreeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GitCreateTreeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GitCreateTreeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_tree") != null && !jsonObj.get("base_tree").isJsonNull()) && !jsonObj.get("base_tree").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_tree` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_tree").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tree").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tree` to be an array in the JSON string but got `%s`", jsonObj.get("tree").toString()));
      }

      JsonArray jsonArraytree = jsonObj.getAsJsonArray("tree");
      // validate the required field `tree` (array)
      for (int i = 0; i < jsonArraytree.size(); i++) {
        GitCreateTreeRequestTreeInner.validateJsonElement(jsonArraytree.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GitCreateTreeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GitCreateTreeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GitCreateTreeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GitCreateTreeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GitCreateTreeRequest>() {
           @Override
           public void write(JsonWriter out, GitCreateTreeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GitCreateTreeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GitCreateTreeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GitCreateTreeRequest
   * @throws IOException if the JSON string is invalid with respect to GitCreateTreeRequest
   */
  public static GitCreateTreeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GitCreateTreeRequest.class);
  }

  /**
   * Convert an instance of GitCreateTreeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

