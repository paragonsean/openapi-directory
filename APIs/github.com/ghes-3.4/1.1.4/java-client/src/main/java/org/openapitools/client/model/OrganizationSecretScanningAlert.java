/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.SecretScanningAlertResolution;
import org.openapitools.client.model.SecretScanningAlertState;
import org.openapitools.client.model.SimpleRepository;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrganizationSecretScanningAlert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationSecretScanningAlert {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_LOCATIONS_URL = "locations_url";
  @SerializedName(SERIALIZED_NAME_LOCATIONS_URL)
  private URI locationsUrl;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private SimpleRepository repository;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private SecretScanningAlertResolution resolution;

  public static final String SERIALIZED_NAME_RESOLVED_AT = "resolved_at";
  @SerializedName(SERIALIZED_NAME_RESOLVED_AT)
  private OffsetDateTime resolvedAt;

  public static final String SERIALIZED_NAME_RESOLVED_BY = "resolved_by";
  @SerializedName(SERIALIZED_NAME_RESOLVED_BY)
  private NullableSimpleUser resolvedBy;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SECRET_TYPE = "secret_type";
  @SerializedName(SERIALIZED_NAME_SECRET_TYPE)
  private String secretType;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SecretScanningAlertState state;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public OrganizationSecretScanningAlert() {
  }

  public OrganizationSecretScanningAlert(
     OffsetDateTime createdAt, 
     URI htmlUrl, 
     Integer number, 
     OffsetDateTime updatedAt, 
     URI url
  ) {
    this();
    this.createdAt = createdAt;
    this.htmlUrl = htmlUrl;
    this.number = number;
    this.updatedAt = updatedAt;
    this.url = url;
  }

  /**
   * The time that the alert was created in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * The GitHub URL of the alert resource.
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public URI getHtmlUrl() {
    return htmlUrl;
  }



  public OrganizationSecretScanningAlert locationsUrl(URI locationsUrl) {
    this.locationsUrl = locationsUrl;
    return this;
  }

  /**
   * The REST API URL of the code locations for this alert.
   * @return locationsUrl
   */
  @javax.annotation.Nullable
  public URI getLocationsUrl() {
    return locationsUrl;
  }

  public void setLocationsUrl(URI locationsUrl) {
    this.locationsUrl = locationsUrl;
  }


  /**
   * The security alert number.
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }



  public OrganizationSecretScanningAlert repository(SimpleRepository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public SimpleRepository getRepository() {
    return repository;
  }

  public void setRepository(SimpleRepository repository) {
    this.repository = repository;
  }


  public OrganizationSecretScanningAlert resolution(SecretScanningAlertResolution resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public SecretScanningAlertResolution getResolution() {
    return resolution;
  }

  public void setResolution(SecretScanningAlertResolution resolution) {
    this.resolution = resolution;
  }


  public OrganizationSecretScanningAlert resolvedAt(OffsetDateTime resolvedAt) {
    this.resolvedAt = resolvedAt;
    return this;
  }

  /**
   * The time that the alert was resolved in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return resolvedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResolvedAt() {
    return resolvedAt;
  }

  public void setResolvedAt(OffsetDateTime resolvedAt) {
    this.resolvedAt = resolvedAt;
  }


  public OrganizationSecretScanningAlert resolvedBy(NullableSimpleUser resolvedBy) {
    this.resolvedBy = resolvedBy;
    return this;
  }

  /**
   * Get resolvedBy
   * @return resolvedBy
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getResolvedBy() {
    return resolvedBy;
  }

  public void setResolvedBy(NullableSimpleUser resolvedBy) {
    this.resolvedBy = resolvedBy;
  }


  public OrganizationSecretScanningAlert secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * The secret that was detected.
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public OrganizationSecretScanningAlert secretType(String secretType) {
    this.secretType = secretType;
    return this;
  }

  /**
   * The type of secret that secret scanning detected.
   * @return secretType
   */
  @javax.annotation.Nullable
  public String getSecretType() {
    return secretType;
  }

  public void setSecretType(String secretType) {
    this.secretType = secretType;
  }


  public OrganizationSecretScanningAlert state(SecretScanningAlertState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public SecretScanningAlertState getState() {
    return state;
  }

  public void setState(SecretScanningAlertState state) {
    this.state = state;
  }


  /**
   * The time that the alert was last updated in ISO 8601 format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  /**
   * The REST API URL of the alert resource.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationSecretScanningAlert organizationSecretScanningAlert = (OrganizationSecretScanningAlert) o;
    return Objects.equals(this.createdAt, organizationSecretScanningAlert.createdAt) &&
        Objects.equals(this.htmlUrl, organizationSecretScanningAlert.htmlUrl) &&
        Objects.equals(this.locationsUrl, organizationSecretScanningAlert.locationsUrl) &&
        Objects.equals(this.number, organizationSecretScanningAlert.number) &&
        Objects.equals(this.repository, organizationSecretScanningAlert.repository) &&
        Objects.equals(this.resolution, organizationSecretScanningAlert.resolution) &&
        Objects.equals(this.resolvedAt, organizationSecretScanningAlert.resolvedAt) &&
        Objects.equals(this.resolvedBy, organizationSecretScanningAlert.resolvedBy) &&
        Objects.equals(this.secret, organizationSecretScanningAlert.secret) &&
        Objects.equals(this.secretType, organizationSecretScanningAlert.secretType) &&
        Objects.equals(this.state, organizationSecretScanningAlert.state) &&
        Objects.equals(this.updatedAt, organizationSecretScanningAlert.updatedAt) &&
        Objects.equals(this.url, organizationSecretScanningAlert.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, htmlUrl, locationsUrl, number, repository, resolution, resolvedAt, resolvedBy, secret, secretType, state, updatedAt, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationSecretScanningAlert {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    locationsUrl: ").append(toIndentedString(locationsUrl)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    resolvedAt: ").append(toIndentedString(resolvedAt)).append("\n");
    sb.append("    resolvedBy: ").append(toIndentedString(resolvedBy)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("html_url");
    openapiFields.add("locations_url");
    openapiFields.add("number");
    openapiFields.add("repository");
    openapiFields.add("resolution");
    openapiFields.add("resolved_at");
    openapiFields.add("resolved_by");
    openapiFields.add("secret");
    openapiFields.add("secret_type");
    openapiFields.add("state");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationSecretScanningAlert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationSecretScanningAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationSecretScanningAlert is not found in the empty JSON string", OrganizationSecretScanningAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationSecretScanningAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationSecretScanningAlert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("locations_url") != null && !jsonObj.get("locations_url").isJsonNull()) && !jsonObj.get("locations_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locations_url").toString()));
      }
      // validate the optional field `repository`
      if (jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) {
        SimpleRepository.validateJsonElement(jsonObj.get("repository"));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        SecretScanningAlertResolution.validateJsonElement(jsonObj.get("resolution"));
      }
      // validate the optional field `resolved_by`
      if (jsonObj.get("resolved_by") != null && !jsonObj.get("resolved_by").isJsonNull()) {
        NullableSimpleUser.validateJsonElement(jsonObj.get("resolved_by"));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("secret_type") != null && !jsonObj.get("secret_type").isJsonNull()) && !jsonObj.get("secret_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_type").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        SecretScanningAlertState.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationSecretScanningAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationSecretScanningAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationSecretScanningAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationSecretScanningAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationSecretScanningAlert>() {
           @Override
           public void write(JsonWriter out, OrganizationSecretScanningAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationSecretScanningAlert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationSecretScanningAlert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationSecretScanningAlert
   * @throws IOException if the JSON string is invalid with respect to OrganizationSecretScanningAlert
   */
  public static OrganizationSecretScanningAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationSecretScanningAlert.class);
  }

  /**
   * Convert an instance of OrganizationSecretScanningAlert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

