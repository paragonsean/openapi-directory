/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a &#39;commit&#39; secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecretScanningLocationCommit {
  public static final String SERIALIZED_NAME_BLOB_SHA = "blob_sha";
  @SerializedName(SERIALIZED_NAME_BLOB_SHA)
  private String blobSha;

  public static final String SERIALIZED_NAME_BLOB_URL = "blob_url";
  @SerializedName(SERIALIZED_NAME_BLOB_URL)
  private String blobUrl;

  public static final String SERIALIZED_NAME_COMMIT_SHA = "commit_sha";
  @SerializedName(SERIALIZED_NAME_COMMIT_SHA)
  private String commitSha;

  public static final String SERIALIZED_NAME_COMMIT_URL = "commit_url";
  @SerializedName(SERIALIZED_NAME_COMMIT_URL)
  private String commitUrl;

  public static final String SERIALIZED_NAME_END_COLUMN = "end_column";
  @SerializedName(SERIALIZED_NAME_END_COLUMN)
  private BigDecimal endColumn;

  public static final String SERIALIZED_NAME_END_LINE = "end_line";
  @SerializedName(SERIALIZED_NAME_END_LINE)
  private BigDecimal endLine;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_START_COLUMN = "start_column";
  @SerializedName(SERIALIZED_NAME_START_COLUMN)
  private BigDecimal startColumn;

  public static final String SERIALIZED_NAME_START_LINE = "start_line";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private BigDecimal startLine;

  public SecretScanningLocationCommit() {
  }

  public SecretScanningLocationCommit blobSha(String blobSha) {
    this.blobSha = blobSha;
    return this;
  }

  /**
   * SHA-1 hash ID of the associated blob
   * @return blobSha
   */
  @javax.annotation.Nonnull
  public String getBlobSha() {
    return blobSha;
  }

  public void setBlobSha(String blobSha) {
    this.blobSha = blobSha;
  }


  public SecretScanningLocationCommit blobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
    return this;
  }

  /**
   * The API URL to get the associated blob resource
   * @return blobUrl
   */
  @javax.annotation.Nonnull
  public String getBlobUrl() {
    return blobUrl;
  }

  public void setBlobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
  }


  public SecretScanningLocationCommit commitSha(String commitSha) {
    this.commitSha = commitSha;
    return this;
  }

  /**
   * SHA-1 hash ID of the associated commit
   * @return commitSha
   */
  @javax.annotation.Nonnull
  public String getCommitSha() {
    return commitSha;
  }

  public void setCommitSha(String commitSha) {
    this.commitSha = commitSha;
  }


  public SecretScanningLocationCommit commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

  /**
   * The API URL to get the associated commit resource
   * @return commitUrl
   */
  @javax.annotation.Nonnull
  public String getCommitUrl() {
    return commitUrl;
  }

  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public SecretScanningLocationCommit endColumn(BigDecimal endColumn) {
    this.endColumn = endColumn;
    return this;
  }

  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   * @return endColumn
   */
  @javax.annotation.Nonnull
  public BigDecimal getEndColumn() {
    return endColumn;
  }

  public void setEndColumn(BigDecimal endColumn) {
    this.endColumn = endColumn;
  }


  public SecretScanningLocationCommit endLine(BigDecimal endLine) {
    this.endLine = endLine;
    return this;
  }

  /**
   * Line number at which the secret ends in the file
   * @return endLine
   */
  @javax.annotation.Nonnull
  public BigDecimal getEndLine() {
    return endLine;
  }

  public void setEndLine(BigDecimal endLine) {
    this.endLine = endLine;
  }


  public SecretScanningLocationCommit path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The file path in the repository
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public SecretScanningLocationCommit startColumn(BigDecimal startColumn) {
    this.startColumn = startColumn;
    return this;
  }

  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   * @return startColumn
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartColumn() {
    return startColumn;
  }

  public void setStartColumn(BigDecimal startColumn) {
    this.startColumn = startColumn;
  }


  public SecretScanningLocationCommit startLine(BigDecimal startLine) {
    this.startLine = startLine;
    return this;
  }

  /**
   * Line number at which the secret starts in the file
   * @return startLine
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartLine() {
    return startLine;
  }

  public void setStartLine(BigDecimal startLine) {
    this.startLine = startLine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretScanningLocationCommit secretScanningLocationCommit = (SecretScanningLocationCommit) o;
    return Objects.equals(this.blobSha, secretScanningLocationCommit.blobSha) &&
        Objects.equals(this.blobUrl, secretScanningLocationCommit.blobUrl) &&
        Objects.equals(this.commitSha, secretScanningLocationCommit.commitSha) &&
        Objects.equals(this.commitUrl, secretScanningLocationCommit.commitUrl) &&
        Objects.equals(this.endColumn, secretScanningLocationCommit.endColumn) &&
        Objects.equals(this.endLine, secretScanningLocationCommit.endLine) &&
        Objects.equals(this.path, secretScanningLocationCommit.path) &&
        Objects.equals(this.startColumn, secretScanningLocationCommit.startColumn) &&
        Objects.equals(this.startLine, secretScanningLocationCommit.startLine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobSha, blobUrl, commitSha, commitUrl, endColumn, endLine, path, startColumn, startLine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretScanningLocationCommit {\n");
    sb.append("    blobSha: ").append(toIndentedString(blobSha)).append("\n");
    sb.append("    blobUrl: ").append(toIndentedString(blobUrl)).append("\n");
    sb.append("    commitSha: ").append(toIndentedString(commitSha)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    endColumn: ").append(toIndentedString(endColumn)).append("\n");
    sb.append("    endLine: ").append(toIndentedString(endLine)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    startColumn: ").append(toIndentedString(startColumn)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blob_sha");
    openapiFields.add("blob_url");
    openapiFields.add("commit_sha");
    openapiFields.add("commit_url");
    openapiFields.add("end_column");
    openapiFields.add("end_line");
    openapiFields.add("path");
    openapiFields.add("start_column");
    openapiFields.add("start_line");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blob_sha");
    openapiRequiredFields.add("blob_url");
    openapiRequiredFields.add("commit_sha");
    openapiRequiredFields.add("commit_url");
    openapiRequiredFields.add("end_column");
    openapiRequiredFields.add("end_line");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("start_column");
    openapiRequiredFields.add("start_line");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretScanningLocationCommit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretScanningLocationCommit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretScanningLocationCommit is not found in the empty JSON string", SecretScanningLocationCommit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretScanningLocationCommit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretScanningLocationCommit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SecretScanningLocationCommit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("blob_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_sha").toString()));
      }
      if (!jsonObj.get("blob_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_url").toString()));
      }
      if (!jsonObj.get("commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_sha").toString()));
      }
      if (!jsonObj.get("commit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_url").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretScanningLocationCommit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretScanningLocationCommit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretScanningLocationCommit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretScanningLocationCommit.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretScanningLocationCommit>() {
           @Override
           public void write(JsonWriter out, SecretScanningLocationCommit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretScanningLocationCommit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretScanningLocationCommit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretScanningLocationCommit
   * @throws IOException if the JSON string is invalid with respect to SecretScanningLocationCommit
   */
  public static SecretScanningLocationCommit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretScanningLocationCommit.class);
  }

  /**
   * Convert an instance of SecretScanningLocationCommit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

