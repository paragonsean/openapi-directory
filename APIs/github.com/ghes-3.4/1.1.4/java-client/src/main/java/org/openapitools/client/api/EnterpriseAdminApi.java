/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionsEnterprisePermissions;
import org.openapitools.client.model.Announcement;
import org.openapitools.client.model.AuditLogEvent;
import org.openapitools.client.model.AuthenticationToken;
import org.openapitools.client.model.Authorization;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.ConfigurationStatus;
import org.openapitools.client.model.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminCreateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateImpersonationOAuthTokenRequest;
import org.openapitools.client.model.EnterpriseAdminCreateOrgRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminCreatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminCreateUserRequest;
import org.openapitools.client.model.EnterpriseAdminDeletePreReceiveEnvironment422Response;
import org.openapitools.client.model.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminListSelfHostedRunnersForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminSuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminSyncLdapMappingForTeam201Response;
import org.openapitools.client.model.EnterpriseAdminUnsuspendUserRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateGlobalWebhookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateLdapMappingForTeamRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgNameRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveEnvironmentRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest;
import org.openapitools.client.model.EnterpriseAdminUpdatePreReceiveHookRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest;
import org.openapitools.client.model.EnterpriseAdminUpdateUsernameForUserRequest;
import org.openapitools.client.model.EnterpriseCommentOverview;
import org.openapitools.client.model.EnterpriseGistOverview;
import org.openapitools.client.model.EnterpriseHookOverview;
import org.openapitools.client.model.EnterpriseIssueOverview;
import org.openapitools.client.model.EnterpriseMilestoneOverview;
import org.openapitools.client.model.EnterpriseOrganizationOverview;
import org.openapitools.client.model.EnterpriseOverview;
import org.openapitools.client.model.EnterprisePageOverview;
import org.openapitools.client.model.EnterprisePullRequestOverview;
import org.openapitools.client.model.EnterpriseRepositoryOverview;
import org.openapitools.client.model.EnterpriseSettings;
import org.openapitools.client.model.EnterpriseUserOverview;
import org.openapitools.client.model.GlobalHook;
import org.openapitools.client.model.GlobalHook2;
import org.openapitools.client.model.LdapMappingTeam;
import org.openapitools.client.model.LdapMappingUser;
import org.openapitools.client.model.LicenseInfo;
import org.openapitools.client.model.MaintenanceStatus;
import org.openapitools.client.model.OrgPreReceiveHook;
import org.openapitools.client.model.OrganizationSimple;
import org.openapitools.client.model.PreReceiveEnvironment;
import org.openapitools.client.model.PreReceiveEnvironmentDownloadStatus;
import org.openapitools.client.model.PreReceiveHook;
import org.openapitools.client.model.PublicKeyFull;
import org.openapitools.client.model.RepositoryPreReceiveHook;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerApplication;
import org.openapitools.client.model.RunnerGroupsEnterprise;
import org.openapitools.client.model.SelectedActions;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.SshKey;
import org.openapitools.client.model.ValidationErrorSimple;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnterpriseAdminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnterpriseAdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnterpriseAdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enterpriseAdminAddAuthorizedSshKey
     * @param authorizedKey The public SSH key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddAuthorizedSshKeyCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizedKey != null) {
            localVarFormParams.put("authorized_key", authorizedKey);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizedKey' is set
        if (authorizedKey == null) {
            throw new ApiException("Missing the required parameter 'authorizedKey' when calling enterpriseAdminAddAuthorizedSshKey(Async)");
        }

        return enterpriseAdminAddAuthorizedSshKeyCall(authorizedKey, _callback);

    }

    /**
     * Add an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public List<SshKey> enterpriseAdminAddAuthorizedSshKey(String authorizedKey) throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminAddAuthorizedSshKeyWithHttpInfo(authorizedKey);
        return localVarResp.getData();
    }

    /**
     * Add an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminAddAuthorizedSshKeyWithHttpInfo(String authorizedKey) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(authorizedKey, null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an authorized SSH key (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#add-an-authorized-ssh-key">Add an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddAuthorizedSshKeyAsync(String authorizedKey, final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminAddAuthorizedSshKeyValidateBeforeCall(authorizedKey, _callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise">Add custom labels to a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest' is set
        if (enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest' when calling enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, _callback);

    }

    /**
     * Add custom labels to a self-hosted runner for an enterprise
     * Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest  (required)
     * @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise">Add custom labels to a self-hosted runner for an enterprise Documentation</a>
     */
    public EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId, EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) throws ApiException {
        ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> localVarResp = enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId, enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest);
        return localVarResp.getData();
    }

    /**
     * Add custom labels to a self-hosted runner for an enterprise
     * Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise">Add custom labels to a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId, EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add custom labels to a self-hosted runner for an enterprise (asynchronously)
     * Add custom labels to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise">Add custom labels to a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, final ApiCallback<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Add organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        return enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(enterprise, runnerGroupId, orgId, _callback);

    }

    /**
     * Add organization access to a self-hosted runner group in an enterprise
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Add organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public void enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(String enterprise, Integer runnerGroupId, Integer orgId) throws ApiException {
        enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(enterprise, runnerGroupId, orgId);
    }

    /**
     * Add organization access to a self-hosted runner group in an enterprise
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Add organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer orgId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add organization access to a self-hosted runner group in an enterprise (asynchronously)
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Add organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise">Add a self-hosted runner to a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(Async)");
        }

        return enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseCall(enterprise, runnerGroupId, runnerId, _callback);

    }

    /**
     * Add a self-hosted runner to a group for an enterprise
     * Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise">Add a self-hosted runner to a group for an enterprise Documentation</a>
     */
    public void enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(String enterprise, Integer runnerGroupId, Integer runnerId) throws ApiException {
        enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId, runnerId);
    }

    /**
     * Add a self-hosted runner to a group for an enterprise
     * Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise">Add a self-hosted runner to a group for an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a self-hosted runner to a group for an enterprise (asynchronously)
     * Adds a self-hosted runner to a runner group configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise">Add a self-hosted runner to a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateEnterpriseServerLicense
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseCall(String license, String password, String settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarFormParams.put("license", license);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(String license, String password, String settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'license' is set
        if (license == null) {
            throw new ApiException("Missing the required parameter 'license' when calling enterpriseAdminCreateEnterpriseServerLicense(Async)");
        }

        return enterpriseAdminCreateEnterpriseServerLicenseCall(license, password, settings, _callback);

    }

    /**
     * Create a GitHub license
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public void enterpriseAdminCreateEnterpriseServerLicense(String license, String password, String settings) throws ApiException {
        enterpriseAdminCreateEnterpriseServerLicenseWithHttpInfo(license, password, settings);
    }

    /**
     * Create a GitHub license
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminCreateEnterpriseServerLicenseWithHttpInfo(String license, String password, String settings) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(license, password, settings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a GitHub license (asynchronously)
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to &#x60;POST&#x60; to [&#x60;/setup/api/configure&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you&#39;re working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your _.ghl_ license file. (required)
     * @param password You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don&#39;t need this parameter. (optional)
     * @param settings An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-github-enterprise-server-license">Create a GitHub license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateEnterpriseServerLicenseAsync(String license, String password, String settings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateEnterpriseServerLicenseValidateBeforeCall(license, password, settings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateGlobalWebhook
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateGlobalWebhookCall(EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateGlobalWebhookRequest;

        // create path and map variables
        String localVarPath = "/admin/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateGlobalWebhookValidateBeforeCall(EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' is set
        if (enterpriseAdminCreateGlobalWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' when calling enterpriseAdminCreateGlobalWebhook(Async)");
        }

        return enterpriseAdminCreateGlobalWebhookCall(enterpriseAdminCreateGlobalWebhookRequest, _callback);

    }

    /**
     * Create a global webhook
     * 
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @return GlobalHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public GlobalHook enterpriseAdminCreateGlobalWebhook(EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest) throws ApiException {
        ApiResponse<GlobalHook> localVarResp = enterpriseAdminCreateGlobalWebhookWithHttpInfo(enterpriseAdminCreateGlobalWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Create a global webhook
     * 
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @return ApiResponse&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook> enterpriseAdminCreateGlobalWebhookWithHttpInfo(EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateGlobalWebhookValidateBeforeCall(enterpriseAdminCreateGlobalWebhookRequest, null);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a global webhook (asynchronously)
     * 
     * @param enterpriseAdminCreateGlobalWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-global-webhook">Create a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateGlobalWebhookAsync(EnterpriseAdminCreateGlobalWebhookRequest enterpriseAdminCreateGlobalWebhookRequest, final ApiCallback<GlobalHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateGlobalWebhookValidateBeforeCall(enterpriseAdminCreateGlobalWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateImpersonationOAuthToken
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when getting an existing impersonation OAuth token </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when creating a new impersonation OAuth token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenCall(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateImpersonationOAuthTokenRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{username}/authorizations"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminCreateImpersonationOAuthToken(Async)");
        }

        // verify the required parameter 'enterpriseAdminCreateImpersonationOAuthTokenRequest' is set
        if (enterpriseAdminCreateImpersonationOAuthTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateImpersonationOAuthTokenRequest' when calling enterpriseAdminCreateImpersonationOAuthToken(Async)");
        }

        return enterpriseAdminCreateImpersonationOAuthTokenCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, _callback);

    }

    /**
     * Create an impersonation OAuth token
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (required)
     * @return Authorization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when getting an existing impersonation OAuth token </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when creating a new impersonation OAuth token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public Authorization enterpriseAdminCreateImpersonationOAuthToken(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest) throws ApiException {
        ApiResponse<Authorization> localVarResp = enterpriseAdminCreateImpersonationOAuthTokenWithHttpInfo(username, enterpriseAdminCreateImpersonationOAuthTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Create an impersonation OAuth token
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (required)
     * @return ApiResponse&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when getting an existing impersonation OAuth token </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when creating a new impersonation OAuth token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public ApiResponse<Authorization> enterpriseAdminCreateImpersonationOAuthTokenWithHttpInfo(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, null);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an impersonation OAuth token (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminCreateImpersonationOAuthTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when getting an existing impersonation OAuth token </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response when creating a new impersonation OAuth token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-impersonation-oauth-token">Create an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateImpersonationOAuthTokenAsync(String username, EnterpriseAdminCreateImpersonationOAuthTokenRequest enterpriseAdminCreateImpersonationOAuthTokenRequest, final ApiCallback<Authorization> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateImpersonationOAuthTokenValidateBeforeCall(username, enterpriseAdminCreateImpersonationOAuthTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Authorization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateOrg
     * @param enterpriseAdminCreateOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateOrgCall(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateOrgRequest;

        // create path and map variables
        String localVarPath = "/admin/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateOrgValidateBeforeCall(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreateOrgRequest' is set
        if (enterpriseAdminCreateOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateOrgRequest' when calling enterpriseAdminCreateOrg(Async)");
        }

        return enterpriseAdminCreateOrgCall(enterpriseAdminCreateOrgRequest, _callback);

    }

    /**
     * Create an organization
     * 
     * @param enterpriseAdminCreateOrgRequest  (required)
     * @return OrganizationSimple
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public OrganizationSimple enterpriseAdminCreateOrg(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest) throws ApiException {
        ApiResponse<OrganizationSimple> localVarResp = enterpriseAdminCreateOrgWithHttpInfo(enterpriseAdminCreateOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create an organization
     * 
     * @param enterpriseAdminCreateOrgRequest  (required)
     * @return ApiResponse&lt;OrganizationSimple&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public ApiResponse<OrganizationSimple> enterpriseAdminCreateOrgWithHttpInfo(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateOrgValidateBeforeCall(enterpriseAdminCreateOrgRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationSimple>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an organization (asynchronously)
     * 
     * @param enterpriseAdminCreateOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-an-organization">Create an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateOrgAsync(EnterpriseAdminCreateOrgRequest enterpriseAdminCreateOrgRequest, final ApiCallback<OrganizationSimple> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateOrgValidateBeforeCall(enterpriseAdminCreateOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationSimple>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreatePreReceiveEnvironment
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentCall(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreatePreReceiveEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' is set
        if (enterpriseAdminCreatePreReceiveEnvironmentRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' when calling enterpriseAdminCreatePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminCreatePreReceiveEnvironmentCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, _callback);

    }

    /**
     * Create a pre-receive environment
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminCreatePreReceiveEnvironment(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminCreatePreReceiveEnvironmentWithHttpInfo(enterpriseAdminCreatePreReceiveEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Create a pre-receive environment
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminCreatePreReceiveEnvironmentWithHttpInfo(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pre-receive environment (asynchronously)
     * 
     * @param enterpriseAdminCreatePreReceiveEnvironmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-environment">Create a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveEnvironmentAsync(EnterpriseAdminCreatePreReceiveEnvironmentRequest enterpriseAdminCreatePreReceiveEnvironmentRequest, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveEnvironmentValidateBeforeCall(enterpriseAdminCreatePreReceiveEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreatePreReceiveHook
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveHookCall(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreatePreReceiveHookRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreatePreReceiveHookValidateBeforeCall(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' is set
        if (enterpriseAdminCreatePreReceiveHookRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' when calling enterpriseAdminCreatePreReceiveHook(Async)");
        }

        return enterpriseAdminCreatePreReceiveHookCall(enterpriseAdminCreatePreReceiveHookRequest, _callback);

    }

    /**
     * Create a pre-receive hook
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminCreatePreReceiveHook(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminCreatePreReceiveHookWithHttpInfo(enterpriseAdminCreatePreReceiveHookRequest);
        return localVarResp.getData();
    }

    /**
     * Create a pre-receive hook
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminCreatePreReceiveHookWithHttpInfo(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveHookValidateBeforeCall(enterpriseAdminCreatePreReceiveHookRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a pre-receive hook (asynchronously)
     * 
     * @param enterpriseAdminCreatePreReceiveHookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-pre-receive-hook">Create a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreatePreReceiveHookAsync(EnterpriseAdminCreatePreReceiveHookRequest enterpriseAdminCreatePreReceiveHookRequest, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreatePreReceiveHookValidateBeforeCall(enterpriseAdminCreatePreReceiveHookRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateRegistrationTokenForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-registration-token-for-an-enterprise">Create a registration token for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateRegistrationTokenForEnterpriseCall(String enterprise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/registration-token"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateRegistrationTokenForEnterpriseValidateBeforeCall(String enterprise, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminCreateRegistrationTokenForEnterprise(Async)");
        }

        return enterpriseAdminCreateRegistrationTokenForEnterpriseCall(enterprise, _callback);

    }

    /**
     * Create a registration token for an enterprise
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-registration-token-for-an-enterprise">Create a registration token for an enterprise Documentation</a>
     */
    public AuthenticationToken enterpriseAdminCreateRegistrationTokenForEnterprise(String enterprise) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = enterpriseAdminCreateRegistrationTokenForEnterpriseWithHttpInfo(enterprise);
        return localVarResp.getData();
    }

    /**
     * Create a registration token for an enterprise
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-registration-token-for-an-enterprise">Create a registration token for an enterprise Documentation</a>
     */
    public ApiResponse<AuthenticationToken> enterpriseAdminCreateRegistrationTokenForEnterpriseWithHttpInfo(String enterprise) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateRegistrationTokenForEnterpriseValidateBeforeCall(enterprise, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a registration token for an enterprise (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-registration-token-for-an-enterprise">Create a registration token for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateRegistrationTokenForEnterpriseAsync(String enterprise, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateRegistrationTokenForEnterpriseValidateBeforeCall(enterprise, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateRemoveTokenForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-remove-token-for-an-enterprise">Create a remove token for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateRemoveTokenForEnterpriseCall(String enterprise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/remove-token"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateRemoveTokenForEnterpriseValidateBeforeCall(String enterprise, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminCreateRemoveTokenForEnterprise(Async)");
        }

        return enterpriseAdminCreateRemoveTokenForEnterpriseCall(enterprise, _callback);

    }

    /**
     * Create a remove token for an enterprise
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-remove-token-for-an-enterprise">Create a remove token for an enterprise Documentation</a>
     */
    public AuthenticationToken enterpriseAdminCreateRemoveTokenForEnterprise(String enterprise) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = enterpriseAdminCreateRemoveTokenForEnterpriseWithHttpInfo(enterprise);
        return localVarResp.getData();
    }

    /**
     * Create a remove token for an enterprise
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-remove-token-for-an-enterprise">Create a remove token for an enterprise Documentation</a>
     */
    public ApiResponse<AuthenticationToken> enterpriseAdminCreateRemoveTokenForEnterpriseWithHttpInfo(String enterprise) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateRemoveTokenForEnterpriseValidateBeforeCall(enterprise, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a remove token for an enterprise (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an enterprise. The token expires after one hour.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an enterprise, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-a-remove-token-for-an-enterprise">Create a remove token for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateRemoveTokenForEnterpriseAsync(String enterprise, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateRemoveTokenForEnterpriseValidateBeforeCall(enterprise, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise">Create a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseCall(String enterprise, EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(String enterprise, EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest' is set
        if (enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest' when calling enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(Async)");
        }

        return enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseCall(enterprise, enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, _callback);

    }

    /**
     * Create a self-hosted runner group for an enterprise
     * Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest  (required)
     * @return RunnerGroupsEnterprise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise">Create a self-hosted runner group for an enterprise Documentation</a>
     */
    public RunnerGroupsEnterprise enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(String enterprise, EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) throws ApiException {
        ApiResponse<RunnerGroupsEnterprise> localVarResp = enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseWithHttpInfo(enterprise, enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest);
        return localVarResp.getData();
    }

    /**
     * Create a self-hosted runner group for an enterprise
     * Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest  (required)
     * @return ApiResponse&lt;RunnerGroupsEnterprise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise">Create a self-hosted runner group for an enterprise Documentation</a>
     */
    public ApiResponse<RunnerGroupsEnterprise> enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseWithHttpInfo(String enterprise, EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a self-hosted runner group for an enterprise (asynchronously)
     * Creates a new self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise">Create a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseAsync(String enterprise, EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback<RunnerGroupsEnterprise> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminCreateUser
     * @param enterpriseAdminCreateUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateUserCall(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminCreateUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminCreateUserValidateBeforeCall(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterpriseAdminCreateUserRequest' is set
        if (enterpriseAdminCreateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminCreateUserRequest' when calling enterpriseAdminCreateUser(Async)");
        }

        return enterpriseAdminCreateUserCall(enterpriseAdminCreateUserRequest, _callback);

    }

    /**
     * Create a user
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @return SimpleUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public SimpleUser enterpriseAdminCreateUser(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest) throws ApiException {
        ApiResponse<SimpleUser> localVarResp = enterpriseAdminCreateUserWithHttpInfo(enterpriseAdminCreateUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a user
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @return ApiResponse&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public ApiResponse<SimpleUser> enterpriseAdminCreateUserWithHttpInfo(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminCreateUserValidateBeforeCall(enterpriseAdminCreateUserRequest, null);
        Type localVarReturnType = new TypeToken<SimpleUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a user (asynchronously)
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send &#x60;\&quot;octo_cat\&quot;&#x60; as the login, a user named &#x60;\&quot;octo-cat\&quot;&#x60; will be created.  If the login name or email address is already associated with an account, the server will return a &#x60;422&#x60; response.
     * @param enterpriseAdminCreateUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#create-a-user">Create a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminCreateUserAsync(EnterpriseAdminCreateUserRequest enterpriseAdminCreateUserRequest, final ApiCallback<SimpleUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminCreateUserValidateBeforeCall(enterpriseAdminCreateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SimpleUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteGlobalWebhook
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteGlobalWebhookCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminDeleteGlobalWebhook(Async)");
        }

        return enterpriseAdminDeleteGlobalWebhookCall(hookId, _callback);

    }

    /**
     * Delete a global webhook
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public void enterpriseAdminDeleteGlobalWebhook(Integer hookId) throws ApiException {
        enterpriseAdminDeleteGlobalWebhookWithHttpInfo(hookId);
    }

    /**
     * Delete a global webhook
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteGlobalWebhookWithHttpInfo(Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a global webhook (asynchronously)
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-global-webhook">Delete a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteGlobalWebhookAsync(Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteGlobalWebhookValidateBeforeCall(hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteImpersonationOAuthToken
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{username}/authorizations"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDeleteImpersonationOAuthToken(Async)");
        }

        return enterpriseAdminDeleteImpersonationOAuthTokenCall(username, _callback);

    }

    /**
     * Delete an impersonation OAuth token
     * 
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public void enterpriseAdminDeleteImpersonationOAuthToken(String username) throws ApiException {
        enterpriseAdminDeleteImpersonationOAuthTokenWithHttpInfo(username);
    }

    /**
     * Delete an impersonation OAuth token
     * 
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteImpersonationOAuthTokenWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an impersonation OAuth token (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-an-impersonation-oauth-token">Delete an impersonation OAuth token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteImpersonationOAuthTokenAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteImpersonationOAuthTokenValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePersonalAccessToken
     * @param tokenId The unique identifier of the token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePersonalAccessTokenCall(Integer tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/tokens/{token_id}"
            .replace("{" + "token_id" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(Integer tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling enterpriseAdminDeletePersonalAccessToken(Async)");
        }

        return enterpriseAdminDeletePersonalAccessTokenCall(tokenId, _callback);

    }

    /**
     * Delete a personal access token
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId The unique identifier of the token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public void enterpriseAdminDeletePersonalAccessToken(Integer tokenId) throws ApiException {
        enterpriseAdminDeletePersonalAccessTokenWithHttpInfo(tokenId);
    }

    /**
     * Delete a personal access token
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId The unique identifier of the token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePersonalAccessTokenWithHttpInfo(Integer tokenId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a personal access token (asynchronously)
     * Deletes a personal access token. Returns a &#x60;403 - Forbidden&#x60; status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param tokenId The unique identifier of the token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-personal-access-token">Delete a personal access token Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePersonalAccessTokenAsync(Integer tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePersonalAccessTokenValidateBeforeCall(tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePreReceiveEnvironment
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminDeletePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminDeletePreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Delete a pre-receive environment
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public void enterpriseAdminDeletePreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        enterpriseAdminDeletePreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
    }

    /**
     * Delete a pre-receive environment
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pre-receive environment (asynchronously)
     * If you attempt to delete an environment that cannot be deleted, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-environment">Delete a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePreReceiveHook
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveHookCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePreReceiveHookValidateBeforeCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminDeletePreReceiveHook(Async)");
        }

        return enterpriseAdminDeletePreReceiveHookCall(preReceiveHookId, _callback);

    }

    /**
     * Delete a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public void enterpriseAdminDeletePreReceiveHook(Integer preReceiveHookId) throws ApiException {
        enterpriseAdminDeletePreReceiveHookWithHttpInfo(preReceiveHookId);
    }

    /**
     * Delete a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePreReceiveHookWithHttpInfo(Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveHookValidateBeforeCall(preReceiveHookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-pre-receive-hook">Delete a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePreReceiveHookAsync(Integer preReceiveHookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePreReceiveHookValidateBeforeCall(preReceiveHookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeletePublicKey
     * @param keyIds The unique identifier of the key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePublicKeyCall(String keyIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/keys/{key_ids}"
            .replace("{" + "key_ids" + "}", localVarApiClient.escapeString(keyIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeletePublicKeyValidateBeforeCall(String keyIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyIds' is set
        if (keyIds == null) {
            throw new ApiException("Missing the required parameter 'keyIds' when calling enterpriseAdminDeletePublicKey(Async)");
        }

        return enterpriseAdminDeletePublicKeyCall(keyIds, _callback);

    }

    /**
     * Delete a public key
     * 
     * @param keyIds The unique identifier of the key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public void enterpriseAdminDeletePublicKey(String keyIds) throws ApiException {
        enterpriseAdminDeletePublicKeyWithHttpInfo(keyIds);
    }

    /**
     * Delete a public key
     * 
     * @param keyIds The unique identifier of the key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeletePublicKeyWithHttpInfo(String keyIds) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeletePublicKeyValidateBeforeCall(keyIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a public key (asynchronously)
     * 
     * @param keyIds The unique identifier of the key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-public-key">Delete a public key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeletePublicKeyAsync(String keyIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeletePublicKeyValidateBeforeCall(keyIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteSelfHostedRunnerFromEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise">Delete a self-hosted runner from an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(Async)");
        }

        return enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseCall(enterprise, runnerId, _callback);

    }

    /**
     * Delete a self-hosted runner from an enterprise
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise">Delete a self-hosted runner from an enterprise Documentation</a>
     */
    public void enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(String enterprise, Integer runnerId) throws ApiException {
        enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseWithHttpInfo(enterprise, runnerId);
    }

    /**
     * Delete a self-hosted runner from an enterprise
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise">Delete a self-hosted runner from an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseWithHttpInfo(String enterprise, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseValidateBeforeCall(enterprise, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner from an enterprise (asynchronously)
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-self-hosted-runner-from-an-enterprise">Delete a self-hosted runner from an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseAsync(String enterprise, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseValidateBeforeCall(enterprise, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise">Delete a self-hosted runner group from an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseCall(String enterprise, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(Async)");
        }

        return enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseCall(enterprise, runnerGroupId, _callback);

    }

    /**
     * Delete a self-hosted runner group from an enterprise
     * Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise">Delete a self-hosted runner group from an enterprise Documentation</a>
     */
    public void enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(String enterprise, Integer runnerGroupId) throws ApiException {
        enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseWithHttpInfo(enterprise, runnerGroupId);
    }

    /**
     * Delete a self-hosted runner group from an enterprise
     * Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise">Delete a self-hosted runner group from an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseValidateBeforeCall(enterprise, runnerGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner group from an enterprise (asynchronously)
     * Deletes a self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise">Delete a self-hosted runner group from an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseAsync(String enterprise, Integer runnerGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseValidateBeforeCall(enterprise, runnerGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDeleteUser
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDeleteUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDeleteUser(Async)");
        }

        return enterpriseAdminDeleteUserCall(username, _callback);

    }

    /**
     * Delete a user
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public void enterpriseAdminDeleteUser(String username) throws ApiException {
        enterpriseAdminDeleteUserWithHttpInfo(username);
    }

    /**
     * Delete a user
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDeleteUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDeleteUserValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user (asynchronously)
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#delete-a-user">Delete a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDeleteUserAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDeleteUserValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDemoteSiteAdministrator
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDemoteSiteAdministratorCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/site_admin"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminDemoteSiteAdministrator(Async)");
        }

        return enterpriseAdminDemoteSiteAdministratorCall(username, _callback);

    }

    /**
     * Demote a site administrator
     * You can demote any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public void enterpriseAdminDemoteSiteAdministrator(String username) throws ApiException {
        enterpriseAdminDemoteSiteAdministratorWithHttpInfo(username);
    }

    /**
     * Demote a site administrator
     * You can demote any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDemoteSiteAdministratorWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Demote a site administrator (asynchronously)
     * You can demote any user account except your own.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#demote-a-site-administrator">Demote a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDemoteSiteAdministratorAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDemoteSiteAdministratorValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise">Disable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseCall(String enterprise, Integer orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(String enterprise, Integer orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(Async)");
        }

        return enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseCall(enterprise, orgId, _callback);

    }

    /**
     * Disable a selected organization for GitHub Actions in an enterprise
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise">Disable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public void enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(String enterprise, Integer orgId) throws ApiException {
        enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseWithHttpInfo(enterprise, orgId);
    }

    /**
     * Disable a selected organization for GitHub Actions in an enterprise
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise">Disable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseWithHttpInfo(String enterprise, Integer orgId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(enterprise, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable a selected organization for GitHub Actions in an enterprise (asynchronously)
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise">Disable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseAsync(String enterprise, Integer orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(enterprise, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminEnableOrDisableMaintenanceMode
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeCall(String maintenance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/maintenance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maintenance != null) {
            localVarFormParams.put("maintenance", maintenance);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(String maintenance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'maintenance' is set
        if (maintenance == null) {
            throw new ApiException("Missing the required parameter 'maintenance' when calling enterpriseAdminEnableOrDisableMaintenanceMode(Async)");
        }

        return enterpriseAdminEnableOrDisableMaintenanceModeCall(maintenance, _callback);

    }

    /**
     * Enable or disable maintenance mode
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @return MaintenanceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public MaintenanceStatus enterpriseAdminEnableOrDisableMaintenanceMode(String maintenance) throws ApiException {
        ApiResponse<MaintenanceStatus> localVarResp = enterpriseAdminEnableOrDisableMaintenanceModeWithHttpInfo(maintenance);
        return localVarResp.getData();
    }

    /**
     * Enable or disable maintenance mode
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @return ApiResponse&lt;MaintenanceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public ApiResponse<MaintenanceStatus> enterpriseAdminEnableOrDisableMaintenanceModeWithHttpInfo(String maintenance) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(maintenance, null);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable or disable maintenance mode (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param maintenance A JSON string with the attributes &#x60;enabled&#x60; and &#x60;when&#x60;.  The possible values for &#x60;enabled&#x60; are &#x60;true&#x60; and &#x60;false&#x60;. When it&#39;s &#x60;false&#x60;, the attribute &#x60;when&#x60; is ignored and the maintenance mode is turned off. &#x60;when&#x60; defines the time period when the maintenance was enabled.  The possible values for &#x60;when&#x60; are &#x60;now&#x60; or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#enable-or-disable-maintenance-mode">Enable or disable maintenance mode Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableOrDisableMaintenanceModeAsync(String maintenance, final ApiCallback<MaintenanceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminEnableOrDisableMaintenanceModeValidateBeforeCall(maintenance, _callback);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise">Enable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseCall(String enterprise, Integer orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(String enterprise, Integer orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(Async)");
        }

        return enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseCall(enterprise, orgId, _callback);

    }

    /**
     * Enable a selected organization for GitHub Actions in an enterprise
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise">Enable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public void enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(String enterprise, Integer orgId) throws ApiException {
        enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseWithHttpInfo(enterprise, orgId);
    }

    /**
     * Enable a selected organization for GitHub Actions in an enterprise
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise">Enable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseWithHttpInfo(String enterprise, Integer orgId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(enterprise, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a selected organization for GitHub Actions in an enterprise (asynchronously)
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise">Enable a selected organization for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseAsync(String enterprise, Integer orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseValidateBeforeCall(enterprise, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAllAuthorizedSshKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetAllAuthorizedSshKeysCall(_callback);

    }

    /**
     * Get all authorized SSH keys
     * 
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public List<SshKey> enterpriseAdminGetAllAuthorizedSshKeys() throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminGetAllAuthorizedSshKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all authorized SSH keys
     * 
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminGetAllAuthorizedSshKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all authorized SSH keys (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-all-authorized-ssh-keys">Get all authorized SSH keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllAuthorizedSshKeysAsync(final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAllAuthorizedSshKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAllStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAllStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetAllStatsCall(_callback);

    }

    /**
     * Get all statistics
     * 
     * @return EnterpriseOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public EnterpriseOverview enterpriseAdminGetAllStats() throws ApiException {
        ApiResponse<EnterpriseOverview> localVarResp = enterpriseAdminGetAllStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all statistics
     * 
     * @return ApiResponse&lt;EnterpriseOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public ApiResponse<EnterpriseOverview> enterpriseAdminGetAllStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAllStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-statistics">Get all statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllStatsAsync(final ApiCallback<EnterpriseOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAllStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAllowedActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-allowed-actions-for-an-enterprise">Get allowed actions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllowedActionsEnterpriseCall(String enterprise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/selected-actions"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAllowedActionsEnterpriseValidateBeforeCall(String enterprise, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminGetAllowedActionsEnterprise(Async)");
        }

        return enterpriseAdminGetAllowedActionsEnterpriseCall(enterprise, _callback);

    }

    /**
     * Get allowed actions for an enterprise
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return SelectedActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-allowed-actions-for-an-enterprise">Get allowed actions for an enterprise Documentation</a>
     */
    public SelectedActions enterpriseAdminGetAllowedActionsEnterprise(String enterprise) throws ApiException {
        ApiResponse<SelectedActions> localVarResp = enterpriseAdminGetAllowedActionsEnterpriseWithHttpInfo(enterprise);
        return localVarResp.getData();
    }

    /**
     * Get allowed actions for an enterprise
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ApiResponse&lt;SelectedActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-allowed-actions-for-an-enterprise">Get allowed actions for an enterprise Documentation</a>
     */
    public ApiResponse<SelectedActions> enterpriseAdminGetAllowedActionsEnterpriseWithHttpInfo(String enterprise) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAllowedActionsEnterpriseValidateBeforeCall(enterprise, null);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed actions for an enterprise (asynchronously)
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-allowed-actions-for-an-enterprise">Get allowed actions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAllowedActionsEnterpriseAsync(String enterprise, final ApiCallback<SelectedActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAllowedActionsEnterpriseValidateBeforeCall(enterprise, _callback);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAnnouncement
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#get-the-global-announcement-banner">Get the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAnnouncementCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/announcement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAnnouncementValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetAnnouncementCall(_callback);

    }

    /**
     * Get the global announcement banner
     * Gets the current message and expiration date of the global announcement banner in your enterprise.
     * @return Announcement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#get-the-global-announcement-banner">Get the global announcement banner Documentation</a>
     */
    public Announcement enterpriseAdminGetAnnouncement() throws ApiException {
        ApiResponse<Announcement> localVarResp = enterpriseAdminGetAnnouncementWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the global announcement banner
     * Gets the current message and expiration date of the global announcement banner in your enterprise.
     * @return ApiResponse&lt;Announcement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#get-the-global-announcement-banner">Get the global announcement banner Documentation</a>
     */
    public ApiResponse<Announcement> enterpriseAdminGetAnnouncementWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAnnouncementValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Announcement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the global announcement banner (asynchronously)
     * Gets the current message and expiration date of the global announcement banner in your enterprise.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#get-the-global-announcement-banner">Get the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAnnouncementAsync(final ApiCallback<Announcement> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAnnouncementValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Announcement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetAuditLog
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log). (optional)
     * @param include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. (optional)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. (optional)
     * @param order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise">Get the audit log for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAuditLogCall(String enterprise, String phrase, String include, String after, String before, String order, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/audit-log"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phrase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phrase", phrase));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetAuditLogValidateBeforeCall(String enterprise, String phrase, String include, String after, String before, String order, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminGetAuditLog(Async)");
        }

        return enterpriseAdminGetAuditLogCall(enterprise, phrase, include, after, before, order, page, perPage, _callback);

    }

    /**
     * Get the audit log for an enterprise
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the &#x60;admin:enterprise&#x60; scope.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log). (optional)
     * @param include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. (optional)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. (optional)
     * @param order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return List&lt;AuditLogEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise">Get the audit log for an enterprise Documentation</a>
     */
    public List<AuditLogEvent> enterpriseAdminGetAuditLog(String enterprise, String phrase, String include, String after, String before, String order, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<AuditLogEvent>> localVarResp = enterpriseAdminGetAuditLogWithHttpInfo(enterprise, phrase, include, after, before, order, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the audit log for an enterprise
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the &#x60;admin:enterprise&#x60; scope.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log). (optional)
     * @param include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. (optional)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. (optional)
     * @param order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;List&lt;AuditLogEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise">Get the audit log for an enterprise Documentation</a>
     */
    public ApiResponse<List<AuditLogEvent>> enterpriseAdminGetAuditLogWithHttpInfo(String enterprise, String phrase, String include, String after, String before, String order, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetAuditLogValidateBeforeCall(enterprise, phrase, include, after, before, order, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<AuditLogEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the audit log for an enterprise (asynchronously)
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the &#x60;admin:enterprise&#x60; scope.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param phrase A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.4/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log). (optional)
     * @param include The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;. (optional)
     * @param after A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. (optional)
     * @param before A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. (optional)
     * @param order The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise">Get the audit log for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetAuditLogAsync(String enterprise, String phrase, String include, String after, String before, String order, Integer page, Integer perPage, final ApiCallback<List<AuditLogEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetAuditLogValidateBeforeCall(enterprise, phrase, include, after, before, order, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<AuditLogEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetCommentStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetCommentStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetCommentStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetCommentStatsCall(_callback);

    }

    /**
     * Get comment statistics
     * 
     * @return EnterpriseCommentOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public EnterpriseCommentOverview enterpriseAdminGetCommentStats() throws ApiException {
        ApiResponse<EnterpriseCommentOverview> localVarResp = enterpriseAdminGetCommentStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get comment statistics
     * 
     * @return ApiResponse&lt;EnterpriseCommentOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public ApiResponse<EnterpriseCommentOverview> enterpriseAdminGetCommentStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetCommentStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseCommentOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get comment statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-comment-statistics">Get comment statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetCommentStatsAsync(final ApiCallback<EnterpriseCommentOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetCommentStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseCommentOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetConfigurationStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetConfigurationStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/configcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetConfigurationStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetConfigurationStatusCall(_callback);

    }

    /**
     * Get the configuration status
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @return ConfigurationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public ConfigurationStatus enterpriseAdminGetConfigurationStatus() throws ApiException {
        ApiResponse<ConfigurationStatus> localVarResp = enterpriseAdminGetConfigurationStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the configuration status
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @return ApiResponse&lt;ConfigurationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public ApiResponse<ConfigurationStatus> enterpriseAdminGetConfigurationStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetConfigurationStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConfigurationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the configuration status (asynchronously)
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | &#x60;PENDING&#x60;     | The job has not started yet       | | &#x60;CONFIGURING&#x60; | The job is running                | | &#x60;DONE&#x60;        | The job has finished correctly    | | &#x60;FAILED&#x60;      | The job has finished unexpectedly |
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-configuration-status">Get the configuration status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetConfigurationStatusAsync(final ApiCallback<ConfigurationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetConfigurationStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConfigurationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetDownloadStatusForPreReceiveEnvironment
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(Async)");
        }

        return enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Get the download status for a pre-receive environment
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return PreReceiveEnvironmentDownloadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironmentDownloadStatus enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironmentDownloadStatus> localVarResp = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get the download status for a pre-receive environment
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return ApiResponse&lt;PreReceiveEnvironmentDownloadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironmentDownloadStatus> enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the download status for a pre-receive environment (asynchronously)
     * In addition to seeing the download status at the \&quot;[Get a pre-receive environment](#get-a-pre-receive-environment)\&quot; endpoint, there is also this separate endpoint for just the download status.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-download-status-for-a-pre-receive-environment">Get the download status for a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironmentDownloadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetGistStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGistStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/gists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetGistStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetGistStatsCall(_callback);

    }

    /**
     * Get gist statistics
     * 
     * @return EnterpriseGistOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public EnterpriseGistOverview enterpriseAdminGetGistStats() throws ApiException {
        ApiResponse<EnterpriseGistOverview> localVarResp = enterpriseAdminGetGistStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get gist statistics
     * 
     * @return ApiResponse&lt;EnterpriseGistOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public ApiResponse<EnterpriseGistOverview> enterpriseAdminGetGistStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetGistStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseGistOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get gist statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-gist-statistics">Get gist statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGistStatsAsync(final ApiCallback<EnterpriseGistOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetGistStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseGistOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetGithubActionsPermissionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-github-actions-permissions-for-an-enterprise">Get GitHub Actions permissions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGithubActionsPermissionsEnterpriseCall(String enterprise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetGithubActionsPermissionsEnterpriseValidateBeforeCall(String enterprise, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminGetGithubActionsPermissionsEnterprise(Async)");
        }

        return enterpriseAdminGetGithubActionsPermissionsEnterpriseCall(enterprise, _callback);

    }

    /**
     * Get GitHub Actions permissions for an enterprise
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ActionsEnterprisePermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-github-actions-permissions-for-an-enterprise">Get GitHub Actions permissions for an enterprise Documentation</a>
     */
    public ActionsEnterprisePermissions enterpriseAdminGetGithubActionsPermissionsEnterprise(String enterprise) throws ApiException {
        ApiResponse<ActionsEnterprisePermissions> localVarResp = enterpriseAdminGetGithubActionsPermissionsEnterpriseWithHttpInfo(enterprise);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions permissions for an enterprise
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ApiResponse&lt;ActionsEnterprisePermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-github-actions-permissions-for-an-enterprise">Get GitHub Actions permissions for an enterprise Documentation</a>
     */
    public ApiResponse<ActionsEnterprisePermissions> enterpriseAdminGetGithubActionsPermissionsEnterpriseWithHttpInfo(String enterprise) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetGithubActionsPermissionsEnterpriseValidateBeforeCall(enterprise, null);
        Type localVarReturnType = new TypeToken<ActionsEnterprisePermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions permissions for an enterprise (asynchronously)
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-github-actions-permissions-for-an-enterprise">Get GitHub Actions permissions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGithubActionsPermissionsEnterpriseAsync(String enterprise, final ApiCallback<ActionsEnterprisePermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetGithubActionsPermissionsEnterpriseValidateBeforeCall(enterprise, _callback);
        Type localVarReturnType = new TypeToken<ActionsEnterprisePermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetGlobalWebhook
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGlobalWebhookCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetGlobalWebhookValidateBeforeCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminGetGlobalWebhook(Async)");
        }

        return enterpriseAdminGetGlobalWebhookCall(hookId, _callback);

    }

    /**
     * Get a global webhook
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @return GlobalHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public GlobalHook enterpriseAdminGetGlobalWebhook(Integer hookId) throws ApiException {
        ApiResponse<GlobalHook> localVarResp = enterpriseAdminGetGlobalWebhookWithHttpInfo(hookId);
        return localVarResp.getData();
    }

    /**
     * Get a global webhook
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @return ApiResponse&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook> enterpriseAdminGetGlobalWebhookWithHttpInfo(Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetGlobalWebhookValidateBeforeCall(hookId, null);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a global webhook (asynchronously)
     * 
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-global-webhook">Get a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetGlobalWebhookAsync(Integer hookId, final ApiCallback<GlobalHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetGlobalWebhookValidateBeforeCall(hookId, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetHooksStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetHooksStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetHooksStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetHooksStatsCall(_callback);

    }

    /**
     * Get hooks statistics
     * 
     * @return EnterpriseHookOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public EnterpriseHookOverview enterpriseAdminGetHooksStats() throws ApiException {
        ApiResponse<EnterpriseHookOverview> localVarResp = enterpriseAdminGetHooksStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get hooks statistics
     * 
     * @return ApiResponse&lt;EnterpriseHookOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public ApiResponse<EnterpriseHookOverview> enterpriseAdminGetHooksStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetHooksStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseHookOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get hooks statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-hooks-statistics">Get hooks statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetHooksStatsAsync(final ApiCallback<EnterpriseHookOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetHooksStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseHookOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetIssueStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetIssueStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetIssueStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetIssueStatsCall(_callback);

    }

    /**
     * Get issue statistics
     * 
     * @return EnterpriseIssueOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public EnterpriseIssueOverview enterpriseAdminGetIssueStats() throws ApiException {
        ApiResponse<EnterpriseIssueOverview> localVarResp = enterpriseAdminGetIssueStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get issue statistics
     * 
     * @return ApiResponse&lt;EnterpriseIssueOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public ApiResponse<EnterpriseIssueOverview> enterpriseAdminGetIssueStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetIssueStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseIssueOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get issue statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-issues-statistics">Get issue statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetIssueStatsAsync(final ApiCallback<EnterpriseIssueOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetIssueStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseIssueOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetLicenseInformation
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetLicenseInformationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/settings/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetLicenseInformationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetLicenseInformationCall(_callback);

    }

    /**
     * Get license information
     * 
     * @return LicenseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public LicenseInfo enterpriseAdminGetLicenseInformation() throws ApiException {
        ApiResponse<LicenseInfo> localVarResp = enterpriseAdminGetLicenseInformationWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get license information
     * 
     * @return ApiResponse&lt;LicenseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public ApiResponse<LicenseInfo> enterpriseAdminGetLicenseInformationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetLicenseInformationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get license information (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-license-information">Get license information Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetLicenseInformationAsync(final ApiCallback<LicenseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetLicenseInformationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetMaintenanceStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMaintenanceStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/maintenance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetMaintenanceStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetMaintenanceStatusCall(_callback);

    }

    /**
     * Get the maintenance status
     * Check your installation&#39;s maintenance status:
     * @return MaintenanceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public MaintenanceStatus enterpriseAdminGetMaintenanceStatus() throws ApiException {
        ApiResponse<MaintenanceStatus> localVarResp = enterpriseAdminGetMaintenanceStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the maintenance status
     * Check your installation&#39;s maintenance status:
     * @return ApiResponse&lt;MaintenanceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public ApiResponse<MaintenanceStatus> enterpriseAdminGetMaintenanceStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetMaintenanceStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the maintenance status (asynchronously)
     * Check your installation&#39;s maintenance status:
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-the-maintenance-status">Get the maintenance status Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMaintenanceStatusAsync(final ApiCallback<MaintenanceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetMaintenanceStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MaintenanceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetMilestoneStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMilestoneStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/milestones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetMilestoneStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetMilestoneStatsCall(_callback);

    }

    /**
     * Get milestone statistics
     * 
     * @return EnterpriseMilestoneOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public EnterpriseMilestoneOverview enterpriseAdminGetMilestoneStats() throws ApiException {
        ApiResponse<EnterpriseMilestoneOverview> localVarResp = enterpriseAdminGetMilestoneStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get milestone statistics
     * 
     * @return ApiResponse&lt;EnterpriseMilestoneOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public ApiResponse<EnterpriseMilestoneOverview> enterpriseAdminGetMilestoneStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetMilestoneStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseMilestoneOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get milestone statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-milestone-statistics">Get milestone statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetMilestoneStatsAsync(final ApiCallback<EnterpriseMilestoneOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetMilestoneStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseMilestoneOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetOrgStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetOrgStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetOrgStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetOrgStatsCall(_callback);

    }

    /**
     * Get organization statistics
     * 
     * @return EnterpriseOrganizationOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public EnterpriseOrganizationOverview enterpriseAdminGetOrgStats() throws ApiException {
        ApiResponse<EnterpriseOrganizationOverview> localVarResp = enterpriseAdminGetOrgStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get organization statistics
     * 
     * @return ApiResponse&lt;EnterpriseOrganizationOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public ApiResponse<EnterpriseOrganizationOverview> enterpriseAdminGetOrgStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetOrgStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseOrganizationOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-organization-statistics">Get organization statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetOrgStatsAsync(final ApiCallback<EnterpriseOrganizationOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetOrgStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseOrganizationOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPagesStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPagesStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPagesStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetPagesStatsCall(_callback);

    }

    /**
     * Get pages statistics
     * 
     * @return EnterprisePageOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public EnterprisePageOverview enterpriseAdminGetPagesStats() throws ApiException {
        ApiResponse<EnterprisePageOverview> localVarResp = enterpriseAdminGetPagesStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get pages statistics
     * 
     * @return ApiResponse&lt;EnterprisePageOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public ApiResponse<EnterprisePageOverview> enterpriseAdminGetPagesStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPagesStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterprisePageOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pages statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pages-statistics">Get pages statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPagesStatsAsync(final ApiCallback<EnterprisePageOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPagesStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterprisePageOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveEnvironment
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetPreReceiveEnvironment(Async)");
        }

        return enterpriseAdminGetPreReceiveEnvironmentCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Get a pre-receive environment
     * 
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminGetPreReceiveEnvironment(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminGetPreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive environment
     * 
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminGetPreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive environment (asynchronously)
     * 
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-environment">Get a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHook
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookValidateBeforeCall(Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHook(Async)");
        }

        return enterpriseAdminGetPreReceiveHookCall(preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminGetPreReceiveHook(Integer preReceiveHookId) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookWithHttpInfo(preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminGetPreReceiveHookWithHttpInfo(Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookValidateBeforeCall(preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook">Get a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookAsync(Integer preReceiveHookId, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookValidateBeforeCall(preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHookForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminGetPreReceiveHookForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForOrg(Async)");
        }

        return enterpriseAdminGetPreReceiveHookForOrgCall(org, preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook for an organization
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminGetPreReceiveHookForOrg(String org, Integer preReceiveHookId) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookForOrgWithHttpInfo(org, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook for an organization
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminGetPreReceiveHookForOrgWithHttpInfo(String org, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(org, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook for an organization (asynchronously)
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-an-organization">Get a pre-receive hook for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForOrgAsync(String org, Integer preReceiveHookId, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForOrgValidateBeforeCall(org, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPreReceiveHookForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForRepo(Async)");
        }

        return enterpriseAdminGetPreReceiveHookForRepoCall(owner, repo, preReceiveHookId, _callback);

    }

    /**
     * Get a pre-receive hook for a repository
     * 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminGetPreReceiveHookForRepo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminGetPreReceiveHookForRepoWithHttpInfo(owner, repo, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Get a pre-receive hook for a repository
     * 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminGetPreReceiveHookForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(owner, repo, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pre-receive hook for a repository (asynchronously)
     * 
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-a-pre-receive-hook-for-a-repository">Get a pre-receive hook for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPreReceiveHookForRepoAsync(String owner, String repo, Integer preReceiveHookId, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPreReceiveHookForRepoValidateBeforeCall(owner, repo, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetPullRequestStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPullRequestStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/pulls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetPullRequestStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetPullRequestStatsCall(_callback);

    }

    /**
     * Get pull request statistics
     * 
     * @return EnterprisePullRequestOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public EnterprisePullRequestOverview enterpriseAdminGetPullRequestStats() throws ApiException {
        ApiResponse<EnterprisePullRequestOverview> localVarResp = enterpriseAdminGetPullRequestStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get pull request statistics
     * 
     * @return ApiResponse&lt;EnterprisePullRequestOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public ApiResponse<EnterprisePullRequestOverview> enterpriseAdminGetPullRequestStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetPullRequestStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterprisePullRequestOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pull request statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-pull-requests-statistics">Get pull request statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetPullRequestStatsAsync(final ApiCallback<EnterprisePullRequestOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetPullRequestStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterprisePullRequestOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetRepoStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetRepoStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/repos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetRepoStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetRepoStatsCall(_callback);

    }

    /**
     * Get repository statistics
     * 
     * @return EnterpriseRepositoryOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public EnterpriseRepositoryOverview enterpriseAdminGetRepoStats() throws ApiException {
        ApiResponse<EnterpriseRepositoryOverview> localVarResp = enterpriseAdminGetRepoStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get repository statistics
     * 
     * @return ApiResponse&lt;EnterpriseRepositoryOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public ApiResponse<EnterpriseRepositoryOverview> enterpriseAdminGetRepoStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetRepoStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseRepositoryOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get repository statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-repository-statistics">Get repository statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetRepoStatsAsync(final ApiCallback<EnterpriseRepositoryOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetRepoStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseRepositoryOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise">Get a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminGetSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminGetSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminGetSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, _callback);

    }

    /**
     * Get a self-hosted runner for an enterprise
     * Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise">Get a self-hosted runner for an enterprise Documentation</a>
     */
    public Runner enterpriseAdminGetSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = enterpriseAdminGetSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner for an enterprise
     * Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise">Get a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<Runner> enterpriseAdminGetSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner for an enterprise (asynchronously)
     * Gets a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise">Get a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetSelfHostedRunnerGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise">Get a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(Async)");
        }

        return enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseCall(enterprise, runnerGroupId, _callback);

    }

    /**
     * Get a self-hosted runner group for an enterprise
     * Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return RunnerGroupsEnterprise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise">Get a self-hosted runner group for an enterprise Documentation</a>
     */
    public RunnerGroupsEnterprise enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(String enterprise, Integer runnerGroupId) throws ApiException {
        ApiResponse<RunnerGroupsEnterprise> localVarResp = enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner group for an enterprise
     * Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return ApiResponse&lt;RunnerGroupsEnterprise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise">Get a self-hosted runner group for an enterprise Documentation</a>
     */
    public ApiResponse<RunnerGroupsEnterprise> enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner group for an enterprise (asynchronously)
     * Gets a specific self-hosted runner group for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise">Get a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, final ApiCallback<RunnerGroupsEnterprise> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetSettingsCall(_callback);

    }

    /**
     * Get settings
     * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings).  **Note:** You cannot retrieve the management console password with the Enterprise administration API.
     * @return EnterpriseSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public EnterpriseSettings enterpriseAdminGetSettings() throws ApiException {
        ApiResponse<EnterpriseSettings> localVarResp = enterpriseAdminGetSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get settings
     * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings).  **Note:** You cannot retrieve the management console password with the Enterprise administration API.
     * @return ApiResponse&lt;EnterpriseSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public ApiResponse<EnterpriseSettings> enterpriseAdminGetSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get settings (asynchronously)
     * Gets the settings for your instance. To change settings, see the [Set settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings).  **Note:** You cannot retrieve the management console password with the Enterprise administration API.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings">Get settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetSettingsAsync(final ApiCallback<EnterpriseSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminGetUserStats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetUserStatsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/stats/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminGetUserStatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminGetUserStatsCall(_callback);

    }

    /**
     * Get users statistics
     * 
     * @return EnterpriseUserOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public EnterpriseUserOverview enterpriseAdminGetUserStats() throws ApiException {
        ApiResponse<EnterpriseUserOverview> localVarResp = enterpriseAdminGetUserStatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get users statistics
     * 
     * @return ApiResponse&lt;EnterpriseUserOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public ApiResponse<EnterpriseUserOverview> enterpriseAdminGetUserStatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminGetUserStatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EnterpriseUserOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users statistics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-users-statistics">Get users statistics Documentation</a>
     */
    public okhttp3.Call enterpriseAdminGetUserStatsAsync(final ApiCallback<EnterpriseUserOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminGetUserStatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EnterpriseUserOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListGlobalWebhooks
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListGlobalWebhooksCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListGlobalWebhooksValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListGlobalWebhooksCall(perPage, page, _callback);

    }

    /**
     * List global webhooks
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;GlobalHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public List<GlobalHook> enterpriseAdminListGlobalWebhooks(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<GlobalHook>> localVarResp = enterpriseAdminListGlobalWebhooksWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List global webhooks
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;GlobalHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public ApiResponse<List<GlobalHook>> enterpriseAdminListGlobalWebhooksWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListGlobalWebhooksValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<GlobalHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List global webhooks (asynchronously)
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-global-webhooks">List global webhooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListGlobalWebhooksAsync(Integer perPage, Integer page, final ApiCallback<List<GlobalHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListGlobalWebhooksValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<GlobalHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise">List labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, _callback);

    }

    /**
     * List labels for a self-hosted runner for an enterprise
     * Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise">List labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId) throws ApiException {
        ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> localVarResp = enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId);
        return localVarResp.getData();
    }

    /**
     * List labels for a self-hosted runner for an enterprise
     * Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise">List labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List labels for a self-hosted runner for an enterprise (asynchronously)
     * Lists all labels for a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise">List labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, final ApiCallback<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise">List organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        return enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(enterprise, runnerGroupId, perPage, page, _callback);

    }

    /**
     * List organization access to a self-hosted runner group in an enterprise
     * Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise">List organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(String enterprise, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> localVarResp = enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(enterprise, runnerGroupId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization access to a self-hosted runner group in an enterprise
     * Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise">List organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization access to a self-hosted runner group in an enterprise (asynchronously)
     * Lists the organizations with access to a self-hosted runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise">List organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPersonalAccessTokens
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPersonalAccessTokensCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPersonalAccessTokensValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPersonalAccessTokensCall(perPage, page, _callback);

    }

    /**
     * List personal access tokens
     * Lists personal access tokens for all users, including admin users.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Authorization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public List<Authorization> enterpriseAdminListPersonalAccessTokens(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Authorization>> localVarResp = enterpriseAdminListPersonalAccessTokensWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List personal access tokens
     * Lists personal access tokens for all users, including admin users.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Authorization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public ApiResponse<List<Authorization>> enterpriseAdminListPersonalAccessTokensWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPersonalAccessTokensValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Authorization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List personal access tokens (asynchronously)
     * Lists personal access tokens for all users, including admin users.
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-personal-access-tokens">List personal access tokens Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPersonalAccessTokensAsync(Integer perPage, Integer page, final ApiCallback<List<Authorization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPersonalAccessTokensValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Authorization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveEnvironments
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPreReceiveEnvironmentsCall(perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive environments
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return List&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public List<PreReceiveEnvironment> enterpriseAdminListPreReceiveEnvironments(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<PreReceiveEnvironment>> localVarResp = enterpriseAdminListPreReceiveEnvironmentsWithHttpInfo(perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive environments
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return ApiResponse&lt;List&lt;PreReceiveEnvironment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public ApiResponse<List<PreReceiveEnvironment>> enterpriseAdminListPreReceiveEnvironmentsWithHttpInfo(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<PreReceiveEnvironment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive environments (asynchronously)
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-environments">List pre-receive environments Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveEnvironmentsAsync(Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<PreReceiveEnvironment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveEnvironmentsValidateBeforeCall(perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<PreReceiveEnvironment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooks
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPreReceiveHooksCall(perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @return List&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public List<PreReceiveHook> enterpriseAdminListPreReceiveHooks(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<PreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksWithHttpInfo(perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @return ApiResponse&lt;List&lt;PreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public ApiResponse<List<PreReceiveHook>> enterpriseAdminListPreReceiveHooksWithHttpInfo(Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksValidateBeforeCall(perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<PreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks (asynchronously)
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The property to sort the results by. (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks">List pre-receive hooks Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksAsync(Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<PreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksValidateBeforeCall(perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<PreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooksForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgCall(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminListPreReceiveHooksForOrg(Async)");
        }

        return enterpriseAdminListPreReceiveHooksForOrgCall(org, perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks for an organization
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @return List&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public List<OrgPreReceiveHook> enterpriseAdminListPreReceiveHooksForOrg(String org, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<OrgPreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksForOrgWithHttpInfo(org, perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks for an organization
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @return ApiResponse&lt;List&lt;OrgPreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public ApiResponse<List<OrgPreReceiveHook>> enterpriseAdminListPreReceiveHooksForOrgWithHttpInfo(String org, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(org, perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<OrgPreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks for an organization (asynchronously)
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort The sort order for the response collection. (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-an-organization">List pre-receive hooks for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForOrgAsync(String org, Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<OrgPreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForOrgValidateBeforeCall(org, perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OrgPreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPreReceiveHooksForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoCall(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminListPreReceiveHooksForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminListPreReceiveHooksForRepo(Async)");
        }

        return enterpriseAdminListPreReceiveHooksForRepoCall(owner, repo, perPage, page, direction, sort, _callback);

    }

    /**
     * List pre-receive hooks for a repository
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return List&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public List<RepositoryPreReceiveHook> enterpriseAdminListPreReceiveHooksForRepo(String owner, String repo, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        ApiResponse<List<RepositoryPreReceiveHook>> localVarResp = enterpriseAdminListPreReceiveHooksForRepoWithHttpInfo(owner, repo, perPage, page, direction, sort);
        return localVarResp.getData();
    }

    /**
     * List pre-receive hooks for a repository
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @return ApiResponse&lt;List&lt;RepositoryPreReceiveHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public ApiResponse<List<RepositoryPreReceiveHook>> enterpriseAdminListPreReceiveHooksForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page, String direction, String sort) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(owner, repo, perPage, page, direction, sort, null);
        Type localVarReturnType = new TypeToken<List<RepositoryPreReceiveHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pre-receive hooks for a repository (asynchronously)
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-pre-receive-hooks-for-a-repository">List pre-receive hooks for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPreReceiveHooksForRepoAsync(String owner, String repo, Integer perPage, Integer page, String direction, String sort, final ApiCallback<List<RepositoryPreReceiveHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPreReceiveHooksForRepoValidateBeforeCall(owner, repo, perPage, page, direction, sort, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryPreReceiveHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListPublicKeys
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPublicKeysCall(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListPublicKeysValidateBeforeCall(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminListPublicKeysCall(perPage, page, direction, sort, since, _callback);

    }

    /**
     * List public keys
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @return List&lt;PublicKeyFull&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public List<PublicKeyFull> enterpriseAdminListPublicKeys(Integer perPage, Integer page, String direction, String sort, String since) throws ApiException {
        ApiResponse<List<PublicKeyFull>> localVarResp = enterpriseAdminListPublicKeysWithHttpInfo(perPage, page, direction, sort, since);
        return localVarResp.getData();
    }

    /**
     * List public keys
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @return ApiResponse&lt;List&lt;PublicKeyFull&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public ApiResponse<List<PublicKeyFull>> enterpriseAdminListPublicKeysWithHttpInfo(Integer perPage, Integer page, String direction, String sort, String since) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListPublicKeysValidateBeforeCall(perPage, page, direction, sort, since, null);
        Type localVarReturnType = new TypeToken<List<PublicKeyFull>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public keys (asynchronously)
     * 
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param direction The direction to sort the results by. (optional, default to desc)
     * @param sort  (optional, default to created)
     * @param since Only show public keys accessed after the given time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#list-public-keys">List public keys Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListPublicKeysAsync(Integer perPage, Integer page, String direction, String sort, String since, final ApiCallback<List<PublicKeyFull>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListPublicKeysValidateBeforeCall(perPage, page, direction, sort, since, _callback);
        Type localVarReturnType = new TypeToken<List<PublicKeyFull>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListRunnerApplicationsForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-runner-applications-for-an-enterprise">List runner applications for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListRunnerApplicationsForEnterpriseCall(String enterprise, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/downloads"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListRunnerApplicationsForEnterpriseValidateBeforeCall(String enterprise, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListRunnerApplicationsForEnterprise(Async)");
        }

        return enterpriseAdminListRunnerApplicationsForEnterpriseCall(enterprise, _callback);

    }

    /**
     * List runner applications for an enterprise
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return List&lt;RunnerApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-runner-applications-for-an-enterprise">List runner applications for an enterprise Documentation</a>
     */
    public List<RunnerApplication> enterpriseAdminListRunnerApplicationsForEnterprise(String enterprise) throws ApiException {
        ApiResponse<List<RunnerApplication>> localVarResp = enterpriseAdminListRunnerApplicationsForEnterpriseWithHttpInfo(enterprise);
        return localVarResp.getData();
    }

    /**
     * List runner applications for an enterprise
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @return ApiResponse&lt;List&lt;RunnerApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-runner-applications-for-an-enterprise">List runner applications for an enterprise Documentation</a>
     */
    public ApiResponse<List<RunnerApplication>> enterpriseAdminListRunnerApplicationsForEnterpriseWithHttpInfo(String enterprise) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListRunnerApplicationsForEnterpriseValidateBeforeCall(enterprise, null);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runner applications for an enterprise (asynchronously)
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-runner-applications-for-an-enterprise">List runner applications for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListRunnerApplicationsForEnterpriseAsync(String enterprise, final ApiCallback<List<RunnerApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListRunnerApplicationsForEnterpriseValidateBeforeCall(enterprise, _callback);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise">List selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/organizations"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(Async)");
        }

        return enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseCall(enterprise, perPage, page, _callback);

    }

    /**
     * List selected organizations enabled for GitHub Actions in an enterprise
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise">List selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(String enterprise, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> localVarResp = enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseWithHttpInfo(enterprise, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List selected organizations enabled for GitHub Actions in an enterprise
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise">List selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseWithHttpInfo(String enterprise, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(enterprise, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected organizations enabled for GitHub Actions in an enterprise (asynchronously)
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise">List selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseAsync(String enterprise, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(enterprise, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListSelfHostedRunnerGroupsForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise">List self-hosted runner groups for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseValidateBeforeCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(Async)");
        }

        return enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseCall(enterprise, perPage, page, _callback);

    }

    /**
     * List self-hosted runner groups for an enterprise
     * Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise">List self-hosted runner groups for an enterprise Documentation</a>
     */
    public EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(String enterprise, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response> localVarResp = enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseWithHttpInfo(enterprise, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runner groups for an enterprise
     * Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise">List self-hosted runner groups for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response> enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseWithHttpInfo(String enterprise, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseValidateBeforeCall(enterprise, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runner groups for an enterprise (asynchronously)
     * Lists all self-hosted runner groups for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise">List self-hosted runner groups for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseAsync(String enterprise, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseValidateBeforeCall(enterprise, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListSelfHostedRunnersForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-for-an-enterprise">List self-hosted runners for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnersForEnterpriseCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListSelfHostedRunnersForEnterpriseValidateBeforeCall(String enterprise, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListSelfHostedRunnersForEnterprise(Async)");
        }

        return enterpriseAdminListSelfHostedRunnersForEnterpriseCall(enterprise, perPage, page, _callback);

    }

    /**
     * List self-hosted runners for an enterprise
     * Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelfHostedRunnersForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-for-an-enterprise">List self-hosted runners for an enterprise Documentation</a>
     */
    public EnterpriseAdminListSelfHostedRunnersForEnterprise200Response enterpriseAdminListSelfHostedRunnersForEnterprise(String enterprise, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelfHostedRunnersForEnterprise200Response> localVarResp = enterpriseAdminListSelfHostedRunnersForEnterpriseWithHttpInfo(enterprise, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners for an enterprise
     * Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelfHostedRunnersForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-for-an-enterprise">List self-hosted runners for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelfHostedRunnersForEnterprise200Response> enterpriseAdminListSelfHostedRunnersForEnterpriseWithHttpInfo(String enterprise, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnersForEnterpriseValidateBeforeCall(enterprise, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners for an enterprise (asynchronously)
     * Lists all self-hosted runners configured for an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-for-an-enterprise">List self-hosted runners for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnersForEnterpriseAsync(String enterprise, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelfHostedRunnersForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnersForEnterpriseValidateBeforeCall(enterprise, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminListSelfHostedRunnersInGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise">List self-hosted runners in a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(Async)");
        }

        return enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseCall(enterprise, runnerGroupId, perPage, page, _callback);

    }

    /**
     * List self-hosted runners in a group for an enterprise
     * Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise">List self-hosted runners in a group for an enterprise Documentation</a>
     */
    public EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(String enterprise, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> localVarResp = enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners in a group for an enterprise
     * Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise">List self-hosted runners in a group for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners in a group for an enterprise (asynchronously)
     * Lists the self-hosted runners that are in a specific enterprise group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise">List self-hosted runners in a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminListSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminPingGlobalWebhook
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPingGlobalWebhookCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}/pings"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminPingGlobalWebhookValidateBeforeCall(Integer hookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminPingGlobalWebhook(Async)");
        }

        return enterpriseAdminPingGlobalWebhookCall(hookId, _callback);

    }

    /**
     * Ping a global webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the webhook.
     * @param hookId The unique identifier of the hook. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public void enterpriseAdminPingGlobalWebhook(Integer hookId) throws ApiException {
        enterpriseAdminPingGlobalWebhookWithHttpInfo(hookId);
    }

    /**
     * Ping a global webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the webhook.
     * @param hookId The unique identifier of the hook. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminPingGlobalWebhookWithHttpInfo(Integer hookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminPingGlobalWebhookValidateBeforeCall(hookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Ping a global webhook (asynchronously)
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@3.4/webhooks/#ping-event) to be sent to the webhook.
     * @param hookId The unique identifier of the hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#ping-a-global-webhook">Ping a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPingGlobalWebhookAsync(Integer hookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminPingGlobalWebhookValidateBeforeCall(hookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminPromoteUserToBeSiteAdministrator
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/site_admin"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminPromoteUserToBeSiteAdministrator(Async)");
        }

        return enterpriseAdminPromoteUserToBeSiteAdministratorCall(username, _callback);

    }

    /**
     * Promote a user to be a site administrator
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public void enterpriseAdminPromoteUserToBeSiteAdministrator(String username) throws ApiException {
        enterpriseAdminPromoteUserToBeSiteAdministratorWithHttpInfo(username);
    }

    /**
     * Promote a user to be a site administrator
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminPromoteUserToBeSiteAdministratorWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Promote a user to be a site administrator (asynchronously)
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#promote-a-user-to-be-a-site-administrator">Promote a user to be a site administrator Documentation</a>
     */
    public okhttp3.Call enterpriseAdminPromoteUserToBeSiteAdministratorAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminPromoteUserToBeSiteAdministratorValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise">Remove all custom labels from a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, _callback);

    }

    /**
     * Remove all custom labels from a self-hosted runner for an enterprise
     * Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise">Remove all custom labels from a self-hosted runner for an enterprise Documentation</a>
     */
    public EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId) throws ApiException {
        ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> localVarResp = enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId);
        return localVarResp.getData();
    }

    /**
     * Remove all custom labels from a self-hosted runner for an enterprise
     * Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise">Remove all custom labels from a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove all custom labels from a self-hosted runner for an enterprise (asynchronously)
     * Remove all custom labels from a self-hosted runner configured in an enterprise. Returns the remaining read-only labels from the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise">Remove all custom labels from a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, final ApiCallback<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveAnnouncement
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#remove-the-global-announcement-banner">Remove the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAnnouncementCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprise/announcement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveAnnouncementValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminRemoveAnnouncementCall(_callback);

    }

    /**
     * Remove the global announcement banner
     * Removes the global announcement banner in your enterprise.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#remove-the-global-announcement-banner">Remove the global announcement banner Documentation</a>
     */
    public void enterpriseAdminRemoveAnnouncement() throws ApiException {
        enterpriseAdminRemoveAnnouncementWithHttpInfo();
    }

    /**
     * Remove the global announcement banner
     * Removes the global announcement banner in your enterprise.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#remove-the-global-announcement-banner">Remove the global announcement banner Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminRemoveAnnouncementWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveAnnouncementValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the global announcement banner (asynchronously)
     * Removes the global announcement banner in your enterprise.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#remove-the-global-announcement-banner">Remove the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAnnouncementAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveAnnouncementValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveAuthorizedSshKey
     * @param authorizedKey The public SSH key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings/authorized-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizedKey != null) {
            localVarFormParams.put("authorized_key", authorizedKey);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(String authorizedKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizedKey' is set
        if (authorizedKey == null) {
            throw new ApiException("Missing the required parameter 'authorizedKey' when calling enterpriseAdminRemoveAuthorizedSshKey(Async)");
        }

        return enterpriseAdminRemoveAuthorizedSshKeyCall(authorizedKey, _callback);

    }

    /**
     * Remove an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return List&lt;SshKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public List<SshKey> enterpriseAdminRemoveAuthorizedSshKey(String authorizedKey) throws ApiException {
        ApiResponse<List<SshKey>> localVarResp = enterpriseAdminRemoveAuthorizedSshKeyWithHttpInfo(authorizedKey);
        return localVarResp.getData();
    }

    /**
     * Remove an authorized SSH key
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @return ApiResponse&lt;List&lt;SshKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public ApiResponse<List<SshKey>> enterpriseAdminRemoveAuthorizedSshKeyWithHttpInfo(String authorizedKey) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(authorizedKey, null);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an authorized SSH key (asynchronously)
     * **Note:** The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param authorizedKey The public SSH key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-an-authorized-ssh-key">Remove an authorized SSH key Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveAuthorizedSshKeyAsync(String authorizedKey, final ApiCallback<List<SshKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveAuthorizedSshKeyValidateBeforeCall(authorizedKey, _callback);
        Type localVarReturnType = new TypeToken<List<SshKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise">Remove a custom label from a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, name, _callback);

    }

    /**
     * Remove a custom label from a self-hosted runner for an enterprise
     * Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise">Remove a custom label from a self-hosted runner for an enterprise Documentation</a>
     */
    public EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId, String name) throws ApiException {
        ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> localVarResp = enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId, name);
        return localVarResp.getData();
    }

    /**
     * Remove a custom label from a self-hosted runner for an enterprise
     * Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @return ApiResponse&lt;EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise">Remove a custom label from a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId, String name) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, name, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a custom label from a self-hosted runner for an enterprise (asynchronously)
     * Remove a custom label from a self-hosted runner configured in an enterprise. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param name The name of a self-hosted runner&#39;s custom label. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise">Remove a custom label from a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, String name, final ApiCallback<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, name, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Remove organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "org_id" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        return enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(enterprise, runnerGroupId, orgId, _callback);

    }

    /**
     * Remove organization access to a self-hosted runner group in an enterprise
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Remove organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public void enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(String enterprise, Integer runnerGroupId, Integer orgId) throws ApiException {
        enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(enterprise, runnerGroupId, orgId);
    }

    /**
     * Remove organization access to a self-hosted runner group in an enterprise
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Remove organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer orgId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove organization access to a self-hosted runner group in an enterprise (asynchronously)
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param orgId The unique identifier of the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Remove organization access to a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemovePreReceiveHookEnforcementForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(String org, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg(Async)");
        }

        return enterpriseAdminRemovePreReceiveHookEnforcementForOrgCall(org, preReceiveHookId, _callback);

    }

    /**
     * Remove pre-receive hook enforcement for an organization
     * Removes any overrides for this hook at the org level for this org.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminRemovePreReceiveHookEnforcementForOrg(String org, Integer preReceiveHookId) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithHttpInfo(org, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Remove pre-receive hook enforcement for an organization
     * Removes any overrides for this hook at the org level for this org.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminRemovePreReceiveHookEnforcementForOrgWithHttpInfo(String org, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove pre-receive hook enforcement for an organization (asynchronously)
     * Removes any overrides for this hook at the org level for this org.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-an-organization">Remove pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForOrgAsync(String org, Integer preReceiveHookId, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemovePreReceiveHookEnforcementForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo(Async)");
        }

        return enterpriseAdminRemovePreReceiveHookEnforcementForRepoCall(owner, repo, preReceiveHookId, _callback);

    }

    /**
     * Remove pre-receive hook enforcement for a repository
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminRemovePreReceiveHookEnforcementForRepo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithHttpInfo(owner, repo, preReceiveHookId);
        return localVarResp.getData();
    }

    /**
     * Remove pre-receive hook enforcement for a repository
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminRemovePreReceiveHookEnforcementForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove pre-receive hook enforcement for a repository (asynchronously)
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Responds with effective values inherited from owner and/or global level. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#remove-pre-receive-hook-enforcement-for-a-repository">Remove pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemovePreReceiveHookEnforcementForRepoAsync(String owner, String repo, Integer preReceiveHookId, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemovePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise">Remove a self-hosted runner from a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(Async)");
        }

        return enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseCall(enterprise, runnerGroupId, runnerId, _callback);

    }

    /**
     * Remove a self-hosted runner from a group for an enterprise
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise">Remove a self-hosted runner from a group for an enterprise Documentation</a>
     */
    public void enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(String enterprise, Integer runnerGroupId, Integer runnerId) throws ApiException {
        enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId, runnerId);
    }

    /**
     * Remove a self-hosted runner from a group for an enterprise
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise">Remove a self-hosted runner from a group for an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a self-hosted runner from a group for an enterprise (asynchronously)
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise">Remove a self-hosted runner from a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetAllowedActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param selectedActions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-allowed-actions-for-an-enterprise">Set allowed actions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetAllowedActionsEnterpriseCall(String enterprise, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedActions;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/selected-actions"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetAllowedActionsEnterpriseValidateBeforeCall(String enterprise, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetAllowedActionsEnterprise(Async)");
        }

        // verify the required parameter 'selectedActions' is set
        if (selectedActions == null) {
            throw new ApiException("Missing the required parameter 'selectedActions' when calling enterpriseAdminSetAllowedActionsEnterprise(Async)");
        }

        return enterpriseAdminSetAllowedActionsEnterpriseCall(enterprise, selectedActions, _callback);

    }

    /**
     * Set allowed actions for an enterprise
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param selectedActions  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-allowed-actions-for-an-enterprise">Set allowed actions for an enterprise Documentation</a>
     */
    public void enterpriseAdminSetAllowedActionsEnterprise(String enterprise, SelectedActions selectedActions) throws ApiException {
        enterpriseAdminSetAllowedActionsEnterpriseWithHttpInfo(enterprise, selectedActions);
    }

    /**
     * Set allowed actions for an enterprise
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param selectedActions  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-allowed-actions-for-an-enterprise">Set allowed actions for an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetAllowedActionsEnterpriseWithHttpInfo(String enterprise, SelectedActions selectedActions) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetAllowedActionsEnterpriseValidateBeforeCall(enterprise, selectedActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set allowed actions for an enterprise (asynchronously)
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param selectedActions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-allowed-actions-for-an-enterprise">Set allowed actions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetAllowedActionsEnterpriseAsync(String enterprise, SelectedActions selectedActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetAllowedActionsEnterpriseValidateBeforeCall(enterprise, selectedActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetAnnouncement
     * @param announcement  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#set-the-global-announcement-banner">Set the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetAnnouncementCall(Announcement announcement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = announcement;

        // create path and map variables
        String localVarPath = "/enterprise/announcement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetAnnouncementValidateBeforeCall(Announcement announcement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'announcement' is set
        if (announcement == null) {
            throw new ApiException("Missing the required parameter 'announcement' when calling enterpriseAdminSetAnnouncement(Async)");
        }

        return enterpriseAdminSetAnnouncementCall(announcement, _callback);

    }

    /**
     * Set the global announcement banner
     * Sets the message and expiration time for the global announcement banner in your enterprise.
     * @param announcement  (required)
     * @return Announcement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#set-the-global-announcement-banner">Set the global announcement banner Documentation</a>
     */
    public Announcement enterpriseAdminSetAnnouncement(Announcement announcement) throws ApiException {
        ApiResponse<Announcement> localVarResp = enterpriseAdminSetAnnouncementWithHttpInfo(announcement);
        return localVarResp.getData();
    }

    /**
     * Set the global announcement banner
     * Sets the message and expiration time for the global announcement banner in your enterprise.
     * @param announcement  (required)
     * @return ApiResponse&lt;Announcement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#set-the-global-announcement-banner">Set the global announcement banner Documentation</a>
     */
    public ApiResponse<Announcement> enterpriseAdminSetAnnouncementWithHttpInfo(Announcement announcement) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetAnnouncementValidateBeforeCall(announcement, null);
        Type localVarReturnType = new TypeToken<Announcement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the global announcement banner (asynchronously)
     * Sets the message and expiration time for the global announcement banner in your enterprise.
     * @param announcement  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/enterprise-admin/announcement#set-the-global-announcement-banner">Set the global announcement banner Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetAnnouncementAsync(Announcement announcement, final ApiCallback<Announcement> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetAnnouncementValidateBeforeCall(announcement, _callback);
        Type localVarReturnType = new TypeToken<Announcement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise">Set custom labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseCall(String enterprise, Integer runnerId, EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(String enterprise, Integer runnerId, EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest' is set
        if (enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest' when calling enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise(Async)");
        }

        return enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseCall(enterprise, runnerId, enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, _callback);

    }

    /**
     * Set custom labels for a self-hosted runner for an enterprise
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest  (required)
     * @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise">Set custom labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise(String enterprise, Integer runnerId, EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) throws ApiException {
        ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> localVarResp = enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseWithHttpInfo(enterprise, runnerId, enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest);
        return localVarResp.getData();
    }

    /**
     * Set custom labels for a self-hosted runner for an enterprise
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise">Set custom labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseWithHttpInfo(String enterprise, Integer runnerId, EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set custom labels for a self-hosted runner for an enterprise (asynchronously)
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise">Set custom labels for a self-hosted runner for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseAsync(String enterprise, Integer runnerId, EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, final ApiCallback<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseValidateBeforeCall(enterprise, runnerId, enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetGithubActionsPermissionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-github-actions-permissions-for-an-enterprise">Set GitHub Actions permissions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetGithubActionsPermissionsEnterpriseCall(String enterprise, EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetGithubActionsPermissionsEnterpriseValidateBeforeCall(String enterprise, EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetGithubActionsPermissionsEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest' is set
        if (enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest' when calling enterpriseAdminSetGithubActionsPermissionsEnterprise(Async)");
        }

        return enterpriseAdminSetGithubActionsPermissionsEnterpriseCall(enterprise, enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, _callback);

    }

    /**
     * Set GitHub Actions permissions for an enterprise
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-github-actions-permissions-for-an-enterprise">Set GitHub Actions permissions for an enterprise Documentation</a>
     */
    public void enterpriseAdminSetGithubActionsPermissionsEnterprise(String enterprise, EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) throws ApiException {
        enterpriseAdminSetGithubActionsPermissionsEnterpriseWithHttpInfo(enterprise, enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest);
    }

    /**
     * Set GitHub Actions permissions for an enterprise
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-github-actions-permissions-for-an-enterprise">Set GitHub Actions permissions for an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetGithubActionsPermissionsEnterpriseWithHttpInfo(String enterprise, EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetGithubActionsPermissionsEnterpriseValidateBeforeCall(enterprise, enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set GitHub Actions permissions for an enterprise (asynchronously)
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-github-actions-permissions-for-an-enterprise">Set GitHub Actions permissions for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetGithubActionsPermissionsEnterpriseAsync(String enterprise, EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetGithubActionsPermissionsEnterpriseValidateBeforeCall(enterprise, enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Set organization access for a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(String enterprise, Integer runnerGroupId, EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest' is set
        if (enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest' when calling enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(Async)");
        }

        return enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseCall(enterprise, runnerGroupId, enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, _callback);

    }

    /**
     * Set organization access for a self-hosted runner group in an enterprise
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Set organization access for a self-hosted runner group in an enterprise Documentation</a>
     */
    public void enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(String enterprise, Integer runnerGroupId, EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) throws ApiException {
        enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(enterprise, runnerGroupId, enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest);
    }

    /**
     * Set organization access for a self-hosted runner group in an enterprise
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Set organization access for a self-hosted runner group in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set organization access for a self-hosted runner group in an enterprise (asynchronously)
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise">Set organization access for a self-hosted runner group in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseAsync(String enterprise, Integer runnerGroupId, EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise">Set selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseCall(String enterprise, EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/permissions/organizations"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(String enterprise, EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest' is set
        if (enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest' when calling enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(Async)");
        }

        return enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseCall(enterprise, enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, _callback);

    }

    /**
     * Set selected organizations enabled for GitHub Actions in an enterprise
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise">Set selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public void enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(String enterprise, EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) throws ApiException {
        enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseWithHttpInfo(enterprise, enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest);
    }

    /**
     * Set selected organizations enabled for GitHub Actions in an enterprise
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise">Set selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseWithHttpInfo(String enterprise, EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(enterprise, enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected organizations enabled for GitHub Actions in an enterprise (asynchronously)
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for &#x60;enabled_organizations&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\&quot;  You must authenticate using an access token with the &#x60;admin:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise">Set selected organizations enabled for GitHub Actions in an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseAsync(String enterprise, EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseValidateBeforeCall(enterprise, enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise">Set self-hosted runners in a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' is set
        if (enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' when calling enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(Async)");
        }

        return enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseCall(enterprise, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, _callback);

    }

    /**
     * Set self-hosted runners in a group for an enterprise
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise">Set self-hosted runners in a group for an enterprise Documentation</a>
     */
    public void enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(String enterprise, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) throws ApiException {
        enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest);
    }

    /**
     * Set self-hosted runners in a group for an enterprise
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise">Set self-hosted runners in a group for an enterprise Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set self-hosted runners in a group for an enterprise (asynchronously)
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise">Set self-hosted runners in a group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSetSettings
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSettingsCall(String settings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (settings != null) {
            localVarFormParams.put("settings", settings);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSetSettingsValidateBeforeCall(String settings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling enterpriseAdminSetSettings(Async)");
        }

        return enterpriseAdminSetSettingsCall(settings, _callback);

    }

    /**
     * Set settings
     * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings).  **Notes:**  - The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode). - You cannot set the management console password with the Enterprise administration API. Use the &#x60;ghe-set-password&#x60; utility to change the management console password. For more information, see \&quot;[Command-line utilities](https://docs.github.com/enterprise-server@3.4/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password).\&quot;
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public void enterpriseAdminSetSettings(String settings) throws ApiException {
        enterpriseAdminSetSettingsWithHttpInfo(settings);
    }

    /**
     * Set settings
     * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings).  **Notes:**  - The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode). - You cannot set the management console password with the Enterprise administration API. Use the &#x60;ghe-set-password&#x60; utility to change the management console password. For more information, see \&quot;[Command-line utilities](https://docs.github.com/enterprise-server@3.4/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password).\&quot;
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSetSettingsWithHttpInfo(String settings) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSetSettingsValidateBeforeCall(settings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set settings (asynchronously)
     * Applies settings on your instance. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings).  **Notes:**  - The request body for this operation must be submitted as &#x60;application/x-www-form-urlencoded&#x60; data. You can submit a parameter value as a string, or you can use a tool such as &#x60;curl&#x60; to submit a parameter value as the contents of a text file. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#--data-urlencode). - You cannot set the management console password with the Enterprise administration API. Use the &#x60;ghe-set-password&#x60; utility to change the management console password. For more information, see \&quot;[Command-line utilities](https://docs.github.com/enterprise-server@3.4/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password).\&quot;
     * @param settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#get-settings). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#set-settings">Set settings Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSetSettingsAsync(String settings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSetSettingsValidateBeforeCall(settings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminStartConfigurationProcess
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartConfigurationProcessCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/configure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminStartConfigurationProcessValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return enterpriseAdminStartConfigurationProcessCall(_callback);

    }

    /**
     * Start a configuration process
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public void enterpriseAdminStartConfigurationProcess() throws ApiException {
        enterpriseAdminStartConfigurationProcessWithHttpInfo();
    }

    /**
     * Start a configuration process
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminStartConfigurationProcessWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminStartConfigurationProcessValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a configuration process (asynchronously)
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-configuration-process">Start a configuration process Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartConfigurationProcessAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminStartConfigurationProcessValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminStartPreReceiveEnvironmentDownload
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(Integer preReceiveEnvironmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminStartPreReceiveEnvironmentDownload(Async)");
        }

        return enterpriseAdminStartPreReceiveEnvironmentDownloadCall(preReceiveEnvironmentId, _callback);

    }

    /**
     * Start a pre-receive environment download
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return PreReceiveEnvironmentDownloadStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public PreReceiveEnvironmentDownloadStatus enterpriseAdminStartPreReceiveEnvironmentDownload(Integer preReceiveEnvironmentId) throws ApiException {
        ApiResponse<PreReceiveEnvironmentDownloadStatus> localVarResp = enterpriseAdminStartPreReceiveEnvironmentDownloadWithHttpInfo(preReceiveEnvironmentId);
        return localVarResp.getData();
    }

    /**
     * Start a pre-receive environment download
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @return ApiResponse&lt;PreReceiveEnvironmentDownloadStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironmentDownloadStatus> enterpriseAdminStartPreReceiveEnvironmentDownloadWithHttpInfo(Integer preReceiveEnvironmentId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(preReceiveEnvironmentId, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a pre-receive environment download (asynchronously)
     * Triggers a new download of the environment tarball from the environment&#39;s &#x60;image_url&#x60;. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a &#x60;422 Unprocessable Entity&#x60; response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#start-a-pre-receive-environment-download">Start a pre-receive environment download Documentation</a>
     */
    public okhttp3.Call enterpriseAdminStartPreReceiveEnvironmentDownloadAsync(Integer preReceiveEnvironmentId, final ApiCallback<PreReceiveEnvironmentDownloadStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminStartPreReceiveEnvironmentDownloadValidateBeforeCall(preReceiveEnvironmentId, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironmentDownloadStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSuspendUser
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSuspendUserCall(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSuspendUserRequest;

        // create path and map variables
        String localVarPath = "/users/{username}/suspended"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSuspendUserValidateBeforeCall(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminSuspendUser(Async)");
        }

        return enterpriseAdminSuspendUserCall(username, enterpriseAdminSuspendUserRequest, _callback);

    }

    /**
     * Suspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public void enterpriseAdminSuspendUser(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest) throws ApiException {
        enterpriseAdminSuspendUserWithHttpInfo(username, enterpriseAdminSuspendUserRequest);
    }

    /**
     * Suspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminSuspendUserWithHttpInfo(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSuspendUserValidateBeforeCall(username, enterpriseAdminSuspendUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suspend a user (asynchronously)
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a &#x60;403&#x60; response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminSuspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#suspend-a-user">Suspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSuspendUserAsync(String username, EnterpriseAdminSuspendUserRequest enterpriseAdminSuspendUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSuspendUserValidateBeforeCall(username, enterpriseAdminSuspendUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSyncLdapMappingForTeam
     * @param teamId The unique identifier of the team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForTeamCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/ldap/teams/{team_id}/sync"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(Integer teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling enterpriseAdminSyncLdapMappingForTeam(Async)");
        }

        return enterpriseAdminSyncLdapMappingForTeamCall(teamId, _callback);

    }

    /**
     * Sync LDAP mapping for a team
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId The unique identifier of the team. (required)
     * @return EnterpriseAdminSyncLdapMappingForTeam201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public EnterpriseAdminSyncLdapMappingForTeam201Response enterpriseAdminSyncLdapMappingForTeam(Integer teamId) throws ApiException {
        ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> localVarResp = enterpriseAdminSyncLdapMappingForTeamWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Sync LDAP mapping for a team
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId The unique identifier of the team. (required)
     * @return ApiResponse&lt;EnterpriseAdminSyncLdapMappingForTeam201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> enterpriseAdminSyncLdapMappingForTeamWithHttpInfo(Integer teamId) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync LDAP mapping for a team (asynchronously)
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param teamId The unique identifier of the team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-team">Sync LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForTeamAsync(Integer teamId, final ApiCallback<EnterpriseAdminSyncLdapMappingForTeam201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForTeamValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminSyncLdapMappingForUser
     * @param username The handle for the GitHub user account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/ldap/users/{username}/sync"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminSyncLdapMappingForUser(Async)");
        }

        return enterpriseAdminSyncLdapMappingForUserCall(username, _callback);

    }

    /**
     * Sync LDAP mapping for a user
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username The handle for the GitHub user account. (required)
     * @return EnterpriseAdminSyncLdapMappingForTeam201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public EnterpriseAdminSyncLdapMappingForTeam201Response enterpriseAdminSyncLdapMappingForUser(String username) throws ApiException {
        ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> localVarResp = enterpriseAdminSyncLdapMappingForUserWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Sync LDAP mapping for a user
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username The handle for the GitHub user account. (required)
     * @return ApiResponse&lt;EnterpriseAdminSyncLdapMappingForTeam201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public ApiResponse<EnterpriseAdminSyncLdapMappingForTeam201Response> enterpriseAdminSyncLdapMappingForUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync LDAP mapping for a user (asynchronously)
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a &#x60;201&#x60; is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param username The handle for the GitHub user account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#sync-ldap-mapping-for-a-user">Sync LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminSyncLdapMappingForUserAsync(String username, final ApiCallback<EnterpriseAdminSyncLdapMappingForTeam201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminSyncLdapMappingForUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminSyncLdapMappingForTeam201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUnsuspendUser
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUnsuspendUserCall(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUnsuspendUserRequest;

        // create path and map variables
        String localVarPath = "/users/{username}/suspended"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUnsuspendUserValidateBeforeCall(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUnsuspendUser(Async)");
        }

        return enterpriseAdminUnsuspendUserCall(username, enterpriseAdminUnsuspendUserRequest, _callback);

    }

    /**
     * Unsuspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public void enterpriseAdminUnsuspendUser(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest) throws ApiException {
        enterpriseAdminUnsuspendUserWithHttpInfo(username, enterpriseAdminUnsuspendUserRequest);
    }

    /**
     * Unsuspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminUnsuspendUserWithHttpInfo(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUnsuspendUserValidateBeforeCall(username, enterpriseAdminUnsuspendUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsuspend a user (asynchronously)
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap), this API is disabled and will return a &#x60;403&#x60; response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUnsuspendUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#unsuspend-a-user">Unsuspend a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUnsuspendUserAsync(String username, EnterpriseAdminUnsuspendUserRequest enterpriseAdminUnsuspendUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUnsuspendUserValidateBeforeCall(username, enterpriseAdminUnsuspendUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateGlobalWebhook
     * @param hookId The unique identifier of the hook. (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateGlobalWebhookCall(Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateGlobalWebhookRequest;

        // create path and map variables
        String localVarPath = "/admin/hooks/{hook_id}"
            .replace("{" + "hook_id" + "}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling enterpriseAdminUpdateGlobalWebhook(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateGlobalWebhookRequest' is set
        if (enterpriseAdminUpdateGlobalWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateGlobalWebhookRequest' when calling enterpriseAdminUpdateGlobalWebhook(Async)");
        }

        return enterpriseAdminUpdateGlobalWebhookCall(hookId, enterpriseAdminUpdateGlobalWebhookRequest, _callback);

    }

    /**
     * Update a global webhook
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param hookId The unique identifier of the hook. (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (required)
     * @return GlobalHook2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public GlobalHook2 enterpriseAdminUpdateGlobalWebhook(Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest) throws ApiException {
        ApiResponse<GlobalHook2> localVarResp = enterpriseAdminUpdateGlobalWebhookWithHttpInfo(hookId, enterpriseAdminUpdateGlobalWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Update a global webhook
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param hookId The unique identifier of the hook. (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (required)
     * @return ApiResponse&lt;GlobalHook2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public ApiResponse<GlobalHook2> enterpriseAdminUpdateGlobalWebhookWithHttpInfo(Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(hookId, enterpriseAdminUpdateGlobalWebhookRequest, null);
        Type localVarReturnType = new TypeToken<GlobalHook2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a global webhook (asynchronously)
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param hookId The unique identifier of the hook. (required)
     * @param enterpriseAdminUpdateGlobalWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-global-webhook">Update a global webhook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateGlobalWebhookAsync(Integer hookId, EnterpriseAdminUpdateGlobalWebhookRequest enterpriseAdminUpdateGlobalWebhookRequest, final ApiCallback<GlobalHook2> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateGlobalWebhookValidateBeforeCall(hookId, enterpriseAdminUpdateGlobalWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<GlobalHook2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateLdapMappingForTeam
     * @param teamId The unique identifier of the team. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamCall(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateLdapMappingForTeamRequest;

        // create path and map variables
        String localVarPath = "/admin/ldap/teams/{team_id}/mapping"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling enterpriseAdminUpdateLdapMappingForTeam(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateLdapMappingForTeamRequest' is set
        if (enterpriseAdminUpdateLdapMappingForTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateLdapMappingForTeamRequest' when calling enterpriseAdminUpdateLdapMappingForTeam(Async)");
        }

        return enterpriseAdminUpdateLdapMappingForTeamCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);

    }

    /**
     * Update LDAP mapping for a team
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
     * @param teamId The unique identifier of the team. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @return LdapMappingTeam
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public LdapMappingTeam enterpriseAdminUpdateLdapMappingForTeam(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        ApiResponse<LdapMappingTeam> localVarResp = enterpriseAdminUpdateLdapMappingForTeamWithHttpInfo(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Update LDAP mapping for a team
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
     * @param teamId The unique identifier of the team. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @return ApiResponse&lt;LdapMappingTeam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public ApiResponse<LdapMappingTeam> enterpriseAdminUpdateLdapMappingForTeamWithHttpInfo(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, null);
        Type localVarReturnType = new TypeToken<LdapMappingTeam>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update LDAP mapping for a team (asynchronously)
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise-server@3.4/admin/identity-and-access-management/using-ldap-for-enterprise-iam/using-ldap#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.4/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
     * @param teamId The unique identifier of the team. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team">Update LDAP mapping for a team Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForTeamAsync(Integer teamId, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback<LdapMappingTeam> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForTeamValidateBeforeCall(teamId, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapMappingTeam>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateLdapMappingForUser
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForUserCall(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateLdapMappingForTeamRequest;

        // create path and map variables
        String localVarPath = "/admin/ldap/users/{username}/mapping"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUpdateLdapMappingForUser(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateLdapMappingForTeamRequest' is set
        if (enterpriseAdminUpdateLdapMappingForTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateLdapMappingForTeamRequest' when calling enterpriseAdminUpdateLdapMappingForUser(Async)");
        }

        return enterpriseAdminUpdateLdapMappingForUserCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);

    }

    /**
     * Update LDAP mapping for a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @return LdapMappingUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public LdapMappingUser enterpriseAdminUpdateLdapMappingForUser(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        ApiResponse<LdapMappingUser> localVarResp = enterpriseAdminUpdateLdapMappingForUserWithHttpInfo(username, enterpriseAdminUpdateLdapMappingForTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Update LDAP mapping for a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @return ApiResponse&lt;LdapMappingUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public ApiResponse<LdapMappingUser> enterpriseAdminUpdateLdapMappingForUserWithHttpInfo(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, null);
        Type localVarReturnType = new TypeToken<LdapMappingUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update LDAP mapping for a user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateLdapMappingForTeamRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user">Update LDAP mapping for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateLdapMappingForUserAsync(String username, EnterpriseAdminUpdateLdapMappingForTeamRequest enterpriseAdminUpdateLdapMappingForTeamRequest, final ApiCallback<LdapMappingUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateLdapMappingForUserValidateBeforeCall(username, enterpriseAdminUpdateLdapMappingForTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapMappingUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateOrgName
     * @param org The organization name. The name is not case sensitive. (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateOrgNameCall(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateOrgNameRequest;

        // create path and map variables
        String localVarPath = "/admin/organizations/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateOrgNameValidateBeforeCall(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminUpdateOrgName(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateOrgNameRequest' is set
        if (enterpriseAdminUpdateOrgNameRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateOrgNameRequest' when calling enterpriseAdminUpdateOrgName(Async)");
        }

        return enterpriseAdminUpdateOrgNameCall(org, enterpriseAdminUpdateOrgNameRequest, _callback);

    }

    /**
     * Update an organization name
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response enterpriseAdminUpdateOrgName(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = enterpriseAdminUpdateOrgNameWithHttpInfo(org, enterpriseAdminUpdateOrgNameRequest);
        return localVarResp.getData();
    }

    /**
     * Update an organization name
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> enterpriseAdminUpdateOrgNameWithHttpInfo(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateOrgNameValidateBeforeCall(org, enterpriseAdminUpdateOrgNameRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an organization name (asynchronously)
     * 
     * @param org The organization name. The name is not case sensitive. (required)
     * @param enterpriseAdminUpdateOrgNameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-an-organization-name">Update an organization name Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateOrgNameAsync(String org, EnterpriseAdminUpdateOrgNameRequest enterpriseAdminUpdateOrgNameRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateOrgNameValidateBeforeCall(org, enterpriseAdminUpdateOrgNameRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveEnvironment
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentCall(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveEnvironmentRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-environments/{pre_receive_environment_id}"
            .replace("{" + "pre_receive_environment_id" + "}", localVarApiClient.escapeString(preReceiveEnvironmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveEnvironmentId' is set
        if (preReceiveEnvironmentId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminUpdatePreReceiveEnvironment(Async)");
        }

        return enterpriseAdminUpdatePreReceiveEnvironmentCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, _callback);

    }

    /**
     * Update a pre-receive environment
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @return PreReceiveEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public PreReceiveEnvironment enterpriseAdminUpdatePreReceiveEnvironment(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest) throws ApiException {
        ApiResponse<PreReceiveEnvironment> localVarResp = enterpriseAdminUpdatePreReceiveEnvironmentWithHttpInfo(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pre-receive environment
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @return ApiResponse&lt;PreReceiveEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public ApiResponse<PreReceiveEnvironment> enterpriseAdminUpdatePreReceiveEnvironmentWithHttpInfo(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pre-receive environment (asynchronously)
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a &#x60;422 Unprocessable Entity&#x60; response.
     * @param preReceiveEnvironmentId The unique identifier of the pre-receive environment. (required)
     * @param enterpriseAdminUpdatePreReceiveEnvironmentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Errors </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-environment">Update a pre-receive environment Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveEnvironmentAsync(Integer preReceiveEnvironmentId, EnterpriseAdminUpdatePreReceiveEnvironmentRequest enterpriseAdminUpdatePreReceiveEnvironmentRequest, final ApiCallback<PreReceiveEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveEnvironmentValidateBeforeCall(preReceiveEnvironmentId, enterpriseAdminUpdatePreReceiveEnvironmentRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHook
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookCall(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookRequest;

        // create path and map variables
        String localVarPath = "/admin/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHook(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, _callback);

    }

    /**
     * Update a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @return PreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public PreReceiveHook enterpriseAdminUpdatePreReceiveHook(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest) throws ApiException {
        ApiResponse<PreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookWithHttpInfo(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest);
        return localVarResp.getData();
    }

    /**
     * Update a pre-receive hook
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @return ApiResponse&lt;PreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public ApiResponse<PreReceiveHook> enterpriseAdminUpdatePreReceiveHookWithHttpInfo(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, null);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a pre-receive hook (asynchronously)
     * 
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-a-pre-receive-hook">Update a pre-receive hook Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookAsync(Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookRequest enterpriseAdminUpdatePreReceiveHookRequest, final ApiCallback<PreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookValidateBeforeCall(preReceiveHookId, enterpriseAdminUpdatePreReceiveHookRequest, _callback);
        Type localVarReturnType = new TypeToken<PreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHookEnforcementForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCall(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, _callback);

    }

    /**
     * Update pre-receive hook enforcement for an organization
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @return OrgPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public OrgPreReceiveHook enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest) throws ApiException {
        ApiResponse<OrgPreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithHttpInfo(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update pre-receive hook enforcement for an organization
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @return ApiResponse&lt;OrgPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public ApiResponse<OrgPreReceiveHook> enterpriseAdminUpdatePreReceiveHookEnforcementForOrgWithHttpInfo(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, null);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pre-receive hook enforcement for an organization (asynchronously)
     * For pre-receive hooks which are allowed to be configured at the org level, you can set &#x60;enforcement&#x60; and &#x60;allow_downstream_configuration&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-an-organization">Update pre-receive hook enforcement for an organization Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForOrgAsync(String org, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, final ApiCallback<OrgPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForOrgValidateBeforeCall(org, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<OrgPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdatePreReceiveHookEnforcementForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCall(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "pre_receive_hook_id" + "}", localVarApiClient.escapeString(preReceiveHookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        // verify the required parameter 'preReceiveHookId' is set
        if (preReceiveHookId == null) {
            throw new ApiException("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(Async)");
        }

        return enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, _callback);

    }

    /**
     * Update pre-receive hook enforcement for a repository
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @return RepositoryPreReceiveHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public RepositoryPreReceiveHook enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest) throws ApiException {
        ApiResponse<RepositoryPreReceiveHook> localVarResp = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithHttpInfo(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest);
        return localVarResp.getData();
    }

    /**
     * Update pre-receive hook enforcement for a repository
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @return ApiResponse&lt;RepositoryPreReceiveHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public ApiResponse<RepositoryPreReceiveHook> enterpriseAdminUpdatePreReceiveHookEnforcementForRepoWithHttpInfo(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, null);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pre-receive hook enforcement for a repository (asynchronously)
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set &#x60;enforcement&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param preReceiveHookId The unique identifier of the pre-receive hook. (required)
     * @param enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-pre-receive-hook-enforcement-for-a-repository">Update pre-receive hook enforcement for a repository Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdatePreReceiveHookEnforcementForRepoAsync(String owner, String repo, Integer preReceiveHookId, EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, final ApiCallback<RepositoryPreReceiveHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdatePreReceiveHookEnforcementForRepoValidateBeforeCall(owner, repo, preReceiveHookId, enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest, _callback);
        Type localVarReturnType = new TypeToken<RepositoryPreReceiveHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise">Update a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseCall(String enterprise, Integer runnerGroupId, EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "enterprise" + "}", localVarApiClient.escapeString(enterprise.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(String enterprise, Integer runnerGroupId, EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enterprise' is set
        if (enterprise == null) {
            throw new ApiException("Missing the required parameter 'enterprise' when calling enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(Async)");
        }

        return enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseCall(enterprise, runnerGroupId, enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, _callback);

    }

    /**
     * Update a self-hosted runner group for an enterprise
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest  (optional)
     * @return RunnerGroupsEnterprise
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise">Update a self-hosted runner group for an enterprise Documentation</a>
     */
    public RunnerGroupsEnterprise enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(String enterprise, Integer runnerGroupId, EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) throws ApiException {
        ApiResponse<RunnerGroupsEnterprise> localVarResp = enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseWithHttpInfo(enterprise, runnerGroupId, enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest);
        return localVarResp.getData();
    }

    /**
     * Update a self-hosted runner group for an enterprise
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest  (optional)
     * @return ApiResponse&lt;RunnerGroupsEnterprise&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise">Update a self-hosted runner group for an enterprise Documentation</a>
     */
    public ApiResponse<RunnerGroupsEnterprise> enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseWithHttpInfo(String enterprise, Integer runnerGroupId, EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a self-hosted runner group for an enterprise (asynchronously)
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an enterprise.  You must authenticate using an access token with the &#x60;manage_runners:enterprise&#x60; scope to use this endpoint.
     * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise">Update a self-hosted runner group for an enterprise Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseAsync(String enterprise, Integer runnerGroupId, EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, final ApiCallback<RunnerGroupsEnterprise> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseValidateBeforeCall(enterprise, runnerGroupId, enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsEnterprise>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpdateUsernameForUser
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateUsernameForUserCall(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminUpdateUsernameForUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpdateUsernameForUserValidateBeforeCall(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling enterpriseAdminUpdateUsernameForUser(Async)");
        }

        // verify the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' is set
        if (enterpriseAdminUpdateUsernameForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' when calling enterpriseAdminUpdateUsernameForUser(Async)");
        }

        return enterpriseAdminUpdateUsernameForUserCall(username, enterpriseAdminUpdateUsernameForUserRequest, _callback);

    }

    /**
     * Update the username for a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response enterpriseAdminUpdateUsernameForUser(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = enterpriseAdminUpdateUsernameForUserWithHttpInfo(username, enterpriseAdminUpdateUsernameForUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update the username for a user
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> enterpriseAdminUpdateUsernameForUserWithHttpInfo(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpdateUsernameForUserValidateBeforeCall(username, enterpriseAdminUpdateUsernameForUserRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the username for a user (asynchronously)
     * 
     * @param username The handle for the GitHub user account. (required)
     * @param enterpriseAdminUpdateUsernameForUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#update-the-username-for-a-user">Update the username for a user Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpdateUsernameForUserAsync(String username, EnterpriseAdminUpdateUsernameForUserRequest enterpriseAdminUpdateUsernameForUserRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpdateUsernameForUserValidateBeforeCall(username, enterpriseAdminUpdateUsernameForUserRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enterpriseAdminUpgradeLicense
     * @param license The content of your new _.ghl_ license file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpgradeLicenseCall(String license, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "{protocol}://{hostname}" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/setup/api/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarFormParams.put("license", license);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enterpriseAdminUpgradeLicenseValidateBeforeCall(String license, final ApiCallback _callback) throws ApiException {
        return enterpriseAdminUpgradeLicenseCall(license, _callback);

    }

    /**
     * Upgrade a license
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public void enterpriseAdminUpgradeLicense(String license) throws ApiException {
        enterpriseAdminUpgradeLicenseWithHttpInfo(license);
    }

    /**
     * Upgrade a license
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public ApiResponse<Void> enterpriseAdminUpgradeLicenseWithHttpInfo(String license) throws ApiException {
        okhttp3.Call localVarCall = enterpriseAdminUpgradeLicenseValidateBeforeCall(license, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upgrade a license (asynchronously)
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as &#x60;multipart/form-data&#x60; data. You can can reference the license file by prefixing the filename with the &#x60;@&#x60; symbol using &#x60;curl&#x60;. For more information, see the [&#x60;curl&#x60; documentation](https://curl.se/docs/manpage.html#-F).
     * @param license The content of your new _.ghl_ license file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/enterprise-admin#upgrade-a-license">Upgrade a license Documentation</a>
     */
    public okhttp3.Call enterpriseAdminUpgradeLicenseAsync(String license, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enterpriseAdminUpgradeLicenseValidateBeforeCall(license, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
