/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.ReactionsCreateForCommitCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueRequest;
import org.openapitools.client.model.ReactionsCreateForPullRequestReviewCommentRequest;
import org.openapitools.client.model.ReactionsCreateForReleaseRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionCommentInOrgRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionInOrgRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reactionsCreateForCommitComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForCommitCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForCommitCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForCommitComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForCommitCommentRequest' is set
        if (reactionsCreateForCommitCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForCommitCommentRequest' when calling reactionsCreateForCommitComment(Async)");
        }

        return reactionsCreateForCommitCommentCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, _callback);

    }

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public Reaction reactionsCreateForCommitComment(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForCommitCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForCommitCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a commit comment
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a commit comment (asynchronously)
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForCommitCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-commit-comment">Create reaction for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForCommitCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForCommitCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForIssue
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCall(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForIssueRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling reactionsCreateForIssue(Async)");
        }

        // verify the required parameter 'reactionsCreateForIssueRequest' is set
        if (reactionsCreateForIssueRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForIssueRequest' when calling reactionsCreateForIssue(Async)");
        }

        return reactionsCreateForIssueCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, _callback);

    }

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public Reaction reactionsCreateForIssue(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForIssueWithHttpInfo(owner, repo, issueNumber, reactionsCreateForIssueRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for an issue
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForIssueWithHttpInfo(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForIssueValidateBeforeCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for an issue (asynchronously)
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionsCreateForIssueRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue">Create reaction for an issue Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueAsync(String owner, String repo, Integer issueNumber, ReactionsCreateForIssueRequest reactionsCreateForIssueRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForIssueValidateBeforeCall(owner, repo, issueNumber, reactionsCreateForIssueRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForIssueComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForIssueCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForIssueCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForIssueComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForIssueCommentRequest' is set
        if (reactionsCreateForIssueCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForIssueCommentRequest' when calling reactionsCreateForIssueComment(Async)");
        }

        return reactionsCreateForIssueCommentCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, _callback);

    }

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public Reaction reactionsCreateForIssueComment(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForIssueCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForIssueCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for an issue comment
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForIssueCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for an issue comment (asynchronously)
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForIssueCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-an-issue-comment">Create reaction for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForIssueCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForIssueCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForPullRequestReviewComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForPullRequestReviewCommentCall(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForPullRequestReviewCommentRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForPullRequestReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' is set
        if (reactionsCreateForPullRequestReviewCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForPullRequestReviewCommentRequest' when calling reactionsCreateForPullRequestReviewComment(Async)");
        }

        return reactionsCreateForPullRequestReviewCommentCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, _callback);

    }

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public Reaction reactionsCreateForPullRequestReviewComment(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForPullRequestReviewCommentWithHttpInfo(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a pull request review comment
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForPullRequestReviewCommentWithHttpInfo(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a pull request review comment (asynchronously)
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionsCreateForPullRequestReviewCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment">Create reaction for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForPullRequestReviewCommentAsync(String owner, String repo, Integer commentId, ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForRelease
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionsCreateForReleaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-release">Create reaction for a release Documentation</a>
     */
    public okhttp3.Call reactionsCreateForReleaseCall(String owner, String repo, Integer releaseId, ReactionsCreateForReleaseRequest reactionsCreateForReleaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForReleaseRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, ReactionsCreateForReleaseRequest reactionsCreateForReleaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsCreateForRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsCreateForRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reactionsCreateForRelease(Async)");
        }

        // verify the required parameter 'reactionsCreateForReleaseRequest' is set
        if (reactionsCreateForReleaseRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForReleaseRequest' when calling reactionsCreateForRelease(Async)");
        }

        return reactionsCreateForReleaseCall(owner, repo, releaseId, reactionsCreateForReleaseRequest, _callback);

    }

    /**
     * Create reaction for a release
     * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionsCreateForReleaseRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-release">Create reaction for a release Documentation</a>
     */
    public Reaction reactionsCreateForRelease(String owner, String repo, Integer releaseId, ReactionsCreateForReleaseRequest reactionsCreateForReleaseRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForReleaseWithHttpInfo(owner, repo, releaseId, reactionsCreateForReleaseRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a release
     * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionsCreateForReleaseRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-release">Create reaction for a release Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForReleaseWithHttpInfo(String owner, String repo, Integer releaseId, ReactionsCreateForReleaseRequest reactionsCreateForReleaseRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForReleaseValidateBeforeCall(owner, repo, releaseId, reactionsCreateForReleaseRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a release (asynchronously)
     * Create a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionsCreateForReleaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reaction exists </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Reaction created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed, or the endpoint has been spammed. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-release">Create reaction for a release Documentation</a>
     */
    public okhttp3.Call reactionsCreateForReleaseAsync(String owner, String repo, Integer releaseId, ReactionsCreateForReleaseRequest reactionsCreateForReleaseRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForReleaseValidateBeforeCall(owner, repo, releaseId, reactionsCreateForReleaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussionCommentInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the reaction type has already been added to this team discussion comment </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' is set
        if (reactionsCreateForTeamDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' when calling reactionsCreateForTeamDiscussionCommentInOrg(Async)");
        }

        return reactionsCreateForTeamDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the reaction type has already been added to this team discussion comment </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public Reaction reactionsCreateForTeamDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion comment
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the reaction type has already been added to this team discussion comment </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion comment (asynchronously)
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response when the reaction type has already been added to this team discussion comment </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment">Create reaction for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussionCommentLegacy
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy">Create reaction for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionCommentInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsCreateForTeamDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' is set
        if (reactionsCreateForTeamDiscussionCommentInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionCommentInOrgRequest' when calling reactionsCreateForTeamDiscussionCommentLegacy(Async)");
        }

        return reactionsCreateForTeamDiscussionCommentLegacyCall(teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, _callback);

    }

    /**
     * Create reaction for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy">Create reaction for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public Reaction reactionsCreateForTeamDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy">Create reaction for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy">Create reaction for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsCreateForTeamDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, ReactionsCreateForTeamDiscussionCommentInOrgRequest reactionsCreateForTeamDiscussionCommentInOrgRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussionInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionInOrgCall(String org, String teamSlug, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsCreateForTeamDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsCreateForTeamDiscussionInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionInOrg(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' is set
        if (reactionsCreateForTeamDiscussionInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' when calling reactionsCreateForTeamDiscussionInOrg(Async)");
        }

        return reactionsCreateForTeamDiscussionInOrgCall(org, teamSlug, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, _callback);

    }

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public Reaction reactionsCreateForTeamDiscussionInOrg(String org, String teamSlug, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionInOrgWithHttpInfo(org, teamSlug, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion (asynchronously)
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion">Create reaction for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsCreateForTeamDiscussionInOrgAsync(String org, String teamSlug, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsCreateForTeamDiscussionLegacy
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy">Create reaction for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsCreateForTeamDiscussionLegacyCall(Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsCreateForTeamDiscussionInOrgRequest;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsCreateForTeamDiscussionLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsCreateForTeamDiscussionLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsCreateForTeamDiscussionLegacy(Async)");
        }

        // verify the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' is set
        if (reactionsCreateForTeamDiscussionInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsCreateForTeamDiscussionInOrgRequest' when calling reactionsCreateForTeamDiscussionLegacy(Async)");
        }

        return reactionsCreateForTeamDiscussionLegacyCall(teamId, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, _callback);

    }

    /**
     * Create reaction for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @return Reaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy">Create reaction for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public Reaction reactionsCreateForTeamDiscussionLegacy(Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest) throws ApiException {
        ApiResponse<Reaction> localVarResp = reactionsCreateForTeamDiscussionLegacyWithHttpInfo(teamId, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create reaction for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @return ApiResponse&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy">Create reaction for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Reaction> reactionsCreateForTeamDiscussionLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, null);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reaction for a team discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionsCreateForTeamDiscussionInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy">Create reaction for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsCreateForTeamDiscussionLegacyAsync(Integer teamId, Integer discussionNumber, ReactionsCreateForTeamDiscussionInOrgRequest reactionsCreateForTeamDiscussionInOrgRequest, final ApiCallback<Reaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsCreateForTeamDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, reactionsCreateForTeamDiscussionInOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<Reaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForCommitComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-commit-comment-reaction">Delete a commit comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForCommitCommentCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsDeleteForCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsDeleteForCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsDeleteForCommitComment(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForCommitComment(Async)");
        }

        return reactionsDeleteForCommitCommentCall(owner, repo, commentId, reactionId, _callback);

    }

    /**
     * Delete a commit comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-commit-comment-reaction">Delete a commit comment reaction Documentation</a>
     */
    public void reactionsDeleteForCommitComment(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        reactionsDeleteForCommitCommentWithHttpInfo(owner, repo, commentId, reactionId);
    }

    /**
     * Delete a commit comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-commit-comment-reaction">Delete a commit comment reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a commit comment reaction (asynchronously)
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-commit-comment-reaction">Delete a commit comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForCommitCommentAsync(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForCommitCommentValidateBeforeCall(owner, repo, commentId, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForIssue
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-reaction">Delete an issue reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForIssueCall(String owner, String repo, Integer issueNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsDeleteForIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsDeleteForIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling reactionsDeleteForIssue(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssue(Async)");
        }

        return reactionsDeleteForIssueCall(owner, repo, issueNumber, reactionId, _callback);

    }

    /**
     * Delete an issue reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-reaction">Delete an issue reaction Documentation</a>
     */
    public void reactionsDeleteForIssue(String owner, String repo, Integer issueNumber, Integer reactionId) throws ApiException {
        reactionsDeleteForIssueWithHttpInfo(owner, repo, issueNumber, reactionId);
    }

    /**
     * Delete an issue reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-reaction">Delete an issue reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForIssueWithHttpInfo(String owner, String repo, Integer issueNumber, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForIssueValidateBeforeCall(owner, repo, issueNumber, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue reaction (asynchronously)
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues/).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-reaction">Delete an issue reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForIssueAsync(String owner, String repo, Integer issueNumber, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForIssueValidateBeforeCall(owner, repo, issueNumber, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForIssueComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-comment-reaction">Delete an issue comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForIssueCommentCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForIssueCommentValidateBeforeCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsDeleteForIssueComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsDeleteForIssueComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsDeleteForIssueComment(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForIssueComment(Async)");
        }

        return reactionsDeleteForIssueCommentCall(owner, repo, commentId, reactionId, _callback);

    }

    /**
     * Delete an issue comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-comment-reaction">Delete an issue comment reaction Documentation</a>
     */
    public void reactionsDeleteForIssueComment(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        reactionsDeleteForIssueCommentWithHttpInfo(owner, repo, commentId, reactionId);
    }

    /**
     * Delete an issue comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-comment-reaction">Delete an issue comment reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForIssueCommentWithHttpInfo(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an issue comment reaction (asynchronously)
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-an-issue-comment-reaction">Delete an issue comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForIssueCommentAsync(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForIssueCommentValidateBeforeCall(owner, repo, commentId, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForPullRequestComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-pull-request-comment-reaction">Delete a pull request comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForPullRequestCommentCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForPullRequestCommentValidateBeforeCall(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsDeleteForPullRequestComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsDeleteForPullRequestComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsDeleteForPullRequestComment(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForPullRequestComment(Async)");
        }

        return reactionsDeleteForPullRequestCommentCall(owner, repo, commentId, reactionId, _callback);

    }

    /**
     * Delete a pull request comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-pull-request-comment-reaction">Delete a pull request comment reaction Documentation</a>
     */
    public void reactionsDeleteForPullRequestComment(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        reactionsDeleteForPullRequestCommentWithHttpInfo(owner, repo, commentId, reactionId);
    }

    /**
     * Delete a pull request comment reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-pull-request-comment-reaction">Delete a pull request comment reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForPullRequestCommentWithHttpInfo(String owner, String repo, Integer commentId, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForPullRequestCommentValidateBeforeCall(owner, repo, commentId, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pull request comment reaction (asynchronously)
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-a-pull-request-comment-reaction">Delete a pull request comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForPullRequestCommentAsync(String owner, String repo, Integer commentId, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForPullRequestCommentValidateBeforeCall(owner, repo, commentId, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForRelease
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-release-reaction">Delete a release reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForReleaseCall(String owner, String repo, Integer releaseId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsDeleteForRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsDeleteForRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reactionsDeleteForRelease(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForRelease(Async)");
        }

        return reactionsDeleteForReleaseCall(owner, repo, releaseId, reactionId, _callback);

    }

    /**
     * Delete a release reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-release-reaction">Delete a release reaction Documentation</a>
     */
    public void reactionsDeleteForRelease(String owner, String repo, Integer releaseId, Integer reactionId) throws ApiException {
        reactionsDeleteForReleaseWithHttpInfo(owner, repo, releaseId, reactionId);
    }

    /**
     * Delete a release reaction
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-release-reaction">Delete a release reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForReleaseWithHttpInfo(String owner, String repo, Integer releaseId, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForReleaseValidateBeforeCall(owner, repo, releaseId, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a release reaction (asynchronously)
     * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-release-reaction">Delete a release reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForReleaseAsync(String owner, String repo, Integer releaseId, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForReleaseValidateBeforeCall(owner, repo, releaseId, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForTeamDiscussion
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-reaction">Delete team discussion reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForTeamDiscussionCall(String org, String teamSlug, Integer discussionNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForTeamDiscussionValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussion(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussion(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussion(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussion(Async)");
        }

        return reactionsDeleteForTeamDiscussionCall(org, teamSlug, discussionNumber, reactionId, _callback);

    }

    /**
     * Delete team discussion reaction
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-reaction">Delete team discussion reaction Documentation</a>
     */
    public void reactionsDeleteForTeamDiscussion(String org, String teamSlug, Integer discussionNumber, Integer reactionId) throws ApiException {
        reactionsDeleteForTeamDiscussionWithHttpInfo(org, teamSlug, discussionNumber, reactionId);
    }

    /**
     * Delete team discussion reaction
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-reaction">Delete team discussion reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForTeamDiscussionWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForTeamDiscussionValidateBeforeCall(org, teamSlug, discussionNumber, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete team discussion reaction (asynchronously)
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-reaction">Delete team discussion reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForTeamDiscussionAsync(String org, String teamSlug, Integer discussionNumber, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForTeamDiscussionValidateBeforeCall(org, teamSlug, discussionNumber, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteForTeamDiscussionComment
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-comment-reaction">Delete team discussion comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForTeamDiscussionCommentCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()))
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteForTeamDiscussionCommentValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsDeleteForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsDeleteForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsDeleteForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsDeleteForTeamDiscussionComment(Async)");
        }

        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteForTeamDiscussionComment(Async)");
        }

        return reactionsDeleteForTeamDiscussionCommentCall(org, teamSlug, discussionNumber, commentNumber, reactionId, _callback);

    }

    /**
     * Delete team discussion comment reaction
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-comment-reaction">Delete team discussion comment reaction Documentation</a>
     */
    public void reactionsDeleteForTeamDiscussionComment(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, Integer reactionId) throws ApiException {
        reactionsDeleteForTeamDiscussionCommentWithHttpInfo(org, teamSlug, discussionNumber, commentNumber, reactionId);
    }

    /**
     * Delete team discussion comment reaction
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-comment-reaction">Delete team discussion comment reaction Documentation</a>
     */
    public ApiResponse<Void> reactionsDeleteForTeamDiscussionCommentWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteForTeamDiscussionCommentValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete team discussion comment reaction (asynchronously)
     * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#delete-team-discussion-comment-reaction">Delete team discussion comment reaction Documentation</a>
     */
    public okhttp3.Call reactionsDeleteForTeamDiscussionCommentAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteForTeamDiscussionCommentValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsDeleteLegacy
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-reaction-legacy">Delete a reaction (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsDeleteLegacyCall(Integer reactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions/{reaction_id}"
            .replace("{" + "reaction_id" + "}", localVarApiClient.escapeString(reactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsDeleteLegacyValidateBeforeCall(Integer reactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reactionId' is set
        if (reactionId == null) {
            throw new ApiException("Missing the required parameter 'reactionId' when calling reactionsDeleteLegacy(Async)");
        }

        return reactionsDeleteLegacyCall(reactionId, _callback);

    }

    /**
     * Delete a reaction (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments).
     * @param reactionId The unique identifier of the reaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-reaction-legacy">Delete a reaction (Legacy) Documentation</a>
     */
    @Deprecated
    public void reactionsDeleteLegacy(Integer reactionId) throws ApiException {
        reactionsDeleteLegacyWithHttpInfo(reactionId);
    }

    /**
     * Delete a reaction (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments).
     * @param reactionId The unique identifier of the reaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-reaction-legacy">Delete a reaction (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<Void> reactionsDeleteLegacyWithHttpInfo(Integer reactionId) throws ApiException {
        okhttp3.Call localVarCall = reactionsDeleteLegacyValidateBeforeCall(reactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a reaction (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).  OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments).
     * @param reactionId The unique identifier of the reaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#delete-a-reaction-legacy">Delete a reaction (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsDeleteLegacyAsync(Integer reactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsDeleteLegacyValidateBeforeCall(reactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForCommitComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsListForCommitCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForCommitCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForCommitComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForCommitComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForCommitComment(Async)");
        }

        return reactionsListForCommitCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public List<Reaction> reactionsListForCommitComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForCommitCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a commit comment
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForCommitCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForCommitCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a commit comment (asynchronously)
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-commit-comment">List reactions for a commit comment Documentation</a>
     */
    public okhttp3.Call reactionsListForCommitCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForCommitCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForIssue
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCall(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/{issue_number}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "issue_number" + "}", localVarApiClient.escapeString(issueNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForIssueValidateBeforeCall(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForIssue(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForIssue(Async)");
        }

        // verify the required parameter 'issueNumber' is set
        if (issueNumber == null) {
            throw new ApiException("Missing the required parameter 'issueNumber' when calling reactionsListForIssue(Async)");
        }

        return reactionsListForIssueCall(owner, repo, issueNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public List<Reaction> reactionsListForIssue(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForIssueWithHttpInfo(owner, repo, issueNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for an issue
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForIssueWithHttpInfo(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForIssueValidateBeforeCall(owner, repo, issueNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for an issue (asynchronously)
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@3.4/rest/reference/issues).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param issueNumber The number that identifies the issue. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue">List reactions for an issue Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueAsync(String owner, String repo, Integer issueNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForIssueValidateBeforeCall(owner, repo, issueNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForIssueComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForIssueCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForIssueComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForIssueComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForIssueComment(Async)");
        }

        return reactionsListForIssueCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public List<Reaction> reactionsListForIssueComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForIssueCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for an issue comment
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForIssueCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForIssueCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for an issue comment (asynchronously)
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-an-issue-comment">List reactions for an issue comment Documentation</a>
     */
    public okhttp3.Call reactionsListForIssueCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForIssueCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForPullRequestReviewComment
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsListForPullRequestReviewCommentCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForPullRequestReviewCommentValidateBeforeCall(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling reactionsListForPullRequestReviewComment(Async)");
        }

        return reactionsListForPullRequestReviewCommentCall(owner, repo, commentId, content, perPage, page, _callback);

    }

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public List<Reaction> reactionsListForPullRequestReviewComment(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForPullRequestReviewCommentWithHttpInfo(owner, repo, commentId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a pull request review comment
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForPullRequestReviewCommentWithHttpInfo(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a pull request review comment (asynchronously)
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#review-comments).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param commentId The unique identifier of the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment">List reactions for a pull request review comment Documentation</a>
     */
    public okhttp3.Call reactionsListForPullRequestReviewCommentAsync(String owner, String repo, Integer commentId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForPullRequestReviewCommentValidateBeforeCall(owner, repo, commentId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForRelease
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-release">List reactions for a release Documentation</a>
     */
    public okhttp3.Call reactionsListForReleaseCall(String owner, String repo, Integer releaseId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/releases/{release_id}/reactions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "release_id" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForReleaseValidateBeforeCall(String owner, String repo, Integer releaseId, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling reactionsListForRelease(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling reactionsListForRelease(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling reactionsListForRelease(Async)");
        }

        return reactionsListForReleaseCall(owner, repo, releaseId, content, perPage, page, _callback);

    }

    /**
     * List reactions for a release
     * List the reactions to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-release">List reactions for a release Documentation</a>
     */
    public List<Reaction> reactionsListForRelease(String owner, String repo, Integer releaseId, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForReleaseWithHttpInfo(owner, repo, releaseId, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a release
     * List the reactions to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-release">List reactions for a release Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForReleaseWithHttpInfo(String owner, String repo, Integer releaseId, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForReleaseValidateBeforeCall(owner, repo, releaseId, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a release (asynchronously)
     * List the reactions to a [release](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#releases).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param releaseId The unique identifier of the release. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-release">List reactions for a release Documentation</a>
     */
    public okhttp3.Call reactionsListForReleaseAsync(String owner, String repo, Integer releaseId, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForReleaseValidateBeforeCall(owner, repo, releaseId, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussionCommentInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionCommentInOrgCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionCommentInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentInOrg(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentInOrg(Async)");
        }

        return reactionsListForTeamDiscussionCommentInOrgCall(org, teamSlug, discussionNumber, commentNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments/). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public List<Reaction> reactionsListForTeamDiscussionCommentInOrg(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionCommentInOrgWithHttpInfo(org, teamSlug, discussionNumber, commentNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion comment
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments/). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionCommentInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion comment (asynchronously)
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments/). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment">List reactions for a team discussion comment Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionCommentInOrgAsync(String org, String teamSlug, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentInOrgValidateBeforeCall(org, teamSlug, discussionNumber, commentNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussionCommentLegacy
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy">List reactions for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsListForTeamDiscussionCommentLegacyCall(Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()))
            .replace("{" + "comment_number" + "}", localVarApiClient.escapeString(commentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionCommentLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionCommentLegacy(Async)");
        }

        // verify the required parameter 'commentNumber' is set
        if (commentNumber == null) {
            throw new ApiException("Missing the required parameter 'commentNumber' when calling reactionsListForTeamDiscussionCommentLegacy(Async)");
        }

        return reactionsListForTeamDiscussionCommentLegacyCall(teamId, discussionNumber, commentNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy">List reactions for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public List<Reaction> reactionsListForTeamDiscussionCommentLegacy(Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionCommentLegacyWithHttpInfo(teamId, discussionNumber, commentNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion comment (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy">List reactions for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionCommentLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion comment (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param commentNumber The number that identifies the comment. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy">List reactions for a team discussion comment (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsListForTeamDiscussionCommentLegacyAsync(Integer teamId, Integer discussionNumber, Integer commentNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionCommentLegacyValidateBeforeCall(teamId, discussionNumber, commentNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussionInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionInOrgCall(String org, String teamSlug, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "team_slug" + "}", localVarApiClient.escapeString(teamSlug.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionInOrgValidateBeforeCall(String org, String teamSlug, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling reactionsListForTeamDiscussionInOrg(Async)");
        }

        // verify the required parameter 'teamSlug' is set
        if (teamSlug == null) {
            throw new ApiException("Missing the required parameter 'teamSlug' when calling reactionsListForTeamDiscussionInOrg(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionInOrg(Async)");
        }

        return reactionsListForTeamDiscussionInOrgCall(org, teamSlug, discussionNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public List<Reaction> reactionsListForTeamDiscussionInOrg(String org, String teamSlug, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionInOrgWithHttpInfo(org, teamSlug, discussionNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionInOrgWithHttpInfo(String org, String teamSlug, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion (asynchronously)
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param teamSlug The slug of the team name. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion">List reactions for a team discussion Documentation</a>
     */
    public okhttp3.Call reactionsListForTeamDiscussionInOrgAsync(String org, String teamSlug, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionInOrgValidateBeforeCall(org, teamSlug, discussionNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsListForTeamDiscussionLegacy
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy">List reactions for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsListForTeamDiscussionLegacyCall(Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/discussions/{discussion_number}/reactions"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "discussion_number" + "}", localVarApiClient.escapeString(discussionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (content != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content", content));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListForTeamDiscussionLegacyValidateBeforeCall(Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling reactionsListForTeamDiscussionLegacy(Async)");
        }

        // verify the required parameter 'discussionNumber' is set
        if (discussionNumber == null) {
            throw new ApiException("Missing the required parameter 'discussionNumber' when calling reactionsListForTeamDiscussionLegacy(Async)");
        }

        return reactionsListForTeamDiscussionLegacyCall(teamId, discussionNumber, content, perPage, page, _callback);

    }

    /**
     * List reactions for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Reaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy">List reactions for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public List<Reaction> reactionsListForTeamDiscussionLegacy(Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Reaction>> localVarResp = reactionsListForTeamDiscussionLegacyWithHttpInfo(teamId, discussionNumber, content, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List reactions for a team discussion (Legacy)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Reaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy">List reactions for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public ApiResponse<List<Reaction>> reactionsListForTeamDiscussionLegacyWithHttpInfo(Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = reactionsListForTeamDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, content, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reactions for a team discussion (Legacy) (asynchronously)
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.4/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@3.4/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     * @param teamId The unique identifier of the team. (required)
     * @param discussionNumber The number that identifies the discussion. (required)
     * @param content Returns a single [reaction type](https://docs.github.com/enterprise-server@3.4/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * @deprecated
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.4/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy">List reactions for a team discussion (Legacy) Documentation</a>
     */
    @Deprecated
    public okhttp3.Call reactionsListForTeamDiscussionLegacyAsync(Integer teamId, Integer discussionNumber, String content, Integer perPage, Integer page, final ApiCallback<List<Reaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListForTeamDiscussionLegacyValidateBeforeCall(teamId, discussionNumber, content, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Reaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
