/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentProtectionRulesInnerAnyOf1ReviewersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnvironmentProtectionRulesInnerAnyOf1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:46.498945-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvironmentProtectionRulesInnerAnyOf1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<EnvironmentProtectionRulesInnerAnyOf1ReviewersInner> reviewers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public EnvironmentProtectionRulesInnerAnyOf1() {
  }

  public EnvironmentProtectionRulesInnerAnyOf1 id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EnvironmentProtectionRulesInnerAnyOf1 nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public EnvironmentProtectionRulesInnerAnyOf1 reviewers(List<EnvironmentProtectionRulesInnerAnyOf1ReviewersInner> reviewers) {
    this.reviewers = reviewers;
    return this;
  }

  public EnvironmentProtectionRulesInnerAnyOf1 addReviewersItem(EnvironmentProtectionRulesInnerAnyOf1ReviewersInner reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   * @return reviewers
   */
  @javax.annotation.Nullable
  public List<EnvironmentProtectionRulesInnerAnyOf1ReviewersInner> getReviewers() {
    return reviewers;
  }

  public void setReviewers(List<EnvironmentProtectionRulesInnerAnyOf1ReviewersInner> reviewers) {
    this.reviewers = reviewers;
  }


  public EnvironmentProtectionRulesInnerAnyOf1 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentProtectionRulesInnerAnyOf1 environmentProtectionRulesInnerAnyOf1 = (EnvironmentProtectionRulesInnerAnyOf1) o;
    return Objects.equals(this.id, environmentProtectionRulesInnerAnyOf1.id) &&
        Objects.equals(this.nodeId, environmentProtectionRulesInnerAnyOf1.nodeId) &&
        Objects.equals(this.reviewers, environmentProtectionRulesInnerAnyOf1.reviewers) &&
        Objects.equals(this.type, environmentProtectionRulesInnerAnyOf1.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nodeId, reviewers, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentProtectionRulesInnerAnyOf1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("reviewers");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvironmentProtectionRulesInnerAnyOf1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentProtectionRulesInnerAnyOf1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentProtectionRulesInnerAnyOf1 is not found in the empty JSON string", EnvironmentProtectionRulesInnerAnyOf1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentProtectionRulesInnerAnyOf1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentProtectionRulesInnerAnyOf1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnvironmentProtectionRulesInnerAnyOf1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (jsonObj.get("reviewers") != null && !jsonObj.get("reviewers").isJsonNull()) {
        JsonArray jsonArrayreviewers = jsonObj.getAsJsonArray("reviewers");
        if (jsonArrayreviewers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviewers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
          }

          // validate the optional field `reviewers` (array)
          for (int i = 0; i < jsonArrayreviewers.size(); i++) {
            EnvironmentProtectionRulesInnerAnyOf1ReviewersInner.validateJsonElement(jsonArrayreviewers.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentProtectionRulesInnerAnyOf1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentProtectionRulesInnerAnyOf1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentProtectionRulesInnerAnyOf1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentProtectionRulesInnerAnyOf1.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentProtectionRulesInnerAnyOf1>() {
           @Override
           public void write(JsonWriter out, EnvironmentProtectionRulesInnerAnyOf1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentProtectionRulesInnerAnyOf1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvironmentProtectionRulesInnerAnyOf1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvironmentProtectionRulesInnerAnyOf1
   * @throws IOException if the JSON string is invalid with respect to EnvironmentProtectionRulesInnerAnyOf1
   */
  public static EnvironmentProtectionRulesInnerAnyOf1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentProtectionRulesInnerAnyOf1.class);
  }

  /**
   * Convert an instance of EnvironmentProtectionRulesInnerAnyOf1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

