/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Migration;
import org.openapitools.client.model.MigrationsStartForAuthenticatedUserRequest;
import org.openapitools.client.model.MigrationsStartForOrgRequest;
import org.openapitools.client.model.MinimalRepository;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MigrationsApi
 */
@Disabled
public class MigrationsApiTest {

    private final MigrationsApi api = new MigrationsApi();

    /**
     * Delete an organization migration archive
     *
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsDeleteArchiveForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        api.migrationsDeleteArchiveForOrg(org, migrationId);
        // TODO: test validations
    }

    /**
     * Download an organization migration archive
     *
     * Fetches the URL to a migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsDownloadArchiveForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        api.migrationsDownloadArchiveForOrg(org, migrationId);
        // TODO: test validations
    }

    /**
     * Download a user migration archive
     *
     * Fetches the URL to download the migration archive as a &#x60;tar.gz&#x60; file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an &#x60;attachments&#x60; directory that includes all attachment files uploaded to GitHub.com and a &#x60;repositories&#x60; directory that contains the repository&#39;s Git data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetArchiveForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        api.migrationsGetArchiveForAuthenticatedUser(migrationId);
        // TODO: test validations
    }

    /**
     * Get an organization migration status
     *
     * Fetches the status of a migration.  The &#x60;state&#x60; of a migration can be one of the following values:  *   &#x60;pending&#x60;, which means the migration hasn&#39;t started yet. *   &#x60;exporting&#x60;, which means the migration is in progress. *   &#x60;exported&#x60;, which means the migration finished successfully. *   &#x60;failed&#x60;, which means the migration failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsGetStatusForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        List<String> exclude = null;
        Migration response = api.migrationsGetStatusForOrg(org, migrationId, exclude);
        // TODO: test validations
    }

    /**
     * List user migrations
     *
     * Lists all migrations a user has started.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListForAuthenticatedUserTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<Migration> response = api.migrationsListForAuthenticatedUser(perPage, page);
        // TODO: test validations
    }

    /**
     * List organization migrations
     *
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of &#x60;repositories&#x60; is only returned for export migrations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<String> exclude = null;
        List<Migration> response = api.migrationsListForOrg(org, perPage, page, exclude);
        // TODO: test validations
    }

    /**
     * List repositories for a user migration
     *
     * Lists all the repositories for this user migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListReposForAuthenticatedUserTest() throws ApiException {
        Integer migrationId = null;
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.migrationsListReposForAuthenticatedUser(migrationId, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories in an organization migration
     *
     * List all the repositories for this organization migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsListReposForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.migrationsListReposForOrg(org, migrationId, perPage, page);
        // TODO: test validations
    }

    /**
     * Start a user migration
     *
     * Initiates the generation of a user migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsStartForAuthenticatedUserTest() throws ApiException {
        MigrationsStartForAuthenticatedUserRequest migrationsStartForAuthenticatedUserRequest = null;
        Migration response = api.migrationsStartForAuthenticatedUser(migrationsStartForAuthenticatedUserRequest);
        // TODO: test validations
    }

    /**
     * Start an organization migration
     *
     * Initiates the generation of a migration archive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsStartForOrgTest() throws ApiException {
        String org = null;
        MigrationsStartForOrgRequest migrationsStartForOrgRequest = null;
        Migration response = api.migrationsStartForOrg(org, migrationsStartForOrgRequest);
        // TODO: test validations
    }

    /**
     * Unlock an organization repository
     *
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/enterprise-server@3.4/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationsUnlockRepoForOrgTest() throws ApiException {
        String org = null;
        Integer migrationId = null;
        String repoName = null;
        api.migrationsUnlockRepoForOrg(org, migrationId, repoName);
        // TODO: test validations
    }

}
