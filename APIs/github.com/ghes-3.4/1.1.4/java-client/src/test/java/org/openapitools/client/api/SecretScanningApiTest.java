/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.OrganizationSecretScanningAlert;
import org.openapitools.client.model.SecretScanningAlert;
import org.openapitools.client.model.SecretScanningListAlertsForEnterprise503Response;
import org.openapitools.client.model.SecretScanningLocation;
import org.openapitools.client.model.SecretScanningUpdateAlertRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecretScanningApi
 */
@Disabled
public class SecretScanningApiTest {

    private final SecretScanningApi api = new SecretScanningApi();

    /**
     * Get a secret scanning alert
     *
     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope.  GitHub Apps must have the &#x60;secret_scanning_alerts&#x60; read permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningGetAlertTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer alertNumber = null;
        SecretScanningAlert response = api.secretScanningGetAlert(owner, repo, alertNumber);
        // TODO: test validations
    }

    /**
     * List secret scanning alerts for an enterprise
     *
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest. To use this endpoint, you must be a member of the enterprise, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.4/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningListAlertsForEnterpriseTest() throws ApiException {
        String enterprise = null;
        String state = null;
        String secretType = null;
        String resolution = null;
        Integer perPage = null;
        String before = null;
        String after = null;
        List<OrganizationSecretScanningAlert> response = api.secretScanningListAlertsForEnterprise(enterprise, state, secretType, resolution, perPage, before, after);
        // TODO: test validations
    }

    /**
     * List secret scanning alerts for an organization
     *
     * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest. To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope.  GitHub Apps must have the &#x60;secret_scanning_alerts&#x60; read permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningListAlertsForOrgTest() throws ApiException {
        String org = null;
        String state = null;
        String secretType = null;
        String resolution = null;
        Integer page = null;
        Integer perPage = null;
        List<OrganizationSecretScanningAlert> response = api.secretScanningListAlertsForOrg(org, state, secretType, resolution, page, perPage);
        // TODO: test validations
    }

    /**
     * List secret scanning alerts for a repository
     *
     * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope.  GitHub Apps must have the &#x60;secret_scanning_alerts&#x60; read permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningListAlertsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String secretType = null;
        String resolution = null;
        Integer page = null;
        Integer perPage = null;
        List<SecretScanningAlert> response = api.secretScanningListAlertsForRepo(owner, repo, state, secretType, resolution, page, perPage);
        // TODO: test validations
    }

    /**
     * List locations for a secret scanning alert
     *
     * Lists all locations for a given secret scanning alert for a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope.  GitHub Apps must have the &#x60;secret_scanning_alerts&#x60; read permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningListLocationsForAlertTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer alertNumber = null;
        Integer page = null;
        Integer perPage = null;
        List<SecretScanningLocation> response = api.secretScanningListLocationsForAlert(owner, repo, alertNumber, page, perPage);
        // TODO: test validations
    }

    /**
     * Update a secret scanning alert
     *
     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the &#x60;repo&#x60; scope or &#x60;security_events&#x60; scope.  GitHub Apps must have the &#x60;secret_scanning_alerts&#x60; write permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secretScanningUpdateAlertTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer alertNumber = null;
        SecretScanningUpdateAlertRequest secretScanningUpdateAlertRequest = null;
        SecretScanningAlert response = api.secretScanningUpdateAlert(owner, repo, alertNumber, secretScanningUpdateAlertRequest);
        // TODO: test validations
    }

}
