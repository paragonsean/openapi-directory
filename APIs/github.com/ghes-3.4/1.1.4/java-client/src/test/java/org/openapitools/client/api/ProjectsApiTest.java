/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.OrgsUpdate422Response;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectCard;
import org.openapitools.client.model.ProjectCollaboratorPermission;
import org.openapitools.client.model.ProjectColumn;
import org.openapitools.client.model.ProjectsAddCollaboratorRequest;
import org.openapitools.client.model.ProjectsCreateCardRequest;
import org.openapitools.client.model.ProjectsCreateForAuthenticatedUserRequest;
import org.openapitools.client.model.ProjectsCreateForOrgRequest;
import org.openapitools.client.model.ProjectsDeleteCard403Response;
import org.openapitools.client.model.ProjectsMoveCard403Response;
import org.openapitools.client.model.ProjectsMoveCard503Response;
import org.openapitools.client.model.ProjectsMoveCardRequest;
import org.openapitools.client.model.ProjectsMoveColumnRequest;
import org.openapitools.client.model.ProjectsUpdateCardRequest;
import org.openapitools.client.model.ProjectsUpdateColumnRequest;
import org.openapitools.client.model.ProjectsUpdateRequest;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.ValidationErrorSimple;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Add project collaborator
     *
     * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project &#x60;admin&#x60; to add a collaborator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsAddCollaboratorTest() throws ApiException {
        Integer projectId = null;
        String username = null;
        ProjectsAddCollaboratorRequest projectsAddCollaboratorRequest = null;
        api.projectsAddCollaborator(projectId, username, projectsAddCollaboratorRequest);
        // TODO: test validations
    }

    /**
     * Create a project card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateCardTest() throws ApiException {
        Integer columnId = null;
        ProjectsCreateCardRequest projectsCreateCardRequest = null;
        ProjectCard response = api.projectsCreateCard(columnId, projectsCreateCardRequest);
        // TODO: test validations
    }

    /**
     * Create a project column
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateColumnTest() throws ApiException {
        Integer projectId = null;
        ProjectsUpdateColumnRequest projectsUpdateColumnRequest = null;
        ProjectColumn response = api.projectsCreateColumn(projectId, projectsUpdateColumnRequest);
        // TODO: test validations
    }

    /**
     * Create a user project
     *
     * Creates a user project board. Returns a &#x60;410 Gone&#x60; status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateForAuthenticatedUserTest() throws ApiException {
        ProjectsCreateForAuthenticatedUserRequest projectsCreateForAuthenticatedUserRequest = null;
        Project response = api.projectsCreateForAuthenticatedUser(projectsCreateForAuthenticatedUserRequest);
        // TODO: test validations
    }

    /**
     * Create an organization project
     *
     * Creates an organization project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateForOrgTest() throws ApiException {
        String org = null;
        ProjectsCreateForOrgRequest projectsCreateForOrgRequest = null;
        Project response = api.projectsCreateForOrg(org, projectsCreateForOrgRequest);
        // TODO: test validations
    }

    /**
     * Create a repository project
     *
     * Creates a repository project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        ProjectsCreateForOrgRequest projectsCreateForOrgRequest = null;
        Project response = api.projectsCreateForRepo(owner, repo, projectsCreateForOrgRequest);
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * Deletes a project board. Returns a &#x60;404 Not Found&#x60; status if projects are disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteTest() throws ApiException {
        Integer projectId = null;
        api.projectsDelete(projectId);
        // TODO: test validations
    }

    /**
     * Delete a project card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteCardTest() throws ApiException {
        Integer cardId = null;
        api.projectsDeleteCard(cardId);
        // TODO: test validations
    }

    /**
     * Delete a project column
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteColumnTest() throws ApiException {
        Integer columnId = null;
        api.projectsDeleteColumn(columnId);
        // TODO: test validations
    }

    /**
     * Get a project
     *
     * Gets a project by its &#x60;id&#x60;. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        Integer projectId = null;
        Project response = api.projectsGet(projectId);
        // TODO: test validations
    }

    /**
     * Get a project card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetCardTest() throws ApiException {
        Integer cardId = null;
        ProjectCard response = api.projectsGetCard(cardId);
        // TODO: test validations
    }

    /**
     * Get a project column
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetColumnTest() throws ApiException {
        Integer columnId = null;
        ProjectColumn response = api.projectsGetColumn(columnId);
        // TODO: test validations
    }

    /**
     * Get project permission for a user
     *
     * Returns the collaborator&#39;s permission level for an organization project. Possible values for the &#x60;permission&#x60; key: &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, &#x60;none&#x60;. You must be an organization owner or a project &#x60;admin&#x60; to review a user&#39;s permission level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetPermissionForUserTest() throws ApiException {
        Integer projectId = null;
        String username = null;
        ProjectCollaboratorPermission response = api.projectsGetPermissionForUser(projectId, username);
        // TODO: test validations
    }

    /**
     * List project cards
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListCardsTest() throws ApiException {
        Integer columnId = null;
        String archivedState = null;
        Integer perPage = null;
        Integer page = null;
        List<ProjectCard> response = api.projectsListCards(columnId, archivedState, perPage, page);
        // TODO: test validations
    }

    /**
     * List project collaborators
     *
     * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project &#x60;admin&#x60; to list collaborators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListCollaboratorsTest() throws ApiException {
        Integer projectId = null;
        String affiliation = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.projectsListCollaborators(projectId, affiliation, perPage, page);
        // TODO: test validations
    }

    /**
     * List project columns
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListColumnsTest() throws ApiException {
        Integer projectId = null;
        Integer perPage = null;
        Integer page = null;
        List<ProjectColumn> response = api.projectsListColumns(projectId, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization projects
     *
     * Lists the projects in an organization. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListForOrgTest() throws ApiException {
        String org = null;
        String state = null;
        Integer perPage = null;
        Integer page = null;
        List<Project> response = api.projectsListForOrg(org, state, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository projects
     *
     * Lists the projects in a repository. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        Integer perPage = null;
        Integer page = null;
        List<Project> response = api.projectsListForRepo(owner, repo, state, perPage, page);
        // TODO: test validations
    }

    /**
     * List user projects
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListForUserTest() throws ApiException {
        String username = null;
        String state = null;
        Integer perPage = null;
        Integer page = null;
        List<Project> response = api.projectsListForUser(username, state, perPage, page);
        // TODO: test validations
    }

    /**
     * Move a project card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsMoveCardTest() throws ApiException {
        Integer cardId = null;
        ProjectsMoveCardRequest projectsMoveCardRequest = null;
        Object response = api.projectsMoveCard(cardId, projectsMoveCardRequest);
        // TODO: test validations
    }

    /**
     * Move a project column
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsMoveColumnTest() throws ApiException {
        Integer columnId = null;
        ProjectsMoveColumnRequest projectsMoveColumnRequest = null;
        Object response = api.projectsMoveColumn(columnId, projectsMoveColumnRequest);
        // TODO: test validations
    }

    /**
     * Remove user as a collaborator
     *
     * Removes a collaborator from an organization project. You must be an organization owner or a project &#x60;admin&#x60; to remove a collaborator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsRemoveCollaboratorTest() throws ApiException {
        Integer projectId = null;
        String username = null;
        api.projectsRemoveCollaborator(projectId, username);
        // TODO: test validations
    }

    /**
     * Update a project
     *
     * Updates a project board&#39;s information. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateTest() throws ApiException {
        Integer projectId = null;
        ProjectsUpdateRequest projectsUpdateRequest = null;
        Project response = api.projectsUpdate(projectId, projectsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateCardTest() throws ApiException {
        Integer cardId = null;
        ProjectsUpdateCardRequest projectsUpdateCardRequest = null;
        ProjectCard response = api.projectsUpdateCard(cardId, projectsUpdateCardRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project column
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateColumnTest() throws ApiException {
        Integer columnId = null;
        ProjectsUpdateColumnRequest projectsUpdateColumnRequest = null;
        ProjectColumn response = api.projectsUpdateColumn(columnId, projectsUpdateColumnRequest);
        // TODO: test validations
    }

}
