/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.CheckAnnotation;
import org.openapitools.client.model.CheckRun;
import org.openapitools.client.model.CheckSuite;
import org.openapitools.client.model.CheckSuitePreference;
import org.openapitools.client.model.ChecksCreateRequest;
import org.openapitools.client.model.ChecksCreateSuiteRequest;
import org.openapitools.client.model.ChecksListForSuite200Response;
import org.openapitools.client.model.ChecksListSuitesForRef200Response;
import org.openapitools.client.model.ChecksSetSuitesPreferencesRequest;
import org.openapitools.client.model.ChecksUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChecksApi
 */
@Disabled
public class ChecksApiTest {

    private final ChecksApi api = new ChecksApi();

    /**
     * Create a check run
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Creates a new check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check runs.  In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksCreateTest() throws ApiException {
        String owner = null;
        String repo = null;
        ChecksCreateRequest checksCreateRequest = null;
        CheckRun response = api.checksCreate(owner, repo, checksCreateRequest);
        // TODO: test validations
    }

    /**
     * Create a check suite
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you&#39;ve disabled automatic creation using \&quot;[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#update-repository-preferences-for-check-suites)\&quot;. Your GitHub App must have the &#x60;checks:write&#x60; permission to create check suites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksCreateSuiteTest() throws ApiException {
        String owner = null;
        String repo = null;
        ChecksCreateSuiteRequest checksCreateSuiteRequest = null;
        CheckSuite response = api.checksCreateSuite(owner, repo, checksCreateSuiteRequest);
        // TODO: test validations
    }

    /**
     * Get a check run
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Gets a single check run using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksGetTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkRunId = null;
        CheckRun response = api.checksGet(owner, repo, checkRunId);
        // TODO: test validations
    }

    /**
     * Get a check suite
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Gets a single check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksGetSuiteTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkSuiteId = null;
        CheckSuite response = api.checksGetSuite(owner, repo, checkSuiteId);
        // TODO: test validations
    }

    /**
     * List check run annotations
     *
     * Lists annotations for a check run using the annotation &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get annotations for a check run in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksListAnnotationsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkRunId = null;
        Integer perPage = null;
        Integer page = null;
        List<CheckAnnotation> response = api.checksListAnnotations(owner, repo, checkRunId, perPage, page);
        // TODO: test validations
    }

    /**
     * List check runs for a Git reference
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a commit ref. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksListForRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        String checkName = null;
        String status = null;
        String filter = null;
        Integer perPage = null;
        Integer page = null;
        Integer appId = null;
        ChecksListForSuite200Response response = api.checksListForRef(owner, repo, ref, checkName, status, filter, perPage, page, appId);
        // TODO: test validations
    }

    /**
     * List check runs in a check suite
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Lists check runs for a check suite using its &#x60;id&#x60;. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check runs in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksListForSuiteTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkSuiteId = null;
        String checkName = null;
        String status = null;
        String filter = null;
        Integer perPage = null;
        Integer page = null;
        ChecksListForSuite200Response response = api.checksListForSuite(owner, repo, checkSuiteId, checkName, status, filter, perPage, page);
        // TODO: test validations
    }

    /**
     * List check suites for a Git reference
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.  Lists check suites for a commit &#x60;ref&#x60;. The &#x60;ref&#x60; can be a SHA, branch name, or a tag name. GitHub Apps must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the &#x60;repo&#x60; scope to get check suites in a private repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksListSuitesForRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        Integer appId = null;
        String checkName = null;
        Integer perPage = null;
        Integer page = null;
        ChecksListSuitesForRef200Response response = api.checksListSuitesForRef(owner, repo, ref, appId, checkName, perPage, page);
        // TODO: test validations
    }

    /**
     * Rerequest a check run
     *
     * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_run&#x60; webhook](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#check_run) event with the action &#x60;rerequested&#x60;. When a check run is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check run, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksRerequestRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkRunId = null;
        Object response = api.checksRerequestRun(owner, repo, checkRunId);
        // TODO: test validations
    }

    /**
     * Rerequest a check suite
     *
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [&#x60;check_suite&#x60; webhook](https://docs.github.com/enterprise-server@3.4/webhooks/event-payloads/#check_suite) event with the action &#x60;rerequested&#x60;. When a check suite is &#x60;rerequested&#x60;, its &#x60;status&#x60; is reset to &#x60;queued&#x60; and the &#x60;conclusion&#x60; is cleared.  To rerequest a check suite, your GitHub App must have the &#x60;checks:read&#x60; permission on a private repository or pull access to a public repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksRerequestSuiteTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkSuiteId = null;
        Object response = api.checksRerequestSuite(owner, repo, checkSuiteId);
        // TODO: test validations
    }

    /**
     * Update repository preferences for check suites
     *
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.4/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksSetSuitesPreferencesTest() throws ApiException {
        String owner = null;
        String repo = null;
        ChecksSetSuitesPreferencesRequest checksSetSuitesPreferencesRequest = null;
        CheckSuitePreference response = api.checksSetSuitesPreferences(owner, repo, checksSetSuitesPreferencesRequest);
        // TODO: test validations
    }

    /**
     * Update a check run
     *
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array.  Updates a check run for a specific commit in a repository. Your GitHub App must have the &#x60;checks:write&#x60; permission to edit check runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checksUpdateTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer checkRunId = null;
        ChecksUpdateRequest checksUpdateRequest = null;
        CheckRun response = api.checksUpdate(owner, repo, checkRunId, checksUpdateRequest);
        // TODO: test validations
    }

}
