/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Commit;
import org.openapitools.client.model.DiffEntry;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrgsRemoveOutsideCollaborator422Response;
import org.openapitools.client.model.PullRequest;
import org.openapitools.client.model.PullRequestMergeResult;
import org.openapitools.client.model.PullRequestReview;
import org.openapitools.client.model.PullRequestReviewComment;
import org.openapitools.client.model.PullRequestReviewRequest;
import org.openapitools.client.model.PullRequestSimple;
import org.openapitools.client.model.PullsCreateReplyForReviewCommentRequest;
import org.openapitools.client.model.PullsCreateRequest;
import org.openapitools.client.model.PullsCreateReviewCommentRequest;
import org.openapitools.client.model.PullsCreateReviewRequest;
import org.openapitools.client.model.PullsDismissReviewRequest;
import org.openapitools.client.model.PullsMergeRequest;
import org.openapitools.client.model.PullsRemoveRequestedReviewersRequest;
import org.openapitools.client.model.PullsRequestReviewersRequest;
import org.openapitools.client.model.PullsSubmitReviewRequest;
import org.openapitools.client.model.PullsUpdateBranchRequest;
import org.openapitools.client.model.PullsUpdateRequest;
import org.openapitools.client.model.PullsUpdateReviewCommentRequest;
import org.openapitools.client.model.PullsUpdateReviewRequest;
import org.openapitools.client.model.ReviewComment;
import org.openapitools.client.model.SecretScanningListAlertsForEnterprise503Response;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.ValidationErrorSimple;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PullsApi
 */
@Disabled
public class PullsApiTest {

    private final PullsApi api = new PullsApi();

    /**
     * Check if a pull request has been merged
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsCheckIfMergedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        api.pullsCheckIfMerged(owner, repo, pullNumber);
        // TODO: test validations
    }

    /**
     * Create a pull request
     *
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsCreateTest() throws ApiException {
        String owner = null;
        String repo = null;
        PullsCreateRequest pullsCreateRequest = null;
        PullRequest response = api.pullsCreate(owner, repo, pullsCreateRequest);
        // TODO: test validations
    }

    /**
     * Create a reply for a review comment
     *
     * Creates a reply to a review comment for a pull request. For the &#x60;comment_id&#x60;, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsCreateReplyForReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer commentId = null;
        PullsCreateReplyForReviewCommentRequest pullsCreateReplyForReviewCommentRequest = null;
        PullRequestReviewComment response = api.pullsCreateReplyForReviewComment(owner, repo, pullNumber, commentId, pullsCreateReplyForReviewCommentRequest);
        // TODO: test validations
    }

    /**
     * Create a review for a pull request
     *
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.  Pull request reviews created in the &#x60;PENDING&#x60; state are not submitted and therefore do not include the &#x60;submitted_at&#x60; property in the response. To create a pending review for a pull request, leave the &#x60;event&#x60; parameter blank. For more information about submitting a &#x60;PENDING&#x60; review, see \&quot;[Submit a review for a pull request](https://docs.github.com/enterprise-server@3.4/rest/pulls#submit-a-review-for-a-pull-request).\&quot;  **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the &#x60;application/vnd.github.v3.diff&#x60; [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the &#x60;Accept&#x60; header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#get-a-pull-request) endpoint.  The &#x60;position&#x60; value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsCreateReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsCreateReviewRequest pullsCreateReviewRequest = null;
        PullRequestReview response = api.pullsCreateReview(owner, repo, pullNumber, pullsCreateReviewRequest);
        // TODO: test validations
    }

    /**
     * Create a review comment for a pull request
     *
     *  Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \&quot;[Create an issue comment](https://docs.github.com/enterprise-server@3.4/rest/reference/issues#create-an-issue-comment).\&quot; We recommend creating a review comment using &#x60;line&#x60;, &#x60;side&#x60;, and optionally &#x60;start_line&#x60; and &#x60;start_side&#x60; if your comment applies to more than one line in the pull request diff.  The &#x60;position&#x60; parameter is deprecated. If you use &#x60;position&#x60;, the &#x60;line&#x60;, &#x60;side&#x60;, &#x60;start_line&#x60;, and &#x60;start_side&#x60; parameters are not required.  **Note:** The position value equals the number of lines down from the first \&quot;@@\&quot; hunk header in the file you want to add a comment. The line just below the \&quot;@@\&quot; line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.  This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsCreateReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest = null;
        PullRequestReviewComment response = api.pullsCreateReviewComment(owner, repo, pullNumber, pullsCreateReviewCommentRequest);
        // TODO: test validations
    }

    /**
     * Delete a pending review for a pull request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsDeletePendingReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        PullRequestReview response = api.pullsDeletePendingReview(owner, repo, pullNumber, reviewId);
        // TODO: test validations
    }

    /**
     * Delete a review comment for a pull request
     *
     * Deletes a review comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsDeleteReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        api.pullsDeleteReviewComment(owner, repo, commentId);
        // TODO: test validations
    }

    /**
     * Dismiss a review for a pull request
     *
     * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsDismissReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        PullsDismissReviewRequest pullsDismissReviewRequest = null;
        PullRequestReview response = api.pullsDismissReview(owner, repo, pullNumber, reviewId, pullsDismissReviewRequest);
        // TODO: test validations
    }

    /**
     * Get a pull request
     *
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists details of a pull request by providing its number.  When you get, [create](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.4/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the &#x60;mergeable&#x60; key. For more information, see \&quot;[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.4/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)\&quot;.  The value of the &#x60;mergeable&#x60; attribute can be &#x60;true&#x60;, &#x60;false&#x60;, or &#x60;null&#x60;. If the value is &#x60;null&#x60;, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-&#x60;null&#x60; value for the &#x60;mergeable&#x60; attribute in the response. If &#x60;mergeable&#x60; is &#x60;true&#x60;, then &#x60;merge_commit_sha&#x60; will be the SHA of the _test_ merge commit.  The value of the &#x60;merge_commit_sha&#x60; attribute changes depending on the state of the pull request. Before merging a pull request, the &#x60;merge_commit_sha&#x60; attribute holds the SHA of the _test_ merge commit. After merging a pull request, the &#x60;merge_commit_sha&#x60; attribute changes depending on how you merged the pull request:  *   If merged as a [merge commit](https://docs.github.com/enterprise-server@3.4/articles/about-merge-methods-on-github/), &#x60;merge_commit_sha&#x60; represents the SHA of the merge commit. *   If merged via a [squash](https://docs.github.com/enterprise-server@3.4/articles/about-merge-methods-on-github/#squashing-your-merge-commits), &#x60;merge_commit_sha&#x60; represents the SHA of the squashed commit on the base branch. *   If [rebased](https://docs.github.com/enterprise-server@3.4/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), &#x60;merge_commit_sha&#x60; represents the commit that the base branch was updated to.  Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.4/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsGetTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullRequest response = api.pullsGet(owner, repo, pullNumber);
        // TODO: test validations
    }

    /**
     * Get a review for a pull request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsGetReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        PullRequestReview response = api.pullsGetReview(owner, repo, pullNumber, reviewId);
        // TODO: test validations
    }

    /**
     * Get a review comment for a pull request
     *
     * Provides details for a review comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsGetReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        PullRequestReviewComment response = api.pullsGetReviewComment(owner, repo, commentId);
        // TODO: test validations
    }

    /**
     * List pull requests
     *
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String head = null;
        String base = null;
        String sort = null;
        String direction = null;
        Integer perPage = null;
        Integer page = null;
        List<PullRequestSimple> response = api.pullsList(owner, repo, state, head, base, sort, direction, perPage, page);
        // TODO: test validations
    }

    /**
     * List comments for a pull request review
     *
     * List comments for a specific pull request review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListCommentsForReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        Integer perPage = null;
        Integer page = null;
        List<ReviewComment> response = api.pullsListCommentsForReview(owner, repo, pullNumber, reviewId, perPage, page);
        // TODO: test validations
    }

    /**
     * List commits on a pull request
     *
     * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.4/rest/reference/repos#list-commits) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListCommitsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<Commit> response = api.pullsListCommits(owner, repo, pullNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List pull requests files
     *
     * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListFilesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<DiffEntry> response = api.pullsListFiles(owner, repo, pullNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * Get all requested reviewers for a pull request
     *
     * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/enterprise-server@3.4/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListRequestedReviewersTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullRequestReviewRequest response = api.pullsListRequestedReviewers(owner, repo, pullNumber);
        // TODO: test validations
    }

    /**
     * List review comments on a pull request
     *
     * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListReviewCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<PullRequestReviewComment> response = api.pullsListReviewComments(owner, repo, pullNumber, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List review comments in a repository
     *
     * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListReviewCommentsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<PullRequestReviewComment> response = api.pullsListReviewCommentsForRepo(owner, repo, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List reviews for a pull request
     *
     * The list of reviews returns in chronological order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsListReviewsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<PullRequestReview> response = api.pullsListReviews(owner, repo, pullNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * Merge a pull request
     *
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsMergeTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsMergeRequest pullsMergeRequest = null;
        PullRequestMergeResult response = api.pullsMerge(owner, repo, pullNumber, pullsMergeRequest);
        // TODO: test validations
    }

    /**
     * Remove requested reviewers from a pull request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsRemoveRequestedReviewersTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsRemoveRequestedReviewersRequest pullsRemoveRequestedReviewersRequest = null;
        PullRequestSimple response = api.pullsRemoveRequestedReviewers(owner, repo, pullNumber, pullsRemoveRequestedReviewersRequest);
        // TODO: test validations
    }

    /**
     * Request reviewers for a pull request
     *
     * This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.4/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.4/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsRequestReviewersTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsRequestReviewersRequest pullsRequestReviewersRequest = null;
        PullRequestSimple response = api.pullsRequestReviewers(owner, repo, pullNumber, pullsRequestReviewersRequest);
        // TODO: test validations
    }

    /**
     * Submit a review for a pull request
     *
     * Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see \&quot;[Create a review for a pull request](https://docs.github.com/enterprise-server@3.4/rest/pulls#create-a-review-for-a-pull-request).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsSubmitReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        PullsSubmitReviewRequest pullsSubmitReviewRequest = null;
        PullRequestReview response = api.pullsSubmitReview(owner, repo, pullNumber, reviewId, pullsSubmitReviewRequest);
        // TODO: test validations
    }

    /**
     * Update a pull request
     *
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/enterprise-server@3.4/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsUpdateTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsUpdateRequest pullsUpdateRequest = null;
        PullRequest response = api.pullsUpdate(owner, repo, pullNumber, pullsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update a pull request branch
     *
     * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsUpdateBranchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        PullsUpdateBranchRequest pullsUpdateBranchRequest = null;
        EnterpriseAdminUpdateOrgName202Response response = api.pullsUpdateBranch(owner, repo, pullNumber, pullsUpdateBranchRequest);
        // TODO: test validations
    }

    /**
     * Update a review for a pull request
     *
     * Update the review summary comment with new text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsUpdateReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer pullNumber = null;
        Integer reviewId = null;
        PullsUpdateReviewRequest pullsUpdateReviewRequest = null;
        PullRequestReview response = api.pullsUpdateReview(owner, repo, pullNumber, reviewId, pullsUpdateReviewRequest);
        // TODO: test validations
    }

    /**
     * Update a review comment for a pull request
     *
     * Enables you to edit a review comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pullsUpdateReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        PullsUpdateReviewCommentRequest pullsUpdateReviewCommentRequest = null;
        PullRequestReviewComment response = api.pullsUpdateReviewComment(owner, repo, commentId, pullsUpdateReviewCommentRequest);
        // TODO: test validations
    }

}
