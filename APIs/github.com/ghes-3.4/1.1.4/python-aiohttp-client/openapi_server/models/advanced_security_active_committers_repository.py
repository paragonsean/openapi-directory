# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_security_active_committers_user import AdvancedSecurityActiveCommittersUser
from openapi_server import util


class AdvancedSecurityActiveCommittersRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_security_committers: int=None, advanced_security_committers_breakdown: List[AdvancedSecurityActiveCommittersUser]=None, name: str=None):
        """AdvancedSecurityActiveCommittersRepository - a model defined in OpenAPI

        :param advanced_security_committers: The advanced_security_committers of this AdvancedSecurityActiveCommittersRepository.
        :param advanced_security_committers_breakdown: The advanced_security_committers_breakdown of this AdvancedSecurityActiveCommittersRepository.
        :param name: The name of this AdvancedSecurityActiveCommittersRepository.
        """
        self.openapi_types = {
            'advanced_security_committers': int,
            'advanced_security_committers_breakdown': List[AdvancedSecurityActiveCommittersUser],
            'name': str
        }

        self.attribute_map = {
            'advanced_security_committers': 'advanced_security_committers',
            'advanced_security_committers_breakdown': 'advanced_security_committers_breakdown',
            'name': 'name'
        }

        self._advanced_security_committers = advanced_security_committers
        self._advanced_security_committers_breakdown = advanced_security_committers_breakdown
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedSecurityActiveCommittersRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The advanced-security-active-committers-repository of this AdvancedSecurityActiveCommittersRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_security_committers(self):
        """Gets the advanced_security_committers of this AdvancedSecurityActiveCommittersRepository.


        :return: The advanced_security_committers of this AdvancedSecurityActiveCommittersRepository.
        :rtype: int
        """
        return self._advanced_security_committers

    @advanced_security_committers.setter
    def advanced_security_committers(self, advanced_security_committers):
        """Sets the advanced_security_committers of this AdvancedSecurityActiveCommittersRepository.


        :param advanced_security_committers: The advanced_security_committers of this AdvancedSecurityActiveCommittersRepository.
        :type advanced_security_committers: int
        """
        if advanced_security_committers is None:
            raise ValueError("Invalid value for `advanced_security_committers`, must not be `None`")

        self._advanced_security_committers = advanced_security_committers

    @property
    def advanced_security_committers_breakdown(self):
        """Gets the advanced_security_committers_breakdown of this AdvancedSecurityActiveCommittersRepository.


        :return: The advanced_security_committers_breakdown of this AdvancedSecurityActiveCommittersRepository.
        :rtype: List[AdvancedSecurityActiveCommittersUser]
        """
        return self._advanced_security_committers_breakdown

    @advanced_security_committers_breakdown.setter
    def advanced_security_committers_breakdown(self, advanced_security_committers_breakdown):
        """Sets the advanced_security_committers_breakdown of this AdvancedSecurityActiveCommittersRepository.


        :param advanced_security_committers_breakdown: The advanced_security_committers_breakdown of this AdvancedSecurityActiveCommittersRepository.
        :type advanced_security_committers_breakdown: List[AdvancedSecurityActiveCommittersUser]
        """
        if advanced_security_committers_breakdown is None:
            raise ValueError("Invalid value for `advanced_security_committers_breakdown`, must not be `None`")

        self._advanced_security_committers_breakdown = advanced_security_committers_breakdown

    @property
    def name(self):
        """Gets the name of this AdvancedSecurityActiveCommittersRepository.


        :return: The name of this AdvancedSecurityActiveCommittersRepository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdvancedSecurityActiveCommittersRepository.


        :param name: The name of this AdvancedSecurityActiveCommittersRepository.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
