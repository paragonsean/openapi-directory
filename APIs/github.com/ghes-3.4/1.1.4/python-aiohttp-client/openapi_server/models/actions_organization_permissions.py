# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_actions import AllowedActions
from openapi_server.models.enabled_repositories import EnabledRepositories
from openapi_server import util


class ActionsOrganizationPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_actions: AllowedActions=None, enabled_repositories: EnabledRepositories=None, selected_actions_url: str=None, selected_repositories_url: str=None):
        """ActionsOrganizationPermissions - a model defined in OpenAPI

        :param allowed_actions: The allowed_actions of this ActionsOrganizationPermissions.
        :param enabled_repositories: The enabled_repositories of this ActionsOrganizationPermissions.
        :param selected_actions_url: The selected_actions_url of this ActionsOrganizationPermissions.
        :param selected_repositories_url: The selected_repositories_url of this ActionsOrganizationPermissions.
        """
        self.openapi_types = {
            'allowed_actions': AllowedActions,
            'enabled_repositories': EnabledRepositories,
            'selected_actions_url': str,
            'selected_repositories_url': str
        }

        self.attribute_map = {
            'allowed_actions': 'allowed_actions',
            'enabled_repositories': 'enabled_repositories',
            'selected_actions_url': 'selected_actions_url',
            'selected_repositories_url': 'selected_repositories_url'
        }

        self._allowed_actions = allowed_actions
        self._enabled_repositories = enabled_repositories
        self._selected_actions_url = selected_actions_url
        self._selected_repositories_url = selected_repositories_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsOrganizationPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions-organization-permissions of this ActionsOrganizationPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this ActionsOrganizationPermissions.


        :return: The allowed_actions of this ActionsOrganizationPermissions.
        :rtype: AllowedActions
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this ActionsOrganizationPermissions.


        :param allowed_actions: The allowed_actions of this ActionsOrganizationPermissions.
        :type allowed_actions: AllowedActions
        """

        self._allowed_actions = allowed_actions

    @property
    def enabled_repositories(self):
        """Gets the enabled_repositories of this ActionsOrganizationPermissions.


        :return: The enabled_repositories of this ActionsOrganizationPermissions.
        :rtype: EnabledRepositories
        """
        return self._enabled_repositories

    @enabled_repositories.setter
    def enabled_repositories(self, enabled_repositories):
        """Sets the enabled_repositories of this ActionsOrganizationPermissions.


        :param enabled_repositories: The enabled_repositories of this ActionsOrganizationPermissions.
        :type enabled_repositories: EnabledRepositories
        """
        if enabled_repositories is None:
            raise ValueError("Invalid value for `enabled_repositories`, must not be `None`")

        self._enabled_repositories = enabled_repositories

    @property
    def selected_actions_url(self):
        """Gets the selected_actions_url of this ActionsOrganizationPermissions.

        The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.

        :return: The selected_actions_url of this ActionsOrganizationPermissions.
        :rtype: str
        """
        return self._selected_actions_url

    @selected_actions_url.setter
    def selected_actions_url(self, selected_actions_url):
        """Sets the selected_actions_url of this ActionsOrganizationPermissions.

        The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.

        :param selected_actions_url: The selected_actions_url of this ActionsOrganizationPermissions.
        :type selected_actions_url: str
        """

        self._selected_actions_url = selected_actions_url

    @property
    def selected_repositories_url(self):
        """Gets the selected_repositories_url of this ActionsOrganizationPermissions.

        The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.

        :return: The selected_repositories_url of this ActionsOrganizationPermissions.
        :rtype: str
        """
        return self._selected_repositories_url

    @selected_repositories_url.setter
    def selected_repositories_url(self, selected_repositories_url):
        """Sets the selected_repositories_url of this ActionsOrganizationPermissions.

        The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.

        :param selected_repositories_url: The selected_repositories_url of this ActionsOrganizationPermissions.
        :type selected_repositories_url: str
        """

        self._selected_repositories_url = selected_repositories_url
