# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_actions_secret import OrganizationActionsSecret
from openapi_server import util


class ActionsListOrgSecrets200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secrets: List[OrganizationActionsSecret]=None, total_count: int=None):
        """ActionsListOrgSecrets200Response - a model defined in OpenAPI

        :param secrets: The secrets of this ActionsListOrgSecrets200Response.
        :param total_count: The total_count of this ActionsListOrgSecrets200Response.
        """
        self.openapi_types = {
            'secrets': List[OrganizationActionsSecret],
            'total_count': int
        }

        self.attribute_map = {
            'secrets': 'secrets',
            'total_count': 'total_count'
        }

        self._secrets = secrets
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListOrgSecrets200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_org_secrets_200_response of this ActionsListOrgSecrets200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secrets(self):
        """Gets the secrets of this ActionsListOrgSecrets200Response.


        :return: The secrets of this ActionsListOrgSecrets200Response.
        :rtype: List[OrganizationActionsSecret]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this ActionsListOrgSecrets200Response.


        :param secrets: The secrets of this ActionsListOrgSecrets200Response.
        :type secrets: List[OrganizationActionsSecret]
        """
        if secrets is None:
            raise ValueError("Invalid value for `secrets`, must not be `None`")

        self._secrets = secrets

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListOrgSecrets200Response.


        :return: The total_count of this ActionsListOrgSecrets200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListOrgSecrets200Response.


        :param total_count: The total_count of this ActionsListOrgSecrets200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
