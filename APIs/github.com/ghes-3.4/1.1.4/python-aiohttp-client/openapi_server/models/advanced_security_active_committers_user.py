# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvancedSecurityActiveCommittersUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_pushed_date: str=None, user_login: str=None):
        """AdvancedSecurityActiveCommittersUser - a model defined in OpenAPI

        :param last_pushed_date: The last_pushed_date of this AdvancedSecurityActiveCommittersUser.
        :param user_login: The user_login of this AdvancedSecurityActiveCommittersUser.
        """
        self.openapi_types = {
            'last_pushed_date': str,
            'user_login': str
        }

        self.attribute_map = {
            'last_pushed_date': 'last_pushed_date',
            'user_login': 'user_login'
        }

        self._last_pushed_date = last_pushed_date
        self._user_login = user_login

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedSecurityActiveCommittersUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The advanced-security-active-committers-user of this AdvancedSecurityActiveCommittersUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_pushed_date(self):
        """Gets the last_pushed_date of this AdvancedSecurityActiveCommittersUser.


        :return: The last_pushed_date of this AdvancedSecurityActiveCommittersUser.
        :rtype: str
        """
        return self._last_pushed_date

    @last_pushed_date.setter
    def last_pushed_date(self, last_pushed_date):
        """Sets the last_pushed_date of this AdvancedSecurityActiveCommittersUser.


        :param last_pushed_date: The last_pushed_date of this AdvancedSecurityActiveCommittersUser.
        :type last_pushed_date: str
        """
        if last_pushed_date is None:
            raise ValueError("Invalid value for `last_pushed_date`, must not be `None`")

        self._last_pushed_date = last_pushed_date

    @property
    def user_login(self):
        """Gets the user_login of this AdvancedSecurityActiveCommittersUser.


        :return: The user_login of this AdvancedSecurityActiveCommittersUser.
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login):
        """Sets the user_login of this AdvancedSecurityActiveCommittersUser.


        :param user_login: The user_login of this AdvancedSecurityActiveCommittersUser.
        :type user_login: str
        """
        if user_login is None:
            raise ValueError("Invalid value for `user_login`, must not be `None`")

        self._user_login = user_login
