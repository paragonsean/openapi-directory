# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact import Artifact
from openapi_server import util


class ActionsListArtifactsForRepo200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[Artifact]=None, total_count: int=None):
        """ActionsListArtifactsForRepo200Response - a model defined in OpenAPI

        :param artifacts: The artifacts of this ActionsListArtifactsForRepo200Response.
        :param total_count: The total_count of this ActionsListArtifactsForRepo200Response.
        """
        self.openapi_types = {
            'artifacts': List[Artifact],
            'total_count': int
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'total_count': 'total_count'
        }

        self._artifacts = artifacts
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListArtifactsForRepo200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_artifacts_for_repo_200_response of this ActionsListArtifactsForRepo200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this ActionsListArtifactsForRepo200Response.


        :return: The artifacts of this ActionsListArtifactsForRepo200Response.
        :rtype: List[Artifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ActionsListArtifactsForRepo200Response.


        :param artifacts: The artifacts of this ActionsListArtifactsForRepo200Response.
        :type artifacts: List[Artifact]
        """
        if artifacts is None:
            raise ValueError("Invalid value for `artifacts`, must not be `None`")

        self._artifacts = artifacts

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListArtifactsForRepo200Response.


        :return: The total_count of this ActionsListArtifactsForRepo200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListArtifactsForRepo200Response.


        :param total_count: The total_count of this ActionsListArtifactsForRepo200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
