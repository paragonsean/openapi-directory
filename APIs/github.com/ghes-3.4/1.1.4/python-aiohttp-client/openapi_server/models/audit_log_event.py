# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_log_event_actor_location import AuditLogEventActorLocation
from openapi_server import util


class AuditLogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: int=None, document_id: str=None, action: str=None, active: bool=None, active_was: bool=None, actor: str=None, actor_id: int=None, actor_location: AuditLogEventActorLocation=None, blocked_user: str=None, business: str=None, business_id: int=None, config: List[object]=None, config_was: List[object]=None, content_type: str=None, created_at: int=None, data: Dict[str, object]=None, deploy_key_fingerprint: str=None, emoji: str=None, events: List[object]=None, events_were: List[object]=None, explanation: str=None, fingerprint: str=None, hook_id: int=None, limited_availability: bool=None, message: str=None, name: str=None, old_user: str=None, openssh_public_key: str=None, operation_type: str=None, org: str=None, org_id: int=None, previous_visibility: str=None, read_only: bool=None, repo: str=None, repository: str=None, repository_public: bool=None, target_login: str=None, team: str=None, transport_protocol: int=None, transport_protocol_name: str=None, user: str=None, user_id: int=None, visibility: str=None):
        """AuditLogEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this AuditLogEvent.
        :param document_id: The document_id of this AuditLogEvent.
        :param action: The action of this AuditLogEvent.
        :param active: The active of this AuditLogEvent.
        :param active_was: The active_was of this AuditLogEvent.
        :param actor: The actor of this AuditLogEvent.
        :param actor_id: The actor_id of this AuditLogEvent.
        :param actor_location: The actor_location of this AuditLogEvent.
        :param blocked_user: The blocked_user of this AuditLogEvent.
        :param business: The business of this AuditLogEvent.
        :param business_id: The business_id of this AuditLogEvent.
        :param config: The config of this AuditLogEvent.
        :param config_was: The config_was of this AuditLogEvent.
        :param content_type: The content_type of this AuditLogEvent.
        :param created_at: The created_at of this AuditLogEvent.
        :param data: The data of this AuditLogEvent.
        :param deploy_key_fingerprint: The deploy_key_fingerprint of this AuditLogEvent.
        :param emoji: The emoji of this AuditLogEvent.
        :param events: The events of this AuditLogEvent.
        :param events_were: The events_were of this AuditLogEvent.
        :param explanation: The explanation of this AuditLogEvent.
        :param fingerprint: The fingerprint of this AuditLogEvent.
        :param hook_id: The hook_id of this AuditLogEvent.
        :param limited_availability: The limited_availability of this AuditLogEvent.
        :param message: The message of this AuditLogEvent.
        :param name: The name of this AuditLogEvent.
        :param old_user: The old_user of this AuditLogEvent.
        :param openssh_public_key: The openssh_public_key of this AuditLogEvent.
        :param operation_type: The operation_type of this AuditLogEvent.
        :param org: The org of this AuditLogEvent.
        :param org_id: The org_id of this AuditLogEvent.
        :param previous_visibility: The previous_visibility of this AuditLogEvent.
        :param read_only: The read_only of this AuditLogEvent.
        :param repo: The repo of this AuditLogEvent.
        :param repository: The repository of this AuditLogEvent.
        :param repository_public: The repository_public of this AuditLogEvent.
        :param target_login: The target_login of this AuditLogEvent.
        :param team: The team of this AuditLogEvent.
        :param transport_protocol: The transport_protocol of this AuditLogEvent.
        :param transport_protocol_name: The transport_protocol_name of this AuditLogEvent.
        :param user: The user of this AuditLogEvent.
        :param user_id: The user_id of this AuditLogEvent.
        :param visibility: The visibility of this AuditLogEvent.
        """
        self.openapi_types = {
            'timestamp': int,
            'document_id': str,
            'action': str,
            'active': bool,
            'active_was': bool,
            'actor': str,
            'actor_id': int,
            'actor_location': AuditLogEventActorLocation,
            'blocked_user': str,
            'business': str,
            'business_id': int,
            'config': List[object],
            'config_was': List[object],
            'content_type': str,
            'created_at': int,
            'data': Dict[str, object],
            'deploy_key_fingerprint': str,
            'emoji': str,
            'events': List[object],
            'events_were': List[object],
            'explanation': str,
            'fingerprint': str,
            'hook_id': int,
            'limited_availability': bool,
            'message': str,
            'name': str,
            'old_user': str,
            'openssh_public_key': str,
            'operation_type': str,
            'org': str,
            'org_id': int,
            'previous_visibility': str,
            'read_only': bool,
            'repo': str,
            'repository': str,
            'repository_public': bool,
            'target_login': str,
            'team': str,
            'transport_protocol': int,
            'transport_protocol_name': str,
            'user': str,
            'user_id': int,
            'visibility': str
        }

        self.attribute_map = {
            'timestamp': '@timestamp',
            'document_id': '_document_id',
            'action': 'action',
            'active': 'active',
            'active_was': 'active_was',
            'actor': 'actor',
            'actor_id': 'actor_id',
            'actor_location': 'actor_location',
            'blocked_user': 'blocked_user',
            'business': 'business',
            'business_id': 'business_id',
            'config': 'config',
            'config_was': 'config_was',
            'content_type': 'content_type',
            'created_at': 'created_at',
            'data': 'data',
            'deploy_key_fingerprint': 'deploy_key_fingerprint',
            'emoji': 'emoji',
            'events': 'events',
            'events_were': 'events_were',
            'explanation': 'explanation',
            'fingerprint': 'fingerprint',
            'hook_id': 'hook_id',
            'limited_availability': 'limited_availability',
            'message': 'message',
            'name': 'name',
            'old_user': 'old_user',
            'openssh_public_key': 'openssh_public_key',
            'operation_type': 'operation_type',
            'org': 'org',
            'org_id': 'org_id',
            'previous_visibility': 'previous_visibility',
            'read_only': 'read_only',
            'repo': 'repo',
            'repository': 'repository',
            'repository_public': 'repository_public',
            'target_login': 'target_login',
            'team': 'team',
            'transport_protocol': 'transport_protocol',
            'transport_protocol_name': 'transport_protocol_name',
            'user': 'user',
            'user_id': 'user_id',
            'visibility': 'visibility'
        }

        self._timestamp = timestamp
        self._document_id = document_id
        self._action = action
        self._active = active
        self._active_was = active_was
        self._actor = actor
        self._actor_id = actor_id
        self._actor_location = actor_location
        self._blocked_user = blocked_user
        self._business = business
        self._business_id = business_id
        self._config = config
        self._config_was = config_was
        self._content_type = content_type
        self._created_at = created_at
        self._data = data
        self._deploy_key_fingerprint = deploy_key_fingerprint
        self._emoji = emoji
        self._events = events
        self._events_were = events_were
        self._explanation = explanation
        self._fingerprint = fingerprint
        self._hook_id = hook_id
        self._limited_availability = limited_availability
        self._message = message
        self._name = name
        self._old_user = old_user
        self._openssh_public_key = openssh_public_key
        self._operation_type = operation_type
        self._org = org
        self._org_id = org_id
        self._previous_visibility = previous_visibility
        self._read_only = read_only
        self._repo = repo
        self._repository = repository
        self._repository_public = repository_public
        self._target_login = target_login
        self._team = team
        self._transport_protocol = transport_protocol
        self._transport_protocol_name = transport_protocol_name
        self._user = user
        self._user_id = user_id
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditLogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The audit-log-event of this AuditLogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditLogEvent.

        The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).

        :return: The timestamp of this AuditLogEvent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditLogEvent.

        The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).

        :param timestamp: The timestamp of this AuditLogEvent.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def document_id(self):
        """Gets the document_id of this AuditLogEvent.

        A unique identifier for an audit event.

        :return: The document_id of this AuditLogEvent.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AuditLogEvent.

        A unique identifier for an audit event.

        :param document_id: The document_id of this AuditLogEvent.
        :type document_id: str
        """

        self._document_id = document_id

    @property
    def action(self):
        """Gets the action of this AuditLogEvent.

        The name of the action that was performed, for example `user.login` or `repo.create`.

        :return: The action of this AuditLogEvent.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLogEvent.

        The name of the action that was performed, for example `user.login` or `repo.create`.

        :param action: The action of this AuditLogEvent.
        :type action: str
        """

        self._action = action

    @property
    def active(self):
        """Gets the active of this AuditLogEvent.


        :return: The active of this AuditLogEvent.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AuditLogEvent.


        :param active: The active of this AuditLogEvent.
        :type active: bool
        """

        self._active = active

    @property
    def active_was(self):
        """Gets the active_was of this AuditLogEvent.


        :return: The active_was of this AuditLogEvent.
        :rtype: bool
        """
        return self._active_was

    @active_was.setter
    def active_was(self, active_was):
        """Sets the active_was of this AuditLogEvent.


        :param active_was: The active_was of this AuditLogEvent.
        :type active_was: bool
        """

        self._active_was = active_was

    @property
    def actor(self):
        """Gets the actor of this AuditLogEvent.

        The actor who performed the action.

        :return: The actor of this AuditLogEvent.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this AuditLogEvent.

        The actor who performed the action.

        :param actor: The actor of this AuditLogEvent.
        :type actor: str
        """

        self._actor = actor

    @property
    def actor_id(self):
        """Gets the actor_id of this AuditLogEvent.

        The id of the actor who performed the action.

        :return: The actor_id of this AuditLogEvent.
        :rtype: int
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this AuditLogEvent.

        The id of the actor who performed the action.

        :param actor_id: The actor_id of this AuditLogEvent.
        :type actor_id: int
        """

        self._actor_id = actor_id

    @property
    def actor_location(self):
        """Gets the actor_location of this AuditLogEvent.


        :return: The actor_location of this AuditLogEvent.
        :rtype: AuditLogEventActorLocation
        """
        return self._actor_location

    @actor_location.setter
    def actor_location(self, actor_location):
        """Sets the actor_location of this AuditLogEvent.


        :param actor_location: The actor_location of this AuditLogEvent.
        :type actor_location: AuditLogEventActorLocation
        """

        self._actor_location = actor_location

    @property
    def blocked_user(self):
        """Gets the blocked_user of this AuditLogEvent.

        The username of the account being blocked.

        :return: The blocked_user of this AuditLogEvent.
        :rtype: str
        """
        return self._blocked_user

    @blocked_user.setter
    def blocked_user(self, blocked_user):
        """Sets the blocked_user of this AuditLogEvent.

        The username of the account being blocked.

        :param blocked_user: The blocked_user of this AuditLogEvent.
        :type blocked_user: str
        """

        self._blocked_user = blocked_user

    @property
    def business(self):
        """Gets the business of this AuditLogEvent.


        :return: The business of this AuditLogEvent.
        :rtype: str
        """
        return self._business

    @business.setter
    def business(self, business):
        """Sets the business of this AuditLogEvent.


        :param business: The business of this AuditLogEvent.
        :type business: str
        """

        self._business = business

    @property
    def business_id(self):
        """Gets the business_id of this AuditLogEvent.


        :return: The business_id of this AuditLogEvent.
        :rtype: int
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this AuditLogEvent.


        :param business_id: The business_id of this AuditLogEvent.
        :type business_id: int
        """

        self._business_id = business_id

    @property
    def config(self):
        """Gets the config of this AuditLogEvent.


        :return: The config of this AuditLogEvent.
        :rtype: List[object]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AuditLogEvent.


        :param config: The config of this AuditLogEvent.
        :type config: List[object]
        """

        self._config = config

    @property
    def config_was(self):
        """Gets the config_was of this AuditLogEvent.


        :return: The config_was of this AuditLogEvent.
        :rtype: List[object]
        """
        return self._config_was

    @config_was.setter
    def config_was(self, config_was):
        """Sets the config_was of this AuditLogEvent.


        :param config_was: The config_was of this AuditLogEvent.
        :type config_was: List[object]
        """

        self._config_was = config_was

    @property
    def content_type(self):
        """Gets the content_type of this AuditLogEvent.


        :return: The content_type of this AuditLogEvent.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AuditLogEvent.


        :param content_type: The content_type of this AuditLogEvent.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this AuditLogEvent.

        The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).

        :return: The created_at of this AuditLogEvent.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuditLogEvent.

        The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).

        :param created_at: The created_at of this AuditLogEvent.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this AuditLogEvent.


        :return: The data of this AuditLogEvent.
        :rtype: Dict[str, object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AuditLogEvent.


        :param data: The data of this AuditLogEvent.
        :type data: Dict[str, object]
        """

        self._data = data

    @property
    def deploy_key_fingerprint(self):
        """Gets the deploy_key_fingerprint of this AuditLogEvent.


        :return: The deploy_key_fingerprint of this AuditLogEvent.
        :rtype: str
        """
        return self._deploy_key_fingerprint

    @deploy_key_fingerprint.setter
    def deploy_key_fingerprint(self, deploy_key_fingerprint):
        """Sets the deploy_key_fingerprint of this AuditLogEvent.


        :param deploy_key_fingerprint: The deploy_key_fingerprint of this AuditLogEvent.
        :type deploy_key_fingerprint: str
        """

        self._deploy_key_fingerprint = deploy_key_fingerprint

    @property
    def emoji(self):
        """Gets the emoji of this AuditLogEvent.


        :return: The emoji of this AuditLogEvent.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this AuditLogEvent.


        :param emoji: The emoji of this AuditLogEvent.
        :type emoji: str
        """

        self._emoji = emoji

    @property
    def events(self):
        """Gets the events of this AuditLogEvent.


        :return: The events of this AuditLogEvent.
        :rtype: List[object]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AuditLogEvent.


        :param events: The events of this AuditLogEvent.
        :type events: List[object]
        """

        self._events = events

    @property
    def events_were(self):
        """Gets the events_were of this AuditLogEvent.


        :return: The events_were of this AuditLogEvent.
        :rtype: List[object]
        """
        return self._events_were

    @events_were.setter
    def events_were(self, events_were):
        """Sets the events_were of this AuditLogEvent.


        :param events_were: The events_were of this AuditLogEvent.
        :type events_were: List[object]
        """

        self._events_were = events_were

    @property
    def explanation(self):
        """Gets the explanation of this AuditLogEvent.


        :return: The explanation of this AuditLogEvent.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this AuditLogEvent.


        :param explanation: The explanation of this AuditLogEvent.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def fingerprint(self):
        """Gets the fingerprint of this AuditLogEvent.


        :return: The fingerprint of this AuditLogEvent.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this AuditLogEvent.


        :param fingerprint: The fingerprint of this AuditLogEvent.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def hook_id(self):
        """Gets the hook_id of this AuditLogEvent.


        :return: The hook_id of this AuditLogEvent.
        :rtype: int
        """
        return self._hook_id

    @hook_id.setter
    def hook_id(self, hook_id):
        """Sets the hook_id of this AuditLogEvent.


        :param hook_id: The hook_id of this AuditLogEvent.
        :type hook_id: int
        """

        self._hook_id = hook_id

    @property
    def limited_availability(self):
        """Gets the limited_availability of this AuditLogEvent.


        :return: The limited_availability of this AuditLogEvent.
        :rtype: bool
        """
        return self._limited_availability

    @limited_availability.setter
    def limited_availability(self, limited_availability):
        """Sets the limited_availability of this AuditLogEvent.


        :param limited_availability: The limited_availability of this AuditLogEvent.
        :type limited_availability: bool
        """

        self._limited_availability = limited_availability

    @property
    def message(self):
        """Gets the message of this AuditLogEvent.


        :return: The message of this AuditLogEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditLogEvent.


        :param message: The message of this AuditLogEvent.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this AuditLogEvent.


        :return: The name of this AuditLogEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuditLogEvent.


        :param name: The name of this AuditLogEvent.
        :type name: str
        """

        self._name = name

    @property
    def old_user(self):
        """Gets the old_user of this AuditLogEvent.


        :return: The old_user of this AuditLogEvent.
        :rtype: str
        """
        return self._old_user

    @old_user.setter
    def old_user(self, old_user):
        """Sets the old_user of this AuditLogEvent.


        :param old_user: The old_user of this AuditLogEvent.
        :type old_user: str
        """

        self._old_user = old_user

    @property
    def openssh_public_key(self):
        """Gets the openssh_public_key of this AuditLogEvent.


        :return: The openssh_public_key of this AuditLogEvent.
        :rtype: str
        """
        return self._openssh_public_key

    @openssh_public_key.setter
    def openssh_public_key(self, openssh_public_key):
        """Sets the openssh_public_key of this AuditLogEvent.


        :param openssh_public_key: The openssh_public_key of this AuditLogEvent.
        :type openssh_public_key: str
        """

        self._openssh_public_key = openssh_public_key

    @property
    def operation_type(self):
        """Gets the operation_type of this AuditLogEvent.


        :return: The operation_type of this AuditLogEvent.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AuditLogEvent.


        :param operation_type: The operation_type of this AuditLogEvent.
        :type operation_type: str
        """

        self._operation_type = operation_type

    @property
    def org(self):
        """Gets the org of this AuditLogEvent.


        :return: The org of this AuditLogEvent.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this AuditLogEvent.


        :param org: The org of this AuditLogEvent.
        :type org: str
        """

        self._org = org

    @property
    def org_id(self):
        """Gets the org_id of this AuditLogEvent.


        :return: The org_id of this AuditLogEvent.
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AuditLogEvent.


        :param org_id: The org_id of this AuditLogEvent.
        :type org_id: int
        """

        self._org_id = org_id

    @property
    def previous_visibility(self):
        """Gets the previous_visibility of this AuditLogEvent.


        :return: The previous_visibility of this AuditLogEvent.
        :rtype: str
        """
        return self._previous_visibility

    @previous_visibility.setter
    def previous_visibility(self, previous_visibility):
        """Sets the previous_visibility of this AuditLogEvent.


        :param previous_visibility: The previous_visibility of this AuditLogEvent.
        :type previous_visibility: str
        """

        self._previous_visibility = previous_visibility

    @property
    def read_only(self):
        """Gets the read_only of this AuditLogEvent.


        :return: The read_only of this AuditLogEvent.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this AuditLogEvent.


        :param read_only: The read_only of this AuditLogEvent.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def repo(self):
        """Gets the repo of this AuditLogEvent.

        The name of the repository.

        :return: The repo of this AuditLogEvent.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this AuditLogEvent.

        The name of the repository.

        :param repo: The repo of this AuditLogEvent.
        :type repo: str
        """

        self._repo = repo

    @property
    def repository(self):
        """Gets the repository of this AuditLogEvent.

        The name of the repository.

        :return: The repository of this AuditLogEvent.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this AuditLogEvent.

        The name of the repository.

        :param repository: The repository of this AuditLogEvent.
        :type repository: str
        """

        self._repository = repository

    @property
    def repository_public(self):
        """Gets the repository_public of this AuditLogEvent.


        :return: The repository_public of this AuditLogEvent.
        :rtype: bool
        """
        return self._repository_public

    @repository_public.setter
    def repository_public(self, repository_public):
        """Sets the repository_public of this AuditLogEvent.


        :param repository_public: The repository_public of this AuditLogEvent.
        :type repository_public: bool
        """

        self._repository_public = repository_public

    @property
    def target_login(self):
        """Gets the target_login of this AuditLogEvent.


        :return: The target_login of this AuditLogEvent.
        :rtype: str
        """
        return self._target_login

    @target_login.setter
    def target_login(self, target_login):
        """Sets the target_login of this AuditLogEvent.


        :param target_login: The target_login of this AuditLogEvent.
        :type target_login: str
        """

        self._target_login = target_login

    @property
    def team(self):
        """Gets the team of this AuditLogEvent.


        :return: The team of this AuditLogEvent.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AuditLogEvent.


        :param team: The team of this AuditLogEvent.
        :type team: str
        """

        self._team = team

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this AuditLogEvent.

        The type of protocol (for example, HTTP or SSH) used to transfer Git data.

        :return: The transport_protocol of this AuditLogEvent.
        :rtype: int
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this AuditLogEvent.

        The type of protocol (for example, HTTP or SSH) used to transfer Git data.

        :param transport_protocol: The transport_protocol of this AuditLogEvent.
        :type transport_protocol: int
        """

        self._transport_protocol = transport_protocol

    @property
    def transport_protocol_name(self):
        """Gets the transport_protocol_name of this AuditLogEvent.

        A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.

        :return: The transport_protocol_name of this AuditLogEvent.
        :rtype: str
        """
        return self._transport_protocol_name

    @transport_protocol_name.setter
    def transport_protocol_name(self, transport_protocol_name):
        """Sets the transport_protocol_name of this AuditLogEvent.

        A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.

        :param transport_protocol_name: The transport_protocol_name of this AuditLogEvent.
        :type transport_protocol_name: str
        """

        self._transport_protocol_name = transport_protocol_name

    @property
    def user(self):
        """Gets the user of this AuditLogEvent.

        The user that was affected by the action performed (if available).

        :return: The user of this AuditLogEvent.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuditLogEvent.

        The user that was affected by the action performed (if available).

        :param user: The user of this AuditLogEvent.
        :type user: str
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this AuditLogEvent.


        :return: The user_id of this AuditLogEvent.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditLogEvent.


        :param user_id: The user_id of this AuditLogEvent.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def visibility(self):
        """Gets the visibility of this AuditLogEvent.

        The repository visibility, for example `public` or `private`.

        :return: The visibility of this AuditLogEvent.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this AuditLogEvent.

        The repository visibility, for example `public` or `private`.

        :param visibility: The visibility of this AuditLogEvent.
        :type visibility: str
        """

        self._visibility = visibility
