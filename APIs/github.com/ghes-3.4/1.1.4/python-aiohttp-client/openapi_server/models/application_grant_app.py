# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGrantApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, name: str=None, url: str=None):
        """ApplicationGrantApp - a model defined in OpenAPI

        :param client_id: The client_id of this ApplicationGrantApp.
        :param name: The name of this ApplicationGrantApp.
        :param url: The url of this ApplicationGrantApp.
        """
        self.openapi_types = {
            'client_id': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'name': 'name',
            'url': 'url'
        }

        self._client_id = client_id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGrantApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The application_grant_app of this ApplicationGrantApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ApplicationGrantApp.


        :return: The client_id of this ApplicationGrantApp.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ApplicationGrantApp.


        :param client_id: The client_id of this ApplicationGrantApp.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this ApplicationGrantApp.


        :return: The name of this ApplicationGrantApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationGrantApp.


        :param name: The name of this ApplicationGrantApp.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this ApplicationGrantApp.


        :return: The url of this ApplicationGrantApp.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApplicationGrantApp.


        :param url: The url of this ApplicationGrantApp.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
