# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Announcement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, announcement: str=None, expires_at: datetime=None):
        """Announcement - a model defined in OpenAPI

        :param announcement: The announcement of this Announcement.
        :param expires_at: The expires_at of this Announcement.
        """
        self.openapi_types = {
            'announcement': str,
            'expires_at': datetime
        }

        self.attribute_map = {
            'announcement': 'announcement',
            'expires_at': 'expires_at'
        }

        self._announcement = announcement
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Announcement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The announcement of this Announcement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def announcement(self):
        """Gets the announcement of this Announcement.

        The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.4/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"

        :return: The announcement of this Announcement.
        :rtype: str
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this Announcement.

        The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.4/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"

        :param announcement: The announcement of this Announcement.
        :type announcement: str
        """
        if announcement is None:
            raise ValueError("Invalid value for `announcement`, must not be `None`")

        self._announcement = announcement

    @property
    def expires_at(self):
        """Gets the expires_at of this Announcement.

        The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.

        :return: The expires_at of this Announcement.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Announcement.

        The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.

        :param expires_at: The expires_at of this Announcement.
        :type expires_at: datetime
        """

        self._expires_at = expires_at
