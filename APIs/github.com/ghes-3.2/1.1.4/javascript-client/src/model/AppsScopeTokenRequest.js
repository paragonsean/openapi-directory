/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppPermissions from './AppPermissions';

/**
 * The AppsScopeTokenRequest model module.
 * @module model/AppsScopeTokenRequest
 * @version 1.1.4
 */
class AppsScopeTokenRequest {
    /**
     * Constructs a new <code>AppsScopeTokenRequest</code>.
     * @alias module:model/AppsScopeTokenRequest
     * @param accessToken {String} The OAuth access token used to authenticate to the GitHub API.
     */
    constructor(accessToken) { 
        
        AppsScopeTokenRequest.initialize(this, accessToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken) { 
        obj['access_token'] = accessToken;
    }

    /**
     * Constructs a <code>AppsScopeTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppsScopeTokenRequest} obj Optional instance to populate.
     * @return {module:model/AppsScopeTokenRequest} The populated <code>AppsScopeTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppsScopeTokenRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = AppPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('repositories')) {
                obj['repositories'] = ApiClient.convertToType(data['repositories'], ['String']);
            }
            if (data.hasOwnProperty('repository_ids')) {
                obj['repository_ids'] = ApiClient.convertToType(data['repository_ids'], ['Number']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('target_id')) {
                obj['target_id'] = ApiClient.convertToType(data['target_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppsScopeTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppsScopeTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppsScopeTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          AppPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['repositories'])) {
            throw new Error("Expected the field `repositories` to be an array in the JSON data but got " + data['repositories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['repository_ids'])) {
            throw new Error("Expected the field `repository_ids` to be an array in the JSON data but got " + data['repository_ids']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}

AppsScopeTokenRequest.RequiredProperties = ["access_token"];

/**
 * The OAuth access token used to authenticate to the GitHub API.
 * @member {String} access_token
 */
AppsScopeTokenRequest.prototype['access_token'] = undefined;

/**
 * @member {module:model/AppPermissions} permissions
 */
AppsScopeTokenRequest.prototype['permissions'] = undefined;

/**
 * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
 * @member {Array.<String>} repositories
 */
AppsScopeTokenRequest.prototype['repositories'] = undefined;

/**
 * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
 * @member {Array.<Number>} repository_ids
 */
AppsScopeTokenRequest.prototype['repository_ids'] = undefined;

/**
 * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
 * @member {String} target
 */
AppsScopeTokenRequest.prototype['target'] = undefined;

/**
 * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
 * @member {Number} target_id
 */
AppsScopeTokenRequest.prototype['target_id'] = undefined;






export default AppsScopeTokenRequest;

