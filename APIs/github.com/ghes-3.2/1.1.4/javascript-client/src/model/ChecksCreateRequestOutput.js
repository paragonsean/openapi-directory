/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChecksCreateRequestOutputAnnotationsInner from './ChecksCreateRequestOutputAnnotationsInner';
import ChecksCreateRequestOutputImagesInner from './ChecksCreateRequestOutputImagesInner';

/**
 * The ChecksCreateRequestOutput model module.
 * @module model/ChecksCreateRequestOutput
 * @version 1.1.4
 */
class ChecksCreateRequestOutput {
    /**
     * Constructs a new <code>ChecksCreateRequestOutput</code>.
     * Check runs can accept a variety of data in the &#x60;output&#x60; object, including a &#x60;title&#x60; and &#x60;summary&#x60; and can optionally provide descriptive details about the run.
     * @alias module:model/ChecksCreateRequestOutput
     * @param summary {String} The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
     * @param title {String} The title of the check run.
     */
    constructor(summary, title) { 
        
        ChecksCreateRequestOutput.initialize(this, summary, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, summary, title) { 
        obj['summary'] = summary;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ChecksCreateRequestOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChecksCreateRequestOutput} obj Optional instance to populate.
     * @return {module:model/ChecksCreateRequestOutput} The populated <code>ChecksCreateRequestOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChecksCreateRequestOutput();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], [ChecksCreateRequestOutputAnnotationsInner]);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ChecksCreateRequestOutputImagesInner]);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChecksCreateRequestOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChecksCreateRequestOutput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChecksCreateRequestOutput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['annotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['annotations'])) {
                throw new Error("Expected the field `annotations` to be an array in the JSON data but got " + data['annotations']);
            }
            // validate the optional field `annotations` (array)
            for (const item of data['annotations']) {
                ChecksCreateRequestOutputAnnotationsInner.validateJSON(item);
            };
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ChecksCreateRequestOutputImagesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ChecksCreateRequestOutput.RequiredProperties = ["summary", "title"];

/**
 * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.2/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".
 * @member {Array.<module:model/ChecksCreateRequestOutputAnnotationsInner>} annotations
 */
ChecksCreateRequestOutput.prototype['annotations'] = undefined;

/**
 * Adds images to the output displayed in the GitHub pull request UI.
 * @member {Array.<module:model/ChecksCreateRequestOutputImagesInner>} images
 */
ChecksCreateRequestOutput.prototype['images'] = undefined;

/**
 * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
 * @member {String} summary
 */
ChecksCreateRequestOutput.prototype['summary'] = undefined;

/**
 * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
 * @member {String} text
 */
ChecksCreateRequestOutput.prototype['text'] = undefined;

/**
 * The title of the check run.
 * @member {String} title
 */
ChecksCreateRequestOutput.prototype['title'] = undefined;






export default ChecksCreateRequestOutput;

