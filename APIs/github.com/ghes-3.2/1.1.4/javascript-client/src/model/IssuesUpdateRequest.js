/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IssuesCreateRequestLabelsInner from './IssuesCreateRequestLabelsInner';
import IssuesUpdateRequestMilestone from './IssuesUpdateRequestMilestone';
import IssuesUpdateRequestTitle from './IssuesUpdateRequestTitle';

/**
 * The IssuesUpdateRequest model module.
 * @module model/IssuesUpdateRequest
 * @version 1.1.4
 */
class IssuesUpdateRequest {
    /**
     * Constructs a new <code>IssuesUpdateRequest</code>.
     * @alias module:model/IssuesUpdateRequest
     */
    constructor() { 
        
        IssuesUpdateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuesUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuesUpdateRequest} obj Optional instance to populate.
     * @return {module:model/IssuesUpdateRequest} The populated <code>IssuesUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuesUpdateRequest();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], ['String']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [IssuesCreateRequestLabelsInner]);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = IssuesUpdateRequestMilestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('state_reason')) {
                obj['state_reason'] = ApiClient.convertToType(data['state_reason'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = IssuesUpdateRequestTitle.constructFromObject(data['title']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuesUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuesUpdateRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assignee'] && !(typeof data['assignee'] === 'string' || data['assignee'] instanceof String)) {
            throw new Error("Expected the field `assignee` to be a primitive type in the JSON string but got " + data['assignee']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['assignees'])) {
            throw new Error("Expected the field `assignees` to be an array in the JSON data but got " + data['assignees']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                IssuesCreateRequestLabelsInner.validateJSON(item);
            };
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          IssuesUpdateRequestMilestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['state_reason'] && !(typeof data['state_reason'] === 'string' || data['state_reason'] instanceof String)) {
            throw new Error("Expected the field `state_reason` to be a primitive type in the JSON string but got " + data['state_reason']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          IssuesUpdateRequestTitle.validateJSON(data['title']);
        }

        return true;
    }


}



/**
 * Login for the user that this issue should be assigned to. **This field is deprecated.**
 * @member {String} assignee
 */
IssuesUpdateRequest.prototype['assignee'] = undefined;

/**
 * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
 * @member {Array.<String>} assignees
 */
IssuesUpdateRequest.prototype['assignees'] = undefined;

/**
 * The contents of the issue.
 * @member {String} body
 */
IssuesUpdateRequest.prototype['body'] = undefined;

/**
 * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
 * @member {Array.<module:model/IssuesCreateRequestLabelsInner>} labels
 */
IssuesUpdateRequest.prototype['labels'] = undefined;

/**
 * @member {module:model/IssuesUpdateRequestMilestone} milestone
 */
IssuesUpdateRequest.prototype['milestone'] = undefined;

/**
 * State of the issue. Either `open` or `closed`.
 * @member {module:model/IssuesUpdateRequest.StateEnum} state
 */
IssuesUpdateRequest.prototype['state'] = undefined;

/**
 * The reason for the current state
 * @member {module:model/IssuesUpdateRequest.StateReasonEnum} state_reason
 */
IssuesUpdateRequest.prototype['state_reason'] = undefined;

/**
 * @member {module:model/IssuesUpdateRequestTitle} title
 */
IssuesUpdateRequest.prototype['title'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
IssuesUpdateRequest['StateEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};


/**
 * Allowed values for the <code>state_reason</code> property.
 * @enum {String}
 * @readonly
 */
IssuesUpdateRequest['StateReasonEnum'] = {

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "not_planned"
     * @const
     */
    "not_planned": "not_planned",

    /**
     * value: "reopened"
     * @const
     */
    "reopened": "reopened"
};



export default IssuesUpdateRequest;

