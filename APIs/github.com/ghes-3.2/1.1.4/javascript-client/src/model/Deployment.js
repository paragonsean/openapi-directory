/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentPayload from './DeploymentPayload';
import NullableIntegration from './NullableIntegration';
import NullableSimpleUser from './NullableSimpleUser';

/**
 * The Deployment model module.
 * @module model/Deployment
 * @version 1.1.4
 */
class Deployment {
    /**
     * Constructs a new <code>Deployment</code>.
     * A request for a specific ref(branch,sha,tag) to be deployed
     * @alias module:model/Deployment
     * @param createdAt {Date} 
     * @param creator {module:model/NullableSimpleUser} 
     * @param description {String} 
     * @param environment {String} Name for the target deployment environment.
     * @param id {Number} Unique identifier of the deployment
     * @param nodeId {String} 
     * @param payload {module:model/DeploymentPayload} 
     * @param ref {String} The ref to deploy. This can be a branch, tag, or sha.
     * @param repositoryUrl {String} 
     * @param sha {String} 
     * @param statusesUrl {String} 
     * @param task {String} Parameter to specify a task to execute
     * @param updatedAt {Date} 
     * @param url {String} 
     */
    constructor(createdAt, creator, description, environment, id, nodeId, payload, ref, repositoryUrl, sha, statusesUrl, task, updatedAt, url) { 
        
        Deployment.initialize(this, createdAt, creator, description, environment, id, nodeId, payload, ref, repositoryUrl, sha, statusesUrl, task, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, creator, description, environment, id, nodeId, payload, ref, repositoryUrl, sha, statusesUrl, task, updatedAt, url) { 
        obj['created_at'] = createdAt;
        obj['creator'] = creator;
        obj['description'] = description;
        obj['environment'] = environment;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['payload'] = payload;
        obj['ref'] = ref;
        obj['repository_url'] = repositoryUrl;
        obj['sha'] = sha;
        obj['statuses_url'] = statusesUrl;
        obj['task'] = task;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Deployment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deployment} obj Optional instance to populate.
     * @return {module:model/Deployment} The populated <code>Deployment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deployment();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = NullableSimpleUser.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('original_environment')) {
                obj['original_environment'] = ApiClient.convertToType(data['original_environment'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = DeploymentPayload.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('performed_via_github_app')) {
                obj['performed_via_github_app'] = NullableIntegration.constructFromObject(data['performed_via_github_app']);
            }
            if (data.hasOwnProperty('production_environment')) {
                obj['production_environment'] = ApiClient.convertToType(data['production_environment'], 'Boolean');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('repository_url')) {
                obj['repository_url'] = ApiClient.convertToType(data['repository_url'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], 'String');
            }
            if (data.hasOwnProperty('transient_environment')) {
                obj['transient_environment'] = ApiClient.convertToType(data['transient_environment'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deployment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deployment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Deployment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          NullableSimpleUser.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['original_environment'] && !(typeof data['original_environment'] === 'string' || data['original_environment'] instanceof String)) {
            throw new Error("Expected the field `original_environment` to be a primitive type in the JSON string but got " + data['original_environment']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          DeploymentPayload.validateJSON(data['payload']);
        }
        // validate the optional field `performed_via_github_app`
        if (data['performed_via_github_app']) { // data not null
          NullableIntegration.validateJSON(data['performed_via_github_app']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['repository_url'] && !(typeof data['repository_url'] === 'string' || data['repository_url'] instanceof String)) {
            throw new Error("Expected the field `repository_url` to be a primitive type in the JSON string but got " + data['repository_url']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['task'] && !(typeof data['task'] === 'string' || data['task'] instanceof String)) {
            throw new Error("Expected the field `task` to be a primitive type in the JSON string but got " + data['task']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Deployment.RequiredProperties = ["created_at", "creator", "description", "environment", "id", "node_id", "payload", "ref", "repository_url", "sha", "statuses_url", "task", "updated_at", "url"];

/**
 * @member {Date} created_at
 */
Deployment.prototype['created_at'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} creator
 */
Deployment.prototype['creator'] = undefined;

/**
 * @member {String} description
 */
Deployment.prototype['description'] = undefined;

/**
 * Name for the target deployment environment.
 * @member {String} environment
 */
Deployment.prototype['environment'] = undefined;

/**
 * Unique identifier of the deployment
 * @member {Number} id
 */
Deployment.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
Deployment.prototype['node_id'] = undefined;

/**
 * @member {String} original_environment
 */
Deployment.prototype['original_environment'] = undefined;

/**
 * @member {module:model/DeploymentPayload} payload
 */
Deployment.prototype['payload'] = undefined;

/**
 * @member {module:model/NullableIntegration} performed_via_github_app
 */
Deployment.prototype['performed_via_github_app'] = undefined;

/**
 * Specifies if the given environment is one that end-users directly interact with. Default: false.
 * @member {Boolean} production_environment
 */
Deployment.prototype['production_environment'] = undefined;

/**
 * The ref to deploy. This can be a branch, tag, or sha.
 * @member {String} ref
 */
Deployment.prototype['ref'] = undefined;

/**
 * @member {String} repository_url
 */
Deployment.prototype['repository_url'] = undefined;

/**
 * @member {String} sha
 */
Deployment.prototype['sha'] = undefined;

/**
 * @member {String} statuses_url
 */
Deployment.prototype['statuses_url'] = undefined;

/**
 * Parameter to specify a task to execute
 * @member {String} task
 */
Deployment.prototype['task'] = undefined;

/**
 * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
 * @member {Boolean} transient_environment
 */
Deployment.prototype['transient_environment'] = undefined;

/**
 * @member {Date} updated_at
 */
Deployment.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
Deployment.prototype['url'] = undefined;






export default Deployment;

