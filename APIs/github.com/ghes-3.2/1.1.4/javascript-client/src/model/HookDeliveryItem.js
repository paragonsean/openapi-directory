/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HookDeliveryItem model module.
 * @module model/HookDeliveryItem
 * @version 1.1.4
 */
class HookDeliveryItem {
    /**
     * Constructs a new <code>HookDeliveryItem</code>.
     * Delivery made by a webhook, without request and response information.
     * @alias module:model/HookDeliveryItem
     * @param action {String} The type of activity for the event that triggered the delivery.
     * @param deliveredAt {Date} Time when the webhook delivery occurred.
     * @param duration {Number} Time spent delivering.
     * @param event {String} The event that triggered the delivery.
     * @param guid {String} Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
     * @param id {Number} Unique identifier of the webhook delivery.
     * @param installationId {Number} The id of the GitHub App installation associated with this event.
     * @param redelivery {Boolean} Whether the webhook delivery is a redelivery.
     * @param repositoryId {Number} The id of the repository associated with this event.
     * @param status {String} Describes the response returned after attempting the delivery.
     * @param statusCode {Number} Status code received when delivery was made.
     */
    constructor(action, deliveredAt, duration, event, guid, id, installationId, redelivery, repositoryId, status, statusCode) { 
        
        HookDeliveryItem.initialize(this, action, deliveredAt, duration, event, guid, id, installationId, redelivery, repositoryId, status, statusCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, deliveredAt, duration, event, guid, id, installationId, redelivery, repositoryId, status, statusCode) { 
        obj['action'] = action;
        obj['delivered_at'] = deliveredAt;
        obj['duration'] = duration;
        obj['event'] = event;
        obj['guid'] = guid;
        obj['id'] = id;
        obj['installation_id'] = installationId;
        obj['redelivery'] = redelivery;
        obj['repository_id'] = repositoryId;
        obj['status'] = status;
        obj['status_code'] = statusCode;
    }

    /**
     * Constructs a <code>HookDeliveryItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HookDeliveryItem} obj Optional instance to populate.
     * @return {module:model/HookDeliveryItem} The populated <code>HookDeliveryItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HookDeliveryItem();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('delivered_at')) {
                obj['delivered_at'] = ApiClient.convertToType(data['delivered_at'], 'Date');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('installation_id')) {
                obj['installation_id'] = ApiClient.convertToType(data['installation_id'], 'Number');
            }
            if (data.hasOwnProperty('redelivery')) {
                obj['redelivery'] = ApiClient.convertToType(data['redelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('repository_id')) {
                obj['repository_id'] = ApiClient.convertToType(data['repository_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('status_code')) {
                obj['status_code'] = ApiClient.convertToType(data['status_code'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HookDeliveryItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HookDeliveryItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HookDeliveryItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

HookDeliveryItem.RequiredProperties = ["action", "delivered_at", "duration", "event", "guid", "id", "installation_id", "redelivery", "repository_id", "status", "status_code"];

/**
 * The type of activity for the event that triggered the delivery.
 * @member {String} action
 */
HookDeliveryItem.prototype['action'] = undefined;

/**
 * Time when the webhook delivery occurred.
 * @member {Date} delivered_at
 */
HookDeliveryItem.prototype['delivered_at'] = undefined;

/**
 * Time spent delivering.
 * @member {Number} duration
 */
HookDeliveryItem.prototype['duration'] = undefined;

/**
 * The event that triggered the delivery.
 * @member {String} event
 */
HookDeliveryItem.prototype['event'] = undefined;

/**
 * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
 * @member {String} guid
 */
HookDeliveryItem.prototype['guid'] = undefined;

/**
 * Unique identifier of the webhook delivery.
 * @member {Number} id
 */
HookDeliveryItem.prototype['id'] = undefined;

/**
 * The id of the GitHub App installation associated with this event.
 * @member {Number} installation_id
 */
HookDeliveryItem.prototype['installation_id'] = undefined;

/**
 * Whether the webhook delivery is a redelivery.
 * @member {Boolean} redelivery
 */
HookDeliveryItem.prototype['redelivery'] = undefined;

/**
 * The id of the repository associated with this event.
 * @member {Number} repository_id
 */
HookDeliveryItem.prototype['repository_id'] = undefined;

/**
 * Describes the response returned after attempting the delivery.
 * @member {String} status
 */
HookDeliveryItem.prototype['status'] = undefined;

/**
 * Status code received when delivery was made.
 * @member {Number} status_code
 */
HookDeliveryItem.prototype['status_code'] = undefined;






export default HookDeliveryItem;

