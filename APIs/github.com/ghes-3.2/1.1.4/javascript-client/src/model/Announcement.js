/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Announcement model module.
 * @module model/Announcement
 * @version 1.1.4
 */
class Announcement {
    /**
     * Constructs a new <code>Announcement</code>.
     * Enterprise global announcement
     * @alias module:model/Announcement
     * @param announcement {String} The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.2/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"
     */
    constructor(announcement) { 
        
        Announcement.initialize(this, announcement);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, announcement) { 
        obj['announcement'] = announcement;
    }

    /**
     * Constructs a <code>Announcement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Announcement} obj Optional instance to populate.
     * @return {module:model/Announcement} The populated <code>Announcement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Announcement();

            if (data.hasOwnProperty('announcement')) {
                obj['announcement'] = ApiClient.convertToType(data['announcement'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Announcement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Announcement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Announcement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['announcement'] && !(typeof data['announcement'] === 'string' || data['announcement'] instanceof String)) {
            throw new Error("Expected the field `announcement` to be a primitive type in the JSON string but got " + data['announcement']);
        }

        return true;
    }


}

Announcement.RequiredProperties = ["announcement"];

/**
 * The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.2/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"
 * @member {String} announcement
 */
Announcement.prototype['announcement'] = undefined;

/**
 * The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
 * @member {Date} expires_at
 */
Announcement.prototype['expires_at'] = undefined;






export default Announcement;

