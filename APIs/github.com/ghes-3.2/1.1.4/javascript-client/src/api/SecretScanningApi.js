/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityListPublicEvents503Response from '../model/ActivityListPublicEvents503Response';
import SecretScanningAlert from '../model/SecretScanningAlert';
import SecretScanningUpdateAlertRequest from '../model/SecretScanningUpdateAlertRequest';

/**
* SecretScanning service.
* @module api/SecretScanningApi
* @version 1.1.4
*/
export default class SecretScanningApi {

    /**
    * Constructs a new SecretScanningApi. 
    * @alias module:api/SecretScanningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the secretScanningGetAlert operation.
     * @callback module:api/SecretScanningApi~secretScanningGetAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a secret scanning alert
     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.  GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:api/SecretScanningApi~secretScanningGetAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretScanningAlert}
     */
    secretScanningGetAlert(owner, repo, alertNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningGetAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningGetAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling secretScanningGetAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningListAlertsForRepo operation.
     * @callback module:api/SecretScanningApi~secretScanningListAlertsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SecretScanningAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secret scanning alerts for a repository
     * Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.  GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     * @param {String} [secretType] A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.2/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types.
     * @param {String} [resolution] A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {module:api/SecretScanningApi~secretScanningListAlertsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SecretScanningAlert>}
     */
    secretScanningListAlertsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningListAlertsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningListAlertsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'secret_type': opts['secretType'],
        'resolution': opts['resolution'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SecretScanningAlert];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningUpdateAlert operation.
     * @callback module:api/SecretScanningApi~secretScanningUpdateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a secret scanning alert
     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.  GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:model/SecretScanningUpdateAlertRequest} secretScanningUpdateAlertRequest 
     * @param {module:api/SecretScanningApi~secretScanningUpdateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretScanningAlert}
     */
    secretScanningUpdateAlert(owner, repo, alertNumber, secretScanningUpdateAlertRequest, callback) {
      let postBody = secretScanningUpdateAlertRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'secretScanningUpdateAlertRequest' is set
      if (secretScanningUpdateAlertRequest === undefined || secretScanningUpdateAlertRequest === null) {
        throw new Error("Missing the required parameter 'secretScanningUpdateAlertRequest' when calling secretScanningUpdateAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
