/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsCreateOrUpdateEnvironmentSecretRequest from '../model/ActionsCreateOrUpdateEnvironmentSecretRequest';
import ActionsCreateOrUpdateOrgSecretRequest from '../model/ActionsCreateOrUpdateOrgSecretRequest';
import ActionsCreateOrUpdateRepoSecretRequest from '../model/ActionsCreateOrUpdateRepoSecretRequest';
import ActionsCreateSelfHostedRunnerGroupForOrgRequest from '../model/ActionsCreateSelfHostedRunnerGroupForOrgRequest';
import ActionsCreateWorkflowDispatchRequest from '../model/ActionsCreateWorkflowDispatchRequest';
import ActionsGetWorkflowWorkflowIdParameter from '../model/ActionsGetWorkflowWorkflowIdParameter';
import ActionsListArtifactsForRepo200Response from '../model/ActionsListArtifactsForRepo200Response';
import ActionsListJobsForWorkflowRun200Response from '../model/ActionsListJobsForWorkflowRun200Response';
import ActionsListOrgSecrets200Response from '../model/ActionsListOrgSecrets200Response';
import ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response from '../model/ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response';
import ActionsListRepoSecrets200Response from '../model/ActionsListRepoSecrets200Response';
import ActionsListRepoWorkflows200Response from '../model/ActionsListRepoWorkflows200Response';
import ActionsListSelectedReposForOrgSecret200Response from '../model/ActionsListSelectedReposForOrgSecret200Response';
import ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response from '../model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response';
import ActionsListSelfHostedRunnerGroupsForOrg200Response from '../model/ActionsListSelfHostedRunnerGroupsForOrg200Response';
import ActionsListSelfHostedRunnersForOrg200Response from '../model/ActionsListSelfHostedRunnersForOrg200Response';
import ActionsListWorkflowRunsForRepo200Response from '../model/ActionsListWorkflowRunsForRepo200Response';
import ActionsOrganizationPermissions from '../model/ActionsOrganizationPermissions';
import ActionsPublicKey from '../model/ActionsPublicKey';
import ActionsRepositoryPermissions from '../model/ActionsRepositoryPermissions';
import ActionsReviewPendingDeploymentsForRunRequest from '../model/ActionsReviewPendingDeploymentsForRunRequest';
import ActionsSecret from '../model/ActionsSecret';
import ActionsSetGithubActionsPermissionsOrganizationRequest from '../model/ActionsSetGithubActionsPermissionsOrganizationRequest';
import ActionsSetGithubActionsPermissionsRepositoryRequest from '../model/ActionsSetGithubActionsPermissionsRepositoryRequest';
import ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest from '../model/ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest';
import ActionsSetSelectedReposForOrgSecretRequest from '../model/ActionsSetSelectedReposForOrgSecretRequest';
import ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest from '../model/ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest';
import ActionsUpdateSelfHostedRunnerGroupForOrgRequest from '../model/ActionsUpdateSelfHostedRunnerGroupForOrgRequest';
import Artifact from '../model/Artifact';
import AuthenticationToken from '../model/AuthenticationToken';
import BasicError from '../model/BasicError';
import Deployment from '../model/Deployment';
import EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response from '../model/EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response';
import EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest from '../model/EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest';
import EnvironmentApprovals from '../model/EnvironmentApprovals';
import Job from '../model/Job';
import OrganizationActionsSecret from '../model/OrganizationActionsSecret';
import PendingDeployment from '../model/PendingDeployment';
import Runner from '../model/Runner';
import RunnerApplication from '../model/RunnerApplication';
import RunnerGroupsOrg from '../model/RunnerGroupsOrg';
import SelectedActions from '../model/SelectedActions';
import Workflow from '../model/Workflow';
import WorkflowRun from '../model/WorkflowRun';

/**
* Actions service.
* @module api/ActionsApi
* @version 1.1.4
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionsAddRepoAccessToSelfHostedRunnerGroupInOrg operation.
     * @callback module:api/ActionsApi~actionsAddRepoAccessToSelfHostedRunnerGroupInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add repository access to a self-hosted runner group in an organization
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\" You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsAddRepoAccessToSelfHostedRunnerGroupInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAddSelectedRepoToOrgSecret operation.
     * @callback module:api/ActionsApi~actionsAddSelectedRepoToOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsAddSelectedRepoToOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsAddSelectedRepoToOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAddSelfHostedRunnerToGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsAddSelfHostedRunnerToGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a self-hosted runner to a group for an organization
     * Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsAddSelfHostedRunnerToGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsAddSelfHostedRunnerToGroupForOrg(org, runnerGroupId, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddSelfHostedRunnerToGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsAddSelfHostedRunnerToGroupForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsAddSelfHostedRunnerToGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCancelWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsCancelWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsCancelWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCancelWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCancelWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCancelWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsCancelWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an environment secret
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  ``` const sodium = require('libsodium-wrappers') const secret = 'plain-text-secret' // replace with the secret you want to encrypt const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() => {   // Convert Secret & Base64 key to Uint8Array.   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec = sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes = sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); ```  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {String} environmentName The name of the environment.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateEnvironmentSecretRequest} actionsCreateOrUpdateEnvironmentSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateEnvironmentSecret(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateEnvironmentSecretRequest;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' is set
      if (actionsCreateOrUpdateEnvironmentSecretRequest === undefined || actionsCreateOrUpdateEnvironmentSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' when calling actionsCreateOrUpdateEnvironmentSecret");
      }

      let pathParams = {
        'repository_id': repositoryId,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateOrgSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  ``` const sodium = require('libsodium-wrappers') const secret = 'plain-text-secret' // replace with the secret you want to encrypt const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() => {   // Convert Secret & Base64 key to Uint8Array.   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec = sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes = sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); ```  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateOrgSecretRequest} actionsCreateOrUpdateOrgSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateOrgSecret(org, secretName, actionsCreateOrUpdateOrgSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateOrgSecretRequest' is set
      if (actionsCreateOrUpdateOrgSecretRequest === undefined || actionsCreateOrUpdateOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateOrgSecretRequest' when calling actionsCreateOrUpdateOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateRepoSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  ``` const sodium = require('libsodium-wrappers') const secret = 'plain-text-secret' // replace with the secret you want to encrypt const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() => {   // Convert Secret & Base64 key to Uint8Array.   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec = sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes = sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); ```  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  ``` from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -> str:   \"\"\"Encrypt a Unicode string using the public key.\"\"\"   public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())   sealed_box = public.SealedBox(public_key)   encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))   return b64encode(encrypted).decode(\"utf-8\") ```  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  ``` var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\"); var publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");  var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); ```  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  ```ruby require \"rbnacl\" require \"base64\"  key = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\") public_key = RbNaCl::PublicKey.new(key)  box = RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret = box.encrypt(\"my_secret\")  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) ```
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateRepoSecretRequest} actionsCreateOrUpdateRepoSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateRepoSecret(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateRepoSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateRepoSecretRequest' is set
      if (actionsCreateOrUpdateRepoSecretRequest === undefined || actionsCreateOrUpdateRepoSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateRepoSecretRequest' when calling actionsCreateOrUpdateRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRegistrationTokenForOrg operation.
     * @callback module:api/ActionsApi~actionsCreateRegistrationTokenForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the `config` script. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRegistrationTokenForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRegistrationTokenForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateRegistrationTokenForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/registration-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRegistrationTokenForRepo operation.
     * @callback module:api/ActionsApi~actionsCreateRegistrationTokenForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.  ``` ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN ```
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRegistrationTokenForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRegistrationTokenForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateRegistrationTokenForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateRegistrationTokenForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/registration-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRemoveTokenForOrg operation.
     * @callback module:api/ActionsApi~actionsCreateRemoveTokenForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRemoveTokenForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRemoveTokenForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateRemoveTokenForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/remove-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRemoveTokenForRepo operation.
     * @callback module:api/ActionsApi~actionsCreateRemoveTokenForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the `repo` scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  ``` ./config.sh remove --token TOKEN ```
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRemoveTokenForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRemoveTokenForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateRemoveTokenForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateRemoveTokenForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/remove-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateSelfHostedRunnerGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsCreateSelfHostedRunnerGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunnerGroupsOrg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a self-hosted runner group for an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsCreateSelfHostedRunnerGroupForOrgRequest} actionsCreateSelfHostedRunnerGroupForOrgRequest 
     * @param {module:api/ActionsApi~actionsCreateSelfHostedRunnerGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunnerGroupsOrg}
     */
    actionsCreateSelfHostedRunnerGroupForOrg(org, actionsCreateSelfHostedRunnerGroupForOrgRequest, callback) {
      let postBody = actionsCreateSelfHostedRunnerGroupForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateSelfHostedRunnerGroupForOrg");
      }
      // verify the required parameter 'actionsCreateSelfHostedRunnerGroupForOrgRequest' is set
      if (actionsCreateSelfHostedRunnerGroupForOrgRequest === undefined || actionsCreateSelfHostedRunnerGroupForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateSelfHostedRunnerGroupForOrgRequest' when calling actionsCreateSelfHostedRunnerGroupForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunnerGroupsOrg;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateWorkflowDispatch operation.
     * @callback module:api/ActionsApi~actionsCreateWorkflowDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:model/ActionsCreateWorkflowDispatchRequest} actionsCreateWorkflowDispatchRequest 
     * @param {module:api/ActionsApi~actionsCreateWorkflowDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsCreateWorkflowDispatch(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, callback) {
      let postBody = actionsCreateWorkflowDispatchRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'actionsCreateWorkflowDispatchRequest' is set
      if (actionsCreateWorkflowDispatchRequest === undefined || actionsCreateWorkflowDispatchRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateWorkflowDispatchRequest' when calling actionsCreateWorkflowDispatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteArtifact operation.
     * @callback module:api/ActionsApi~actionsDeleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {module:api/ActionsApi~actionsDeleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteArtifact(owner, repo, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsDeleteArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment secret
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {String} environmentName The name of the environment.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteEnvironmentSecret(repositoryId, environmentName, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsDeleteEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsDeleteEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteEnvironmentSecret");
      }

      let pathParams = {
        'repository_id': repositoryId,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteOrgSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteRepoSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteSelfHostedRunnerFromOrg operation.
     * @callback module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteSelfHostedRunnerFromOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerFromOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteSelfHostedRunnerFromRepo operation.
     * @callback module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromRepoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromRepoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteSelfHostedRunnerFromRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteSelfHostedRunnerGroupFromOrg operation.
     * @callback module:api/ActionsApi~actionsDeleteSelfHostedRunnerGroupFromOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a self-hosted runner group from an organization
     * Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {module:api/ActionsApi~actionsDeleteSelfHostedRunnerGroupFromOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteSelfHostedRunnerGroupFromOrg(org, runnerGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerGroupFromOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsDeleteSelfHostedRunnerGroupFromOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsDeleteWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDeleteWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteWorkflowRunLogs operation.
     * @callback module:api/ActionsApi~actionsDeleteWorkflowRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDeleteWorkflowRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteWorkflowRunLogs(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRunLogs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRunLogs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRunLogs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDisableSelectedRepositoryGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsDisableSelectedRepositoryGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsDisableSelectedRepositoryGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDisableSelectedRepositoryGithubActionsOrganization(org, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDisableSelectedRepositoryGithubActionsOrganization");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsDisableSelectedRepositoryGithubActionsOrganization");
      }

      let pathParams = {
        'org': org,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDisableWorkflow operation.
     * @callback module:api/ActionsApi~actionsDisableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a workflow
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsDisableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDisableWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDisableWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDisableWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsDisableWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadArtifact operation.
     * @callback module:api/ActionsApi~actionsDownloadArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {String} archiveFormat 
     * @param {module:api/ActionsApi~actionsDownloadArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadArtifact(owner, repo, artifactId, archiveFormat, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'archiveFormat' is set
      if (archiveFormat === undefined || archiveFormat === null) {
        throw new Error("Missing the required parameter 'archiveFormat' when calling actionsDownloadArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId,
        'archive_format': archiveFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadJobLogsForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsDownloadJobLogsForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} jobId The unique identifier of the job.
     * @param {module:api/ActionsApi~actionsDownloadJobLogsForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadJobLogsForWorkflowRun(owner, repo, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadJobLogsForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadJobLogsForWorkflowRun");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling actionsDownloadJobLogsForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadWorkflowRunLogs operation.
     * @callback module:api/ActionsApi~actionsDownloadWorkflowRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDownloadWorkflowRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadWorkflowRunLogs(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunLogs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunLogs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunLogs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsEnableSelectedRepositoryGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsEnableSelectedRepositoryGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsEnableSelectedRepositoryGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsEnableSelectedRepositoryGithubActionsOrganization(org, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsEnableSelectedRepositoryGithubActionsOrganization");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsEnableSelectedRepositoryGithubActionsOrganization");
      }

      let pathParams = {
        'org': org,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsEnableWorkflow operation.
     * @callback module:api/ActionsApi~actionsEnableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a workflow
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsEnableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsEnableWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsEnableWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsEnableWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsEnableWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetAllowedActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsGetAllowedActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get allowed actions for an organization
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetAllowedActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectedActions}
     */
    actionsGetAllowedActionsOrganization(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetAllowedActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectedActions;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/selected-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetAllowedActionsRepository operation.
     * @callback module:api/ActionsApi~actionsGetAllowedActionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get allowed actions for a repository
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetAllowedActionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectedActions}
     */
    actionsGetAllowedActionsRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetAllowedActionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetAllowedActionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectedActions;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetArtifact operation.
     * @callback module:api/ActionsApi~actionsGetArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {module:api/ActionsApi~actionsGetArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    actionsGetArtifact(owner, repo, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsGetArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEnvironmentPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetEnvironmentPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment public key
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {String} environmentName The name of the environment.
     * @param {module:api/ActionsApi~actionsGetEnvironmentPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetEnvironmentPublicKey(repositoryId, environmentName, callback) {
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsGetEnvironmentPublicKey");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentPublicKey");
      }

      let pathParams = {
        'repository_id': repositoryId,
        'environment_name': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsGetEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment secret
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {String} environmentName The name of the environment.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsSecret}
     */
    actionsGetEnvironmentSecret(repositoryId, environmentName, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsGetEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetEnvironmentSecret");
      }

      let pathParams = {
        'repository_id': repositoryId,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsSecret;
      return this.apiClient.callApi(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsOrganizationPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsOrganizationPermissions}
     */
    actionsGetGithubActionsPermissionsOrganization(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetGithubActionsPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsOrganizationPermissions;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsRepositoryPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsRepositoryPermissions}
     */
    actionsGetGithubActionsPermissionsRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetGithubActionsPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsRepositoryPermissions;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetJobForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsGetJobForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} jobId The unique identifier of the job.
     * @param {module:api/ActionsApi~actionsGetJobForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    actionsGetJobForWorkflowRun(owner, repo, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetJobForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetJobForWorkflowRun");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling actionsGetJobForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetOrgPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetOrgPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetOrgPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetOrgPublicKey(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetOrgPublicKey");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetOrgSecret operation.
     * @callback module:api/ActionsApi~actionsGetOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationActionsSecret}
     */
    actionsGetOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationActionsSecret;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetPendingDeploymentsForRun operation.
     * @callback module:api/ActionsApi~actionsGetPendingDeploymentsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PendingDeployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pending deployments for a workflow run
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsGetPendingDeploymentsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PendingDeployment>}
     */
    actionsGetPendingDeploymentsForRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetPendingDeploymentsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetPendingDeploymentsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetPendingDeploymentsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PendingDeployment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetRepoPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetRepoPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetRepoPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetRepoPublicKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetRepoPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetRepoPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetRepoSecret operation.
     * @callback module:api/ActionsApi~actionsGetRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsSecret}
     */
    actionsGetRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetReviewsForRun operation.
     * @callback module:api/ActionsApi~actionsGetReviewsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EnvironmentApprovals>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the review history for a workflow run
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsGetReviewsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EnvironmentApprovals>}
     */
    actionsGetReviewsForRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetReviewsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetReviewsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetReviewsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EnvironmentApprovals];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsGetSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsGetSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    actionsGetSelfHostedRunnerForOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsGetSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsGetSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    actionsGetSelfHostedRunnerForRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetSelfHostedRunnerGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsGetSelfHostedRunnerGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunnerGroupsOrg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a self-hosted runner group for an organization
     * Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {module:api/ActionsApi~actionsGetSelfHostedRunnerGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunnerGroupsOrg}
     */
    actionsGetSelfHostedRunnerGroupForOrg(org, runnerGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsGetSelfHostedRunnerGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunnerGroupsOrg;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflow operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsGetWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    actionsGetWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsGetWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {module:api/ActionsApi~actionsGetWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRun}
     */
    actionsGetWorkflowRun(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'exclude_pull_requests': opts['excludePullRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRun;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListArtifactsForRepo operation.
     * @callback module:api/ActionsApi~actionsListArtifactsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListArtifactsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {String} [name] Filters artifacts by exact match on their name field.
     * @param {module:api/ActionsApi~actionsListArtifactsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListArtifactsForRepo200Response}
     */
    actionsListArtifactsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListArtifactsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListArtifactsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListArtifactsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListEnvironmentSecrets operation.
     * @callback module:api/ActionsApi~actionsListEnvironmentSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environment secrets
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {String} environmentName The name of the environment.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListEnvironmentSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoSecrets200Response}
     */
    actionsListEnvironmentSecrets(repositoryId, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsListEnvironmentSecrets");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsListEnvironmentSecrets");
      }

      let pathParams = {
        'repository_id': repositoryId,
        'environment_name': environmentName
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoSecrets200Response;
      return this.apiClient.callApi(
        '/repositories/{repository_id}/environments/{environment_name}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListJobsForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsListJobsForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListJobsForWorkflowRun200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'latest')] Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListJobsForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListJobsForWorkflowRun200Response}
     */
    actionsListJobsForWorkflowRun(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'filter': opts['filter'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListJobsForWorkflowRun200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListOrgSecrets operation.
     * @callback module:api/ActionsApi~actionsListOrgSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListOrgSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListOrgSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListOrgSecrets200Response}
     */
    actionsListOrgSecrets(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListOrgSecrets");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListOrgSecrets200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoAccessToSelfHostedRunnerGroupInOrg operation.
     * @callback module:api/ActionsApi~actionsListRepoAccessToSelfHostedRunnerGroupInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository access to a self-hosted runner group in an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).\"  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {module:api/ActionsApi~actionsListRepoAccessToSelfHostedRunnerGroupInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response}
     */
    actionsListRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsListRepoAccessToSelfHostedRunnerGroupInOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoSecrets operation.
     * @callback module:api/ActionsApi~actionsListRepoSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListRepoSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoSecrets200Response}
     */
    actionsListRepoSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoWorkflows operation.
     * @callback module:api/ActionsApi~actionsListRepoWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoWorkflows200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListRepoWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoWorkflows200Response}
     */
    actionsListRepoWorkflows(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoWorkflows");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoWorkflows");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoWorkflows200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRunnerApplicationsForOrg operation.
     * @callback module:api/ActionsApi~actionsListRunnerApplicationsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunnerApplication>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsListRunnerApplicationsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunnerApplication>}
     */
    actionsListRunnerApplicationsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListRunnerApplicationsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RunnerApplication];
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRunnerApplicationsForRepo operation.
     * @callback module:api/ActionsApi~actionsListRunnerApplicationsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunnerApplication>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsListRunnerApplicationsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunnerApplication>}
     */
    actionsListRunnerApplicationsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRunnerApplicationsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRunnerApplicationsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RunnerApplication];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelectedReposForOrgSecret operation.
     * @callback module:api/ActionsApi~actionsListSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {module:api/ActionsApi~actionsListSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    actionsListSelectedReposForOrgSecret(org, secretName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsListSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelectedRepositoriesEnabledGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response}
     */
    actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelectedRepositoriesEnabledGithubActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnerGroupsForOrg operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnerGroupsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelfHostedRunnerGroupsForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runner groups for an organization
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnerGroupsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelfHostedRunnerGroupsForOrg200Response}
     */
    actionsListSelfHostedRunnerGroupsForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelfHostedRunnerGroupsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelfHostedRunnerGroupsForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnersForOrg operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnersForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelfHostedRunnersForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnersForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelfHostedRunnersForOrg200Response}
     */
    actionsListSelfHostedRunnersForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelfHostedRunnersForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnersForRepo operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnersForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelfHostedRunnersForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnersForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelfHostedRunnersForOrg200Response}
     */
    actionsListSelfHostedRunnersForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListSelfHostedRunnersForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListSelfHostedRunnersForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelfHostedRunnersForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnersInGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnersInGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runners in a group for an organization
     * Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnersInGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response}
     */
    actionsListSelfHostedRunnersInGroupForOrg(org, runnerGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersInGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsListSelfHostedRunnersInGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRunArtifacts operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListArtifactsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/ActionsApi~actionsListWorkflowRunArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListArtifactsForRepo200Response}
     */
    actionsListWorkflowRunArtifacts(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRunArtifacts");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRunArtifacts");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsListWorkflowRunArtifacts");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListArtifactsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRuns operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListWorkflowRunsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow runs for a workflow
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {Object} opts Optional parameters
     * @param {String} [actor] Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param {String} [branch] Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param {String} [event] Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
     * @param {module:model/String} [status] Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Date} [created] Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.2/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {module:api/ActionsApi~actionsListWorkflowRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListWorkflowRunsForRepo200Response}
     */
    actionsListWorkflowRuns(owner, repo, workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRuns");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRuns");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsListWorkflowRuns");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
        'actor': opts['actor'],
        'branch': opts['branch'],
        'event': opts['event'],
        'status': opts['status'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'created': opts['created'],
        'exclude_pull_requests': opts['excludePullRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListWorkflowRunsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRunsForRepo operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListWorkflowRunsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [actor] Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param {String} [branch] Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param {String} [event] Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
     * @param {module:model/String} [status] Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Date} [created] Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.2/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {module:api/ActionsApi~actionsListWorkflowRunsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListWorkflowRunsForRepo200Response}
     */
    actionsListWorkflowRunsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRunsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRunsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'actor': opts['actor'],
        'branch': opts['branch'],
        'event': opts['event'],
        'status': opts['status'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'created': opts['created'],
        'exclude_pull_requests': opts['excludePullRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListWorkflowRunsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReRunWorkflow operation.
     * @callback module:api/ActionsApi~actionsReRunWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/ActionsApi~actionsReRunWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsReRunWorkflow(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReRunWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReRunWorkflow");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReRunWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg operation.
     * @callback module:api/ActionsApi~actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove repository access to a self-hosted runner group in an organization
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\" You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveSelectedRepoFromOrgSecret operation.
     * @callback module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveSelfHostedRunnerFromGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsRemoveSelfHostedRunnerFromGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a self-hosted runner from a group for an organization
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsRemoveSelfHostedRunnerFromGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsRemoveSelfHostedRunnerFromGroupForOrg(org, runnerGroupId, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReviewPendingDeploymentsForRun operation.
     * @callback module:api/ActionsApi~actionsReviewPendingDeploymentsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review pending deployments for a workflow run
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:model/ActionsReviewPendingDeploymentsForRunRequest} actionsReviewPendingDeploymentsForRunRequest 
     * @param {module:api/ActionsApi~actionsReviewPendingDeploymentsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    actionsReviewPendingDeploymentsForRun(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest, callback) {
      let postBody = actionsReviewPendingDeploymentsForRunRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'actionsReviewPendingDeploymentsForRunRequest' is set
      if (actionsReviewPendingDeploymentsForRunRequest === undefined || actionsReviewPendingDeploymentsForRunRequest === null) {
        throw new Error("Missing the required parameter 'actionsReviewPendingDeploymentsForRunRequest' when calling actionsReviewPendingDeploymentsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetAllowedActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetAllowedActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set allowed actions for an organization
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelectedActions} [selectedActions] 
     * @param {module:api/ActionsApi~actionsSetAllowedActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetAllowedActionsOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['selectedActions'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetAllowedActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/selected-actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetAllowedActionsRepository operation.
     * @callback module:api/ActionsApi~actionsSetAllowedActionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set allowed actions for a repository
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelectedActions} [selectedActions] 
     * @param {module:api/ActionsApi~actionsSetAllowedActionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetAllowedActionsRepository(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['selectedActions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetAllowedActionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetAllowedActionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsSetGithubActionsPermissionsOrganizationRequest} actionsSetGithubActionsPermissionsOrganizationRequest 
     * @param {module:api/ActionsApi~actionsSetGithubActionsPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsPermissionsOrganization(org, actionsSetGithubActionsPermissionsOrganizationRequest, callback) {
      let postBody = actionsSetGithubActionsPermissionsOrganizationRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetGithubActionsPermissionsOrganization");
      }
      // verify the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' is set
      if (actionsSetGithubActionsPermissionsOrganizationRequest === undefined || actionsSetGithubActionsPermissionsOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' when calling actionsSetGithubActionsPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.  You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:model/ActionsSetGithubActionsPermissionsRepositoryRequest} actionsSetGithubActionsPermissionsRepositoryRequest 
     * @param {module:api/ActionsApi~actionsSetGithubActionsPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsPermissionsRepository(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, callback) {
      let postBody = actionsSetGithubActionsPermissionsRepositoryRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' is set
      if (actionsSetGithubActionsPermissionsRepositoryRequest === undefined || actionsSetGithubActionsPermissionsRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' when calling actionsSetGithubActionsPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetRepoAccessToSelfHostedRunnerGroupInOrg operation.
     * @callback module:api/ActionsApi~actionsSetRepoAccessToSelfHostedRunnerGroupInOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set repository access for a self-hosted runner group in an organization
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {module:model/ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest} actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest 
     * @param {module:api/ActionsApi~actionsSetRepoAccessToSelfHostedRunnerGroupInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, callback) {
      let postBody = actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg");
      }
      // verify the required parameter 'actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest' is set
      if (actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest === undefined || actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelectedReposForOrgSecret operation.
     * @callback module:api/ActionsApi~actionsSetSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsSetSelectedReposForOrgSecretRequest} actionsSetSelectedReposForOrgSecretRequest 
     * @param {module:api/ActionsApi~actionsSetSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelectedReposForOrgSecret(org, secretName, actionsSetSelectedReposForOrgSecretRequest, callback) {
      let postBody = actionsSetSelectedReposForOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'actionsSetSelectedReposForOrgSecretRequest' is set
      if (actionsSetSelectedReposForOrgSecretRequest === undefined || actionsSetSelectedReposForOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetSelectedReposForOrgSecretRequest' when calling actionsSetSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelectedRepositoriesEnabledGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest} actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest 
     * @param {module:api/ActionsApi~actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, callback) {
      let postBody = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization");
      }
      // verify the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' is set
      if (actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest === undefined || actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelfHostedRunnersInGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsSetSelfHostedRunnersInGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set self-hosted runners in a group for an organization
     * Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {module:model/EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest} enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest 
     * @param {module:api/ActionsApi~actionsSetSelfHostedRunnersInGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelfHostedRunnersInGroupForOrg(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, callback) {
      let postBody = enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelfHostedRunnersInGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsSetSelfHostedRunnersInGroupForOrg");
      }
      // verify the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' is set
      if (enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest === undefined || enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' when calling actionsSetSelfHostedRunnersInGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsUpdateSelfHostedRunnerGroupForOrg operation.
     * @callback module:api/ActionsApi~actionsUpdateSelfHostedRunnerGroupForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunnerGroupsOrg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a self-hosted runner group for an organization
     * Updates the `name` and `visibility` of a self-hosted runner group in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerGroupId Unique identifier of the self-hosted runner group.
     * @param {module:model/ActionsUpdateSelfHostedRunnerGroupForOrgRequest} actionsUpdateSelfHostedRunnerGroupForOrgRequest 
     * @param {module:api/ActionsApi~actionsUpdateSelfHostedRunnerGroupForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunnerGroupsOrg}
     */
    actionsUpdateSelfHostedRunnerGroupForOrg(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest, callback) {
      let postBody = actionsUpdateSelfHostedRunnerGroupForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsUpdateSelfHostedRunnerGroupForOrg");
      }
      // verify the required parameter 'runnerGroupId' is set
      if (runnerGroupId === undefined || runnerGroupId === null) {
        throw new Error("Missing the required parameter 'runnerGroupId' when calling actionsUpdateSelfHostedRunnerGroupForOrg");
      }
      // verify the required parameter 'actionsUpdateSelfHostedRunnerGroupForOrgRequest' is set
      if (actionsUpdateSelfHostedRunnerGroupForOrgRequest === undefined || actionsUpdateSelfHostedRunnerGroupForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsUpdateSelfHostedRunnerGroupForOrgRequest' when calling actionsUpdateSelfHostedRunnerGroupForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_group_id': runnerGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunnerGroupsOrg;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
