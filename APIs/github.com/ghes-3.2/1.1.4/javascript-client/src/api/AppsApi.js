/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsCheckTokenRequest from '../model/AppsCheckTokenRequest';
import AppsCreateContentAttachmentRequest from '../model/AppsCreateContentAttachmentRequest';
import AppsCreateFromManifest201Response from '../model/AppsCreateFromManifest201Response';
import AppsCreateInstallationAccessTokenRequest from '../model/AppsCreateInstallationAccessTokenRequest';
import AppsDeleteAuthorizationRequest from '../model/AppsDeleteAuthorizationRequest';
import AppsListInstallationReposForAuthenticatedUser200Response from '../model/AppsListInstallationReposForAuthenticatedUser200Response';
import AppsListReposAccessibleToInstallation200Response from '../model/AppsListReposAccessibleToInstallation200Response';
import AppsScopeTokenRequest from '../model/AppsScopeTokenRequest';
import AppsUpdateWebhookConfigForAppRequest from '../model/AppsUpdateWebhookConfigForAppRequest';
import Authorization from '../model/Authorization';
import BasicError from '../model/BasicError';
import ContentReferenceAttachment from '../model/ContentReferenceAttachment';
import HookDelivery from '../model/HookDelivery';
import HookDeliveryItem from '../model/HookDeliveryItem';
import Installation from '../model/Installation';
import InstallationToken from '../model/InstallationToken';
import Integration from '../model/Integration';
import NullableAuthorization from '../model/NullableAuthorization';
import OrgsListAppInstallations200Response from '../model/OrgsListAppInstallations200Response';
import ReactionsCreateForCommitComment415Response from '../model/ReactionsCreateForCommitComment415Response';
import ScimError from '../model/ScimError';
import ValidationError from '../model/ValidationError';
import ValidationErrorSimple from '../model/ValidationErrorSimple';
import WebhookConfig from '../model/WebhookConfig';

/**
* Apps service.
* @module api/AppsApi
* @version 1.1.4
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsAddRepoToInstallationForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsAddRepoToInstallationForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a repository to an app installation
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.2/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/AppsApi~appsAddRepoToInstallationForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsAddRepoToInstallationForAuthenticatedUser(installationId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsAddRepoToInstallationForAuthenticatedUser");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling appsAddRepoToInstallationForAuthenticatedUser");
      }

      let pathParams = {
        'installation_id': installationId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCheckAuthorization operation.
     * @callback module:api/AppsApi~appsCheckAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NullableAuthorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check an authorization
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {String} accessToken 
     * @param {module:api/AppsApi~appsCheckAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NullableAuthorization}
     */
    appsCheckAuthorization(clientId, accessToken, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsCheckAuthorization");
      }
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling appsCheckAuthorization");
      }

      let pathParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NullableAuthorization;
      return this.apiClient.callApi(
        '/applications/{client_id}/tokens/{access_token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCheckToken operation.
     * @callback module:api/AppsApi~appsCheckTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a token
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {module:model/AppsCheckTokenRequest} appsCheckTokenRequest 
     * @param {module:api/AppsApi~appsCheckTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    appsCheckToken(clientId, appsCheckTokenRequest, callback) {
      let postBody = appsCheckTokenRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsCheckToken");
      }
      // verify the required parameter 'appsCheckTokenRequest' is set
      if (appsCheckTokenRequest === undefined || appsCheckTokenRequest === null) {
        throw new Error("Missing the required parameter 'appsCheckTokenRequest' when calling appsCheckToken");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/applications/{client_id}/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateContentAttachment operation.
     * @callback module:api/AppsApi~appsCreateContentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentReferenceAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a content attachment
     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#content_reference) to create an attachment.  The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://docs.github.com/enterprise-server@3.2/apps/using-content-attachments/)\" for details about content attachments.  You must use an [installation access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {String} owner The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
     * @param {String} repo The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event.
     * @param {Number} contentReferenceId The `id` of the `content_reference` event.
     * @param {module:model/AppsCreateContentAttachmentRequest} appsCreateContentAttachmentRequest 
     * @param {module:api/AppsApi~appsCreateContentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentReferenceAttachment}
     */
    appsCreateContentAttachment(owner, repo, contentReferenceId, appsCreateContentAttachmentRequest, callback) {
      let postBody = appsCreateContentAttachmentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'contentReferenceId' is set
      if (contentReferenceId === undefined || contentReferenceId === null) {
        throw new Error("Missing the required parameter 'contentReferenceId' when calling appsCreateContentAttachment");
      }
      // verify the required parameter 'appsCreateContentAttachmentRequest' is set
      if (appsCreateContentAttachmentRequest === undefined || appsCreateContentAttachmentRequest === null) {
        throw new Error("Missing the required parameter 'appsCreateContentAttachmentRequest' when calling appsCreateContentAttachment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'content_reference_id': contentReferenceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContentReferenceAttachment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateFromManifest operation.
     * @callback module:api/AppsApi~appsCreateFromManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsCreateFromManifest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GitHub App from a manifest
     * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
     * @param {String} code 
     * @param {module:api/AppsApi~appsCreateFromManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsCreateFromManifest201Response}
     */
    appsCreateFromManifest(code, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling appsCreateFromManifest");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsCreateFromManifest201Response;
      return this.apiClient.callApi(
        '/app-manifests/{code}/conversions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsCreateInstallationAccessToken operation.
     * @callback module:api/AppsApi~appsCreateInstallationAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an installation access token for an app
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {Object} opts Optional parameters
     * @param {module:model/AppsCreateInstallationAccessTokenRequest} [appsCreateInstallationAccessTokenRequest] 
     * @param {module:api/AppsApi~appsCreateInstallationAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallationToken}
     */
    appsCreateInstallationAccessToken(installationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appsCreateInstallationAccessTokenRequest'];
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsCreateInstallationAccessToken");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstallationToken;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}/access_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDeleteAuthorization operation.
     * @callback module:api/AppsApi~appsDeleteAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an app authorization
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted. Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     * @param {String} clientId The client ID of the GitHub app.
     * @param {module:model/AppsDeleteAuthorizationRequest} appsDeleteAuthorizationRequest 
     * @param {module:api/AppsApi~appsDeleteAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsDeleteAuthorization(clientId, appsDeleteAuthorizationRequest, callback) {
      let postBody = appsDeleteAuthorizationRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsDeleteAuthorization");
      }
      // verify the required parameter 'appsDeleteAuthorizationRequest' is set
      if (appsDeleteAuthorizationRequest === undefined || appsDeleteAuthorizationRequest === null) {
        throw new Error("Missing the required parameter 'appsDeleteAuthorizationRequest' when calling appsDeleteAuthorization");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{client_id}/grant', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDeleteInstallation operation.
     * @callback module:api/AppsApi~appsDeleteInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an installation for the authenticated app
     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://docs.github.com/enterprise-server@3.2/rest/reference/apps/#suspend-an-app-installation)\" endpoint.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {module:api/AppsApi~appsDeleteInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsDeleteInstallation(installationId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsDeleteInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsDeleteToken operation.
     * @callback module:api/AppsApi~appsDeleteTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an app token
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {module:model/AppsDeleteAuthorizationRequest} appsDeleteAuthorizationRequest 
     * @param {module:api/AppsApi~appsDeleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsDeleteToken(clientId, appsDeleteAuthorizationRequest, callback) {
      let postBody = appsDeleteAuthorizationRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsDeleteToken");
      }
      // verify the required parameter 'appsDeleteAuthorizationRequest' is set
      if (appsDeleteAuthorizationRequest === undefined || appsDeleteAuthorizationRequest === null) {
        throw new Error("Missing the required parameter 'appsDeleteAuthorizationRequest' when calling appsDeleteToken");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{client_id}/token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetAuthenticated operation.
     * @callback module:api/AppsApi~appsGetAuthenticatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authenticated app
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.2/rest/reference/apps#list-installations-for-the-authenticated-app)\" endpoint.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {module:api/AppsApi~appsGetAuthenticatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    appsGetAuthenticated(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetBySlug operation.
     * @callback module:api/AppsApi~appsGetBySlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an app
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).  If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {String} appSlug 
     * @param {module:api/AppsApi~appsGetBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    appsGetBySlug(appSlug, callback) {
      let postBody = null;
      // verify the required parameter 'appSlug' is set
      if (appSlug === undefined || appSlug === null) {
        throw new Error("Missing the required parameter 'appSlug' when calling appsGetBySlug");
      }

      let pathParams = {
        'app_slug': appSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/apps/{app_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetInstallation operation.
     * @callback module:api/AppsApi~appsGetInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Installation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an installation for the authenticated app
     * Enables an authenticated GitHub App to find an installation's information using the installation id.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {module:api/AppsApi~appsGetInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Installation}
     */
    appsGetInstallation(installationId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsGetInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Installation;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetOrgInstallation operation.
     * @callback module:api/AppsApi~appsGetOrgInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Installation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization installation for the authenticated app
     * Enables an authenticated GitHub App to find the organization's installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/AppsApi~appsGetOrgInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Installation}
     */
    appsGetOrgInstallation(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling appsGetOrgInstallation");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Installation;
      return this.apiClient.callApi(
        '/orgs/{org}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetRepoInstallation operation.
     * @callback module:api/AppsApi~appsGetRepoInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Installation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository installation for the authenticated app
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository. The name is not case sensitive.
     * @param {module:api/AppsApi~appsGetRepoInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Installation}
     */
    appsGetRepoInstallation(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling appsGetRepoInstallation");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling appsGetRepoInstallation");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Installation;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetUserInstallation operation.
     * @callback module:api/AppsApi~appsGetUserInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Installation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user installation for the authenticated app
     * Enables an authenticated GitHub App to find the user’s installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/AppsApi~appsGetUserInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Installation}
     */
    appsGetUserInstallation(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling appsGetUserInstallation");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Installation;
      return this.apiClient.callApi(
        '/users/{username}/installation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetWebhookConfigForApp operation.
     * @callback module:api/AppsApi~appsGetWebhookConfigForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webhook configuration for an app
     * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {module:api/AppsApi~appsGetWebhookConfigForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookConfig}
     */
    appsGetWebhookConfigForApp(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookConfig;
      return this.apiClient.callApi(
        '/app/hook/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsGetWebhookDelivery operation.
     * @callback module:api/AppsApi~appsGetWebhookDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HookDelivery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a delivery for an app webhook
     * Returns a delivery for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} deliveryId 
     * @param {module:api/AppsApi~appsGetWebhookDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HookDelivery}
     */
    appsGetWebhookDelivery(deliveryId, callback) {
      let postBody = null;
      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling appsGetWebhookDelivery");
      }

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = HookDelivery;
      return this.apiClient.callApi(
        '/app/hook/deliveries/{delivery_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallationReposForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsListInstallationReposForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsListInstallationReposForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories accessible to the user access token
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The access the user has to each repository is included in the hash under the `permissions` key.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListInstallationReposForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsListInstallationReposForAuthenticatedUser200Response}
     */
    appsListInstallationReposForAuthenticatedUser(installationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsListInstallationReposForAuthenticatedUser");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsListInstallationReposForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallations operation.
     * @callback module:api/AppsApi~appsListInstallationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Installation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List installations for the authenticated app
     * You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.  The permissions the installation has are included under the `permissions` key.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {String} [outdated] 
     * @param {module:api/AppsApi~appsListInstallationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Installation>}
     */
    appsListInstallations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'since': opts['since'],
        'outdated': opts['outdated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Installation];
      return this.apiClient.callApi(
        '/app/installations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListInstallationsForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsListInstallationsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgsListAppInstallations200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List app installations accessible to the user access token
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You can find the permissions for the installation under the `permissions` key.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListInstallationsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgsListAppInstallations200Response}
     */
    appsListInstallationsForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgsListAppInstallations200Response;
      return this.apiClient.callApi(
        '/user/installations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListReposAccessibleToInstallation operation.
     * @callback module:api/AppsApi~appsListReposAccessibleToInstallationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsListReposAccessibleToInstallation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories accessible to the app installation
     * List repositories that an app installation can access.  You must use an [installation access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/AppsApi~appsListReposAccessibleToInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsListReposAccessibleToInstallation200Response}
     */
    appsListReposAccessibleToInstallation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsListReposAccessibleToInstallation200Response;
      return this.apiClient.callApi(
        '/installation/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsListWebhookDeliveries operation.
     * @callback module:api/AppsApi~appsListWebhookDeliveriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HookDeliveryItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deliveries for an app webhook
     * Returns a list of webhook deliveries for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100).
     * @param {String} [cursor] Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
     * @param {module:api/AppsApi~appsListWebhookDeliveriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HookDeliveryItem>}
     */
    appsListWebhookDeliveries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [HookDeliveryItem];
      return this.apiClient.callApi(
        '/app/hook/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRedeliverWebhookDelivery operation.
     * @callback module:api/AppsApi~appsRedeliverWebhookDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeliver a delivery for an app webhook
     * Redeliver a delivery for the webhook configured for a GitHub App.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} deliveryId 
     * @param {module:api/AppsApi~appsRedeliverWebhookDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appsRedeliverWebhookDelivery(deliveryId, callback) {
      let postBody = null;
      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling appsRedeliverWebhookDelivery");
      }

      let pathParams = {
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/app/hook/deliveries/{delivery_id}/attempts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRemoveRepoFromInstallationForAuthenticatedUser operation.
     * @callback module:api/AppsApi~appsRemoveRepoFromInstallationForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a repository from an app installation
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.2/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/AppsApi~appsRemoveRepoFromInstallationForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRemoveRepoFromInstallationForAuthenticatedUser(installationId, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsRemoveRepoFromInstallationForAuthenticatedUser");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling appsRemoveRepoFromInstallationForAuthenticatedUser");
      }

      let pathParams = {
        'installation_id': installationId,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/installations/{installation_id}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsResetAuthorization operation.
     * @callback module:api/AppsApi~appsResetAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset an authorization
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {String} accessToken 
     * @param {module:api/AppsApi~appsResetAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    appsResetAuthorization(clientId, accessToken, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsResetAuthorization");
      }
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling appsResetAuthorization");
      }

      let pathParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/applications/{client_id}/tokens/{access_token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsResetToken operation.
     * @callback module:api/AppsApi~appsResetTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a token
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {module:model/AppsCheckTokenRequest} appsCheckTokenRequest 
     * @param {module:api/AppsApi~appsResetTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    appsResetToken(clientId, appsCheckTokenRequest, callback) {
      let postBody = appsCheckTokenRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsResetToken");
      }
      // verify the required parameter 'appsCheckTokenRequest' is set
      if (appsCheckTokenRequest === undefined || appsCheckTokenRequest === null) {
        throw new Error("Missing the required parameter 'appsCheckTokenRequest' when calling appsResetToken");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/applications/{client_id}/token', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRevokeAuthorizationForApplication operation.
     * @callback module:api/AppsApi~appsRevokeAuthorizationForApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke an authorization for an application
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {String} accessToken 
     * @param {module:api/AppsApi~appsRevokeAuthorizationForApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRevokeAuthorizationForApplication(clientId, accessToken, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsRevokeAuthorizationForApplication");
      }
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling appsRevokeAuthorizationForApplication");
      }

      let pathParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{client_id}/tokens/{access_token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRevokeGrantForApplication operation.
     * @callback module:api/AppsApi~appsRevokeGrantForApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a grant for an application
     * **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).  OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.  Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub Enterprise Server](https://github.com/settings/applications#authorized).
     * @param {String} clientId The client ID of the GitHub app.
     * @param {String} accessToken 
     * @param {module:api/AppsApi~appsRevokeGrantForApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRevokeGrantForApplication(clientId, accessToken, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsRevokeGrantForApplication");
      }
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling appsRevokeGrantForApplication");
      }

      let pathParams = {
        'client_id': clientId,
        'access_token': accessToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/applications/{client_id}/grants/{access_token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsRevokeInstallationAccessToken operation.
     * @callback module:api/AppsApi~appsRevokeInstallationAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke an installation access token
     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.  Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.2/rest/reference/apps#create-an-installation-access-token-for-an-app)\" endpoint.  You must use an [installation access token](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     * @param {module:api/AppsApi~appsRevokeInstallationAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsRevokeInstallationAccessToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/installation/token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsScopeToken operation.
     * @callback module:api/AppsApi~appsScopeTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scoped access token
     * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     * @param {String} clientId The client ID of the GitHub app.
     * @param {module:model/AppsScopeTokenRequest} appsScopeTokenRequest 
     * @param {module:api/AppsApi~appsScopeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    appsScopeToken(clientId, appsScopeTokenRequest, callback) {
      let postBody = appsScopeTokenRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling appsScopeToken");
      }
      // verify the required parameter 'appsScopeTokenRequest' is set
      if (appsScopeTokenRequest === undefined || appsScopeTokenRequest === null) {
        throw new Error("Missing the required parameter 'appsScopeTokenRequest' when calling appsScopeToken");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/applications/{client_id}/token/scoped', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsSuspendInstallation operation.
     * @callback module:api/AppsApi~appsSuspendInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend an app installation
     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {module:api/AppsApi~appsSuspendInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsSuspendInstallation(installationId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsSuspendInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUnsuspendInstallation operation.
     * @callback module:api/AppsApi~appsUnsuspendInstallationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsuspend an app installation
     * Removes a GitHub App installation suspension.  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {Number} installationId The unique identifier of the installation.
     * @param {module:api/AppsApi~appsUnsuspendInstallationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appsUnsuspendInstallation(installationId, callback) {
      let postBody = null;
      // verify the required parameter 'installationId' is set
      if (installationId === undefined || installationId === null) {
        throw new Error("Missing the required parameter 'installationId' when calling appsUnsuspendInstallation");
      }

      let pathParams = {
        'installation_id': installationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app/installations/{installation_id}/suspended', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUpdateWebhookConfigForApp operation.
     * @callback module:api/AppsApi~appsUpdateWebhookConfigForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook configuration for an app
     * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"[Creating a GitHub App](/developers/apps/creating-a-github-app).\"  You must use a [JWT](https://docs.github.com/enterprise-server@3.2/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     * @param {module:model/AppsUpdateWebhookConfigForAppRequest} appsUpdateWebhookConfigForAppRequest 
     * @param {module:api/AppsApi~appsUpdateWebhookConfigForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookConfig}
     */
    appsUpdateWebhookConfigForApp(appsUpdateWebhookConfigForAppRequest, callback) {
      let postBody = appsUpdateWebhookConfigForAppRequest;
      // verify the required parameter 'appsUpdateWebhookConfigForAppRequest' is set
      if (appsUpdateWebhookConfigForAppRequest === undefined || appsUpdateWebhookConfigForAppRequest === null) {
        throw new Error("Missing the required parameter 'appsUpdateWebhookConfigForAppRequest' when calling appsUpdateWebhookConfigForApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookConfig;
      return this.apiClient.callApi(
        '/app/hook/config', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
