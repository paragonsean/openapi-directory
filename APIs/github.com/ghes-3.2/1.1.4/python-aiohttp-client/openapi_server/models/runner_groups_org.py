# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunnerGroupsOrg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_public_repositories: bool=None, default: bool=None, id: float=None, inherited: bool=None, inherited_allows_public_repositories: bool=None, name: str=None, runners_url: str=None, selected_repositories_url: str=None, visibility: str=None):
        """RunnerGroupsOrg - a model defined in OpenAPI

        :param allows_public_repositories: The allows_public_repositories of this RunnerGroupsOrg.
        :param default: The default of this RunnerGroupsOrg.
        :param id: The id of this RunnerGroupsOrg.
        :param inherited: The inherited of this RunnerGroupsOrg.
        :param inherited_allows_public_repositories: The inherited_allows_public_repositories of this RunnerGroupsOrg.
        :param name: The name of this RunnerGroupsOrg.
        :param runners_url: The runners_url of this RunnerGroupsOrg.
        :param selected_repositories_url: The selected_repositories_url of this RunnerGroupsOrg.
        :param visibility: The visibility of this RunnerGroupsOrg.
        """
        self.openapi_types = {
            'allows_public_repositories': bool,
            'default': bool,
            'id': float,
            'inherited': bool,
            'inherited_allows_public_repositories': bool,
            'name': str,
            'runners_url': str,
            'selected_repositories_url': str,
            'visibility': str
        }

        self.attribute_map = {
            'allows_public_repositories': 'allows_public_repositories',
            'default': 'default',
            'id': 'id',
            'inherited': 'inherited',
            'inherited_allows_public_repositories': 'inherited_allows_public_repositories',
            'name': 'name',
            'runners_url': 'runners_url',
            'selected_repositories_url': 'selected_repositories_url',
            'visibility': 'visibility'
        }

        self._allows_public_repositories = allows_public_repositories
        self._default = default
        self._id = id
        self._inherited = inherited
        self._inherited_allows_public_repositories = inherited_allows_public_repositories
        self._name = name
        self._runners_url = runners_url
        self._selected_repositories_url = selected_repositories_url
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunnerGroupsOrg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The runner-groups-org of this RunnerGroupsOrg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_public_repositories(self):
        """Gets the allows_public_repositories of this RunnerGroupsOrg.


        :return: The allows_public_repositories of this RunnerGroupsOrg.
        :rtype: bool
        """
        return self._allows_public_repositories

    @allows_public_repositories.setter
    def allows_public_repositories(self, allows_public_repositories):
        """Sets the allows_public_repositories of this RunnerGroupsOrg.


        :param allows_public_repositories: The allows_public_repositories of this RunnerGroupsOrg.
        :type allows_public_repositories: bool
        """
        if allows_public_repositories is None:
            raise ValueError("Invalid value for `allows_public_repositories`, must not be `None`")

        self._allows_public_repositories = allows_public_repositories

    @property
    def default(self):
        """Gets the default of this RunnerGroupsOrg.


        :return: The default of this RunnerGroupsOrg.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RunnerGroupsOrg.


        :param default: The default of this RunnerGroupsOrg.
        :type default: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def id(self):
        """Gets the id of this RunnerGroupsOrg.


        :return: The id of this RunnerGroupsOrg.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunnerGroupsOrg.


        :param id: The id of this RunnerGroupsOrg.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def inherited(self):
        """Gets the inherited of this RunnerGroupsOrg.


        :return: The inherited of this RunnerGroupsOrg.
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this RunnerGroupsOrg.


        :param inherited: The inherited of this RunnerGroupsOrg.
        :type inherited: bool
        """
        if inherited is None:
            raise ValueError("Invalid value for `inherited`, must not be `None`")

        self._inherited = inherited

    @property
    def inherited_allows_public_repositories(self):
        """Gets the inherited_allows_public_repositories of this RunnerGroupsOrg.


        :return: The inherited_allows_public_repositories of this RunnerGroupsOrg.
        :rtype: bool
        """
        return self._inherited_allows_public_repositories

    @inherited_allows_public_repositories.setter
    def inherited_allows_public_repositories(self, inherited_allows_public_repositories):
        """Sets the inherited_allows_public_repositories of this RunnerGroupsOrg.


        :param inherited_allows_public_repositories: The inherited_allows_public_repositories of this RunnerGroupsOrg.
        :type inherited_allows_public_repositories: bool
        """

        self._inherited_allows_public_repositories = inherited_allows_public_repositories

    @property
    def name(self):
        """Gets the name of this RunnerGroupsOrg.


        :return: The name of this RunnerGroupsOrg.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunnerGroupsOrg.


        :param name: The name of this RunnerGroupsOrg.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def runners_url(self):
        """Gets the runners_url of this RunnerGroupsOrg.


        :return: The runners_url of this RunnerGroupsOrg.
        :rtype: str
        """
        return self._runners_url

    @runners_url.setter
    def runners_url(self, runners_url):
        """Sets the runners_url of this RunnerGroupsOrg.


        :param runners_url: The runners_url of this RunnerGroupsOrg.
        :type runners_url: str
        """
        if runners_url is None:
            raise ValueError("Invalid value for `runners_url`, must not be `None`")

        self._runners_url = runners_url

    @property
    def selected_repositories_url(self):
        """Gets the selected_repositories_url of this RunnerGroupsOrg.

        Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`

        :return: The selected_repositories_url of this RunnerGroupsOrg.
        :rtype: str
        """
        return self._selected_repositories_url

    @selected_repositories_url.setter
    def selected_repositories_url(self, selected_repositories_url):
        """Sets the selected_repositories_url of this RunnerGroupsOrg.

        Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`

        :param selected_repositories_url: The selected_repositories_url of this RunnerGroupsOrg.
        :type selected_repositories_url: str
        """

        self._selected_repositories_url = selected_repositories_url

    @property
    def visibility(self):
        """Gets the visibility of this RunnerGroupsOrg.


        :return: The visibility of this RunnerGroupsOrg.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this RunnerGroupsOrg.


        :param visibility: The visibility of this RunnerGroupsOrg.
        :type visibility: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")

        self._visibility = visibility
