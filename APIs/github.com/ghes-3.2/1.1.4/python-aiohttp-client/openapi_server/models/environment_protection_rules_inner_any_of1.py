# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_protection_rules_inner_any_of1_reviewers_inner import EnvironmentProtectionRulesInnerAnyOf1ReviewersInner
from openapi_server import util


class EnvironmentProtectionRulesInnerAnyOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, node_id: str=None, reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]=None, type: str=None):
        """EnvironmentProtectionRulesInnerAnyOf1 - a model defined in OpenAPI

        :param id: The id of this EnvironmentProtectionRulesInnerAnyOf1.
        :param node_id: The node_id of this EnvironmentProtectionRulesInnerAnyOf1.
        :param reviewers: The reviewers of this EnvironmentProtectionRulesInnerAnyOf1.
        :param type: The type of this EnvironmentProtectionRulesInnerAnyOf1.
        """
        self.openapi_types = {
            'id': int,
            'node_id': str,
            'reviewers': List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner],
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'node_id': 'node_id',
            'reviewers': 'reviewers',
            'type': 'type'
        }

        self._id = id
        self._node_id = node_id
        self._reviewers = reviewers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentProtectionRulesInnerAnyOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The environment_protection_rules_inner_anyOf_1 of this EnvironmentProtectionRulesInnerAnyOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnvironmentProtectionRulesInnerAnyOf1.


        :return: The id of this EnvironmentProtectionRulesInnerAnyOf1.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentProtectionRulesInnerAnyOf1.


        :param id: The id of this EnvironmentProtectionRulesInnerAnyOf1.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this EnvironmentProtectionRulesInnerAnyOf1.


        :return: The node_id of this EnvironmentProtectionRulesInnerAnyOf1.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this EnvironmentProtectionRulesInnerAnyOf1.


        :param node_id: The node_id of this EnvironmentProtectionRulesInnerAnyOf1.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def reviewers(self):
        """Gets the reviewers of this EnvironmentProtectionRulesInnerAnyOf1.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :return: The reviewers of this EnvironmentProtectionRulesInnerAnyOf1.
        :rtype: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this EnvironmentProtectionRulesInnerAnyOf1.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :param reviewers: The reviewers of this EnvironmentProtectionRulesInnerAnyOf1.
        :type reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """

        self._reviewers = reviewers

    @property
    def type(self):
        """Gets the type of this EnvironmentProtectionRulesInnerAnyOf1.


        :return: The type of this EnvironmentProtectionRulesInnerAnyOf1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnvironmentProtectionRulesInnerAnyOf1.


        :param type: The type of this EnvironmentProtectionRulesInnerAnyOf1.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
