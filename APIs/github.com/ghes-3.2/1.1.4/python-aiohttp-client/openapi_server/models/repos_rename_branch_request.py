# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposRenameBranchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_name: str=None):
        """ReposRenameBranchRequest - a model defined in OpenAPI

        :param new_name: The new_name of this ReposRenameBranchRequest.
        """
        self.openapi_types = {
            'new_name': str
        }

        self.attribute_map = {
            'new_name': 'new_name'
        }

        self._new_name = new_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposRenameBranchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_rename_branch_request of this ReposRenameBranchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_name(self):
        """Gets the new_name of this ReposRenameBranchRequest.

        The new name of the branch.

        :return: The new_name of this ReposRenameBranchRequest.
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this ReposRenameBranchRequest.

        The new name of the branch.

        :param new_name: The new_name of this ReposRenameBranchRequest.
        :type new_name: str
        """
        if new_name is None:
            raise ValueError("Invalid value for `new_name`, must not be `None`")

        self._new_name = new_name
