# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enterprise_comment_overview import EnterpriseCommentOverview
from openapi_server.models.enterprise_gist_overview import EnterpriseGistOverview
from openapi_server.models.enterprise_hook_overview import EnterpriseHookOverview
from openapi_server.models.enterprise_issue_overview import EnterpriseIssueOverview
from openapi_server.models.enterprise_milestone_overview import EnterpriseMilestoneOverview
from openapi_server.models.enterprise_organization_overview import EnterpriseOrganizationOverview
from openapi_server.models.enterprise_page_overview import EnterprisePageOverview
from openapi_server.models.enterprise_pull_request_overview import EnterprisePullRequestOverview
from openapi_server.models.enterprise_repository_overview import EnterpriseRepositoryOverview
from openapi_server.models.enterprise_user_overview import EnterpriseUserOverview
from openapi_server import util


class EnterpriseOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: EnterpriseCommentOverview=None, gists: EnterpriseGistOverview=None, hooks: EnterpriseHookOverview=None, issues: EnterpriseIssueOverview=None, milestones: EnterpriseMilestoneOverview=None, orgs: EnterpriseOrganizationOverview=None, pages: EnterprisePageOverview=None, pulls: EnterprisePullRequestOverview=None, repos: EnterpriseRepositoryOverview=None, users: EnterpriseUserOverview=None):
        """EnterpriseOverview - a model defined in OpenAPI

        :param comments: The comments of this EnterpriseOverview.
        :param gists: The gists of this EnterpriseOverview.
        :param hooks: The hooks of this EnterpriseOverview.
        :param issues: The issues of this EnterpriseOverview.
        :param milestones: The milestones of this EnterpriseOverview.
        :param orgs: The orgs of this EnterpriseOverview.
        :param pages: The pages of this EnterpriseOverview.
        :param pulls: The pulls of this EnterpriseOverview.
        :param repos: The repos of this EnterpriseOverview.
        :param users: The users of this EnterpriseOverview.
        """
        self.openapi_types = {
            'comments': EnterpriseCommentOverview,
            'gists': EnterpriseGistOverview,
            'hooks': EnterpriseHookOverview,
            'issues': EnterpriseIssueOverview,
            'milestones': EnterpriseMilestoneOverview,
            'orgs': EnterpriseOrganizationOverview,
            'pages': EnterprisePageOverview,
            'pulls': EnterprisePullRequestOverview,
            'repos': EnterpriseRepositoryOverview,
            'users': EnterpriseUserOverview
        }

        self.attribute_map = {
            'comments': 'comments',
            'gists': 'gists',
            'hooks': 'hooks',
            'issues': 'issues',
            'milestones': 'milestones',
            'orgs': 'orgs',
            'pages': 'pages',
            'pulls': 'pulls',
            'repos': 'repos',
            'users': 'users'
        }

        self._comments = comments
        self._gists = gists
        self._hooks = hooks
        self._issues = issues
        self._milestones = milestones
        self._orgs = orgs
        self._pages = pages
        self._pulls = pulls
        self._repos = repos
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-overview of this EnterpriseOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this EnterpriseOverview.


        :return: The comments of this EnterpriseOverview.
        :rtype: EnterpriseCommentOverview
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this EnterpriseOverview.


        :param comments: The comments of this EnterpriseOverview.
        :type comments: EnterpriseCommentOverview
        """

        self._comments = comments

    @property
    def gists(self):
        """Gets the gists of this EnterpriseOverview.


        :return: The gists of this EnterpriseOverview.
        :rtype: EnterpriseGistOverview
        """
        return self._gists

    @gists.setter
    def gists(self, gists):
        """Sets the gists of this EnterpriseOverview.


        :param gists: The gists of this EnterpriseOverview.
        :type gists: EnterpriseGistOverview
        """

        self._gists = gists

    @property
    def hooks(self):
        """Gets the hooks of this EnterpriseOverview.


        :return: The hooks of this EnterpriseOverview.
        :rtype: EnterpriseHookOverview
        """
        return self._hooks

    @hooks.setter
    def hooks(self, hooks):
        """Sets the hooks of this EnterpriseOverview.


        :param hooks: The hooks of this EnterpriseOverview.
        :type hooks: EnterpriseHookOverview
        """

        self._hooks = hooks

    @property
    def issues(self):
        """Gets the issues of this EnterpriseOverview.


        :return: The issues of this EnterpriseOverview.
        :rtype: EnterpriseIssueOverview
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this EnterpriseOverview.


        :param issues: The issues of this EnterpriseOverview.
        :type issues: EnterpriseIssueOverview
        """

        self._issues = issues

    @property
    def milestones(self):
        """Gets the milestones of this EnterpriseOverview.


        :return: The milestones of this EnterpriseOverview.
        :rtype: EnterpriseMilestoneOverview
        """
        return self._milestones

    @milestones.setter
    def milestones(self, milestones):
        """Sets the milestones of this EnterpriseOverview.


        :param milestones: The milestones of this EnterpriseOverview.
        :type milestones: EnterpriseMilestoneOverview
        """

        self._milestones = milestones

    @property
    def orgs(self):
        """Gets the orgs of this EnterpriseOverview.


        :return: The orgs of this EnterpriseOverview.
        :rtype: EnterpriseOrganizationOverview
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this EnterpriseOverview.


        :param orgs: The orgs of this EnterpriseOverview.
        :type orgs: EnterpriseOrganizationOverview
        """

        self._orgs = orgs

    @property
    def pages(self):
        """Gets the pages of this EnterpriseOverview.


        :return: The pages of this EnterpriseOverview.
        :rtype: EnterprisePageOverview
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this EnterpriseOverview.


        :param pages: The pages of this EnterpriseOverview.
        :type pages: EnterprisePageOverview
        """

        self._pages = pages

    @property
    def pulls(self):
        """Gets the pulls of this EnterpriseOverview.


        :return: The pulls of this EnterpriseOverview.
        :rtype: EnterprisePullRequestOverview
        """
        return self._pulls

    @pulls.setter
    def pulls(self, pulls):
        """Sets the pulls of this EnterpriseOverview.


        :param pulls: The pulls of this EnterpriseOverview.
        :type pulls: EnterprisePullRequestOverview
        """

        self._pulls = pulls

    @property
    def repos(self):
        """Gets the repos of this EnterpriseOverview.


        :return: The repos of this EnterpriseOverview.
        :rtype: EnterpriseRepositoryOverview
        """
        return self._repos

    @repos.setter
    def repos(self, repos):
        """Sets the repos of this EnterpriseOverview.


        :param repos: The repos of this EnterpriseOverview.
        :type repos: EnterpriseRepositoryOverview
        """

        self._repos = repos

    @property
    def users(self):
        """Gets the users of this EnterpriseOverview.


        :return: The users of this EnterpriseOverview.
        :rtype: EnterpriseUserOverview
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this EnterpriseOverview.


        :param users: The users of this EnterpriseOverview.
        :type users: EnterpriseUserOverview
        """

        self._users = users
