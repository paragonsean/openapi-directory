# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protected_branch_pull_request_review_dismissal_restrictions import ProtectedBranchPullRequestReviewDismissalRestrictions
from openapi_server import util


class ProtectedBranchPullRequestReview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dismiss_stale_reviews: bool=None, dismissal_restrictions: ProtectedBranchPullRequestReviewDismissalRestrictions=None, require_code_owner_reviews: bool=None, required_approving_review_count: int=None, url: str=None):
        """ProtectedBranchPullRequestReview - a model defined in OpenAPI

        :param dismiss_stale_reviews: The dismiss_stale_reviews of this ProtectedBranchPullRequestReview.
        :param dismissal_restrictions: The dismissal_restrictions of this ProtectedBranchPullRequestReview.
        :param require_code_owner_reviews: The require_code_owner_reviews of this ProtectedBranchPullRequestReview.
        :param required_approving_review_count: The required_approving_review_count of this ProtectedBranchPullRequestReview.
        :param url: The url of this ProtectedBranchPullRequestReview.
        """
        self.openapi_types = {
            'dismiss_stale_reviews': bool,
            'dismissal_restrictions': ProtectedBranchPullRequestReviewDismissalRestrictions,
            'require_code_owner_reviews': bool,
            'required_approving_review_count': int,
            'url': str
        }

        self.attribute_map = {
            'dismiss_stale_reviews': 'dismiss_stale_reviews',
            'dismissal_restrictions': 'dismissal_restrictions',
            'require_code_owner_reviews': 'require_code_owner_reviews',
            'required_approving_review_count': 'required_approving_review_count',
            'url': 'url'
        }

        self._dismiss_stale_reviews = dismiss_stale_reviews
        self._dismissal_restrictions = dismissal_restrictions
        self._require_code_owner_reviews = require_code_owner_reviews
        self._required_approving_review_count = required_approving_review_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedBranchPullRequestReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The protected-branch-pull-request-review of this ProtectedBranchPullRequestReview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dismiss_stale_reviews(self):
        """Gets the dismiss_stale_reviews of this ProtectedBranchPullRequestReview.


        :return: The dismiss_stale_reviews of this ProtectedBranchPullRequestReview.
        :rtype: bool
        """
        return self._dismiss_stale_reviews

    @dismiss_stale_reviews.setter
    def dismiss_stale_reviews(self, dismiss_stale_reviews):
        """Sets the dismiss_stale_reviews of this ProtectedBranchPullRequestReview.


        :param dismiss_stale_reviews: The dismiss_stale_reviews of this ProtectedBranchPullRequestReview.
        :type dismiss_stale_reviews: bool
        """
        if dismiss_stale_reviews is None:
            raise ValueError("Invalid value for `dismiss_stale_reviews`, must not be `None`")

        self._dismiss_stale_reviews = dismiss_stale_reviews

    @property
    def dismissal_restrictions(self):
        """Gets the dismissal_restrictions of this ProtectedBranchPullRequestReview.


        :return: The dismissal_restrictions of this ProtectedBranchPullRequestReview.
        :rtype: ProtectedBranchPullRequestReviewDismissalRestrictions
        """
        return self._dismissal_restrictions

    @dismissal_restrictions.setter
    def dismissal_restrictions(self, dismissal_restrictions):
        """Sets the dismissal_restrictions of this ProtectedBranchPullRequestReview.


        :param dismissal_restrictions: The dismissal_restrictions of this ProtectedBranchPullRequestReview.
        :type dismissal_restrictions: ProtectedBranchPullRequestReviewDismissalRestrictions
        """

        self._dismissal_restrictions = dismissal_restrictions

    @property
    def require_code_owner_reviews(self):
        """Gets the require_code_owner_reviews of this ProtectedBranchPullRequestReview.


        :return: The require_code_owner_reviews of this ProtectedBranchPullRequestReview.
        :rtype: bool
        """
        return self._require_code_owner_reviews

    @require_code_owner_reviews.setter
    def require_code_owner_reviews(self, require_code_owner_reviews):
        """Sets the require_code_owner_reviews of this ProtectedBranchPullRequestReview.


        :param require_code_owner_reviews: The require_code_owner_reviews of this ProtectedBranchPullRequestReview.
        :type require_code_owner_reviews: bool
        """
        if require_code_owner_reviews is None:
            raise ValueError("Invalid value for `require_code_owner_reviews`, must not be `None`")

        self._require_code_owner_reviews = require_code_owner_reviews

    @property
    def required_approving_review_count(self):
        """Gets the required_approving_review_count of this ProtectedBranchPullRequestReview.


        :return: The required_approving_review_count of this ProtectedBranchPullRequestReview.
        :rtype: int
        """
        return self._required_approving_review_count

    @required_approving_review_count.setter
    def required_approving_review_count(self, required_approving_review_count):
        """Sets the required_approving_review_count of this ProtectedBranchPullRequestReview.


        :param required_approving_review_count: The required_approving_review_count of this ProtectedBranchPullRequestReview.
        :type required_approving_review_count: int
        """
        if required_approving_review_count is not None and required_approving_review_count > 6:
            raise ValueError("Invalid value for `required_approving_review_count`, must be a value less than or equal to `6`")
        if required_approving_review_count is not None and required_approving_review_count < 1:
            raise ValueError("Invalid value for `required_approving_review_count`, must be a value greater than or equal to `1`")

        self._required_approving_review_count = required_approving_review_count

    @property
    def url(self):
        """Gets the url of this ProtectedBranchPullRequestReview.


        :return: The url of this ProtectedBranchPullRequestReview.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProtectedBranchPullRequestReview.


        :param url: The url of this ProtectedBranchPullRequestReview.
        :type url: str
        """

        self._url = url
