# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseIssueOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_issues: int=None, open_issues: int=None, total_issues: int=None):
        """EnterpriseIssueOverview - a model defined in OpenAPI

        :param closed_issues: The closed_issues of this EnterpriseIssueOverview.
        :param open_issues: The open_issues of this EnterpriseIssueOverview.
        :param total_issues: The total_issues of this EnterpriseIssueOverview.
        """
        self.openapi_types = {
            'closed_issues': int,
            'open_issues': int,
            'total_issues': int
        }

        self.attribute_map = {
            'closed_issues': 'closed_issues',
            'open_issues': 'open_issues',
            'total_issues': 'total_issues'
        }

        self._closed_issues = closed_issues
        self._open_issues = open_issues
        self._total_issues = total_issues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseIssueOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-issue-overview of this EnterpriseIssueOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_issues(self):
        """Gets the closed_issues of this EnterpriseIssueOverview.


        :return: The closed_issues of this EnterpriseIssueOverview.
        :rtype: int
        """
        return self._closed_issues

    @closed_issues.setter
    def closed_issues(self, closed_issues):
        """Sets the closed_issues of this EnterpriseIssueOverview.


        :param closed_issues: The closed_issues of this EnterpriseIssueOverview.
        :type closed_issues: int
        """
        if closed_issues is None:
            raise ValueError("Invalid value for `closed_issues`, must not be `None`")

        self._closed_issues = closed_issues

    @property
    def open_issues(self):
        """Gets the open_issues of this EnterpriseIssueOverview.


        :return: The open_issues of this EnterpriseIssueOverview.
        :rtype: int
        """
        return self._open_issues

    @open_issues.setter
    def open_issues(self, open_issues):
        """Sets the open_issues of this EnterpriseIssueOverview.


        :param open_issues: The open_issues of this EnterpriseIssueOverview.
        :type open_issues: int
        """
        if open_issues is None:
            raise ValueError("Invalid value for `open_issues`, must not be `None`")

        self._open_issues = open_issues

    @property
    def total_issues(self):
        """Gets the total_issues of this EnterpriseIssueOverview.


        :return: The total_issues of this EnterpriseIssueOverview.
        :rtype: int
        """
        return self._total_issues

    @total_issues.setter
    def total_issues(self, total_issues):
        """Sets the total_issues of this EnterpriseIssueOverview.


        :param total_issues: The total_issues of this EnterpriseIssueOverview.
        :type total_issues: int
        """
        if total_issues is None:
            raise ValueError("Invalid value for `total_issues`, must not be `None`")

        self._total_issues = total_issues
