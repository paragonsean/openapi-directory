# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposSetTeamAccessRestrictionsRequestOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, teams: List[str]=None):
        """ReposSetTeamAccessRestrictionsRequestOneOf - a model defined in OpenAPI

        :param teams: The teams of this ReposSetTeamAccessRestrictionsRequestOneOf.
        """
        self.openapi_types = {
            'teams': List[str]
        }

        self.attribute_map = {
            'teams': 'teams'
        }

        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposSetTeamAccessRestrictionsRequestOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_set_team_access_restrictions_request_oneOf of this ReposSetTeamAccessRestrictionsRequestOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def teams(self):
        """Gets the teams of this ReposSetTeamAccessRestrictionsRequestOneOf.

        The slug values for teams

        :return: The teams of this ReposSetTeamAccessRestrictionsRequestOneOf.
        :rtype: List[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ReposSetTeamAccessRestrictionsRequestOneOf.

        The slug values for teams

        :param teams: The teams of this ReposSetTeamAccessRestrictionsRequestOneOf.
        :type teams: List[str]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")

        self._teams = teams
