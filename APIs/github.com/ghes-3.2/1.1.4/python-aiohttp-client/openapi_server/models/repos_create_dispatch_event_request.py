# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposCreateDispatchEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_payload: Dict[str, object]=None, event_type: str=None):
        """ReposCreateDispatchEventRequest - a model defined in OpenAPI

        :param client_payload: The client_payload of this ReposCreateDispatchEventRequest.
        :param event_type: The event_type of this ReposCreateDispatchEventRequest.
        """
        self.openapi_types = {
            'client_payload': Dict[str, object],
            'event_type': str
        }

        self.attribute_map = {
            'client_payload': 'client_payload',
            'event_type': 'event_type'
        }

        self._client_payload = client_payload
        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateDispatchEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_dispatch_event_request of this ReposCreateDispatchEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_payload(self):
        """Gets the client_payload of this ReposCreateDispatchEventRequest.

        JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.

        :return: The client_payload of this ReposCreateDispatchEventRequest.
        :rtype: Dict[str, object]
        """
        return self._client_payload

    @client_payload.setter
    def client_payload(self, client_payload):
        """Sets the client_payload of this ReposCreateDispatchEventRequest.

        JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.

        :param client_payload: The client_payload of this ReposCreateDispatchEventRequest.
        :type client_payload: Dict[str, object]
        """
        if client_payload is not None and len(client_payload) > 10:
            raise ValueError("Invalid value for `client_payload`, number of items must be less than or equal to `10`")

        self._client_payload = client_payload

    @property
    def event_type(self):
        """Gets the event_type of this ReposCreateDispatchEventRequest.

        A custom webhook event name. Must be 100 characters or fewer.

        :return: The event_type of this ReposCreateDispatchEventRequest.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ReposCreateDispatchEventRequest.

        A custom webhook event name. Must be 100 characters or fewer.

        :param event_type: The event_type of this ReposCreateDispatchEventRequest.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")
        if event_type is not None and len(event_type) > 100:
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `100`")
        if event_type is not None and len(event_type) < 1:
            raise ValueError("Invalid value for `event_type`, length must be greater than or equal to `1`")

        self._event_type = event_type
