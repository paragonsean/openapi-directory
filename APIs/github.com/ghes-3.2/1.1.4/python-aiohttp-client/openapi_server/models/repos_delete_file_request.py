# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_delete_file_request_author import ReposDeleteFileRequestAuthor
from openapi_server.models.repos_delete_file_request_committer import ReposDeleteFileRequestCommitter
from openapi_server import util


class ReposDeleteFileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: ReposDeleteFileRequestAuthor=None, branch: str=None, committer: ReposDeleteFileRequestCommitter=None, message: str=None, sha: str=None):
        """ReposDeleteFileRequest - a model defined in OpenAPI

        :param author: The author of this ReposDeleteFileRequest.
        :param branch: The branch of this ReposDeleteFileRequest.
        :param committer: The committer of this ReposDeleteFileRequest.
        :param message: The message of this ReposDeleteFileRequest.
        :param sha: The sha of this ReposDeleteFileRequest.
        """
        self.openapi_types = {
            'author': ReposDeleteFileRequestAuthor,
            'branch': str,
            'committer': ReposDeleteFileRequestCommitter,
            'message': str,
            'sha': str
        }

        self.attribute_map = {
            'author': 'author',
            'branch': 'branch',
            'committer': 'committer',
            'message': 'message',
            'sha': 'sha'
        }

        self._author = author
        self._branch = branch
        self._committer = committer
        self._message = message
        self._sha = sha

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposDeleteFileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_delete_file_request of this ReposDeleteFileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this ReposDeleteFileRequest.


        :return: The author of this ReposDeleteFileRequest.
        :rtype: ReposDeleteFileRequestAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ReposDeleteFileRequest.


        :param author: The author of this ReposDeleteFileRequest.
        :type author: ReposDeleteFileRequestAuthor
        """

        self._author = author

    @property
    def branch(self):
        """Gets the branch of this ReposDeleteFileRequest.

        The branch name. Default: the repository’s default branch (usually `master`)

        :return: The branch of this ReposDeleteFileRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ReposDeleteFileRequest.

        The branch name. Default: the repository’s default branch (usually `master`)

        :param branch: The branch of this ReposDeleteFileRequest.
        :type branch: str
        """

        self._branch = branch

    @property
    def committer(self):
        """Gets the committer of this ReposDeleteFileRequest.


        :return: The committer of this ReposDeleteFileRequest.
        :rtype: ReposDeleteFileRequestCommitter
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this ReposDeleteFileRequest.


        :param committer: The committer of this ReposDeleteFileRequest.
        :type committer: ReposDeleteFileRequestCommitter
        """

        self._committer = committer

    @property
    def message(self):
        """Gets the message of this ReposDeleteFileRequest.

        The commit message.

        :return: The message of this ReposDeleteFileRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReposDeleteFileRequest.

        The commit message.

        :param message: The message of this ReposDeleteFileRequest.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sha(self):
        """Gets the sha of this ReposDeleteFileRequest.

        The blob SHA of the file being deleted.

        :return: The sha of this ReposDeleteFileRequest.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this ReposDeleteFileRequest.

        The blob SHA of the file being deleted.

        :param sha: The sha of this ReposDeleteFileRequest.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha
