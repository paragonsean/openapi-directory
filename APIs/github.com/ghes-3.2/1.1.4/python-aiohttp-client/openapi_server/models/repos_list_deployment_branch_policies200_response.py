# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_branch_policy import DeploymentBranchPolicy
from openapi_server import util


class ReposListDeploymentBranchPolicies200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_policies: List[DeploymentBranchPolicy]=None, total_count: int=None):
        """ReposListDeploymentBranchPolicies200Response - a model defined in OpenAPI

        :param branch_policies: The branch_policies of this ReposListDeploymentBranchPolicies200Response.
        :param total_count: The total_count of this ReposListDeploymentBranchPolicies200Response.
        """
        self.openapi_types = {
            'branch_policies': List[DeploymentBranchPolicy],
            'total_count': int
        }

        self.attribute_map = {
            'branch_policies': 'branch_policies',
            'total_count': 'total_count'
        }

        self._branch_policies = branch_policies
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposListDeploymentBranchPolicies200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_list_deployment_branch_policies_200_response of this ReposListDeploymentBranchPolicies200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_policies(self):
        """Gets the branch_policies of this ReposListDeploymentBranchPolicies200Response.


        :return: The branch_policies of this ReposListDeploymentBranchPolicies200Response.
        :rtype: List[DeploymentBranchPolicy]
        """
        return self._branch_policies

    @branch_policies.setter
    def branch_policies(self, branch_policies):
        """Sets the branch_policies of this ReposListDeploymentBranchPolicies200Response.


        :param branch_policies: The branch_policies of this ReposListDeploymentBranchPolicies200Response.
        :type branch_policies: List[DeploymentBranchPolicy]
        """
        if branch_policies is None:
            raise ValueError("Invalid value for `branch_policies`, must not be `None`")

        self._branch_policies = branch_policies

    @property
    def total_count(self):
        """Gets the total_count of this ReposListDeploymentBranchPolicies200Response.

        The number of deployment branch policies for the environment.

        :return: The total_count of this ReposListDeploymentBranchPolicies200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ReposListDeploymentBranchPolicies200Response.

        The number of deployment branch policies for the environment.

        :param total_count: The total_count of this ReposListDeploymentBranchPolicies200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
