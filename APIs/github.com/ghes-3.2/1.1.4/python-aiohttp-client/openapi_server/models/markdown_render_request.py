# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarkdownRenderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: str=None, mode: str='markdown', text: str=None):
        """MarkdownRenderRequest - a model defined in OpenAPI

        :param context: The context of this MarkdownRenderRequest.
        :param mode: The mode of this MarkdownRenderRequest.
        :param text: The text of this MarkdownRenderRequest.
        """
        self.openapi_types = {
            'context': str,
            'mode': str,
            'text': str
        }

        self.attribute_map = {
            'context': 'context',
            'mode': 'mode',
            'text': 'text'
        }

        self._context = context
        self._mode = mode
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarkdownRenderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The markdown_render_request of this MarkdownRenderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this MarkdownRenderRequest.

        The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.

        :return: The context of this MarkdownRenderRequest.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MarkdownRenderRequest.

        The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.

        :param context: The context of this MarkdownRenderRequest.
        :type context: str
        """

        self._context = context

    @property
    def mode(self):
        """Gets the mode of this MarkdownRenderRequest.

        The rendering mode.

        :return: The mode of this MarkdownRenderRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MarkdownRenderRequest.

        The rendering mode.

        :param mode: The mode of this MarkdownRenderRequest.
        :type mode: str
        """
        allowed_values = ["markdown", "gfm"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def text(self):
        """Gets the text of this MarkdownRenderRequest.

        The Markdown text to render in HTML.

        :return: The text of this MarkdownRenderRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MarkdownRenderRequest.

        The Markdown text to render in HTML.

        :param text: The text of this MarkdownRenderRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
