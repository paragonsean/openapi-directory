# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_approvals_environments_inner import EnvironmentApprovalsEnvironmentsInner
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class EnvironmentApprovals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, environments: List[EnvironmentApprovalsEnvironmentsInner]=None, state: str=None, user: SimpleUser=None):
        """EnvironmentApprovals - a model defined in OpenAPI

        :param comment: The comment of this EnvironmentApprovals.
        :param environments: The environments of this EnvironmentApprovals.
        :param state: The state of this EnvironmentApprovals.
        :param user: The user of this EnvironmentApprovals.
        """
        self.openapi_types = {
            'comment': str,
            'environments': List[EnvironmentApprovalsEnvironmentsInner],
            'state': str,
            'user': SimpleUser
        }

        self.attribute_map = {
            'comment': 'comment',
            'environments': 'environments',
            'state': 'state',
            'user': 'user'
        }

        self._comment = comment
        self._environments = environments
        self._state = state
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentApprovals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The environment-approvals of this EnvironmentApprovals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this EnvironmentApprovals.

        The comment submitted with the deployment review

        :return: The comment of this EnvironmentApprovals.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EnvironmentApprovals.

        The comment submitted with the deployment review

        :param comment: The comment of this EnvironmentApprovals.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def environments(self):
        """Gets the environments of this EnvironmentApprovals.

        The list of environments that were approved or rejected

        :return: The environments of this EnvironmentApprovals.
        :rtype: List[EnvironmentApprovalsEnvironmentsInner]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this EnvironmentApprovals.

        The list of environments that were approved or rejected

        :param environments: The environments of this EnvironmentApprovals.
        :type environments: List[EnvironmentApprovalsEnvironmentsInner]
        """
        if environments is None:
            raise ValueError("Invalid value for `environments`, must not be `None`")

        self._environments = environments

    @property
    def state(self):
        """Gets the state of this EnvironmentApprovals.

        Whether deployment to the environment(s) was approved or rejected

        :return: The state of this EnvironmentApprovals.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EnvironmentApprovals.

        Whether deployment to the environment(s) was approved or rejected

        :param state: The state of this EnvironmentApprovals.
        :type state: str
        """
        allowed_values = ["approved", "rejected"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user(self):
        """Gets the user of this EnvironmentApprovals.


        :return: The user of this EnvironmentApprovals.
        :rtype: SimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EnvironmentApprovals.


        :param user: The user of this EnvironmentApprovals.
        :type user: SimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
