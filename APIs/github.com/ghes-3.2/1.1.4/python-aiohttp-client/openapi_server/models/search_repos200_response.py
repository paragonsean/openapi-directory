# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repo_search_result_item import RepoSearchResultItem
from openapi_server import util


class SearchRepos200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incomplete_results: bool=None, items: List[RepoSearchResultItem]=None, total_count: int=None):
        """SearchRepos200Response - a model defined in OpenAPI

        :param incomplete_results: The incomplete_results of this SearchRepos200Response.
        :param items: The items of this SearchRepos200Response.
        :param total_count: The total_count of this SearchRepos200Response.
        """
        self.openapi_types = {
            'incomplete_results': bool,
            'items': List[RepoSearchResultItem],
            'total_count': int
        }

        self.attribute_map = {
            'incomplete_results': 'incomplete_results',
            'items': 'items',
            'total_count': 'total_count'
        }

        self._incomplete_results = incomplete_results
        self._items = items
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRepos200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_repos_200_response of this SearchRepos200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incomplete_results(self):
        """Gets the incomplete_results of this SearchRepos200Response.


        :return: The incomplete_results of this SearchRepos200Response.
        :rtype: bool
        """
        return self._incomplete_results

    @incomplete_results.setter
    def incomplete_results(self, incomplete_results):
        """Sets the incomplete_results of this SearchRepos200Response.


        :param incomplete_results: The incomplete_results of this SearchRepos200Response.
        :type incomplete_results: bool
        """
        if incomplete_results is None:
            raise ValueError("Invalid value for `incomplete_results`, must not be `None`")

        self._incomplete_results = incomplete_results

    @property
    def items(self):
        """Gets the items of this SearchRepos200Response.


        :return: The items of this SearchRepos200Response.
        :rtype: List[RepoSearchResultItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SearchRepos200Response.


        :param items: The items of this SearchRepos200Response.
        :type items: List[RepoSearchResultItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def total_count(self):
        """Gets the total_count of this SearchRepos200Response.


        :return: The total_count of this SearchRepos200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SearchRepos200Response.


        :param total_count: The total_count of this SearchRepos200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
