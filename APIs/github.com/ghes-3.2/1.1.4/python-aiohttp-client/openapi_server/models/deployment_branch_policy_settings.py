# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentBranchPolicySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_branch_policies: bool=None, protected_branches: bool=None):
        """DeploymentBranchPolicySettings - a model defined in OpenAPI

        :param custom_branch_policies: The custom_branch_policies of this DeploymentBranchPolicySettings.
        :param protected_branches: The protected_branches of this DeploymentBranchPolicySettings.
        """
        self.openapi_types = {
            'custom_branch_policies': bool,
            'protected_branches': bool
        }

        self.attribute_map = {
            'custom_branch_policies': 'custom_branch_policies',
            'protected_branches': 'protected_branches'
        }

        self._custom_branch_policies = custom_branch_policies
        self._protected_branches = protected_branches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentBranchPolicySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deployment-branch-policy-settings of this DeploymentBranchPolicySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_branch_policies(self):
        """Gets the custom_branch_policies of this DeploymentBranchPolicySettings.

        Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.

        :return: The custom_branch_policies of this DeploymentBranchPolicySettings.
        :rtype: bool
        """
        return self._custom_branch_policies

    @custom_branch_policies.setter
    def custom_branch_policies(self, custom_branch_policies):
        """Sets the custom_branch_policies of this DeploymentBranchPolicySettings.

        Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.

        :param custom_branch_policies: The custom_branch_policies of this DeploymentBranchPolicySettings.
        :type custom_branch_policies: bool
        """
        if custom_branch_policies is None:
            raise ValueError("Invalid value for `custom_branch_policies`, must not be `None`")

        self._custom_branch_policies = custom_branch_policies

    @property
    def protected_branches(self):
        """Gets the protected_branches of this DeploymentBranchPolicySettings.

        Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.

        :return: The protected_branches of this DeploymentBranchPolicySettings.
        :rtype: bool
        """
        return self._protected_branches

    @protected_branches.setter
    def protected_branches(self, protected_branches):
        """Sets the protected_branches of this DeploymentBranchPolicySettings.

        Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.

        :param protected_branches: The protected_branches of this DeploymentBranchPolicySettings.
        :type protected_branches: bool
        """
        if protected_branches is None:
            raise ValueError("Invalid value for `protected_branches`, must not be `None`")

        self._protected_branches = protected_branches
