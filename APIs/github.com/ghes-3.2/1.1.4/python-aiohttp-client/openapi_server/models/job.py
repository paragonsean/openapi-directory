# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_steps_inner import JobStepsInner
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_run_url: str=None, completed_at: datetime=None, conclusion: str=None, head_sha: str=None, html_url: str=None, id: int=None, name: str=None, node_id: str=None, run_id: int=None, run_url: str=None, started_at: datetime=None, status: str=None, steps: List[JobStepsInner]=None, url: str=None):
        """Job - a model defined in OpenAPI

        :param check_run_url: The check_run_url of this Job.
        :param completed_at: The completed_at of this Job.
        :param conclusion: The conclusion of this Job.
        :param head_sha: The head_sha of this Job.
        :param html_url: The html_url of this Job.
        :param id: The id of this Job.
        :param name: The name of this Job.
        :param node_id: The node_id of this Job.
        :param run_id: The run_id of this Job.
        :param run_url: The run_url of this Job.
        :param started_at: The started_at of this Job.
        :param status: The status of this Job.
        :param steps: The steps of this Job.
        :param url: The url of this Job.
        """
        self.openapi_types = {
            'check_run_url': str,
            'completed_at': datetime,
            'conclusion': str,
            'head_sha': str,
            'html_url': str,
            'id': int,
            'name': str,
            'node_id': str,
            'run_id': int,
            'run_url': str,
            'started_at': datetime,
            'status': str,
            'steps': List[JobStepsInner],
            'url': str
        }

        self.attribute_map = {
            'check_run_url': 'check_run_url',
            'completed_at': 'completed_at',
            'conclusion': 'conclusion',
            'head_sha': 'head_sha',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'run_id': 'run_id',
            'run_url': 'run_url',
            'started_at': 'started_at',
            'status': 'status',
            'steps': 'steps',
            'url': 'url'
        }

        self._check_run_url = check_run_url
        self._completed_at = completed_at
        self._conclusion = conclusion
        self._head_sha = head_sha
        self._html_url = html_url
        self._id = id
        self._name = name
        self._node_id = node_id
        self._run_id = run_id
        self._run_url = run_url
        self._started_at = started_at
        self._status = status
        self._steps = steps
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_run_url(self):
        """Gets the check_run_url of this Job.


        :return: The check_run_url of this Job.
        :rtype: str
        """
        return self._check_run_url

    @check_run_url.setter
    def check_run_url(self, check_run_url):
        """Sets the check_run_url of this Job.


        :param check_run_url: The check_run_url of this Job.
        :type check_run_url: str
        """
        if check_run_url is None:
            raise ValueError("Invalid value for `check_run_url`, must not be `None`")

        self._check_run_url = check_run_url

    @property
    def completed_at(self):
        """Gets the completed_at of this Job.

        The time that the job finished, in ISO 8601 format.

        :return: The completed_at of this Job.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Job.

        The time that the job finished, in ISO 8601 format.

        :param completed_at: The completed_at of this Job.
        :type completed_at: datetime
        """
        if completed_at is None:
            raise ValueError("Invalid value for `completed_at`, must not be `None`")

        self._completed_at = completed_at

    @property
    def conclusion(self):
        """Gets the conclusion of this Job.

        The outcome of the job.

        :return: The conclusion of this Job.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this Job.

        The outcome of the job.

        :param conclusion: The conclusion of this Job.
        :type conclusion: str
        """
        allowed_values = [None,"success", "failure", "neutral", "cancelled", "skipped", "timed_out", "action_required"]  # noqa: E501
        if conclusion not in allowed_values:
            raise ValueError(
                "Invalid value for `conclusion` ({0}), must be one of {1}"
                .format(conclusion, allowed_values)
            )

        self._conclusion = conclusion

    @property
    def head_sha(self):
        """Gets the head_sha of this Job.

        The SHA of the commit that is being run.

        :return: The head_sha of this Job.
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this Job.

        The SHA of the commit that is being run.

        :param head_sha: The head_sha of this Job.
        :type head_sha: str
        """
        if head_sha is None:
            raise ValueError("Invalid value for `head_sha`, must not be `None`")

        self._head_sha = head_sha

    @property
    def html_url(self):
        """Gets the html_url of this Job.


        :return: The html_url of this Job.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Job.


        :param html_url: The html_url of this Job.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Job.

        The id of the job.

        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The id of the job.

        :param id: The id of this Job.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Job.

        The name of the job.

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The name of the job.

        :param name: The name of this Job.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Job.


        :return: The node_id of this Job.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Job.


        :param node_id: The node_id of this Job.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def run_id(self):
        """Gets the run_id of this Job.

        The id of the associated workflow run.

        :return: The run_id of this Job.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this Job.

        The id of the associated workflow run.

        :param run_id: The run_id of this Job.
        :type run_id: int
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")

        self._run_id = run_id

    @property
    def run_url(self):
        """Gets the run_url of this Job.


        :return: The run_url of this Job.
        :rtype: str
        """
        return self._run_url

    @run_url.setter
    def run_url(self, run_url):
        """Sets the run_url of this Job.


        :param run_url: The run_url of this Job.
        :type run_url: str
        """
        if run_url is None:
            raise ValueError("Invalid value for `run_url`, must not be `None`")

        self._run_url = run_url

    @property
    def started_at(self):
        """Gets the started_at of this Job.

        The time that the job started, in ISO 8601 format.

        :return: The started_at of this Job.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Job.

        The time that the job started, in ISO 8601 format.

        :param started_at: The started_at of this Job.
        :type started_at: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this Job.

        The phase of the lifecycle that the job is currently in.

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        The phase of the lifecycle that the job is currently in.

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def steps(self):
        """Gets the steps of this Job.

        Steps in this job.

        :return: The steps of this Job.
        :rtype: List[JobStepsInner]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Job.

        Steps in this job.

        :param steps: The steps of this Job.
        :type steps: List[JobStepsInner]
        """

        self._steps = steps

    @property
    def url(self):
        """Gets the url of this Job.


        :return: The url of this Job.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Job.


        :param url: The url of this Job.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
