# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_create_tree_request_tree_inner import GitCreateTreeRequestTreeInner
from openapi_server import util


class GitCreateTreeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_tree: str=None, tree: List[GitCreateTreeRequestTreeInner]=None):
        """GitCreateTreeRequest - a model defined in OpenAPI

        :param base_tree: The base_tree of this GitCreateTreeRequest.
        :param tree: The tree of this GitCreateTreeRequest.
        """
        self.openapi_types = {
            'base_tree': str,
            'tree': List[GitCreateTreeRequestTreeInner]
        }

        self.attribute_map = {
            'base_tree': 'base_tree',
            'tree': 'tree'
        }

        self._base_tree = base_tree
        self._tree = tree

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCreateTreeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The git_create_tree_request of this GitCreateTreeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_tree(self):
        """Gets the base_tree of this GitCreateTreeRequest.

        The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit. 

        :return: The base_tree of this GitCreateTreeRequest.
        :rtype: str
        """
        return self._base_tree

    @base_tree.setter
    def base_tree(self, base_tree):
        """Sets the base_tree of this GitCreateTreeRequest.

        The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit. 

        :param base_tree: The base_tree of this GitCreateTreeRequest.
        :type base_tree: str
        """

        self._base_tree = base_tree

    @property
    def tree(self):
        """Gets the tree of this GitCreateTreeRequest.

        Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.

        :return: The tree of this GitCreateTreeRequest.
        :rtype: List[GitCreateTreeRequestTreeInner]
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this GitCreateTreeRequest.

        Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.

        :param tree: The tree of this GitCreateTreeRequest.
        :type tree: List[GitCreateTreeRequestTreeInner]
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")

        self._tree = tree
