# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesAddLabelsRequestOneOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List[str]=None):
        """IssuesAddLabelsRequestOneOf - a model defined in OpenAPI

        :param labels: The labels of this IssuesAddLabelsRequestOneOf.
        """
        self.openapi_types = {
            'labels': List[str]
        }

        self.attribute_map = {
            'labels': 'labels'
        }

        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesAddLabelsRequestOneOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_add_labels_request_oneOf of this IssuesAddLabelsRequestOneOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this IssuesAddLabelsRequestOneOf.

        The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/enterprise-server@3.2/rest/reference/issues#set-labels-for-an-issue).\"

        :return: The labels of this IssuesAddLabelsRequestOneOf.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssuesAddLabelsRequestOneOf.

        The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/enterprise-server@3.2/rest/reference/issues#set-labels-for-an-issue).\"

        :param labels: The labels of this IssuesAddLabelsRequestOneOf.
        :type labels: List[str]
        """
        if labels is not None and len(labels) < 1:
            raise ValueError("Invalid value for `labels`, number of items must be greater than or equal to `1`")

        self._labels = labels
