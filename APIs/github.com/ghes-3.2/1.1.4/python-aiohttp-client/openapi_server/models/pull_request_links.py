# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server import util


class PullRequestLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: Link=None, commits: Link=None, html: Link=None, issue: Link=None, review_comment: Link=None, review_comments: Link=None, _self: Link=None, statuses: Link=None):
        """PullRequestLinks - a model defined in OpenAPI

        :param comments: The comments of this PullRequestLinks.
        :param commits: The commits of this PullRequestLinks.
        :param html: The html of this PullRequestLinks.
        :param issue: The issue of this PullRequestLinks.
        :param review_comment: The review_comment of this PullRequestLinks.
        :param review_comments: The review_comments of this PullRequestLinks.
        :param _self: The _self of this PullRequestLinks.
        :param statuses: The statuses of this PullRequestLinks.
        """
        self.openapi_types = {
            'comments': Link,
            'commits': Link,
            'html': Link,
            'issue': Link,
            'review_comment': Link,
            'review_comments': Link,
            '_self': Link,
            'statuses': Link
        }

        self.attribute_map = {
            'comments': 'comments',
            'commits': 'commits',
            'html': 'html',
            'issue': 'issue',
            'review_comment': 'review_comment',
            'review_comments': 'review_comments',
            '_self': 'self',
            'statuses': 'statuses'
        }

        self._comments = comments
        self._commits = commits
        self._html = html
        self._issue = issue
        self._review_comment = review_comment
        self._review_comments = review_comments
        self.__self = _self
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequestLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull_request__links of this PullRequestLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this PullRequestLinks.


        :return: The comments of this PullRequestLinks.
        :rtype: Link
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this PullRequestLinks.


        :param comments: The comments of this PullRequestLinks.
        :type comments: Link
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def commits(self):
        """Gets the commits of this PullRequestLinks.


        :return: The commits of this PullRequestLinks.
        :rtype: Link
        """
        return self._commits

    @commits.setter
    def commits(self, commits):
        """Sets the commits of this PullRequestLinks.


        :param commits: The commits of this PullRequestLinks.
        :type commits: Link
        """
        if commits is None:
            raise ValueError("Invalid value for `commits`, must not be `None`")

        self._commits = commits

    @property
    def html(self):
        """Gets the html of this PullRequestLinks.


        :return: The html of this PullRequestLinks.
        :rtype: Link
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this PullRequestLinks.


        :param html: The html of this PullRequestLinks.
        :type html: Link
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def issue(self):
        """Gets the issue of this PullRequestLinks.


        :return: The issue of this PullRequestLinks.
        :rtype: Link
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this PullRequestLinks.


        :param issue: The issue of this PullRequestLinks.
        :type issue: Link
        """
        if issue is None:
            raise ValueError("Invalid value for `issue`, must not be `None`")

        self._issue = issue

    @property
    def review_comment(self):
        """Gets the review_comment of this PullRequestLinks.


        :return: The review_comment of this PullRequestLinks.
        :rtype: Link
        """
        return self._review_comment

    @review_comment.setter
    def review_comment(self, review_comment):
        """Sets the review_comment of this PullRequestLinks.


        :param review_comment: The review_comment of this PullRequestLinks.
        :type review_comment: Link
        """
        if review_comment is None:
            raise ValueError("Invalid value for `review_comment`, must not be `None`")

        self._review_comment = review_comment

    @property
    def review_comments(self):
        """Gets the review_comments of this PullRequestLinks.


        :return: The review_comments of this PullRequestLinks.
        :rtype: Link
        """
        return self._review_comments

    @review_comments.setter
    def review_comments(self, review_comments):
        """Sets the review_comments of this PullRequestLinks.


        :param review_comments: The review_comments of this PullRequestLinks.
        :type review_comments: Link
        """
        if review_comments is None:
            raise ValueError("Invalid value for `review_comments`, must not be `None`")

        self._review_comments = review_comments

    @property
    def _self(self):
        """Gets the _self of this PullRequestLinks.


        :return: The _self of this PullRequestLinks.
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PullRequestLinks.


        :param _self: The _self of this PullRequestLinks.
        :type _self: Link
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def statuses(self):
        """Gets the statuses of this PullRequestLinks.


        :return: The statuses of this PullRequestLinks.
        :rtype: Link
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this PullRequestLinks.


        :param statuses: The statuses of this PullRequestLinks.
        :type statuses: Link
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses
