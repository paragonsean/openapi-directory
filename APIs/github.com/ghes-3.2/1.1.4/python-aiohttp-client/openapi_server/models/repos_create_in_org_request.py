# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposCreateInOrgRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_merge_commit: bool=True, allow_rebase_merge: bool=True, allow_squash_merge: bool=True, auto_init: bool=False, delete_branch_on_merge: bool=False, description: str=None, gitignore_template: str=None, has_downloads: bool=True, has_issues: bool=True, has_projects: bool=True, has_wiki: bool=True, homepage: str=None, is_template: bool=False, license_template: str=None, merge_commit_message: str=None, merge_commit_title: str=None, name: str=None, private: bool=False, squash_merge_commit_message: str=None, squash_merge_commit_title: str=None, team_id: int=None, use_squash_pr_title_as_default: bool=False, visibility: str=None):
        """ReposCreateInOrgRequest - a model defined in OpenAPI

        :param allow_merge_commit: The allow_merge_commit of this ReposCreateInOrgRequest.
        :param allow_rebase_merge: The allow_rebase_merge of this ReposCreateInOrgRequest.
        :param allow_squash_merge: The allow_squash_merge of this ReposCreateInOrgRequest.
        :param auto_init: The auto_init of this ReposCreateInOrgRequest.
        :param delete_branch_on_merge: The delete_branch_on_merge of this ReposCreateInOrgRequest.
        :param description: The description of this ReposCreateInOrgRequest.
        :param gitignore_template: The gitignore_template of this ReposCreateInOrgRequest.
        :param has_downloads: The has_downloads of this ReposCreateInOrgRequest.
        :param has_issues: The has_issues of this ReposCreateInOrgRequest.
        :param has_projects: The has_projects of this ReposCreateInOrgRequest.
        :param has_wiki: The has_wiki of this ReposCreateInOrgRequest.
        :param homepage: The homepage of this ReposCreateInOrgRequest.
        :param is_template: The is_template of this ReposCreateInOrgRequest.
        :param license_template: The license_template of this ReposCreateInOrgRequest.
        :param merge_commit_message: The merge_commit_message of this ReposCreateInOrgRequest.
        :param merge_commit_title: The merge_commit_title of this ReposCreateInOrgRequest.
        :param name: The name of this ReposCreateInOrgRequest.
        :param private: The private of this ReposCreateInOrgRequest.
        :param squash_merge_commit_message: The squash_merge_commit_message of this ReposCreateInOrgRequest.
        :param squash_merge_commit_title: The squash_merge_commit_title of this ReposCreateInOrgRequest.
        :param team_id: The team_id of this ReposCreateInOrgRequest.
        :param use_squash_pr_title_as_default: The use_squash_pr_title_as_default of this ReposCreateInOrgRequest.
        :param visibility: The visibility of this ReposCreateInOrgRequest.
        """
        self.openapi_types = {
            'allow_merge_commit': bool,
            'allow_rebase_merge': bool,
            'allow_squash_merge': bool,
            'auto_init': bool,
            'delete_branch_on_merge': bool,
            'description': str,
            'gitignore_template': str,
            'has_downloads': bool,
            'has_issues': bool,
            'has_projects': bool,
            'has_wiki': bool,
            'homepage': str,
            'is_template': bool,
            'license_template': str,
            'merge_commit_message': str,
            'merge_commit_title': str,
            'name': str,
            'private': bool,
            'squash_merge_commit_message': str,
            'squash_merge_commit_title': str,
            'team_id': int,
            'use_squash_pr_title_as_default': bool,
            'visibility': str
        }

        self.attribute_map = {
            'allow_merge_commit': 'allow_merge_commit',
            'allow_rebase_merge': 'allow_rebase_merge',
            'allow_squash_merge': 'allow_squash_merge',
            'auto_init': 'auto_init',
            'delete_branch_on_merge': 'delete_branch_on_merge',
            'description': 'description',
            'gitignore_template': 'gitignore_template',
            'has_downloads': 'has_downloads',
            'has_issues': 'has_issues',
            'has_projects': 'has_projects',
            'has_wiki': 'has_wiki',
            'homepage': 'homepage',
            'is_template': 'is_template',
            'license_template': 'license_template',
            'merge_commit_message': 'merge_commit_message',
            'merge_commit_title': 'merge_commit_title',
            'name': 'name',
            'private': 'private',
            'squash_merge_commit_message': 'squash_merge_commit_message',
            'squash_merge_commit_title': 'squash_merge_commit_title',
            'team_id': 'team_id',
            'use_squash_pr_title_as_default': 'use_squash_pr_title_as_default',
            'visibility': 'visibility'
        }

        self._allow_merge_commit = allow_merge_commit
        self._allow_rebase_merge = allow_rebase_merge
        self._allow_squash_merge = allow_squash_merge
        self._auto_init = auto_init
        self._delete_branch_on_merge = delete_branch_on_merge
        self._description = description
        self._gitignore_template = gitignore_template
        self._has_downloads = has_downloads
        self._has_issues = has_issues
        self._has_projects = has_projects
        self._has_wiki = has_wiki
        self._homepage = homepage
        self._is_template = is_template
        self._license_template = license_template
        self._merge_commit_message = merge_commit_message
        self._merge_commit_title = merge_commit_title
        self._name = name
        self._private = private
        self._squash_merge_commit_message = squash_merge_commit_message
        self._squash_merge_commit_title = squash_merge_commit_title
        self._team_id = team_id
        self._use_squash_pr_title_as_default = use_squash_pr_title_as_default
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateInOrgRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_in_org_request of this ReposCreateInOrgRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_merge_commit(self):
        """Gets the allow_merge_commit of this ReposCreateInOrgRequest.

        Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :return: The allow_merge_commit of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._allow_merge_commit

    @allow_merge_commit.setter
    def allow_merge_commit(self, allow_merge_commit):
        """Sets the allow_merge_commit of this ReposCreateInOrgRequest.

        Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :param allow_merge_commit: The allow_merge_commit of this ReposCreateInOrgRequest.
        :type allow_merge_commit: bool
        """

        self._allow_merge_commit = allow_merge_commit

    @property
    def allow_rebase_merge(self):
        """Gets the allow_rebase_merge of this ReposCreateInOrgRequest.

        Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :return: The allow_rebase_merge of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._allow_rebase_merge

    @allow_rebase_merge.setter
    def allow_rebase_merge(self, allow_rebase_merge):
        """Sets the allow_rebase_merge of this ReposCreateInOrgRequest.

        Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :param allow_rebase_merge: The allow_rebase_merge of this ReposCreateInOrgRequest.
        :type allow_rebase_merge: bool
        """

        self._allow_rebase_merge = allow_rebase_merge

    @property
    def allow_squash_merge(self):
        """Gets the allow_squash_merge of this ReposCreateInOrgRequest.

        Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :return: The allow_squash_merge of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._allow_squash_merge

    @allow_squash_merge.setter
    def allow_squash_merge(self, allow_squash_merge):
        """Sets the allow_squash_merge of this ReposCreateInOrgRequest.

        Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :param allow_squash_merge: The allow_squash_merge of this ReposCreateInOrgRequest.
        :type allow_squash_merge: bool
        """

        self._allow_squash_merge = allow_squash_merge

    @property
    def auto_init(self):
        """Gets the auto_init of this ReposCreateInOrgRequest.

        Pass `true` to create an initial commit with empty README.

        :return: The auto_init of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._auto_init

    @auto_init.setter
    def auto_init(self, auto_init):
        """Sets the auto_init of this ReposCreateInOrgRequest.

        Pass `true` to create an initial commit with empty README.

        :param auto_init: The auto_init of this ReposCreateInOrgRequest.
        :type auto_init: bool
        """

        self._auto_init = auto_init

    @property
    def delete_branch_on_merge(self):
        """Gets the delete_branch_on_merge of this ReposCreateInOrgRequest.

        Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.

        :return: The delete_branch_on_merge of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._delete_branch_on_merge

    @delete_branch_on_merge.setter
    def delete_branch_on_merge(self, delete_branch_on_merge):
        """Sets the delete_branch_on_merge of this ReposCreateInOrgRequest.

        Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.

        :param delete_branch_on_merge: The delete_branch_on_merge of this ReposCreateInOrgRequest.
        :type delete_branch_on_merge: bool
        """

        self._delete_branch_on_merge = delete_branch_on_merge

    @property
    def description(self):
        """Gets the description of this ReposCreateInOrgRequest.

        A short description of the repository.

        :return: The description of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposCreateInOrgRequest.

        A short description of the repository.

        :param description: The description of this ReposCreateInOrgRequest.
        :type description: str
        """

        self._description = description

    @property
    def gitignore_template(self):
        """Gets the gitignore_template of this ReposCreateInOrgRequest.

        Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".

        :return: The gitignore_template of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._gitignore_template

    @gitignore_template.setter
    def gitignore_template(self, gitignore_template):
        """Sets the gitignore_template of this ReposCreateInOrgRequest.

        Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".

        :param gitignore_template: The gitignore_template of this ReposCreateInOrgRequest.
        :type gitignore_template: str
        """

        self._gitignore_template = gitignore_template

    @property
    def has_downloads(self):
        """Gets the has_downloads of this ReposCreateInOrgRequest.

        Whether downloads are enabled.

        :return: The has_downloads of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._has_downloads

    @has_downloads.setter
    def has_downloads(self, has_downloads):
        """Sets the has_downloads of this ReposCreateInOrgRequest.

        Whether downloads are enabled.

        :param has_downloads: The has_downloads of this ReposCreateInOrgRequest.
        :type has_downloads: bool
        """

        self._has_downloads = has_downloads

    @property
    def has_issues(self):
        """Gets the has_issues of this ReposCreateInOrgRequest.

        Either `true` to enable issues for this repository or `false` to disable them.

        :return: The has_issues of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this ReposCreateInOrgRequest.

        Either `true` to enable issues for this repository or `false` to disable them.

        :param has_issues: The has_issues of this ReposCreateInOrgRequest.
        :type has_issues: bool
        """

        self._has_issues = has_issues

    @property
    def has_projects(self):
        """Gets the has_projects of this ReposCreateInOrgRequest.

        Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.

        :return: The has_projects of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._has_projects

    @has_projects.setter
    def has_projects(self, has_projects):
        """Sets the has_projects of this ReposCreateInOrgRequest.

        Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.

        :param has_projects: The has_projects of this ReposCreateInOrgRequest.
        :type has_projects: bool
        """

        self._has_projects = has_projects

    @property
    def has_wiki(self):
        """Gets the has_wiki of this ReposCreateInOrgRequest.

        Either `true` to enable the wiki for this repository or `false` to disable it.

        :return: The has_wiki of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._has_wiki

    @has_wiki.setter
    def has_wiki(self, has_wiki):
        """Sets the has_wiki of this ReposCreateInOrgRequest.

        Either `true` to enable the wiki for this repository or `false` to disable it.

        :param has_wiki: The has_wiki of this ReposCreateInOrgRequest.
        :type has_wiki: bool
        """

        self._has_wiki = has_wiki

    @property
    def homepage(self):
        """Gets the homepage of this ReposCreateInOrgRequest.

        A URL with more information about the repository.

        :return: The homepage of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this ReposCreateInOrgRequest.

        A URL with more information about the repository.

        :param homepage: The homepage of this ReposCreateInOrgRequest.
        :type homepage: str
        """

        self._homepage = homepage

    @property
    def is_template(self):
        """Gets the is_template of this ReposCreateInOrgRequest.

        Either `true` to make this repo available as a template repository or `false` to prevent it.

        :return: The is_template of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this ReposCreateInOrgRequest.

        Either `true` to make this repo available as a template repository or `false` to prevent it.

        :param is_template: The is_template of this ReposCreateInOrgRequest.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def license_template(self):
        """Gets the license_template of this ReposCreateInOrgRequest.

        Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".

        :return: The license_template of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._license_template

    @license_template.setter
    def license_template(self, license_template):
        """Sets the license_template of this ReposCreateInOrgRequest.

        Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".

        :param license_template: The license_template of this ReposCreateInOrgRequest.
        :type license_template: str
        """

        self._license_template = license_template

    @property
    def merge_commit_message(self):
        """Gets the merge_commit_message of this ReposCreateInOrgRequest.

        The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.

        :return: The merge_commit_message of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._merge_commit_message

    @merge_commit_message.setter
    def merge_commit_message(self, merge_commit_message):
        """Sets the merge_commit_message of this ReposCreateInOrgRequest.

        The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.

        :param merge_commit_message: The merge_commit_message of this ReposCreateInOrgRequest.
        :type merge_commit_message: str
        """
        allowed_values = ["PR_BODY", "PR_TITLE", "BLANK"]  # noqa: E501
        if merge_commit_message not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_commit_message` ({0}), must be one of {1}"
                .format(merge_commit_message, allowed_values)
            )

        self._merge_commit_message = merge_commit_message

    @property
    def merge_commit_title(self):
        """Gets the merge_commit_title of this ReposCreateInOrgRequest.

        The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).

        :return: The merge_commit_title of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._merge_commit_title

    @merge_commit_title.setter
    def merge_commit_title(self, merge_commit_title):
        """Sets the merge_commit_title of this ReposCreateInOrgRequest.

        The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).

        :param merge_commit_title: The merge_commit_title of this ReposCreateInOrgRequest.
        :type merge_commit_title: str
        """
        allowed_values = ["PR_TITLE", "MERGE_MESSAGE"]  # noqa: E501
        if merge_commit_title not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_commit_title` ({0}), must be one of {1}"
                .format(merge_commit_title, allowed_values)
            )

        self._merge_commit_title = merge_commit_title

    @property
    def name(self):
        """Gets the name of this ReposCreateInOrgRequest.

        The name of the repository.

        :return: The name of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReposCreateInOrgRequest.

        The name of the repository.

        :param name: The name of this ReposCreateInOrgRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def private(self):
        """Gets the private of this ReposCreateInOrgRequest.

        Whether the repository is private.

        :return: The private of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ReposCreateInOrgRequest.

        Whether the repository is private.

        :param private: The private of this ReposCreateInOrgRequest.
        :type private: bool
        """

        self._private = private

    @property
    def squash_merge_commit_message(self):
        """Gets the squash_merge_commit_message of this ReposCreateInOrgRequest.

        The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.

        :return: The squash_merge_commit_message of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._squash_merge_commit_message

    @squash_merge_commit_message.setter
    def squash_merge_commit_message(self, squash_merge_commit_message):
        """Sets the squash_merge_commit_message of this ReposCreateInOrgRequest.

        The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.

        :param squash_merge_commit_message: The squash_merge_commit_message of this ReposCreateInOrgRequest.
        :type squash_merge_commit_message: str
        """
        allowed_values = ["PR_BODY", "COMMIT_MESSAGES", "BLANK"]  # noqa: E501
        if squash_merge_commit_message not in allowed_values:
            raise ValueError(
                "Invalid value for `squash_merge_commit_message` ({0}), must be one of {1}"
                .format(squash_merge_commit_message, allowed_values)
            )

        self._squash_merge_commit_message = squash_merge_commit_message

    @property
    def squash_merge_commit_title(self):
        """Gets the squash_merge_commit_title of this ReposCreateInOrgRequest.

        The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).

        :return: The squash_merge_commit_title of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._squash_merge_commit_title

    @squash_merge_commit_title.setter
    def squash_merge_commit_title(self, squash_merge_commit_title):
        """Sets the squash_merge_commit_title of this ReposCreateInOrgRequest.

        The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).

        :param squash_merge_commit_title: The squash_merge_commit_title of this ReposCreateInOrgRequest.
        :type squash_merge_commit_title: str
        """
        allowed_values = ["PR_TITLE", "COMMIT_OR_PR_TITLE"]  # noqa: E501
        if squash_merge_commit_title not in allowed_values:
            raise ValueError(
                "Invalid value for `squash_merge_commit_title` ({0}), must be one of {1}"
                .format(squash_merge_commit_title, allowed_values)
            )

        self._squash_merge_commit_title = squash_merge_commit_title

    @property
    def team_id(self):
        """Gets the team_id of this ReposCreateInOrgRequest.

        The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.

        :return: The team_id of this ReposCreateInOrgRequest.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ReposCreateInOrgRequest.

        The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.

        :param team_id: The team_id of this ReposCreateInOrgRequest.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def use_squash_pr_title_as_default(self):
        """Gets the use_squash_pr_title_as_default of this ReposCreateInOrgRequest.

        Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.

        :return: The use_squash_pr_title_as_default of this ReposCreateInOrgRequest.
        :rtype: bool
        """
        return self._use_squash_pr_title_as_default

    @use_squash_pr_title_as_default.setter
    def use_squash_pr_title_as_default(self, use_squash_pr_title_as_default):
        """Sets the use_squash_pr_title_as_default of this ReposCreateInOrgRequest.

        Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.

        :param use_squash_pr_title_as_default: The use_squash_pr_title_as_default of this ReposCreateInOrgRequest.
        :type use_squash_pr_title_as_default: bool
        """

        self._use_squash_pr_title_as_default = use_squash_pr_title_as_default

    @property
    def visibility(self):
        """Gets the visibility of this ReposCreateInOrgRequest.

        Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.

        :return: The visibility of this ReposCreateInOrgRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ReposCreateInOrgRequest.

        Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.

        :param visibility: The visibility of this ReposCreateInOrgRequest.
        :type visibility: str
        """
        allowed_values = ["public", "private", "internal"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
