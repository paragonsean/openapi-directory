# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_protection_rules_inner_any_of1_reviewers_inner import EnvironmentProtectionRulesInnerAnyOf1ReviewersInner
from openapi_server.models.pending_deployment_environment import PendingDeploymentEnvironment
from openapi_server import util


class PendingDeployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_user_can_approve: bool=None, environment: PendingDeploymentEnvironment=None, reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]=None, wait_timer: int=None, wait_timer_started_at: datetime=None):
        """PendingDeployment - a model defined in OpenAPI

        :param current_user_can_approve: The current_user_can_approve of this PendingDeployment.
        :param environment: The environment of this PendingDeployment.
        :param reviewers: The reviewers of this PendingDeployment.
        :param wait_timer: The wait_timer of this PendingDeployment.
        :param wait_timer_started_at: The wait_timer_started_at of this PendingDeployment.
        """
        self.openapi_types = {
            'current_user_can_approve': bool,
            'environment': PendingDeploymentEnvironment,
            'reviewers': List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner],
            'wait_timer': int,
            'wait_timer_started_at': datetime
        }

        self.attribute_map = {
            'current_user_can_approve': 'current_user_can_approve',
            'environment': 'environment',
            'reviewers': 'reviewers',
            'wait_timer': 'wait_timer',
            'wait_timer_started_at': 'wait_timer_started_at'
        }

        self._current_user_can_approve = current_user_can_approve
        self._environment = environment
        self._reviewers = reviewers
        self._wait_timer = wait_timer
        self._wait_timer_started_at = wait_timer_started_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingDeployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pending-deployment of this PendingDeployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_user_can_approve(self):
        """Gets the current_user_can_approve of this PendingDeployment.

        Whether the currently authenticated user can approve the deployment

        :return: The current_user_can_approve of this PendingDeployment.
        :rtype: bool
        """
        return self._current_user_can_approve

    @current_user_can_approve.setter
    def current_user_can_approve(self, current_user_can_approve):
        """Sets the current_user_can_approve of this PendingDeployment.

        Whether the currently authenticated user can approve the deployment

        :param current_user_can_approve: The current_user_can_approve of this PendingDeployment.
        :type current_user_can_approve: bool
        """
        if current_user_can_approve is None:
            raise ValueError("Invalid value for `current_user_can_approve`, must not be `None`")

        self._current_user_can_approve = current_user_can_approve

    @property
    def environment(self):
        """Gets the environment of this PendingDeployment.


        :return: The environment of this PendingDeployment.
        :rtype: PendingDeploymentEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PendingDeployment.


        :param environment: The environment of this PendingDeployment.
        :type environment: PendingDeploymentEnvironment
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def reviewers(self):
        """Gets the reviewers of this PendingDeployment.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :return: The reviewers of this PendingDeployment.
        :rtype: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this PendingDeployment.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :param reviewers: The reviewers of this PendingDeployment.
        :type reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """
        if reviewers is None:
            raise ValueError("Invalid value for `reviewers`, must not be `None`")

        self._reviewers = reviewers

    @property
    def wait_timer(self):
        """Gets the wait_timer of this PendingDeployment.

        The set duration of the wait timer

        :return: The wait_timer of this PendingDeployment.
        :rtype: int
        """
        return self._wait_timer

    @wait_timer.setter
    def wait_timer(self, wait_timer):
        """Sets the wait_timer of this PendingDeployment.

        The set duration of the wait timer

        :param wait_timer: The wait_timer of this PendingDeployment.
        :type wait_timer: int
        """
        if wait_timer is None:
            raise ValueError("Invalid value for `wait_timer`, must not be `None`")

        self._wait_timer = wait_timer

    @property
    def wait_timer_started_at(self):
        """Gets the wait_timer_started_at of this PendingDeployment.

        The time that the wait timer began.

        :return: The wait_timer_started_at of this PendingDeployment.
        :rtype: datetime
        """
        return self._wait_timer_started_at

    @wait_timer_started_at.setter
    def wait_timer_started_at(self, wait_timer_started_at):
        """Sets the wait_timer_started_at of this PendingDeployment.

        The time that the wait timer began.

        :param wait_timer_started_at: The wait_timer_started_at of this PendingDeployment.
        :type wait_timer_started_at: datetime
        """
        if wait_timer_started_at is None:
            raise ValueError("Invalid value for `wait_timer_started_at`, must not be `None`")

        self._wait_timer_started_at = wait_timer_started_at
