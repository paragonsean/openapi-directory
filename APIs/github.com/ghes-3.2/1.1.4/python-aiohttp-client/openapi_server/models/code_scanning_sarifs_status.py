# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeScanningSarifsStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyses_url: str=None, processing_status: str=None):
        """CodeScanningSarifsStatus - a model defined in OpenAPI

        :param analyses_url: The analyses_url of this CodeScanningSarifsStatus.
        :param processing_status: The processing_status of this CodeScanningSarifsStatus.
        """
        self.openapi_types = {
            'analyses_url': str,
            'processing_status': str
        }

        self.attribute_map = {
            'analyses_url': 'analyses_url',
            'processing_status': 'processing_status'
        }

        self._analyses_url = analyses_url
        self._processing_status = processing_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningSarifsStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-sarifs-status of this CodeScanningSarifsStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyses_url(self):
        """Gets the analyses_url of this CodeScanningSarifsStatus.

        The REST API URL for getting the analyses associated with the upload.

        :return: The analyses_url of this CodeScanningSarifsStatus.
        :rtype: str
        """
        return self._analyses_url

    @analyses_url.setter
    def analyses_url(self, analyses_url):
        """Sets the analyses_url of this CodeScanningSarifsStatus.

        The REST API URL for getting the analyses associated with the upload.

        :param analyses_url: The analyses_url of this CodeScanningSarifsStatus.
        :type analyses_url: str
        """

        self._analyses_url = analyses_url

    @property
    def processing_status(self):
        """Gets the processing_status of this CodeScanningSarifsStatus.

        `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.

        :return: The processing_status of this CodeScanningSarifsStatus.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this CodeScanningSarifsStatus.

        `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.

        :param processing_status: The processing_status of this CodeScanningSarifsStatus.
        :type processing_status: str
        """
        allowed_values = ["pending", "complete"]  # noqa: E501
        if processing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_status` ({0}), must be one of {1}"
                .format(processing_status, allowed_values)
            )

        self._processing_status = processing_status
