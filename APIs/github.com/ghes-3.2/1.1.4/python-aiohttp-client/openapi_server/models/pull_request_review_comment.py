# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.pull_request_review_comment_links import PullRequestReviewCommentLinks
from openapi_server.models.reaction_rollup import ReactionRollup
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class PullRequestReviewComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PullRequestReviewCommentLinks=None, author_association: AuthorAssociation=None, body: str=None, body_html: str=None, body_text: str=None, commit_id: str=None, created_at: datetime=None, diff_hunk: str=None, html_url: str=None, id: int=None, in_reply_to_id: int=None, line: int=None, node_id: str=None, original_commit_id: str=None, original_line: int=None, original_position: int=None, original_start_line: int=None, path: str=None, position: int=None, pull_request_review_id: int=None, pull_request_url: str=None, reactions: ReactionRollup=None, side: str='RIGHT', start_line: int=None, start_side: str='RIGHT', updated_at: datetime=None, url: str=None, user: SimpleUser=None):
        """PullRequestReviewComment - a model defined in OpenAPI

        :param links: The links of this PullRequestReviewComment.
        :param author_association: The author_association of this PullRequestReviewComment.
        :param body: The body of this PullRequestReviewComment.
        :param body_html: The body_html of this PullRequestReviewComment.
        :param body_text: The body_text of this PullRequestReviewComment.
        :param commit_id: The commit_id of this PullRequestReviewComment.
        :param created_at: The created_at of this PullRequestReviewComment.
        :param diff_hunk: The diff_hunk of this PullRequestReviewComment.
        :param html_url: The html_url of this PullRequestReviewComment.
        :param id: The id of this PullRequestReviewComment.
        :param in_reply_to_id: The in_reply_to_id of this PullRequestReviewComment.
        :param line: The line of this PullRequestReviewComment.
        :param node_id: The node_id of this PullRequestReviewComment.
        :param original_commit_id: The original_commit_id of this PullRequestReviewComment.
        :param original_line: The original_line of this PullRequestReviewComment.
        :param original_position: The original_position of this PullRequestReviewComment.
        :param original_start_line: The original_start_line of this PullRequestReviewComment.
        :param path: The path of this PullRequestReviewComment.
        :param position: The position of this PullRequestReviewComment.
        :param pull_request_review_id: The pull_request_review_id of this PullRequestReviewComment.
        :param pull_request_url: The pull_request_url of this PullRequestReviewComment.
        :param reactions: The reactions of this PullRequestReviewComment.
        :param side: The side of this PullRequestReviewComment.
        :param start_line: The start_line of this PullRequestReviewComment.
        :param start_side: The start_side of this PullRequestReviewComment.
        :param updated_at: The updated_at of this PullRequestReviewComment.
        :param url: The url of this PullRequestReviewComment.
        :param user: The user of this PullRequestReviewComment.
        """
        self.openapi_types = {
            'links': PullRequestReviewCommentLinks,
            'author_association': AuthorAssociation,
            'body': str,
            'body_html': str,
            'body_text': str,
            'commit_id': str,
            'created_at': datetime,
            'diff_hunk': str,
            'html_url': str,
            'id': int,
            'in_reply_to_id': int,
            'line': int,
            'node_id': str,
            'original_commit_id': str,
            'original_line': int,
            'original_position': int,
            'original_start_line': int,
            'path': str,
            'position': int,
            'pull_request_review_id': int,
            'pull_request_url': str,
            'reactions': ReactionRollup,
            'side': str,
            'start_line': int,
            'start_side': str,
            'updated_at': datetime,
            'url': str,
            'user': SimpleUser
        }

        self.attribute_map = {
            'links': '_links',
            'author_association': 'author_association',
            'body': 'body',
            'body_html': 'body_html',
            'body_text': 'body_text',
            'commit_id': 'commit_id',
            'created_at': 'created_at',
            'diff_hunk': 'diff_hunk',
            'html_url': 'html_url',
            'id': 'id',
            'in_reply_to_id': 'in_reply_to_id',
            'line': 'line',
            'node_id': 'node_id',
            'original_commit_id': 'original_commit_id',
            'original_line': 'original_line',
            'original_position': 'original_position',
            'original_start_line': 'original_start_line',
            'path': 'path',
            'position': 'position',
            'pull_request_review_id': 'pull_request_review_id',
            'pull_request_url': 'pull_request_url',
            'reactions': 'reactions',
            'side': 'side',
            'start_line': 'start_line',
            'start_side': 'start_side',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._links = links
        self._author_association = author_association
        self._body = body
        self._body_html = body_html
        self._body_text = body_text
        self._commit_id = commit_id
        self._created_at = created_at
        self._diff_hunk = diff_hunk
        self._html_url = html_url
        self._id = id
        self._in_reply_to_id = in_reply_to_id
        self._line = line
        self._node_id = node_id
        self._original_commit_id = original_commit_id
        self._original_line = original_line
        self._original_position = original_position
        self._original_start_line = original_start_line
        self._path = path
        self._position = position
        self._pull_request_review_id = pull_request_review_id
        self._pull_request_url = pull_request_url
        self._reactions = reactions
        self._side = side
        self._start_line = start_line
        self._start_side = start_side
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullRequestReviewComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pull-request-review-comment of this PullRequestReviewComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PullRequestReviewComment.


        :return: The links of this PullRequestReviewComment.
        :rtype: PullRequestReviewCommentLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PullRequestReviewComment.


        :param links: The links of this PullRequestReviewComment.
        :type links: PullRequestReviewCommentLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def author_association(self):
        """Gets the author_association of this PullRequestReviewComment.


        :return: The author_association of this PullRequestReviewComment.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this PullRequestReviewComment.


        :param author_association: The author_association of this PullRequestReviewComment.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def body(self):
        """Gets the body of this PullRequestReviewComment.

        The text of the comment.

        :return: The body of this PullRequestReviewComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullRequestReviewComment.

        The text of the comment.

        :param body: The body of this PullRequestReviewComment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this PullRequestReviewComment.


        :return: The body_html of this PullRequestReviewComment.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this PullRequestReviewComment.


        :param body_html: The body_html of this PullRequestReviewComment.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def body_text(self):
        """Gets the body_text of this PullRequestReviewComment.


        :return: The body_text of this PullRequestReviewComment.
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this PullRequestReviewComment.


        :param body_text: The body_text of this PullRequestReviewComment.
        :type body_text: str
        """

        self._body_text = body_text

    @property
    def commit_id(self):
        """Gets the commit_id of this PullRequestReviewComment.

        The SHA of the commit to which the comment applies.

        :return: The commit_id of this PullRequestReviewComment.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this PullRequestReviewComment.

        The SHA of the commit to which the comment applies.

        :param commit_id: The commit_id of this PullRequestReviewComment.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def created_at(self):
        """Gets the created_at of this PullRequestReviewComment.


        :return: The created_at of this PullRequestReviewComment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PullRequestReviewComment.


        :param created_at: The created_at of this PullRequestReviewComment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def diff_hunk(self):
        """Gets the diff_hunk of this PullRequestReviewComment.

        The diff of the line that the comment refers to.

        :return: The diff_hunk of this PullRequestReviewComment.
        :rtype: str
        """
        return self._diff_hunk

    @diff_hunk.setter
    def diff_hunk(self, diff_hunk):
        """Sets the diff_hunk of this PullRequestReviewComment.

        The diff of the line that the comment refers to.

        :param diff_hunk: The diff_hunk of this PullRequestReviewComment.
        :type diff_hunk: str
        """
        if diff_hunk is None:
            raise ValueError("Invalid value for `diff_hunk`, must not be `None`")

        self._diff_hunk = diff_hunk

    @property
    def html_url(self):
        """Gets the html_url of this PullRequestReviewComment.

        HTML URL for the pull request review comment.

        :return: The html_url of this PullRequestReviewComment.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this PullRequestReviewComment.

        HTML URL for the pull request review comment.

        :param html_url: The html_url of this PullRequestReviewComment.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this PullRequestReviewComment.

        The ID of the pull request review comment.

        :return: The id of this PullRequestReviewComment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PullRequestReviewComment.

        The ID of the pull request review comment.

        :param id: The id of this PullRequestReviewComment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def in_reply_to_id(self):
        """Gets the in_reply_to_id of this PullRequestReviewComment.

        The comment ID to reply to.

        :return: The in_reply_to_id of this PullRequestReviewComment.
        :rtype: int
        """
        return self._in_reply_to_id

    @in_reply_to_id.setter
    def in_reply_to_id(self, in_reply_to_id):
        """Sets the in_reply_to_id of this PullRequestReviewComment.

        The comment ID to reply to.

        :param in_reply_to_id: The in_reply_to_id of this PullRequestReviewComment.
        :type in_reply_to_id: int
        """

        self._in_reply_to_id = in_reply_to_id

    @property
    def line(self):
        """Gets the line of this PullRequestReviewComment.

        The line of the blob to which the comment applies. The last line of the range for a multi-line comment

        :return: The line of this PullRequestReviewComment.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this PullRequestReviewComment.

        The line of the blob to which the comment applies. The last line of the range for a multi-line comment

        :param line: The line of this PullRequestReviewComment.
        :type line: int
        """

        self._line = line

    @property
    def node_id(self):
        """Gets the node_id of this PullRequestReviewComment.

        The node ID of the pull request review comment.

        :return: The node_id of this PullRequestReviewComment.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PullRequestReviewComment.

        The node ID of the pull request review comment.

        :param node_id: The node_id of this PullRequestReviewComment.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def original_commit_id(self):
        """Gets the original_commit_id of this PullRequestReviewComment.

        The SHA of the original commit to which the comment applies.

        :return: The original_commit_id of this PullRequestReviewComment.
        :rtype: str
        """
        return self._original_commit_id

    @original_commit_id.setter
    def original_commit_id(self, original_commit_id):
        """Sets the original_commit_id of this PullRequestReviewComment.

        The SHA of the original commit to which the comment applies.

        :param original_commit_id: The original_commit_id of this PullRequestReviewComment.
        :type original_commit_id: str
        """
        if original_commit_id is None:
            raise ValueError("Invalid value for `original_commit_id`, must not be `None`")

        self._original_commit_id = original_commit_id

    @property
    def original_line(self):
        """Gets the original_line of this PullRequestReviewComment.

        The line of the blob to which the comment applies. The last line of the range for a multi-line comment

        :return: The original_line of this PullRequestReviewComment.
        :rtype: int
        """
        return self._original_line

    @original_line.setter
    def original_line(self, original_line):
        """Sets the original_line of this PullRequestReviewComment.

        The line of the blob to which the comment applies. The last line of the range for a multi-line comment

        :param original_line: The original_line of this PullRequestReviewComment.
        :type original_line: int
        """

        self._original_line = original_line

    @property
    def original_position(self):
        """Gets the original_position of this PullRequestReviewComment.

        The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.

        :return: The original_position of this PullRequestReviewComment.
        :rtype: int
        """
        return self._original_position

    @original_position.setter
    def original_position(self, original_position):
        """Sets the original_position of this PullRequestReviewComment.

        The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.

        :param original_position: The original_position of this PullRequestReviewComment.
        :type original_position: int
        """
        if original_position is None:
            raise ValueError("Invalid value for `original_position`, must not be `None`")

        self._original_position = original_position

    @property
    def original_start_line(self):
        """Gets the original_start_line of this PullRequestReviewComment.

        The first line of the range for a multi-line comment.

        :return: The original_start_line of this PullRequestReviewComment.
        :rtype: int
        """
        return self._original_start_line

    @original_start_line.setter
    def original_start_line(self, original_start_line):
        """Sets the original_start_line of this PullRequestReviewComment.

        The first line of the range for a multi-line comment.

        :param original_start_line: The original_start_line of this PullRequestReviewComment.
        :type original_start_line: int
        """

        self._original_start_line = original_start_line

    @property
    def path(self):
        """Gets the path of this PullRequestReviewComment.

        The relative path of the file to which the comment applies.

        :return: The path of this PullRequestReviewComment.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PullRequestReviewComment.

        The relative path of the file to which the comment applies.

        :param path: The path of this PullRequestReviewComment.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def position(self):
        """Gets the position of this PullRequestReviewComment.

        The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.

        :return: The position of this PullRequestReviewComment.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PullRequestReviewComment.

        The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.

        :param position: The position of this PullRequestReviewComment.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def pull_request_review_id(self):
        """Gets the pull_request_review_id of this PullRequestReviewComment.

        The ID of the pull request review to which the comment belongs.

        :return: The pull_request_review_id of this PullRequestReviewComment.
        :rtype: int
        """
        return self._pull_request_review_id

    @pull_request_review_id.setter
    def pull_request_review_id(self, pull_request_review_id):
        """Sets the pull_request_review_id of this PullRequestReviewComment.

        The ID of the pull request review to which the comment belongs.

        :param pull_request_review_id: The pull_request_review_id of this PullRequestReviewComment.
        :type pull_request_review_id: int
        """
        if pull_request_review_id is None:
            raise ValueError("Invalid value for `pull_request_review_id`, must not be `None`")

        self._pull_request_review_id = pull_request_review_id

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this PullRequestReviewComment.

        URL for the pull request that the review comment belongs to.

        :return: The pull_request_url of this PullRequestReviewComment.
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this PullRequestReviewComment.

        URL for the pull request that the review comment belongs to.

        :param pull_request_url: The pull_request_url of this PullRequestReviewComment.
        :type pull_request_url: str
        """
        if pull_request_url is None:
            raise ValueError("Invalid value for `pull_request_url`, must not be `None`")

        self._pull_request_url = pull_request_url

    @property
    def reactions(self):
        """Gets the reactions of this PullRequestReviewComment.


        :return: The reactions of this PullRequestReviewComment.
        :rtype: ReactionRollup
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this PullRequestReviewComment.


        :param reactions: The reactions of this PullRequestReviewComment.
        :type reactions: ReactionRollup
        """

        self._reactions = reactions

    @property
    def side(self):
        """Gets the side of this PullRequestReviewComment.

        The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment

        :return: The side of this PullRequestReviewComment.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this PullRequestReviewComment.

        The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment

        :param side: The side of this PullRequestReviewComment.
        :type side: str
        """
        allowed_values = ["LEFT", "RIGHT"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def start_line(self):
        """Gets the start_line of this PullRequestReviewComment.

        The first line of the range for a multi-line comment.

        :return: The start_line of this PullRequestReviewComment.
        :rtype: int
        """
        return self._start_line

    @start_line.setter
    def start_line(self, start_line):
        """Sets the start_line of this PullRequestReviewComment.

        The first line of the range for a multi-line comment.

        :param start_line: The start_line of this PullRequestReviewComment.
        :type start_line: int
        """

        self._start_line = start_line

    @property
    def start_side(self):
        """Gets the start_side of this PullRequestReviewComment.

        The side of the first line of the range for a multi-line comment.

        :return: The start_side of this PullRequestReviewComment.
        :rtype: str
        """
        return self._start_side

    @start_side.setter
    def start_side(self, start_side):
        """Sets the start_side of this PullRequestReviewComment.

        The side of the first line of the range for a multi-line comment.

        :param start_side: The start_side of this PullRequestReviewComment.
        :type start_side: str
        """
        allowed_values = [None,"LEFT", "RIGHT"]  # noqa: E501
        if start_side not in allowed_values:
            raise ValueError(
                "Invalid value for `start_side` ({0}), must be one of {1}"
                .format(start_side, allowed_values)
            )

        self._start_side = start_side

    @property
    def updated_at(self):
        """Gets the updated_at of this PullRequestReviewComment.


        :return: The updated_at of this PullRequestReviewComment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PullRequestReviewComment.


        :param updated_at: The updated_at of this PullRequestReviewComment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this PullRequestReviewComment.

        URL for the pull request review comment

        :return: The url of this PullRequestReviewComment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PullRequestReviewComment.

        URL for the pull request review comment

        :param url: The url of this PullRequestReviewComment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this PullRequestReviewComment.


        :return: The user of this PullRequestReviewComment.
        :rtype: SimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PullRequestReviewComment.


        :param user: The user of this PullRequestReviewComment.
        :type user: SimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
