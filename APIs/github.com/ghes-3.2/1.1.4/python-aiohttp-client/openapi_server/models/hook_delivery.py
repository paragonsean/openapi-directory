# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hook_delivery_request import HookDeliveryRequest
from openapi_server.models.hook_delivery_response import HookDeliveryResponse
from openapi_server import util


class HookDelivery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, delivered_at: datetime=None, duration: float=None, event: str=None, guid: str=None, id: int=None, installation_id: int=None, redelivery: bool=None, repository_id: int=None, request: HookDeliveryRequest=None, response: HookDeliveryResponse=None, status: str=None, status_code: int=None, url: str=None):
        """HookDelivery - a model defined in OpenAPI

        :param action: The action of this HookDelivery.
        :param delivered_at: The delivered_at of this HookDelivery.
        :param duration: The duration of this HookDelivery.
        :param event: The event of this HookDelivery.
        :param guid: The guid of this HookDelivery.
        :param id: The id of this HookDelivery.
        :param installation_id: The installation_id of this HookDelivery.
        :param redelivery: The redelivery of this HookDelivery.
        :param repository_id: The repository_id of this HookDelivery.
        :param request: The request of this HookDelivery.
        :param response: The response of this HookDelivery.
        :param status: The status of this HookDelivery.
        :param status_code: The status_code of this HookDelivery.
        :param url: The url of this HookDelivery.
        """
        self.openapi_types = {
            'action': str,
            'delivered_at': datetime,
            'duration': float,
            'event': str,
            'guid': str,
            'id': int,
            'installation_id': int,
            'redelivery': bool,
            'repository_id': int,
            'request': HookDeliveryRequest,
            'response': HookDeliveryResponse,
            'status': str,
            'status_code': int,
            'url': str
        }

        self.attribute_map = {
            'action': 'action',
            'delivered_at': 'delivered_at',
            'duration': 'duration',
            'event': 'event',
            'guid': 'guid',
            'id': 'id',
            'installation_id': 'installation_id',
            'redelivery': 'redelivery',
            'repository_id': 'repository_id',
            'request': 'request',
            'response': 'response',
            'status': 'status',
            'status_code': 'status_code',
            'url': 'url'
        }

        self._action = action
        self._delivered_at = delivered_at
        self._duration = duration
        self._event = event
        self._guid = guid
        self._id = id
        self._installation_id = installation_id
        self._redelivery = redelivery
        self._repository_id = repository_id
        self._request = request
        self._response = response
        self._status = status
        self._status_code = status_code
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookDelivery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hook-delivery of this HookDelivery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this HookDelivery.

        The type of activity for the event that triggered the delivery.

        :return: The action of this HookDelivery.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this HookDelivery.

        The type of activity for the event that triggered the delivery.

        :param action: The action of this HookDelivery.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def delivered_at(self):
        """Gets the delivered_at of this HookDelivery.

        Time when the delivery was delivered.

        :return: The delivered_at of this HookDelivery.
        :rtype: datetime
        """
        return self._delivered_at

    @delivered_at.setter
    def delivered_at(self, delivered_at):
        """Sets the delivered_at of this HookDelivery.

        Time when the delivery was delivered.

        :param delivered_at: The delivered_at of this HookDelivery.
        :type delivered_at: datetime
        """
        if delivered_at is None:
            raise ValueError("Invalid value for `delivered_at`, must not be `None`")

        self._delivered_at = delivered_at

    @property
    def duration(self):
        """Gets the duration of this HookDelivery.

        Time spent delivering.

        :return: The duration of this HookDelivery.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this HookDelivery.

        Time spent delivering.

        :param duration: The duration of this HookDelivery.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def event(self):
        """Gets the event of this HookDelivery.

        The event that triggered the delivery.

        :return: The event of this HookDelivery.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this HookDelivery.

        The event that triggered the delivery.

        :param event: The event of this HookDelivery.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def guid(self):
        """Gets the guid of this HookDelivery.

        Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).

        :return: The guid of this HookDelivery.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this HookDelivery.

        Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).

        :param guid: The guid of this HookDelivery.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def id(self):
        """Gets the id of this HookDelivery.

        Unique identifier of the delivery.

        :return: The id of this HookDelivery.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HookDelivery.

        Unique identifier of the delivery.

        :param id: The id of this HookDelivery.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installation_id(self):
        """Gets the installation_id of this HookDelivery.

        The id of the GitHub App installation associated with this event.

        :return: The installation_id of this HookDelivery.
        :rtype: int
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this HookDelivery.

        The id of the GitHub App installation associated with this event.

        :param installation_id: The installation_id of this HookDelivery.
        :type installation_id: int
        """
        if installation_id is None:
            raise ValueError("Invalid value for `installation_id`, must not be `None`")

        self._installation_id = installation_id

    @property
    def redelivery(self):
        """Gets the redelivery of this HookDelivery.

        Whether the delivery is a redelivery.

        :return: The redelivery of this HookDelivery.
        :rtype: bool
        """
        return self._redelivery

    @redelivery.setter
    def redelivery(self, redelivery):
        """Sets the redelivery of this HookDelivery.

        Whether the delivery is a redelivery.

        :param redelivery: The redelivery of this HookDelivery.
        :type redelivery: bool
        """
        if redelivery is None:
            raise ValueError("Invalid value for `redelivery`, must not be `None`")

        self._redelivery = redelivery

    @property
    def repository_id(self):
        """Gets the repository_id of this HookDelivery.

        The id of the repository associated with this event.

        :return: The repository_id of this HookDelivery.
        :rtype: int
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this HookDelivery.

        The id of the repository associated with this event.

        :param repository_id: The repository_id of this HookDelivery.
        :type repository_id: int
        """
        if repository_id is None:
            raise ValueError("Invalid value for `repository_id`, must not be `None`")

        self._repository_id = repository_id

    @property
    def request(self):
        """Gets the request of this HookDelivery.


        :return: The request of this HookDelivery.
        :rtype: HookDeliveryRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this HookDelivery.


        :param request: The request of this HookDelivery.
        :type request: HookDeliveryRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")

        self._request = request

    @property
    def response(self):
        """Gets the response of this HookDelivery.


        :return: The response of this HookDelivery.
        :rtype: HookDeliveryResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this HookDelivery.


        :param response: The response of this HookDelivery.
        :type response: HookDeliveryResponse
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def status(self):
        """Gets the status of this HookDelivery.

        Description of the status of the attempted delivery

        :return: The status of this HookDelivery.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HookDelivery.

        Description of the status of the attempted delivery

        :param status: The status of this HookDelivery.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this HookDelivery.

        Status code received when delivery was made.

        :return: The status_code of this HookDelivery.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this HookDelivery.

        Status code received when delivery was made.

        :param status_code: The status_code of this HookDelivery.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def url(self):
        """Gets the url of this HookDelivery.

        The URL target of the delivery.

        :return: The url of this HookDelivery.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HookDelivery.

        The URL target of the delivery.

        :param url: The url of this HookDelivery.
        :type url: str
        """

        self._url = url
