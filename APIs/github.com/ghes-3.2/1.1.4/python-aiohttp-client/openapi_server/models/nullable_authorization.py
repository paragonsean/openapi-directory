# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_grant_app import ApplicationGrantApp
from openapi_server.models.nullable_scoped_installation import NullableScopedInstallation
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class NullableAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app: ApplicationGrantApp=None, created_at: datetime=None, expires_at: datetime=None, fingerprint: str=None, hashed_token: str=None, id: int=None, installation: NullableScopedInstallation=None, note: str=None, note_url: str=None, scopes: List[str]=None, token: str=None, token_last_eight: str=None, updated_at: datetime=None, url: str=None, user: NullableSimpleUser=None):
        """NullableAuthorization - a model defined in OpenAPI

        :param app: The app of this NullableAuthorization.
        :param created_at: The created_at of this NullableAuthorization.
        :param expires_at: The expires_at of this NullableAuthorization.
        :param fingerprint: The fingerprint of this NullableAuthorization.
        :param hashed_token: The hashed_token of this NullableAuthorization.
        :param id: The id of this NullableAuthorization.
        :param installation: The installation of this NullableAuthorization.
        :param note: The note of this NullableAuthorization.
        :param note_url: The note_url of this NullableAuthorization.
        :param scopes: The scopes of this NullableAuthorization.
        :param token: The token of this NullableAuthorization.
        :param token_last_eight: The token_last_eight of this NullableAuthorization.
        :param updated_at: The updated_at of this NullableAuthorization.
        :param url: The url of this NullableAuthorization.
        :param user: The user of this NullableAuthorization.
        """
        self.openapi_types = {
            'app': ApplicationGrantApp,
            'created_at': datetime,
            'expires_at': datetime,
            'fingerprint': str,
            'hashed_token': str,
            'id': int,
            'installation': NullableScopedInstallation,
            'note': str,
            'note_url': str,
            'scopes': List[str],
            'token': str,
            'token_last_eight': str,
            'updated_at': datetime,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'app': 'app',
            'created_at': 'created_at',
            'expires_at': 'expires_at',
            'fingerprint': 'fingerprint',
            'hashed_token': 'hashed_token',
            'id': 'id',
            'installation': 'installation',
            'note': 'note',
            'note_url': 'note_url',
            'scopes': 'scopes',
            'token': 'token',
            'token_last_eight': 'token_last_eight',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._app = app
        self._created_at = created_at
        self._expires_at = expires_at
        self._fingerprint = fingerprint
        self._hashed_token = hashed_token
        self._id = id
        self._installation = installation
        self._note = note
        self._note_url = note_url
        self._scopes = scopes
        self._token = token
        self._token_last_eight = token_last_eight
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullableAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nullable-authorization of this NullableAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app(self):
        """Gets the app of this NullableAuthorization.


        :return: The app of this NullableAuthorization.
        :rtype: ApplicationGrantApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this NullableAuthorization.


        :param app: The app of this NullableAuthorization.
        :type app: ApplicationGrantApp
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def created_at(self):
        """Gets the created_at of this NullableAuthorization.


        :return: The created_at of this NullableAuthorization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NullableAuthorization.


        :param created_at: The created_at of this NullableAuthorization.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this NullableAuthorization.


        :return: The expires_at of this NullableAuthorization.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this NullableAuthorization.


        :param expires_at: The expires_at of this NullableAuthorization.
        :type expires_at: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def fingerprint(self):
        """Gets the fingerprint of this NullableAuthorization.


        :return: The fingerprint of this NullableAuthorization.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this NullableAuthorization.


        :param fingerprint: The fingerprint of this NullableAuthorization.
        :type fingerprint: str
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")

        self._fingerprint = fingerprint

    @property
    def hashed_token(self):
        """Gets the hashed_token of this NullableAuthorization.


        :return: The hashed_token of this NullableAuthorization.
        :rtype: str
        """
        return self._hashed_token

    @hashed_token.setter
    def hashed_token(self, hashed_token):
        """Sets the hashed_token of this NullableAuthorization.


        :param hashed_token: The hashed_token of this NullableAuthorization.
        :type hashed_token: str
        """
        if hashed_token is None:
            raise ValueError("Invalid value for `hashed_token`, must not be `None`")

        self._hashed_token = hashed_token

    @property
    def id(self):
        """Gets the id of this NullableAuthorization.


        :return: The id of this NullableAuthorization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NullableAuthorization.


        :param id: The id of this NullableAuthorization.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installation(self):
        """Gets the installation of this NullableAuthorization.


        :return: The installation of this NullableAuthorization.
        :rtype: NullableScopedInstallation
        """
        return self._installation

    @installation.setter
    def installation(self, installation):
        """Sets the installation of this NullableAuthorization.


        :param installation: The installation of this NullableAuthorization.
        :type installation: NullableScopedInstallation
        """

        self._installation = installation

    @property
    def note(self):
        """Gets the note of this NullableAuthorization.


        :return: The note of this NullableAuthorization.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this NullableAuthorization.


        :param note: The note of this NullableAuthorization.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def note_url(self):
        """Gets the note_url of this NullableAuthorization.


        :return: The note_url of this NullableAuthorization.
        :rtype: str
        """
        return self._note_url

    @note_url.setter
    def note_url(self, note_url):
        """Sets the note_url of this NullableAuthorization.


        :param note_url: The note_url of this NullableAuthorization.
        :type note_url: str
        """
        if note_url is None:
            raise ValueError("Invalid value for `note_url`, must not be `None`")

        self._note_url = note_url

    @property
    def scopes(self):
        """Gets the scopes of this NullableAuthorization.

        A list of scopes that this authorization is in.

        :return: The scopes of this NullableAuthorization.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this NullableAuthorization.

        A list of scopes that this authorization is in.

        :param scopes: The scopes of this NullableAuthorization.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def token(self):
        """Gets the token of this NullableAuthorization.


        :return: The token of this NullableAuthorization.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this NullableAuthorization.


        :param token: The token of this NullableAuthorization.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def token_last_eight(self):
        """Gets the token_last_eight of this NullableAuthorization.


        :return: The token_last_eight of this NullableAuthorization.
        :rtype: str
        """
        return self._token_last_eight

    @token_last_eight.setter
    def token_last_eight(self, token_last_eight):
        """Sets the token_last_eight of this NullableAuthorization.


        :param token_last_eight: The token_last_eight of this NullableAuthorization.
        :type token_last_eight: str
        """
        if token_last_eight is None:
            raise ValueError("Invalid value for `token_last_eight`, must not be `None`")

        self._token_last_eight = token_last_eight

    @property
    def updated_at(self):
        """Gets the updated_at of this NullableAuthorization.


        :return: The updated_at of this NullableAuthorization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NullableAuthorization.


        :param updated_at: The updated_at of this NullableAuthorization.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this NullableAuthorization.


        :return: The url of this NullableAuthorization.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NullableAuthorization.


        :param url: The url of this NullableAuthorization.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this NullableAuthorization.


        :return: The user of this NullableAuthorization.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NullableAuthorization.


        :param user: The user of this NullableAuthorization.
        :type user: NullableSimpleUser
        """

        self._user = user
