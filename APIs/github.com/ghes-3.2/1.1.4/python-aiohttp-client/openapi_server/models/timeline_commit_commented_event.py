# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commit_comment import CommitComment
from openapi_server import util


class TimelineCommitCommentedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[CommitComment]=None, commit_id: str=None, event: str=None, node_id: str=None):
        """TimelineCommitCommentedEvent - a model defined in OpenAPI

        :param comments: The comments of this TimelineCommitCommentedEvent.
        :param commit_id: The commit_id of this TimelineCommitCommentedEvent.
        :param event: The event of this TimelineCommitCommentedEvent.
        :param node_id: The node_id of this TimelineCommitCommentedEvent.
        """
        self.openapi_types = {
            'comments': List[CommitComment],
            'commit_id': str,
            'event': str,
            'node_id': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'commit_id': 'commit_id',
            'event': 'event',
            'node_id': 'node_id'
        }

        self._comments = comments
        self._commit_id = commit_id
        self._event = event
        self._node_id = node_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineCommitCommentedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-commit-commented-event of this TimelineCommitCommentedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this TimelineCommitCommentedEvent.


        :return: The comments of this TimelineCommitCommentedEvent.
        :rtype: List[CommitComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TimelineCommitCommentedEvent.


        :param comments: The comments of this TimelineCommitCommentedEvent.
        :type comments: List[CommitComment]
        """

        self._comments = comments

    @property
    def commit_id(self):
        """Gets the commit_id of this TimelineCommitCommentedEvent.


        :return: The commit_id of this TimelineCommitCommentedEvent.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this TimelineCommitCommentedEvent.


        :param commit_id: The commit_id of this TimelineCommitCommentedEvent.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def event(self):
        """Gets the event of this TimelineCommitCommentedEvent.


        :return: The event of this TimelineCommitCommentedEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineCommitCommentedEvent.


        :param event: The event of this TimelineCommitCommentedEvent.
        :type event: str
        """

        self._event = event

    @property
    def node_id(self):
        """Gets the node_id of this TimelineCommitCommentedEvent.


        :return: The node_id of this TimelineCommitCommentedEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TimelineCommitCommentedEvent.


        :param node_id: The node_id of this TimelineCommitCommentedEvent.
        :type node_id: str
        """

        self._node_id = node_id
