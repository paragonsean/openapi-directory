# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_branch_policy_settings import DeploymentBranchPolicySettings
from openapi_server.models.repos_create_or_update_environment_request_reviewers_inner import ReposCreateOrUpdateEnvironmentRequestReviewersInner
from openapi_server import util


class ReposCreateOrUpdateEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_branch_policy: DeploymentBranchPolicySettings=None, reviewers: List[ReposCreateOrUpdateEnvironmentRequestReviewersInner]=None, wait_timer: int=None):
        """ReposCreateOrUpdateEnvironmentRequest - a model defined in OpenAPI

        :param deployment_branch_policy: The deployment_branch_policy of this ReposCreateOrUpdateEnvironmentRequest.
        :param reviewers: The reviewers of this ReposCreateOrUpdateEnvironmentRequest.
        :param wait_timer: The wait_timer of this ReposCreateOrUpdateEnvironmentRequest.
        """
        self.openapi_types = {
            'deployment_branch_policy': DeploymentBranchPolicySettings,
            'reviewers': List[ReposCreateOrUpdateEnvironmentRequestReviewersInner],
            'wait_timer': int
        }

        self.attribute_map = {
            'deployment_branch_policy': 'deployment_branch_policy',
            'reviewers': 'reviewers',
            'wait_timer': 'wait_timer'
        }

        self._deployment_branch_policy = deployment_branch_policy
        self._reviewers = reviewers
        self._wait_timer = wait_timer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateOrUpdateEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_or_update_environment_request of this ReposCreateOrUpdateEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_branch_policy(self):
        """Gets the deployment_branch_policy of this ReposCreateOrUpdateEnvironmentRequest.


        :return: The deployment_branch_policy of this ReposCreateOrUpdateEnvironmentRequest.
        :rtype: DeploymentBranchPolicySettings
        """
        return self._deployment_branch_policy

    @deployment_branch_policy.setter
    def deployment_branch_policy(self, deployment_branch_policy):
        """Sets the deployment_branch_policy of this ReposCreateOrUpdateEnvironmentRequest.


        :param deployment_branch_policy: The deployment_branch_policy of this ReposCreateOrUpdateEnvironmentRequest.
        :type deployment_branch_policy: DeploymentBranchPolicySettings
        """

        self._deployment_branch_policy = deployment_branch_policy

    @property
    def reviewers(self):
        """Gets the reviewers of this ReposCreateOrUpdateEnvironmentRequest.

        The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :return: The reviewers of this ReposCreateOrUpdateEnvironmentRequest.
        :rtype: List[ReposCreateOrUpdateEnvironmentRequestReviewersInner]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this ReposCreateOrUpdateEnvironmentRequest.

        The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :param reviewers: The reviewers of this ReposCreateOrUpdateEnvironmentRequest.
        :type reviewers: List[ReposCreateOrUpdateEnvironmentRequestReviewersInner]
        """

        self._reviewers = reviewers

    @property
    def wait_timer(self):
        """Gets the wait_timer of this ReposCreateOrUpdateEnvironmentRequest.

        The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).

        :return: The wait_timer of this ReposCreateOrUpdateEnvironmentRequest.
        :rtype: int
        """
        return self._wait_timer

    @wait_timer.setter
    def wait_timer(self, wait_timer):
        """Sets the wait_timer of this ReposCreateOrUpdateEnvironmentRequest.

        The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).

        :param wait_timer: The wait_timer of this ReposCreateOrUpdateEnvironmentRequest.
        :type wait_timer: int
        """

        self._wait_timer = wait_timer
