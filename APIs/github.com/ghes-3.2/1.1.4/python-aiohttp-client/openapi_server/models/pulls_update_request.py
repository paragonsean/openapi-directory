# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, body: str=None, maintainer_can_modify: bool=None, state: str=None, title: str=None):
        """PullsUpdateRequest - a model defined in OpenAPI

        :param base: The base of this PullsUpdateRequest.
        :param body: The body of this PullsUpdateRequest.
        :param maintainer_can_modify: The maintainer_can_modify of this PullsUpdateRequest.
        :param state: The state of this PullsUpdateRequest.
        :param title: The title of this PullsUpdateRequest.
        """
        self.openapi_types = {
            'base': str,
            'body': str,
            'maintainer_can_modify': bool,
            'state': str,
            'title': str
        }

        self.attribute_map = {
            'base': 'base',
            'body': 'body',
            'maintainer_can_modify': 'maintainer_can_modify',
            'state': 'state',
            'title': 'title'
        }

        self._base = base
        self._body = body
        self._maintainer_can_modify = maintainer_can_modify
        self._state = state
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_update_request of this PullsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this PullsUpdateRequest.

        The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.

        :return: The base of this PullsUpdateRequest.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this PullsUpdateRequest.

        The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.

        :param base: The base of this PullsUpdateRequest.
        :type base: str
        """

        self._base = base

    @property
    def body(self):
        """Gets the body of this PullsUpdateRequest.

        The contents of the pull request.

        :return: The body of this PullsUpdateRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsUpdateRequest.

        The contents of the pull request.

        :param body: The body of this PullsUpdateRequest.
        :type body: str
        """

        self._body = body

    @property
    def maintainer_can_modify(self):
        """Gets the maintainer_can_modify of this PullsUpdateRequest.

        Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.

        :return: The maintainer_can_modify of this PullsUpdateRequest.
        :rtype: bool
        """
        return self._maintainer_can_modify

    @maintainer_can_modify.setter
    def maintainer_can_modify(self, maintainer_can_modify):
        """Sets the maintainer_can_modify of this PullsUpdateRequest.

        Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.

        :param maintainer_can_modify: The maintainer_can_modify of this PullsUpdateRequest.
        :type maintainer_can_modify: bool
        """

        self._maintainer_can_modify = maintainer_can_modify

    @property
    def state(self):
        """Gets the state of this PullsUpdateRequest.

        State of this Pull Request. Either `open` or `closed`.

        :return: The state of this PullsUpdateRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PullsUpdateRequest.

        State of this Pull Request. Either `open` or `closed`.

        :param state: The state of this PullsUpdateRequest.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this PullsUpdateRequest.

        The title of the pull request.

        :return: The title of this PullsUpdateRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PullsUpdateRequest.

        The title of the pull request.

        :param title: The title of this PullsUpdateRequest.
        :type title: str
        """

        self._title = title
