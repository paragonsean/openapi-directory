# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checks_create_request_actions_inner import ChecksCreateRequestActionsInner
from openapi_server.models.checks_create_request_one_of import ChecksCreateRequestOneOf
from openapi_server.models.checks_create_request_one_of1 import ChecksCreateRequestOneOf1
from openapi_server.models.checks_create_request_output import ChecksCreateRequestOutput
from openapi_server import util


class ChecksCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[ChecksCreateRequestActionsInner]=None, completed_at: datetime=None, conclusion: str=None, details_url: str=None, external_id: str=None, head_sha: str=None, name: str=None, output: ChecksCreateRequestOutput=None, started_at: datetime=None, status: str='queued'):
        """ChecksCreateRequest - a model defined in OpenAPI

        :param actions: The actions of this ChecksCreateRequest.
        :param completed_at: The completed_at of this ChecksCreateRequest.
        :param conclusion: The conclusion of this ChecksCreateRequest.
        :param details_url: The details_url of this ChecksCreateRequest.
        :param external_id: The external_id of this ChecksCreateRequest.
        :param head_sha: The head_sha of this ChecksCreateRequest.
        :param name: The name of this ChecksCreateRequest.
        :param output: The output of this ChecksCreateRequest.
        :param started_at: The started_at of this ChecksCreateRequest.
        :param status: The status of this ChecksCreateRequest.
        """
        self.openapi_types = {
            'actions': List[ChecksCreateRequestActionsInner],
            'completed_at': datetime,
            'conclusion': str,
            'details_url': str,
            'external_id': str,
            'head_sha': str,
            'name': str,
            'output': ChecksCreateRequestOutput,
            'started_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'completed_at': 'completed_at',
            'conclusion': 'conclusion',
            'details_url': 'details_url',
            'external_id': 'external_id',
            'head_sha': 'head_sha',
            'name': 'name',
            'output': 'output',
            'started_at': 'started_at',
            'status': 'status'
        }

        self._actions = actions
        self._completed_at = completed_at
        self._conclusion = conclusion
        self._details_url = details_url
        self._external_id = external_id
        self._head_sha = head_sha
        self._name = name
        self._output = output
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChecksCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checks_create_request of this ChecksCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ChecksCreateRequest.

        Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.2/rest/reference/checks#check-runs-and-requested-actions).\"

        :return: The actions of this ChecksCreateRequest.
        :rtype: List[ChecksCreateRequestActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ChecksCreateRequest.

        Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.2/rest/reference/checks#check-runs-and-requested-actions).\"

        :param actions: The actions of this ChecksCreateRequest.
        :type actions: List[ChecksCreateRequestActionsInner]
        """
        if actions is not None and len(actions) > 3:
            raise ValueError("Invalid value for `actions`, number of items must be less than or equal to `3`")

        self._actions = actions

    @property
    def completed_at(self):
        """Gets the completed_at of this ChecksCreateRequest.

        The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The completed_at of this ChecksCreateRequest.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ChecksCreateRequest.

        The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param completed_at: The completed_at of this ChecksCreateRequest.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def conclusion(self):
        """Gets the conclusion of this ChecksCreateRequest.

        **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.  **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.

        :return: The conclusion of this ChecksCreateRequest.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this ChecksCreateRequest.

        **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.  **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.

        :param conclusion: The conclusion of this ChecksCreateRequest.
        :type conclusion: str
        """
        allowed_values = ["action_required", "cancelled", "failure", "neutral", "success", "skipped", "stale", "timed_out"]  # noqa: E501
        if conclusion not in allowed_values:
            raise ValueError(
                "Invalid value for `conclusion` ({0}), must be one of {1}"
                .format(conclusion, allowed_values)
            )

        self._conclusion = conclusion

    @property
    def details_url(self):
        """Gets the details_url of this ChecksCreateRequest.

        The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.

        :return: The details_url of this ChecksCreateRequest.
        :rtype: str
        """
        return self._details_url

    @details_url.setter
    def details_url(self, details_url):
        """Sets the details_url of this ChecksCreateRequest.

        The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.

        :param details_url: The details_url of this ChecksCreateRequest.
        :type details_url: str
        """

        self._details_url = details_url

    @property
    def external_id(self):
        """Gets the external_id of this ChecksCreateRequest.

        A reference for the run on the integrator's system.

        :return: The external_id of this ChecksCreateRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ChecksCreateRequest.

        A reference for the run on the integrator's system.

        :param external_id: The external_id of this ChecksCreateRequest.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def head_sha(self):
        """Gets the head_sha of this ChecksCreateRequest.

        The SHA of the commit.

        :return: The head_sha of this ChecksCreateRequest.
        :rtype: str
        """
        return self._head_sha

    @head_sha.setter
    def head_sha(self, head_sha):
        """Sets the head_sha of this ChecksCreateRequest.

        The SHA of the commit.

        :param head_sha: The head_sha of this ChecksCreateRequest.
        :type head_sha: str
        """
        if head_sha is None:
            raise ValueError("Invalid value for `head_sha`, must not be `None`")

        self._head_sha = head_sha

    @property
    def name(self):
        """Gets the name of this ChecksCreateRequest.

        The name of the check. For example, \"code-coverage\".

        :return: The name of this ChecksCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChecksCreateRequest.

        The name of the check. For example, \"code-coverage\".

        :param name: The name of this ChecksCreateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def output(self):
        """Gets the output of this ChecksCreateRequest.


        :return: The output of this ChecksCreateRequest.
        :rtype: ChecksCreateRequestOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ChecksCreateRequest.


        :param output: The output of this ChecksCreateRequest.
        :type output: ChecksCreateRequestOutput
        """

        self._output = output

    @property
    def started_at(self):
        """Gets the started_at of this ChecksCreateRequest.

        The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The started_at of this ChecksCreateRequest.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ChecksCreateRequest.

        The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param started_at: The started_at of this ChecksCreateRequest.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this ChecksCreateRequest.

        The current status.

        :return: The status of this ChecksCreateRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChecksCreateRequest.

        The current status.

        :param status: The status of this ChecksCreateRequest.
        :type status: str
        """
        allowed_values = ["queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
