# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposMergeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, commit_message: str=None, head: str=None):
        """ReposMergeRequest - a model defined in OpenAPI

        :param base: The base of this ReposMergeRequest.
        :param commit_message: The commit_message of this ReposMergeRequest.
        :param head: The head of this ReposMergeRequest.
        """
        self.openapi_types = {
            'base': str,
            'commit_message': str,
            'head': str
        }

        self.attribute_map = {
            'base': 'base',
            'commit_message': 'commit_message',
            'head': 'head'
        }

        self._base = base
        self._commit_message = commit_message
        self._head = head

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposMergeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_merge_request of this ReposMergeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this ReposMergeRequest.

        The name of the base branch that the head will be merged into.

        :return: The base of this ReposMergeRequest.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this ReposMergeRequest.

        The name of the base branch that the head will be merged into.

        :param base: The base of this ReposMergeRequest.
        :type base: str
        """
        if base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")

        self._base = base

    @property
    def commit_message(self):
        """Gets the commit_message of this ReposMergeRequest.

        Commit message to use for the merge commit. If omitted, a default message will be used.

        :return: The commit_message of this ReposMergeRequest.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this ReposMergeRequest.

        Commit message to use for the merge commit. If omitted, a default message will be used.

        :param commit_message: The commit_message of this ReposMergeRequest.
        :type commit_message: str
        """

        self._commit_message = commit_message

    @property
    def head(self):
        """Gets the head of this ReposMergeRequest.

        The head to merge. This can be a branch name or a commit SHA1.

        :return: The head of this ReposMergeRequest.
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this ReposMergeRequest.

        The head to merge. This can be a branch name or a commit SHA1.

        :param head: The head of this ReposMergeRequest.
        :type head: str
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")

        self._head = head
