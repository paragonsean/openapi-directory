# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_scanning_alert_dismissed_reason import CodeScanningAlertDismissedReason
from openapi_server.models.code_scanning_alert_set_state import CodeScanningAlertSetState
from openapi_server import util


class CodeScanningUpdateAlertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dismissed_reason: CodeScanningAlertDismissedReason=None, state: CodeScanningAlertSetState=None):
        """CodeScanningUpdateAlertRequest - a model defined in OpenAPI

        :param dismissed_reason: The dismissed_reason of this CodeScanningUpdateAlertRequest.
        :param state: The state of this CodeScanningUpdateAlertRequest.
        """
        self.openapi_types = {
            'dismissed_reason': CodeScanningAlertDismissedReason,
            'state': CodeScanningAlertSetState
        }

        self.attribute_map = {
            'dismissed_reason': 'dismissed_reason',
            'state': 'state'
        }

        self._dismissed_reason = dismissed_reason
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningUpdateAlertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code_scanning_update_alert_request of this CodeScanningUpdateAlertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dismissed_reason(self):
        """Gets the dismissed_reason of this CodeScanningUpdateAlertRequest.


        :return: The dismissed_reason of this CodeScanningUpdateAlertRequest.
        :rtype: CodeScanningAlertDismissedReason
        """
        return self._dismissed_reason

    @dismissed_reason.setter
    def dismissed_reason(self, dismissed_reason):
        """Sets the dismissed_reason of this CodeScanningUpdateAlertRequest.


        :param dismissed_reason: The dismissed_reason of this CodeScanningUpdateAlertRequest.
        :type dismissed_reason: CodeScanningAlertDismissedReason
        """

        self._dismissed_reason = dismissed_reason

    @property
    def state(self):
        """Gets the state of this CodeScanningUpdateAlertRequest.


        :return: The state of this CodeScanningUpdateAlertRequest.
        :rtype: CodeScanningAlertSetState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CodeScanningUpdateAlertRequest.


        :param state: The state of this CodeScanningUpdateAlertRequest.
        :type state: CodeScanningAlertSetState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
