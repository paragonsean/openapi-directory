# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_protection_rules_inner_any_of import EnvironmentProtectionRulesInnerAnyOf
from openapi_server.models.environment_protection_rules_inner_any_of1 import EnvironmentProtectionRulesInnerAnyOf1
from openapi_server.models.environment_protection_rules_inner_any_of1_reviewers_inner import EnvironmentProtectionRulesInnerAnyOf1ReviewersInner
from openapi_server.models.environment_protection_rules_inner_any_of2 import EnvironmentProtectionRulesInnerAnyOf2
from openapi_server import util


class EnvironmentProtectionRulesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, node_id: str=None, type: str=None, wait_timer: int=None, reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]=None):
        """EnvironmentProtectionRulesInner - a model defined in OpenAPI

        :param id: The id of this EnvironmentProtectionRulesInner.
        :param node_id: The node_id of this EnvironmentProtectionRulesInner.
        :param type: The type of this EnvironmentProtectionRulesInner.
        :param wait_timer: The wait_timer of this EnvironmentProtectionRulesInner.
        :param reviewers: The reviewers of this EnvironmentProtectionRulesInner.
        """
        self.openapi_types = {
            'id': int,
            'node_id': str,
            'type': str,
            'wait_timer': int,
            'reviewers': List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        }

        self.attribute_map = {
            'id': 'id',
            'node_id': 'node_id',
            'type': 'type',
            'wait_timer': 'wait_timer',
            'reviewers': 'reviewers'
        }

        self._id = id
        self._node_id = node_id
        self._type = type
        self._wait_timer = wait_timer
        self._reviewers = reviewers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentProtectionRulesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The environment_protection_rules_inner of this EnvironmentProtectionRulesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnvironmentProtectionRulesInner.


        :return: The id of this EnvironmentProtectionRulesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvironmentProtectionRulesInner.


        :param id: The id of this EnvironmentProtectionRulesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this EnvironmentProtectionRulesInner.


        :return: The node_id of this EnvironmentProtectionRulesInner.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this EnvironmentProtectionRulesInner.


        :param node_id: The node_id of this EnvironmentProtectionRulesInner.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def type(self):
        """Gets the type of this EnvironmentProtectionRulesInner.


        :return: The type of this EnvironmentProtectionRulesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnvironmentProtectionRulesInner.


        :param type: The type of this EnvironmentProtectionRulesInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def wait_timer(self):
        """Gets the wait_timer of this EnvironmentProtectionRulesInner.

        The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).

        :return: The wait_timer of this EnvironmentProtectionRulesInner.
        :rtype: int
        """
        return self._wait_timer

    @wait_timer.setter
    def wait_timer(self, wait_timer):
        """Sets the wait_timer of this EnvironmentProtectionRulesInner.

        The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).

        :param wait_timer: The wait_timer of this EnvironmentProtectionRulesInner.
        :type wait_timer: int
        """

        self._wait_timer = wait_timer

    @property
    def reviewers(self):
        """Gets the reviewers of this EnvironmentProtectionRulesInner.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :return: The reviewers of this EnvironmentProtectionRulesInner.
        :rtype: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this EnvironmentProtectionRulesInner.

        The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.

        :param reviewers: The reviewers of this EnvironmentProtectionRulesInner.
        :type reviewers: List[EnvironmentProtectionRulesInnerAnyOf1ReviewersInner]
        """

        self._reviewers = reviewers
