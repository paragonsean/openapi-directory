# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CodeScanningAlertRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, full_description: str=None, help: str=None, help_uri: str=None, id: str=None, name: str=None, security_severity_level: str=None, severity: str=None, tags: List[str]=None):
        """CodeScanningAlertRule - a model defined in OpenAPI

        :param description: The description of this CodeScanningAlertRule.
        :param full_description: The full_description of this CodeScanningAlertRule.
        :param help: The help of this CodeScanningAlertRule.
        :param help_uri: The help_uri of this CodeScanningAlertRule.
        :param id: The id of this CodeScanningAlertRule.
        :param name: The name of this CodeScanningAlertRule.
        :param security_severity_level: The security_severity_level of this CodeScanningAlertRule.
        :param severity: The severity of this CodeScanningAlertRule.
        :param tags: The tags of this CodeScanningAlertRule.
        """
        self.openapi_types = {
            'description': str,
            'full_description': str,
            'help': str,
            'help_uri': str,
            'id': str,
            'name': str,
            'security_severity_level': str,
            'severity': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'full_description': 'full_description',
            'help': 'help',
            'help_uri': 'help_uri',
            'id': 'id',
            'name': 'name',
            'security_severity_level': 'security_severity_level',
            'severity': 'severity',
            'tags': 'tags'
        }

        self._description = description
        self._full_description = full_description
        self._help = help
        self._help_uri = help_uri
        self._id = id
        self._name = name
        self._security_severity_level = security_severity_level
        self._severity = severity
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningAlertRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-alert-rule of this CodeScanningAlertRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CodeScanningAlertRule.

        A short description of the rule used to detect the alert.

        :return: The description of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CodeScanningAlertRule.

        A short description of the rule used to detect the alert.

        :param description: The description of this CodeScanningAlertRule.
        :type description: str
        """

        self._description = description

    @property
    def full_description(self):
        """Gets the full_description of this CodeScanningAlertRule.

        description of the rule used to detect the alert.

        :return: The full_description of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this CodeScanningAlertRule.

        description of the rule used to detect the alert.

        :param full_description: The full_description of this CodeScanningAlertRule.
        :type full_description: str
        """

        self._full_description = full_description

    @property
    def help(self):
        """Gets the help of this CodeScanningAlertRule.

        Detailed documentation for the rule as GitHub Flavored Markdown.

        :return: The help of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this CodeScanningAlertRule.

        Detailed documentation for the rule as GitHub Flavored Markdown.

        :param help: The help of this CodeScanningAlertRule.
        :type help: str
        """

        self._help = help

    @property
    def help_uri(self):
        """Gets the help_uri of this CodeScanningAlertRule.

        A link to the documentation for the rule used to detect the alert.

        :return: The help_uri of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._help_uri

    @help_uri.setter
    def help_uri(self, help_uri):
        """Sets the help_uri of this CodeScanningAlertRule.

        A link to the documentation for the rule used to detect the alert.

        :param help_uri: The help_uri of this CodeScanningAlertRule.
        :type help_uri: str
        """

        self._help_uri = help_uri

    @property
    def id(self):
        """Gets the id of this CodeScanningAlertRule.

        A unique identifier for the rule used to detect the alert.

        :return: The id of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeScanningAlertRule.

        A unique identifier for the rule used to detect the alert.

        :param id: The id of this CodeScanningAlertRule.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CodeScanningAlertRule.

        The name of the rule used to detect the alert.

        :return: The name of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CodeScanningAlertRule.

        The name of the rule used to detect the alert.

        :param name: The name of this CodeScanningAlertRule.
        :type name: str
        """

        self._name = name

    @property
    def security_severity_level(self):
        """Gets the security_severity_level of this CodeScanningAlertRule.

        The security severity of the alert.

        :return: The security_severity_level of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._security_severity_level

    @security_severity_level.setter
    def security_severity_level(self, security_severity_level):
        """Sets the security_severity_level of this CodeScanningAlertRule.

        The security severity of the alert.

        :param security_severity_level: The security_severity_level of this CodeScanningAlertRule.
        :type security_severity_level: str
        """
        allowed_values = [None,"low", "medium", "high", "critical"]  # noqa: E501
        if security_severity_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_severity_level` ({0}), must be one of {1}"
                .format(security_severity_level, allowed_values)
            )

        self._security_severity_level = security_severity_level

    @property
    def severity(self):
        """Gets the severity of this CodeScanningAlertRule.

        The severity of the alert.

        :return: The severity of this CodeScanningAlertRule.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CodeScanningAlertRule.

        The severity of the alert.

        :param severity: The severity of this CodeScanningAlertRule.
        :type severity: str
        """
        allowed_values = [None,"none", "note", "warning", "error"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def tags(self):
        """Gets the tags of this CodeScanningAlertRule.

        A set of tags applicable for the rule.

        :return: The tags of this CodeScanningAlertRule.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CodeScanningAlertRule.

        A set of tags applicable for the rule.

        :param tags: The tags of this CodeScanningAlertRule.
        :type tags: List[str]
        """

        self._tags = tags
