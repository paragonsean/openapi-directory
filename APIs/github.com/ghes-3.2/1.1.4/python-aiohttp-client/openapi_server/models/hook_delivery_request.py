# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HookDeliveryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: Dict[str, object]=None, payload: Dict[str, object]=None):
        """HookDeliveryRequest - a model defined in OpenAPI

        :param headers: The headers of this HookDeliveryRequest.
        :param payload: The payload of this HookDeliveryRequest.
        """
        self.openapi_types = {
            'headers': Dict[str, object],
            'payload': Dict[str, object]
        }

        self.attribute_map = {
            'headers': 'headers',
            'payload': 'payload'
        }

        self._headers = headers
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookDeliveryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hook_delivery_request of this HookDeliveryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this HookDeliveryRequest.

        The request headers sent with the webhook delivery.

        :return: The headers of this HookDeliveryRequest.
        :rtype: Dict[str, object]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HookDeliveryRequest.

        The request headers sent with the webhook delivery.

        :param headers: The headers of this HookDeliveryRequest.
        :type headers: Dict[str, object]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def payload(self):
        """Gets the payload of this HookDeliveryRequest.

        The webhook payload.

        :return: The payload of this HookDeliveryRequest.
        :rtype: Dict[str, object]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this HookDeliveryRequest.

        The webhook payload.

        :param payload: The payload of this HookDeliveryRequest.
        :type payload: Dict[str, object]
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload
