# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_full_plan import OrganizationFullPlan
from openapi_server import util


class TeamOrganization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, billing_email: str=None, blog: str=None, collaborators: int=None, company: str=None, created_at: datetime=None, default_repository_permission: str=None, description: str=None, disk_usage: int=None, email: str=None, events_url: str=None, followers: int=None, following: int=None, has_organization_projects: bool=None, has_repository_projects: bool=None, hooks_url: str=None, html_url: str=None, id: int=None, is_verified: bool=None, issues_url: str=None, location: str=None, login: str=None, members_allowed_repository_creation_type: str=None, members_can_create_internal_repositories: bool=None, members_can_create_pages: bool=None, members_can_create_private_pages: bool=None, members_can_create_private_repositories: bool=None, members_can_create_public_pages: bool=None, members_can_create_public_repositories: bool=None, members_can_create_repositories: bool=None, members_url: str=None, name: str=None, node_id: str=None, owned_private_repos: int=None, plan: OrganizationFullPlan=None, private_gists: int=None, public_gists: int=None, public_members_url: str=None, public_repos: int=None, repos_url: str=None, total_private_repos: int=None, twitter_username: str=None, two_factor_requirement_enabled: bool=None, type: str=None, updated_at: datetime=None, url: str=None):
        """TeamOrganization - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this TeamOrganization.
        :param billing_email: The billing_email of this TeamOrganization.
        :param blog: The blog of this TeamOrganization.
        :param collaborators: The collaborators of this TeamOrganization.
        :param company: The company of this TeamOrganization.
        :param created_at: The created_at of this TeamOrganization.
        :param default_repository_permission: The default_repository_permission of this TeamOrganization.
        :param description: The description of this TeamOrganization.
        :param disk_usage: The disk_usage of this TeamOrganization.
        :param email: The email of this TeamOrganization.
        :param events_url: The events_url of this TeamOrganization.
        :param followers: The followers of this TeamOrganization.
        :param following: The following of this TeamOrganization.
        :param has_organization_projects: The has_organization_projects of this TeamOrganization.
        :param has_repository_projects: The has_repository_projects of this TeamOrganization.
        :param hooks_url: The hooks_url of this TeamOrganization.
        :param html_url: The html_url of this TeamOrganization.
        :param id: The id of this TeamOrganization.
        :param is_verified: The is_verified of this TeamOrganization.
        :param issues_url: The issues_url of this TeamOrganization.
        :param location: The location of this TeamOrganization.
        :param login: The login of this TeamOrganization.
        :param members_allowed_repository_creation_type: The members_allowed_repository_creation_type of this TeamOrganization.
        :param members_can_create_internal_repositories: The members_can_create_internal_repositories of this TeamOrganization.
        :param members_can_create_pages: The members_can_create_pages of this TeamOrganization.
        :param members_can_create_private_pages: The members_can_create_private_pages of this TeamOrganization.
        :param members_can_create_private_repositories: The members_can_create_private_repositories of this TeamOrganization.
        :param members_can_create_public_pages: The members_can_create_public_pages of this TeamOrganization.
        :param members_can_create_public_repositories: The members_can_create_public_repositories of this TeamOrganization.
        :param members_can_create_repositories: The members_can_create_repositories of this TeamOrganization.
        :param members_url: The members_url of this TeamOrganization.
        :param name: The name of this TeamOrganization.
        :param node_id: The node_id of this TeamOrganization.
        :param owned_private_repos: The owned_private_repos of this TeamOrganization.
        :param plan: The plan of this TeamOrganization.
        :param private_gists: The private_gists of this TeamOrganization.
        :param public_gists: The public_gists of this TeamOrganization.
        :param public_members_url: The public_members_url of this TeamOrganization.
        :param public_repos: The public_repos of this TeamOrganization.
        :param repos_url: The repos_url of this TeamOrganization.
        :param total_private_repos: The total_private_repos of this TeamOrganization.
        :param twitter_username: The twitter_username of this TeamOrganization.
        :param two_factor_requirement_enabled: The two_factor_requirement_enabled of this TeamOrganization.
        :param type: The type of this TeamOrganization.
        :param updated_at: The updated_at of this TeamOrganization.
        :param url: The url of this TeamOrganization.
        """
        self.openapi_types = {
            'avatar_url': str,
            'billing_email': str,
            'blog': str,
            'collaborators': int,
            'company': str,
            'created_at': datetime,
            'default_repository_permission': str,
            'description': str,
            'disk_usage': int,
            'email': str,
            'events_url': str,
            'followers': int,
            'following': int,
            'has_organization_projects': bool,
            'has_repository_projects': bool,
            'hooks_url': str,
            'html_url': str,
            'id': int,
            'is_verified': bool,
            'issues_url': str,
            'location': str,
            'login': str,
            'members_allowed_repository_creation_type': str,
            'members_can_create_internal_repositories': bool,
            'members_can_create_pages': bool,
            'members_can_create_private_pages': bool,
            'members_can_create_private_repositories': bool,
            'members_can_create_public_pages': bool,
            'members_can_create_public_repositories': bool,
            'members_can_create_repositories': bool,
            'members_url': str,
            'name': str,
            'node_id': str,
            'owned_private_repos': int,
            'plan': OrganizationFullPlan,
            'private_gists': int,
            'public_gists': int,
            'public_members_url': str,
            'public_repos': int,
            'repos_url': str,
            'total_private_repos': int,
            'twitter_username': str,
            'two_factor_requirement_enabled': bool,
            'type': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'billing_email': 'billing_email',
            'blog': 'blog',
            'collaborators': 'collaborators',
            'company': 'company',
            'created_at': 'created_at',
            'default_repository_permission': 'default_repository_permission',
            'description': 'description',
            'disk_usage': 'disk_usage',
            'email': 'email',
            'events_url': 'events_url',
            'followers': 'followers',
            'following': 'following',
            'has_organization_projects': 'has_organization_projects',
            'has_repository_projects': 'has_repository_projects',
            'hooks_url': 'hooks_url',
            'html_url': 'html_url',
            'id': 'id',
            'is_verified': 'is_verified',
            'issues_url': 'issues_url',
            'location': 'location',
            'login': 'login',
            'members_allowed_repository_creation_type': 'members_allowed_repository_creation_type',
            'members_can_create_internal_repositories': 'members_can_create_internal_repositories',
            'members_can_create_pages': 'members_can_create_pages',
            'members_can_create_private_pages': 'members_can_create_private_pages',
            'members_can_create_private_repositories': 'members_can_create_private_repositories',
            'members_can_create_public_pages': 'members_can_create_public_pages',
            'members_can_create_public_repositories': 'members_can_create_public_repositories',
            'members_can_create_repositories': 'members_can_create_repositories',
            'members_url': 'members_url',
            'name': 'name',
            'node_id': 'node_id',
            'owned_private_repos': 'owned_private_repos',
            'plan': 'plan',
            'private_gists': 'private_gists',
            'public_gists': 'public_gists',
            'public_members_url': 'public_members_url',
            'public_repos': 'public_repos',
            'repos_url': 'repos_url',
            'total_private_repos': 'total_private_repos',
            'twitter_username': 'twitter_username',
            'two_factor_requirement_enabled': 'two_factor_requirement_enabled',
            'type': 'type',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._avatar_url = avatar_url
        self._billing_email = billing_email
        self._blog = blog
        self._collaborators = collaborators
        self._company = company
        self._created_at = created_at
        self._default_repository_permission = default_repository_permission
        self._description = description
        self._disk_usage = disk_usage
        self._email = email
        self._events_url = events_url
        self._followers = followers
        self._following = following
        self._has_organization_projects = has_organization_projects
        self._has_repository_projects = has_repository_projects
        self._hooks_url = hooks_url
        self._html_url = html_url
        self._id = id
        self._is_verified = is_verified
        self._issues_url = issues_url
        self._location = location
        self._login = login
        self._members_allowed_repository_creation_type = members_allowed_repository_creation_type
        self._members_can_create_internal_repositories = members_can_create_internal_repositories
        self._members_can_create_pages = members_can_create_pages
        self._members_can_create_private_pages = members_can_create_private_pages
        self._members_can_create_private_repositories = members_can_create_private_repositories
        self._members_can_create_public_pages = members_can_create_public_pages
        self._members_can_create_public_repositories = members_can_create_public_repositories
        self._members_can_create_repositories = members_can_create_repositories
        self._members_url = members_url
        self._name = name
        self._node_id = node_id
        self._owned_private_repos = owned_private_repos
        self._plan = plan
        self._private_gists = private_gists
        self._public_gists = public_gists
        self._public_members_url = public_members_url
        self._public_repos = public_repos
        self._repos_url = repos_url
        self._total_private_repos = total_private_repos
        self._twitter_username = twitter_username
        self._two_factor_requirement_enabled = two_factor_requirement_enabled
        self._type = type
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamOrganization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-organization of this TeamOrganization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this TeamOrganization.


        :return: The avatar_url of this TeamOrganization.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this TeamOrganization.


        :param avatar_url: The avatar_url of this TeamOrganization.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def billing_email(self):
        """Gets the billing_email of this TeamOrganization.


        :return: The billing_email of this TeamOrganization.
        :rtype: str
        """
        return self._billing_email

    @billing_email.setter
    def billing_email(self, billing_email):
        """Sets the billing_email of this TeamOrganization.


        :param billing_email: The billing_email of this TeamOrganization.
        :type billing_email: str
        """

        self._billing_email = billing_email

    @property
    def blog(self):
        """Gets the blog of this TeamOrganization.


        :return: The blog of this TeamOrganization.
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this TeamOrganization.


        :param blog: The blog of this TeamOrganization.
        :type blog: str
        """

        self._blog = blog

    @property
    def collaborators(self):
        """Gets the collaborators of this TeamOrganization.


        :return: The collaborators of this TeamOrganization.
        :rtype: int
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this TeamOrganization.


        :param collaborators: The collaborators of this TeamOrganization.
        :type collaborators: int
        """

        self._collaborators = collaborators

    @property
    def company(self):
        """Gets the company of this TeamOrganization.


        :return: The company of this TeamOrganization.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this TeamOrganization.


        :param company: The company of this TeamOrganization.
        :type company: str
        """

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this TeamOrganization.


        :return: The created_at of this TeamOrganization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamOrganization.


        :param created_at: The created_at of this TeamOrganization.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def default_repository_permission(self):
        """Gets the default_repository_permission of this TeamOrganization.


        :return: The default_repository_permission of this TeamOrganization.
        :rtype: str
        """
        return self._default_repository_permission

    @default_repository_permission.setter
    def default_repository_permission(self, default_repository_permission):
        """Sets the default_repository_permission of this TeamOrganization.


        :param default_repository_permission: The default_repository_permission of this TeamOrganization.
        :type default_repository_permission: str
        """

        self._default_repository_permission = default_repository_permission

    @property
    def description(self):
        """Gets the description of this TeamOrganization.


        :return: The description of this TeamOrganization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamOrganization.


        :param description: The description of this TeamOrganization.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def disk_usage(self):
        """Gets the disk_usage of this TeamOrganization.


        :return: The disk_usage of this TeamOrganization.
        :rtype: int
        """
        return self._disk_usage

    @disk_usage.setter
    def disk_usage(self, disk_usage):
        """Sets the disk_usage of this TeamOrganization.


        :param disk_usage: The disk_usage of this TeamOrganization.
        :type disk_usage: int
        """

        self._disk_usage = disk_usage

    @property
    def email(self):
        """Gets the email of this TeamOrganization.


        :return: The email of this TeamOrganization.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TeamOrganization.


        :param email: The email of this TeamOrganization.
        :type email: str
        """

        self._email = email

    @property
    def events_url(self):
        """Gets the events_url of this TeamOrganization.


        :return: The events_url of this TeamOrganization.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this TeamOrganization.


        :param events_url: The events_url of this TeamOrganization.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def followers(self):
        """Gets the followers of this TeamOrganization.


        :return: The followers of this TeamOrganization.
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this TeamOrganization.


        :param followers: The followers of this TeamOrganization.
        :type followers: int
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")

        self._followers = followers

    @property
    def following(self):
        """Gets the following of this TeamOrganization.


        :return: The following of this TeamOrganization.
        :rtype: int
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this TeamOrganization.


        :param following: The following of this TeamOrganization.
        :type following: int
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")

        self._following = following

    @property
    def has_organization_projects(self):
        """Gets the has_organization_projects of this TeamOrganization.


        :return: The has_organization_projects of this TeamOrganization.
        :rtype: bool
        """
        return self._has_organization_projects

    @has_organization_projects.setter
    def has_organization_projects(self, has_organization_projects):
        """Sets the has_organization_projects of this TeamOrganization.


        :param has_organization_projects: The has_organization_projects of this TeamOrganization.
        :type has_organization_projects: bool
        """
        if has_organization_projects is None:
            raise ValueError("Invalid value for `has_organization_projects`, must not be `None`")

        self._has_organization_projects = has_organization_projects

    @property
    def has_repository_projects(self):
        """Gets the has_repository_projects of this TeamOrganization.


        :return: The has_repository_projects of this TeamOrganization.
        :rtype: bool
        """
        return self._has_repository_projects

    @has_repository_projects.setter
    def has_repository_projects(self, has_repository_projects):
        """Sets the has_repository_projects of this TeamOrganization.


        :param has_repository_projects: The has_repository_projects of this TeamOrganization.
        :type has_repository_projects: bool
        """
        if has_repository_projects is None:
            raise ValueError("Invalid value for `has_repository_projects`, must not be `None`")

        self._has_repository_projects = has_repository_projects

    @property
    def hooks_url(self):
        """Gets the hooks_url of this TeamOrganization.


        :return: The hooks_url of this TeamOrganization.
        :rtype: str
        """
        return self._hooks_url

    @hooks_url.setter
    def hooks_url(self, hooks_url):
        """Sets the hooks_url of this TeamOrganization.


        :param hooks_url: The hooks_url of this TeamOrganization.
        :type hooks_url: str
        """
        if hooks_url is None:
            raise ValueError("Invalid value for `hooks_url`, must not be `None`")

        self._hooks_url = hooks_url

    @property
    def html_url(self):
        """Gets the html_url of this TeamOrganization.


        :return: The html_url of this TeamOrganization.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TeamOrganization.


        :param html_url: The html_url of this TeamOrganization.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TeamOrganization.


        :return: The id of this TeamOrganization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamOrganization.


        :param id: The id of this TeamOrganization.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_verified(self):
        """Gets the is_verified of this TeamOrganization.


        :return: The is_verified of this TeamOrganization.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this TeamOrganization.


        :param is_verified: The is_verified of this TeamOrganization.
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def issues_url(self):
        """Gets the issues_url of this TeamOrganization.


        :return: The issues_url of this TeamOrganization.
        :rtype: str
        """
        return self._issues_url

    @issues_url.setter
    def issues_url(self, issues_url):
        """Sets the issues_url of this TeamOrganization.


        :param issues_url: The issues_url of this TeamOrganization.
        :type issues_url: str
        """
        if issues_url is None:
            raise ValueError("Invalid value for `issues_url`, must not be `None`")

        self._issues_url = issues_url

    @property
    def location(self):
        """Gets the location of this TeamOrganization.


        :return: The location of this TeamOrganization.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this TeamOrganization.


        :param location: The location of this TeamOrganization.
        :type location: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this TeamOrganization.


        :return: The login of this TeamOrganization.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this TeamOrganization.


        :param login: The login of this TeamOrganization.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def members_allowed_repository_creation_type(self):
        """Gets the members_allowed_repository_creation_type of this TeamOrganization.


        :return: The members_allowed_repository_creation_type of this TeamOrganization.
        :rtype: str
        """
        return self._members_allowed_repository_creation_type

    @members_allowed_repository_creation_type.setter
    def members_allowed_repository_creation_type(self, members_allowed_repository_creation_type):
        """Sets the members_allowed_repository_creation_type of this TeamOrganization.


        :param members_allowed_repository_creation_type: The members_allowed_repository_creation_type of this TeamOrganization.
        :type members_allowed_repository_creation_type: str
        """

        self._members_allowed_repository_creation_type = members_allowed_repository_creation_type

    @property
    def members_can_create_internal_repositories(self):
        """Gets the members_can_create_internal_repositories of this TeamOrganization.


        :return: The members_can_create_internal_repositories of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_internal_repositories

    @members_can_create_internal_repositories.setter
    def members_can_create_internal_repositories(self, members_can_create_internal_repositories):
        """Sets the members_can_create_internal_repositories of this TeamOrganization.


        :param members_can_create_internal_repositories: The members_can_create_internal_repositories of this TeamOrganization.
        :type members_can_create_internal_repositories: bool
        """

        self._members_can_create_internal_repositories = members_can_create_internal_repositories

    @property
    def members_can_create_pages(self):
        """Gets the members_can_create_pages of this TeamOrganization.


        :return: The members_can_create_pages of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_pages

    @members_can_create_pages.setter
    def members_can_create_pages(self, members_can_create_pages):
        """Sets the members_can_create_pages of this TeamOrganization.


        :param members_can_create_pages: The members_can_create_pages of this TeamOrganization.
        :type members_can_create_pages: bool
        """

        self._members_can_create_pages = members_can_create_pages

    @property
    def members_can_create_private_pages(self):
        """Gets the members_can_create_private_pages of this TeamOrganization.


        :return: The members_can_create_private_pages of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_private_pages

    @members_can_create_private_pages.setter
    def members_can_create_private_pages(self, members_can_create_private_pages):
        """Sets the members_can_create_private_pages of this TeamOrganization.


        :param members_can_create_private_pages: The members_can_create_private_pages of this TeamOrganization.
        :type members_can_create_private_pages: bool
        """

        self._members_can_create_private_pages = members_can_create_private_pages

    @property
    def members_can_create_private_repositories(self):
        """Gets the members_can_create_private_repositories of this TeamOrganization.


        :return: The members_can_create_private_repositories of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_private_repositories

    @members_can_create_private_repositories.setter
    def members_can_create_private_repositories(self, members_can_create_private_repositories):
        """Sets the members_can_create_private_repositories of this TeamOrganization.


        :param members_can_create_private_repositories: The members_can_create_private_repositories of this TeamOrganization.
        :type members_can_create_private_repositories: bool
        """

        self._members_can_create_private_repositories = members_can_create_private_repositories

    @property
    def members_can_create_public_pages(self):
        """Gets the members_can_create_public_pages of this TeamOrganization.


        :return: The members_can_create_public_pages of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_public_pages

    @members_can_create_public_pages.setter
    def members_can_create_public_pages(self, members_can_create_public_pages):
        """Sets the members_can_create_public_pages of this TeamOrganization.


        :param members_can_create_public_pages: The members_can_create_public_pages of this TeamOrganization.
        :type members_can_create_public_pages: bool
        """

        self._members_can_create_public_pages = members_can_create_public_pages

    @property
    def members_can_create_public_repositories(self):
        """Gets the members_can_create_public_repositories of this TeamOrganization.


        :return: The members_can_create_public_repositories of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_public_repositories

    @members_can_create_public_repositories.setter
    def members_can_create_public_repositories(self, members_can_create_public_repositories):
        """Sets the members_can_create_public_repositories of this TeamOrganization.


        :param members_can_create_public_repositories: The members_can_create_public_repositories of this TeamOrganization.
        :type members_can_create_public_repositories: bool
        """

        self._members_can_create_public_repositories = members_can_create_public_repositories

    @property
    def members_can_create_repositories(self):
        """Gets the members_can_create_repositories of this TeamOrganization.


        :return: The members_can_create_repositories of this TeamOrganization.
        :rtype: bool
        """
        return self._members_can_create_repositories

    @members_can_create_repositories.setter
    def members_can_create_repositories(self, members_can_create_repositories):
        """Sets the members_can_create_repositories of this TeamOrganization.


        :param members_can_create_repositories: The members_can_create_repositories of this TeamOrganization.
        :type members_can_create_repositories: bool
        """

        self._members_can_create_repositories = members_can_create_repositories

    @property
    def members_url(self):
        """Gets the members_url of this TeamOrganization.


        :return: The members_url of this TeamOrganization.
        :rtype: str
        """
        return self._members_url

    @members_url.setter
    def members_url(self, members_url):
        """Sets the members_url of this TeamOrganization.


        :param members_url: The members_url of this TeamOrganization.
        :type members_url: str
        """
        if members_url is None:
            raise ValueError("Invalid value for `members_url`, must not be `None`")

        self._members_url = members_url

    @property
    def name(self):
        """Gets the name of this TeamOrganization.


        :return: The name of this TeamOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamOrganization.


        :param name: The name of this TeamOrganization.
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this TeamOrganization.


        :return: The node_id of this TeamOrganization.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TeamOrganization.


        :param node_id: The node_id of this TeamOrganization.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def owned_private_repos(self):
        """Gets the owned_private_repos of this TeamOrganization.


        :return: The owned_private_repos of this TeamOrganization.
        :rtype: int
        """
        return self._owned_private_repos

    @owned_private_repos.setter
    def owned_private_repos(self, owned_private_repos):
        """Sets the owned_private_repos of this TeamOrganization.


        :param owned_private_repos: The owned_private_repos of this TeamOrganization.
        :type owned_private_repos: int
        """

        self._owned_private_repos = owned_private_repos

    @property
    def plan(self):
        """Gets the plan of this TeamOrganization.


        :return: The plan of this TeamOrganization.
        :rtype: OrganizationFullPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this TeamOrganization.


        :param plan: The plan of this TeamOrganization.
        :type plan: OrganizationFullPlan
        """

        self._plan = plan

    @property
    def private_gists(self):
        """Gets the private_gists of this TeamOrganization.


        :return: The private_gists of this TeamOrganization.
        :rtype: int
        """
        return self._private_gists

    @private_gists.setter
    def private_gists(self, private_gists):
        """Sets the private_gists of this TeamOrganization.


        :param private_gists: The private_gists of this TeamOrganization.
        :type private_gists: int
        """

        self._private_gists = private_gists

    @property
    def public_gists(self):
        """Gets the public_gists of this TeamOrganization.


        :return: The public_gists of this TeamOrganization.
        :rtype: int
        """
        return self._public_gists

    @public_gists.setter
    def public_gists(self, public_gists):
        """Sets the public_gists of this TeamOrganization.


        :param public_gists: The public_gists of this TeamOrganization.
        :type public_gists: int
        """
        if public_gists is None:
            raise ValueError("Invalid value for `public_gists`, must not be `None`")

        self._public_gists = public_gists

    @property
    def public_members_url(self):
        """Gets the public_members_url of this TeamOrganization.


        :return: The public_members_url of this TeamOrganization.
        :rtype: str
        """
        return self._public_members_url

    @public_members_url.setter
    def public_members_url(self, public_members_url):
        """Sets the public_members_url of this TeamOrganization.


        :param public_members_url: The public_members_url of this TeamOrganization.
        :type public_members_url: str
        """
        if public_members_url is None:
            raise ValueError("Invalid value for `public_members_url`, must not be `None`")

        self._public_members_url = public_members_url

    @property
    def public_repos(self):
        """Gets the public_repos of this TeamOrganization.


        :return: The public_repos of this TeamOrganization.
        :rtype: int
        """
        return self._public_repos

    @public_repos.setter
    def public_repos(self, public_repos):
        """Sets the public_repos of this TeamOrganization.


        :param public_repos: The public_repos of this TeamOrganization.
        :type public_repos: int
        """
        if public_repos is None:
            raise ValueError("Invalid value for `public_repos`, must not be `None`")

        self._public_repos = public_repos

    @property
    def repos_url(self):
        """Gets the repos_url of this TeamOrganization.


        :return: The repos_url of this TeamOrganization.
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this TeamOrganization.


        :param repos_url: The repos_url of this TeamOrganization.
        :type repos_url: str
        """
        if repos_url is None:
            raise ValueError("Invalid value for `repos_url`, must not be `None`")

        self._repos_url = repos_url

    @property
    def total_private_repos(self):
        """Gets the total_private_repos of this TeamOrganization.


        :return: The total_private_repos of this TeamOrganization.
        :rtype: int
        """
        return self._total_private_repos

    @total_private_repos.setter
    def total_private_repos(self, total_private_repos):
        """Sets the total_private_repos of this TeamOrganization.


        :param total_private_repos: The total_private_repos of this TeamOrganization.
        :type total_private_repos: int
        """

        self._total_private_repos = total_private_repos

    @property
    def twitter_username(self):
        """Gets the twitter_username of this TeamOrganization.


        :return: The twitter_username of this TeamOrganization.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this TeamOrganization.


        :param twitter_username: The twitter_username of this TeamOrganization.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def two_factor_requirement_enabled(self):
        """Gets the two_factor_requirement_enabled of this TeamOrganization.


        :return: The two_factor_requirement_enabled of this TeamOrganization.
        :rtype: bool
        """
        return self._two_factor_requirement_enabled

    @two_factor_requirement_enabled.setter
    def two_factor_requirement_enabled(self, two_factor_requirement_enabled):
        """Sets the two_factor_requirement_enabled of this TeamOrganization.


        :param two_factor_requirement_enabled: The two_factor_requirement_enabled of this TeamOrganization.
        :type two_factor_requirement_enabled: bool
        """

        self._two_factor_requirement_enabled = two_factor_requirement_enabled

    @property
    def type(self):
        """Gets the type of this TeamOrganization.


        :return: The type of this TeamOrganization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TeamOrganization.


        :param type: The type of this TeamOrganization.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamOrganization.


        :return: The updated_at of this TeamOrganization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamOrganization.


        :param updated_at: The updated_at of this TeamOrganization.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TeamOrganization.


        :return: The url of this TeamOrganization.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamOrganization.


        :param url: The url of this TeamOrganization.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
