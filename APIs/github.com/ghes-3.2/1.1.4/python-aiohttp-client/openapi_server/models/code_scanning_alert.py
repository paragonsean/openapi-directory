# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_scanning_alert_dismissed_reason import CodeScanningAlertDismissedReason
from openapi_server.models.code_scanning_alert_instance import CodeScanningAlertInstance
from openapi_server.models.code_scanning_alert_rule import CodeScanningAlertRule
from openapi_server.models.code_scanning_alert_state import CodeScanningAlertState
from openapi_server.models.code_scanning_analysis_tool import CodeScanningAnalysisTool
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class CodeScanningAlert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, dismissed_at: datetime=None, dismissed_by: NullableSimpleUser=None, dismissed_reason: CodeScanningAlertDismissedReason=None, html_url: str=None, instances: object=None, instances_url: str=None, most_recent_instance: CodeScanningAlertInstance=None, number: int=None, rule: CodeScanningAlertRule=None, state: CodeScanningAlertState=None, tool: CodeScanningAnalysisTool=None, url: str=None):
        """CodeScanningAlert - a model defined in OpenAPI

        :param created_at: The created_at of this CodeScanningAlert.
        :param dismissed_at: The dismissed_at of this CodeScanningAlert.
        :param dismissed_by: The dismissed_by of this CodeScanningAlert.
        :param dismissed_reason: The dismissed_reason of this CodeScanningAlert.
        :param html_url: The html_url of this CodeScanningAlert.
        :param instances: The instances of this CodeScanningAlert.
        :param instances_url: The instances_url of this CodeScanningAlert.
        :param most_recent_instance: The most_recent_instance of this CodeScanningAlert.
        :param number: The number of this CodeScanningAlert.
        :param rule: The rule of this CodeScanningAlert.
        :param state: The state of this CodeScanningAlert.
        :param tool: The tool of this CodeScanningAlert.
        :param url: The url of this CodeScanningAlert.
        """
        self.openapi_types = {
            'created_at': datetime,
            'dismissed_at': datetime,
            'dismissed_by': NullableSimpleUser,
            'dismissed_reason': CodeScanningAlertDismissedReason,
            'html_url': str,
            'instances': object,
            'instances_url': str,
            'most_recent_instance': CodeScanningAlertInstance,
            'number': int,
            'rule': CodeScanningAlertRule,
            'state': CodeScanningAlertState,
            'tool': CodeScanningAnalysisTool,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'dismissed_at': 'dismissed_at',
            'dismissed_by': 'dismissed_by',
            'dismissed_reason': 'dismissed_reason',
            'html_url': 'html_url',
            'instances': 'instances',
            'instances_url': 'instances_url',
            'most_recent_instance': 'most_recent_instance',
            'number': 'number',
            'rule': 'rule',
            'state': 'state',
            'tool': 'tool',
            'url': 'url'
        }

        self._created_at = created_at
        self._dismissed_at = dismissed_at
        self._dismissed_by = dismissed_by
        self._dismissed_reason = dismissed_reason
        self._html_url = html_url
        self._instances = instances
        self._instances_url = instances_url
        self._most_recent_instance = most_recent_instance
        self._number = number
        self._rule = rule
        self._state = state
        self._tool = tool
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-alert of this CodeScanningAlert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this CodeScanningAlert.

        The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The created_at of this CodeScanningAlert.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodeScanningAlert.

        The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param created_at: The created_at of this CodeScanningAlert.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def dismissed_at(self):
        """Gets the dismissed_at of this CodeScanningAlert.

        The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The dismissed_at of this CodeScanningAlert.
        :rtype: datetime
        """
        return self._dismissed_at

    @dismissed_at.setter
    def dismissed_at(self, dismissed_at):
        """Sets the dismissed_at of this CodeScanningAlert.

        The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param dismissed_at: The dismissed_at of this CodeScanningAlert.
        :type dismissed_at: datetime
        """
        if dismissed_at is None:
            raise ValueError("Invalid value for `dismissed_at`, must not be `None`")

        self._dismissed_at = dismissed_at

    @property
    def dismissed_by(self):
        """Gets the dismissed_by of this CodeScanningAlert.


        :return: The dismissed_by of this CodeScanningAlert.
        :rtype: NullableSimpleUser
        """
        return self._dismissed_by

    @dismissed_by.setter
    def dismissed_by(self, dismissed_by):
        """Sets the dismissed_by of this CodeScanningAlert.


        :param dismissed_by: The dismissed_by of this CodeScanningAlert.
        :type dismissed_by: NullableSimpleUser
        """
        if dismissed_by is None:
            raise ValueError("Invalid value for `dismissed_by`, must not be `None`")

        self._dismissed_by = dismissed_by

    @property
    def dismissed_reason(self):
        """Gets the dismissed_reason of this CodeScanningAlert.


        :return: The dismissed_reason of this CodeScanningAlert.
        :rtype: CodeScanningAlertDismissedReason
        """
        return self._dismissed_reason

    @dismissed_reason.setter
    def dismissed_reason(self, dismissed_reason):
        """Sets the dismissed_reason of this CodeScanningAlert.


        :param dismissed_reason: The dismissed_reason of this CodeScanningAlert.
        :type dismissed_reason: CodeScanningAlertDismissedReason
        """
        if dismissed_reason is None:
            raise ValueError("Invalid value for `dismissed_reason`, must not be `None`")

        self._dismissed_reason = dismissed_reason

    @property
    def html_url(self):
        """Gets the html_url of this CodeScanningAlert.

        The GitHub URL of the alert resource.

        :return: The html_url of this CodeScanningAlert.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CodeScanningAlert.

        The GitHub URL of the alert resource.

        :param html_url: The html_url of this CodeScanningAlert.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def instances(self):
        """Gets the instances of this CodeScanningAlert.


        :return: The instances of this CodeScanningAlert.
        :rtype: object
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this CodeScanningAlert.


        :param instances: The instances of this CodeScanningAlert.
        :type instances: object
        """

        self._instances = instances

    @property
    def instances_url(self):
        """Gets the instances_url of this CodeScanningAlert.

        The REST API URL for fetching the list of instances for an alert.

        :return: The instances_url of this CodeScanningAlert.
        :rtype: str
        """
        return self._instances_url

    @instances_url.setter
    def instances_url(self, instances_url):
        """Sets the instances_url of this CodeScanningAlert.

        The REST API URL for fetching the list of instances for an alert.

        :param instances_url: The instances_url of this CodeScanningAlert.
        :type instances_url: str
        """
        if instances_url is None:
            raise ValueError("Invalid value for `instances_url`, must not be `None`")

        self._instances_url = instances_url

    @property
    def most_recent_instance(self):
        """Gets the most_recent_instance of this CodeScanningAlert.


        :return: The most_recent_instance of this CodeScanningAlert.
        :rtype: CodeScanningAlertInstance
        """
        return self._most_recent_instance

    @most_recent_instance.setter
    def most_recent_instance(self, most_recent_instance):
        """Sets the most_recent_instance of this CodeScanningAlert.


        :param most_recent_instance: The most_recent_instance of this CodeScanningAlert.
        :type most_recent_instance: CodeScanningAlertInstance
        """
        if most_recent_instance is None:
            raise ValueError("Invalid value for `most_recent_instance`, must not be `None`")

        self._most_recent_instance = most_recent_instance

    @property
    def number(self):
        """Gets the number of this CodeScanningAlert.

        The security alert number.

        :return: The number of this CodeScanningAlert.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CodeScanningAlert.

        The security alert number.

        :param number: The number of this CodeScanningAlert.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def rule(self):
        """Gets the rule of this CodeScanningAlert.


        :return: The rule of this CodeScanningAlert.
        :rtype: CodeScanningAlertRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this CodeScanningAlert.


        :param rule: The rule of this CodeScanningAlert.
        :type rule: CodeScanningAlertRule
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule

    @property
    def state(self):
        """Gets the state of this CodeScanningAlert.


        :return: The state of this CodeScanningAlert.
        :rtype: CodeScanningAlertState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CodeScanningAlert.


        :param state: The state of this CodeScanningAlert.
        :type state: CodeScanningAlertState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def tool(self):
        """Gets the tool of this CodeScanningAlert.


        :return: The tool of this CodeScanningAlert.
        :rtype: CodeScanningAnalysisTool
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this CodeScanningAlert.


        :param tool: The tool of this CodeScanningAlert.
        :type tool: CodeScanningAnalysisTool
        """
        if tool is None:
            raise ValueError("Invalid value for `tool`, must not be `None`")

        self._tool = tool

    @property
    def url(self):
        """Gets the url of this CodeScanningAlert.

        The REST API URL of the alert resource.

        :return: The url of this CodeScanningAlert.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CodeScanningAlert.

        The REST API URL of the alert resource.

        :param url: The url of this CodeScanningAlert.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
