# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_update_request_security_and_analysis import ReposUpdateRequestSecurityAndAnalysis
from openapi_server import util


class ReposUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_forking: bool=False, allow_merge_commit: bool=True, allow_rebase_merge: bool=True, allow_squash_merge: bool=True, allow_update_branch: bool=False, archived: bool=False, default_branch: str=None, delete_branch_on_merge: bool=False, description: str=None, has_issues: bool=True, has_projects: bool=True, has_wiki: bool=True, homepage: str=None, is_template: bool=False, merge_commit_message: str=None, merge_commit_title: str=None, name: str=None, private: bool=False, security_and_analysis: ReposUpdateRequestSecurityAndAnalysis=None, squash_merge_commit_message: str=None, squash_merge_commit_title: str=None, use_squash_pr_title_as_default: bool=False, visibility: str=None):
        """ReposUpdateRequest - a model defined in OpenAPI

        :param allow_forking: The allow_forking of this ReposUpdateRequest.
        :param allow_merge_commit: The allow_merge_commit of this ReposUpdateRequest.
        :param allow_rebase_merge: The allow_rebase_merge of this ReposUpdateRequest.
        :param allow_squash_merge: The allow_squash_merge of this ReposUpdateRequest.
        :param allow_update_branch: The allow_update_branch of this ReposUpdateRequest.
        :param archived: The archived of this ReposUpdateRequest.
        :param default_branch: The default_branch of this ReposUpdateRequest.
        :param delete_branch_on_merge: The delete_branch_on_merge of this ReposUpdateRequest.
        :param description: The description of this ReposUpdateRequest.
        :param has_issues: The has_issues of this ReposUpdateRequest.
        :param has_projects: The has_projects of this ReposUpdateRequest.
        :param has_wiki: The has_wiki of this ReposUpdateRequest.
        :param homepage: The homepage of this ReposUpdateRequest.
        :param is_template: The is_template of this ReposUpdateRequest.
        :param merge_commit_message: The merge_commit_message of this ReposUpdateRequest.
        :param merge_commit_title: The merge_commit_title of this ReposUpdateRequest.
        :param name: The name of this ReposUpdateRequest.
        :param private: The private of this ReposUpdateRequest.
        :param security_and_analysis: The security_and_analysis of this ReposUpdateRequest.
        :param squash_merge_commit_message: The squash_merge_commit_message of this ReposUpdateRequest.
        :param squash_merge_commit_title: The squash_merge_commit_title of this ReposUpdateRequest.
        :param use_squash_pr_title_as_default: The use_squash_pr_title_as_default of this ReposUpdateRequest.
        :param visibility: The visibility of this ReposUpdateRequest.
        """
        self.openapi_types = {
            'allow_forking': bool,
            'allow_merge_commit': bool,
            'allow_rebase_merge': bool,
            'allow_squash_merge': bool,
            'allow_update_branch': bool,
            'archived': bool,
            'default_branch': str,
            'delete_branch_on_merge': bool,
            'description': str,
            'has_issues': bool,
            'has_projects': bool,
            'has_wiki': bool,
            'homepage': str,
            'is_template': bool,
            'merge_commit_message': str,
            'merge_commit_title': str,
            'name': str,
            'private': bool,
            'security_and_analysis': ReposUpdateRequestSecurityAndAnalysis,
            'squash_merge_commit_message': str,
            'squash_merge_commit_title': str,
            'use_squash_pr_title_as_default': bool,
            'visibility': str
        }

        self.attribute_map = {
            'allow_forking': 'allow_forking',
            'allow_merge_commit': 'allow_merge_commit',
            'allow_rebase_merge': 'allow_rebase_merge',
            'allow_squash_merge': 'allow_squash_merge',
            'allow_update_branch': 'allow_update_branch',
            'archived': 'archived',
            'default_branch': 'default_branch',
            'delete_branch_on_merge': 'delete_branch_on_merge',
            'description': 'description',
            'has_issues': 'has_issues',
            'has_projects': 'has_projects',
            'has_wiki': 'has_wiki',
            'homepage': 'homepage',
            'is_template': 'is_template',
            'merge_commit_message': 'merge_commit_message',
            'merge_commit_title': 'merge_commit_title',
            'name': 'name',
            'private': 'private',
            'security_and_analysis': 'security_and_analysis',
            'squash_merge_commit_message': 'squash_merge_commit_message',
            'squash_merge_commit_title': 'squash_merge_commit_title',
            'use_squash_pr_title_as_default': 'use_squash_pr_title_as_default',
            'visibility': 'visibility'
        }

        self._allow_forking = allow_forking
        self._allow_merge_commit = allow_merge_commit
        self._allow_rebase_merge = allow_rebase_merge
        self._allow_squash_merge = allow_squash_merge
        self._allow_update_branch = allow_update_branch
        self._archived = archived
        self._default_branch = default_branch
        self._delete_branch_on_merge = delete_branch_on_merge
        self._description = description
        self._has_issues = has_issues
        self._has_projects = has_projects
        self._has_wiki = has_wiki
        self._homepage = homepage
        self._is_template = is_template
        self._merge_commit_message = merge_commit_message
        self._merge_commit_title = merge_commit_title
        self._name = name
        self._private = private
        self._security_and_analysis = security_and_analysis
        self._squash_merge_commit_message = squash_merge_commit_message
        self._squash_merge_commit_title = squash_merge_commit_title
        self._use_squash_pr_title_as_default = use_squash_pr_title_as_default
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_request of this ReposUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_forking(self):
        """Gets the allow_forking of this ReposUpdateRequest.

        Either `true` to allow private forks, or `false` to prevent private forks.

        :return: The allow_forking of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._allow_forking

    @allow_forking.setter
    def allow_forking(self, allow_forking):
        """Sets the allow_forking of this ReposUpdateRequest.

        Either `true` to allow private forks, or `false` to prevent private forks.

        :param allow_forking: The allow_forking of this ReposUpdateRequest.
        :type allow_forking: bool
        """

        self._allow_forking = allow_forking

    @property
    def allow_merge_commit(self):
        """Gets the allow_merge_commit of this ReposUpdateRequest.

        Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :return: The allow_merge_commit of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._allow_merge_commit

    @allow_merge_commit.setter
    def allow_merge_commit(self, allow_merge_commit):
        """Sets the allow_merge_commit of this ReposUpdateRequest.

        Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.

        :param allow_merge_commit: The allow_merge_commit of this ReposUpdateRequest.
        :type allow_merge_commit: bool
        """

        self._allow_merge_commit = allow_merge_commit

    @property
    def allow_rebase_merge(self):
        """Gets the allow_rebase_merge of this ReposUpdateRequest.

        Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :return: The allow_rebase_merge of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._allow_rebase_merge

    @allow_rebase_merge.setter
    def allow_rebase_merge(self, allow_rebase_merge):
        """Sets the allow_rebase_merge of this ReposUpdateRequest.

        Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.

        :param allow_rebase_merge: The allow_rebase_merge of this ReposUpdateRequest.
        :type allow_rebase_merge: bool
        """

        self._allow_rebase_merge = allow_rebase_merge

    @property
    def allow_squash_merge(self):
        """Gets the allow_squash_merge of this ReposUpdateRequest.

        Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :return: The allow_squash_merge of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._allow_squash_merge

    @allow_squash_merge.setter
    def allow_squash_merge(self, allow_squash_merge):
        """Sets the allow_squash_merge of this ReposUpdateRequest.

        Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.

        :param allow_squash_merge: The allow_squash_merge of this ReposUpdateRequest.
        :type allow_squash_merge: bool
        """

        self._allow_squash_merge = allow_squash_merge

    @property
    def allow_update_branch(self):
        """Gets the allow_update_branch of this ReposUpdateRequest.

        Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.

        :return: The allow_update_branch of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._allow_update_branch

    @allow_update_branch.setter
    def allow_update_branch(self, allow_update_branch):
        """Sets the allow_update_branch of this ReposUpdateRequest.

        Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.

        :param allow_update_branch: The allow_update_branch of this ReposUpdateRequest.
        :type allow_update_branch: bool
        """

        self._allow_update_branch = allow_update_branch

    @property
    def archived(self):
        """Gets the archived of this ReposUpdateRequest.

        `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.

        :return: The archived of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ReposUpdateRequest.

        `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.

        :param archived: The archived of this ReposUpdateRequest.
        :type archived: bool
        """

        self._archived = archived

    @property
    def default_branch(self):
        """Gets the default_branch of this ReposUpdateRequest.

        Updates the default branch for this repository.

        :return: The default_branch of this ReposUpdateRequest.
        :rtype: str
        """
        return self._default_branch

    @default_branch.setter
    def default_branch(self, default_branch):
        """Sets the default_branch of this ReposUpdateRequest.

        Updates the default branch for this repository.

        :param default_branch: The default_branch of this ReposUpdateRequest.
        :type default_branch: str
        """

        self._default_branch = default_branch

    @property
    def delete_branch_on_merge(self):
        """Gets the delete_branch_on_merge of this ReposUpdateRequest.

        Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.

        :return: The delete_branch_on_merge of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._delete_branch_on_merge

    @delete_branch_on_merge.setter
    def delete_branch_on_merge(self, delete_branch_on_merge):
        """Sets the delete_branch_on_merge of this ReposUpdateRequest.

        Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.

        :param delete_branch_on_merge: The delete_branch_on_merge of this ReposUpdateRequest.
        :type delete_branch_on_merge: bool
        """

        self._delete_branch_on_merge = delete_branch_on_merge

    @property
    def description(self):
        """Gets the description of this ReposUpdateRequest.

        A short description of the repository.

        :return: The description of this ReposUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposUpdateRequest.

        A short description of the repository.

        :param description: The description of this ReposUpdateRequest.
        :type description: str
        """

        self._description = description

    @property
    def has_issues(self):
        """Gets the has_issues of this ReposUpdateRequest.

        Either `true` to enable issues for this repository or `false` to disable them.

        :return: The has_issues of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._has_issues

    @has_issues.setter
    def has_issues(self, has_issues):
        """Sets the has_issues of this ReposUpdateRequest.

        Either `true` to enable issues for this repository or `false` to disable them.

        :param has_issues: The has_issues of this ReposUpdateRequest.
        :type has_issues: bool
        """

        self._has_issues = has_issues

    @property
    def has_projects(self):
        """Gets the has_projects of this ReposUpdateRequest.

        Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.

        :return: The has_projects of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._has_projects

    @has_projects.setter
    def has_projects(self, has_projects):
        """Sets the has_projects of this ReposUpdateRequest.

        Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.

        :param has_projects: The has_projects of this ReposUpdateRequest.
        :type has_projects: bool
        """

        self._has_projects = has_projects

    @property
    def has_wiki(self):
        """Gets the has_wiki of this ReposUpdateRequest.

        Either `true` to enable the wiki for this repository or `false` to disable it.

        :return: The has_wiki of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._has_wiki

    @has_wiki.setter
    def has_wiki(self, has_wiki):
        """Sets the has_wiki of this ReposUpdateRequest.

        Either `true` to enable the wiki for this repository or `false` to disable it.

        :param has_wiki: The has_wiki of this ReposUpdateRequest.
        :type has_wiki: bool
        """

        self._has_wiki = has_wiki

    @property
    def homepage(self):
        """Gets the homepage of this ReposUpdateRequest.

        A URL with more information about the repository.

        :return: The homepage of this ReposUpdateRequest.
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this ReposUpdateRequest.

        A URL with more information about the repository.

        :param homepage: The homepage of this ReposUpdateRequest.
        :type homepage: str
        """

        self._homepage = homepage

    @property
    def is_template(self):
        """Gets the is_template of this ReposUpdateRequest.

        Either `true` to make this repo available as a template repository or `false` to prevent it.

        :return: The is_template of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this ReposUpdateRequest.

        Either `true` to make this repo available as a template repository or `false` to prevent it.

        :param is_template: The is_template of this ReposUpdateRequest.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def merge_commit_message(self):
        """Gets the merge_commit_message of this ReposUpdateRequest.

        The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.

        :return: The merge_commit_message of this ReposUpdateRequest.
        :rtype: str
        """
        return self._merge_commit_message

    @merge_commit_message.setter
    def merge_commit_message(self, merge_commit_message):
        """Sets the merge_commit_message of this ReposUpdateRequest.

        The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.

        :param merge_commit_message: The merge_commit_message of this ReposUpdateRequest.
        :type merge_commit_message: str
        """
        allowed_values = ["PR_BODY", "PR_TITLE", "BLANK"]  # noqa: E501
        if merge_commit_message not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_commit_message` ({0}), must be one of {1}"
                .format(merge_commit_message, allowed_values)
            )

        self._merge_commit_message = merge_commit_message

    @property
    def merge_commit_title(self):
        """Gets the merge_commit_title of this ReposUpdateRequest.

        The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).

        :return: The merge_commit_title of this ReposUpdateRequest.
        :rtype: str
        """
        return self._merge_commit_title

    @merge_commit_title.setter
    def merge_commit_title(self, merge_commit_title):
        """Sets the merge_commit_title of this ReposUpdateRequest.

        The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).

        :param merge_commit_title: The merge_commit_title of this ReposUpdateRequest.
        :type merge_commit_title: str
        """
        allowed_values = ["PR_TITLE", "MERGE_MESSAGE"]  # noqa: E501
        if merge_commit_title not in allowed_values:
            raise ValueError(
                "Invalid value for `merge_commit_title` ({0}), must be one of {1}"
                .format(merge_commit_title, allowed_values)
            )

        self._merge_commit_title = merge_commit_title

    @property
    def name(self):
        """Gets the name of this ReposUpdateRequest.

        The name of the repository.

        :return: The name of this ReposUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReposUpdateRequest.

        The name of the repository.

        :param name: The name of this ReposUpdateRequest.
        :type name: str
        """

        self._name = name

    @property
    def private(self):
        """Gets the private of this ReposUpdateRequest.

        Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.

        :return: The private of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ReposUpdateRequest.

        Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.

        :param private: The private of this ReposUpdateRequest.
        :type private: bool
        """

        self._private = private

    @property
    def security_and_analysis(self):
        """Gets the security_and_analysis of this ReposUpdateRequest.


        :return: The security_and_analysis of this ReposUpdateRequest.
        :rtype: ReposUpdateRequestSecurityAndAnalysis
        """
        return self._security_and_analysis

    @security_and_analysis.setter
    def security_and_analysis(self, security_and_analysis):
        """Sets the security_and_analysis of this ReposUpdateRequest.


        :param security_and_analysis: The security_and_analysis of this ReposUpdateRequest.
        :type security_and_analysis: ReposUpdateRequestSecurityAndAnalysis
        """

        self._security_and_analysis = security_and_analysis

    @property
    def squash_merge_commit_message(self):
        """Gets the squash_merge_commit_message of this ReposUpdateRequest.

        The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.

        :return: The squash_merge_commit_message of this ReposUpdateRequest.
        :rtype: str
        """
        return self._squash_merge_commit_message

    @squash_merge_commit_message.setter
    def squash_merge_commit_message(self, squash_merge_commit_message):
        """Sets the squash_merge_commit_message of this ReposUpdateRequest.

        The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.

        :param squash_merge_commit_message: The squash_merge_commit_message of this ReposUpdateRequest.
        :type squash_merge_commit_message: str
        """
        allowed_values = ["PR_BODY", "COMMIT_MESSAGES", "BLANK"]  # noqa: E501
        if squash_merge_commit_message not in allowed_values:
            raise ValueError(
                "Invalid value for `squash_merge_commit_message` ({0}), must be one of {1}"
                .format(squash_merge_commit_message, allowed_values)
            )

        self._squash_merge_commit_message = squash_merge_commit_message

    @property
    def squash_merge_commit_title(self):
        """Gets the squash_merge_commit_title of this ReposUpdateRequest.

        The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).

        :return: The squash_merge_commit_title of this ReposUpdateRequest.
        :rtype: str
        """
        return self._squash_merge_commit_title

    @squash_merge_commit_title.setter
    def squash_merge_commit_title(self, squash_merge_commit_title):
        """Sets the squash_merge_commit_title of this ReposUpdateRequest.

        The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).

        :param squash_merge_commit_title: The squash_merge_commit_title of this ReposUpdateRequest.
        :type squash_merge_commit_title: str
        """
        allowed_values = ["PR_TITLE", "COMMIT_OR_PR_TITLE"]  # noqa: E501
        if squash_merge_commit_title not in allowed_values:
            raise ValueError(
                "Invalid value for `squash_merge_commit_title` ({0}), must be one of {1}"
                .format(squash_merge_commit_title, allowed_values)
            )

        self._squash_merge_commit_title = squash_merge_commit_title

    @property
    def use_squash_pr_title_as_default(self):
        """Gets the use_squash_pr_title_as_default of this ReposUpdateRequest.

        Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.

        :return: The use_squash_pr_title_as_default of this ReposUpdateRequest.
        :rtype: bool
        """
        return self._use_squash_pr_title_as_default

    @use_squash_pr_title_as_default.setter
    def use_squash_pr_title_as_default(self, use_squash_pr_title_as_default):
        """Sets the use_squash_pr_title_as_default of this ReposUpdateRequest.

        Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.

        :param use_squash_pr_title_as_default: The use_squash_pr_title_as_default of this ReposUpdateRequest.
        :type use_squash_pr_title_as_default: bool
        """

        self._use_squash_pr_title_as_default = use_squash_pr_title_as_default

    @property
    def visibility(self):
        """Gets the visibility of this ReposUpdateRequest.

        Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"

        :return: The visibility of this ReposUpdateRequest.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ReposUpdateRequest.

        Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"

        :param visibility: The visibility of this ReposUpdateRequest.
        :type visibility: str
        """
        allowed_values = ["public", "private", "internal"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
