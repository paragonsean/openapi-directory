/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment_approvals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment_approvals::OAIEnvironment_approvals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment_approvals::OAIEnvironment_approvals() {
    this->initializeModel();
}

OAIEnvironment_approvals::~OAIEnvironment_approvals() {}

void OAIEnvironment_approvals::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEnvironment_approvals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment_approvals::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIEnvironment_approvals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment_approvals::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_environments.size() > 0) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIEnvironment_approvals::getComment() const {
    return m_comment;
}
void OAIEnvironment_approvals::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIEnvironment_approvals::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIEnvironment_approvals::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<OAIEnvironment_approvals_environments_inner> OAIEnvironment_approvals::getEnvironments() const {
    return m_environments;
}
void OAIEnvironment_approvals::setEnvironments(const QList<OAIEnvironment_approvals_environments_inner> &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAIEnvironment_approvals::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAIEnvironment_approvals::is_environments_Valid() const{
    return m_environments_isValid;
}

QString OAIEnvironment_approvals::getState() const {
    return m_state;
}
void OAIEnvironment_approvals::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEnvironment_approvals::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEnvironment_approvals::is_state_Valid() const{
    return m_state_isValid;
}

OAISimple_user OAIEnvironment_approvals::getUser() const {
    return m_user;
}
void OAIEnvironment_approvals::setUser(const OAISimple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEnvironment_approvals::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEnvironment_approvals::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEnvironment_approvals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment_approvals::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && m_environments_isValid && m_state_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
