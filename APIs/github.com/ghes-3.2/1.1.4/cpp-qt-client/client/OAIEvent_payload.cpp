/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_payload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_payload::OAIEvent_payload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_payload::OAIEvent_payload() {
    this->initializeModel();
}

OAIEvent_payload::~OAIEvent_payload() {}

void OAIEvent_payload::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;
}

void OAIEvent_payload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_payload::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;
}

QString OAIEvent_payload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_payload::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_pages.size() > 0) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    return obj;
}

QString OAIEvent_payload::getAction() const {
    return m_action;
}
void OAIEvent_payload::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIEvent_payload::is_action_Set() const{
    return m_action_isSet;
}

bool OAIEvent_payload::is_action_Valid() const{
    return m_action_isValid;
}

OAIIssue_comment OAIEvent_payload::getComment() const {
    return m_comment;
}
void OAIEvent_payload::setComment(const OAIIssue_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIEvent_payload::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIEvent_payload::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIIssue OAIEvent_payload::getIssue() const {
    return m_issue;
}
void OAIEvent_payload::setIssue(const OAIIssue &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIEvent_payload::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIEvent_payload::is_issue_Valid() const{
    return m_issue_isValid;
}

QList<OAIEvent_payload_pages_inner> OAIEvent_payload::getPages() const {
    return m_pages;
}
void OAIEvent_payload::setPages(const QList<OAIEvent_payload_pages_inner> &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIEvent_payload::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIEvent_payload::is_pages_Valid() const{
    return m_pages_isValid;
}

bool OAIEvent_payload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_payload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
