/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication_grant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication_grant::OAIApplication_grant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication_grant::OAIApplication_grant() {
    this->initializeModel();
}

OAIApplication_grant::~OAIApplication_grant() {}

void OAIApplication_grant::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIApplication_grant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication_grant::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIApplication_grant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication_grant::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApplication_grant_app OAIApplication_grant::getApp() const {
    return m_app;
}
void OAIApplication_grant::setApp(const OAIApplication_grant_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIApplication_grant::is_app_Set() const{
    return m_app_isSet;
}

bool OAIApplication_grant::is_app_Valid() const{
    return m_app_isValid;
}

QDateTime OAIApplication_grant::getCreatedAt() const {
    return m_created_at;
}
void OAIApplication_grant::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApplication_grant::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApplication_grant::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIApplication_grant::getId() const {
    return m_id;
}
void OAIApplication_grant::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplication_grant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplication_grant::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIApplication_grant::getScopes() const {
    return m_scopes;
}
void OAIApplication_grant::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIApplication_grant::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIApplication_grant::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QDateTime OAIApplication_grant::getUpdatedAt() const {
    return m_updated_at;
}
void OAIApplication_grant::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIApplication_grant::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIApplication_grant::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIApplication_grant::getUrl() const {
    return m_url;
}
void OAIApplication_grant::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApplication_grant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApplication_grant::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIApplication_grant::getUser() const {
    return m_user;
}
void OAIApplication_grant::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIApplication_grant::is_user_Set() const{
    return m_user_isSet;
}

bool OAIApplication_grant::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIApplication_grant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication_grant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_isValid && m_created_at_isValid && m_id_isValid && m_scopes_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
