/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlob::OAIBlob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlob::OAIBlob() {
    this->initializeModel();
}

OAIBlob::~OAIBlob() {}

void OAIBlob::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_highlighted_content_isSet = false;
    m_highlighted_content_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBlob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlob::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_highlighted_content_isValid = ::OpenAPI::fromJsonValue(m_highlighted_content, json[QString("highlighted_content")]);
    m_highlighted_content_isSet = !json[QString("highlighted_content")].isNull() && m_highlighted_content_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBlob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlob::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_highlighted_content_isSet) {
        obj.insert(QString("highlighted_content"), ::OpenAPI::toJsonValue(m_highlighted_content));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIBlob::getContent() const {
    return m_content;
}
void OAIBlob::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIBlob::is_content_Set() const{
    return m_content_isSet;
}

bool OAIBlob::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIBlob::getEncoding() const {
    return m_encoding;
}
void OAIBlob::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIBlob::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIBlob::is_encoding_Valid() const{
    return m_encoding_isValid;
}

QString OAIBlob::getHighlightedContent() const {
    return m_highlighted_content;
}
void OAIBlob::setHighlightedContent(const QString &highlighted_content) {
    m_highlighted_content = highlighted_content;
    m_highlighted_content_isSet = true;
}

bool OAIBlob::is_highlighted_content_Set() const{
    return m_highlighted_content_isSet;
}

bool OAIBlob::is_highlighted_content_Valid() const{
    return m_highlighted_content_isValid;
}

QString OAIBlob::getNodeId() const {
    return m_node_id;
}
void OAIBlob::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIBlob::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIBlob::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIBlob::getSha() const {
    return m_sha;
}
void OAIBlob::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIBlob::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIBlob::is_sha_Valid() const{
    return m_sha_isValid;
}

qint32 OAIBlob::getSize() const {
    return m_size;
}
void OAIBlob::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIBlob::is_size_Set() const{
    return m_size_isSet;
}

bool OAIBlob::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIBlob::getUrl() const {
    return m_url;
}
void OAIBlob::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBlob::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBlob::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBlob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlighted_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlob::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_encoding_isValid && m_node_id_isValid && m_sha_isValid && m_size_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
