/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthor_association.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthor_association::OAIAuthor_association(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthor_association::OAIAuthor_association() {
    this->initializeModel();
}

OAIAuthor_association::~OAIAuthor_association() {}

void OAIAuthor_association::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAuthor_association::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAuthor_association::fromJson(QString jsonString) {
    
    if ( jsonString.compare("COLLABORATOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::COLLABORATOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTRIBUTOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::CONTRIBUTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_TIMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::FIRST_TIMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FIRST_TIME_CONTRIBUTOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::FIRST_TIME_CONTRIBUTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MANNEQUIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::MANNEQUIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::MEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthor_association::OWNER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAuthor_association::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAuthor_association::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAuthor_association::COLLABORATOR:
            val = "COLLABORATOR";
            break;
        case eOAIAuthor_association::CONTRIBUTOR:
            val = "CONTRIBUTOR";
            break;
        case eOAIAuthor_association::FIRST_TIMER:
            val = "FIRST_TIMER";
            break;
        case eOAIAuthor_association::FIRST_TIME_CONTRIBUTOR:
            val = "FIRST_TIME_CONTRIBUTOR";
            break;
        case eOAIAuthor_association::MANNEQUIN:
            val = "MANNEQUIN";
            break;
        case eOAIAuthor_association::MEMBER:
            val = "MEMBER";
            break;
        case eOAIAuthor_association::NONE:
            val = "NONE";
            break;
        case eOAIAuthor_association::OWNER:
            val = "OWNER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAuthor_association::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAuthor_association::eOAIAuthor_association OAIAuthor_association::getValue() const {
    return m_value;
}

void OAIAuthor_association::setValue(const OAIAuthor_association::eOAIAuthor_association& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAuthor_association::isSet() const {
    
    return m_value_isSet;
}

bool OAIAuthor_association::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
