/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsers_update_authenticated_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsers_update_authenticated_request::OAIUsers_update_authenticated_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsers_update_authenticated_request::OAIUsers_update_authenticated_request() {
    this->initializeModel();
}

OAIUsers_update_authenticated_request::~OAIUsers_update_authenticated_request() {}

void OAIUsers_update_authenticated_request::initializeModel() {

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_hireable_isSet = false;
    m_hireable_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;
}

void OAIUsers_update_authenticated_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsers_update_authenticated_request::fromJsonObject(QJsonObject json) {

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_hireable_isValid = ::OpenAPI::fromJsonValue(m_hireable, json[QString("hireable")]);
    m_hireable_isSet = !json[QString("hireable")].isNull() && m_hireable_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;
}

QString OAIUsers_update_authenticated_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsers_update_authenticated_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_blog_isSet) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_hireable_isSet) {
        obj.insert(QString("hireable"), ::OpenAPI::toJsonValue(m_hireable));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    return obj;
}

QString OAIUsers_update_authenticated_request::getBio() const {
    return m_bio;
}
void OAIUsers_update_authenticated_request::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUsers_update_authenticated_request::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIUsers_update_authenticated_request::getBlog() const {
    return m_blog;
}
void OAIUsers_update_authenticated_request::setBlog(const QString &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIUsers_update_authenticated_request::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIUsers_update_authenticated_request::getCompany() const {
    return m_company;
}
void OAIUsers_update_authenticated_request::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUsers_update_authenticated_request::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIUsers_update_authenticated_request::getEmail() const {
    return m_email;
}
void OAIUsers_update_authenticated_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUsers_update_authenticated_request::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUsers_update_authenticated_request::isHireable() const {
    return m_hireable;
}
void OAIUsers_update_authenticated_request::setHireable(const bool &hireable) {
    m_hireable = hireable;
    m_hireable_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_hireable_Set() const{
    return m_hireable_isSet;
}

bool OAIUsers_update_authenticated_request::is_hireable_Valid() const{
    return m_hireable_isValid;
}

QString OAIUsers_update_authenticated_request::getLocation() const {
    return m_location;
}
void OAIUsers_update_authenticated_request::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUsers_update_authenticated_request::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUsers_update_authenticated_request::getName() const {
    return m_name;
}
void OAIUsers_update_authenticated_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUsers_update_authenticated_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUsers_update_authenticated_request::getTwitterUsername() const {
    return m_twitter_username;
}
void OAIUsers_update_authenticated_request::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAIUsers_update_authenticated_request::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAIUsers_update_authenticated_request::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

bool OAIUsers_update_authenticated_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hireable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsers_update_authenticated_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
