/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHook_delivery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHook_delivery::OAIHook_delivery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHook_delivery::OAIHook_delivery() {
    this->initializeModel();
}

OAIHook_delivery::~OAIHook_delivery() {}

void OAIHook_delivery::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_delivered_at_isSet = false;
    m_delivered_at_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installation_id_isSet = false;
    m_installation_id_isValid = false;

    m_redelivery_isSet = false;
    m_redelivery_isValid = false;

    m_repository_id_isSet = false;
    m_repository_id_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIHook_delivery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHook_delivery::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_delivered_at_isValid = ::OpenAPI::fromJsonValue(m_delivered_at, json[QString("delivered_at")]);
    m_delivered_at_isSet = !json[QString("delivered_at")].isNull() && m_delivered_at_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installation_id_isValid = ::OpenAPI::fromJsonValue(m_installation_id, json[QString("installation_id")]);
    m_installation_id_isSet = !json[QString("installation_id")].isNull() && m_installation_id_isValid;

    m_redelivery_isValid = ::OpenAPI::fromJsonValue(m_redelivery, json[QString("redelivery")]);
    m_redelivery_isSet = !json[QString("redelivery")].isNull() && m_redelivery_isValid;

    m_repository_id_isValid = ::OpenAPI::fromJsonValue(m_repository_id, json[QString("repository_id")]);
    m_repository_id_isSet = !json[QString("repository_id")].isNull() && m_repository_id_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIHook_delivery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHook_delivery::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_delivered_at_isSet) {
        obj.insert(QString("delivered_at"), ::OpenAPI::toJsonValue(m_delivered_at));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installation_id_isSet) {
        obj.insert(QString("installation_id"), ::OpenAPI::toJsonValue(m_installation_id));
    }
    if (m_redelivery_isSet) {
        obj.insert(QString("redelivery"), ::OpenAPI::toJsonValue(m_redelivery));
    }
    if (m_repository_id_isSet) {
        obj.insert(QString("repository_id"), ::OpenAPI::toJsonValue(m_repository_id));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIHook_delivery::getAction() const {
    return m_action;
}
void OAIHook_delivery::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIHook_delivery::is_action_Set() const{
    return m_action_isSet;
}

bool OAIHook_delivery::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAIHook_delivery::getDeliveredAt() const {
    return m_delivered_at;
}
void OAIHook_delivery::setDeliveredAt(const QDateTime &delivered_at) {
    m_delivered_at = delivered_at;
    m_delivered_at_isSet = true;
}

bool OAIHook_delivery::is_delivered_at_Set() const{
    return m_delivered_at_isSet;
}

bool OAIHook_delivery::is_delivered_at_Valid() const{
    return m_delivered_at_isValid;
}

double OAIHook_delivery::getDuration() const {
    return m_duration;
}
void OAIHook_delivery::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIHook_delivery::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIHook_delivery::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIHook_delivery::getEvent() const {
    return m_event;
}
void OAIHook_delivery::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIHook_delivery::is_event_Set() const{
    return m_event_isSet;
}

bool OAIHook_delivery::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIHook_delivery::getGuid() const {
    return m_guid;
}
void OAIHook_delivery::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIHook_delivery::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIHook_delivery::is_guid_Valid() const{
    return m_guid_isValid;
}

qint32 OAIHook_delivery::getId() const {
    return m_id;
}
void OAIHook_delivery::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHook_delivery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHook_delivery::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIHook_delivery::getInstallationId() const {
    return m_installation_id;
}
void OAIHook_delivery::setInstallationId(const qint32 &installation_id) {
    m_installation_id = installation_id;
    m_installation_id_isSet = true;
}

bool OAIHook_delivery::is_installation_id_Set() const{
    return m_installation_id_isSet;
}

bool OAIHook_delivery::is_installation_id_Valid() const{
    return m_installation_id_isValid;
}

bool OAIHook_delivery::isRedelivery() const {
    return m_redelivery;
}
void OAIHook_delivery::setRedelivery(const bool &redelivery) {
    m_redelivery = redelivery;
    m_redelivery_isSet = true;
}

bool OAIHook_delivery::is_redelivery_Set() const{
    return m_redelivery_isSet;
}

bool OAIHook_delivery::is_redelivery_Valid() const{
    return m_redelivery_isValid;
}

qint32 OAIHook_delivery::getRepositoryId() const {
    return m_repository_id;
}
void OAIHook_delivery::setRepositoryId(const qint32 &repository_id) {
    m_repository_id = repository_id;
    m_repository_id_isSet = true;
}

bool OAIHook_delivery::is_repository_id_Set() const{
    return m_repository_id_isSet;
}

bool OAIHook_delivery::is_repository_id_Valid() const{
    return m_repository_id_isValid;
}

OAIHook_delivery_request OAIHook_delivery::getRequest() const {
    return m_request;
}
void OAIHook_delivery::setRequest(const OAIHook_delivery_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIHook_delivery::is_request_Set() const{
    return m_request_isSet;
}

bool OAIHook_delivery::is_request_Valid() const{
    return m_request_isValid;
}

OAIHook_delivery_response OAIHook_delivery::getResponse() const {
    return m_response;
}
void OAIHook_delivery::setResponse(const OAIHook_delivery_response &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIHook_delivery::is_response_Set() const{
    return m_response_isSet;
}

bool OAIHook_delivery::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIHook_delivery::getStatus() const {
    return m_status;
}
void OAIHook_delivery::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHook_delivery::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHook_delivery::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIHook_delivery::getStatusCode() const {
    return m_status_code;
}
void OAIHook_delivery::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIHook_delivery::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIHook_delivery::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIHook_delivery::getUrl() const {
    return m_url;
}
void OAIHook_delivery::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIHook_delivery::is_url_Set() const{
    return m_url_isSet;
}

bool OAIHook_delivery::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIHook_delivery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redelivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHook_delivery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_delivered_at_isValid && m_duration_isValid && m_event_isValid && m_guid_isValid && m_id_isValid && m_installation_id_isValid && m_redelivery_isValid && m_repository_id_isValid && m_request_isValid && m_response_isValid && m_status_isValid && m_status_code_isValid && true;
}

} // namespace OpenAPI
