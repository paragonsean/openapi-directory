/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepos_update_request.h
 *
 * 
 */

#ifndef OAIRepos_update_request_H
#define OAIRepos_update_request_H

#include <QJsonObject>

#include "OAIRepos_update_request_security_and_analysis.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRepos_update_request_security_and_analysis;

class OAIRepos_update_request : public OAIObject {
public:
    OAIRepos_update_request();
    OAIRepos_update_request(QString json);
    ~OAIRepos_update_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowForking() const;
    void setAllowForking(const bool &allow_forking);
    bool is_allow_forking_Set() const;
    bool is_allow_forking_Valid() const;

    bool isAllowMergeCommit() const;
    void setAllowMergeCommit(const bool &allow_merge_commit);
    bool is_allow_merge_commit_Set() const;
    bool is_allow_merge_commit_Valid() const;

    bool isAllowRebaseMerge() const;
    void setAllowRebaseMerge(const bool &allow_rebase_merge);
    bool is_allow_rebase_merge_Set() const;
    bool is_allow_rebase_merge_Valid() const;

    bool isAllowSquashMerge() const;
    void setAllowSquashMerge(const bool &allow_squash_merge);
    bool is_allow_squash_merge_Set() const;
    bool is_allow_squash_merge_Valid() const;

    bool isAllowUpdateBranch() const;
    void setAllowUpdateBranch(const bool &allow_update_branch);
    bool is_allow_update_branch_Set() const;
    bool is_allow_update_branch_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QString getDefaultBranch() const;
    void setDefaultBranch(const QString &default_branch);
    bool is_default_branch_Set() const;
    bool is_default_branch_Valid() const;

    bool isDeleteBranchOnMerge() const;
    void setDeleteBranchOnMerge(const bool &delete_branch_on_merge);
    bool is_delete_branch_on_merge_Set() const;
    bool is_delete_branch_on_merge_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isHasIssues() const;
    void setHasIssues(const bool &has_issues);
    bool is_has_issues_Set() const;
    bool is_has_issues_Valid() const;

    bool isHasProjects() const;
    void setHasProjects(const bool &has_projects);
    bool is_has_projects_Set() const;
    bool is_has_projects_Valid() const;

    bool isHasWiki() const;
    void setHasWiki(const bool &has_wiki);
    bool is_has_wiki_Set() const;
    bool is_has_wiki_Valid() const;

    QString getHomepage() const;
    void setHomepage(const QString &homepage);
    bool is_homepage_Set() const;
    bool is_homepage_Valid() const;

    bool isIsTemplate() const;
    void setIsTemplate(const bool &is_template);
    bool is_is_template_Set() const;
    bool is_is_template_Valid() const;

    QString getMergeCommitMessage() const;
    void setMergeCommitMessage(const QString &merge_commit_message);
    bool is_merge_commit_message_Set() const;
    bool is_merge_commit_message_Valid() const;

    QString getMergeCommitTitle() const;
    void setMergeCommitTitle(const QString &merge_commit_title);
    bool is_merge_commit_title_Set() const;
    bool is_merge_commit_title_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRPrivate() const;
    void setRPrivate(const bool &r_private);
    bool is_r_private_Set() const;
    bool is_r_private_Valid() const;

    OAIRepos_update_request_security_and_analysis getSecurityAndAnalysis() const;
    void setSecurityAndAnalysis(const OAIRepos_update_request_security_and_analysis &security_and_analysis);
    bool is_security_and_analysis_Set() const;
    bool is_security_and_analysis_Valid() const;

    QString getSquashMergeCommitMessage() const;
    void setSquashMergeCommitMessage(const QString &squash_merge_commit_message);
    bool is_squash_merge_commit_message_Set() const;
    bool is_squash_merge_commit_message_Valid() const;

    QString getSquashMergeCommitTitle() const;
    void setSquashMergeCommitTitle(const QString &squash_merge_commit_title);
    bool is_squash_merge_commit_title_Set() const;
    bool is_squash_merge_commit_title_Valid() const;

    Q_DECL_DEPRECATED bool isUseSquashPrTitleAsDefault() const;
    Q_DECL_DEPRECATED void setUseSquashPrTitleAsDefault(const bool &use_squash_pr_title_as_default);
    Q_DECL_DEPRECATED bool is_use_squash_pr_title_as_default_Set() const;
    Q_DECL_DEPRECATED bool is_use_squash_pr_title_as_default_Valid() const;

    QString getVisibility() const;
    void setVisibility(const QString &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_forking;
    bool m_allow_forking_isSet;
    bool m_allow_forking_isValid;

    bool m_allow_merge_commit;
    bool m_allow_merge_commit_isSet;
    bool m_allow_merge_commit_isValid;

    bool m_allow_rebase_merge;
    bool m_allow_rebase_merge_isSet;
    bool m_allow_rebase_merge_isValid;

    bool m_allow_squash_merge;
    bool m_allow_squash_merge_isSet;
    bool m_allow_squash_merge_isValid;

    bool m_allow_update_branch;
    bool m_allow_update_branch_isSet;
    bool m_allow_update_branch_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QString m_default_branch;
    bool m_default_branch_isSet;
    bool m_default_branch_isValid;

    bool m_delete_branch_on_merge;
    bool m_delete_branch_on_merge_isSet;
    bool m_delete_branch_on_merge_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_has_issues;
    bool m_has_issues_isSet;
    bool m_has_issues_isValid;

    bool m_has_projects;
    bool m_has_projects_isSet;
    bool m_has_projects_isValid;

    bool m_has_wiki;
    bool m_has_wiki_isSet;
    bool m_has_wiki_isValid;

    QString m_homepage;
    bool m_homepage_isSet;
    bool m_homepage_isValid;

    bool m_is_template;
    bool m_is_template_isSet;
    bool m_is_template_isValid;

    QString m_merge_commit_message;
    bool m_merge_commit_message_isSet;
    bool m_merge_commit_message_isValid;

    QString m_merge_commit_title;
    bool m_merge_commit_title_isSet;
    bool m_merge_commit_title_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_r_private;
    bool m_r_private_isSet;
    bool m_r_private_isValid;

    OAIRepos_update_request_security_and_analysis m_security_and_analysis;
    bool m_security_and_analysis_isSet;
    bool m_security_and_analysis_isValid;

    QString m_squash_merge_commit_message;
    bool m_squash_merge_commit_message_isSet;
    bool m_squash_merge_commit_message_isValid;

    QString m_squash_merge_commit_title;
    bool m_squash_merge_commit_title_isSet;
    bool m_squash_merge_commit_title_isValid;

    bool m_use_squash_pr_title_as_default;
    bool m_use_squash_pr_title_as_default_isSet;
    bool m_use_squash_pr_title_as_default_isValid;

    QString m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepos_update_request)

#endif // OAIRepos_update_request_H
