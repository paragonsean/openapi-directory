/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_restriction_policy_apps_inner_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_restriction_policy_apps_inner_permissions::OAIBranch_restriction_policy_apps_inner_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_restriction_policy_apps_inner_permissions::OAIBranch_restriction_policy_apps_inner_permissions() {
    this->initializeModel();
}

OAIBranch_restriction_policy_apps_inner_permissions::~OAIBranch_restriction_policy_apps_inner_permissions() {}

void OAIBranch_restriction_policy_apps_inner_permissions::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_single_file_isSet = false;
    m_single_file_isValid = false;
}

void OAIBranch_restriction_policy_apps_inner_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_restriction_policy_apps_inner_permissions::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_single_file_isValid = ::OpenAPI::fromJsonValue(m_single_file, json[QString("single_file")]);
    m_single_file_isSet = !json[QString("single_file")].isNull() && m_single_file_isValid;
}

QString OAIBranch_restriction_policy_apps_inner_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_restriction_policy_apps_inner_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_issues_isSet) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_single_file_isSet) {
        obj.insert(QString("single_file"), ::OpenAPI::toJsonValue(m_single_file));
    }
    return obj;
}

QString OAIBranch_restriction_policy_apps_inner_permissions::getContents() const {
    return m_contents;
}
void OAIBranch_restriction_policy_apps_inner_permissions::setContents(const QString &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIBranch_restriction_policy_apps_inner_permissions::getIssues() const {
    return m_issues;
}
void OAIBranch_restriction_policy_apps_inner_permissions::setIssues(const QString &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIBranch_restriction_policy_apps_inner_permissions::getMetadata() const {
    return m_metadata;
}
void OAIBranch_restriction_policy_apps_inner_permissions::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIBranch_restriction_policy_apps_inner_permissions::getSingleFile() const {
    return m_single_file;
}
void OAIBranch_restriction_policy_apps_inner_permissions::setSingleFile(const QString &single_file) {
    m_single_file = single_file;
    m_single_file_isSet = true;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_single_file_Set() const{
    return m_single_file_isSet;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::is_single_file_Valid() const{
    return m_single_file_isValid;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_restriction_policy_apps_inner_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
