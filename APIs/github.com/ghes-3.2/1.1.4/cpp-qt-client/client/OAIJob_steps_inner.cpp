/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob_steps_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob_steps_inner::OAIJob_steps_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob_steps_inner::OAIJob_steps_inner() {
    this->initializeModel();
}

OAIJob_steps_inner::~OAIJob_steps_inner() {}

void OAIJob_steps_inner::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_conclusion_isSet = false;
    m_conclusion_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJob_steps_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob_steps_inner::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_conclusion_isValid = ::OpenAPI::fromJsonValue(m_conclusion, json[QString("conclusion")]);
    m_conclusion_isSet = !json[QString("conclusion")].isNull() && m_conclusion_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJob_steps_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob_steps_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_conclusion_isSet) {
        obj.insert(QString("conclusion"), ::OpenAPI::toJsonValue(m_conclusion));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIJob_steps_inner::getCompletedAt() const {
    return m_completed_at;
}
void OAIJob_steps_inner::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIJob_steps_inner::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIJob_steps_inner::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAIJob_steps_inner::getConclusion() const {
    return m_conclusion;
}
void OAIJob_steps_inner::setConclusion(const QString &conclusion) {
    m_conclusion = conclusion;
    m_conclusion_isSet = true;
}

bool OAIJob_steps_inner::is_conclusion_Set() const{
    return m_conclusion_isSet;
}

bool OAIJob_steps_inner::is_conclusion_Valid() const{
    return m_conclusion_isValid;
}

QString OAIJob_steps_inner::getName() const {
    return m_name;
}
void OAIJob_steps_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob_steps_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob_steps_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIJob_steps_inner::getNumber() const {
    return m_number;
}
void OAIJob_steps_inner::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIJob_steps_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAIJob_steps_inner::is_number_Valid() const{
    return m_number_isValid;
}

QDateTime OAIJob_steps_inner::getStartedAt() const {
    return m_started_at;
}
void OAIJob_steps_inner::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJob_steps_inner::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJob_steps_inner::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIJob_steps_inner::getStatus() const {
    return m_status;
}
void OAIJob_steps_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob_steps_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob_steps_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJob_steps_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob_steps_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conclusion_isValid && m_name_isValid && m_number_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
