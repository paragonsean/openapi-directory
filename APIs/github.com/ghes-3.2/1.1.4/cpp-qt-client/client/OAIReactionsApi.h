/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReactionsApi_H
#define OAI_OAIReactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIReaction.h"
#include "OAIReactions_create_for_commit_comment_415_response.h"
#include "OAIReactions_create_for_commit_comment_request.h"
#include "OAIReactions_create_for_issue_comment_request.h"
#include "OAIReactions_create_for_issue_request.h"
#include "OAIReactions_create_for_pull_request_review_comment_request.h"
#include "OAIReactions_create_for_release_request.h"
#include "OAIReactions_create_for_team_discussion_comment_in_org_request.h"
#include "OAIReactions_create_for_team_discussion_in_org_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReactionsApi : public QObject {
    Q_OBJECT

public:
    OAIReactionsApi(const int timeOut = 0);
    ~OAIReactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_commit_comment_request OAIReactions_create_for_commit_comment_request [required]
    */
    virtual void reactions_createForCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_commit_comment_request &oai_reactions_create_for_commit_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  oai_reactions_create_for_issue_request OAIReactions_create_for_issue_request [required]
    */
    virtual void reactions_createForIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const OAIReactions_create_for_issue_request &oai_reactions_create_for_issue_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_issue_comment_request OAIReactions_create_for_issue_comment_request [required]
    */
    virtual void reactions_createForIssueComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_issue_comment_request &oai_reactions_create_for_issue_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  oai_reactions_create_for_pull_request_review_comment_request OAIReactions_create_for_pull_request_review_comment_request [required]
    */
    virtual void reactions_createForPullRequestReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id, const OAIReactions_create_for_pull_request_review_comment_request &oai_reactions_create_for_pull_request_review_comment_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  oai_reactions_create_for_release_request OAIReactions_create_for_release_request [required]
    */
    virtual void reactions_createForRelease(const QString &owner, const QString &repo, const qint32 &release_id, const OAIReactions_create_for_release_request &oai_reactions_create_for_release_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_comment_in_org_request OAIReactions_create_for_team_discussion_comment_in_org_request [required]
    */
    virtual void reactions_createForTeamDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number, const OAIReactions_create_for_team_discussion_comment_in_org_request &oai_reactions_create_for_team_discussion_comment_in_org_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_comment_in_org_request OAIReactions_create_for_team_discussion_comment_in_org_request [required]
    */
    Q_DECL_DEPRECATED virtual void reactions_createForTeamDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const OAIReactions_create_for_team_discussion_comment_in_org_request &oai_reactions_create_for_team_discussion_comment_in_org_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_in_org_request OAIReactions_create_for_team_discussion_in_org_request [required]
    */
    virtual void reactions_createForTeamDiscussionInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const OAIReactions_create_for_team_discussion_in_org_request &oai_reactions_create_for_team_discussion_in_org_request);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_reactions_create_for_team_discussion_in_org_request OAIReactions_create_for_team_discussion_in_org_request [required]
    */
    Q_DECL_DEPRECATED virtual void reactions_createForTeamDiscussionLegacy(const qint32 &team_id, const qint32 &discussion_number, const OAIReactions_create_for_team_discussion_in_org_request &oai_reactions_create_for_team_discussion_in_org_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForIssueComment(const QString &owner, const QString &repo, const qint32 &comment_id, const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForPullRequestComment(const QString &owner, const QString &repo, const qint32 &comment_id, const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForRelease(const QString &owner, const QString &repo, const qint32 &release_id, const qint32 &reaction_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForTeamDiscussion(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &reaction_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  reaction_id qint32 [required]
    */
    virtual void reactions_deleteForTeamDiscussionComment(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number, const qint32 &reaction_id);

    /**
    * @param[in]  reaction_id qint32 [required]
    */
    Q_DECL_DEPRECATED virtual void reactions_deleteLegacy(const qint32 &reaction_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForCommitComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  issue_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForIssue(const QString &owner, const QString &repo, const qint32 &issue_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForIssueComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  comment_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForPullRequestReviewComment(const QString &owner, const QString &repo, const qint32 &comment_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForRelease(const QString &owner, const QString &repo, const qint32 &release_id, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForTeamDiscussionCommentInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const qint32 &comment_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void reactions_listForTeamDiscussionCommentLegacy(const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void reactions_listForTeamDiscussionInOrg(const QString &org, const QString &team_slug, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  content QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void reactions_listForTeamDiscussionLegacy(const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reactions_createForCommitCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForIssueCallback(OAIHttpRequestWorker *worker);
    void reactions_createForIssueCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForPullRequestReviewCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_createForReleaseCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void reactions_createForTeamDiscussionLegacyCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForCommitCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForIssueCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForIssueCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForPullRequestCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForReleaseCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForTeamDiscussionCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteForTeamDiscussionCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_deleteLegacyCallback(OAIHttpRequestWorker *worker);
    void reactions_listForCommitCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForIssueCallback(OAIHttpRequestWorker *worker);
    void reactions_listForIssueCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForPullRequestReviewCommentCallback(OAIHttpRequestWorker *worker);
    void reactions_listForReleaseCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionCommentInOrgCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionCommentLegacyCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionInOrgCallback(OAIHttpRequestWorker *worker);
    void reactions_listForTeamDiscussionLegacyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reactions_createForCommitCommentSignal(OAIReaction summary);
    void reactions_createForIssueSignal(OAIReaction summary);
    void reactions_createForIssueCommentSignal(OAIReaction summary);
    void reactions_createForPullRequestReviewCommentSignal(OAIReaction summary);
    void reactions_createForReleaseSignal(OAIReaction summary);
    void reactions_createForTeamDiscussionCommentInOrgSignal(OAIReaction summary);
    void reactions_createForTeamDiscussionCommentLegacySignal(OAIReaction summary);
    void reactions_createForTeamDiscussionInOrgSignal(OAIReaction summary);
    void reactions_createForTeamDiscussionLegacySignal(OAIReaction summary);
    void reactions_deleteForCommitCommentSignal();
    void reactions_deleteForIssueSignal();
    void reactions_deleteForIssueCommentSignal();
    void reactions_deleteForPullRequestCommentSignal();
    void reactions_deleteForReleaseSignal();
    void reactions_deleteForTeamDiscussionSignal();
    void reactions_deleteForTeamDiscussionCommentSignal();
    void reactions_deleteLegacySignal();
    void reactions_listForCommitCommentSignal(QList<OAIReaction> summary);
    void reactions_listForIssueSignal(QList<OAIReaction> summary);
    void reactions_listForIssueCommentSignal(QList<OAIReaction> summary);
    void reactions_listForPullRequestReviewCommentSignal(QList<OAIReaction> summary);
    void reactions_listForReleaseSignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentInOrgSignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentLegacySignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionInOrgSignal(QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionLegacySignal(QList<OAIReaction> summary);


    void reactions_createForCommitCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForIssueSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForIssueCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForPullRequestReviewCommentSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForReleaseSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_createForTeamDiscussionLegacySignalFull(OAIHttpRequestWorker *worker, OAIReaction summary);
    void reactions_deleteForCommitCommentSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForIssueSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForIssueCommentSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForPullRequestCommentSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForReleaseSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForTeamDiscussionSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteForTeamDiscussionCommentSignalFull(OAIHttpRequestWorker *worker);
    void reactions_deleteLegacySignalFull(OAIHttpRequestWorker *worker);
    void reactions_listForCommitCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForIssueSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForIssueCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForPullRequestReviewCommentSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForReleaseSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionCommentLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionInOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);
    void reactions_listForTeamDiscussionLegacySignalFull(OAIHttpRequestWorker *worker, QList<OAIReaction> summary);

    Q_DECL_DEPRECATED_X("Use reactions_createForCommitCommentSignalError() instead")
    void reactions_createForCommitCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForCommitCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueSignalError() instead")
    void reactions_createForIssueSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueCommentSignalError() instead")
    void reactions_createForIssueCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForPullRequestReviewCommentSignalError() instead")
    void reactions_createForPullRequestReviewCommentSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForPullRequestReviewCommentSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForReleaseSignalError() instead")
    void reactions_createForReleaseSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForReleaseSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentInOrgSignalError() instead")
    void reactions_createForTeamDiscussionCommentInOrgSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentInOrgSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentLegacySignalError() instead")
    void reactions_createForTeamDiscussionCommentLegacySignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentLegacySignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionInOrgSignalError() instead")
    void reactions_createForTeamDiscussionInOrgSignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionInOrgSignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionLegacySignalError() instead")
    void reactions_createForTeamDiscussionLegacySignalE(OAIReaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionLegacySignalError(OAIReaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForCommitCommentSignalError() instead")
    void reactions_deleteForCommitCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForCommitCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForIssueSignalError() instead")
    void reactions_deleteForIssueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForIssueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForIssueCommentSignalError() instead")
    void reactions_deleteForIssueCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForIssueCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForPullRequestCommentSignalError() instead")
    void reactions_deleteForPullRequestCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForPullRequestCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForReleaseSignalError() instead")
    void reactions_deleteForReleaseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForReleaseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForTeamDiscussionSignalError() instead")
    void reactions_deleteForTeamDiscussionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForTeamDiscussionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForTeamDiscussionCommentSignalError() instead")
    void reactions_deleteForTeamDiscussionCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForTeamDiscussionCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteLegacySignalError() instead")
    void reactions_deleteLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForCommitCommentSignalError() instead")
    void reactions_listForCommitCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForCommitCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueSignalError() instead")
    void reactions_listForIssueSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueCommentSignalError() instead")
    void reactions_listForIssueCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForPullRequestReviewCommentSignalError() instead")
    void reactions_listForPullRequestReviewCommentSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForPullRequestReviewCommentSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForReleaseSignalError() instead")
    void reactions_listForReleaseSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForReleaseSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentInOrgSignalError() instead")
    void reactions_listForTeamDiscussionCommentInOrgSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentInOrgSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentLegacySignalError() instead")
    void reactions_listForTeamDiscussionCommentLegacySignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentLegacySignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionInOrgSignalError() instead")
    void reactions_listForTeamDiscussionInOrgSignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionInOrgSignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionLegacySignalError() instead")
    void reactions_listForTeamDiscussionLegacySignalE(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionLegacySignalError(QList<OAIReaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reactions_createForCommitCommentSignalErrorFull() instead")
    void reactions_createForCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueSignalErrorFull() instead")
    void reactions_createForIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForIssueCommentSignalErrorFull() instead")
    void reactions_createForIssueCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForIssueCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForPullRequestReviewCommentSignalErrorFull() instead")
    void reactions_createForPullRequestReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForPullRequestReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForReleaseSignalErrorFull() instead")
    void reactions_createForReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentInOrgSignalErrorFull() instead")
    void reactions_createForTeamDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionCommentLegacySignalErrorFull() instead")
    void reactions_createForTeamDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionInOrgSignalErrorFull() instead")
    void reactions_createForTeamDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_createForTeamDiscussionLegacySignalErrorFull() instead")
    void reactions_createForTeamDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_createForTeamDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForCommitCommentSignalErrorFull() instead")
    void reactions_deleteForCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForIssueSignalErrorFull() instead")
    void reactions_deleteForIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForIssueCommentSignalErrorFull() instead")
    void reactions_deleteForIssueCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForIssueCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForPullRequestCommentSignalErrorFull() instead")
    void reactions_deleteForPullRequestCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForPullRequestCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForReleaseSignalErrorFull() instead")
    void reactions_deleteForReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForTeamDiscussionSignalErrorFull() instead")
    void reactions_deleteForTeamDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForTeamDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteForTeamDiscussionCommentSignalErrorFull() instead")
    void reactions_deleteForTeamDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteForTeamDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_deleteLegacySignalErrorFull() instead")
    void reactions_deleteLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_deleteLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForCommitCommentSignalErrorFull() instead")
    void reactions_listForCommitCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForCommitCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueSignalErrorFull() instead")
    void reactions_listForIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForIssueCommentSignalErrorFull() instead")
    void reactions_listForIssueCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForIssueCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForPullRequestReviewCommentSignalErrorFull() instead")
    void reactions_listForPullRequestReviewCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForPullRequestReviewCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForReleaseSignalErrorFull() instead")
    void reactions_listForReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentInOrgSignalErrorFull() instead")
    void reactions_listForTeamDiscussionCommentInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionCommentLegacySignalErrorFull() instead")
    void reactions_listForTeamDiscussionCommentLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionCommentLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionInOrgSignalErrorFull() instead")
    void reactions_listForTeamDiscussionInOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionInOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactions_listForTeamDiscussionLegacySignalErrorFull() instead")
    void reactions_listForTeamDiscussionLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactions_listForTeamDiscussionLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
