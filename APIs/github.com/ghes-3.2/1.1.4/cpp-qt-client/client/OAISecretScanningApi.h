/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretScanningApi_H
#define OAI_OAISecretScanningApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity_list_public_events_503_response.h"
#include "OAISecret_scanning_alert.h"
#include "OAISecret_scanning_update_alert_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretScanningApi : public QObject {
    Q_OBJECT

public:
    OAISecretScanningApi(const int timeOut = 0);
    ~OAISecretScanningApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  alert_number qint32 [required]
    */
    virtual void secretScanning_getAlert(const QString &owner, const QString &repo, const qint32 &alert_number);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  secret_type QString [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void secretScanning_listAlertsForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secret_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  alert_number qint32 [required]
    * @param[in]  oai_secret_scanning_update_alert_request OAISecret_scanning_update_alert_request [required]
    */
    virtual void secretScanning_updateAlert(const QString &owner, const QString &repo, const qint32 &alert_number, const OAISecret_scanning_update_alert_request &oai_secret_scanning_update_alert_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void secretScanning_getAlertCallback(OAIHttpRequestWorker *worker);
    void secretScanning_listAlertsForRepoCallback(OAIHttpRequestWorker *worker);
    void secretScanning_updateAlertCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void secretScanning_getAlertSignal(OAISecret_scanning_alert summary);
    void secretScanning_listAlertsForRepoSignal(QList<OAISecret_scanning_alert> summary);
    void secretScanning_updateAlertSignal(OAISecret_scanning_alert summary);


    void secretScanning_getAlertSignalFull(OAIHttpRequestWorker *worker, OAISecret_scanning_alert summary);
    void secretScanning_listAlertsForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAISecret_scanning_alert> summary);
    void secretScanning_updateAlertSignalFull(OAIHttpRequestWorker *worker, OAISecret_scanning_alert summary);

    Q_DECL_DEPRECATED_X("Use secretScanning_getAlertSignalError() instead")
    void secretScanning_getAlertSignalE(OAISecret_scanning_alert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_getAlertSignalError(OAISecret_scanning_alert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretScanning_listAlertsForRepoSignalError() instead")
    void secretScanning_listAlertsForRepoSignalE(QList<OAISecret_scanning_alert> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_listAlertsForRepoSignalError(QList<OAISecret_scanning_alert> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretScanning_updateAlertSignalError() instead")
    void secretScanning_updateAlertSignalE(OAISecret_scanning_alert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_updateAlertSignalError(OAISecret_scanning_alert summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use secretScanning_getAlertSignalErrorFull() instead")
    void secretScanning_getAlertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_getAlertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretScanning_listAlertsForRepoSignalErrorFull() instead")
    void secretScanning_listAlertsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_listAlertsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretScanning_updateAlertSignalErrorFull() instead")
    void secretScanning_updateAlertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretScanning_updateAlertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
