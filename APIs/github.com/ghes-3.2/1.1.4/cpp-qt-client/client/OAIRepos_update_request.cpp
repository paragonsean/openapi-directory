/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepos_update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepos_update_request::OAIRepos_update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepos_update_request::OAIRepos_update_request() {
    this->initializeModel();
}

OAIRepos_update_request::~OAIRepos_update_request() {}

void OAIRepos_update_request::initializeModel() {

    m_allow_forking_isSet = false;
    m_allow_forking_isValid = false;

    m_allow_merge_commit_isSet = false;
    m_allow_merge_commit_isValid = false;

    m_allow_rebase_merge_isSet = false;
    m_allow_rebase_merge_isValid = false;

    m_allow_squash_merge_isSet = false;
    m_allow_squash_merge_isValid = false;

    m_allow_update_branch_isSet = false;
    m_allow_update_branch_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_delete_branch_on_merge_isSet = false;
    m_delete_branch_on_merge_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_issues_isSet = false;
    m_has_issues_isValid = false;

    m_has_projects_isSet = false;
    m_has_projects_isValid = false;

    m_has_wiki_isSet = false;
    m_has_wiki_isValid = false;

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_is_template_isSet = false;
    m_is_template_isValid = false;

    m_merge_commit_message_isSet = false;
    m_merge_commit_message_isValid = false;

    m_merge_commit_title_isSet = false;
    m_merge_commit_title_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_security_and_analysis_isSet = false;
    m_security_and_analysis_isValid = false;

    m_squash_merge_commit_message_isSet = false;
    m_squash_merge_commit_message_isValid = false;

    m_squash_merge_commit_title_isSet = false;
    m_squash_merge_commit_title_isValid = false;

    m_use_squash_pr_title_as_default_isSet = false;
    m_use_squash_pr_title_as_default_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIRepos_update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepos_update_request::fromJsonObject(QJsonObject json) {

    m_allow_forking_isValid = ::OpenAPI::fromJsonValue(m_allow_forking, json[QString("allow_forking")]);
    m_allow_forking_isSet = !json[QString("allow_forking")].isNull() && m_allow_forking_isValid;

    m_allow_merge_commit_isValid = ::OpenAPI::fromJsonValue(m_allow_merge_commit, json[QString("allow_merge_commit")]);
    m_allow_merge_commit_isSet = !json[QString("allow_merge_commit")].isNull() && m_allow_merge_commit_isValid;

    m_allow_rebase_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_rebase_merge, json[QString("allow_rebase_merge")]);
    m_allow_rebase_merge_isSet = !json[QString("allow_rebase_merge")].isNull() && m_allow_rebase_merge_isValid;

    m_allow_squash_merge_isValid = ::OpenAPI::fromJsonValue(m_allow_squash_merge, json[QString("allow_squash_merge")]);
    m_allow_squash_merge_isSet = !json[QString("allow_squash_merge")].isNull() && m_allow_squash_merge_isValid;

    m_allow_update_branch_isValid = ::OpenAPI::fromJsonValue(m_allow_update_branch, json[QString("allow_update_branch")]);
    m_allow_update_branch_isSet = !json[QString("allow_update_branch")].isNull() && m_allow_update_branch_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_delete_branch_on_merge_isValid = ::OpenAPI::fromJsonValue(m_delete_branch_on_merge, json[QString("delete_branch_on_merge")]);
    m_delete_branch_on_merge_isSet = !json[QString("delete_branch_on_merge")].isNull() && m_delete_branch_on_merge_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_issues_isValid = ::OpenAPI::fromJsonValue(m_has_issues, json[QString("has_issues")]);
    m_has_issues_isSet = !json[QString("has_issues")].isNull() && m_has_issues_isValid;

    m_has_projects_isValid = ::OpenAPI::fromJsonValue(m_has_projects, json[QString("has_projects")]);
    m_has_projects_isSet = !json[QString("has_projects")].isNull() && m_has_projects_isValid;

    m_has_wiki_isValid = ::OpenAPI::fromJsonValue(m_has_wiki, json[QString("has_wiki")]);
    m_has_wiki_isSet = !json[QString("has_wiki")].isNull() && m_has_wiki_isValid;

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_is_template_isValid = ::OpenAPI::fromJsonValue(m_is_template, json[QString("is_template")]);
    m_is_template_isSet = !json[QString("is_template")].isNull() && m_is_template_isValid;

    m_merge_commit_message_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_message, json[QString("merge_commit_message")]);
    m_merge_commit_message_isSet = !json[QString("merge_commit_message")].isNull() && m_merge_commit_message_isValid;

    m_merge_commit_title_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_title, json[QString("merge_commit_title")]);
    m_merge_commit_title_isSet = !json[QString("merge_commit_title")].isNull() && m_merge_commit_title_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_security_and_analysis_isValid = ::OpenAPI::fromJsonValue(m_security_and_analysis, json[QString("security_and_analysis")]);
    m_security_and_analysis_isSet = !json[QString("security_and_analysis")].isNull() && m_security_and_analysis_isValid;

    m_squash_merge_commit_message_isValid = ::OpenAPI::fromJsonValue(m_squash_merge_commit_message, json[QString("squash_merge_commit_message")]);
    m_squash_merge_commit_message_isSet = !json[QString("squash_merge_commit_message")].isNull() && m_squash_merge_commit_message_isValid;

    m_squash_merge_commit_title_isValid = ::OpenAPI::fromJsonValue(m_squash_merge_commit_title, json[QString("squash_merge_commit_title")]);
    m_squash_merge_commit_title_isSet = !json[QString("squash_merge_commit_title")].isNull() && m_squash_merge_commit_title_isValid;

    m_use_squash_pr_title_as_default_isValid = ::OpenAPI::fromJsonValue(m_use_squash_pr_title_as_default, json[QString("use_squash_pr_title_as_default")]);
    m_use_squash_pr_title_as_default_isSet = !json[QString("use_squash_pr_title_as_default")].isNull() && m_use_squash_pr_title_as_default_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIRepos_update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepos_update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_forking_isSet) {
        obj.insert(QString("allow_forking"), ::OpenAPI::toJsonValue(m_allow_forking));
    }
    if (m_allow_merge_commit_isSet) {
        obj.insert(QString("allow_merge_commit"), ::OpenAPI::toJsonValue(m_allow_merge_commit));
    }
    if (m_allow_rebase_merge_isSet) {
        obj.insert(QString("allow_rebase_merge"), ::OpenAPI::toJsonValue(m_allow_rebase_merge));
    }
    if (m_allow_squash_merge_isSet) {
        obj.insert(QString("allow_squash_merge"), ::OpenAPI::toJsonValue(m_allow_squash_merge));
    }
    if (m_allow_update_branch_isSet) {
        obj.insert(QString("allow_update_branch"), ::OpenAPI::toJsonValue(m_allow_update_branch));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_delete_branch_on_merge_isSet) {
        obj.insert(QString("delete_branch_on_merge"), ::OpenAPI::toJsonValue(m_delete_branch_on_merge));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_issues_isSet) {
        obj.insert(QString("has_issues"), ::OpenAPI::toJsonValue(m_has_issues));
    }
    if (m_has_projects_isSet) {
        obj.insert(QString("has_projects"), ::OpenAPI::toJsonValue(m_has_projects));
    }
    if (m_has_wiki_isSet) {
        obj.insert(QString("has_wiki"), ::OpenAPI::toJsonValue(m_has_wiki));
    }
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_is_template_isSet) {
        obj.insert(QString("is_template"), ::OpenAPI::toJsonValue(m_is_template));
    }
    if (m_merge_commit_message_isSet) {
        obj.insert(QString("merge_commit_message"), ::OpenAPI::toJsonValue(m_merge_commit_message));
    }
    if (m_merge_commit_title_isSet) {
        obj.insert(QString("merge_commit_title"), ::OpenAPI::toJsonValue(m_merge_commit_title));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_security_and_analysis.isSet()) {
        obj.insert(QString("security_and_analysis"), ::OpenAPI::toJsonValue(m_security_and_analysis));
    }
    if (m_squash_merge_commit_message_isSet) {
        obj.insert(QString("squash_merge_commit_message"), ::OpenAPI::toJsonValue(m_squash_merge_commit_message));
    }
    if (m_squash_merge_commit_title_isSet) {
        obj.insert(QString("squash_merge_commit_title"), ::OpenAPI::toJsonValue(m_squash_merge_commit_title));
    }
    if (m_use_squash_pr_title_as_default_isSet) {
        obj.insert(QString("use_squash_pr_title_as_default"), ::OpenAPI::toJsonValue(m_use_squash_pr_title_as_default));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

bool OAIRepos_update_request::isAllowForking() const {
    return m_allow_forking;
}
void OAIRepos_update_request::setAllowForking(const bool &allow_forking) {
    m_allow_forking = allow_forking;
    m_allow_forking_isSet = true;
}

bool OAIRepos_update_request::is_allow_forking_Set() const{
    return m_allow_forking_isSet;
}

bool OAIRepos_update_request::is_allow_forking_Valid() const{
    return m_allow_forking_isValid;
}

bool OAIRepos_update_request::isAllowMergeCommit() const {
    return m_allow_merge_commit;
}
void OAIRepos_update_request::setAllowMergeCommit(const bool &allow_merge_commit) {
    m_allow_merge_commit = allow_merge_commit;
    m_allow_merge_commit_isSet = true;
}

bool OAIRepos_update_request::is_allow_merge_commit_Set() const{
    return m_allow_merge_commit_isSet;
}

bool OAIRepos_update_request::is_allow_merge_commit_Valid() const{
    return m_allow_merge_commit_isValid;
}

bool OAIRepos_update_request::isAllowRebaseMerge() const {
    return m_allow_rebase_merge;
}
void OAIRepos_update_request::setAllowRebaseMerge(const bool &allow_rebase_merge) {
    m_allow_rebase_merge = allow_rebase_merge;
    m_allow_rebase_merge_isSet = true;
}

bool OAIRepos_update_request::is_allow_rebase_merge_Set() const{
    return m_allow_rebase_merge_isSet;
}

bool OAIRepos_update_request::is_allow_rebase_merge_Valid() const{
    return m_allow_rebase_merge_isValid;
}

bool OAIRepos_update_request::isAllowSquashMerge() const {
    return m_allow_squash_merge;
}
void OAIRepos_update_request::setAllowSquashMerge(const bool &allow_squash_merge) {
    m_allow_squash_merge = allow_squash_merge;
    m_allow_squash_merge_isSet = true;
}

bool OAIRepos_update_request::is_allow_squash_merge_Set() const{
    return m_allow_squash_merge_isSet;
}

bool OAIRepos_update_request::is_allow_squash_merge_Valid() const{
    return m_allow_squash_merge_isValid;
}

bool OAIRepos_update_request::isAllowUpdateBranch() const {
    return m_allow_update_branch;
}
void OAIRepos_update_request::setAllowUpdateBranch(const bool &allow_update_branch) {
    m_allow_update_branch = allow_update_branch;
    m_allow_update_branch_isSet = true;
}

bool OAIRepos_update_request::is_allow_update_branch_Set() const{
    return m_allow_update_branch_isSet;
}

bool OAIRepos_update_request::is_allow_update_branch_Valid() const{
    return m_allow_update_branch_isValid;
}

bool OAIRepos_update_request::isArchived() const {
    return m_archived;
}
void OAIRepos_update_request::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIRepos_update_request::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIRepos_update_request::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIRepos_update_request::getDefaultBranch() const {
    return m_default_branch;
}
void OAIRepos_update_request::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIRepos_update_request::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIRepos_update_request::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

bool OAIRepos_update_request::isDeleteBranchOnMerge() const {
    return m_delete_branch_on_merge;
}
void OAIRepos_update_request::setDeleteBranchOnMerge(const bool &delete_branch_on_merge) {
    m_delete_branch_on_merge = delete_branch_on_merge;
    m_delete_branch_on_merge_isSet = true;
}

bool OAIRepos_update_request::is_delete_branch_on_merge_Set() const{
    return m_delete_branch_on_merge_isSet;
}

bool OAIRepos_update_request::is_delete_branch_on_merge_Valid() const{
    return m_delete_branch_on_merge_isValid;
}

QString OAIRepos_update_request::getDescription() const {
    return m_description;
}
void OAIRepos_update_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepos_update_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepos_update_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRepos_update_request::isHasIssues() const {
    return m_has_issues;
}
void OAIRepos_update_request::setHasIssues(const bool &has_issues) {
    m_has_issues = has_issues;
    m_has_issues_isSet = true;
}

bool OAIRepos_update_request::is_has_issues_Set() const{
    return m_has_issues_isSet;
}

bool OAIRepos_update_request::is_has_issues_Valid() const{
    return m_has_issues_isValid;
}

bool OAIRepos_update_request::isHasProjects() const {
    return m_has_projects;
}
void OAIRepos_update_request::setHasProjects(const bool &has_projects) {
    m_has_projects = has_projects;
    m_has_projects_isSet = true;
}

bool OAIRepos_update_request::is_has_projects_Set() const{
    return m_has_projects_isSet;
}

bool OAIRepos_update_request::is_has_projects_Valid() const{
    return m_has_projects_isValid;
}

bool OAIRepos_update_request::isHasWiki() const {
    return m_has_wiki;
}
void OAIRepos_update_request::setHasWiki(const bool &has_wiki) {
    m_has_wiki = has_wiki;
    m_has_wiki_isSet = true;
}

bool OAIRepos_update_request::is_has_wiki_Set() const{
    return m_has_wiki_isSet;
}

bool OAIRepos_update_request::is_has_wiki_Valid() const{
    return m_has_wiki_isValid;
}

QString OAIRepos_update_request::getHomepage() const {
    return m_homepage;
}
void OAIRepos_update_request::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAIRepos_update_request::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAIRepos_update_request::is_homepage_Valid() const{
    return m_homepage_isValid;
}

bool OAIRepos_update_request::isIsTemplate() const {
    return m_is_template;
}
void OAIRepos_update_request::setIsTemplate(const bool &is_template) {
    m_is_template = is_template;
    m_is_template_isSet = true;
}

bool OAIRepos_update_request::is_is_template_Set() const{
    return m_is_template_isSet;
}

bool OAIRepos_update_request::is_is_template_Valid() const{
    return m_is_template_isValid;
}

QString OAIRepos_update_request::getMergeCommitMessage() const {
    return m_merge_commit_message;
}
void OAIRepos_update_request::setMergeCommitMessage(const QString &merge_commit_message) {
    m_merge_commit_message = merge_commit_message;
    m_merge_commit_message_isSet = true;
}

bool OAIRepos_update_request::is_merge_commit_message_Set() const{
    return m_merge_commit_message_isSet;
}

bool OAIRepos_update_request::is_merge_commit_message_Valid() const{
    return m_merge_commit_message_isValid;
}

QString OAIRepos_update_request::getMergeCommitTitle() const {
    return m_merge_commit_title;
}
void OAIRepos_update_request::setMergeCommitTitle(const QString &merge_commit_title) {
    m_merge_commit_title = merge_commit_title;
    m_merge_commit_title_isSet = true;
}

bool OAIRepos_update_request::is_merge_commit_title_Set() const{
    return m_merge_commit_title_isSet;
}

bool OAIRepos_update_request::is_merge_commit_title_Valid() const{
    return m_merge_commit_title_isValid;
}

QString OAIRepos_update_request::getName() const {
    return m_name;
}
void OAIRepos_update_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepos_update_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepos_update_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIRepos_update_request::isRPrivate() const {
    return m_r_private;
}
void OAIRepos_update_request::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIRepos_update_request::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIRepos_update_request::is_r_private_Valid() const{
    return m_r_private_isValid;
}

OAIRepos_update_request_security_and_analysis OAIRepos_update_request::getSecurityAndAnalysis() const {
    return m_security_and_analysis;
}
void OAIRepos_update_request::setSecurityAndAnalysis(const OAIRepos_update_request_security_and_analysis &security_and_analysis) {
    m_security_and_analysis = security_and_analysis;
    m_security_and_analysis_isSet = true;
}

bool OAIRepos_update_request::is_security_and_analysis_Set() const{
    return m_security_and_analysis_isSet;
}

bool OAIRepos_update_request::is_security_and_analysis_Valid() const{
    return m_security_and_analysis_isValid;
}

QString OAIRepos_update_request::getSquashMergeCommitMessage() const {
    return m_squash_merge_commit_message;
}
void OAIRepos_update_request::setSquashMergeCommitMessage(const QString &squash_merge_commit_message) {
    m_squash_merge_commit_message = squash_merge_commit_message;
    m_squash_merge_commit_message_isSet = true;
}

bool OAIRepos_update_request::is_squash_merge_commit_message_Set() const{
    return m_squash_merge_commit_message_isSet;
}

bool OAIRepos_update_request::is_squash_merge_commit_message_Valid() const{
    return m_squash_merge_commit_message_isValid;
}

QString OAIRepos_update_request::getSquashMergeCommitTitle() const {
    return m_squash_merge_commit_title;
}
void OAIRepos_update_request::setSquashMergeCommitTitle(const QString &squash_merge_commit_title) {
    m_squash_merge_commit_title = squash_merge_commit_title;
    m_squash_merge_commit_title_isSet = true;
}

bool OAIRepos_update_request::is_squash_merge_commit_title_Set() const{
    return m_squash_merge_commit_title_isSet;
}

bool OAIRepos_update_request::is_squash_merge_commit_title_Valid() const{
    return m_squash_merge_commit_title_isValid;
}

bool OAIRepos_update_request::isUseSquashPrTitleAsDefault() const {
    return m_use_squash_pr_title_as_default;
}
void OAIRepos_update_request::setUseSquashPrTitleAsDefault(const bool &use_squash_pr_title_as_default) {
    m_use_squash_pr_title_as_default = use_squash_pr_title_as_default;
    m_use_squash_pr_title_as_default_isSet = true;
}

bool OAIRepos_update_request::is_use_squash_pr_title_as_default_Set() const{
    return m_use_squash_pr_title_as_default_isSet;
}

bool OAIRepos_update_request::is_use_squash_pr_title_as_default_Valid() const{
    return m_use_squash_pr_title_as_default_isValid;
}

QString OAIRepos_update_request::getVisibility() const {
    return m_visibility;
}
void OAIRepos_update_request::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIRepos_update_request::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIRepos_update_request::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIRepos_update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_forking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_merge_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_rebase_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_squash_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_update_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_branch_on_merge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_and_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_squash_merge_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_squash_merge_commit_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_squash_pr_title_as_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepos_update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
