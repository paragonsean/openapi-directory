/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_full.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_full::OAITeam_full(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_full::OAITeam_full() {
    this->initializeModel();
}

OAITeam_full::~OAITeam_full() {}

void OAITeam_full::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ldap_dn_isSet = false;
    m_ldap_dn_isValid = false;

    m_members_count_isSet = false;
    m_members_count_isValid = false;

    m_members_url_isSet = false;
    m_members_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_repos_count_isSet = false;
    m_repos_count_isValid = false;

    m_repositories_url_isSet = false;
    m_repositories_url_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITeam_full::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_full::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ldap_dn_isValid = ::OpenAPI::fromJsonValue(m_ldap_dn, json[QString("ldap_dn")]);
    m_ldap_dn_isSet = !json[QString("ldap_dn")].isNull() && m_ldap_dn_isValid;

    m_members_count_isValid = ::OpenAPI::fromJsonValue(m_members_count, json[QString("members_count")]);
    m_members_count_isSet = !json[QString("members_count")].isNull() && m_members_count_isValid;

    m_members_url_isValid = ::OpenAPI::fromJsonValue(m_members_url, json[QString("members_url")]);
    m_members_url_isSet = !json[QString("members_url")].isNull() && m_members_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_repos_count_isValid = ::OpenAPI::fromJsonValue(m_repos_count, json[QString("repos_count")]);
    m_repos_count_isSet = !json[QString("repos_count")].isNull() && m_repos_count_isValid;

    m_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_repositories_url, json[QString("repositories_url")]);
    m_repositories_url_isSet = !json[QString("repositories_url")].isNull() && m_repositories_url_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITeam_full::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_full::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ldap_dn_isSet) {
        obj.insert(QString("ldap_dn"), ::OpenAPI::toJsonValue(m_ldap_dn));
    }
    if (m_members_count_isSet) {
        obj.insert(QString("members_count"), ::OpenAPI::toJsonValue(m_members_count));
    }
    if (m_members_url_isSet) {
        obj.insert(QString("members_url"), ::OpenAPI::toJsonValue(m_members_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_repos_count_isSet) {
        obj.insert(QString("repos_count"), ::OpenAPI::toJsonValue(m_repos_count));
    }
    if (m_repositories_url_isSet) {
        obj.insert(QString("repositories_url"), ::OpenAPI::toJsonValue(m_repositories_url));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAITeam_full::getCreatedAt() const {
    return m_created_at;
}
void OAITeam_full::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITeam_full::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITeam_full::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITeam_full::getDescription() const {
    return m_description;
}
void OAITeam_full::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITeam_full::is_description_Set() const{
    return m_description_isSet;
}

bool OAITeam_full::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITeam_full::getHtmlUrl() const {
    return m_html_url;
}
void OAITeam_full::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITeam_full::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITeam_full::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAITeam_full::getId() const {
    return m_id;
}
void OAITeam_full::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeam_full::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeam_full::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITeam_full::getLdapDn() const {
    return m_ldap_dn;
}
void OAITeam_full::setLdapDn(const QString &ldap_dn) {
    m_ldap_dn = ldap_dn;
    m_ldap_dn_isSet = true;
}

bool OAITeam_full::is_ldap_dn_Set() const{
    return m_ldap_dn_isSet;
}

bool OAITeam_full::is_ldap_dn_Valid() const{
    return m_ldap_dn_isValid;
}

qint32 OAITeam_full::getMembersCount() const {
    return m_members_count;
}
void OAITeam_full::setMembersCount(const qint32 &members_count) {
    m_members_count = members_count;
    m_members_count_isSet = true;
}

bool OAITeam_full::is_members_count_Set() const{
    return m_members_count_isSet;
}

bool OAITeam_full::is_members_count_Valid() const{
    return m_members_count_isValid;
}

QString OAITeam_full::getMembersUrl() const {
    return m_members_url;
}
void OAITeam_full::setMembersUrl(const QString &members_url) {
    m_members_url = members_url;
    m_members_url_isSet = true;
}

bool OAITeam_full::is_members_url_Set() const{
    return m_members_url_isSet;
}

bool OAITeam_full::is_members_url_Valid() const{
    return m_members_url_isValid;
}

QString OAITeam_full::getName() const {
    return m_name;
}
void OAITeam_full::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam_full::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam_full::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeam_full::getNodeId() const {
    return m_node_id;
}
void OAITeam_full::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITeam_full::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITeam_full::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAITeam_organization OAITeam_full::getOrganization() const {
    return m_organization;
}
void OAITeam_full::setOrganization(const OAITeam_organization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAITeam_full::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAITeam_full::is_organization_Valid() const{
    return m_organization_isValid;
}

OAINullable_team_simple OAITeam_full::getParent() const {
    return m_parent;
}
void OAITeam_full::setParent(const OAINullable_team_simple &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAITeam_full::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAITeam_full::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAITeam_full::getPermission() const {
    return m_permission;
}
void OAITeam_full::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAITeam_full::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAITeam_full::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAITeam_full::getPrivacy() const {
    return m_privacy;
}
void OAITeam_full::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAITeam_full::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAITeam_full::is_privacy_Valid() const{
    return m_privacy_isValid;
}

qint32 OAITeam_full::getReposCount() const {
    return m_repos_count;
}
void OAITeam_full::setReposCount(const qint32 &repos_count) {
    m_repos_count = repos_count;
    m_repos_count_isSet = true;
}

bool OAITeam_full::is_repos_count_Set() const{
    return m_repos_count_isSet;
}

bool OAITeam_full::is_repos_count_Valid() const{
    return m_repos_count_isValid;
}

QString OAITeam_full::getRepositoriesUrl() const {
    return m_repositories_url;
}
void OAITeam_full::setRepositoriesUrl(const QString &repositories_url) {
    m_repositories_url = repositories_url;
    m_repositories_url_isSet = true;
}

bool OAITeam_full::is_repositories_url_Set() const{
    return m_repositories_url_isSet;
}

bool OAITeam_full::is_repositories_url_Valid() const{
    return m_repositories_url_isValid;
}

QString OAITeam_full::getSlug() const {
    return m_slug;
}
void OAITeam_full::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAITeam_full::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAITeam_full::is_slug_Valid() const{
    return m_slug_isValid;
}

QDateTime OAITeam_full::getUpdatedAt() const {
    return m_updated_at;
}
void OAITeam_full::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITeam_full::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITeam_full::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAITeam_full::getUrl() const {
    return m_url;
}
void OAITeam_full::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITeam_full::is_url_Set() const{
    return m_url_isSet;
}

bool OAITeam_full::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITeam_full::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repos_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_full::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_html_url_isValid && m_id_isValid && m_members_count_isValid && m_members_url_isValid && m_name_isValid && m_node_id_isValid && m_organization_isValid && m_permission_isValid && m_repos_count_isValid && m_repositories_url_isValid && m_slug_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
