/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPages_https_certificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPages_https_certificate::OAIPages_https_certificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPages_https_certificate::OAIPages_https_certificate() {
    this->initializeModel();
}

OAIPages_https_certificate::~OAIPages_https_certificate() {}

void OAIPages_https_certificate::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPages_https_certificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPages_https_certificate::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPages_https_certificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPages_https_certificate::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIPages_https_certificate::getDescription() const {
    return m_description;
}
void OAIPages_https_certificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPages_https_certificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPages_https_certificate::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIPages_https_certificate::getDomains() const {
    return m_domains;
}
void OAIPages_https_certificate::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIPages_https_certificate::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIPages_https_certificate::is_domains_Valid() const{
    return m_domains_isValid;
}

QDate OAIPages_https_certificate::getExpiresAt() const {
    return m_expires_at;
}
void OAIPages_https_certificate::setExpiresAt(const QDate &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIPages_https_certificate::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIPages_https_certificate::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIPages_https_certificate::getState() const {
    return m_state;
}
void OAIPages_https_certificate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPages_https_certificate::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPages_https_certificate::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPages_https_certificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPages_https_certificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_domains_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
