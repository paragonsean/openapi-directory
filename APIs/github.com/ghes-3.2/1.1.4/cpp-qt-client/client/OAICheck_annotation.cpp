/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_annotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_annotation::OAICheck_annotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_annotation::OAICheck_annotation() {
    this->initializeModel();
}

OAICheck_annotation::~OAICheck_annotation() {}

void OAICheck_annotation::initializeModel() {

    m_annotation_level_isSet = false;
    m_annotation_level_isValid = false;

    m_blob_href_isSet = false;
    m_blob_href_isValid = false;

    m_end_column_isSet = false;
    m_end_column_isValid = false;

    m_end_line_isSet = false;
    m_end_line_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_raw_details_isSet = false;
    m_raw_details_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_line_isSet = false;
    m_start_line_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICheck_annotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_annotation::fromJsonObject(QJsonObject json) {

    m_annotation_level_isValid = ::OpenAPI::fromJsonValue(m_annotation_level, json[QString("annotation_level")]);
    m_annotation_level_isSet = !json[QString("annotation_level")].isNull() && m_annotation_level_isValid;

    m_blob_href_isValid = ::OpenAPI::fromJsonValue(m_blob_href, json[QString("blob_href")]);
    m_blob_href_isSet = !json[QString("blob_href")].isNull() && m_blob_href_isValid;

    m_end_column_isValid = ::OpenAPI::fromJsonValue(m_end_column, json[QString("end_column")]);
    m_end_column_isSet = !json[QString("end_column")].isNull() && m_end_column_isValid;

    m_end_line_isValid = ::OpenAPI::fromJsonValue(m_end_line, json[QString("end_line")]);
    m_end_line_isSet = !json[QString("end_line")].isNull() && m_end_line_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_raw_details_isValid = ::OpenAPI::fromJsonValue(m_raw_details, json[QString("raw_details")]);
    m_raw_details_isSet = !json[QString("raw_details")].isNull() && m_raw_details_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("start_column")]);
    m_start_column_isSet = !json[QString("start_column")].isNull() && m_start_column_isValid;

    m_start_line_isValid = ::OpenAPI::fromJsonValue(m_start_line, json[QString("start_line")]);
    m_start_line_isSet = !json[QString("start_line")].isNull() && m_start_line_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICheck_annotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_annotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_level_isSet) {
        obj.insert(QString("annotation_level"), ::OpenAPI::toJsonValue(m_annotation_level));
    }
    if (m_blob_href_isSet) {
        obj.insert(QString("blob_href"), ::OpenAPI::toJsonValue(m_blob_href));
    }
    if (m_end_column_isSet) {
        obj.insert(QString("end_column"), ::OpenAPI::toJsonValue(m_end_column));
    }
    if (m_end_line_isSet) {
        obj.insert(QString("end_line"), ::OpenAPI::toJsonValue(m_end_line));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_raw_details_isSet) {
        obj.insert(QString("raw_details"), ::OpenAPI::toJsonValue(m_raw_details));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("start_column"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_line_isSet) {
        obj.insert(QString("start_line"), ::OpenAPI::toJsonValue(m_start_line));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAICheck_annotation::getAnnotationLevel() const {
    return m_annotation_level;
}
void OAICheck_annotation::setAnnotationLevel(const QString &annotation_level) {
    m_annotation_level = annotation_level;
    m_annotation_level_isSet = true;
}

bool OAICheck_annotation::is_annotation_level_Set() const{
    return m_annotation_level_isSet;
}

bool OAICheck_annotation::is_annotation_level_Valid() const{
    return m_annotation_level_isValid;
}

QString OAICheck_annotation::getBlobHref() const {
    return m_blob_href;
}
void OAICheck_annotation::setBlobHref(const QString &blob_href) {
    m_blob_href = blob_href;
    m_blob_href_isSet = true;
}

bool OAICheck_annotation::is_blob_href_Set() const{
    return m_blob_href_isSet;
}

bool OAICheck_annotation::is_blob_href_Valid() const{
    return m_blob_href_isValid;
}

qint32 OAICheck_annotation::getEndColumn() const {
    return m_end_column;
}
void OAICheck_annotation::setEndColumn(const qint32 &end_column) {
    m_end_column = end_column;
    m_end_column_isSet = true;
}

bool OAICheck_annotation::is_end_column_Set() const{
    return m_end_column_isSet;
}

bool OAICheck_annotation::is_end_column_Valid() const{
    return m_end_column_isValid;
}

qint32 OAICheck_annotation::getEndLine() const {
    return m_end_line;
}
void OAICheck_annotation::setEndLine(const qint32 &end_line) {
    m_end_line = end_line;
    m_end_line_isSet = true;
}

bool OAICheck_annotation::is_end_line_Set() const{
    return m_end_line_isSet;
}

bool OAICheck_annotation::is_end_line_Valid() const{
    return m_end_line_isValid;
}

QString OAICheck_annotation::getMessage() const {
    return m_message;
}
void OAICheck_annotation::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICheck_annotation::is_message_Set() const{
    return m_message_isSet;
}

bool OAICheck_annotation::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICheck_annotation::getPath() const {
    return m_path;
}
void OAICheck_annotation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICheck_annotation::is_path_Set() const{
    return m_path_isSet;
}

bool OAICheck_annotation::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICheck_annotation::getRawDetails() const {
    return m_raw_details;
}
void OAICheck_annotation::setRawDetails(const QString &raw_details) {
    m_raw_details = raw_details;
    m_raw_details_isSet = true;
}

bool OAICheck_annotation::is_raw_details_Set() const{
    return m_raw_details_isSet;
}

bool OAICheck_annotation::is_raw_details_Valid() const{
    return m_raw_details_isValid;
}

qint32 OAICheck_annotation::getStartColumn() const {
    return m_start_column;
}
void OAICheck_annotation::setStartColumn(const qint32 &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAICheck_annotation::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAICheck_annotation::is_start_column_Valid() const{
    return m_start_column_isValid;
}

qint32 OAICheck_annotation::getStartLine() const {
    return m_start_line;
}
void OAICheck_annotation::setStartLine(const qint32 &start_line) {
    m_start_line = start_line;
    m_start_line_isSet = true;
}

bool OAICheck_annotation::is_start_line_Set() const{
    return m_start_line_isSet;
}

bool OAICheck_annotation::is_start_line_Valid() const{
    return m_start_line_isValid;
}

QString OAICheck_annotation::getTitle() const {
    return m_title;
}
void OAICheck_annotation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICheck_annotation::is_title_Set() const{
    return m_title_isSet;
}

bool OAICheck_annotation::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICheck_annotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_annotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_annotation_level_isValid && m_blob_href_isValid && m_end_column_isValid && m_end_line_isValid && m_message_isValid && m_path_isValid && m_raw_details_isValid && m_start_column_isValid && m_start_line_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
