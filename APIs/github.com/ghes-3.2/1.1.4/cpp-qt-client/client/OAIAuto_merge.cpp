/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuto_merge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuto_merge::OAIAuto_merge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuto_merge::OAIAuto_merge() {
    this->initializeModel();
}

OAIAuto_merge::~OAIAuto_merge() {}

void OAIAuto_merge::initializeModel() {

    m_commit_message_isSet = false;
    m_commit_message_isValid = false;

    m_commit_title_isSet = false;
    m_commit_title_isValid = false;

    m_enabled_by_isSet = false;
    m_enabled_by_isValid = false;

    m_merge_method_isSet = false;
    m_merge_method_isValid = false;
}

void OAIAuto_merge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuto_merge::fromJsonObject(QJsonObject json) {

    m_commit_message_isValid = ::OpenAPI::fromJsonValue(m_commit_message, json[QString("commit_message")]);
    m_commit_message_isSet = !json[QString("commit_message")].isNull() && m_commit_message_isValid;

    m_commit_title_isValid = ::OpenAPI::fromJsonValue(m_commit_title, json[QString("commit_title")]);
    m_commit_title_isSet = !json[QString("commit_title")].isNull() && m_commit_title_isValid;

    m_enabled_by_isValid = ::OpenAPI::fromJsonValue(m_enabled_by, json[QString("enabled_by")]);
    m_enabled_by_isSet = !json[QString("enabled_by")].isNull() && m_enabled_by_isValid;

    m_merge_method_isValid = ::OpenAPI::fromJsonValue(m_merge_method, json[QString("merge_method")]);
    m_merge_method_isSet = !json[QString("merge_method")].isNull() && m_merge_method_isValid;
}

QString OAIAuto_merge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuto_merge::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_message_isSet) {
        obj.insert(QString("commit_message"), ::OpenAPI::toJsonValue(m_commit_message));
    }
    if (m_commit_title_isSet) {
        obj.insert(QString("commit_title"), ::OpenAPI::toJsonValue(m_commit_title));
    }
    if (m_enabled_by.isSet()) {
        obj.insert(QString("enabled_by"), ::OpenAPI::toJsonValue(m_enabled_by));
    }
    if (m_merge_method_isSet) {
        obj.insert(QString("merge_method"), ::OpenAPI::toJsonValue(m_merge_method));
    }
    return obj;
}

QString OAIAuto_merge::getCommitMessage() const {
    return m_commit_message;
}
void OAIAuto_merge::setCommitMessage(const QString &commit_message) {
    m_commit_message = commit_message;
    m_commit_message_isSet = true;
}

bool OAIAuto_merge::is_commit_message_Set() const{
    return m_commit_message_isSet;
}

bool OAIAuto_merge::is_commit_message_Valid() const{
    return m_commit_message_isValid;
}

QString OAIAuto_merge::getCommitTitle() const {
    return m_commit_title;
}
void OAIAuto_merge::setCommitTitle(const QString &commit_title) {
    m_commit_title = commit_title;
    m_commit_title_isSet = true;
}

bool OAIAuto_merge::is_commit_title_Set() const{
    return m_commit_title_isSet;
}

bool OAIAuto_merge::is_commit_title_Valid() const{
    return m_commit_title_isValid;
}

OAISimple_user OAIAuto_merge::getEnabledBy() const {
    return m_enabled_by;
}
void OAIAuto_merge::setEnabledBy(const OAISimple_user &enabled_by) {
    m_enabled_by = enabled_by;
    m_enabled_by_isSet = true;
}

bool OAIAuto_merge::is_enabled_by_Set() const{
    return m_enabled_by_isSet;
}

bool OAIAuto_merge::is_enabled_by_Valid() const{
    return m_enabled_by_isValid;
}

QString OAIAuto_merge::getMergeMethod() const {
    return m_merge_method;
}
void OAIAuto_merge::setMergeMethod(const QString &merge_method) {
    m_merge_method = merge_method;
    m_merge_method_isSet = true;
}

bool OAIAuto_merge::is_merge_method_Set() const{
    return m_merge_method_isSet;
}

bool OAIAuto_merge::is_merge_method_Valid() const{
    return m_merge_method_isValid;
}

bool OAIAuto_merge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuto_merge::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commit_message_isValid && m_commit_title_isValid && m_enabled_by_isValid && m_merge_method_isValid && true;
}

} // namespace OpenAPI
