/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_organization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_organization::OAITeam_organization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_organization::OAITeam_organization() {
    this->initializeModel();
}

OAITeam_organization::~OAITeam_organization() {}

void OAITeam_organization::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_billing_email_isSet = false;
    m_billing_email_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_repository_permission_isSet = false;
    m_default_repository_permission_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disk_usage_isSet = false;
    m_disk_usage_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_following_isSet = false;
    m_following_isValid = false;

    m_has_organization_projects_isSet = false;
    m_has_organization_projects_isValid = false;

    m_has_repository_projects_isSet = false;
    m_has_repository_projects_isValid = false;

    m_hooks_url_isSet = false;
    m_hooks_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_verified_isSet = false;
    m_is_verified_isValid = false;

    m_issues_url_isSet = false;
    m_issues_url_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_members_allowed_repository_creation_type_isSet = false;
    m_members_allowed_repository_creation_type_isValid = false;

    m_members_can_create_internal_repositories_isSet = false;
    m_members_can_create_internal_repositories_isValid = false;

    m_members_can_create_pages_isSet = false;
    m_members_can_create_pages_isValid = false;

    m_members_can_create_private_pages_isSet = false;
    m_members_can_create_private_pages_isValid = false;

    m_members_can_create_private_repositories_isSet = false;
    m_members_can_create_private_repositories_isValid = false;

    m_members_can_create_public_pages_isSet = false;
    m_members_can_create_public_pages_isValid = false;

    m_members_can_create_public_repositories_isSet = false;
    m_members_can_create_public_repositories_isValid = false;

    m_members_can_create_repositories_isSet = false;
    m_members_can_create_repositories_isValid = false;

    m_members_url_isSet = false;
    m_members_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_owned_private_repos_isSet = false;
    m_owned_private_repos_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_private_gists_isSet = false;
    m_private_gists_isValid = false;

    m_public_gists_isSet = false;
    m_public_gists_isValid = false;

    m_public_members_url_isSet = false;
    m_public_members_url_isValid = false;

    m_public_repos_isSet = false;
    m_public_repos_isValid = false;

    m_repos_url_isSet = false;
    m_repos_url_isValid = false;

    m_total_private_repos_isSet = false;
    m_total_private_repos_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;

    m_two_factor_requirement_enabled_isSet = false;
    m_two_factor_requirement_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITeam_organization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_organization::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_billing_email_isValid = ::OpenAPI::fromJsonValue(m_billing_email, json[QString("billing_email")]);
    m_billing_email_isSet = !json[QString("billing_email")].isNull() && m_billing_email_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_repository_permission_isValid = ::OpenAPI::fromJsonValue(m_default_repository_permission, json[QString("default_repository_permission")]);
    m_default_repository_permission_isSet = !json[QString("default_repository_permission")].isNull() && m_default_repository_permission_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disk_usage_isValid = ::OpenAPI::fromJsonValue(m_disk_usage, json[QString("disk_usage")]);
    m_disk_usage_isSet = !json[QString("disk_usage")].isNull() && m_disk_usage_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_following_isValid = ::OpenAPI::fromJsonValue(m_following, json[QString("following")]);
    m_following_isSet = !json[QString("following")].isNull() && m_following_isValid;

    m_has_organization_projects_isValid = ::OpenAPI::fromJsonValue(m_has_organization_projects, json[QString("has_organization_projects")]);
    m_has_organization_projects_isSet = !json[QString("has_organization_projects")].isNull() && m_has_organization_projects_isValid;

    m_has_repository_projects_isValid = ::OpenAPI::fromJsonValue(m_has_repository_projects, json[QString("has_repository_projects")]);
    m_has_repository_projects_isSet = !json[QString("has_repository_projects")].isNull() && m_has_repository_projects_isValid;

    m_hooks_url_isValid = ::OpenAPI::fromJsonValue(m_hooks_url, json[QString("hooks_url")]);
    m_hooks_url_isSet = !json[QString("hooks_url")].isNull() && m_hooks_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_verified_isValid = ::OpenAPI::fromJsonValue(m_is_verified, json[QString("is_verified")]);
    m_is_verified_isSet = !json[QString("is_verified")].isNull() && m_is_verified_isValid;

    m_issues_url_isValid = ::OpenAPI::fromJsonValue(m_issues_url, json[QString("issues_url")]);
    m_issues_url_isSet = !json[QString("issues_url")].isNull() && m_issues_url_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_members_allowed_repository_creation_type_isValid = ::OpenAPI::fromJsonValue(m_members_allowed_repository_creation_type, json[QString("members_allowed_repository_creation_type")]);
    m_members_allowed_repository_creation_type_isSet = !json[QString("members_allowed_repository_creation_type")].isNull() && m_members_allowed_repository_creation_type_isValid;

    m_members_can_create_internal_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_internal_repositories, json[QString("members_can_create_internal_repositories")]);
    m_members_can_create_internal_repositories_isSet = !json[QString("members_can_create_internal_repositories")].isNull() && m_members_can_create_internal_repositories_isValid;

    m_members_can_create_pages_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_pages, json[QString("members_can_create_pages")]);
    m_members_can_create_pages_isSet = !json[QString("members_can_create_pages")].isNull() && m_members_can_create_pages_isValid;

    m_members_can_create_private_pages_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_private_pages, json[QString("members_can_create_private_pages")]);
    m_members_can_create_private_pages_isSet = !json[QString("members_can_create_private_pages")].isNull() && m_members_can_create_private_pages_isValid;

    m_members_can_create_private_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_private_repositories, json[QString("members_can_create_private_repositories")]);
    m_members_can_create_private_repositories_isSet = !json[QString("members_can_create_private_repositories")].isNull() && m_members_can_create_private_repositories_isValid;

    m_members_can_create_public_pages_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_public_pages, json[QString("members_can_create_public_pages")]);
    m_members_can_create_public_pages_isSet = !json[QString("members_can_create_public_pages")].isNull() && m_members_can_create_public_pages_isValid;

    m_members_can_create_public_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_public_repositories, json[QString("members_can_create_public_repositories")]);
    m_members_can_create_public_repositories_isSet = !json[QString("members_can_create_public_repositories")].isNull() && m_members_can_create_public_repositories_isValid;

    m_members_can_create_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_repositories, json[QString("members_can_create_repositories")]);
    m_members_can_create_repositories_isSet = !json[QString("members_can_create_repositories")].isNull() && m_members_can_create_repositories_isValid;

    m_members_url_isValid = ::OpenAPI::fromJsonValue(m_members_url, json[QString("members_url")]);
    m_members_url_isSet = !json[QString("members_url")].isNull() && m_members_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_owned_private_repos_isValid = ::OpenAPI::fromJsonValue(m_owned_private_repos, json[QString("owned_private_repos")]);
    m_owned_private_repos_isSet = !json[QString("owned_private_repos")].isNull() && m_owned_private_repos_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_private_gists_isValid = ::OpenAPI::fromJsonValue(m_private_gists, json[QString("private_gists")]);
    m_private_gists_isSet = !json[QString("private_gists")].isNull() && m_private_gists_isValid;

    m_public_gists_isValid = ::OpenAPI::fromJsonValue(m_public_gists, json[QString("public_gists")]);
    m_public_gists_isSet = !json[QString("public_gists")].isNull() && m_public_gists_isValid;

    m_public_members_url_isValid = ::OpenAPI::fromJsonValue(m_public_members_url, json[QString("public_members_url")]);
    m_public_members_url_isSet = !json[QString("public_members_url")].isNull() && m_public_members_url_isValid;

    m_public_repos_isValid = ::OpenAPI::fromJsonValue(m_public_repos, json[QString("public_repos")]);
    m_public_repos_isSet = !json[QString("public_repos")].isNull() && m_public_repos_isValid;

    m_repos_url_isValid = ::OpenAPI::fromJsonValue(m_repos_url, json[QString("repos_url")]);
    m_repos_url_isSet = !json[QString("repos_url")].isNull() && m_repos_url_isValid;

    m_total_private_repos_isValid = ::OpenAPI::fromJsonValue(m_total_private_repos, json[QString("total_private_repos")]);
    m_total_private_repos_isSet = !json[QString("total_private_repos")].isNull() && m_total_private_repos_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;

    m_two_factor_requirement_enabled_isValid = ::OpenAPI::fromJsonValue(m_two_factor_requirement_enabled, json[QString("two_factor_requirement_enabled")]);
    m_two_factor_requirement_enabled_isSet = !json[QString("two_factor_requirement_enabled")].isNull() && m_two_factor_requirement_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITeam_organization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_organization::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_billing_email_isSet) {
        obj.insert(QString("billing_email"), ::OpenAPI::toJsonValue(m_billing_email));
    }
    if (m_blog_isSet) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_collaborators_isSet) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_repository_permission_isSet) {
        obj.insert(QString("default_repository_permission"), ::OpenAPI::toJsonValue(m_default_repository_permission));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disk_usage_isSet) {
        obj.insert(QString("disk_usage"), ::OpenAPI::toJsonValue(m_disk_usage));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_followers_isSet) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_following_isSet) {
        obj.insert(QString("following"), ::OpenAPI::toJsonValue(m_following));
    }
    if (m_has_organization_projects_isSet) {
        obj.insert(QString("has_organization_projects"), ::OpenAPI::toJsonValue(m_has_organization_projects));
    }
    if (m_has_repository_projects_isSet) {
        obj.insert(QString("has_repository_projects"), ::OpenAPI::toJsonValue(m_has_repository_projects));
    }
    if (m_hooks_url_isSet) {
        obj.insert(QString("hooks_url"), ::OpenAPI::toJsonValue(m_hooks_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_verified_isSet) {
        obj.insert(QString("is_verified"), ::OpenAPI::toJsonValue(m_is_verified));
    }
    if (m_issues_url_isSet) {
        obj.insert(QString("issues_url"), ::OpenAPI::toJsonValue(m_issues_url));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_members_allowed_repository_creation_type_isSet) {
        obj.insert(QString("members_allowed_repository_creation_type"), ::OpenAPI::toJsonValue(m_members_allowed_repository_creation_type));
    }
    if (m_members_can_create_internal_repositories_isSet) {
        obj.insert(QString("members_can_create_internal_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_internal_repositories));
    }
    if (m_members_can_create_pages_isSet) {
        obj.insert(QString("members_can_create_pages"), ::OpenAPI::toJsonValue(m_members_can_create_pages));
    }
    if (m_members_can_create_private_pages_isSet) {
        obj.insert(QString("members_can_create_private_pages"), ::OpenAPI::toJsonValue(m_members_can_create_private_pages));
    }
    if (m_members_can_create_private_repositories_isSet) {
        obj.insert(QString("members_can_create_private_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_private_repositories));
    }
    if (m_members_can_create_public_pages_isSet) {
        obj.insert(QString("members_can_create_public_pages"), ::OpenAPI::toJsonValue(m_members_can_create_public_pages));
    }
    if (m_members_can_create_public_repositories_isSet) {
        obj.insert(QString("members_can_create_public_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_public_repositories));
    }
    if (m_members_can_create_repositories_isSet) {
        obj.insert(QString("members_can_create_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_repositories));
    }
    if (m_members_url_isSet) {
        obj.insert(QString("members_url"), ::OpenAPI::toJsonValue(m_members_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_owned_private_repos_isSet) {
        obj.insert(QString("owned_private_repos"), ::OpenAPI::toJsonValue(m_owned_private_repos));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_private_gists_isSet) {
        obj.insert(QString("private_gists"), ::OpenAPI::toJsonValue(m_private_gists));
    }
    if (m_public_gists_isSet) {
        obj.insert(QString("public_gists"), ::OpenAPI::toJsonValue(m_public_gists));
    }
    if (m_public_members_url_isSet) {
        obj.insert(QString("public_members_url"), ::OpenAPI::toJsonValue(m_public_members_url));
    }
    if (m_public_repos_isSet) {
        obj.insert(QString("public_repos"), ::OpenAPI::toJsonValue(m_public_repos));
    }
    if (m_repos_url_isSet) {
        obj.insert(QString("repos_url"), ::OpenAPI::toJsonValue(m_repos_url));
    }
    if (m_total_private_repos_isSet) {
        obj.insert(QString("total_private_repos"), ::OpenAPI::toJsonValue(m_total_private_repos));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    if (m_two_factor_requirement_enabled_isSet) {
        obj.insert(QString("two_factor_requirement_enabled"), ::OpenAPI::toJsonValue(m_two_factor_requirement_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITeam_organization::getAvatarUrl() const {
    return m_avatar_url;
}
void OAITeam_organization::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAITeam_organization::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAITeam_organization::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAITeam_organization::getBillingEmail() const {
    return m_billing_email;
}
void OAITeam_organization::setBillingEmail(const QString &billing_email) {
    m_billing_email = billing_email;
    m_billing_email_isSet = true;
}

bool OAITeam_organization::is_billing_email_Set() const{
    return m_billing_email_isSet;
}

bool OAITeam_organization::is_billing_email_Valid() const{
    return m_billing_email_isValid;
}

QString OAITeam_organization::getBlog() const {
    return m_blog;
}
void OAITeam_organization::setBlog(const QString &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAITeam_organization::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAITeam_organization::is_blog_Valid() const{
    return m_blog_isValid;
}

qint32 OAITeam_organization::getCollaborators() const {
    return m_collaborators;
}
void OAITeam_organization::setCollaborators(const qint32 &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAITeam_organization::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAITeam_organization::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QString OAITeam_organization::getCompany() const {
    return m_company;
}
void OAITeam_organization::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAITeam_organization::is_company_Set() const{
    return m_company_isSet;
}

bool OAITeam_organization::is_company_Valid() const{
    return m_company_isValid;
}

QDateTime OAITeam_organization::getCreatedAt() const {
    return m_created_at;
}
void OAITeam_organization::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITeam_organization::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITeam_organization::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITeam_organization::getDefaultRepositoryPermission() const {
    return m_default_repository_permission;
}
void OAITeam_organization::setDefaultRepositoryPermission(const QString &default_repository_permission) {
    m_default_repository_permission = default_repository_permission;
    m_default_repository_permission_isSet = true;
}

bool OAITeam_organization::is_default_repository_permission_Set() const{
    return m_default_repository_permission_isSet;
}

bool OAITeam_organization::is_default_repository_permission_Valid() const{
    return m_default_repository_permission_isValid;
}

QString OAITeam_organization::getDescription() const {
    return m_description;
}
void OAITeam_organization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITeam_organization::is_description_Set() const{
    return m_description_isSet;
}

bool OAITeam_organization::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAITeam_organization::getDiskUsage() const {
    return m_disk_usage;
}
void OAITeam_organization::setDiskUsage(const qint32 &disk_usage) {
    m_disk_usage = disk_usage;
    m_disk_usage_isSet = true;
}

bool OAITeam_organization::is_disk_usage_Set() const{
    return m_disk_usage_isSet;
}

bool OAITeam_organization::is_disk_usage_Valid() const{
    return m_disk_usage_isValid;
}

QString OAITeam_organization::getEmail() const {
    return m_email;
}
void OAITeam_organization::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAITeam_organization::is_email_Set() const{
    return m_email_isSet;
}

bool OAITeam_organization::is_email_Valid() const{
    return m_email_isValid;
}

QString OAITeam_organization::getEventsUrl() const {
    return m_events_url;
}
void OAITeam_organization::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAITeam_organization::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAITeam_organization::is_events_url_Valid() const{
    return m_events_url_isValid;
}

qint32 OAITeam_organization::getFollowers() const {
    return m_followers;
}
void OAITeam_organization::setFollowers(const qint32 &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAITeam_organization::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAITeam_organization::is_followers_Valid() const{
    return m_followers_isValid;
}

qint32 OAITeam_organization::getFollowing() const {
    return m_following;
}
void OAITeam_organization::setFollowing(const qint32 &following) {
    m_following = following;
    m_following_isSet = true;
}

bool OAITeam_organization::is_following_Set() const{
    return m_following_isSet;
}

bool OAITeam_organization::is_following_Valid() const{
    return m_following_isValid;
}

bool OAITeam_organization::isHasOrganizationProjects() const {
    return m_has_organization_projects;
}
void OAITeam_organization::setHasOrganizationProjects(const bool &has_organization_projects) {
    m_has_organization_projects = has_organization_projects;
    m_has_organization_projects_isSet = true;
}

bool OAITeam_organization::is_has_organization_projects_Set() const{
    return m_has_organization_projects_isSet;
}

bool OAITeam_organization::is_has_organization_projects_Valid() const{
    return m_has_organization_projects_isValid;
}

bool OAITeam_organization::isHasRepositoryProjects() const {
    return m_has_repository_projects;
}
void OAITeam_organization::setHasRepositoryProjects(const bool &has_repository_projects) {
    m_has_repository_projects = has_repository_projects;
    m_has_repository_projects_isSet = true;
}

bool OAITeam_organization::is_has_repository_projects_Set() const{
    return m_has_repository_projects_isSet;
}

bool OAITeam_organization::is_has_repository_projects_Valid() const{
    return m_has_repository_projects_isValid;
}

QString OAITeam_organization::getHooksUrl() const {
    return m_hooks_url;
}
void OAITeam_organization::setHooksUrl(const QString &hooks_url) {
    m_hooks_url = hooks_url;
    m_hooks_url_isSet = true;
}

bool OAITeam_organization::is_hooks_url_Set() const{
    return m_hooks_url_isSet;
}

bool OAITeam_organization::is_hooks_url_Valid() const{
    return m_hooks_url_isValid;
}

QString OAITeam_organization::getHtmlUrl() const {
    return m_html_url;
}
void OAITeam_organization::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAITeam_organization::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAITeam_organization::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAITeam_organization::getId() const {
    return m_id;
}
void OAITeam_organization::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeam_organization::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeam_organization::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITeam_organization::isIsVerified() const {
    return m_is_verified;
}
void OAITeam_organization::setIsVerified(const bool &is_verified) {
    m_is_verified = is_verified;
    m_is_verified_isSet = true;
}

bool OAITeam_organization::is_is_verified_Set() const{
    return m_is_verified_isSet;
}

bool OAITeam_organization::is_is_verified_Valid() const{
    return m_is_verified_isValid;
}

QString OAITeam_organization::getIssuesUrl() const {
    return m_issues_url;
}
void OAITeam_organization::setIssuesUrl(const QString &issues_url) {
    m_issues_url = issues_url;
    m_issues_url_isSet = true;
}

bool OAITeam_organization::is_issues_url_Set() const{
    return m_issues_url_isSet;
}

bool OAITeam_organization::is_issues_url_Valid() const{
    return m_issues_url_isValid;
}

QString OAITeam_organization::getLocation() const {
    return m_location;
}
void OAITeam_organization::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITeam_organization::is_location_Set() const{
    return m_location_isSet;
}

bool OAITeam_organization::is_location_Valid() const{
    return m_location_isValid;
}

QString OAITeam_organization::getLogin() const {
    return m_login;
}
void OAITeam_organization::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAITeam_organization::is_login_Set() const{
    return m_login_isSet;
}

bool OAITeam_organization::is_login_Valid() const{
    return m_login_isValid;
}

QString OAITeam_organization::getMembersAllowedRepositoryCreationType() const {
    return m_members_allowed_repository_creation_type;
}
void OAITeam_organization::setMembersAllowedRepositoryCreationType(const QString &members_allowed_repository_creation_type) {
    m_members_allowed_repository_creation_type = members_allowed_repository_creation_type;
    m_members_allowed_repository_creation_type_isSet = true;
}

bool OAITeam_organization::is_members_allowed_repository_creation_type_Set() const{
    return m_members_allowed_repository_creation_type_isSet;
}

bool OAITeam_organization::is_members_allowed_repository_creation_type_Valid() const{
    return m_members_allowed_repository_creation_type_isValid;
}

bool OAITeam_organization::isMembersCanCreateInternalRepositories() const {
    return m_members_can_create_internal_repositories;
}
void OAITeam_organization::setMembersCanCreateInternalRepositories(const bool &members_can_create_internal_repositories) {
    m_members_can_create_internal_repositories = members_can_create_internal_repositories;
    m_members_can_create_internal_repositories_isSet = true;
}

bool OAITeam_organization::is_members_can_create_internal_repositories_Set() const{
    return m_members_can_create_internal_repositories_isSet;
}

bool OAITeam_organization::is_members_can_create_internal_repositories_Valid() const{
    return m_members_can_create_internal_repositories_isValid;
}

bool OAITeam_organization::isMembersCanCreatePages() const {
    return m_members_can_create_pages;
}
void OAITeam_organization::setMembersCanCreatePages(const bool &members_can_create_pages) {
    m_members_can_create_pages = members_can_create_pages;
    m_members_can_create_pages_isSet = true;
}

bool OAITeam_organization::is_members_can_create_pages_Set() const{
    return m_members_can_create_pages_isSet;
}

bool OAITeam_organization::is_members_can_create_pages_Valid() const{
    return m_members_can_create_pages_isValid;
}

bool OAITeam_organization::isMembersCanCreatePrivatePages() const {
    return m_members_can_create_private_pages;
}
void OAITeam_organization::setMembersCanCreatePrivatePages(const bool &members_can_create_private_pages) {
    m_members_can_create_private_pages = members_can_create_private_pages;
    m_members_can_create_private_pages_isSet = true;
}

bool OAITeam_organization::is_members_can_create_private_pages_Set() const{
    return m_members_can_create_private_pages_isSet;
}

bool OAITeam_organization::is_members_can_create_private_pages_Valid() const{
    return m_members_can_create_private_pages_isValid;
}

bool OAITeam_organization::isMembersCanCreatePrivateRepositories() const {
    return m_members_can_create_private_repositories;
}
void OAITeam_organization::setMembersCanCreatePrivateRepositories(const bool &members_can_create_private_repositories) {
    m_members_can_create_private_repositories = members_can_create_private_repositories;
    m_members_can_create_private_repositories_isSet = true;
}

bool OAITeam_organization::is_members_can_create_private_repositories_Set() const{
    return m_members_can_create_private_repositories_isSet;
}

bool OAITeam_organization::is_members_can_create_private_repositories_Valid() const{
    return m_members_can_create_private_repositories_isValid;
}

bool OAITeam_organization::isMembersCanCreatePublicPages() const {
    return m_members_can_create_public_pages;
}
void OAITeam_organization::setMembersCanCreatePublicPages(const bool &members_can_create_public_pages) {
    m_members_can_create_public_pages = members_can_create_public_pages;
    m_members_can_create_public_pages_isSet = true;
}

bool OAITeam_organization::is_members_can_create_public_pages_Set() const{
    return m_members_can_create_public_pages_isSet;
}

bool OAITeam_organization::is_members_can_create_public_pages_Valid() const{
    return m_members_can_create_public_pages_isValid;
}

bool OAITeam_organization::isMembersCanCreatePublicRepositories() const {
    return m_members_can_create_public_repositories;
}
void OAITeam_organization::setMembersCanCreatePublicRepositories(const bool &members_can_create_public_repositories) {
    m_members_can_create_public_repositories = members_can_create_public_repositories;
    m_members_can_create_public_repositories_isSet = true;
}

bool OAITeam_organization::is_members_can_create_public_repositories_Set() const{
    return m_members_can_create_public_repositories_isSet;
}

bool OAITeam_organization::is_members_can_create_public_repositories_Valid() const{
    return m_members_can_create_public_repositories_isValid;
}

bool OAITeam_organization::isMembersCanCreateRepositories() const {
    return m_members_can_create_repositories;
}
void OAITeam_organization::setMembersCanCreateRepositories(const bool &members_can_create_repositories) {
    m_members_can_create_repositories = members_can_create_repositories;
    m_members_can_create_repositories_isSet = true;
}

bool OAITeam_organization::is_members_can_create_repositories_Set() const{
    return m_members_can_create_repositories_isSet;
}

bool OAITeam_organization::is_members_can_create_repositories_Valid() const{
    return m_members_can_create_repositories_isValid;
}

QString OAITeam_organization::getMembersUrl() const {
    return m_members_url;
}
void OAITeam_organization::setMembersUrl(const QString &members_url) {
    m_members_url = members_url;
    m_members_url_isSet = true;
}

bool OAITeam_organization::is_members_url_Set() const{
    return m_members_url_isSet;
}

bool OAITeam_organization::is_members_url_Valid() const{
    return m_members_url_isValid;
}

QString OAITeam_organization::getName() const {
    return m_name;
}
void OAITeam_organization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam_organization::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam_organization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeam_organization::getNodeId() const {
    return m_node_id;
}
void OAITeam_organization::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAITeam_organization::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAITeam_organization::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAITeam_organization::getOwnedPrivateRepos() const {
    return m_owned_private_repos;
}
void OAITeam_organization::setOwnedPrivateRepos(const qint32 &owned_private_repos) {
    m_owned_private_repos = owned_private_repos;
    m_owned_private_repos_isSet = true;
}

bool OAITeam_organization::is_owned_private_repos_Set() const{
    return m_owned_private_repos_isSet;
}

bool OAITeam_organization::is_owned_private_repos_Valid() const{
    return m_owned_private_repos_isValid;
}

OAIOrganization_full_plan OAITeam_organization::getPlan() const {
    return m_plan;
}
void OAITeam_organization::setPlan(const OAIOrganization_full_plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAITeam_organization::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAITeam_organization::is_plan_Valid() const{
    return m_plan_isValid;
}

qint32 OAITeam_organization::getPrivateGists() const {
    return m_private_gists;
}
void OAITeam_organization::setPrivateGists(const qint32 &private_gists) {
    m_private_gists = private_gists;
    m_private_gists_isSet = true;
}

bool OAITeam_organization::is_private_gists_Set() const{
    return m_private_gists_isSet;
}

bool OAITeam_organization::is_private_gists_Valid() const{
    return m_private_gists_isValid;
}

qint32 OAITeam_organization::getPublicGists() const {
    return m_public_gists;
}
void OAITeam_organization::setPublicGists(const qint32 &public_gists) {
    m_public_gists = public_gists;
    m_public_gists_isSet = true;
}

bool OAITeam_organization::is_public_gists_Set() const{
    return m_public_gists_isSet;
}

bool OAITeam_organization::is_public_gists_Valid() const{
    return m_public_gists_isValid;
}

QString OAITeam_organization::getPublicMembersUrl() const {
    return m_public_members_url;
}
void OAITeam_organization::setPublicMembersUrl(const QString &public_members_url) {
    m_public_members_url = public_members_url;
    m_public_members_url_isSet = true;
}

bool OAITeam_organization::is_public_members_url_Set() const{
    return m_public_members_url_isSet;
}

bool OAITeam_organization::is_public_members_url_Valid() const{
    return m_public_members_url_isValid;
}

qint32 OAITeam_organization::getPublicRepos() const {
    return m_public_repos;
}
void OAITeam_organization::setPublicRepos(const qint32 &public_repos) {
    m_public_repos = public_repos;
    m_public_repos_isSet = true;
}

bool OAITeam_organization::is_public_repos_Set() const{
    return m_public_repos_isSet;
}

bool OAITeam_organization::is_public_repos_Valid() const{
    return m_public_repos_isValid;
}

QString OAITeam_organization::getReposUrl() const {
    return m_repos_url;
}
void OAITeam_organization::setReposUrl(const QString &repos_url) {
    m_repos_url = repos_url;
    m_repos_url_isSet = true;
}

bool OAITeam_organization::is_repos_url_Set() const{
    return m_repos_url_isSet;
}

bool OAITeam_organization::is_repos_url_Valid() const{
    return m_repos_url_isValid;
}

qint32 OAITeam_organization::getTotalPrivateRepos() const {
    return m_total_private_repos;
}
void OAITeam_organization::setTotalPrivateRepos(const qint32 &total_private_repos) {
    m_total_private_repos = total_private_repos;
    m_total_private_repos_isSet = true;
}

bool OAITeam_organization::is_total_private_repos_Set() const{
    return m_total_private_repos_isSet;
}

bool OAITeam_organization::is_total_private_repos_Valid() const{
    return m_total_private_repos_isValid;
}

QString OAITeam_organization::getTwitterUsername() const {
    return m_twitter_username;
}
void OAITeam_organization::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAITeam_organization::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAITeam_organization::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

bool OAITeam_organization::isTwoFactorRequirementEnabled() const {
    return m_two_factor_requirement_enabled;
}
void OAITeam_organization::setTwoFactorRequirementEnabled(const bool &two_factor_requirement_enabled) {
    m_two_factor_requirement_enabled = two_factor_requirement_enabled;
    m_two_factor_requirement_enabled_isSet = true;
}

bool OAITeam_organization::is_two_factor_requirement_enabled_Set() const{
    return m_two_factor_requirement_enabled_isSet;
}

bool OAITeam_organization::is_two_factor_requirement_enabled_Valid() const{
    return m_two_factor_requirement_enabled_isValid;
}

QString OAITeam_organization::getType() const {
    return m_type;
}
void OAITeam_organization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITeam_organization::is_type_Set() const{
    return m_type_isSet;
}

bool OAITeam_organization::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITeam_organization::getUpdatedAt() const {
    return m_updated_at;
}
void OAITeam_organization::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITeam_organization::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITeam_organization::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAITeam_organization::getUrl() const {
    return m_url;
}
void OAITeam_organization::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITeam_organization::is_url_Set() const{
    return m_url_isSet;
}

bool OAITeam_organization::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITeam_organization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_repository_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_organization_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_repository_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_allowed_repository_creation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_internal_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_private_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_private_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_public_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_public_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_private_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_gists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_gists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_members_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repos_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_private_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_requirement_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_organization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_url_isValid && m_created_at_isValid && m_description_isValid && m_events_url_isValid && m_followers_isValid && m_following_isValid && m_has_organization_projects_isValid && m_has_repository_projects_isValid && m_hooks_url_isValid && m_html_url_isValid && m_id_isValid && m_issues_url_isValid && m_login_isValid && m_members_url_isValid && m_node_id_isValid && m_public_gists_isValid && m_public_members_url_isValid && m_public_repos_isValid && m_repos_url_isValid && m_type_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
