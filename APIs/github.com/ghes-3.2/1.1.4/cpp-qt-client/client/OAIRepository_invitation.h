/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepository_invitation.h
 *
 * Repository invitations let you manage who you collaborate with.
 */

#ifndef OAIRepository_invitation_H
#define OAIRepository_invitation_H

#include <QJsonObject>

#include "OAIMinimal_repository.h"
#include "OAINullable_simple_user.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_user;
class OAIMinimal_repository;

class OAIRepository_invitation : public OAIObject {
public:
    OAIRepository_invitation();
    OAIRepository_invitation(QString json);
    ~OAIRepository_invitation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    bool isExpired() const;
    void setExpired(const bool &expired);
    bool is_expired_Set() const;
    bool is_expired_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAINullable_simple_user getInvitee() const;
    void setInvitee(const OAINullable_simple_user &invitee);
    bool is_invitee_Set() const;
    bool is_invitee_Valid() const;

    OAINullable_simple_user getInviter() const;
    void setInviter(const OAINullable_simple_user &inviter);
    bool is_inviter_Set() const;
    bool is_inviter_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    QString getPermissions() const;
    void setPermissions(const QString &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    OAIMinimal_repository getRepository() const;
    void setRepository(const OAIMinimal_repository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    bool m_expired;
    bool m_expired_isSet;
    bool m_expired_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAINullable_simple_user m_invitee;
    bool m_invitee_isSet;
    bool m_invitee_isValid;

    OAINullable_simple_user m_inviter;
    bool m_inviter_isSet;
    bool m_inviter_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    QString m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    OAIMinimal_repository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepository_invitation)

#endif // OAIRepository_invitation_H
