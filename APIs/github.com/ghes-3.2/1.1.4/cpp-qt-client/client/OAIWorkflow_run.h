/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkflow_run.h
 *
 * An invocation of a workflow
 */

#ifndef OAIWorkflow_run_H
#define OAIWorkflow_run_H

#include <QJsonObject>

#include "OAIMinimal_repository.h"
#include "OAINullable_simple_commit.h"
#include "OAIPull_request_minimal.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_commit;
class OAIMinimal_repository;
class OAIPull_request_minimal;

class OAIWorkflow_run : public OAIObject {
public:
    OAIWorkflow_run();
    OAIWorkflow_run(QString json);
    ~OAIWorkflow_run() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArtifactsUrl() const;
    void setArtifactsUrl(const QString &artifacts_url);
    bool is_artifacts_url_Set() const;
    bool is_artifacts_url_Valid() const;

    QString getCancelUrl() const;
    void setCancelUrl(const QString &cancel_url);
    bool is_cancel_url_Set() const;
    bool is_cancel_url_Valid() const;

    qint32 getCheckSuiteId() const;
    void setCheckSuiteId(const qint32 &check_suite_id);
    bool is_check_suite_id_Set() const;
    bool is_check_suite_id_Valid() const;

    QString getCheckSuiteNodeId() const;
    void setCheckSuiteNodeId(const QString &check_suite_node_id);
    bool is_check_suite_node_id_Set() const;
    bool is_check_suite_node_id_Valid() const;

    QString getCheckSuiteUrl() const;
    void setCheckSuiteUrl(const QString &check_suite_url);
    bool is_check_suite_url_Set() const;
    bool is_check_suite_url_Valid() const;

    QString getConclusion() const;
    void setConclusion(const QString &conclusion);
    bool is_conclusion_Set() const;
    bool is_conclusion_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getEvent() const;
    void setEvent(const QString &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    QString getHeadBranch() const;
    void setHeadBranch(const QString &head_branch);
    bool is_head_branch_Set() const;
    bool is_head_branch_Valid() const;

    OAINullable_simple_commit getHeadCommit() const;
    void setHeadCommit(const OAINullable_simple_commit &head_commit);
    bool is_head_commit_Set() const;
    bool is_head_commit_Valid() const;

    OAIMinimal_repository getHeadRepository() const;
    void setHeadRepository(const OAIMinimal_repository &head_repository);
    bool is_head_repository_Set() const;
    bool is_head_repository_Valid() const;

    qint32 getHeadRepositoryId() const;
    void setHeadRepositoryId(const qint32 &head_repository_id);
    bool is_head_repository_id_Set() const;
    bool is_head_repository_id_Valid() const;

    QString getHeadSha() const;
    void setHeadSha(const QString &head_sha);
    bool is_head_sha_Set() const;
    bool is_head_sha_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getJobsUrl() const;
    void setJobsUrl(const QString &jobs_url);
    bool is_jobs_url_Set() const;
    bool is_jobs_url_Valid() const;

    QString getLogsUrl() const;
    void setLogsUrl(const QString &logs_url);
    bool is_logs_url_Set() const;
    bool is_logs_url_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    QList<OAIPull_request_minimal> getPullRequests() const;
    void setPullRequests(const QList<OAIPull_request_minimal> &pull_requests);
    bool is_pull_requests_Set() const;
    bool is_pull_requests_Valid() const;

    OAIMinimal_repository getRepository() const;
    void setRepository(const OAIMinimal_repository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getRerunUrl() const;
    void setRerunUrl(const QString &rerun_url);
    bool is_rerun_url_Set() const;
    bool is_rerun_url_Valid() const;

    qint32 getRunNumber() const;
    void setRunNumber(const qint32 &run_number);
    bool is_run_number_Set() const;
    bool is_run_number_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getWorkflowId() const;
    void setWorkflowId(const qint32 &workflow_id);
    bool is_workflow_id_Set() const;
    bool is_workflow_id_Valid() const;

    QString getWorkflowUrl() const;
    void setWorkflowUrl(const QString &workflow_url);
    bool is_workflow_url_Set() const;
    bool is_workflow_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_artifacts_url;
    bool m_artifacts_url_isSet;
    bool m_artifacts_url_isValid;

    QString m_cancel_url;
    bool m_cancel_url_isSet;
    bool m_cancel_url_isValid;

    qint32 m_check_suite_id;
    bool m_check_suite_id_isSet;
    bool m_check_suite_id_isValid;

    QString m_check_suite_node_id;
    bool m_check_suite_node_id_isSet;
    bool m_check_suite_node_id_isValid;

    QString m_check_suite_url;
    bool m_check_suite_url_isSet;
    bool m_check_suite_url_isValid;

    QString m_conclusion;
    bool m_conclusion_isSet;
    bool m_conclusion_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    QString m_head_branch;
    bool m_head_branch_isSet;
    bool m_head_branch_isValid;

    OAINullable_simple_commit m_head_commit;
    bool m_head_commit_isSet;
    bool m_head_commit_isValid;

    OAIMinimal_repository m_head_repository;
    bool m_head_repository_isSet;
    bool m_head_repository_isValid;

    qint32 m_head_repository_id;
    bool m_head_repository_id_isSet;
    bool m_head_repository_id_isValid;

    QString m_head_sha;
    bool m_head_sha_isSet;
    bool m_head_sha_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_jobs_url;
    bool m_jobs_url_isSet;
    bool m_jobs_url_isValid;

    QString m_logs_url;
    bool m_logs_url_isSet;
    bool m_logs_url_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    QList<OAIPull_request_minimal> m_pull_requests;
    bool m_pull_requests_isSet;
    bool m_pull_requests_isValid;

    OAIMinimal_repository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_rerun_url;
    bool m_rerun_url_isSet;
    bool m_rerun_url_isValid;

    qint32 m_run_number;
    bool m_run_number_isSet;
    bool m_run_number_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_workflow_id;
    bool m_workflow_id_isSet;
    bool m_workflow_id_isValid;

    QString m_workflow_url;
    bool m_workflow_url_isSet;
    bool m_workflow_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkflow_run)

#endif // OAIWorkflow_run_H
