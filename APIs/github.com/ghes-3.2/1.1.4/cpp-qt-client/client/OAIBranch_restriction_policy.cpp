/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranch_restriction_policy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranch_restriction_policy::OAIBranch_restriction_policy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranch_restriction_policy::OAIBranch_restriction_policy() {
    this->initializeModel();
}

OAIBranch_restriction_policy::~OAIBranch_restriction_policy() {}

void OAIBranch_restriction_policy::initializeModel() {

    m_apps_isSet = false;
    m_apps_isValid = false;

    m_apps_url_isSet = false;
    m_apps_url_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_teams_url_isSet = false;
    m_teams_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_users_url_isSet = false;
    m_users_url_isValid = false;
}

void OAIBranch_restriction_policy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranch_restriction_policy::fromJsonObject(QJsonObject json) {

    m_apps_isValid = ::OpenAPI::fromJsonValue(m_apps, json[QString("apps")]);
    m_apps_isSet = !json[QString("apps")].isNull() && m_apps_isValid;

    m_apps_url_isValid = ::OpenAPI::fromJsonValue(m_apps_url, json[QString("apps_url")]);
    m_apps_url_isSet = !json[QString("apps_url")].isNull() && m_apps_url_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;

    m_teams_url_isValid = ::OpenAPI::fromJsonValue(m_teams_url, json[QString("teams_url")]);
    m_teams_url_isSet = !json[QString("teams_url")].isNull() && m_teams_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_users_url_isValid = ::OpenAPI::fromJsonValue(m_users_url, json[QString("users_url")]);
    m_users_url_isSet = !json[QString("users_url")].isNull() && m_users_url_isValid;
}

QString OAIBranch_restriction_policy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranch_restriction_policy::asJsonObject() const {
    QJsonObject obj;
    if (m_apps.size() > 0) {
        obj.insert(QString("apps"), ::OpenAPI::toJsonValue(m_apps));
    }
    if (m_apps_url_isSet) {
        obj.insert(QString("apps_url"), ::OpenAPI::toJsonValue(m_apps_url));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    if (m_teams_url_isSet) {
        obj.insert(QString("teams_url"), ::OpenAPI::toJsonValue(m_teams_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_users_url_isSet) {
        obj.insert(QString("users_url"), ::OpenAPI::toJsonValue(m_users_url));
    }
    return obj;
}

QList<OAIBranch_restriction_policy_apps_inner> OAIBranch_restriction_policy::getApps() const {
    return m_apps;
}
void OAIBranch_restriction_policy::setApps(const QList<OAIBranch_restriction_policy_apps_inner> &apps) {
    m_apps = apps;
    m_apps_isSet = true;
}

bool OAIBranch_restriction_policy::is_apps_Set() const{
    return m_apps_isSet;
}

bool OAIBranch_restriction_policy::is_apps_Valid() const{
    return m_apps_isValid;
}

QString OAIBranch_restriction_policy::getAppsUrl() const {
    return m_apps_url;
}
void OAIBranch_restriction_policy::setAppsUrl(const QString &apps_url) {
    m_apps_url = apps_url;
    m_apps_url_isSet = true;
}

bool OAIBranch_restriction_policy::is_apps_url_Set() const{
    return m_apps_url_isSet;
}

bool OAIBranch_restriction_policy::is_apps_url_Valid() const{
    return m_apps_url_isValid;
}

QList<OAIBranch_restriction_policy_teams_inner> OAIBranch_restriction_policy::getTeams() const {
    return m_teams;
}
void OAIBranch_restriction_policy::setTeams(const QList<OAIBranch_restriction_policy_teams_inner> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIBranch_restriction_policy::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIBranch_restriction_policy::is_teams_Valid() const{
    return m_teams_isValid;
}

QString OAIBranch_restriction_policy::getTeamsUrl() const {
    return m_teams_url;
}
void OAIBranch_restriction_policy::setTeamsUrl(const QString &teams_url) {
    m_teams_url = teams_url;
    m_teams_url_isSet = true;
}

bool OAIBranch_restriction_policy::is_teams_url_Set() const{
    return m_teams_url_isSet;
}

bool OAIBranch_restriction_policy::is_teams_url_Valid() const{
    return m_teams_url_isValid;
}

QString OAIBranch_restriction_policy::getUrl() const {
    return m_url;
}
void OAIBranch_restriction_policy::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBranch_restriction_policy::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBranch_restriction_policy::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIBranch_restriction_policy_users_inner> OAIBranch_restriction_policy::getUsers() const {
    return m_users;
}
void OAIBranch_restriction_policy::setUsers(const QList<OAIBranch_restriction_policy_users_inner> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIBranch_restriction_policy::is_users_Set() const{
    return m_users_isSet;
}

bool OAIBranch_restriction_policy::is_users_Valid() const{
    return m_users_isValid;
}

QString OAIBranch_restriction_policy::getUsersUrl() const {
    return m_users_url;
}
void OAIBranch_restriction_policy::setUsersUrl(const QString &users_url) {
    m_users_url = users_url;
    m_users_url_isSet = true;
}

bool OAIBranch_restriction_policy::is_users_url_Set() const{
    return m_users_url_isSet;
}

bool OAIBranch_restriction_policy::is_users_url_Valid() const{
    return m_users_url_isValid;
}

bool OAIBranch_restriction_policy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_apps_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranch_restriction_policy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apps_isValid && m_apps_url_isValid && m_teams_isValid && m_teams_url_isValid && m_url_isValid && m_users_isValid && m_users_url_isValid && true;
}

} // namespace OpenAPI
