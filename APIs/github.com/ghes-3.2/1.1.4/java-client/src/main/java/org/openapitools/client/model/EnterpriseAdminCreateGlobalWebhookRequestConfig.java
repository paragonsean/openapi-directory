/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Key/value pairs to provide settings for this webhook.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseAdminCreateGlobalWebhookRequestConfig {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_INSECURE_SSL = "insecure_ssl";
  @SerializedName(SERIALIZED_NAME_INSECURE_SSL)
  private String insecureSsl;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public EnterpriseAdminCreateGlobalWebhookRequestConfig() {
  }

  public EnterpriseAdminCreateGlobalWebhookRequestConfig contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The media type used to serialize the payloads. Supported values include &#x60;json&#x60; and &#x60;form&#x60;. The default is &#x60;form&#x60;.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public EnterpriseAdminCreateGlobalWebhookRequestConfig insecureSsl(String insecureSsl) {
    this.insecureSsl = insecureSsl;
    return this;
  }

  /**
   * Determines whether the SSL certificate of the host for &#x60;url&#x60; will be verified when delivering payloads. Supported values include &#x60;0&#x60; (verification is performed) and &#x60;1&#x60; (verification is not performed). The default is &#x60;0&#x60;. **We strongly recommend not setting this to &#x60;1&#x60; as you are subject to man-in-the-middle and other attacks.**
   * @return insecureSsl
   */
  @javax.annotation.Nullable
  public String getInsecureSsl() {
    return insecureSsl;
  }

  public void setInsecureSsl(String insecureSsl) {
    this.insecureSsl = insecureSsl;
  }


  public EnterpriseAdminCreateGlobalWebhookRequestConfig secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * If provided, the &#x60;secret&#x60; will be used as the &#x60;key&#x60; to generate the HMAC hex digest value in the [&#x60;X-Hub-Signature&#x60;](https://docs.github.com/enterprise-server@3.2/webhooks/event-payloads/#delivery-headers) header.
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public EnterpriseAdminCreateGlobalWebhookRequestConfig url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to which the payloads will be delivered.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseAdminCreateGlobalWebhookRequestConfig enterpriseAdminCreateGlobalWebhookRequestConfig = (EnterpriseAdminCreateGlobalWebhookRequestConfig) o;
    return Objects.equals(this.contentType, enterpriseAdminCreateGlobalWebhookRequestConfig.contentType) &&
        Objects.equals(this.insecureSsl, enterpriseAdminCreateGlobalWebhookRequestConfig.insecureSsl) &&
        Objects.equals(this.secret, enterpriseAdminCreateGlobalWebhookRequestConfig.secret) &&
        Objects.equals(this.url, enterpriseAdminCreateGlobalWebhookRequestConfig.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, insecureSsl, secret, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseAdminCreateGlobalWebhookRequestConfig {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    insecureSsl: ").append(toIndentedString(insecureSsl)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_type");
    openapiFields.add("insecure_ssl");
    openapiFields.add("secret");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseAdminCreateGlobalWebhookRequestConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseAdminCreateGlobalWebhookRequestConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseAdminCreateGlobalWebhookRequestConfig is not found in the empty JSON string", EnterpriseAdminCreateGlobalWebhookRequestConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseAdminCreateGlobalWebhookRequestConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseAdminCreateGlobalWebhookRequestConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnterpriseAdminCreateGlobalWebhookRequestConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("insecure_ssl") != null && !jsonObj.get("insecure_ssl").isJsonNull()) && !jsonObj.get("insecure_ssl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insecure_ssl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insecure_ssl").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseAdminCreateGlobalWebhookRequestConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseAdminCreateGlobalWebhookRequestConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseAdminCreateGlobalWebhookRequestConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseAdminCreateGlobalWebhookRequestConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseAdminCreateGlobalWebhookRequestConfig>() {
           @Override
           public void write(JsonWriter out, EnterpriseAdminCreateGlobalWebhookRequestConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseAdminCreateGlobalWebhookRequestConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseAdminCreateGlobalWebhookRequestConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseAdminCreateGlobalWebhookRequestConfig
   * @throws IOException if the JSON string is invalid with respect to EnterpriseAdminCreateGlobalWebhookRequestConfig
   */
  public static EnterpriseAdminCreateGlobalWebhookRequestConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseAdminCreateGlobalWebhookRequestConfig.class);
  }

  /**
   * Convert an instance of EnterpriseAdminCreateGlobalWebhookRequestConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

