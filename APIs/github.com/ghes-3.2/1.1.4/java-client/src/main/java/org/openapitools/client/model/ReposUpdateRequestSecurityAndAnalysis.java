/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity;
import org.openapitools.client.model.ReposUpdateRequestSecurityAndAnalysisSecretScanning;
import org.openapitools.client.model.ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specify which security and analysis features to enable or disable for the repository.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.2/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  For example, to enable GitHub Advanced Security, use this data in the body of the &#x60;PATCH&#x60; request: &#x60;{ \&quot;security_and_analysis\&quot;: {\&quot;advanced_security\&quot;: { \&quot;status\&quot;: \&quot;enabled\&quot; } } }&#x60;.  You can check which security and analysis features are currently enabled by using a &#x60;GET /repos/{owner}/{repo}&#x60; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposUpdateRequestSecurityAndAnalysis {
  public static final String SERIALIZED_NAME_ADVANCED_SECURITY = "advanced_security";
  @SerializedName(SERIALIZED_NAME_ADVANCED_SECURITY)
  private ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity advancedSecurity;

  public static final String SERIALIZED_NAME_SECRET_SCANNING = "secret_scanning";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING)
  private ReposUpdateRequestSecurityAndAnalysisSecretScanning secretScanning;

  public static final String SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION = "secret_scanning_push_protection";
  @SerializedName(SERIALIZED_NAME_SECRET_SCANNING_PUSH_PROTECTION)
  private ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection secretScanningPushProtection;

  public ReposUpdateRequestSecurityAndAnalysis() {
  }

  public ReposUpdateRequestSecurityAndAnalysis advancedSecurity(ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity advancedSecurity) {
    this.advancedSecurity = advancedSecurity;
    return this;
  }

  /**
   * Get advancedSecurity
   * @return advancedSecurity
   */
  @javax.annotation.Nullable
  public ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity getAdvancedSecurity() {
    return advancedSecurity;
  }

  public void setAdvancedSecurity(ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity advancedSecurity) {
    this.advancedSecurity = advancedSecurity;
  }


  public ReposUpdateRequestSecurityAndAnalysis secretScanning(ReposUpdateRequestSecurityAndAnalysisSecretScanning secretScanning) {
    this.secretScanning = secretScanning;
    return this;
  }

  /**
   * Get secretScanning
   * @return secretScanning
   */
  @javax.annotation.Nullable
  public ReposUpdateRequestSecurityAndAnalysisSecretScanning getSecretScanning() {
    return secretScanning;
  }

  public void setSecretScanning(ReposUpdateRequestSecurityAndAnalysisSecretScanning secretScanning) {
    this.secretScanning = secretScanning;
  }


  public ReposUpdateRequestSecurityAndAnalysis secretScanningPushProtection(ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection secretScanningPushProtection) {
    this.secretScanningPushProtection = secretScanningPushProtection;
    return this;
  }

  /**
   * Get secretScanningPushProtection
   * @return secretScanningPushProtection
   */
  @javax.annotation.Nullable
  public ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection getSecretScanningPushProtection() {
    return secretScanningPushProtection;
  }

  public void setSecretScanningPushProtection(ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection secretScanningPushProtection) {
    this.secretScanningPushProtection = secretScanningPushProtection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposUpdateRequestSecurityAndAnalysis reposUpdateRequestSecurityAndAnalysis = (ReposUpdateRequestSecurityAndAnalysis) o;
    return Objects.equals(this.advancedSecurity, reposUpdateRequestSecurityAndAnalysis.advancedSecurity) &&
        Objects.equals(this.secretScanning, reposUpdateRequestSecurityAndAnalysis.secretScanning) &&
        Objects.equals(this.secretScanningPushProtection, reposUpdateRequestSecurityAndAnalysis.secretScanningPushProtection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedSecurity, secretScanning, secretScanningPushProtection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposUpdateRequestSecurityAndAnalysis {\n");
    sb.append("    advancedSecurity: ").append(toIndentedString(advancedSecurity)).append("\n");
    sb.append("    secretScanning: ").append(toIndentedString(secretScanning)).append("\n");
    sb.append("    secretScanningPushProtection: ").append(toIndentedString(secretScanningPushProtection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanced_security");
    openapiFields.add("secret_scanning");
    openapiFields.add("secret_scanning_push_protection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposUpdateRequestSecurityAndAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposUpdateRequestSecurityAndAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposUpdateRequestSecurityAndAnalysis is not found in the empty JSON string", ReposUpdateRequestSecurityAndAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposUpdateRequestSecurityAndAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposUpdateRequestSecurityAndAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advanced_security`
      if (jsonObj.get("advanced_security") != null && !jsonObj.get("advanced_security").isJsonNull()) {
        ReposUpdateRequestSecurityAndAnalysisAdvancedSecurity.validateJsonElement(jsonObj.get("advanced_security"));
      }
      // validate the optional field `secret_scanning`
      if (jsonObj.get("secret_scanning") != null && !jsonObj.get("secret_scanning").isJsonNull()) {
        ReposUpdateRequestSecurityAndAnalysisSecretScanning.validateJsonElement(jsonObj.get("secret_scanning"));
      }
      // validate the optional field `secret_scanning_push_protection`
      if (jsonObj.get("secret_scanning_push_protection") != null && !jsonObj.get("secret_scanning_push_protection").isJsonNull()) {
        ReposUpdateRequestSecurityAndAnalysisSecretScanningPushProtection.validateJsonElement(jsonObj.get("secret_scanning_push_protection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposUpdateRequestSecurityAndAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposUpdateRequestSecurityAndAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposUpdateRequestSecurityAndAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposUpdateRequestSecurityAndAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposUpdateRequestSecurityAndAnalysis>() {
           @Override
           public void write(JsonWriter out, ReposUpdateRequestSecurityAndAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposUpdateRequestSecurityAndAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposUpdateRequestSecurityAndAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposUpdateRequestSecurityAndAnalysis
   * @throws IOException if the JSON string is invalid with respect to ReposUpdateRequestSecurityAndAnalysis
   */
  public static ReposUpdateRequestSecurityAndAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposUpdateRequestSecurityAndAnalysis.class);
  }

  /**
   * Convert an instance of ReposUpdateRequestSecurityAndAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

