/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrgsUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrgsUpdateRequest {
  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private String blog;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  /**
   * Default permission level members have for organization repositories.
   */
  @JsonAdapter(DefaultRepositoryPermissionEnum.Adapter.class)
  public enum DefaultRepositoryPermissionEnum {
    READ("read"),
    
    WRITE("write"),
    
    ADMIN("admin"),
    
    NONE("none");

    private String value;

    DefaultRepositoryPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultRepositoryPermissionEnum fromValue(String value) {
      for (DefaultRepositoryPermissionEnum b : DefaultRepositoryPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultRepositoryPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultRepositoryPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultRepositoryPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultRepositoryPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultRepositoryPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION = "default_repository_permission";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION)
  private DefaultRepositoryPermissionEnum defaultRepositoryPermission = DefaultRepositoryPermissionEnum.READ;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS = "has_organization_projects";
  @SerializedName(SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS)
  private Boolean hasOrganizationProjects;

  public static final String SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS = "has_repository_projects";
  @SerializedName(SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS)
  private Boolean hasRepositoryProjects;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  /**
   * Specifies which types of repositories non-admin organization members can create.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in &#x60;members_can_create_repositories&#x60;. See the parameter deprecation notice in the operation description for details.
   */
  @JsonAdapter(MembersAllowedRepositoryCreationTypeEnum.Adapter.class)
  public enum MembersAllowedRepositoryCreationTypeEnum {
    ALL("all"),
    
    PRIVATE("private"),
    
    NONE("none");

    private String value;

    MembersAllowedRepositoryCreationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembersAllowedRepositoryCreationTypeEnum fromValue(String value) {
      for (MembersAllowedRepositoryCreationTypeEnum b : MembersAllowedRepositoryCreationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembersAllowedRepositoryCreationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembersAllowedRepositoryCreationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembersAllowedRepositoryCreationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MembersAllowedRepositoryCreationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MembersAllowedRepositoryCreationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE = "members_allowed_repository_creation_type";
  @SerializedName(SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE)
  private MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES = "members_can_create_internal_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES)
  private Boolean membersCanCreateInternalRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES = "members_can_create_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES)
  private Boolean membersCanCreatePages = true;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES = "members_can_create_private_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES)
  private Boolean membersCanCreatePrivateRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES = "members_can_create_public_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES)
  private Boolean membersCanCreatePublicRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES = "members_can_create_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES)
  private Boolean membersCanCreateRepositories = true;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public OrgsUpdateRequest() {
  }

  public OrgsUpdateRequest billingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
    return this;
  }

  /**
   * Billing email address. This address is not publicized.
   * @return billingEmail
   */
  @javax.annotation.Nullable
  public String getBillingEmail() {
    return billingEmail;
  }

  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public OrgsUpdateRequest blog(String blog) {
    this.blog = blog;
    return this;
  }

  /**
   * Get blog
   * @return blog
   */
  @javax.annotation.Nullable
  public String getBlog() {
    return blog;
  }

  public void setBlog(String blog) {
    this.blog = blog;
  }


  public OrgsUpdateRequest company(String company) {
    this.company = company;
    return this;
  }

  /**
   * The company name.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public OrgsUpdateRequest defaultRepositoryPermission(DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
    this.defaultRepositoryPermission = defaultRepositoryPermission;
    return this;
  }

  /**
   * Default permission level members have for organization repositories.
   * @return defaultRepositoryPermission
   */
  @javax.annotation.Nullable
  public DefaultRepositoryPermissionEnum getDefaultRepositoryPermission() {
    return defaultRepositoryPermission;
  }

  public void setDefaultRepositoryPermission(DefaultRepositoryPermissionEnum defaultRepositoryPermission) {
    this.defaultRepositoryPermission = defaultRepositoryPermission;
  }


  public OrgsUpdateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the company.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrgsUpdateRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The publicly visible email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrgsUpdateRequest hasOrganizationProjects(Boolean hasOrganizationProjects) {
    this.hasOrganizationProjects = hasOrganizationProjects;
    return this;
  }

  /**
   * Whether an organization can use organization projects.
   * @return hasOrganizationProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasOrganizationProjects() {
    return hasOrganizationProjects;
  }

  public void setHasOrganizationProjects(Boolean hasOrganizationProjects) {
    this.hasOrganizationProjects = hasOrganizationProjects;
  }


  public OrgsUpdateRequest hasRepositoryProjects(Boolean hasRepositoryProjects) {
    this.hasRepositoryProjects = hasRepositoryProjects;
    return this;
  }

  /**
   * Whether repositories that belong to the organization can use repository projects.
   * @return hasRepositoryProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasRepositoryProjects() {
    return hasRepositoryProjects;
  }

  public void setHasRepositoryProjects(Boolean hasRepositoryProjects) {
    this.hasRepositoryProjects = hasRepositoryProjects;
  }


  public OrgsUpdateRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public OrgsUpdateRequest membersAllowedRepositoryCreationType(MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
    return this;
  }

  /**
   * Specifies which types of repositories non-admin organization members can create.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in &#x60;members_can_create_repositories&#x60;. See the parameter deprecation notice in the operation description for details.
   * @return membersAllowedRepositoryCreationType
   */
  @javax.annotation.Nullable
  public MembersAllowedRepositoryCreationTypeEnum getMembersAllowedRepositoryCreationType() {
    return membersAllowedRepositoryCreationType;
  }

  public void setMembersAllowedRepositoryCreationType(MembersAllowedRepositoryCreationTypeEnum membersAllowedRepositoryCreationType) {
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
  }


  public OrgsUpdateRequest membersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
    return this;
  }

  /**
   * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreateInternalRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreateInternalRepositories() {
    return membersCanCreateInternalRepositories;
  }

  public void setMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
  }


  public OrgsUpdateRequest membersCanCreatePages(Boolean membersCanCreatePages) {
    this.membersCanCreatePages = membersCanCreatePages;
    return this;
  }

  /**
   * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   * @return membersCanCreatePages
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePages() {
    return membersCanCreatePages;
  }

  public void setMembersCanCreatePages(Boolean membersCanCreatePages) {
    this.membersCanCreatePages = membersCanCreatePages;
  }


  public OrgsUpdateRequest membersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
    return this;
  }

  /**
   * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreatePrivateRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePrivateRepositories() {
    return membersCanCreatePrivateRepositories;
  }

  public void setMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
  }


  public OrgsUpdateRequest membersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
    return this;
  }

  /**
   * Whether organization members can create public repositories, which are visible to anyone. For more information, see \&quot;[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\&quot; in the GitHub Help documentation.
   * @return membersCanCreatePublicRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePublicRepositories() {
    return membersCanCreatePublicRepositories;
  }

  public void setMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
  }


  public OrgsUpdateRequest membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    this.membersCanCreateRepositories = membersCanCreateRepositories;
    return this;
  }

  /**
   * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See &#x60;members_allowed_repository_creation_type&#x60; in this table for details.
   * @return membersCanCreateRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreateRepositories() {
    return membersCanCreateRepositories;
  }

  public void setMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    this.membersCanCreateRepositories = membersCanCreateRepositories;
  }


  public OrgsUpdateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The shorthand name of the company.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrgsUpdateRequest twitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
    return this;
  }

  /**
   * The Twitter username of the company.
   * @return twitterUsername
   */
  @javax.annotation.Nullable
  public String getTwitterUsername() {
    return twitterUsername;
  }

  public void setTwitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgsUpdateRequest orgsUpdateRequest = (OrgsUpdateRequest) o;
    return Objects.equals(this.billingEmail, orgsUpdateRequest.billingEmail) &&
        Objects.equals(this.blog, orgsUpdateRequest.blog) &&
        Objects.equals(this.company, orgsUpdateRequest.company) &&
        Objects.equals(this.defaultRepositoryPermission, orgsUpdateRequest.defaultRepositoryPermission) &&
        Objects.equals(this.description, orgsUpdateRequest.description) &&
        Objects.equals(this.email, orgsUpdateRequest.email) &&
        Objects.equals(this.hasOrganizationProjects, orgsUpdateRequest.hasOrganizationProjects) &&
        Objects.equals(this.hasRepositoryProjects, orgsUpdateRequest.hasRepositoryProjects) &&
        Objects.equals(this.location, orgsUpdateRequest.location) &&
        Objects.equals(this.membersAllowedRepositoryCreationType, orgsUpdateRequest.membersAllowedRepositoryCreationType) &&
        Objects.equals(this.membersCanCreateInternalRepositories, orgsUpdateRequest.membersCanCreateInternalRepositories) &&
        Objects.equals(this.membersCanCreatePages, orgsUpdateRequest.membersCanCreatePages) &&
        Objects.equals(this.membersCanCreatePrivateRepositories, orgsUpdateRequest.membersCanCreatePrivateRepositories) &&
        Objects.equals(this.membersCanCreatePublicRepositories, orgsUpdateRequest.membersCanCreatePublicRepositories) &&
        Objects.equals(this.membersCanCreateRepositories, orgsUpdateRequest.membersCanCreateRepositories) &&
        Objects.equals(this.name, orgsUpdateRequest.name) &&
        Objects.equals(this.twitterUsername, orgsUpdateRequest.twitterUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingEmail, blog, company, defaultRepositoryPermission, description, email, hasOrganizationProjects, hasRepositoryProjects, location, membersAllowedRepositoryCreationType, membersCanCreateInternalRepositories, membersCanCreatePages, membersCanCreatePrivateRepositories, membersCanCreatePublicRepositories, membersCanCreateRepositories, name, twitterUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgsUpdateRequest {\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    defaultRepositoryPermission: ").append(toIndentedString(defaultRepositoryPermission)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    hasOrganizationProjects: ").append(toIndentedString(hasOrganizationProjects)).append("\n");
    sb.append("    hasRepositoryProjects: ").append(toIndentedString(hasRepositoryProjects)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    membersAllowedRepositoryCreationType: ").append(toIndentedString(membersAllowedRepositoryCreationType)).append("\n");
    sb.append("    membersCanCreateInternalRepositories: ").append(toIndentedString(membersCanCreateInternalRepositories)).append("\n");
    sb.append("    membersCanCreatePages: ").append(toIndentedString(membersCanCreatePages)).append("\n");
    sb.append("    membersCanCreatePrivateRepositories: ").append(toIndentedString(membersCanCreatePrivateRepositories)).append("\n");
    sb.append("    membersCanCreatePublicRepositories: ").append(toIndentedString(membersCanCreatePublicRepositories)).append("\n");
    sb.append("    membersCanCreateRepositories: ").append(toIndentedString(membersCanCreateRepositories)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_email");
    openapiFields.add("blog");
    openapiFields.add("company");
    openapiFields.add("default_repository_permission");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("has_organization_projects");
    openapiFields.add("has_repository_projects");
    openapiFields.add("location");
    openapiFields.add("members_allowed_repository_creation_type");
    openapiFields.add("members_can_create_internal_repositories");
    openapiFields.add("members_can_create_pages");
    openapiFields.add("members_can_create_private_repositories");
    openapiFields.add("members_can_create_public_repositories");
    openapiFields.add("members_can_create_repositories");
    openapiFields.add("name");
    openapiFields.add("twitter_username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrgsUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrgsUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgsUpdateRequest is not found in the empty JSON string", OrgsUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrgsUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrgsUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) && !jsonObj.get("blog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("default_repository_permission") != null && !jsonObj.get("default_repository_permission").isJsonNull()) && !jsonObj.get("default_repository_permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_repository_permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_repository_permission").toString()));
      }
      // validate the optional field `default_repository_permission`
      if (jsonObj.get("default_repository_permission") != null && !jsonObj.get("default_repository_permission").isJsonNull()) {
        DefaultRepositoryPermissionEnum.validateJsonElement(jsonObj.get("default_repository_permission"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("members_allowed_repository_creation_type") != null && !jsonObj.get("members_allowed_repository_creation_type").isJsonNull()) && !jsonObj.get("members_allowed_repository_creation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members_allowed_repository_creation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members_allowed_repository_creation_type").toString()));
      }
      // validate the optional field `members_allowed_repository_creation_type`
      if (jsonObj.get("members_allowed_repository_creation_type") != null && !jsonObj.get("members_allowed_repository_creation_type").isJsonNull()) {
        MembersAllowedRepositoryCreationTypeEnum.validateJsonElement(jsonObj.get("members_allowed_repository_creation_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgsUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgsUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgsUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgsUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgsUpdateRequest>() {
           @Override
           public void write(JsonWriter out, OrgsUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgsUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrgsUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrgsUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to OrgsUpdateRequest
   */
  public static OrgsUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgsUpdateRequest.class);
  }

  /**
   * Convert an instance of OrgsUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

