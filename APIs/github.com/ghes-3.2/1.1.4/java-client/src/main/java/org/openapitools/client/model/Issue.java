/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.IssueLabelsInner;
import org.openapitools.client.model.IssuePullRequest;
import org.openapitools.client.model.NullableIntegration;
import org.openapitools.client.model.NullableMilestone;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.ReactionRollup;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Issue {
  public static final String SERIALIZED_NAME_ACTIVE_LOCK_REASON = "active_lock_reason";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LOCK_REASON)
  private String activeLockReason;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private NullableSimpleUser assignee;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<SimpleUser> assignees;

  public static final String SERIALIZED_NAME_AUTHOR_ASSOCIATION = "author_association";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ASSOCIATION)
  private AuthorAssociation authorAssociation;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_HTML = "body_html";
  @SerializedName(SERIALIZED_NAME_BODY_HTML)
  private String bodyHtml;

  public static final String SERIALIZED_NAME_BODY_TEXT = "body_text";
  @SerializedName(SERIALIZED_NAME_BODY_TEXT)
  private String bodyText;

  public static final String SERIALIZED_NAME_CLOSED_AT = "closed_at";
  @SerializedName(SERIALIZED_NAME_CLOSED_AT)
  private OffsetDateTime closedAt;

  public static final String SERIALIZED_NAME_CLOSED_BY = "closed_by";
  @SerializedName(SERIALIZED_NAME_CLOSED_BY)
  private NullableSimpleUser closedBy;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Integer comments;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private URI eventsUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<IssueLabelsInner> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS_URL = "labels_url";
  @SerializedName(SERIALIZED_NAME_LABELS_URL)
  private String labelsUrl;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MILESTONE = "milestone";
  @SerializedName(SERIALIZED_NAME_MILESTONE)
  private NullableMilestone milestone;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP = "performed_via_github_app";
  @SerializedName(SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP)
  private NullableIntegration performedViaGithubApp;

  public static final String SERIALIZED_NAME_PULL_REQUEST = "pull_request";
  @SerializedName(SERIALIZED_NAME_PULL_REQUEST)
  private IssuePullRequest pullRequest;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private ReactionRollup reactions;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private Repository repository;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repository_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private URI repositoryUrl;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  /**
   * The reason for the current state
   */
  @JsonAdapter(StateReasonEnum.Adapter.class)
  public enum StateReasonEnum {
    COMPLETED("completed"),
    
    REOPENED("reopened"),
    
    NOT_PLANNED("not_planned");

    private String value;

    StateReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateReasonEnum fromValue(String value) {
      for (StateReasonEnum b : StateReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_REASON = "state_reason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private StateReasonEnum stateReason;

  public static final String SERIALIZED_NAME_TIMELINE_URL = "timeline_url";
  @SerializedName(SERIALIZED_NAME_TIMELINE_URL)
  private URI timelineUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private NullableSimpleUser user;

  public Issue() {
  }

  public Issue activeLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
    return this;
  }

  /**
   * Get activeLockReason
   * @return activeLockReason
   */
  @javax.annotation.Nullable
  public String getActiveLockReason() {
    return activeLockReason;
  }

  public void setActiveLockReason(String activeLockReason) {
    this.activeLockReason = activeLockReason;
  }


  public Issue assignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getAssignee() {
    return assignee;
  }

  public void setAssignee(NullableSimpleUser assignee) {
    this.assignee = assignee;
  }


  public Issue assignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
    return this;
  }

  public Issue addAssigneesItem(SimpleUser assigneesItem) {
    if (this.assignees == null) {
      this.assignees = new ArrayList<>();
    }
    this.assignees.add(assigneesItem);
    return this;
  }

  /**
   * Get assignees
   * @return assignees
   */
  @javax.annotation.Nullable
  public List<SimpleUser> getAssignees() {
    return assignees;
  }

  public void setAssignees(List<SimpleUser> assignees) {
    this.assignees = assignees;
  }


  public Issue authorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
    return this;
  }

  /**
   * Get authorAssociation
   * @return authorAssociation
   */
  @javax.annotation.Nonnull
  public AuthorAssociation getAuthorAssociation() {
    return authorAssociation;
  }

  public void setAuthorAssociation(AuthorAssociation authorAssociation) {
    this.authorAssociation = authorAssociation;
  }


  public Issue body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Contents of the issue
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public Issue bodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
    return this;
  }

  /**
   * Get bodyHtml
   * @return bodyHtml
   */
  @javax.annotation.Nullable
  public String getBodyHtml() {
    return bodyHtml;
  }

  public void setBodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
  }


  public Issue bodyText(String bodyText) {
    this.bodyText = bodyText;
    return this;
  }

  /**
   * Get bodyText
   * @return bodyText
   */
  @javax.annotation.Nullable
  public String getBodyText() {
    return bodyText;
  }

  public void setBodyText(String bodyText) {
    this.bodyText = bodyText;
  }


  public Issue closedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
    return this;
  }

  /**
   * Get closedAt
   * @return closedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedAt() {
    return closedAt;
  }

  public void setClosedAt(OffsetDateTime closedAt) {
    this.closedAt = closedAt;
  }


  public Issue closedBy(NullableSimpleUser closedBy) {
    this.closedBy = closedBy;
    return this;
  }

  /**
   * Get closedBy
   * @return closedBy
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getClosedBy() {
    return closedBy;
  }

  public void setClosedBy(NullableSimpleUser closedBy) {
    this.closedBy = closedBy;
  }


  public Issue comments(Integer comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nonnull
  public Integer getComments() {
    return comments;
  }

  public void setComments(Integer comments) {
    this.comments = comments;
  }


  public Issue commentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nonnull
  public URI getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public Issue createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Issue draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public Issue eventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nonnull
  public URI getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public Issue htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Issue id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Issue labels(List<IssueLabelsInner> labels) {
    this.labels = labels;
    return this;
  }

  public Issue addLabelsItem(IssueLabelsInner labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @return labels
   */
  @javax.annotation.Nonnull
  public List<IssueLabelsInner> getLabels() {
    return labels;
  }

  public void setLabels(List<IssueLabelsInner> labels) {
    this.labels = labels;
  }


  public Issue labelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
    return this;
  }

  /**
   * Get labelsUrl
   * @return labelsUrl
   */
  @javax.annotation.Nonnull
  public String getLabelsUrl() {
    return labelsUrl;
  }

  public void setLabelsUrl(String labelsUrl) {
    this.labelsUrl = labelsUrl;
  }


  public Issue locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nonnull
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Issue milestone(NullableMilestone milestone) {
    this.milestone = milestone;
    return this;
  }

  /**
   * Get milestone
   * @return milestone
   */
  @javax.annotation.Nullable
  public NullableMilestone getMilestone() {
    return milestone;
  }

  public void setMilestone(NullableMilestone milestone) {
    this.milestone = milestone;
  }


  public Issue nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public Issue number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Number uniquely identifying the issue within its repository
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public Issue performedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
    return this;
  }

  /**
   * Get performedViaGithubApp
   * @return performedViaGithubApp
   */
  @javax.annotation.Nullable
  public NullableIntegration getPerformedViaGithubApp() {
    return performedViaGithubApp;
  }

  public void setPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
  }


  public Issue pullRequest(IssuePullRequest pullRequest) {
    this.pullRequest = pullRequest;
    return this;
  }

  /**
   * Get pullRequest
   * @return pullRequest
   */
  @javax.annotation.Nullable
  public IssuePullRequest getPullRequest() {
    return pullRequest;
  }

  public void setPullRequest(IssuePullRequest pullRequest) {
    this.pullRequest = pullRequest;
  }


  public Issue reactions(ReactionRollup reactions) {
    this.reactions = reactions;
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public ReactionRollup getReactions() {
    return reactions;
  }

  public void setReactions(ReactionRollup reactions) {
    this.reactions = reactions;
  }


  public Issue repository(Repository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public Repository getRepository() {
    return repository;
  }

  public void setRepository(Repository repository) {
    this.repository = repository;
  }


  public Issue repositoryUrl(URI repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

  /**
   * Get repositoryUrl
   * @return repositoryUrl
   */
  @javax.annotation.Nonnull
  public URI getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(URI repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public Issue state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the issue; either &#39;open&#39; or &#39;closed&#39;
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Issue stateReason(StateReasonEnum stateReason) {
    this.stateReason = stateReason;
    return this;
  }

  /**
   * The reason for the current state
   * @return stateReason
   */
  @javax.annotation.Nullable
  public StateReasonEnum getStateReason() {
    return stateReason;
  }

  public void setStateReason(StateReasonEnum stateReason) {
    this.stateReason = stateReason;
  }


  public Issue timelineUrl(URI timelineUrl) {
    this.timelineUrl = timelineUrl;
    return this;
  }

  /**
   * Get timelineUrl
   * @return timelineUrl
   */
  @javax.annotation.Nullable
  public URI getTimelineUrl() {
    return timelineUrl;
  }

  public void setTimelineUrl(URI timelineUrl) {
    this.timelineUrl = timelineUrl;
  }


  public Issue title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the issue
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Issue updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Issue url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * URL for the issue
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public Issue user(NullableSimpleUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getUser() {
    return user;
  }

  public void setUser(NullableSimpleUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Issue issue = (Issue) o;
    return Objects.equals(this.activeLockReason, issue.activeLockReason) &&
        Objects.equals(this.assignee, issue.assignee) &&
        Objects.equals(this.assignees, issue.assignees) &&
        Objects.equals(this.authorAssociation, issue.authorAssociation) &&
        Objects.equals(this.body, issue.body) &&
        Objects.equals(this.bodyHtml, issue.bodyHtml) &&
        Objects.equals(this.bodyText, issue.bodyText) &&
        Objects.equals(this.closedAt, issue.closedAt) &&
        Objects.equals(this.closedBy, issue.closedBy) &&
        Objects.equals(this.comments, issue.comments) &&
        Objects.equals(this.commentsUrl, issue.commentsUrl) &&
        Objects.equals(this.createdAt, issue.createdAt) &&
        Objects.equals(this.draft, issue.draft) &&
        Objects.equals(this.eventsUrl, issue.eventsUrl) &&
        Objects.equals(this.htmlUrl, issue.htmlUrl) &&
        Objects.equals(this.id, issue.id) &&
        Objects.equals(this.labels, issue.labels) &&
        Objects.equals(this.labelsUrl, issue.labelsUrl) &&
        Objects.equals(this.locked, issue.locked) &&
        Objects.equals(this.milestone, issue.milestone) &&
        Objects.equals(this.nodeId, issue.nodeId) &&
        Objects.equals(this.number, issue.number) &&
        Objects.equals(this.performedViaGithubApp, issue.performedViaGithubApp) &&
        Objects.equals(this.pullRequest, issue.pullRequest) &&
        Objects.equals(this.reactions, issue.reactions) &&
        Objects.equals(this.repository, issue.repository) &&
        Objects.equals(this.repositoryUrl, issue.repositoryUrl) &&
        Objects.equals(this.state, issue.state) &&
        Objects.equals(this.stateReason, issue.stateReason) &&
        Objects.equals(this.timelineUrl, issue.timelineUrl) &&
        Objects.equals(this.title, issue.title) &&
        Objects.equals(this.updatedAt, issue.updatedAt) &&
        Objects.equals(this.url, issue.url) &&
        Objects.equals(this.user, issue.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeLockReason, assignee, assignees, authorAssociation, body, bodyHtml, bodyText, closedAt, closedBy, comments, commentsUrl, createdAt, draft, eventsUrl, htmlUrl, id, labels, labelsUrl, locked, milestone, nodeId, number, performedViaGithubApp, pullRequest, reactions, repository, repositoryUrl, state, stateReason, timelineUrl, title, updatedAt, url, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Issue {\n");
    sb.append("    activeLockReason: ").append(toIndentedString(activeLockReason)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    authorAssociation: ").append(toIndentedString(authorAssociation)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyHtml: ").append(toIndentedString(bodyHtml)).append("\n");
    sb.append("    bodyText: ").append(toIndentedString(bodyText)).append("\n");
    sb.append("    closedAt: ").append(toIndentedString(closedAt)).append("\n");
    sb.append("    closedBy: ").append(toIndentedString(closedBy)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    labelsUrl: ").append(toIndentedString(labelsUrl)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    milestone: ").append(toIndentedString(milestone)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    performedViaGithubApp: ").append(toIndentedString(performedViaGithubApp)).append("\n");
    sb.append("    pullRequest: ").append(toIndentedString(pullRequest)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    timelineUrl: ").append(toIndentedString(timelineUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_lock_reason");
    openapiFields.add("assignee");
    openapiFields.add("assignees");
    openapiFields.add("author_association");
    openapiFields.add("body");
    openapiFields.add("body_html");
    openapiFields.add("body_text");
    openapiFields.add("closed_at");
    openapiFields.add("closed_by");
    openapiFields.add("comments");
    openapiFields.add("comments_url");
    openapiFields.add("created_at");
    openapiFields.add("draft");
    openapiFields.add("events_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("labels_url");
    openapiFields.add("locked");
    openapiFields.add("milestone");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("performed_via_github_app");
    openapiFields.add("pull_request");
    openapiFields.add("reactions");
    openapiFields.add("repository");
    openapiFields.add("repository_url");
    openapiFields.add("state");
    openapiFields.add("state_reason");
    openapiFields.add("timeline_url");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("author_association");
    openapiRequiredFields.add("closed_at");
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("labels_url");
    openapiRequiredFields.add("locked");
    openapiRequiredFields.add("milestone");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("repository_url");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Issue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Issue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Issue is not found in the empty JSON string", Issue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Issue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Issue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Issue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_lock_reason") != null && !jsonObj.get("active_lock_reason").isJsonNull()) && !jsonObj.get("active_lock_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_lock_reason").toString()));
      }
      // validate the required field `assignee`
      NullableSimpleUser.validateJsonElement(jsonObj.get("assignee"));
      if (jsonObj.get("assignees") != null && !jsonObj.get("assignees").isJsonNull()) {
        JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
        if (jsonArrayassignees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
          }

          // validate the optional field `assignees` (array)
          for (int i = 0; i < jsonArrayassignees.size(); i++) {
            SimpleUser.validateJsonElement(jsonArrayassignees.get(i));
          };
        }
      }
      // validate the required field `author_association`
      AuthorAssociation.validateJsonElement(jsonObj.get("author_association"));
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_html") != null && !jsonObj.get("body_html").isJsonNull()) && !jsonObj.get("body_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_html").toString()));
      }
      if ((jsonObj.get("body_text") != null && !jsonObj.get("body_text").isJsonNull()) && !jsonObj.get("body_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_text").toString()));
      }
      // validate the optional field `closed_by`
      if (jsonObj.get("closed_by") != null && !jsonObj.get("closed_by").isJsonNull()) {
        NullableSimpleUser.validateJsonElement(jsonObj.get("closed_by"));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }

      JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
      // validate the required field `labels` (array)
      for (int i = 0; i < jsonArraylabels.size(); i++) {
        IssueLabelsInner.validateJsonElement(jsonArraylabels.get(i));
      };
      if (!jsonObj.get("labels_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels_url").toString()));
      }
      // validate the required field `milestone`
      NullableMilestone.validateJsonElement(jsonObj.get("milestone"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the optional field `performed_via_github_app`
      if (jsonObj.get("performed_via_github_app") != null && !jsonObj.get("performed_via_github_app").isJsonNull()) {
        NullableIntegration.validateJsonElement(jsonObj.get("performed_via_github_app"));
      }
      // validate the optional field `pull_request`
      if (jsonObj.get("pull_request") != null && !jsonObj.get("pull_request").isJsonNull()) {
        IssuePullRequest.validateJsonElement(jsonObj.get("pull_request"));
      }
      // validate the optional field `reactions`
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull()) {
        ReactionRollup.validateJsonElement(jsonObj.get("reactions"));
      }
      // validate the optional field `repository`
      if (jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) {
        Repository.validateJsonElement(jsonObj.get("repository"));
      }
      if (!jsonObj.get("repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_url").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("state_reason") != null && !jsonObj.get("state_reason").isJsonNull()) && !jsonObj.get("state_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_reason").toString()));
      }
      // validate the optional field `state_reason`
      if (jsonObj.get("state_reason") != null && !jsonObj.get("state_reason").isJsonNull()) {
        StateReasonEnum.validateJsonElement(jsonObj.get("state_reason"));
      }
      if ((jsonObj.get("timeline_url") != null && !jsonObj.get("timeline_url").isJsonNull()) && !jsonObj.get("timeline_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeline_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeline_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      NullableSimpleUser.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Issue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Issue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Issue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Issue.class));

       return (TypeAdapter<T>) new TypeAdapter<Issue>() {
           @Override
           public void write(JsonWriter out, Issue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Issue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Issue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Issue
   * @throws IOException if the JSON string is invalid with respect to Issue
   */
  public static Issue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Issue.class);
  }

  /**
   * Convert an instance of Issue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

