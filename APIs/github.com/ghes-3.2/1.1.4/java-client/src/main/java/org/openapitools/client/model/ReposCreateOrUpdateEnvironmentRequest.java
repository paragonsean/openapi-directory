/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploymentBranchPolicySettings;
import org.openapitools.client.model.ReposCreateOrUpdateEnvironmentRequestReviewersInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposCreateOrUpdateEnvironmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposCreateOrUpdateEnvironmentRequest {
  public static final String SERIALIZED_NAME_DEPLOYMENT_BRANCH_POLICY = "deployment_branch_policy";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_BRANCH_POLICY)
  private DeploymentBranchPolicySettings deploymentBranchPolicy;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private List<ReposCreateOrUpdateEnvironmentRequestReviewersInner> reviewers;

  public static final String SERIALIZED_NAME_WAIT_TIMER = "wait_timer";
  @SerializedName(SERIALIZED_NAME_WAIT_TIMER)
  private Integer waitTimer;

  public ReposCreateOrUpdateEnvironmentRequest() {
  }

  public ReposCreateOrUpdateEnvironmentRequest deploymentBranchPolicy(DeploymentBranchPolicySettings deploymentBranchPolicy) {
    this.deploymentBranchPolicy = deploymentBranchPolicy;
    return this;
  }

  /**
   * Get deploymentBranchPolicy
   * @return deploymentBranchPolicy
   */
  @javax.annotation.Nullable
  public DeploymentBranchPolicySettings getDeploymentBranchPolicy() {
    return deploymentBranchPolicy;
  }

  public void setDeploymentBranchPolicy(DeploymentBranchPolicySettings deploymentBranchPolicy) {
    this.deploymentBranchPolicy = deploymentBranchPolicy;
  }


  public ReposCreateOrUpdateEnvironmentRequest reviewers(List<ReposCreateOrUpdateEnvironmentRequestReviewersInner> reviewers) {
    this.reviewers = reviewers;
    return this;
  }

  public ReposCreateOrUpdateEnvironmentRequest addReviewersItem(ReposCreateOrUpdateEnvironmentRequestReviewersInner reviewersItem) {
    if (this.reviewers == null) {
      this.reviewers = new ArrayList<>();
    }
    this.reviewers.add(reviewersItem);
    return this;
  }

  /**
   * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   * @return reviewers
   */
  @javax.annotation.Nullable
  public List<ReposCreateOrUpdateEnvironmentRequestReviewersInner> getReviewers() {
    return reviewers;
  }

  public void setReviewers(List<ReposCreateOrUpdateEnvironmentRequestReviewersInner> reviewers) {
    this.reviewers = reviewers;
  }


  public ReposCreateOrUpdateEnvironmentRequest waitTimer(Integer waitTimer) {
    this.waitTimer = waitTimer;
    return this;
  }

  /**
   * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
   * @return waitTimer
   */
  @javax.annotation.Nullable
  public Integer getWaitTimer() {
    return waitTimer;
  }

  public void setWaitTimer(Integer waitTimer) {
    this.waitTimer = waitTimer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposCreateOrUpdateEnvironmentRequest reposCreateOrUpdateEnvironmentRequest = (ReposCreateOrUpdateEnvironmentRequest) o;
    return Objects.equals(this.deploymentBranchPolicy, reposCreateOrUpdateEnvironmentRequest.deploymentBranchPolicy) &&
        Objects.equals(this.reviewers, reposCreateOrUpdateEnvironmentRequest.reviewers) &&
        Objects.equals(this.waitTimer, reposCreateOrUpdateEnvironmentRequest.waitTimer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentBranchPolicy, reviewers, waitTimer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposCreateOrUpdateEnvironmentRequest {\n");
    sb.append("    deploymentBranchPolicy: ").append(toIndentedString(deploymentBranchPolicy)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    waitTimer: ").append(toIndentedString(waitTimer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deployment_branch_policy");
    openapiFields.add("reviewers");
    openapiFields.add("wait_timer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposCreateOrUpdateEnvironmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposCreateOrUpdateEnvironmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposCreateOrUpdateEnvironmentRequest is not found in the empty JSON string", ReposCreateOrUpdateEnvironmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposCreateOrUpdateEnvironmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposCreateOrUpdateEnvironmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deployment_branch_policy`
      if (jsonObj.get("deployment_branch_policy") != null && !jsonObj.get("deployment_branch_policy").isJsonNull()) {
        DeploymentBranchPolicySettings.validateJsonElement(jsonObj.get("deployment_branch_policy"));
      }
      if (jsonObj.get("reviewers") != null && !jsonObj.get("reviewers").isJsonNull()) {
        JsonArray jsonArrayreviewers = jsonObj.getAsJsonArray("reviewers");
        if (jsonArrayreviewers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviewers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be an array in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
          }

          // validate the optional field `reviewers` (array)
          for (int i = 0; i < jsonArrayreviewers.size(); i++) {
            ReposCreateOrUpdateEnvironmentRequestReviewersInner.validateJsonElement(jsonArrayreviewers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposCreateOrUpdateEnvironmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposCreateOrUpdateEnvironmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposCreateOrUpdateEnvironmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposCreateOrUpdateEnvironmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposCreateOrUpdateEnvironmentRequest>() {
           @Override
           public void write(JsonWriter out, ReposCreateOrUpdateEnvironmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposCreateOrUpdateEnvironmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposCreateOrUpdateEnvironmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposCreateOrUpdateEnvironmentRequest
   * @throws IOException if the JSON string is invalid with respect to ReposCreateOrUpdateEnvironmentRequest
   */
  public static ReposCreateOrUpdateEnvironmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposCreateOrUpdateEnvironmentRequest.class);
  }

  /**
   * Convert an instance of ReposCreateOrUpdateEnvironmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

