/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Root
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Root {
  public static final String SERIALIZED_NAME_AUTHORIZATIONS_URL = "authorizations_url";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS_URL)
  private String authorizationsUrl;

  public static final String SERIALIZED_NAME_CODE_SEARCH_URL = "code_search_url";
  @SerializedName(SERIALIZED_NAME_CODE_SEARCH_URL)
  private String codeSearchUrl;

  public static final String SERIALIZED_NAME_COMMIT_SEARCH_URL = "commit_search_url";
  @SerializedName(SERIALIZED_NAME_COMMIT_SEARCH_URL)
  private String commitSearchUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_AUTHORIZATIONS_HTML_URL = "current_user_authorizations_html_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_AUTHORIZATIONS_HTML_URL)
  private String currentUserAuthorizationsHtmlUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_REPOSITORIES_URL = "current_user_repositories_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_REPOSITORIES_URL)
  private String currentUserRepositoriesUrl;

  public static final String SERIALIZED_NAME_CURRENT_USER_URL = "current_user_url";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_URL)
  private String currentUserUrl;

  public static final String SERIALIZED_NAME_EMAILS_URL = "emails_url";
  @SerializedName(SERIALIZED_NAME_EMAILS_URL)
  private String emailsUrl;

  public static final String SERIALIZED_NAME_EMOJIS_URL = "emojis_url";
  @SerializedName(SERIALIZED_NAME_EMOJIS_URL)
  private String emojisUrl;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private String eventsUrl;

  public static final String SERIALIZED_NAME_FEEDS_URL = "feeds_url";
  @SerializedName(SERIALIZED_NAME_FEEDS_URL)
  private String feedsUrl;

  public static final String SERIALIZED_NAME_FOLLOWERS_URL = "followers_url";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS_URL)
  private String followersUrl;

  public static final String SERIALIZED_NAME_FOLLOWING_URL = "following_url";
  @SerializedName(SERIALIZED_NAME_FOLLOWING_URL)
  private String followingUrl;

  public static final String SERIALIZED_NAME_GISTS_URL = "gists_url";
  @SerializedName(SERIALIZED_NAME_GISTS_URL)
  private String gistsUrl;

  public static final String SERIALIZED_NAME_HUB_URL = "hub_url";
  @SerializedName(SERIALIZED_NAME_HUB_URL)
  private String hubUrl;

  public static final String SERIALIZED_NAME_ISSUE_SEARCH_URL = "issue_search_url";
  @SerializedName(SERIALIZED_NAME_ISSUE_SEARCH_URL)
  private String issueSearchUrl;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_KEYS_URL = "keys_url";
  @SerializedName(SERIALIZED_NAME_KEYS_URL)
  private String keysUrl;

  public static final String SERIALIZED_NAME_LABEL_SEARCH_URL = "label_search_url";
  @SerializedName(SERIALIZED_NAME_LABEL_SEARCH_URL)
  private String labelSearchUrl;

  public static final String SERIALIZED_NAME_NOTIFICATIONS_URL = "notifications_url";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS_URL)
  private String notificationsUrl;

  public static final String SERIALIZED_NAME_ORGANIZATION_REPOSITORIES_URL = "organization_repositories_url";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_REPOSITORIES_URL)
  private String organizationRepositoriesUrl;

  public static final String SERIALIZED_NAME_ORGANIZATION_TEAMS_URL = "organization_teams_url";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TEAMS_URL)
  private String organizationTeamsUrl;

  public static final String SERIALIZED_NAME_ORGANIZATION_URL = "organization_url";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_URL)
  private String organizationUrl;

  public static final String SERIALIZED_NAME_PUBLIC_GISTS_URL = "public_gists_url";
  @SerializedName(SERIALIZED_NAME_PUBLIC_GISTS_URL)
  private String publicGistsUrl;

  public static final String SERIALIZED_NAME_RATE_LIMIT_URL = "rate_limit_url";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT_URL)
  private String rateLimitUrl;

  public static final String SERIALIZED_NAME_REPOSITORY_SEARCH_URL = "repository_search_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_SEARCH_URL)
  private String repositorySearchUrl;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repository_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private String repositoryUrl;

  public static final String SERIALIZED_NAME_STARRED_GISTS_URL = "starred_gists_url";
  @SerializedName(SERIALIZED_NAME_STARRED_GISTS_URL)
  private String starredGistsUrl;

  public static final String SERIALIZED_NAME_STARRED_URL = "starred_url";
  @SerializedName(SERIALIZED_NAME_STARRED_URL)
  private String starredUrl;

  public static final String SERIALIZED_NAME_TOPIC_SEARCH_URL = "topic_search_url";
  @SerializedName(SERIALIZED_NAME_TOPIC_SEARCH_URL)
  private String topicSearchUrl;

  public static final String SERIALIZED_NAME_USER_ORGANIZATIONS_URL = "user_organizations_url";
  @SerializedName(SERIALIZED_NAME_USER_ORGANIZATIONS_URL)
  private String userOrganizationsUrl;

  public static final String SERIALIZED_NAME_USER_REPOSITORIES_URL = "user_repositories_url";
  @SerializedName(SERIALIZED_NAME_USER_REPOSITORIES_URL)
  private String userRepositoriesUrl;

  public static final String SERIALIZED_NAME_USER_SEARCH_URL = "user_search_url";
  @SerializedName(SERIALIZED_NAME_USER_SEARCH_URL)
  private String userSearchUrl;

  public static final String SERIALIZED_NAME_USER_URL = "user_url";
  @SerializedName(SERIALIZED_NAME_USER_URL)
  private String userUrl;

  public Root() {
  }

  public Root authorizationsUrl(String authorizationsUrl) {
    this.authorizationsUrl = authorizationsUrl;
    return this;
  }

  /**
   * Get authorizationsUrl
   * @return authorizationsUrl
   */
  @javax.annotation.Nonnull
  public String getAuthorizationsUrl() {
    return authorizationsUrl;
  }

  public void setAuthorizationsUrl(String authorizationsUrl) {
    this.authorizationsUrl = authorizationsUrl;
  }


  public Root codeSearchUrl(String codeSearchUrl) {
    this.codeSearchUrl = codeSearchUrl;
    return this;
  }

  /**
   * Get codeSearchUrl
   * @return codeSearchUrl
   */
  @javax.annotation.Nonnull
  public String getCodeSearchUrl() {
    return codeSearchUrl;
  }

  public void setCodeSearchUrl(String codeSearchUrl) {
    this.codeSearchUrl = codeSearchUrl;
  }


  public Root commitSearchUrl(String commitSearchUrl) {
    this.commitSearchUrl = commitSearchUrl;
    return this;
  }

  /**
   * Get commitSearchUrl
   * @return commitSearchUrl
   */
  @javax.annotation.Nonnull
  public String getCommitSearchUrl() {
    return commitSearchUrl;
  }

  public void setCommitSearchUrl(String commitSearchUrl) {
    this.commitSearchUrl = commitSearchUrl;
  }


  public Root currentUserAuthorizationsHtmlUrl(String currentUserAuthorizationsHtmlUrl) {
    this.currentUserAuthorizationsHtmlUrl = currentUserAuthorizationsHtmlUrl;
    return this;
  }

  /**
   * Get currentUserAuthorizationsHtmlUrl
   * @return currentUserAuthorizationsHtmlUrl
   */
  @javax.annotation.Nonnull
  public String getCurrentUserAuthorizationsHtmlUrl() {
    return currentUserAuthorizationsHtmlUrl;
  }

  public void setCurrentUserAuthorizationsHtmlUrl(String currentUserAuthorizationsHtmlUrl) {
    this.currentUserAuthorizationsHtmlUrl = currentUserAuthorizationsHtmlUrl;
  }


  public Root currentUserRepositoriesUrl(String currentUserRepositoriesUrl) {
    this.currentUserRepositoriesUrl = currentUserRepositoriesUrl;
    return this;
  }

  /**
   * Get currentUserRepositoriesUrl
   * @return currentUserRepositoriesUrl
   */
  @javax.annotation.Nonnull
  public String getCurrentUserRepositoriesUrl() {
    return currentUserRepositoriesUrl;
  }

  public void setCurrentUserRepositoriesUrl(String currentUserRepositoriesUrl) {
    this.currentUserRepositoriesUrl = currentUserRepositoriesUrl;
  }


  public Root currentUserUrl(String currentUserUrl) {
    this.currentUserUrl = currentUserUrl;
    return this;
  }

  /**
   * Get currentUserUrl
   * @return currentUserUrl
   */
  @javax.annotation.Nonnull
  public String getCurrentUserUrl() {
    return currentUserUrl;
  }

  public void setCurrentUserUrl(String currentUserUrl) {
    this.currentUserUrl = currentUserUrl;
  }


  public Root emailsUrl(String emailsUrl) {
    this.emailsUrl = emailsUrl;
    return this;
  }

  /**
   * Get emailsUrl
   * @return emailsUrl
   */
  @javax.annotation.Nonnull
  public String getEmailsUrl() {
    return emailsUrl;
  }

  public void setEmailsUrl(String emailsUrl) {
    this.emailsUrl = emailsUrl;
  }


  public Root emojisUrl(String emojisUrl) {
    this.emojisUrl = emojisUrl;
    return this;
  }

  /**
   * Get emojisUrl
   * @return emojisUrl
   */
  @javax.annotation.Nonnull
  public String getEmojisUrl() {
    return emojisUrl;
  }

  public void setEmojisUrl(String emojisUrl) {
    this.emojisUrl = emojisUrl;
  }


  public Root eventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nonnull
  public String getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public Root feedsUrl(String feedsUrl) {
    this.feedsUrl = feedsUrl;
    return this;
  }

  /**
   * Get feedsUrl
   * @return feedsUrl
   */
  @javax.annotation.Nonnull
  public String getFeedsUrl() {
    return feedsUrl;
  }

  public void setFeedsUrl(String feedsUrl) {
    this.feedsUrl = feedsUrl;
  }


  public Root followersUrl(String followersUrl) {
    this.followersUrl = followersUrl;
    return this;
  }

  /**
   * Get followersUrl
   * @return followersUrl
   */
  @javax.annotation.Nonnull
  public String getFollowersUrl() {
    return followersUrl;
  }

  public void setFollowersUrl(String followersUrl) {
    this.followersUrl = followersUrl;
  }


  public Root followingUrl(String followingUrl) {
    this.followingUrl = followingUrl;
    return this;
  }

  /**
   * Get followingUrl
   * @return followingUrl
   */
  @javax.annotation.Nonnull
  public String getFollowingUrl() {
    return followingUrl;
  }

  public void setFollowingUrl(String followingUrl) {
    this.followingUrl = followingUrl;
  }


  public Root gistsUrl(String gistsUrl) {
    this.gistsUrl = gistsUrl;
    return this;
  }

  /**
   * Get gistsUrl
   * @return gistsUrl
   */
  @javax.annotation.Nonnull
  public String getGistsUrl() {
    return gistsUrl;
  }

  public void setGistsUrl(String gistsUrl) {
    this.gistsUrl = gistsUrl;
  }


  public Root hubUrl(String hubUrl) {
    this.hubUrl = hubUrl;
    return this;
  }

  /**
   * Get hubUrl
   * @return hubUrl
   */
  @javax.annotation.Nonnull
  public String getHubUrl() {
    return hubUrl;
  }

  public void setHubUrl(String hubUrl) {
    this.hubUrl = hubUrl;
  }


  public Root issueSearchUrl(String issueSearchUrl) {
    this.issueSearchUrl = issueSearchUrl;
    return this;
  }

  /**
   * Get issueSearchUrl
   * @return issueSearchUrl
   */
  @javax.annotation.Nonnull
  public String getIssueSearchUrl() {
    return issueSearchUrl;
  }

  public void setIssueSearchUrl(String issueSearchUrl) {
    this.issueSearchUrl = issueSearchUrl;
  }


  public Root issuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
    return this;
  }

  /**
   * Get issuesUrl
   * @return issuesUrl
   */
  @javax.annotation.Nonnull
  public String getIssuesUrl() {
    return issuesUrl;
  }

  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public Root keysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
    return this;
  }

  /**
   * Get keysUrl
   * @return keysUrl
   */
  @javax.annotation.Nonnull
  public String getKeysUrl() {
    return keysUrl;
  }

  public void setKeysUrl(String keysUrl) {
    this.keysUrl = keysUrl;
  }


  public Root labelSearchUrl(String labelSearchUrl) {
    this.labelSearchUrl = labelSearchUrl;
    return this;
  }

  /**
   * Get labelSearchUrl
   * @return labelSearchUrl
   */
  @javax.annotation.Nonnull
  public String getLabelSearchUrl() {
    return labelSearchUrl;
  }

  public void setLabelSearchUrl(String labelSearchUrl) {
    this.labelSearchUrl = labelSearchUrl;
  }


  public Root notificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
    return this;
  }

  /**
   * Get notificationsUrl
   * @return notificationsUrl
   */
  @javax.annotation.Nonnull
  public String getNotificationsUrl() {
    return notificationsUrl;
  }

  public void setNotificationsUrl(String notificationsUrl) {
    this.notificationsUrl = notificationsUrl;
  }


  public Root organizationRepositoriesUrl(String organizationRepositoriesUrl) {
    this.organizationRepositoriesUrl = organizationRepositoriesUrl;
    return this;
  }

  /**
   * Get organizationRepositoriesUrl
   * @return organizationRepositoriesUrl
   */
  @javax.annotation.Nonnull
  public String getOrganizationRepositoriesUrl() {
    return organizationRepositoriesUrl;
  }

  public void setOrganizationRepositoriesUrl(String organizationRepositoriesUrl) {
    this.organizationRepositoriesUrl = organizationRepositoriesUrl;
  }


  public Root organizationTeamsUrl(String organizationTeamsUrl) {
    this.organizationTeamsUrl = organizationTeamsUrl;
    return this;
  }

  /**
   * Get organizationTeamsUrl
   * @return organizationTeamsUrl
   */
  @javax.annotation.Nonnull
  public String getOrganizationTeamsUrl() {
    return organizationTeamsUrl;
  }

  public void setOrganizationTeamsUrl(String organizationTeamsUrl) {
    this.organizationTeamsUrl = organizationTeamsUrl;
  }


  public Root organizationUrl(String organizationUrl) {
    this.organizationUrl = organizationUrl;
    return this;
  }

  /**
   * Get organizationUrl
   * @return organizationUrl
   */
  @javax.annotation.Nonnull
  public String getOrganizationUrl() {
    return organizationUrl;
  }

  public void setOrganizationUrl(String organizationUrl) {
    this.organizationUrl = organizationUrl;
  }


  public Root publicGistsUrl(String publicGistsUrl) {
    this.publicGistsUrl = publicGistsUrl;
    return this;
  }

  /**
   * Get publicGistsUrl
   * @return publicGistsUrl
   */
  @javax.annotation.Nonnull
  public String getPublicGistsUrl() {
    return publicGistsUrl;
  }

  public void setPublicGistsUrl(String publicGistsUrl) {
    this.publicGistsUrl = publicGistsUrl;
  }


  public Root rateLimitUrl(String rateLimitUrl) {
    this.rateLimitUrl = rateLimitUrl;
    return this;
  }

  /**
   * Get rateLimitUrl
   * @return rateLimitUrl
   */
  @javax.annotation.Nonnull
  public String getRateLimitUrl() {
    return rateLimitUrl;
  }

  public void setRateLimitUrl(String rateLimitUrl) {
    this.rateLimitUrl = rateLimitUrl;
  }


  public Root repositorySearchUrl(String repositorySearchUrl) {
    this.repositorySearchUrl = repositorySearchUrl;
    return this;
  }

  /**
   * Get repositorySearchUrl
   * @return repositorySearchUrl
   */
  @javax.annotation.Nonnull
  public String getRepositorySearchUrl() {
    return repositorySearchUrl;
  }

  public void setRepositorySearchUrl(String repositorySearchUrl) {
    this.repositorySearchUrl = repositorySearchUrl;
  }


  public Root repositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

  /**
   * Get repositoryUrl
   * @return repositoryUrl
   */
  @javax.annotation.Nonnull
  public String getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public Root starredGistsUrl(String starredGistsUrl) {
    this.starredGistsUrl = starredGistsUrl;
    return this;
  }

  /**
   * Get starredGistsUrl
   * @return starredGistsUrl
   */
  @javax.annotation.Nonnull
  public String getStarredGistsUrl() {
    return starredGistsUrl;
  }

  public void setStarredGistsUrl(String starredGistsUrl) {
    this.starredGistsUrl = starredGistsUrl;
  }


  public Root starredUrl(String starredUrl) {
    this.starredUrl = starredUrl;
    return this;
  }

  /**
   * Get starredUrl
   * @return starredUrl
   */
  @javax.annotation.Nonnull
  public String getStarredUrl() {
    return starredUrl;
  }

  public void setStarredUrl(String starredUrl) {
    this.starredUrl = starredUrl;
  }


  public Root topicSearchUrl(String topicSearchUrl) {
    this.topicSearchUrl = topicSearchUrl;
    return this;
  }

  /**
   * Get topicSearchUrl
   * @return topicSearchUrl
   */
  @javax.annotation.Nullable
  public String getTopicSearchUrl() {
    return topicSearchUrl;
  }

  public void setTopicSearchUrl(String topicSearchUrl) {
    this.topicSearchUrl = topicSearchUrl;
  }


  public Root userOrganizationsUrl(String userOrganizationsUrl) {
    this.userOrganizationsUrl = userOrganizationsUrl;
    return this;
  }

  /**
   * Get userOrganizationsUrl
   * @return userOrganizationsUrl
   */
  @javax.annotation.Nonnull
  public String getUserOrganizationsUrl() {
    return userOrganizationsUrl;
  }

  public void setUserOrganizationsUrl(String userOrganizationsUrl) {
    this.userOrganizationsUrl = userOrganizationsUrl;
  }


  public Root userRepositoriesUrl(String userRepositoriesUrl) {
    this.userRepositoriesUrl = userRepositoriesUrl;
    return this;
  }

  /**
   * Get userRepositoriesUrl
   * @return userRepositoriesUrl
   */
  @javax.annotation.Nonnull
  public String getUserRepositoriesUrl() {
    return userRepositoriesUrl;
  }

  public void setUserRepositoriesUrl(String userRepositoriesUrl) {
    this.userRepositoriesUrl = userRepositoriesUrl;
  }


  public Root userSearchUrl(String userSearchUrl) {
    this.userSearchUrl = userSearchUrl;
    return this;
  }

  /**
   * Get userSearchUrl
   * @return userSearchUrl
   */
  @javax.annotation.Nonnull
  public String getUserSearchUrl() {
    return userSearchUrl;
  }

  public void setUserSearchUrl(String userSearchUrl) {
    this.userSearchUrl = userSearchUrl;
  }


  public Root userUrl(String userUrl) {
    this.userUrl = userUrl;
    return this;
  }

  /**
   * Get userUrl
   * @return userUrl
   */
  @javax.annotation.Nonnull
  public String getUserUrl() {
    return userUrl;
  }

  public void setUserUrl(String userUrl) {
    this.userUrl = userUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Root root = (Root) o;
    return Objects.equals(this.authorizationsUrl, root.authorizationsUrl) &&
        Objects.equals(this.codeSearchUrl, root.codeSearchUrl) &&
        Objects.equals(this.commitSearchUrl, root.commitSearchUrl) &&
        Objects.equals(this.currentUserAuthorizationsHtmlUrl, root.currentUserAuthorizationsHtmlUrl) &&
        Objects.equals(this.currentUserRepositoriesUrl, root.currentUserRepositoriesUrl) &&
        Objects.equals(this.currentUserUrl, root.currentUserUrl) &&
        Objects.equals(this.emailsUrl, root.emailsUrl) &&
        Objects.equals(this.emojisUrl, root.emojisUrl) &&
        Objects.equals(this.eventsUrl, root.eventsUrl) &&
        Objects.equals(this.feedsUrl, root.feedsUrl) &&
        Objects.equals(this.followersUrl, root.followersUrl) &&
        Objects.equals(this.followingUrl, root.followingUrl) &&
        Objects.equals(this.gistsUrl, root.gistsUrl) &&
        Objects.equals(this.hubUrl, root.hubUrl) &&
        Objects.equals(this.issueSearchUrl, root.issueSearchUrl) &&
        Objects.equals(this.issuesUrl, root.issuesUrl) &&
        Objects.equals(this.keysUrl, root.keysUrl) &&
        Objects.equals(this.labelSearchUrl, root.labelSearchUrl) &&
        Objects.equals(this.notificationsUrl, root.notificationsUrl) &&
        Objects.equals(this.organizationRepositoriesUrl, root.organizationRepositoriesUrl) &&
        Objects.equals(this.organizationTeamsUrl, root.organizationTeamsUrl) &&
        Objects.equals(this.organizationUrl, root.organizationUrl) &&
        Objects.equals(this.publicGistsUrl, root.publicGistsUrl) &&
        Objects.equals(this.rateLimitUrl, root.rateLimitUrl) &&
        Objects.equals(this.repositorySearchUrl, root.repositorySearchUrl) &&
        Objects.equals(this.repositoryUrl, root.repositoryUrl) &&
        Objects.equals(this.starredGistsUrl, root.starredGistsUrl) &&
        Objects.equals(this.starredUrl, root.starredUrl) &&
        Objects.equals(this.topicSearchUrl, root.topicSearchUrl) &&
        Objects.equals(this.userOrganizationsUrl, root.userOrganizationsUrl) &&
        Objects.equals(this.userRepositoriesUrl, root.userRepositoriesUrl) &&
        Objects.equals(this.userSearchUrl, root.userSearchUrl) &&
        Objects.equals(this.userUrl, root.userUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationsUrl, codeSearchUrl, commitSearchUrl, currentUserAuthorizationsHtmlUrl, currentUserRepositoriesUrl, currentUserUrl, emailsUrl, emojisUrl, eventsUrl, feedsUrl, followersUrl, followingUrl, gistsUrl, hubUrl, issueSearchUrl, issuesUrl, keysUrl, labelSearchUrl, notificationsUrl, organizationRepositoriesUrl, organizationTeamsUrl, organizationUrl, publicGistsUrl, rateLimitUrl, repositorySearchUrl, repositoryUrl, starredGistsUrl, starredUrl, topicSearchUrl, userOrganizationsUrl, userRepositoriesUrl, userSearchUrl, userUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Root {\n");
    sb.append("    authorizationsUrl: ").append(toIndentedString(authorizationsUrl)).append("\n");
    sb.append("    codeSearchUrl: ").append(toIndentedString(codeSearchUrl)).append("\n");
    sb.append("    commitSearchUrl: ").append(toIndentedString(commitSearchUrl)).append("\n");
    sb.append("    currentUserAuthorizationsHtmlUrl: ").append(toIndentedString(currentUserAuthorizationsHtmlUrl)).append("\n");
    sb.append("    currentUserRepositoriesUrl: ").append(toIndentedString(currentUserRepositoriesUrl)).append("\n");
    sb.append("    currentUserUrl: ").append(toIndentedString(currentUserUrl)).append("\n");
    sb.append("    emailsUrl: ").append(toIndentedString(emailsUrl)).append("\n");
    sb.append("    emojisUrl: ").append(toIndentedString(emojisUrl)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    feedsUrl: ").append(toIndentedString(feedsUrl)).append("\n");
    sb.append("    followersUrl: ").append(toIndentedString(followersUrl)).append("\n");
    sb.append("    followingUrl: ").append(toIndentedString(followingUrl)).append("\n");
    sb.append("    gistsUrl: ").append(toIndentedString(gistsUrl)).append("\n");
    sb.append("    hubUrl: ").append(toIndentedString(hubUrl)).append("\n");
    sb.append("    issueSearchUrl: ").append(toIndentedString(issueSearchUrl)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    keysUrl: ").append(toIndentedString(keysUrl)).append("\n");
    sb.append("    labelSearchUrl: ").append(toIndentedString(labelSearchUrl)).append("\n");
    sb.append("    notificationsUrl: ").append(toIndentedString(notificationsUrl)).append("\n");
    sb.append("    organizationRepositoriesUrl: ").append(toIndentedString(organizationRepositoriesUrl)).append("\n");
    sb.append("    organizationTeamsUrl: ").append(toIndentedString(organizationTeamsUrl)).append("\n");
    sb.append("    organizationUrl: ").append(toIndentedString(organizationUrl)).append("\n");
    sb.append("    publicGistsUrl: ").append(toIndentedString(publicGistsUrl)).append("\n");
    sb.append("    rateLimitUrl: ").append(toIndentedString(rateLimitUrl)).append("\n");
    sb.append("    repositorySearchUrl: ").append(toIndentedString(repositorySearchUrl)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    starredGistsUrl: ").append(toIndentedString(starredGistsUrl)).append("\n");
    sb.append("    starredUrl: ").append(toIndentedString(starredUrl)).append("\n");
    sb.append("    topicSearchUrl: ").append(toIndentedString(topicSearchUrl)).append("\n");
    sb.append("    userOrganizationsUrl: ").append(toIndentedString(userOrganizationsUrl)).append("\n");
    sb.append("    userRepositoriesUrl: ").append(toIndentedString(userRepositoriesUrl)).append("\n");
    sb.append("    userSearchUrl: ").append(toIndentedString(userSearchUrl)).append("\n");
    sb.append("    userUrl: ").append(toIndentedString(userUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizations_url");
    openapiFields.add("code_search_url");
    openapiFields.add("commit_search_url");
    openapiFields.add("current_user_authorizations_html_url");
    openapiFields.add("current_user_repositories_url");
    openapiFields.add("current_user_url");
    openapiFields.add("emails_url");
    openapiFields.add("emojis_url");
    openapiFields.add("events_url");
    openapiFields.add("feeds_url");
    openapiFields.add("followers_url");
    openapiFields.add("following_url");
    openapiFields.add("gists_url");
    openapiFields.add("hub_url");
    openapiFields.add("issue_search_url");
    openapiFields.add("issues_url");
    openapiFields.add("keys_url");
    openapiFields.add("label_search_url");
    openapiFields.add("notifications_url");
    openapiFields.add("organization_repositories_url");
    openapiFields.add("organization_teams_url");
    openapiFields.add("organization_url");
    openapiFields.add("public_gists_url");
    openapiFields.add("rate_limit_url");
    openapiFields.add("repository_search_url");
    openapiFields.add("repository_url");
    openapiFields.add("starred_gists_url");
    openapiFields.add("starred_url");
    openapiFields.add("topic_search_url");
    openapiFields.add("user_organizations_url");
    openapiFields.add("user_repositories_url");
    openapiFields.add("user_search_url");
    openapiFields.add("user_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizations_url");
    openapiRequiredFields.add("code_search_url");
    openapiRequiredFields.add("commit_search_url");
    openapiRequiredFields.add("current_user_authorizations_html_url");
    openapiRequiredFields.add("current_user_repositories_url");
    openapiRequiredFields.add("current_user_url");
    openapiRequiredFields.add("emails_url");
    openapiRequiredFields.add("emojis_url");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("feeds_url");
    openapiRequiredFields.add("followers_url");
    openapiRequiredFields.add("following_url");
    openapiRequiredFields.add("gists_url");
    openapiRequiredFields.add("hub_url");
    openapiRequiredFields.add("issue_search_url");
    openapiRequiredFields.add("issues_url");
    openapiRequiredFields.add("keys_url");
    openapiRequiredFields.add("label_search_url");
    openapiRequiredFields.add("notifications_url");
    openapiRequiredFields.add("organization_repositories_url");
    openapiRequiredFields.add("organization_teams_url");
    openapiRequiredFields.add("organization_url");
    openapiRequiredFields.add("public_gists_url");
    openapiRequiredFields.add("rate_limit_url");
    openapiRequiredFields.add("repository_search_url");
    openapiRequiredFields.add("repository_url");
    openapiRequiredFields.add("starred_gists_url");
    openapiRequiredFields.add("starred_url");
    openapiRequiredFields.add("user_organizations_url");
    openapiRequiredFields.add("user_repositories_url");
    openapiRequiredFields.add("user_search_url");
    openapiRequiredFields.add("user_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Root
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Root.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Root is not found in the empty JSON string", Root.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Root.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Root` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Root.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorizations_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizations_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizations_url").toString()));
      }
      if (!jsonObj.get("code_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code_search_url").toString()));
      }
      if (!jsonObj.get("commit_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_search_url").toString()));
      }
      if (!jsonObj.get("current_user_authorizations_html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_authorizations_html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_authorizations_html_url").toString()));
      }
      if (!jsonObj.get("current_user_repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_repositories_url").toString()));
      }
      if (!jsonObj.get("current_user_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_user_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_user_url").toString()));
      }
      if (!jsonObj.get("emails_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emails_url").toString()));
      }
      if (!jsonObj.get("emojis_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emojis_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emojis_url").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("feeds_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeds_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeds_url").toString()));
      }
      if (!jsonObj.get("followers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followers_url").toString()));
      }
      if (!jsonObj.get("following_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `following_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("following_url").toString()));
      }
      if (!jsonObj.get("gists_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gists_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gists_url").toString()));
      }
      if (!jsonObj.get("hub_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hub_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hub_url").toString()));
      }
      if (!jsonObj.get("issue_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_search_url").toString()));
      }
      if (!jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if (!jsonObj.get("keys_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keys_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keys_url").toString()));
      }
      if (!jsonObj.get("label_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_search_url").toString()));
      }
      if (!jsonObj.get("notifications_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifications_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifications_url").toString()));
      }
      if (!jsonObj.get("organization_repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_repositories_url").toString()));
      }
      if (!jsonObj.get("organization_teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_teams_url").toString()));
      }
      if (!jsonObj.get("organization_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_url").toString()));
      }
      if (!jsonObj.get("public_gists_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_gists_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_gists_url").toString()));
      }
      if (!jsonObj.get("rate_limit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_limit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_limit_url").toString()));
      }
      if (!jsonObj.get("repository_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_search_url").toString()));
      }
      if (!jsonObj.get("repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_url").toString()));
      }
      if (!jsonObj.get("starred_gists_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starred_gists_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starred_gists_url").toString()));
      }
      if (!jsonObj.get("starred_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starred_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starred_url").toString()));
      }
      if ((jsonObj.get("topic_search_url") != null && !jsonObj.get("topic_search_url").isJsonNull()) && !jsonObj.get("topic_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_search_url").toString()));
      }
      if (!jsonObj.get("user_organizations_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_organizations_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_organizations_url").toString()));
      }
      if (!jsonObj.get("user_repositories_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_repositories_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_repositories_url").toString()));
      }
      if (!jsonObj.get("user_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_search_url").toString()));
      }
      if (!jsonObj.get("user_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Root.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Root' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Root> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Root.class));

       return (TypeAdapter<T>) new TypeAdapter<Root>() {
           @Override
           public void write(JsonWriter out, Root value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Root read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Root given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Root
   * @throws IOException if the JSON string is invalid with respect to Root
   */
  public static Root fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Root.class);
  }

  /**
   * Convert an instance of Root to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

