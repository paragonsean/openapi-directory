/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Gist;
import org.openapitools.client.model.GistHistory;
import org.openapitools.client.model.GistSimpleFilesValue;
import org.openapitools.client.model.GistSimpleForksInner;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gist Simple
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GistSimple {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Integer comments;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private String commentsUrl;

  public static final String SERIALIZED_NAME_COMMITS_URL = "commits_url";
  @SerializedName(SERIALIZED_NAME_COMMITS_URL)
  private String commitsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Map<String, GistSimpleFilesValue> files = new HashMap<>();

  public static final String SERIALIZED_NAME_FORK_OF = "fork_of";
  @SerializedName(SERIALIZED_NAME_FORK_OF)
  private Gist forkOf;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FORKS)
  private List<GistSimpleForksInner> forks;

  public static final String SERIALIZED_NAME_FORKS_URL = "forks_url";
  @SerializedName(SERIALIZED_NAME_FORKS_URL)
  private String forksUrl;

  public static final String SERIALIZED_NAME_GIT_PULL_URL = "git_pull_url";
  @SerializedName(SERIALIZED_NAME_GIT_PULL_URL)
  private String gitPullUrl;

  public static final String SERIALIZED_NAME_GIT_PUSH_URL = "git_push_url";
  @SerializedName(SERIALIZED_NAME_GIT_PUSH_URL)
  private String gitPushUrl;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<GistHistory> history;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private String htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private SimpleUser owner;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_TRUNCATED = "truncated";
  @SerializedName(SERIALIZED_NAME_TRUNCATED)
  private Boolean truncated;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public GistSimple() {
  }

  public GistSimple comments(Integer comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public Integer getComments() {
    return comments;
  }

  public void setComments(Integer comments) {
    this.comments = comments;
  }


  public GistSimple commentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nullable
  public String getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(String commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public GistSimple commitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
    return this;
  }

  /**
   * Get commitsUrl
   * @return commitsUrl
   */
  @javax.annotation.Nullable
  public String getCommitsUrl() {
    return commitsUrl;
  }

  public void setCommitsUrl(String commitsUrl) {
    this.commitsUrl = commitsUrl;
  }


  public GistSimple createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GistSimple description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GistSimple files(Map<String, GistSimpleFilesValue> files) {
    this.files = files;
    return this;
  }

  public GistSimple putFilesItem(String key, GistSimpleFilesValue filesItem) {
    if (this.files == null) {
      this.files = new HashMap<>();
    }
    this.files.put(key, filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public Map<String, GistSimpleFilesValue> getFiles() {
    return files;
  }

  public void setFiles(Map<String, GistSimpleFilesValue> files) {
    this.files = files;
  }


  public GistSimple forkOf(Gist forkOf) {
    this.forkOf = forkOf;
    return this;
  }

  /**
   * Get forkOf
   * @return forkOf
   */
  @javax.annotation.Nullable
  public Gist getForkOf() {
    return forkOf;
  }

  public void setForkOf(Gist forkOf) {
    this.forkOf = forkOf;
  }


  @Deprecated
  public GistSimple forks(List<GistSimpleForksInner> forks) {
    this.forks = forks;
    return this;
  }

  public GistSimple addForksItem(GistSimpleForksInner forksItem) {
    if (this.forks == null) {
      this.forks = new ArrayList<>();
    }
    this.forks.add(forksItem);
    return this;
  }

  /**
   * Get forks
   * @return forks
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<GistSimpleForksInner> getForks() {
    return forks;
  }

  @Deprecated
  public void setForks(List<GistSimpleForksInner> forks) {
    this.forks = forks;
  }


  public GistSimple forksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
    return this;
  }

  /**
   * Get forksUrl
   * @return forksUrl
   */
  @javax.annotation.Nullable
  public String getForksUrl() {
    return forksUrl;
  }

  public void setForksUrl(String forksUrl) {
    this.forksUrl = forksUrl;
  }


  public GistSimple gitPullUrl(String gitPullUrl) {
    this.gitPullUrl = gitPullUrl;
    return this;
  }

  /**
   * Get gitPullUrl
   * @return gitPullUrl
   */
  @javax.annotation.Nullable
  public String getGitPullUrl() {
    return gitPullUrl;
  }

  public void setGitPullUrl(String gitPullUrl) {
    this.gitPullUrl = gitPullUrl;
  }


  public GistSimple gitPushUrl(String gitPushUrl) {
    this.gitPushUrl = gitPushUrl;
    return this;
  }

  /**
   * Get gitPushUrl
   * @return gitPushUrl
   */
  @javax.annotation.Nullable
  public String getGitPushUrl() {
    return gitPushUrl;
  }

  public void setGitPushUrl(String gitPushUrl) {
    this.gitPushUrl = gitPushUrl;
  }


  @Deprecated
  public GistSimple history(List<GistHistory> history) {
    this.history = history;
    return this;
  }

  public GistSimple addHistoryItem(GistHistory historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Get history
   * @return history
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<GistHistory> getHistory() {
    return history;
  }

  @Deprecated
  public void setHistory(List<GistHistory> history) {
    this.history = history;
  }


  public GistSimple htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public GistSimple id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GistSimple nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public GistSimple owner(SimpleUser owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public SimpleUser getOwner() {
    return owner;
  }

  public void setOwner(SimpleUser owner) {
    this.owner = owner;
  }


  public GistSimple _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Get _public
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public GistSimple truncated(Boolean truncated) {
    this.truncated = truncated;
    return this;
  }

  /**
   * Get truncated
   * @return truncated
   */
  @javax.annotation.Nullable
  public Boolean getTruncated() {
    return truncated;
  }

  public void setTruncated(Boolean truncated) {
    this.truncated = truncated;
  }


  public GistSimple updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public GistSimple url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public GistSimple user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GistSimple gistSimple = (GistSimple) o;
    return Objects.equals(this.comments, gistSimple.comments) &&
        Objects.equals(this.commentsUrl, gistSimple.commentsUrl) &&
        Objects.equals(this.commitsUrl, gistSimple.commitsUrl) &&
        Objects.equals(this.createdAt, gistSimple.createdAt) &&
        Objects.equals(this.description, gistSimple.description) &&
        Objects.equals(this.files, gistSimple.files) &&
        Objects.equals(this.forkOf, gistSimple.forkOf) &&
        Objects.equals(this.forks, gistSimple.forks) &&
        Objects.equals(this.forksUrl, gistSimple.forksUrl) &&
        Objects.equals(this.gitPullUrl, gistSimple.gitPullUrl) &&
        Objects.equals(this.gitPushUrl, gistSimple.gitPushUrl) &&
        Objects.equals(this.history, gistSimple.history) &&
        Objects.equals(this.htmlUrl, gistSimple.htmlUrl) &&
        Objects.equals(this.id, gistSimple.id) &&
        Objects.equals(this.nodeId, gistSimple.nodeId) &&
        Objects.equals(this.owner, gistSimple.owner) &&
        Objects.equals(this._public, gistSimple._public) &&
        Objects.equals(this.truncated, gistSimple.truncated) &&
        Objects.equals(this.updatedAt, gistSimple.updatedAt) &&
        Objects.equals(this.url, gistSimple.url) &&
        Objects.equals(this.user, gistSimple.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, commentsUrl, commitsUrl, createdAt, description, files, forkOf, forks, forksUrl, gitPullUrl, gitPushUrl, history, htmlUrl, id, nodeId, owner, _public, truncated, updatedAt, url, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GistSimple {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    forkOf: ").append(toIndentedString(forkOf)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    gitPullUrl: ").append(toIndentedString(gitPullUrl)).append("\n");
    sb.append("    gitPushUrl: ").append(toIndentedString(gitPushUrl)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("comments_url");
    openapiFields.add("commits_url");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("files");
    openapiFields.add("fork_of");
    openapiFields.add("forks");
    openapiFields.add("forks_url");
    openapiFields.add("git_pull_url");
    openapiFields.add("git_push_url");
    openapiFields.add("history");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("node_id");
    openapiFields.add("owner");
    openapiFields.add("public");
    openapiFields.add("truncated");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GistSimple
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GistSimple.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GistSimple is not found in the empty JSON string", GistSimple.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GistSimple.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GistSimple` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments_url") != null && !jsonObj.get("comments_url").isJsonNull()) && !jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if ((jsonObj.get("commits_url") != null && !jsonObj.get("commits_url").isJsonNull()) && !jsonObj.get("commits_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commits_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commits_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `fork_of`
      if (jsonObj.get("fork_of") != null && !jsonObj.get("fork_of").isJsonNull()) {
        Gist.validateJsonElement(jsonObj.get("fork_of"));
      }
      if (jsonObj.get("forks") != null && !jsonObj.get("forks").isJsonNull()) {
        JsonArray jsonArrayforks = jsonObj.getAsJsonArray("forks");
        if (jsonArrayforks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forks` to be an array in the JSON string but got `%s`", jsonObj.get("forks").toString()));
          }

          // validate the optional field `forks` (array)
          for (int i = 0; i < jsonArrayforks.size(); i++) {
            GistSimpleForksInner.validateJsonElement(jsonArrayforks.get(i));
          };
        }
      }
      if ((jsonObj.get("forks_url") != null && !jsonObj.get("forks_url").isJsonNull()) && !jsonObj.get("forks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_url").toString()));
      }
      if ((jsonObj.get("git_pull_url") != null && !jsonObj.get("git_pull_url").isJsonNull()) && !jsonObj.get("git_pull_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_pull_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_pull_url").toString()));
      }
      if ((jsonObj.get("git_push_url") != null && !jsonObj.get("git_push_url").isJsonNull()) && !jsonObj.get("git_push_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_push_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_push_url").toString()));
      }
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        JsonArray jsonArrayhistory = jsonObj.getAsJsonArray("history");
        if (jsonArrayhistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
          }

          // validate the optional field `history` (array)
          for (int i = 0; i < jsonArrayhistory.size(); i++) {
            GistHistory.validateJsonElement(jsonArrayhistory.get(i));
          };
        }
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        SimpleUser.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GistSimple.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GistSimple' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GistSimple> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GistSimple.class));

       return (TypeAdapter<T>) new TypeAdapter<GistSimple>() {
           @Override
           public void write(JsonWriter out, GistSimple value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GistSimple read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GistSimple given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GistSimple
   * @throws IOException if the JSON string is invalid with respect to GistSimple
   */
  public static GistSimple fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GistSimple.class);
  }

  /**
   * Convert an instance of GistSimple to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

