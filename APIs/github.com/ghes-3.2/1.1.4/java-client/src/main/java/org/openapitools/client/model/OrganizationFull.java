/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.OrganizationFullPlan;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Organization Full
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:55.498988-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrganizationFull {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private URI blog;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private Integer collaborators;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION = "default_repository_permission";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REPOSITORY_PERMISSION)
  private String defaultRepositoryPermission;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISK_USAGE = "disk_usage";
  @SerializedName(SERIALIZED_NAME_DISK_USAGE)
  private Integer diskUsage;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private URI eventsUrl;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private Integer followers;

  public static final String SERIALIZED_NAME_FOLLOWING = "following";
  @SerializedName(SERIALIZED_NAME_FOLLOWING)
  private Integer following;

  public static final String SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS = "has_organization_projects";
  @SerializedName(SERIALIZED_NAME_HAS_ORGANIZATION_PROJECTS)
  private Boolean hasOrganizationProjects;

  public static final String SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS = "has_repository_projects";
  @SerializedName(SERIALIZED_NAME_HAS_REPOSITORY_PROJECTS)
  private Boolean hasRepositoryProjects;

  public static final String SERIALIZED_NAME_HOOKS_URL = "hooks_url";
  @SerializedName(SERIALIZED_NAME_HOOKS_URL)
  private String hooksUrl;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_VERIFIED = "is_verified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  private Boolean isVerified;

  public static final String SERIALIZED_NAME_ISSUES_URL = "issues_url";
  @SerializedName(SERIALIZED_NAME_ISSUES_URL)
  private String issuesUrl;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE = "members_allowed_repository_creation_type";
  @SerializedName(SERIALIZED_NAME_MEMBERS_ALLOWED_REPOSITORY_CREATION_TYPE)
  private String membersAllowedRepositoryCreationType;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES = "members_can_create_internal_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_INTERNAL_REPOSITORIES)
  private Boolean membersCanCreateInternalRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES = "members_can_create_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PAGES)
  private Boolean membersCanCreatePages;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_PAGES = "members_can_create_private_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_PAGES)
  private Boolean membersCanCreatePrivatePages;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES = "members_can_create_private_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PRIVATE_REPOSITORIES)
  private Boolean membersCanCreatePrivateRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_PAGES = "members_can_create_public_pages";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_PAGES)
  private Boolean membersCanCreatePublicPages;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES = "members_can_create_public_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_PUBLIC_REPOSITORIES)
  private Boolean membersCanCreatePublicRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES = "members_can_create_repositories";
  @SerializedName(SERIALIZED_NAME_MEMBERS_CAN_CREATE_REPOSITORIES)
  private Boolean membersCanCreateRepositories;

  public static final String SERIALIZED_NAME_MEMBERS_URL = "members_url";
  @SerializedName(SERIALIZED_NAME_MEMBERS_URL)
  private String membersUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_OWNED_PRIVATE_REPOS = "owned_private_repos";
  @SerializedName(SERIALIZED_NAME_OWNED_PRIVATE_REPOS)
  private Integer ownedPrivateRepos;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private OrganizationFullPlan plan;

  public static final String SERIALIZED_NAME_PRIVATE_GISTS = "private_gists";
  @SerializedName(SERIALIZED_NAME_PRIVATE_GISTS)
  private Integer privateGists;

  public static final String SERIALIZED_NAME_PUBLIC_GISTS = "public_gists";
  @SerializedName(SERIALIZED_NAME_PUBLIC_GISTS)
  private Integer publicGists;

  public static final String SERIALIZED_NAME_PUBLIC_MEMBERS_URL = "public_members_url";
  @SerializedName(SERIALIZED_NAME_PUBLIC_MEMBERS_URL)
  private String publicMembersUrl;

  public static final String SERIALIZED_NAME_PUBLIC_REPOS = "public_repos";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REPOS)
  private Integer publicRepos;

  public static final String SERIALIZED_NAME_REPOS_URL = "repos_url";
  @SerializedName(SERIALIZED_NAME_REPOS_URL)
  private URI reposUrl;

  public static final String SERIALIZED_NAME_TOTAL_PRIVATE_REPOS = "total_private_repos";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRIVATE_REPOS)
  private Integer totalPrivateRepos;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public static final String SERIALIZED_NAME_TWO_FACTOR_REQUIREMENT_ENABLED = "two_factor_requirement_enabled";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_REQUIREMENT_ENABLED)
  private Boolean twoFactorRequirementEnabled;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public OrganizationFull() {
  }

  public OrganizationFull avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nonnull
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public OrganizationFull billingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
    return this;
  }

  /**
   * Get billingEmail
   * @return billingEmail
   */
  @javax.annotation.Nullable
  public String getBillingEmail() {
    return billingEmail;
  }

  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public OrganizationFull blog(URI blog) {
    this.blog = blog;
    return this;
  }

  /**
   * Get blog
   * @return blog
   */
  @javax.annotation.Nullable
  public URI getBlog() {
    return blog;
  }

  public void setBlog(URI blog) {
    this.blog = blog;
  }


  public OrganizationFull collaborators(Integer collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  /**
   * Get collaborators
   * @return collaborators
   */
  @javax.annotation.Nullable
  public Integer getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(Integer collaborators) {
    this.collaborators = collaborators;
  }


  public OrganizationFull company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public OrganizationFull createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OrganizationFull defaultRepositoryPermission(String defaultRepositoryPermission) {
    this.defaultRepositoryPermission = defaultRepositoryPermission;
    return this;
  }

  /**
   * Get defaultRepositoryPermission
   * @return defaultRepositoryPermission
   */
  @javax.annotation.Nullable
  public String getDefaultRepositoryPermission() {
    return defaultRepositoryPermission;
  }

  public void setDefaultRepositoryPermission(String defaultRepositoryPermission) {
    this.defaultRepositoryPermission = defaultRepositoryPermission;
  }


  public OrganizationFull description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrganizationFull diskUsage(Integer diskUsage) {
    this.diskUsage = diskUsage;
    return this;
  }

  /**
   * Get diskUsage
   * @return diskUsage
   */
  @javax.annotation.Nullable
  public Integer getDiskUsage() {
    return diskUsage;
  }

  public void setDiskUsage(Integer diskUsage) {
    this.diskUsage = diskUsage;
  }


  public OrganizationFull email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrganizationFull eventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nonnull
  public URI getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(URI eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public OrganizationFull followers(Integer followers) {
    this.followers = followers;
    return this;
  }

  /**
   * Get followers
   * @return followers
   */
  @javax.annotation.Nonnull
  public Integer getFollowers() {
    return followers;
  }

  public void setFollowers(Integer followers) {
    this.followers = followers;
  }


  public OrganizationFull following(Integer following) {
    this.following = following;
    return this;
  }

  /**
   * Get following
   * @return following
   */
  @javax.annotation.Nonnull
  public Integer getFollowing() {
    return following;
  }

  public void setFollowing(Integer following) {
    this.following = following;
  }


  public OrganizationFull hasOrganizationProjects(Boolean hasOrganizationProjects) {
    this.hasOrganizationProjects = hasOrganizationProjects;
    return this;
  }

  /**
   * Get hasOrganizationProjects
   * @return hasOrganizationProjects
   */
  @javax.annotation.Nonnull
  public Boolean getHasOrganizationProjects() {
    return hasOrganizationProjects;
  }

  public void setHasOrganizationProjects(Boolean hasOrganizationProjects) {
    this.hasOrganizationProjects = hasOrganizationProjects;
  }


  public OrganizationFull hasRepositoryProjects(Boolean hasRepositoryProjects) {
    this.hasRepositoryProjects = hasRepositoryProjects;
    return this;
  }

  /**
   * Get hasRepositoryProjects
   * @return hasRepositoryProjects
   */
  @javax.annotation.Nonnull
  public Boolean getHasRepositoryProjects() {
    return hasRepositoryProjects;
  }

  public void setHasRepositoryProjects(Boolean hasRepositoryProjects) {
    this.hasRepositoryProjects = hasRepositoryProjects;
  }


  public OrganizationFull hooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
    return this;
  }

  /**
   * Get hooksUrl
   * @return hooksUrl
   */
  @javax.annotation.Nonnull
  public String getHooksUrl() {
    return hooksUrl;
  }

  public void setHooksUrl(String hooksUrl) {
    this.hooksUrl = hooksUrl;
  }


  public OrganizationFull htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public OrganizationFull id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public OrganizationFull isVerified(Boolean isVerified) {
    this.isVerified = isVerified;
    return this;
  }

  /**
   * Get isVerified
   * @return isVerified
   */
  @javax.annotation.Nullable
  public Boolean getIsVerified() {
    return isVerified;
  }

  public void setIsVerified(Boolean isVerified) {
    this.isVerified = isVerified;
  }


  public OrganizationFull issuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
    return this;
  }

  /**
   * Get issuesUrl
   * @return issuesUrl
   */
  @javax.annotation.Nonnull
  public String getIssuesUrl() {
    return issuesUrl;
  }

  public void setIssuesUrl(String issuesUrl) {
    this.issuesUrl = issuesUrl;
  }


  public OrganizationFull location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public OrganizationFull login(String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public OrganizationFull membersAllowedRepositoryCreationType(String membersAllowedRepositoryCreationType) {
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
    return this;
  }

  /**
   * Get membersAllowedRepositoryCreationType
   * @return membersAllowedRepositoryCreationType
   */
  @javax.annotation.Nullable
  public String getMembersAllowedRepositoryCreationType() {
    return membersAllowedRepositoryCreationType;
  }

  public void setMembersAllowedRepositoryCreationType(String membersAllowedRepositoryCreationType) {
    this.membersAllowedRepositoryCreationType = membersAllowedRepositoryCreationType;
  }


  public OrganizationFull membersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
    return this;
  }

  /**
   * Get membersCanCreateInternalRepositories
   * @return membersCanCreateInternalRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreateInternalRepositories() {
    return membersCanCreateInternalRepositories;
  }

  public void setMembersCanCreateInternalRepositories(Boolean membersCanCreateInternalRepositories) {
    this.membersCanCreateInternalRepositories = membersCanCreateInternalRepositories;
  }


  public OrganizationFull membersCanCreatePages(Boolean membersCanCreatePages) {
    this.membersCanCreatePages = membersCanCreatePages;
    return this;
  }

  /**
   * Get membersCanCreatePages
   * @return membersCanCreatePages
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePages() {
    return membersCanCreatePages;
  }

  public void setMembersCanCreatePages(Boolean membersCanCreatePages) {
    this.membersCanCreatePages = membersCanCreatePages;
  }


  public OrganizationFull membersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
    this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
    return this;
  }

  /**
   * Get membersCanCreatePrivatePages
   * @return membersCanCreatePrivatePages
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePrivatePages() {
    return membersCanCreatePrivatePages;
  }

  public void setMembersCanCreatePrivatePages(Boolean membersCanCreatePrivatePages) {
    this.membersCanCreatePrivatePages = membersCanCreatePrivatePages;
  }


  public OrganizationFull membersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
    return this;
  }

  /**
   * Get membersCanCreatePrivateRepositories
   * @return membersCanCreatePrivateRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePrivateRepositories() {
    return membersCanCreatePrivateRepositories;
  }

  public void setMembersCanCreatePrivateRepositories(Boolean membersCanCreatePrivateRepositories) {
    this.membersCanCreatePrivateRepositories = membersCanCreatePrivateRepositories;
  }


  public OrganizationFull membersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
    this.membersCanCreatePublicPages = membersCanCreatePublicPages;
    return this;
  }

  /**
   * Get membersCanCreatePublicPages
   * @return membersCanCreatePublicPages
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePublicPages() {
    return membersCanCreatePublicPages;
  }

  public void setMembersCanCreatePublicPages(Boolean membersCanCreatePublicPages) {
    this.membersCanCreatePublicPages = membersCanCreatePublicPages;
  }


  public OrganizationFull membersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
    return this;
  }

  /**
   * Get membersCanCreatePublicRepositories
   * @return membersCanCreatePublicRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreatePublicRepositories() {
    return membersCanCreatePublicRepositories;
  }

  public void setMembersCanCreatePublicRepositories(Boolean membersCanCreatePublicRepositories) {
    this.membersCanCreatePublicRepositories = membersCanCreatePublicRepositories;
  }


  public OrganizationFull membersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    this.membersCanCreateRepositories = membersCanCreateRepositories;
    return this;
  }

  /**
   * Get membersCanCreateRepositories
   * @return membersCanCreateRepositories
   */
  @javax.annotation.Nullable
  public Boolean getMembersCanCreateRepositories() {
    return membersCanCreateRepositories;
  }

  public void setMembersCanCreateRepositories(Boolean membersCanCreateRepositories) {
    this.membersCanCreateRepositories = membersCanCreateRepositories;
  }


  public OrganizationFull membersUrl(String membersUrl) {
    this.membersUrl = membersUrl;
    return this;
  }

  /**
   * Get membersUrl
   * @return membersUrl
   */
  @javax.annotation.Nonnull
  public String getMembersUrl() {
    return membersUrl;
  }

  public void setMembersUrl(String membersUrl) {
    this.membersUrl = membersUrl;
  }


  public OrganizationFull name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OrganizationFull nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public OrganizationFull ownedPrivateRepos(Integer ownedPrivateRepos) {
    this.ownedPrivateRepos = ownedPrivateRepos;
    return this;
  }

  /**
   * Get ownedPrivateRepos
   * @return ownedPrivateRepos
   */
  @javax.annotation.Nullable
  public Integer getOwnedPrivateRepos() {
    return ownedPrivateRepos;
  }

  public void setOwnedPrivateRepos(Integer ownedPrivateRepos) {
    this.ownedPrivateRepos = ownedPrivateRepos;
  }


  public OrganizationFull plan(OrganizationFullPlan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public OrganizationFullPlan getPlan() {
    return plan;
  }

  public void setPlan(OrganizationFullPlan plan) {
    this.plan = plan;
  }


  public OrganizationFull privateGists(Integer privateGists) {
    this.privateGists = privateGists;
    return this;
  }

  /**
   * Get privateGists
   * @return privateGists
   */
  @javax.annotation.Nullable
  public Integer getPrivateGists() {
    return privateGists;
  }

  public void setPrivateGists(Integer privateGists) {
    this.privateGists = privateGists;
  }


  public OrganizationFull publicGists(Integer publicGists) {
    this.publicGists = publicGists;
    return this;
  }

  /**
   * Get publicGists
   * @return publicGists
   */
  @javax.annotation.Nonnull
  public Integer getPublicGists() {
    return publicGists;
  }

  public void setPublicGists(Integer publicGists) {
    this.publicGists = publicGists;
  }


  public OrganizationFull publicMembersUrl(String publicMembersUrl) {
    this.publicMembersUrl = publicMembersUrl;
    return this;
  }

  /**
   * Get publicMembersUrl
   * @return publicMembersUrl
   */
  @javax.annotation.Nonnull
  public String getPublicMembersUrl() {
    return publicMembersUrl;
  }

  public void setPublicMembersUrl(String publicMembersUrl) {
    this.publicMembersUrl = publicMembersUrl;
  }


  public OrganizationFull publicRepos(Integer publicRepos) {
    this.publicRepos = publicRepos;
    return this;
  }

  /**
   * Get publicRepos
   * @return publicRepos
   */
  @javax.annotation.Nonnull
  public Integer getPublicRepos() {
    return publicRepos;
  }

  public void setPublicRepos(Integer publicRepos) {
    this.publicRepos = publicRepos;
  }


  public OrganizationFull reposUrl(URI reposUrl) {
    this.reposUrl = reposUrl;
    return this;
  }

  /**
   * Get reposUrl
   * @return reposUrl
   */
  @javax.annotation.Nonnull
  public URI getReposUrl() {
    return reposUrl;
  }

  public void setReposUrl(URI reposUrl) {
    this.reposUrl = reposUrl;
  }


  public OrganizationFull totalPrivateRepos(Integer totalPrivateRepos) {
    this.totalPrivateRepos = totalPrivateRepos;
    return this;
  }

  /**
   * Get totalPrivateRepos
   * @return totalPrivateRepos
   */
  @javax.annotation.Nullable
  public Integer getTotalPrivateRepos() {
    return totalPrivateRepos;
  }

  public void setTotalPrivateRepos(Integer totalPrivateRepos) {
    this.totalPrivateRepos = totalPrivateRepos;
  }


  public OrganizationFull twitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
    return this;
  }

  /**
   * Get twitterUsername
   * @return twitterUsername
   */
  @javax.annotation.Nullable
  public String getTwitterUsername() {
    return twitterUsername;
  }

  public void setTwitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
  }


  public OrganizationFull twoFactorRequirementEnabled(Boolean twoFactorRequirementEnabled) {
    this.twoFactorRequirementEnabled = twoFactorRequirementEnabled;
    return this;
  }

  /**
   * Get twoFactorRequirementEnabled
   * @return twoFactorRequirementEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTwoFactorRequirementEnabled() {
    return twoFactorRequirementEnabled;
  }

  public void setTwoFactorRequirementEnabled(Boolean twoFactorRequirementEnabled) {
    this.twoFactorRequirementEnabled = twoFactorRequirementEnabled;
  }


  public OrganizationFull type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public OrganizationFull updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public OrganizationFull url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationFull organizationFull = (OrganizationFull) o;
    return Objects.equals(this.avatarUrl, organizationFull.avatarUrl) &&
        Objects.equals(this.billingEmail, organizationFull.billingEmail) &&
        Objects.equals(this.blog, organizationFull.blog) &&
        Objects.equals(this.collaborators, organizationFull.collaborators) &&
        Objects.equals(this.company, organizationFull.company) &&
        Objects.equals(this.createdAt, organizationFull.createdAt) &&
        Objects.equals(this.defaultRepositoryPermission, organizationFull.defaultRepositoryPermission) &&
        Objects.equals(this.description, organizationFull.description) &&
        Objects.equals(this.diskUsage, organizationFull.diskUsage) &&
        Objects.equals(this.email, organizationFull.email) &&
        Objects.equals(this.eventsUrl, organizationFull.eventsUrl) &&
        Objects.equals(this.followers, organizationFull.followers) &&
        Objects.equals(this.following, organizationFull.following) &&
        Objects.equals(this.hasOrganizationProjects, organizationFull.hasOrganizationProjects) &&
        Objects.equals(this.hasRepositoryProjects, organizationFull.hasRepositoryProjects) &&
        Objects.equals(this.hooksUrl, organizationFull.hooksUrl) &&
        Objects.equals(this.htmlUrl, organizationFull.htmlUrl) &&
        Objects.equals(this.id, organizationFull.id) &&
        Objects.equals(this.isVerified, organizationFull.isVerified) &&
        Objects.equals(this.issuesUrl, organizationFull.issuesUrl) &&
        Objects.equals(this.location, organizationFull.location) &&
        Objects.equals(this.login, organizationFull.login) &&
        Objects.equals(this.membersAllowedRepositoryCreationType, organizationFull.membersAllowedRepositoryCreationType) &&
        Objects.equals(this.membersCanCreateInternalRepositories, organizationFull.membersCanCreateInternalRepositories) &&
        Objects.equals(this.membersCanCreatePages, organizationFull.membersCanCreatePages) &&
        Objects.equals(this.membersCanCreatePrivatePages, organizationFull.membersCanCreatePrivatePages) &&
        Objects.equals(this.membersCanCreatePrivateRepositories, organizationFull.membersCanCreatePrivateRepositories) &&
        Objects.equals(this.membersCanCreatePublicPages, organizationFull.membersCanCreatePublicPages) &&
        Objects.equals(this.membersCanCreatePublicRepositories, organizationFull.membersCanCreatePublicRepositories) &&
        Objects.equals(this.membersCanCreateRepositories, organizationFull.membersCanCreateRepositories) &&
        Objects.equals(this.membersUrl, organizationFull.membersUrl) &&
        Objects.equals(this.name, organizationFull.name) &&
        Objects.equals(this.nodeId, organizationFull.nodeId) &&
        Objects.equals(this.ownedPrivateRepos, organizationFull.ownedPrivateRepos) &&
        Objects.equals(this.plan, organizationFull.plan) &&
        Objects.equals(this.privateGists, organizationFull.privateGists) &&
        Objects.equals(this.publicGists, organizationFull.publicGists) &&
        Objects.equals(this.publicMembersUrl, organizationFull.publicMembersUrl) &&
        Objects.equals(this.publicRepos, organizationFull.publicRepos) &&
        Objects.equals(this.reposUrl, organizationFull.reposUrl) &&
        Objects.equals(this.totalPrivateRepos, organizationFull.totalPrivateRepos) &&
        Objects.equals(this.twitterUsername, organizationFull.twitterUsername) &&
        Objects.equals(this.twoFactorRequirementEnabled, organizationFull.twoFactorRequirementEnabled) &&
        Objects.equals(this.type, organizationFull.type) &&
        Objects.equals(this.updatedAt, organizationFull.updatedAt) &&
        Objects.equals(this.url, organizationFull.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, billingEmail, blog, collaborators, company, createdAt, defaultRepositoryPermission, description, diskUsage, email, eventsUrl, followers, following, hasOrganizationProjects, hasRepositoryProjects, hooksUrl, htmlUrl, id, isVerified, issuesUrl, location, login, membersAllowedRepositoryCreationType, membersCanCreateInternalRepositories, membersCanCreatePages, membersCanCreatePrivatePages, membersCanCreatePrivateRepositories, membersCanCreatePublicPages, membersCanCreatePublicRepositories, membersCanCreateRepositories, membersUrl, name, nodeId, ownedPrivateRepos, plan, privateGists, publicGists, publicMembersUrl, publicRepos, reposUrl, totalPrivateRepos, twitterUsername, twoFactorRequirementEnabled, type, updatedAt, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationFull {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultRepositoryPermission: ").append(toIndentedString(defaultRepositoryPermission)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskUsage: ").append(toIndentedString(diskUsage)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    following: ").append(toIndentedString(following)).append("\n");
    sb.append("    hasOrganizationProjects: ").append(toIndentedString(hasOrganizationProjects)).append("\n");
    sb.append("    hasRepositoryProjects: ").append(toIndentedString(hasRepositoryProjects)).append("\n");
    sb.append("    hooksUrl: ").append(toIndentedString(hooksUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    issuesUrl: ").append(toIndentedString(issuesUrl)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    membersAllowedRepositoryCreationType: ").append(toIndentedString(membersAllowedRepositoryCreationType)).append("\n");
    sb.append("    membersCanCreateInternalRepositories: ").append(toIndentedString(membersCanCreateInternalRepositories)).append("\n");
    sb.append("    membersCanCreatePages: ").append(toIndentedString(membersCanCreatePages)).append("\n");
    sb.append("    membersCanCreatePrivatePages: ").append(toIndentedString(membersCanCreatePrivatePages)).append("\n");
    sb.append("    membersCanCreatePrivateRepositories: ").append(toIndentedString(membersCanCreatePrivateRepositories)).append("\n");
    sb.append("    membersCanCreatePublicPages: ").append(toIndentedString(membersCanCreatePublicPages)).append("\n");
    sb.append("    membersCanCreatePublicRepositories: ").append(toIndentedString(membersCanCreatePublicRepositories)).append("\n");
    sb.append("    membersCanCreateRepositories: ").append(toIndentedString(membersCanCreateRepositories)).append("\n");
    sb.append("    membersUrl: ").append(toIndentedString(membersUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    ownedPrivateRepos: ").append(toIndentedString(ownedPrivateRepos)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    privateGists: ").append(toIndentedString(privateGists)).append("\n");
    sb.append("    publicGists: ").append(toIndentedString(publicGists)).append("\n");
    sb.append("    publicMembersUrl: ").append(toIndentedString(publicMembersUrl)).append("\n");
    sb.append("    publicRepos: ").append(toIndentedString(publicRepos)).append("\n");
    sb.append("    reposUrl: ").append(toIndentedString(reposUrl)).append("\n");
    sb.append("    totalPrivateRepos: ").append(toIndentedString(totalPrivateRepos)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("    twoFactorRequirementEnabled: ").append(toIndentedString(twoFactorRequirementEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_url");
    openapiFields.add("billing_email");
    openapiFields.add("blog");
    openapiFields.add("collaborators");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("default_repository_permission");
    openapiFields.add("description");
    openapiFields.add("disk_usage");
    openapiFields.add("email");
    openapiFields.add("events_url");
    openapiFields.add("followers");
    openapiFields.add("following");
    openapiFields.add("has_organization_projects");
    openapiFields.add("has_repository_projects");
    openapiFields.add("hooks_url");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("is_verified");
    openapiFields.add("issues_url");
    openapiFields.add("location");
    openapiFields.add("login");
    openapiFields.add("members_allowed_repository_creation_type");
    openapiFields.add("members_can_create_internal_repositories");
    openapiFields.add("members_can_create_pages");
    openapiFields.add("members_can_create_private_pages");
    openapiFields.add("members_can_create_private_repositories");
    openapiFields.add("members_can_create_public_pages");
    openapiFields.add("members_can_create_public_repositories");
    openapiFields.add("members_can_create_repositories");
    openapiFields.add("members_url");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("owned_private_repos");
    openapiFields.add("plan");
    openapiFields.add("private_gists");
    openapiFields.add("public_gists");
    openapiFields.add("public_members_url");
    openapiFields.add("public_repos");
    openapiFields.add("repos_url");
    openapiFields.add("total_private_repos");
    openapiFields.add("twitter_username");
    openapiFields.add("two_factor_requirement_enabled");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatar_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("followers");
    openapiRequiredFields.add("following");
    openapiRequiredFields.add("has_organization_projects");
    openapiRequiredFields.add("has_repository_projects");
    openapiRequiredFields.add("hooks_url");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("issues_url");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("members_url");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("public_gists");
    openapiRequiredFields.add("public_members_url");
    openapiRequiredFields.add("public_repos");
    openapiRequiredFields.add("repos_url");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationFull
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationFull.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationFull is not found in the empty JSON string", OrganizationFull.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationFull.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationFull` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationFull.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) && !jsonObj.get("blog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("default_repository_permission") != null && !jsonObj.get("default_repository_permission").isJsonNull()) && !jsonObj.get("default_repository_permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_repository_permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_repository_permission").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("hooks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hooks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hooks_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("issues_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_url").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("members_allowed_repository_creation_type") != null && !jsonObj.get("members_allowed_repository_creation_type").isJsonNull()) && !jsonObj.get("members_allowed_repository_creation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members_allowed_repository_creation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members_allowed_repository_creation_type").toString()));
      }
      if (!jsonObj.get("members_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        OrganizationFullPlan.validateJsonElement(jsonObj.get("plan"));
      }
      if (!jsonObj.get("public_members_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_members_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_members_url").toString()));
      }
      if (!jsonObj.get("repos_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repos_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repos_url").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationFull.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationFull' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationFull> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationFull.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationFull>() {
           @Override
           public void write(JsonWriter out, OrganizationFull value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationFull read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationFull given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationFull
   * @throws IOException if the JSON string is invalid with respect to OrganizationFull
   */
  public static OrganizationFull fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationFull.class);
  }

  /**
   * Convert an instance of OrganizationFull to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

