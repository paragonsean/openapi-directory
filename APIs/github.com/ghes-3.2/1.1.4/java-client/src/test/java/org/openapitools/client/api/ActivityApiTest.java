/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.ActivityListReposStarredByUser200Response;
import org.openapitools.client.model.ActivityListStargazersForRepo200Response;
import org.openapitools.client.model.ActivityMarkNotificationsAsRead202Response;
import org.openapitools.client.model.ActivityMarkNotificationsAsReadRequest;
import org.openapitools.client.model.ActivityMarkRepoNotificationsAsReadRequest;
import org.openapitools.client.model.ActivitySetRepoSubscriptionRequest;
import org.openapitools.client.model.ActivitySetThreadSubscriptionRequest;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Feed;
import org.openapitools.client.model.MinimalRepository;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositorySubscription;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.StarredRepository;
import org.openapitools.client.model.Thread;
import org.openapitools.client.model.ThreadSubscription;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActivityApi
 */
@Disabled
public class ActivityApiTest {

    private final ActivityApi api = new ActivityApi();

    /**
     * Check if a repository is starred by the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityCheckRepoIsStarredByAuthenticatedUserTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.activityCheckRepoIsStarredByAuthenticatedUser(owner, repo);
        // TODO: test validations
    }

    /**
     * Delete a repository subscription
     *
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository&#39;s subscription manually](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#set-a-repository-subscription).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityDeleteRepoSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.activityDeleteRepoSubscription(owner, repo);
        // TODO: test validations
    }

    /**
     * Delete a thread subscription
     *
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#set-a-thread-subscription) endpoint and set &#x60;ignore&#x60; to &#x60;true&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityDeleteThreadSubscriptionTest() throws ApiException {
        Integer threadId = null;
        api.activityDeleteThreadSubscription(threadId);
        // TODO: test validations
    }

    /**
     * Get feeds
     *
     * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:  *   **Timeline**: The GitHub Enterprise Server global public timeline *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#hypermedia) *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.  **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.2/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityGetFeedsTest() throws ApiException {
        Feed response = api.activityGetFeeds();
        // TODO: test validations
    }

    /**
     * Get a repository subscription
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityGetRepoSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        RepositorySubscription response = api.activityGetRepoSubscription(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a thread
     *
     * Gets information about a notification thread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityGetThreadTest() throws ApiException {
        Integer threadId = null;
        Thread response = api.activityGetThread(threadId);
        // TODO: test validations
    }

    /**
     * Get a thread subscription for the authenticated user
     *
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#get-a-repository-subscription).  Note that subscriptions are only generated if a user is participating in a conversation--for example, they&#39;ve replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityGetThreadSubscriptionForAuthenticatedUserTest() throws ApiException {
        Integer threadId = null;
        ThreadSubscription response = api.activityGetThreadSubscriptionForAuthenticatedUser(threadId);
        // TODO: test validations
    }

    /**
     * List events for the authenticated user
     *
     * If you are authenticated as the given user, you will see your private events. Otherwise, you&#39;ll only see public events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListEventsForAuthenticatedUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListEventsForAuthenticatedUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List notifications for the authenticated user
     *
     * List all notifications for the current user, sorted by most recently updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListNotificationsForAuthenticatedUserTest() throws ApiException {
        Boolean all = null;
        Boolean participating = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer page = null;
        Integer perPage = null;
        List<Thread> response = api.activityListNotificationsForAuthenticatedUser(all, participating, since, before, page, perPage);
        // TODO: test validations
    }

    /**
     * List organization events for the authenticated user
     *
     * This is the user&#39;s organization dashboard. You must be authenticated as the user to view this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListOrgEventsForAuthenticatedUserTest() throws ApiException {
        String username = null;
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListOrgEventsForAuthenticatedUser(username, org, perPage, page);
        // TODO: test validations
    }

    /**
     * List public events
     *
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListPublicEventsTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListPublicEvents(perPage, page);
        // TODO: test validations
    }

    /**
     * List public events for a network of repositories
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListPublicEventsForRepoNetworkTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListPublicEventsForRepoNetwork(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List public events for a user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListPublicEventsForUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListPublicEventsForUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List public organization events
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListPublicOrgEventsTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListPublicOrgEvents(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List events received by the authenticated user
     *
     * These are events that you&#39;ve received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you&#39;ll only see public events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListReceivedEventsForUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListReceivedEventsForUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List public events received by a user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListReceivedPublicEventsForUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListReceivedPublicEventsForUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository events
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListRepoEventsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<Event> response = api.activityListRepoEvents(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository notifications for the authenticated user
     *
     * Lists all notifications for the current user in the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListRepoNotificationsForAuthenticatedUserTest() throws ApiException {
        String owner = null;
        String repo = null;
        Boolean all = null;
        Boolean participating = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Integer perPage = null;
        Integer page = null;
        List<Thread> response = api.activityListRepoNotificationsForAuthenticatedUser(owner, repo, all, participating, since, before, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories starred by the authenticated user
     *
     * Lists repositories the authenticated user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.2/rest/overview/media-types/) via the &#x60;Accept&#x60; header: &#x60;application/vnd.github.star+json&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListReposStarredByAuthenticatedUserTest() throws ApiException {
        String sort = null;
        String direction = null;
        Integer perPage = null;
        Integer page = null;
        List<Repository> response = api.activityListReposStarredByAuthenticatedUser(sort, direction, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories starred by a user
     *
     * Lists repositories a user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.2/rest/overview/media-types/) via the &#x60;Accept&#x60; header: &#x60;application/vnd.github.star+json&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListReposStarredByUserTest() throws ApiException {
        String username = null;
        String sort = null;
        String direction = null;
        Integer perPage = null;
        Integer page = null;
        ActivityListReposStarredByUser200Response response = api.activityListReposStarredByUser(username, sort, direction, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories watched by a user
     *
     * Lists repositories a user is watching.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListReposWatchedByUserTest() throws ApiException {
        String username = null;
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.activityListReposWatchedByUser(username, perPage, page);
        // TODO: test validations
    }

    /**
     * List stargazers
     *
     * Lists the people that have starred the repository.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.2/rest/overview/media-types/) via the &#x60;Accept&#x60; header: &#x60;application/vnd.github.star+json&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListStargazersForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActivityListStargazersForRepo200Response response = api.activityListStargazersForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories watched by the authenticated user
     *
     * Lists repositories the authenticated user is watching.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListWatchedReposForAuthenticatedUserTest() throws ApiException {
        Integer perPage = null;
        Integer page = null;
        List<MinimalRepository> response = api.activityListWatchedReposForAuthenticatedUser(perPage, page);
        // TODO: test validations
    }

    /**
     * List watchers
     *
     * Lists the people watching the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityListWatchersForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.activityListWatchersForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * Mark notifications as read
     *
     * Marks all notifications as \&quot;read\&quot; for the current user. If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityMarkNotificationsAsReadTest() throws ApiException {
        ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest = null;
        ActivityMarkNotificationsAsRead202Response response = api.activityMarkNotificationsAsRead(activityMarkNotificationsAsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark repository notifications as read
     *
     * Marks all notifications in a repository as \&quot;read\&quot; for the current user. If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityMarkRepoNotificationsAsReadTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest = null;
        EnterpriseAdminUpdateOrgName202Response response = api.activityMarkRepoNotificationsAsRead(owner, repo, activityMarkRepoNotificationsAsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark a thread as read
     *
     * Marks a thread as \&quot;read.\&quot; Marking a thread as \&quot;read\&quot; is equivalent to clicking a notification in your notification inbox on GitHub Enterprise Server: https://github.com/notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityMarkThreadAsReadTest() throws ApiException {
        Integer threadId = null;
        api.activityMarkThreadAsRead(threadId);
        // TODO: test validations
    }

    /**
     * Set a repository subscription
     *
     * If you would like to watch a repository, set &#x60;subscribed&#x60; to &#x60;true&#x60;. If you would like to ignore notifications made within a repository, set &#x60;ignored&#x60; to &#x60;true&#x60;. If you would like to stop watching a repository, [delete the repository&#39;s subscription](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#delete-a-repository-subscription) completely.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activitySetRepoSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest = null;
        RepositorySubscription response = api.activitySetRepoSubscription(owner, repo, activitySetRepoSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Set a thread subscription
     *
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.  You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.  Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.2/rest/reference/activity#delete-a-thread-subscription) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activitySetThreadSubscriptionTest() throws ApiException {
        Integer threadId = null;
        ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest = null;
        ThreadSubscription response = api.activitySetThreadSubscription(threadId, activitySetThreadSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Star a repository for the authenticated user
     *
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityStarRepoForAuthenticatedUserTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.activityStarRepoForAuthenticatedUser(owner, repo);
        // TODO: test validations
    }

    /**
     * Unstar a repository for the authenticated user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activityUnstarRepoForAuthenticatedUserTest() throws ApiException {
        String owner = null;
        String repo = null;
        api.activityUnstarRepoForAuthenticatedUser(owner, repo);
        // TODO: test validations
    }

}
