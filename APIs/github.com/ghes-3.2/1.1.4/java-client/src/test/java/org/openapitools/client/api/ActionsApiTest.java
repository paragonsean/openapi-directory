/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActionsCreateOrUpdateEnvironmentSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateOrgSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateRepoSecretRequest;
import org.openapitools.client.model.ActionsCreateSelfHostedRunnerGroupForOrgRequest;
import org.openapitools.client.model.ActionsCreateWorkflowDispatchRequest;
import org.openapitools.client.model.ActionsGetWorkflowWorkflowIdParameter;
import org.openapitools.client.model.ActionsListArtifactsForRepo200Response;
import org.openapitools.client.model.ActionsListJobsForWorkflowRun200Response;
import org.openapitools.client.model.ActionsListOrgSecrets200Response;
import org.openapitools.client.model.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response;
import org.openapitools.client.model.ActionsListRepoSecrets200Response;
import org.openapitools.client.model.ActionsListRepoWorkflows200Response;
import org.openapitools.client.model.ActionsListSelectedReposForOrgSecret200Response;
import org.openapitools.client.model.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnerGroupsForOrg200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnersForOrg200Response;
import org.openapitools.client.model.ActionsListWorkflowRunsForRepo200Response;
import org.openapitools.client.model.ActionsOrganizationPermissions;
import org.openapitools.client.model.ActionsPublicKey;
import org.openapitools.client.model.ActionsRepositoryPermissions;
import org.openapitools.client.model.ActionsReviewPendingDeploymentsForRunRequest;
import org.openapitools.client.model.ActionsSecret;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsOrganizationRequest;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsRepositoryRequest;
import org.openapitools.client.model.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgSecretRequest;
import org.openapitools.client.model.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
import org.openapitools.client.model.ActionsUpdateSelfHostedRunnerGroupForOrgRequest;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.AuthenticationToken;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;
import org.openapitools.client.model.EnvironmentApprovals;
import org.openapitools.client.model.Job;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationActionsSecret;
import org.openapitools.client.model.PendingDeployment;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerApplication;
import org.openapitools.client.model.RunnerGroupsOrg;
import org.openapitools.client.model.SelectedActions;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowRun;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActionsApi
 */
@Disabled
public class ActionsApiTest {

    private final ActionsApi api = new ActionsApi();

    /**
     * Add repository access to a self-hosted runner group in an organization
     *
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddRepoAccessToSelfHostedRunnerGroupInOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer repositoryId = null;
        api.actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, repositoryId);
        // TODO: test validations
    }

    /**
     * Add selected repository to an organization secret
     *
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddSelectedRepoToOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer repositoryId = null;
        api.actionsAddSelectedRepoToOrgSecret(org, secretName, repositoryId);
        // TODO: test validations
    }

    /**
     * Add a self-hosted runner to a group for an organization
     *
     * Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsAddSelfHostedRunnerToGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer runnerId = null;
        api.actionsAddSelfHostedRunnerToGroupForOrg(org, runnerGroupId, runnerId);
        // TODO: test validations
    }

    /**
     * Cancel a workflow run
     *
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCancelWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Object response = api.actionsCancelWorkflowRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Create or update an environment secret
     *
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        ActionsCreateOrUpdateEnvironmentSecretRequest actionsCreateOrUpdateEnvironmentSecretRequest = null;
        Object response = api.actionsCreateOrUpdateEnvironmentSecret(repositoryId, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest);
        // TODO: test validations
    }

    /**
     * Create or update an organization secret
     *
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest = null;
        Object response = api.actionsCreateOrUpdateOrgSecret(org, secretName, actionsCreateOrUpdateOrgSecretRequest);
        // TODO: test validations
    }

    /**
     * Create or update a repository secret
     *
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;libsodium-wrappers&#39;) const secret &#x3D; &#39;plain-text-secret&#39; // replace with the secret you want to encrypt const key &#x3D; &#39;base64-encoded-public-key&#39; // replace with the Base64 encoded public key  //Check if libsodium is ready and then proceed. sodium.ready.then(() &#x3D;&gt; {   // Convert Secret &amp; Base64 key to Uint8Array.   let binkey &#x3D; sodium.from_base64(key, sodium.base64_variants.ORIGINAL)   let binsec &#x3D; sodium.from_string(secret)    //Encrypt the secret using LibSodium   let encBytes &#x3D; sodium.crypto_box_seal(binsec, binkey)    // Convert encrypted Uint8Array to Base64   let output &#x3D; sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)    console.log(output) }); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateOrUpdateRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest = null;
        Object response = api.actionsCreateOrUpdateRepoSecret(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest);
        // TODO: test validations
    }

    /**
     * Create a registration token for an organization
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRegistrationTokenForOrgTest() throws ApiException {
        String org = null;
        AuthenticationToken response = api.actionsCreateRegistrationTokenForOrg(org);
        // TODO: test validations
    }

    /**
     * Create a registration token for a repository
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRegistrationTokenForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        AuthenticationToken response = api.actionsCreateRegistrationTokenForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Create a remove token for an organization
     *
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRemoveTokenForOrgTest() throws ApiException {
        String org = null;
        AuthenticationToken response = api.actionsCreateRemoveTokenForOrg(org);
        // TODO: test validations
    }

    /**
     * Create a remove token for a repository
     *
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateRemoveTokenForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        AuthenticationToken response = api.actionsCreateRemoveTokenForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * Create a self-hosted runner group for an organization
     *
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateSelfHostedRunnerGroupForOrgTest() throws ApiException {
        String org = null;
        ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest = null;
        RunnerGroupsOrg response = api.actionsCreateSelfHostedRunnerGroupForOrg(org, actionsCreateSelfHostedRunnerGroupForOrgRequest);
        // TODO: test validations
    }

    /**
     * Create a workflow dispatch event
     *
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsCreateWorkflowDispatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest = null;
        api.actionsCreateWorkflowDispatch(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest);
        // TODO: test validations
    }

    /**
     * Delete an artifact
     *
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        api.actionsDeleteArtifact(owner, repo, artifactId);
        // TODO: test validations
    }

    /**
     * Delete an environment secret
     *
     * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        api.actionsDeleteEnvironmentSecret(repositoryId, environmentName, secretName);
        // TODO: test validations
    }

    /**
     * Delete an organization secret
     *
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        api.actionsDeleteOrgSecret(org, secretName);
        // TODO: test validations
    }

    /**
     * Delete a repository secret
     *
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        api.actionsDeleteRepoSecret(owner, repo, secretName);
        // TODO: test validations
    }

    /**
     * Delete a self-hosted runner from an organization
     *
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteSelfHostedRunnerFromOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        api.actionsDeleteSelfHostedRunnerFromOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * Delete a self-hosted runner from a repository
     *
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteSelfHostedRunnerFromRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        api.actionsDeleteSelfHostedRunnerFromRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * Delete a self-hosted runner group from an organization
     *
     * Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteSelfHostedRunnerGroupFromOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        api.actionsDeleteSelfHostedRunnerGroupFromOrg(org, runnerGroupId);
        // TODO: test validations
    }

    /**
     * Delete a workflow run
     *
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDeleteWorkflowRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Delete workflow run logs
     *
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDeleteWorkflowRunLogsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDeleteWorkflowRunLogs(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     *
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDisableSelectedRepositoryGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer repositoryId = null;
        api.actionsDisableSelectedRepositoryGithubActionsOrganization(org, repositoryId);
        // TODO: test validations
    }

    /**
     * Disable a workflow
     *
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDisableWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        api.actionsDisableWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * Download an artifact
     *
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        String archiveFormat = null;
        api.actionsDownloadArtifact(owner, repo, artifactId, archiveFormat);
        // TODO: test validations
    }

    /**
     * Download job logs for a workflow run
     *
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadJobLogsForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer jobId = null;
        api.actionsDownloadJobLogsForWorkflowRun(owner, repo, jobId);
        // TODO: test validations
    }

    /**
     * Download workflow run logs
     *
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsDownloadWorkflowRunLogsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        api.actionsDownloadWorkflowRunLogs(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     *
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsEnableSelectedRepositoryGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer repositoryId = null;
        api.actionsEnableSelectedRepositoryGithubActionsOrganization(org, repositoryId);
        // TODO: test validations
    }

    /**
     * Enable a workflow
     *
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsEnableWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        api.actionsEnableWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * Get allowed actions for an organization
     *
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetAllowedActionsOrganizationTest() throws ApiException {
        String org = null;
        SelectedActions response = api.actionsGetAllowedActionsOrganization(org);
        // TODO: test validations
    }

    /**
     * Get allowed actions for a repository
     *
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetAllowedActionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        SelectedActions response = api.actionsGetAllowedActionsRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get an artifact
     *
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetArtifactTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer artifactId = null;
        Artifact response = api.actionsGetArtifact(owner, repo, artifactId);
        // TODO: test validations
    }

    /**
     * Get an environment public key
     *
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetEnvironmentPublicKeyTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        ActionsPublicKey response = api.actionsGetEnvironmentPublicKey(repositoryId, environmentName);
        // TODO: test validations
    }

    /**
     * Get an environment secret
     *
     * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetEnvironmentSecretTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        String secretName = null;
        ActionsSecret response = api.actionsGetEnvironmentSecret(repositoryId, environmentName, secretName);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions permissions for an organization
     *
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsOrganizationPermissions response = api.actionsGetGithubActionsPermissionsOrganization(org);
        // TODO: test validations
    }

    /**
     * Get GitHub Actions permissions for a repository
     *
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetGithubActionsPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsRepositoryPermissions response = api.actionsGetGithubActionsPermissionsRepository(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a job for a workflow run
     *
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetJobForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer jobId = null;
        Job response = api.actionsGetJobForWorkflowRun(owner, repo, jobId);
        // TODO: test validations
    }

    /**
     * Get an organization public key
     *
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetOrgPublicKeyTest() throws ApiException {
        String org = null;
        ActionsPublicKey response = api.actionsGetOrgPublicKey(org);
        // TODO: test validations
    }

    /**
     * Get an organization secret
     *
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        OrganizationActionsSecret response = api.actionsGetOrgSecret(org, secretName);
        // TODO: test validations
    }

    /**
     * Get pending deployments for a workflow run
     *
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetPendingDeploymentsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        List<PendingDeployment> response = api.actionsGetPendingDeploymentsForRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Get a repository public key
     *
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoPublicKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsPublicKey response = api.actionsGetRepoPublicKey(owner, repo);
        // TODO: test validations
    }

    /**
     * Get a repository secret
     *
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetRepoSecretTest() throws ApiException {
        String owner = null;
        String repo = null;
        String secretName = null;
        ActionsSecret response = api.actionsGetRepoSecret(owner, repo, secretName);
        // TODO: test validations
    }

    /**
     * Get the review history for a workflow run
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetReviewsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        List<EnvironmentApprovals> response = api.actionsGetReviewsForRun(owner, repo, runId);
        // TODO: test validations
    }

    /**
     * Get a self-hosted runner for an organization
     *
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetSelfHostedRunnerForOrgTest() throws ApiException {
        String org = null;
        Integer runnerId = null;
        Runner response = api.actionsGetSelfHostedRunnerForOrg(org, runnerId);
        // TODO: test validations
    }

    /**
     * Get a self-hosted runner for a repository
     *
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetSelfHostedRunnerForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runnerId = null;
        Runner response = api.actionsGetSelfHostedRunnerForRepo(owner, repo, runnerId);
        // TODO: test validations
    }

    /**
     * Get a self-hosted runner group for an organization
     *
     * Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetSelfHostedRunnerGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        RunnerGroupsOrg response = api.actionsGetSelfHostedRunnerGroupForOrg(org, runnerGroupId);
        // TODO: test validations
    }

    /**
     * Get a workflow
     *
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        Workflow response = api.actionsGetWorkflow(owner, repo, workflowId);
        // TODO: test validations
    }

    /**
     * Get a workflow run
     *
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsGetWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Boolean excludePullRequests = null;
        WorkflowRun response = api.actionsGetWorkflowRun(owner, repo, runId, excludePullRequests);
        // TODO: test validations
    }

    /**
     * List artifacts for a repository
     *
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListArtifactsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        String name = null;
        ActionsListArtifactsForRepo200Response response = api.actionsListArtifactsForRepo(owner, repo, perPage, page, name);
        // TODO: test validations
    }

    /**
     * List environment secrets
     *
     * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListEnvironmentSecretsTest() throws ApiException {
        Integer repositoryId = null;
        String environmentName = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoSecrets200Response response = api.actionsListEnvironmentSecrets(repositoryId, environmentName, perPage, page);
        // TODO: test validations
    }

    /**
     * List jobs for a workflow run
     *
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListJobsForWorkflowRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        String filter = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListJobsForWorkflowRun200Response response = api.actionsListJobsForWorkflowRun(owner, repo, runId, filter, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization secrets
     *
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListOrgSecretsTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListOrgSecrets200Response response = api.actionsListOrgSecrets(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository access to a self-hosted runner group in an organization
     *
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoAccessToSelfHostedRunnerGroupInOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer page = null;
        Integer perPage = null;
        ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response response = api.actionsListRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, page, perPage);
        // TODO: test validations
    }

    /**
     * List repository secrets
     *
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoSecretsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoSecrets200Response response = api.actionsListRepoSecrets(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository workflows
     *
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRepoWorkflowsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListRepoWorkflows200Response response = api.actionsListRepoWorkflows(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List runner applications for an organization
     *
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRunnerApplicationsForOrgTest() throws ApiException {
        String org = null;
        List<RunnerApplication> response = api.actionsListRunnerApplicationsForOrg(org);
        // TODO: test validations
    }

    /**
     * List runner applications for a repository
     *
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListRunnerApplicationsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        List<RunnerApplication> response = api.actionsListRunnerApplicationsForRepo(owner, repo);
        // TODO: test validations
    }

    /**
     * List selected repositories for an organization secret
     *
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedReposForOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer page = null;
        Integer perPage = null;
        ActionsListSelectedReposForOrgSecret200Response response = api.actionsListSelectedReposForOrgSecret(org, secretName, page, perPage);
        // TODO: test validations
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     *
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelectedRepositoriesEnabledGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response response = api.actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List self-hosted runner groups for an organization
     *
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnerGroupsForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelfHostedRunnerGroupsForOrg200Response response = api.actionsListSelfHostedRunnerGroupsForOrg(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List self-hosted runners for an organization
     *
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnersForOrgTest() throws ApiException {
        String org = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelfHostedRunnersForOrg200Response response = api.actionsListSelfHostedRunnersForOrg(org, perPage, page);
        // TODO: test validations
    }

    /**
     * List self-hosted runners for a repository
     *
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnersForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListSelfHostedRunnersForOrg200Response response = api.actionsListSelfHostedRunnersForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List self-hosted runners in a group for an organization
     *
     * Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListSelfHostedRunnersInGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer perPage = null;
        Integer page = null;
        EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response response = api.actionsListSelfHostedRunnersInGroupForOrg(org, runnerGroupId, perPage, page);
        // TODO: test validations
    }

    /**
     * List workflow run artifacts
     *
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunArtifactsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Integer perPage = null;
        Integer page = null;
        ActionsListArtifactsForRepo200Response response = api.actionsListWorkflowRunArtifacts(owner, repo, runId, perPage, page);
        // TODO: test validations
    }

    /**
     * List workflow runs for a workflow
     *
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunsTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsGetWorkflowWorkflowIdParameter workflowId = null;
        String actor = null;
        String branch = null;
        String event = null;
        String status = null;
        Integer perPage = null;
        Integer page = null;
        OffsetDateTime created = null;
        Boolean excludePullRequests = null;
        ActionsListWorkflowRunsForRepo200Response response = api.actionsListWorkflowRuns(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests);
        // TODO: test validations
    }

    /**
     * List workflow runs for a repository
     *
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.2/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsListWorkflowRunsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String actor = null;
        String branch = null;
        String event = null;
        String status = null;
        Integer perPage = null;
        Integer page = null;
        OffsetDateTime created = null;
        Boolean excludePullRequests = null;
        ActionsListWorkflowRunsForRepo200Response response = api.actionsListWorkflowRunsForRepo(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests);
        // TODO: test validations
    }

    /**
     * Re-run a workflow
     *
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReRunWorkflowTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        Object body = null;
        Object response = api.actionsReRunWorkflow(owner, repo, runId, body);
        // TODO: test validations
    }

    /**
     * Remove repository access to a self-hosted runner group in an organization
     *
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer repositoryId = null;
        api.actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, repositoryId);
        // TODO: test validations
    }

    /**
     * Remove selected repository from an organization secret
     *
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveSelectedRepoFromOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        Integer repositoryId = null;
        api.actionsRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId);
        // TODO: test validations
    }

    /**
     * Remove a self-hosted runner from a group for an organization
     *
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsRemoveSelfHostedRunnerFromGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        Integer runnerId = null;
        api.actionsRemoveSelfHostedRunnerFromGroupForOrg(org, runnerGroupId, runnerId);
        // TODO: test validations
    }

    /**
     * Review pending deployments for a workflow run
     *
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsReviewPendingDeploymentsForRunTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer runId = null;
        ActionsReviewPendingDeploymentsForRunRequest actionsReviewPendingDeploymentsForRunRequest = null;
        List<Deployment> response = api.actionsReviewPendingDeploymentsForRun(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest);
        // TODO: test validations
    }

    /**
     * Set allowed actions for an organization
     *
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetAllowedActionsOrganizationTest() throws ApiException {
        String org = null;
        SelectedActions selectedActions = null;
        api.actionsSetAllowedActionsOrganization(org, selectedActions);
        // TODO: test validations
    }

    /**
     * Set allowed actions for a repository
     *
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetAllowedActionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        SelectedActions selectedActions = null;
        api.actionsSetAllowedActionsRepository(owner, repo, selectedActions);
        // TODO: test validations
    }

    /**
     * Set GitHub Actions permissions for an organization
     *
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsPermissionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest = null;
        api.actionsSetGithubActionsPermissionsOrganization(org, actionsSetGithubActionsPermissionsOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Set GitHub Actions permissions for a repository
     *
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetGithubActionsPermissionsRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest = null;
        api.actionsSetGithubActionsPermissionsRepository(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Set repository access for a self-hosted runner group in an organization
     *
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetRepoAccessToSelfHostedRunnerGroupInOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest = null;
        api.actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest);
        // TODO: test validations
    }

    /**
     * Set selected repositories for an organization secret
     *
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.2/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedReposForOrgSecretTest() throws ApiException {
        String org = null;
        String secretName = null;
        ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest = null;
        api.actionsSetSelectedReposForOrgSecret(org, secretName, actionsSetSelectedReposForOrgSecretRequest);
        // TODO: test validations
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     *
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationTest() throws ApiException {
        String org = null;
        ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest = null;
        api.actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest);
        // TODO: test validations
    }

    /**
     * Set self-hosted runners in a group for an organization
     *
     * Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsSetSelfHostedRunnersInGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest = null;
        api.actionsSetSelfHostedRunnersInGroupForOrg(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest);
        // TODO: test validations
    }

    /**
     * Update a self-hosted runner group for an organization
     *
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionsUpdateSelfHostedRunnerGroupForOrgTest() throws ApiException {
        String org = null;
        Integer runnerGroupId = null;
        ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest = null;
        RunnerGroupsOrg response = api.actionsUpdateSelfHostedRunnerGroupForOrg(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest);
        // TODO: test validations
    }

}
