# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposUpdateInvitationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: str=None):
        """ReposUpdateInvitationRequest - a model defined in OpenAPI

        :param permissions: The permissions of this ReposUpdateInvitationRequest.
        """
        self.openapi_types = {
            'permissions': str
        }

        self.attribute_map = {
            'permissions': 'permissions'
        }

        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateInvitationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_invitation_request of this ReposUpdateInvitationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this ReposUpdateInvitationRequest.

        The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.

        :return: The permissions of this ReposUpdateInvitationRequest.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ReposUpdateInvitationRequest.

        The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.

        :param permissions: The permissions of this ReposUpdateInvitationRequest.
        :type permissions: str
        """
        allowed_values = ["read", "write", "maintain", "triage", "admin"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions
