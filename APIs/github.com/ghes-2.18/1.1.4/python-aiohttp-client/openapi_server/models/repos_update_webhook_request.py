# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_update_webhook_request_config import ReposUpdateWebhookRequestConfig
from openapi_server import util


class ReposUpdateWebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=True, add_events: List[str]=None, config: ReposUpdateWebhookRequestConfig=None, events: List[str]=["push"], remove_events: List[str]=None):
        """ReposUpdateWebhookRequest - a model defined in OpenAPI

        :param active: The active of this ReposUpdateWebhookRequest.
        :param add_events: The add_events of this ReposUpdateWebhookRequest.
        :param config: The config of this ReposUpdateWebhookRequest.
        :param events: The events of this ReposUpdateWebhookRequest.
        :param remove_events: The remove_events of this ReposUpdateWebhookRequest.
        """
        self.openapi_types = {
            'active': bool,
            'add_events': List[str],
            'config': ReposUpdateWebhookRequestConfig,
            'events': List[str],
            'remove_events': List[str]
        }

        self.attribute_map = {
            'active': 'active',
            'add_events': 'add_events',
            'config': 'config',
            'events': 'events',
            'remove_events': 'remove_events'
        }

        self._active = active
        self._add_events = add_events
        self._config = config
        self._events = events
        self._remove_events = remove_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposUpdateWebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_update_webhook_request of this ReposUpdateWebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ReposUpdateWebhookRequest.

        Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.

        :return: The active of this ReposUpdateWebhookRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReposUpdateWebhookRequest.

        Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.

        :param active: The active of this ReposUpdateWebhookRequest.
        :type active: bool
        """

        self._active = active

    @property
    def add_events(self):
        """Gets the add_events of this ReposUpdateWebhookRequest.

        Determines a list of events to be added to the list of events that the Hook triggers for.

        :return: The add_events of this ReposUpdateWebhookRequest.
        :rtype: List[str]
        """
        return self._add_events

    @add_events.setter
    def add_events(self, add_events):
        """Sets the add_events of this ReposUpdateWebhookRequest.

        Determines a list of events to be added to the list of events that the Hook triggers for.

        :param add_events: The add_events of this ReposUpdateWebhookRequest.
        :type add_events: List[str]
        """

        self._add_events = add_events

    @property
    def config(self):
        """Gets the config of this ReposUpdateWebhookRequest.


        :return: The config of this ReposUpdateWebhookRequest.
        :rtype: ReposUpdateWebhookRequestConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ReposUpdateWebhookRequest.


        :param config: The config of this ReposUpdateWebhookRequest.
        :type config: ReposUpdateWebhookRequestConfig
        """

        self._config = config

    @property
    def events(self):
        """Gets the events of this ReposUpdateWebhookRequest.

        Determines what [events](https://docs.github.com/enterprise-server@2.18/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.

        :return: The events of this ReposUpdateWebhookRequest.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ReposUpdateWebhookRequest.

        Determines what [events](https://docs.github.com/enterprise-server@2.18/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.

        :param events: The events of this ReposUpdateWebhookRequest.
        :type events: List[str]
        """

        self._events = events

    @property
    def remove_events(self):
        """Gets the remove_events of this ReposUpdateWebhookRequest.

        Determines a list of events to be removed from the list of events that the Hook triggers for.

        :return: The remove_events of this ReposUpdateWebhookRequest.
        :rtype: List[str]
        """
        return self._remove_events

    @remove_events.setter
    def remove_events(self, remove_events):
        """Sets the remove_events of this ReposUpdateWebhookRequest.

        Determines a list of events to be removed from the list of events that the Hook triggers for.

        :param remove_events: The remove_events of this ReposUpdateWebhookRequest.
        :type remove_events: List[str]
        """

        self._remove_events = remove_events
