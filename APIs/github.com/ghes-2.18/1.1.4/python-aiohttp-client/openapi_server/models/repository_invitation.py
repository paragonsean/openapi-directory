# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class RepositoryInvitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, expired: bool=None, html_url: str=None, id: int=None, invitee: NullableSimpleUser=None, inviter: NullableSimpleUser=None, node_id: str=None, permissions: str=None, repository: MinimalRepository=None, url: str=None):
        """RepositoryInvitation - a model defined in OpenAPI

        :param created_at: The created_at of this RepositoryInvitation.
        :param expired: The expired of this RepositoryInvitation.
        :param html_url: The html_url of this RepositoryInvitation.
        :param id: The id of this RepositoryInvitation.
        :param invitee: The invitee of this RepositoryInvitation.
        :param inviter: The inviter of this RepositoryInvitation.
        :param node_id: The node_id of this RepositoryInvitation.
        :param permissions: The permissions of this RepositoryInvitation.
        :param repository: The repository of this RepositoryInvitation.
        :param url: The url of this RepositoryInvitation.
        """
        self.openapi_types = {
            'created_at': datetime,
            'expired': bool,
            'html_url': str,
            'id': int,
            'invitee': NullableSimpleUser,
            'inviter': NullableSimpleUser,
            'node_id': str,
            'permissions': str,
            'repository': MinimalRepository,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'expired': 'expired',
            'html_url': 'html_url',
            'id': 'id',
            'invitee': 'invitee',
            'inviter': 'inviter',
            'node_id': 'node_id',
            'permissions': 'permissions',
            'repository': 'repository',
            'url': 'url'
        }

        self._created_at = created_at
        self._expired = expired
        self._html_url = html_url
        self._id = id
        self._invitee = invitee
        self._inviter = inviter
        self._node_id = node_id
        self._permissions = permissions
        self._repository = repository
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepositoryInvitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repository-invitation of this RepositoryInvitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this RepositoryInvitation.


        :return: The created_at of this RepositoryInvitation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepositoryInvitation.


        :param created_at: The created_at of this RepositoryInvitation.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expired(self):
        """Gets the expired of this RepositoryInvitation.

        Whether or not the invitation has expired

        :return: The expired of this RepositoryInvitation.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this RepositoryInvitation.

        Whether or not the invitation has expired

        :param expired: The expired of this RepositoryInvitation.
        :type expired: bool
        """

        self._expired = expired

    @property
    def html_url(self):
        """Gets the html_url of this RepositoryInvitation.


        :return: The html_url of this RepositoryInvitation.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this RepositoryInvitation.


        :param html_url: The html_url of this RepositoryInvitation.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this RepositoryInvitation.

        Unique identifier of the repository invitation.

        :return: The id of this RepositoryInvitation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryInvitation.

        Unique identifier of the repository invitation.

        :param id: The id of this RepositoryInvitation.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invitee(self):
        """Gets the invitee of this RepositoryInvitation.


        :return: The invitee of this RepositoryInvitation.
        :rtype: NullableSimpleUser
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this RepositoryInvitation.


        :param invitee: The invitee of this RepositoryInvitation.
        :type invitee: NullableSimpleUser
        """
        if invitee is None:
            raise ValueError("Invalid value for `invitee`, must not be `None`")

        self._invitee = invitee

    @property
    def inviter(self):
        """Gets the inviter of this RepositoryInvitation.


        :return: The inviter of this RepositoryInvitation.
        :rtype: NullableSimpleUser
        """
        return self._inviter

    @inviter.setter
    def inviter(self, inviter):
        """Sets the inviter of this RepositoryInvitation.


        :param inviter: The inviter of this RepositoryInvitation.
        :type inviter: NullableSimpleUser
        """
        if inviter is None:
            raise ValueError("Invalid value for `inviter`, must not be `None`")

        self._inviter = inviter

    @property
    def node_id(self):
        """Gets the node_id of this RepositoryInvitation.


        :return: The node_id of this RepositoryInvitation.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this RepositoryInvitation.


        :param node_id: The node_id of this RepositoryInvitation.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def permissions(self):
        """Gets the permissions of this RepositoryInvitation.

        The permission associated with the invitation.

        :return: The permissions of this RepositoryInvitation.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RepositoryInvitation.

        The permission associated with the invitation.

        :param permissions: The permissions of this RepositoryInvitation.
        :type permissions: str
        """
        allowed_values = ["read", "write", "admin", "triage", "maintain"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def repository(self):
        """Gets the repository of this RepositoryInvitation.


        :return: The repository of this RepositoryInvitation.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this RepositoryInvitation.


        :param repository: The repository of this RepositoryInvitation.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def url(self):
        """Gets the url of this RepositoryInvitation.

        URL for the repository invitation

        :return: The url of this RepositoryInvitation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RepositoryInvitation.

        URL for the repository invitation

        :param url: The url of this RepositoryInvitation.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
