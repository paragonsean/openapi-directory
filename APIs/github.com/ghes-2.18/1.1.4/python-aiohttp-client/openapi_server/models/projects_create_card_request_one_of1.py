# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectsCreateCardRequestOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_id: int=None, content_type: str=None):
        """ProjectsCreateCardRequestOneOf1 - a model defined in OpenAPI

        :param content_id: The content_id of this ProjectsCreateCardRequestOneOf1.
        :param content_type: The content_type of this ProjectsCreateCardRequestOneOf1.
        """
        self.openapi_types = {
            'content_id': int,
            'content_type': str
        }

        self.attribute_map = {
            'content_id': 'content_id',
            'content_type': 'content_type'
        }

        self._content_id = content_id
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsCreateCardRequestOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The projects_create_card_request_oneOf_1 of this ProjectsCreateCardRequestOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_id(self):
        """Gets the content_id of this ProjectsCreateCardRequestOneOf1.

        The unique identifier of the content associated with the card

        :return: The content_id of this ProjectsCreateCardRequestOneOf1.
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this ProjectsCreateCardRequestOneOf1.

        The unique identifier of the content associated with the card

        :param content_id: The content_id of this ProjectsCreateCardRequestOneOf1.
        :type content_id: int
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this ProjectsCreateCardRequestOneOf1.

        The piece of content associated with the card

        :return: The content_type of this ProjectsCreateCardRequestOneOf1.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ProjectsCreateCardRequestOneOf1.

        The piece of content associated with the card

        :param content_type: The content_type of this ProjectsCreateCardRequestOneOf1.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type
