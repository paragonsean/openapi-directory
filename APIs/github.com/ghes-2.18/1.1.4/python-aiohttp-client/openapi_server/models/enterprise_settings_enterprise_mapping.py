# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basemap: str=None, enabled: bool=None, tileserver: str=None, token: str=None):
        """EnterpriseSettingsEnterpriseMapping - a model defined in OpenAPI

        :param basemap: The basemap of this EnterpriseSettingsEnterpriseMapping.
        :param enabled: The enabled of this EnterpriseSettingsEnterpriseMapping.
        :param tileserver: The tileserver of this EnterpriseSettingsEnterpriseMapping.
        :param token: The token of this EnterpriseSettingsEnterpriseMapping.
        """
        self.openapi_types = {
            'basemap': str,
            'enabled': bool,
            'tileserver': str,
            'token': str
        }

        self.attribute_map = {
            'basemap': 'basemap',
            'enabled': 'enabled',
            'tileserver': 'tileserver',
            'token': 'token'
        }

        self._basemap = basemap
        self._enabled = enabled
        self._tileserver = tileserver
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_mapping of this EnterpriseSettingsEnterpriseMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basemap(self):
        """Gets the basemap of this EnterpriseSettingsEnterpriseMapping.


        :return: The basemap of this EnterpriseSettingsEnterpriseMapping.
        :rtype: str
        """
        return self._basemap

    @basemap.setter
    def basemap(self, basemap):
        """Sets the basemap of this EnterpriseSettingsEnterpriseMapping.


        :param basemap: The basemap of this EnterpriseSettingsEnterpriseMapping.
        :type basemap: str
        """

        self._basemap = basemap

    @property
    def enabled(self):
        """Gets the enabled of this EnterpriseSettingsEnterpriseMapping.


        :return: The enabled of this EnterpriseSettingsEnterpriseMapping.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnterpriseSettingsEnterpriseMapping.


        :param enabled: The enabled of this EnterpriseSettingsEnterpriseMapping.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tileserver(self):
        """Gets the tileserver of this EnterpriseSettingsEnterpriseMapping.


        :return: The tileserver of this EnterpriseSettingsEnterpriseMapping.
        :rtype: str
        """
        return self._tileserver

    @tileserver.setter
    def tileserver(self, tileserver):
        """Sets the tileserver of this EnterpriseSettingsEnterpriseMapping.


        :param tileserver: The tileserver of this EnterpriseSettingsEnterpriseMapping.
        :type tileserver: str
        """

        self._tileserver = tileserver

    @property
    def token(self):
        """Gets the token of this EnterpriseSettingsEnterpriseMapping.


        :return: The token of this EnterpriseSettingsEnterpriseMapping.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EnterpriseSettingsEnterpriseMapping.


        :param token: The token of this EnterpriseSettingsEnterpriseMapping.
        :type token: str
        """

        self._token = token
