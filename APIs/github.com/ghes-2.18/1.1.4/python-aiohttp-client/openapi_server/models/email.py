# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, primary: bool=None, verified: bool=None, visibility: str=None):
        """Email - a model defined in OpenAPI

        :param email: The email of this Email.
        :param primary: The primary of this Email.
        :param verified: The verified of this Email.
        :param visibility: The visibility of this Email.
        """
        self.openapi_types = {
            'email': str,
            'primary': bool,
            'verified': bool,
            'visibility': str
        }

        self.attribute_map = {
            'email': 'email',
            'primary': 'primary',
            'verified': 'verified',
            'visibility': 'visibility'
        }

        self._email = email
        self._primary = primary
        self._verified = verified
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Email.


        :return: The email of this Email.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Email.


        :param email: The email of this Email.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def primary(self):
        """Gets the primary of this Email.


        :return: The primary of this Email.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this Email.


        :param primary: The primary of this Email.
        :type primary: bool
        """
        if primary is None:
            raise ValueError("Invalid value for `primary`, must not be `None`")

        self._primary = primary

    @property
    def verified(self):
        """Gets the verified of this Email.


        :return: The verified of this Email.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Email.


        :param verified: The verified of this Email.
        :type verified: bool
        """
        if verified is None:
            raise ValueError("Invalid value for `verified`, must not be `None`")

        self._verified = verified

    @property
    def visibility(self):
        """Gets the visibility of this Email.


        :return: The visibility of this Email.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Email.


        :param visibility: The visibility of this Email.
        :type visibility: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")

        self._visibility = visibility
