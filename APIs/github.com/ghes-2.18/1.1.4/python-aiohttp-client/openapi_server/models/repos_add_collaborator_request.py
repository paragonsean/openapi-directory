# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReposAddCollaboratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission: str='push', permissions: str=None):
        """ReposAddCollaboratorRequest - a model defined in OpenAPI

        :param permission: The permission of this ReposAddCollaboratorRequest.
        :param permissions: The permissions of this ReposAddCollaboratorRequest.
        """
        self.openapi_types = {
            'permission': str,
            'permissions': str
        }

        self.attribute_map = {
            'permission': 'permission',
            'permissions': 'permissions'
        }

        self._permission = permission
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposAddCollaboratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_add_collaborator_request of this ReposAddCollaboratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission(self):
        """Gets the permission of this ReposAddCollaboratorRequest.

        The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:   \\* `pull` - can pull, but not push to or administer this repository.   \\* `push` - can pull and push, but not administer this repository.   \\* `admin` - can pull, push and administer this repository.   \\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.   \\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.  \\* custom repository role name - Can assign a custom repository role if the owning organization has defined any.

        :return: The permission of this ReposAddCollaboratorRequest.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ReposAddCollaboratorRequest.

        The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:   \\* `pull` - can pull, but not push to or administer this repository.   \\* `push` - can pull and push, but not administer this repository.   \\* `admin` - can pull, push and administer this repository.   \\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.   \\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.  \\* custom repository role name - Can assign a custom repository role if the owning organization has defined any.

        :param permission: The permission of this ReposAddCollaboratorRequest.
        :type permission: str
        """
        allowed_values = ["pull", "push", "admin", "maintain", "triage"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def permissions(self):
        """Gets the permissions of this ReposAddCollaboratorRequest.


        :return: The permissions of this ReposAddCollaboratorRequest.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ReposAddCollaboratorRequest.


        :param permissions: The permissions of this ReposAddCollaboratorRequest.
        :type permissions: str
        """

        self._permissions = permissions
