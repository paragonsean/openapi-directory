# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseSnmp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, community: str=None, enabled: bool=None):
        """EnterpriseSettingsEnterpriseSnmp - a model defined in OpenAPI

        :param community: The community of this EnterpriseSettingsEnterpriseSnmp.
        :param enabled: The enabled of this EnterpriseSettingsEnterpriseSnmp.
        """
        self.openapi_types = {
            'community': str,
            'enabled': bool
        }

        self.attribute_map = {
            'community': 'community',
            'enabled': 'enabled'
        }

        self._community = community
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseSnmp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_snmp of this EnterpriseSettingsEnterpriseSnmp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def community(self):
        """Gets the community of this EnterpriseSettingsEnterpriseSnmp.


        :return: The community of this EnterpriseSettingsEnterpriseSnmp.
        :rtype: str
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this EnterpriseSettingsEnterpriseSnmp.


        :param community: The community of this EnterpriseSettingsEnterpriseSnmp.
        :type community: str
        """

        self._community = community

    @property
    def enabled(self):
        """Gets the enabled of this EnterpriseSettingsEnterpriseSnmp.


        :return: The enabled of this EnterpriseSettingsEnterpriseSnmp.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnterpriseSettingsEnterpriseSnmp.


        :param enabled: The enabled of this EnterpriseSettingsEnterpriseSnmp.
        :type enabled: bool
        """

        self._enabled = enabled
