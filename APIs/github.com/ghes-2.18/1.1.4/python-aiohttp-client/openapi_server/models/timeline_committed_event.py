# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_commit_author import GitCommitAuthor
from openapi_server.models.git_commit_parents_inner import GitCommitParentsInner
from openapi_server.models.git_commit_tree import GitCommitTree
from openapi_server.models.git_commit_verification import GitCommitVerification
from openapi_server import util


class TimelineCommittedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: GitCommitAuthor=None, committer: GitCommitAuthor=None, event: str=None, html_url: str=None, message: str=None, node_id: str=None, parents: List[GitCommitParentsInner]=None, sha: str=None, tree: GitCommitTree=None, url: str=None, verification: GitCommitVerification=None):
        """TimelineCommittedEvent - a model defined in OpenAPI

        :param author: The author of this TimelineCommittedEvent.
        :param committer: The committer of this TimelineCommittedEvent.
        :param event: The event of this TimelineCommittedEvent.
        :param html_url: The html_url of this TimelineCommittedEvent.
        :param message: The message of this TimelineCommittedEvent.
        :param node_id: The node_id of this TimelineCommittedEvent.
        :param parents: The parents of this TimelineCommittedEvent.
        :param sha: The sha of this TimelineCommittedEvent.
        :param tree: The tree of this TimelineCommittedEvent.
        :param url: The url of this TimelineCommittedEvent.
        :param verification: The verification of this TimelineCommittedEvent.
        """
        self.openapi_types = {
            'author': GitCommitAuthor,
            'committer': GitCommitAuthor,
            'event': str,
            'html_url': str,
            'message': str,
            'node_id': str,
            'parents': List[GitCommitParentsInner],
            'sha': str,
            'tree': GitCommitTree,
            'url': str,
            'verification': GitCommitVerification
        }

        self.attribute_map = {
            'author': 'author',
            'committer': 'committer',
            'event': 'event',
            'html_url': 'html_url',
            'message': 'message',
            'node_id': 'node_id',
            'parents': 'parents',
            'sha': 'sha',
            'tree': 'tree',
            'url': 'url',
            'verification': 'verification'
        }

        self._author = author
        self._committer = committer
        self._event = event
        self._html_url = html_url
        self._message = message
        self._node_id = node_id
        self._parents = parents
        self._sha = sha
        self._tree = tree
        self._url = url
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineCommittedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-committed-event of this TimelineCommittedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this TimelineCommittedEvent.


        :return: The author of this TimelineCommittedEvent.
        :rtype: GitCommitAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TimelineCommittedEvent.


        :param author: The author of this TimelineCommittedEvent.
        :type author: GitCommitAuthor
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def committer(self):
        """Gets the committer of this TimelineCommittedEvent.


        :return: The committer of this TimelineCommittedEvent.
        :rtype: GitCommitAuthor
        """
        return self._committer

    @committer.setter
    def committer(self, committer):
        """Sets the committer of this TimelineCommittedEvent.


        :param committer: The committer of this TimelineCommittedEvent.
        :type committer: GitCommitAuthor
        """
        if committer is None:
            raise ValueError("Invalid value for `committer`, must not be `None`")

        self._committer = committer

    @property
    def event(self):
        """Gets the event of this TimelineCommittedEvent.


        :return: The event of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineCommittedEvent.


        :param event: The event of this TimelineCommittedEvent.
        :type event: str
        """

        self._event = event

    @property
    def html_url(self):
        """Gets the html_url of this TimelineCommittedEvent.


        :return: The html_url of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TimelineCommittedEvent.


        :param html_url: The html_url of this TimelineCommittedEvent.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def message(self):
        """Gets the message of this TimelineCommittedEvent.

        Message describing the purpose of the commit

        :return: The message of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TimelineCommittedEvent.

        Message describing the purpose of the commit

        :param message: The message of this TimelineCommittedEvent.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def node_id(self):
        """Gets the node_id of this TimelineCommittedEvent.


        :return: The node_id of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TimelineCommittedEvent.


        :param node_id: The node_id of this TimelineCommittedEvent.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def parents(self):
        """Gets the parents of this TimelineCommittedEvent.


        :return: The parents of this TimelineCommittedEvent.
        :rtype: List[GitCommitParentsInner]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this TimelineCommittedEvent.


        :param parents: The parents of this TimelineCommittedEvent.
        :type parents: List[GitCommitParentsInner]
        """
        if parents is None:
            raise ValueError("Invalid value for `parents`, must not be `None`")

        self._parents = parents

    @property
    def sha(self):
        """Gets the sha of this TimelineCommittedEvent.

        SHA for the commit

        :return: The sha of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this TimelineCommittedEvent.

        SHA for the commit

        :param sha: The sha of this TimelineCommittedEvent.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def tree(self):
        """Gets the tree of this TimelineCommittedEvent.


        :return: The tree of this TimelineCommittedEvent.
        :rtype: GitCommitTree
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this TimelineCommittedEvent.


        :param tree: The tree of this TimelineCommittedEvent.
        :type tree: GitCommitTree
        """
        if tree is None:
            raise ValueError("Invalid value for `tree`, must not be `None`")

        self._tree = tree

    @property
    def url(self):
        """Gets the url of this TimelineCommittedEvent.


        :return: The url of this TimelineCommittedEvent.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TimelineCommittedEvent.


        :param url: The url of this TimelineCommittedEvent.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def verification(self):
        """Gets the verification of this TimelineCommittedEvent.


        :return: The verification of this TimelineCommittedEvent.
        :rtype: GitCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this TimelineCommittedEvent.


        :param verification: The verification of this TimelineCommittedEvent.
        :type verification: GitCommitVerification
        """
        if verification is None:
            raise ValueError("Invalid value for `verification`, must not be `None`")

        self._verification = verification
