# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentDirectoryInnerLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, git: str=None, html: str=None, _self: str=None):
        """ContentDirectoryInnerLinks - a model defined in OpenAPI

        :param git: The git of this ContentDirectoryInnerLinks.
        :param html: The html of this ContentDirectoryInnerLinks.
        :param _self: The _self of this ContentDirectoryInnerLinks.
        """
        self.openapi_types = {
            'git': str,
            'html': str,
            '_self': str
        }

        self.attribute_map = {
            'git': 'git',
            'html': 'html',
            '_self': 'self'
        }

        self._git = git
        self._html = html
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentDirectoryInnerLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The content_directory_inner__links of this ContentDirectoryInnerLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def git(self):
        """Gets the git of this ContentDirectoryInnerLinks.


        :return: The git of this ContentDirectoryInnerLinks.
        :rtype: str
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this ContentDirectoryInnerLinks.


        :param git: The git of this ContentDirectoryInnerLinks.
        :type git: str
        """
        if git is None:
            raise ValueError("Invalid value for `git`, must not be `None`")

        self._git = git

    @property
    def html(self):
        """Gets the html of this ContentDirectoryInnerLinks.


        :return: The html of this ContentDirectoryInnerLinks.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ContentDirectoryInnerLinks.


        :param html: The html of this ContentDirectoryInnerLinks.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def _self(self):
        """Gets the _self of this ContentDirectoryInnerLinks.


        :return: The _self of this ContentDirectoryInnerLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ContentDirectoryInnerLinks.


        :param _self: The _self of this ContentDirectoryInnerLinks.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
