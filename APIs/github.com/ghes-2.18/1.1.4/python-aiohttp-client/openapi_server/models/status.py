# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_url: str=None, context: str=None, created_at: str=None, creator: NullableSimpleUser=None, description: str=None, id: int=None, node_id: str=None, state: str=None, target_url: str=None, updated_at: str=None, url: str=None):
        """Status - a model defined in OpenAPI

        :param avatar_url: The avatar_url of this Status.
        :param context: The context of this Status.
        :param created_at: The created_at of this Status.
        :param creator: The creator of this Status.
        :param description: The description of this Status.
        :param id: The id of this Status.
        :param node_id: The node_id of this Status.
        :param state: The state of this Status.
        :param target_url: The target_url of this Status.
        :param updated_at: The updated_at of this Status.
        :param url: The url of this Status.
        """
        self.openapi_types = {
            'avatar_url': str,
            'context': str,
            'created_at': str,
            'creator': NullableSimpleUser,
            'description': str,
            'id': int,
            'node_id': str,
            'state': str,
            'target_url': str,
            'updated_at': str,
            'url': str
        }

        self.attribute_map = {
            'avatar_url': 'avatar_url',
            'context': 'context',
            'created_at': 'created_at',
            'creator': 'creator',
            'description': 'description',
            'id': 'id',
            'node_id': 'node_id',
            'state': 'state',
            'target_url': 'target_url',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._avatar_url = avatar_url
        self._context = context
        self._created_at = created_at
        self._creator = creator
        self._description = description
        self._id = id
        self._node_id = node_id
        self._state = state
        self._target_url = target_url
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Status.


        :return: The avatar_url of this Status.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Status.


        :param avatar_url: The avatar_url of this Status.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")

        self._avatar_url = avatar_url

    @property
    def context(self):
        """Gets the context of this Status.


        :return: The context of this Status.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Status.


        :param context: The context of this Status.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def created_at(self):
        """Gets the created_at of this Status.


        :return: The created_at of this Status.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Status.


        :param created_at: The created_at of this Status.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this Status.


        :return: The creator of this Status.
        :rtype: NullableSimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Status.


        :param creator: The creator of this Status.
        :type creator: NullableSimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this Status.


        :return: The description of this Status.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Status.


        :param description: The description of this Status.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Status.


        :return: The id of this Status.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Status.


        :param id: The id of this Status.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this Status.


        :return: The node_id of this Status.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Status.


        :param node_id: The node_id of this Status.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def state(self):
        """Gets the state of this Status.


        :return: The state of this Status.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Status.


        :param state: The state of this Status.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def target_url(self):
        """Gets the target_url of this Status.


        :return: The target_url of this Status.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this Status.


        :param target_url: The target_url of this Status.
        :type target_url: str
        """
        if target_url is None:
            raise ValueError("Invalid value for `target_url`, must not be `None`")

        self._target_url = target_url

    @property
    def updated_at(self):
        """Gets the updated_at of this Status.


        :return: The updated_at of this Status.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Status.


        :param updated_at: The updated_at of this Status.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Status.


        :return: The url of this Status.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Status.


        :param url: The url of this Status.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
