# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullsCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: str=None, body: str=None, draft: bool=None, head: str=None, issue: int=None, maintainer_can_modify: bool=None, title: str=None):
        """PullsCreateRequest - a model defined in OpenAPI

        :param base: The base of this PullsCreateRequest.
        :param body: The body of this PullsCreateRequest.
        :param draft: The draft of this PullsCreateRequest.
        :param head: The head of this PullsCreateRequest.
        :param issue: The issue of this PullsCreateRequest.
        :param maintainer_can_modify: The maintainer_can_modify of this PullsCreateRequest.
        :param title: The title of this PullsCreateRequest.
        """
        self.openapi_types = {
            'base': str,
            'body': str,
            'draft': bool,
            'head': str,
            'issue': int,
            'maintainer_can_modify': bool,
            'title': str
        }

        self.attribute_map = {
            'base': 'base',
            'body': 'body',
            'draft': 'draft',
            'head': 'head',
            'issue': 'issue',
            'maintainer_can_modify': 'maintainer_can_modify',
            'title': 'title'
        }

        self._base = base
        self._body = body
        self._draft = draft
        self._head = head
        self._issue = issue
        self._maintainer_can_modify = maintainer_can_modify
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullsCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pulls_create_request of this PullsCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this PullsCreateRequest.

        The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.

        :return: The base of this PullsCreateRequest.
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this PullsCreateRequest.

        The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.

        :param base: The base of this PullsCreateRequest.
        :type base: str
        """
        if base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")

        self._base = base

    @property
    def body(self):
        """Gets the body of this PullsCreateRequest.

        The contents of the pull request.

        :return: The body of this PullsCreateRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsCreateRequest.

        The contents of the pull request.

        :param body: The body of this PullsCreateRequest.
        :type body: str
        """

        self._body = body

    @property
    def draft(self):
        """Gets the draft of this PullsCreateRequest.

        Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.

        :return: The draft of this PullsCreateRequest.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this PullsCreateRequest.

        Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.

        :param draft: The draft of this PullsCreateRequest.
        :type draft: bool
        """

        self._draft = draft

    @property
    def head(self):
        """Gets the head of this PullsCreateRequest.

        The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.

        :return: The head of this PullsCreateRequest.
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this PullsCreateRequest.

        The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.

        :param head: The head of this PullsCreateRequest.
        :type head: str
        """
        if head is None:
            raise ValueError("Invalid value for `head`, must not be `None`")

        self._head = head

    @property
    def issue(self):
        """Gets the issue of this PullsCreateRequest.


        :return: The issue of this PullsCreateRequest.
        :rtype: int
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this PullsCreateRequest.


        :param issue: The issue of this PullsCreateRequest.
        :type issue: int
        """

        self._issue = issue

    @property
    def maintainer_can_modify(self):
        """Gets the maintainer_can_modify of this PullsCreateRequest.

        Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.

        :return: The maintainer_can_modify of this PullsCreateRequest.
        :rtype: bool
        """
        return self._maintainer_can_modify

    @maintainer_can_modify.setter
    def maintainer_can_modify(self, maintainer_can_modify):
        """Sets the maintainer_can_modify of this PullsCreateRequest.

        Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.

        :param maintainer_can_modify: The maintainer_can_modify of this PullsCreateRequest.
        :type maintainer_can_modify: bool
        """

        self._maintainer_can_modify = maintainer_can_modify

    @property
    def title(self):
        """Gets the title of this PullsCreateRequest.

        The title of the new pull request.

        :return: The title of this PullsCreateRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PullsCreateRequest.

        The title of the new pull request.

        :param title: The title of this PullsCreateRequest.
        :type title: str
        """

        self._title = title
