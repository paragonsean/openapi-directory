# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minimal_repository import MinimalRepository
from openapi_server.models.simple_commit_status import SimpleCommitStatus
from openapi_server import util


class CombinedCommitStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_url: str=None, repository: MinimalRepository=None, sha: str=None, state: str=None, statuses: List[SimpleCommitStatus]=None, total_count: int=None, url: str=None):
        """CombinedCommitStatus - a model defined in OpenAPI

        :param commit_url: The commit_url of this CombinedCommitStatus.
        :param repository: The repository of this CombinedCommitStatus.
        :param sha: The sha of this CombinedCommitStatus.
        :param state: The state of this CombinedCommitStatus.
        :param statuses: The statuses of this CombinedCommitStatus.
        :param total_count: The total_count of this CombinedCommitStatus.
        :param url: The url of this CombinedCommitStatus.
        """
        self.openapi_types = {
            'commit_url': str,
            'repository': MinimalRepository,
            'sha': str,
            'state': str,
            'statuses': List[SimpleCommitStatus],
            'total_count': int,
            'url': str
        }

        self.attribute_map = {
            'commit_url': 'commit_url',
            'repository': 'repository',
            'sha': 'sha',
            'state': 'state',
            'statuses': 'statuses',
            'total_count': 'total_count',
            'url': 'url'
        }

        self._commit_url = commit_url
        self._repository = repository
        self._sha = sha
        self._state = state
        self._statuses = statuses
        self._total_count = total_count
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CombinedCommitStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The combined-commit-status of this CombinedCommitStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_url(self):
        """Gets the commit_url of this CombinedCommitStatus.


        :return: The commit_url of this CombinedCommitStatus.
        :rtype: str
        """
        return self._commit_url

    @commit_url.setter
    def commit_url(self, commit_url):
        """Sets the commit_url of this CombinedCommitStatus.


        :param commit_url: The commit_url of this CombinedCommitStatus.
        :type commit_url: str
        """
        if commit_url is None:
            raise ValueError("Invalid value for `commit_url`, must not be `None`")

        self._commit_url = commit_url

    @property
    def repository(self):
        """Gets the repository of this CombinedCommitStatus.


        :return: The repository of this CombinedCommitStatus.
        :rtype: MinimalRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CombinedCommitStatus.


        :param repository: The repository of this CombinedCommitStatus.
        :type repository: MinimalRepository
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def sha(self):
        """Gets the sha of this CombinedCommitStatus.


        :return: The sha of this CombinedCommitStatus.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this CombinedCommitStatus.


        :param sha: The sha of this CombinedCommitStatus.
        :type sha: str
        """
        if sha is None:
            raise ValueError("Invalid value for `sha`, must not be `None`")

        self._sha = sha

    @property
    def state(self):
        """Gets the state of this CombinedCommitStatus.


        :return: The state of this CombinedCommitStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CombinedCommitStatus.


        :param state: The state of this CombinedCommitStatus.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def statuses(self):
        """Gets the statuses of this CombinedCommitStatus.


        :return: The statuses of this CombinedCommitStatus.
        :rtype: List[SimpleCommitStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this CombinedCommitStatus.


        :param statuses: The statuses of this CombinedCommitStatus.
        :type statuses: List[SimpleCommitStatus]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses

    @property
    def total_count(self):
        """Gets the total_count of this CombinedCommitStatus.


        :return: The total_count of this CombinedCommitStatus.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this CombinedCommitStatus.


        :param total_count: The total_count of this CombinedCommitStatus.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    @property
    def url(self):
        """Gets the url of this CombinedCommitStatus.


        :return: The url of this CombinedCommitStatus.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CombinedCommitStatus.


        :param url: The url of this CombinedCommitStatus.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
