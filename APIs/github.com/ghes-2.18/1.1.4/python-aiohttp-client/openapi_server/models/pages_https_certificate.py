# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PagesHttpsCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, domains: List[object]=None, expires_at: date=None, state: str=None):
        """PagesHttpsCertificate - a model defined in OpenAPI

        :param description: The description of this PagesHttpsCertificate.
        :param domains: The domains of this PagesHttpsCertificate.
        :param expires_at: The expires_at of this PagesHttpsCertificate.
        :param state: The state of this PagesHttpsCertificate.
        """
        self.openapi_types = {
            'description': str,
            'domains': List[object],
            'expires_at': date,
            'state': str
        }

        self.attribute_map = {
            'description': 'description',
            'domains': 'domains',
            'expires_at': 'expires_at',
            'state': 'state'
        }

        self._description = description
        self._domains = domains
        self._expires_at = expires_at
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagesHttpsCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pages-https-certificate of this PagesHttpsCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PagesHttpsCertificate.


        :return: The description of this PagesHttpsCertificate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PagesHttpsCertificate.


        :param description: The description of this PagesHttpsCertificate.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domains(self):
        """Gets the domains of this PagesHttpsCertificate.

        Array of the domain set and its alternate name (if it is configured)

        :return: The domains of this PagesHttpsCertificate.
        :rtype: List[object]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this PagesHttpsCertificate.

        Array of the domain set and its alternate name (if it is configured)

        :param domains: The domains of this PagesHttpsCertificate.
        :type domains: List[object]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")

        self._domains = domains

    @property
    def expires_at(self):
        """Gets the expires_at of this PagesHttpsCertificate.


        :return: The expires_at of this PagesHttpsCertificate.
        :rtype: date
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PagesHttpsCertificate.


        :param expires_at: The expires_at of this PagesHttpsCertificate.
        :type expires_at: date
        """

        self._expires_at = expires_at

    @property
    def state(self):
        """Gets the state of this PagesHttpsCertificate.


        :return: The state of this PagesHttpsCertificate.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PagesHttpsCertificate.


        :param state: The state of this PagesHttpsCertificate.
        :type state: str
        """
        allowed_values = ["new", "authorization_created", "authorization_pending", "authorized", "authorization_revoked", "issued", "uploaded", "approved", "errored", "bad_authz", "destroy_pending", "dns_changed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
