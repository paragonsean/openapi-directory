# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class NullableMilestone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_at: datetime=None, closed_issues: int=None, created_at: datetime=None, creator: NullableSimpleUser=None, description: str=None, due_on: datetime=None, html_url: str=None, id: int=None, labels_url: str=None, node_id: str=None, number: int=None, open_issues: int=None, state: str='open', title: str=None, updated_at: datetime=None, url: str=None):
        """NullableMilestone - a model defined in OpenAPI

        :param closed_at: The closed_at of this NullableMilestone.
        :param closed_issues: The closed_issues of this NullableMilestone.
        :param created_at: The created_at of this NullableMilestone.
        :param creator: The creator of this NullableMilestone.
        :param description: The description of this NullableMilestone.
        :param due_on: The due_on of this NullableMilestone.
        :param html_url: The html_url of this NullableMilestone.
        :param id: The id of this NullableMilestone.
        :param labels_url: The labels_url of this NullableMilestone.
        :param node_id: The node_id of this NullableMilestone.
        :param number: The number of this NullableMilestone.
        :param open_issues: The open_issues of this NullableMilestone.
        :param state: The state of this NullableMilestone.
        :param title: The title of this NullableMilestone.
        :param updated_at: The updated_at of this NullableMilestone.
        :param url: The url of this NullableMilestone.
        """
        self.openapi_types = {
            'closed_at': datetime,
            'closed_issues': int,
            'created_at': datetime,
            'creator': NullableSimpleUser,
            'description': str,
            'due_on': datetime,
            'html_url': str,
            'id': int,
            'labels_url': str,
            'node_id': str,
            'number': int,
            'open_issues': int,
            'state': str,
            'title': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'closed_at': 'closed_at',
            'closed_issues': 'closed_issues',
            'created_at': 'created_at',
            'creator': 'creator',
            'description': 'description',
            'due_on': 'due_on',
            'html_url': 'html_url',
            'id': 'id',
            'labels_url': 'labels_url',
            'node_id': 'node_id',
            'number': 'number',
            'open_issues': 'open_issues',
            'state': 'state',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._closed_at = closed_at
        self._closed_issues = closed_issues
        self._created_at = created_at
        self._creator = creator
        self._description = description
        self._due_on = due_on
        self._html_url = html_url
        self._id = id
        self._labels_url = labels_url
        self._node_id = node_id
        self._number = number
        self._open_issues = open_issues
        self._state = state
        self._title = title
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullableMilestone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nullable-milestone of this NullableMilestone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_at(self):
        """Gets the closed_at of this NullableMilestone.


        :return: The closed_at of this NullableMilestone.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this NullableMilestone.


        :param closed_at: The closed_at of this NullableMilestone.
        :type closed_at: datetime
        """
        if closed_at is None:
            raise ValueError("Invalid value for `closed_at`, must not be `None`")

        self._closed_at = closed_at

    @property
    def closed_issues(self):
        """Gets the closed_issues of this NullableMilestone.


        :return: The closed_issues of this NullableMilestone.
        :rtype: int
        """
        return self._closed_issues

    @closed_issues.setter
    def closed_issues(self, closed_issues):
        """Sets the closed_issues of this NullableMilestone.


        :param closed_issues: The closed_issues of this NullableMilestone.
        :type closed_issues: int
        """
        if closed_issues is None:
            raise ValueError("Invalid value for `closed_issues`, must not be `None`")

        self._closed_issues = closed_issues

    @property
    def created_at(self):
        """Gets the created_at of this NullableMilestone.


        :return: The created_at of this NullableMilestone.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NullableMilestone.


        :param created_at: The created_at of this NullableMilestone.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this NullableMilestone.


        :return: The creator of this NullableMilestone.
        :rtype: NullableSimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this NullableMilestone.


        :param creator: The creator of this NullableMilestone.
        :type creator: NullableSimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this NullableMilestone.


        :return: The description of this NullableMilestone.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NullableMilestone.


        :param description: The description of this NullableMilestone.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def due_on(self):
        """Gets the due_on of this NullableMilestone.


        :return: The due_on of this NullableMilestone.
        :rtype: datetime
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on):
        """Sets the due_on of this NullableMilestone.


        :param due_on: The due_on of this NullableMilestone.
        :type due_on: datetime
        """
        if due_on is None:
            raise ValueError("Invalid value for `due_on`, must not be `None`")

        self._due_on = due_on

    @property
    def html_url(self):
        """Gets the html_url of this NullableMilestone.


        :return: The html_url of this NullableMilestone.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this NullableMilestone.


        :param html_url: The html_url of this NullableMilestone.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this NullableMilestone.


        :return: The id of this NullableMilestone.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NullableMilestone.


        :param id: The id of this NullableMilestone.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels_url(self):
        """Gets the labels_url of this NullableMilestone.


        :return: The labels_url of this NullableMilestone.
        :rtype: str
        """
        return self._labels_url

    @labels_url.setter
    def labels_url(self, labels_url):
        """Sets the labels_url of this NullableMilestone.


        :param labels_url: The labels_url of this NullableMilestone.
        :type labels_url: str
        """
        if labels_url is None:
            raise ValueError("Invalid value for `labels_url`, must not be `None`")

        self._labels_url = labels_url

    @property
    def node_id(self):
        """Gets the node_id of this NullableMilestone.


        :return: The node_id of this NullableMilestone.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NullableMilestone.


        :param node_id: The node_id of this NullableMilestone.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this NullableMilestone.

        The number of the milestone.

        :return: The number of this NullableMilestone.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NullableMilestone.

        The number of the milestone.

        :param number: The number of this NullableMilestone.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def open_issues(self):
        """Gets the open_issues of this NullableMilestone.


        :return: The open_issues of this NullableMilestone.
        :rtype: int
        """
        return self._open_issues

    @open_issues.setter
    def open_issues(self, open_issues):
        """Sets the open_issues of this NullableMilestone.


        :param open_issues: The open_issues of this NullableMilestone.
        :type open_issues: int
        """
        if open_issues is None:
            raise ValueError("Invalid value for `open_issues`, must not be `None`")

        self._open_issues = open_issues

    @property
    def state(self):
        """Gets the state of this NullableMilestone.

        The state of the milestone.

        :return: The state of this NullableMilestone.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NullableMilestone.

        The state of the milestone.

        :param state: The state of this NullableMilestone.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this NullableMilestone.

        The title of the milestone.

        :return: The title of this NullableMilestone.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NullableMilestone.

        The title of the milestone.

        :param title: The title of this NullableMilestone.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this NullableMilestone.


        :return: The updated_at of this NullableMilestone.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NullableMilestone.


        :param updated_at: The updated_at of this NullableMilestone.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this NullableMilestone.


        :return: The url of this NullableMilestone.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NullableMilestone.


        :param url: The url of this NullableMilestone.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
