# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScimError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, documentation_url: str=None, message: str=None, schemas: List[str]=None, scim_type: str=None, status: int=None):
        """ScimError - a model defined in OpenAPI

        :param detail: The detail of this ScimError.
        :param documentation_url: The documentation_url of this ScimError.
        :param message: The message of this ScimError.
        :param schemas: The schemas of this ScimError.
        :param scim_type: The scim_type of this ScimError.
        :param status: The status of this ScimError.
        """
        self.openapi_types = {
            'detail': str,
            'documentation_url': str,
            'message': str,
            'schemas': List[str],
            'scim_type': str,
            'status': int
        }

        self.attribute_map = {
            'detail': 'detail',
            'documentation_url': 'documentation_url',
            'message': 'message',
            'schemas': 'schemas',
            'scim_type': 'scimType',
            'status': 'status'
        }

        self._detail = detail
        self._documentation_url = documentation_url
        self._message = message
        self._schemas = schemas
        self._scim_type = scim_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScimError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scim-error of this ScimError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ScimError.


        :return: The detail of this ScimError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ScimError.


        :param detail: The detail of this ScimError.
        :type detail: str
        """

        self._detail = detail

    @property
    def documentation_url(self):
        """Gets the documentation_url of this ScimError.


        :return: The documentation_url of this ScimError.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this ScimError.


        :param documentation_url: The documentation_url of this ScimError.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def message(self):
        """Gets the message of this ScimError.


        :return: The message of this ScimError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ScimError.


        :param message: The message of this ScimError.
        :type message: str
        """

        self._message = message

    @property
    def schemas(self):
        """Gets the schemas of this ScimError.


        :return: The schemas of this ScimError.
        :rtype: List[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ScimError.


        :param schemas: The schemas of this ScimError.
        :type schemas: List[str]
        """

        self._schemas = schemas

    @property
    def scim_type(self):
        """Gets the scim_type of this ScimError.


        :return: The scim_type of this ScimError.
        :rtype: str
        """
        return self._scim_type

    @scim_type.setter
    def scim_type(self, scim_type):
        """Sets the scim_type of this ScimError.


        :param scim_type: The scim_type of this ScimError.
        :type scim_type: str
        """

        self._scim_type = scim_type

    @property
    def status(self):
        """Gets the status of this ScimError.


        :return: The status of this ScimError.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScimError.


        :param status: The status of this ScimError.
        :type status: int
        """

        self._status = status
