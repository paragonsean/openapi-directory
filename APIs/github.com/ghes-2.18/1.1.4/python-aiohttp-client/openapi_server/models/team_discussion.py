# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.reaction_rollup import ReactionRollup
from openapi_server import util


class TeamDiscussion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: NullableSimpleUser=None, body: str=None, body_html: str=None, body_version: str=None, comments_count: int=None, comments_url: str=None, created_at: datetime=None, html_url: str=None, last_edited_at: datetime=None, node_id: str=None, number: int=None, pinned: bool=None, private: bool=None, reactions: ReactionRollup=None, team_url: str=None, title: str=None, updated_at: datetime=None, url: str=None):
        """TeamDiscussion - a model defined in OpenAPI

        :param author: The author of this TeamDiscussion.
        :param body: The body of this TeamDiscussion.
        :param body_html: The body_html of this TeamDiscussion.
        :param body_version: The body_version of this TeamDiscussion.
        :param comments_count: The comments_count of this TeamDiscussion.
        :param comments_url: The comments_url of this TeamDiscussion.
        :param created_at: The created_at of this TeamDiscussion.
        :param html_url: The html_url of this TeamDiscussion.
        :param last_edited_at: The last_edited_at of this TeamDiscussion.
        :param node_id: The node_id of this TeamDiscussion.
        :param number: The number of this TeamDiscussion.
        :param pinned: The pinned of this TeamDiscussion.
        :param private: The private of this TeamDiscussion.
        :param reactions: The reactions of this TeamDiscussion.
        :param team_url: The team_url of this TeamDiscussion.
        :param title: The title of this TeamDiscussion.
        :param updated_at: The updated_at of this TeamDiscussion.
        :param url: The url of this TeamDiscussion.
        """
        self.openapi_types = {
            'author': NullableSimpleUser,
            'body': str,
            'body_html': str,
            'body_version': str,
            'comments_count': int,
            'comments_url': str,
            'created_at': datetime,
            'html_url': str,
            'last_edited_at': datetime,
            'node_id': str,
            'number': int,
            'pinned': bool,
            'private': bool,
            'reactions': ReactionRollup,
            'team_url': str,
            'title': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'author': 'author',
            'body': 'body',
            'body_html': 'body_html',
            'body_version': 'body_version',
            'comments_count': 'comments_count',
            'comments_url': 'comments_url',
            'created_at': 'created_at',
            'html_url': 'html_url',
            'last_edited_at': 'last_edited_at',
            'node_id': 'node_id',
            'number': 'number',
            'pinned': 'pinned',
            'private': 'private',
            'reactions': 'reactions',
            'team_url': 'team_url',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._author = author
        self._body = body
        self._body_html = body_html
        self._body_version = body_version
        self._comments_count = comments_count
        self._comments_url = comments_url
        self._created_at = created_at
        self._html_url = html_url
        self._last_edited_at = last_edited_at
        self._node_id = node_id
        self._number = number
        self._pinned = pinned
        self._private = private
        self._reactions = reactions
        self._team_url = team_url
        self._title = title
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamDiscussion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-discussion of this TeamDiscussion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this TeamDiscussion.


        :return: The author of this TeamDiscussion.
        :rtype: NullableSimpleUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TeamDiscussion.


        :param author: The author of this TeamDiscussion.
        :type author: NullableSimpleUser
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")

        self._author = author

    @property
    def body(self):
        """Gets the body of this TeamDiscussion.

        The main text of the discussion.

        :return: The body of this TeamDiscussion.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TeamDiscussion.

        The main text of the discussion.

        :param body: The body of this TeamDiscussion.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this TeamDiscussion.


        :return: The body_html of this TeamDiscussion.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this TeamDiscussion.


        :param body_html: The body_html of this TeamDiscussion.
        :type body_html: str
        """
        if body_html is None:
            raise ValueError("Invalid value for `body_html`, must not be `None`")

        self._body_html = body_html

    @property
    def body_version(self):
        """Gets the body_version of this TeamDiscussion.

        The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.

        :return: The body_version of this TeamDiscussion.
        :rtype: str
        """
        return self._body_version

    @body_version.setter
    def body_version(self, body_version):
        """Sets the body_version of this TeamDiscussion.

        The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.

        :param body_version: The body_version of this TeamDiscussion.
        :type body_version: str
        """
        if body_version is None:
            raise ValueError("Invalid value for `body_version`, must not be `None`")

        self._body_version = body_version

    @property
    def comments_count(self):
        """Gets the comments_count of this TeamDiscussion.


        :return: The comments_count of this TeamDiscussion.
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count):
        """Sets the comments_count of this TeamDiscussion.


        :param comments_count: The comments_count of this TeamDiscussion.
        :type comments_count: int
        """
        if comments_count is None:
            raise ValueError("Invalid value for `comments_count`, must not be `None`")

        self._comments_count = comments_count

    @property
    def comments_url(self):
        """Gets the comments_url of this TeamDiscussion.


        :return: The comments_url of this TeamDiscussion.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this TeamDiscussion.


        :param comments_url: The comments_url of this TeamDiscussion.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def created_at(self):
        """Gets the created_at of this TeamDiscussion.


        :return: The created_at of this TeamDiscussion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamDiscussion.


        :param created_at: The created_at of this TeamDiscussion.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def html_url(self):
        """Gets the html_url of this TeamDiscussion.


        :return: The html_url of this TeamDiscussion.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TeamDiscussion.


        :param html_url: The html_url of this TeamDiscussion.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def last_edited_at(self):
        """Gets the last_edited_at of this TeamDiscussion.


        :return: The last_edited_at of this TeamDiscussion.
        :rtype: datetime
        """
        return self._last_edited_at

    @last_edited_at.setter
    def last_edited_at(self, last_edited_at):
        """Sets the last_edited_at of this TeamDiscussion.


        :param last_edited_at: The last_edited_at of this TeamDiscussion.
        :type last_edited_at: datetime
        """
        if last_edited_at is None:
            raise ValueError("Invalid value for `last_edited_at`, must not be `None`")

        self._last_edited_at = last_edited_at

    @property
    def node_id(self):
        """Gets the node_id of this TeamDiscussion.


        :return: The node_id of this TeamDiscussion.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TeamDiscussion.


        :param node_id: The node_id of this TeamDiscussion.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this TeamDiscussion.

        The unique sequence number of a team discussion.

        :return: The number of this TeamDiscussion.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TeamDiscussion.

        The unique sequence number of a team discussion.

        :param number: The number of this TeamDiscussion.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def pinned(self):
        """Gets the pinned of this TeamDiscussion.

        Whether or not this discussion should be pinned for easy retrieval.

        :return: The pinned of this TeamDiscussion.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this TeamDiscussion.

        Whether or not this discussion should be pinned for easy retrieval.

        :param pinned: The pinned of this TeamDiscussion.
        :type pinned: bool
        """
        if pinned is None:
            raise ValueError("Invalid value for `pinned`, must not be `None`")

        self._pinned = pinned

    @property
    def private(self):
        """Gets the private of this TeamDiscussion.

        Whether or not this discussion should be restricted to team members and organization administrators.

        :return: The private of this TeamDiscussion.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TeamDiscussion.

        Whether or not this discussion should be restricted to team members and organization administrators.

        :param private: The private of this TeamDiscussion.
        :type private: bool
        """
        if private is None:
            raise ValueError("Invalid value for `private`, must not be `None`")

        self._private = private

    @property
    def reactions(self):
        """Gets the reactions of this TeamDiscussion.


        :return: The reactions of this TeamDiscussion.
        :rtype: ReactionRollup
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this TeamDiscussion.


        :param reactions: The reactions of this TeamDiscussion.
        :type reactions: ReactionRollup
        """

        self._reactions = reactions

    @property
    def team_url(self):
        """Gets the team_url of this TeamDiscussion.


        :return: The team_url of this TeamDiscussion.
        :rtype: str
        """
        return self._team_url

    @team_url.setter
    def team_url(self, team_url):
        """Sets the team_url of this TeamDiscussion.


        :param team_url: The team_url of this TeamDiscussion.
        :type team_url: str
        """
        if team_url is None:
            raise ValueError("Invalid value for `team_url`, must not be `None`")

        self._team_url = team_url

    @property
    def title(self):
        """Gets the title of this TeamDiscussion.

        The title of the discussion.

        :return: The title of this TeamDiscussion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TeamDiscussion.

        The title of the discussion.

        :param title: The title of this TeamDiscussion.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamDiscussion.


        :return: The updated_at of this TeamDiscussion.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamDiscussion.


        :param updated_at: The updated_at of this TeamDiscussion.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TeamDiscussion.


        :return: The url of this TeamDiscussion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamDiscussion.


        :param url: The url of this TeamDiscussion.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
