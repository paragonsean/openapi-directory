# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesUpdateMilestoneRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, due_on: datetime=None, state: str='open', title: str=None):
        """IssuesUpdateMilestoneRequest - a model defined in OpenAPI

        :param description: The description of this IssuesUpdateMilestoneRequest.
        :param due_on: The due_on of this IssuesUpdateMilestoneRequest.
        :param state: The state of this IssuesUpdateMilestoneRequest.
        :param title: The title of this IssuesUpdateMilestoneRequest.
        """
        self.openapi_types = {
            'description': str,
            'due_on': datetime,
            'state': str,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'due_on': 'due_on',
            'state': 'state',
            'title': 'title'
        }

        self._description = description
        self._due_on = due_on
        self._state = state
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuesUpdateMilestoneRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issues_update_milestone_request of this IssuesUpdateMilestoneRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this IssuesUpdateMilestoneRequest.

        A description of the milestone.

        :return: The description of this IssuesUpdateMilestoneRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssuesUpdateMilestoneRequest.

        A description of the milestone.

        :param description: The description of this IssuesUpdateMilestoneRequest.
        :type description: str
        """

        self._description = description

    @property
    def due_on(self):
        """Gets the due_on of this IssuesUpdateMilestoneRequest.

        The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The due_on of this IssuesUpdateMilestoneRequest.
        :rtype: datetime
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on):
        """Sets the due_on of this IssuesUpdateMilestoneRequest.

        The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param due_on: The due_on of this IssuesUpdateMilestoneRequest.
        :type due_on: datetime
        """

        self._due_on = due_on

    @property
    def state(self):
        """Gets the state of this IssuesUpdateMilestoneRequest.

        The state of the milestone. Either `open` or `closed`.

        :return: The state of this IssuesUpdateMilestoneRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssuesUpdateMilestoneRequest.

        The state of the milestone. Either `open` or `closed`.

        :param state: The state of this IssuesUpdateMilestoneRequest.
        :type state: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this IssuesUpdateMilestoneRequest.

        The title of the milestone.

        :return: The title of this IssuesUpdateMilestoneRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssuesUpdateMilestoneRequest.

        The title of the milestone.

        :param title: The title of this IssuesUpdateMilestoneRequest.
        :type title: str
        """

        self._title = title
