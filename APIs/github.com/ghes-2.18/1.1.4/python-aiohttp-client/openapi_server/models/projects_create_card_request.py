# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.projects_create_card_request_one_of import ProjectsCreateCardRequestOneOf
from openapi_server.models.projects_create_card_request_one_of1 import ProjectsCreateCardRequestOneOf1
from openapi_server import util


class ProjectsCreateCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, note: str=None, content_id: int=None, content_type: str=None):
        """ProjectsCreateCardRequest - a model defined in OpenAPI

        :param note: The note of this ProjectsCreateCardRequest.
        :param content_id: The content_id of this ProjectsCreateCardRequest.
        :param content_type: The content_type of this ProjectsCreateCardRequest.
        """
        self.openapi_types = {
            'note': str,
            'content_id': int,
            'content_type': str
        }

        self.attribute_map = {
            'note': 'note',
            'content_id': 'content_id',
            'content_type': 'content_type'
        }

        self._note = note
        self._content_id = content_id
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsCreateCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The projects_create_card_request of this ProjectsCreateCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def note(self):
        """Gets the note of this ProjectsCreateCardRequest.

        The project card's note

        :return: The note of this ProjectsCreateCardRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProjectsCreateCardRequest.

        The project card's note

        :param note: The note of this ProjectsCreateCardRequest.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def content_id(self):
        """Gets the content_id of this ProjectsCreateCardRequest.

        The unique identifier of the content associated with the card

        :return: The content_id of this ProjectsCreateCardRequest.
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this ProjectsCreateCardRequest.

        The unique identifier of the content associated with the card

        :param content_id: The content_id of this ProjectsCreateCardRequest.
        :type content_id: int
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this ProjectsCreateCardRequest.

        The piece of content associated with the card

        :return: The content_type of this ProjectsCreateCardRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ProjectsCreateCardRequest.

        The piece of content associated with the card

        :param content_type: The content_type of this ProjectsCreateCardRequest.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type
