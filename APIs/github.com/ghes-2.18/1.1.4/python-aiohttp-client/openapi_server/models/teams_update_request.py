# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, parent_team_id: int=None, permission: str='pull', privacy: str=None):
        """TeamsUpdateRequest - a model defined in OpenAPI

        :param description: The description of this TeamsUpdateRequest.
        :param name: The name of this TeamsUpdateRequest.
        :param parent_team_id: The parent_team_id of this TeamsUpdateRequest.
        :param permission: The permission of this TeamsUpdateRequest.
        :param privacy: The privacy of this TeamsUpdateRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'parent_team_id': int,
            'permission': str,
            'privacy': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'parent_team_id': 'parent_team_id',
            'permission': 'permission',
            'privacy': 'privacy'
        }

        self._description = description
        self._name = name
        self._parent_team_id = parent_team_id
        self._permission = permission
        self._privacy = privacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The teams_update_request of this TeamsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TeamsUpdateRequest.

        The description of the team.

        :return: The description of this TeamsUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TeamsUpdateRequest.

        The description of the team.

        :param description: The description of this TeamsUpdateRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this TeamsUpdateRequest.

        The name of the team.

        :return: The name of this TeamsUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamsUpdateRequest.

        The name of the team.

        :param name: The name of this TeamsUpdateRequest.
        :type name: str
        """

        self._name = name

    @property
    def parent_team_id(self):
        """Gets the parent_team_id of this TeamsUpdateRequest.

        The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.

        :return: The parent_team_id of this TeamsUpdateRequest.
        :rtype: int
        """
        return self._parent_team_id

    @parent_team_id.setter
    def parent_team_id(self, parent_team_id):
        """Sets the parent_team_id of this TeamsUpdateRequest.

        The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.

        :param parent_team_id: The parent_team_id of this TeamsUpdateRequest.
        :type parent_team_id: int
        """

        self._parent_team_id = parent_team_id

    @property
    def permission(self):
        """Gets the permission of this TeamsUpdateRequest.

        **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:   \\* `pull` - team members can pull, but not push to or administer newly-added repositories.   \\* `push` - team members can pull and push, but not administer newly-added repositories.   \\* `admin` - team members can pull, push and administer newly-added repositories.

        :return: The permission of this TeamsUpdateRequest.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this TeamsUpdateRequest.

        **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:   \\* `pull` - team members can pull, but not push to or administer newly-added repositories.   \\* `push` - team members can pull and push, but not administer newly-added repositories.   \\* `admin` - team members can pull, push and administer newly-added repositories.

        :param permission: The permission of this TeamsUpdateRequest.
        :type permission: str
        """
        allowed_values = ["pull", "push", "admin"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def privacy(self):
        """Gets the privacy of this TeamsUpdateRequest.

        The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:   **For a non-nested team:**   \\* `secret` - only visible to organization owners and members of this team.   \\* `closed` - visible to all members of this organization.   **For a parent or child team:**   \\* `closed` - visible to all members of this organization.

        :return: The privacy of this TeamsUpdateRequest.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this TeamsUpdateRequest.

        The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:   **For a non-nested team:**   \\* `secret` - only visible to organization owners and members of this team.   \\* `closed` - visible to all members of this organization.   **For a parent or child team:**   \\* `closed` - visible to all members of this organization.

        :param privacy: The privacy of this TeamsUpdateRequest.
        :type privacy: str
        """
        allowed_values = ["secret", "closed"]  # noqa: E501
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy
