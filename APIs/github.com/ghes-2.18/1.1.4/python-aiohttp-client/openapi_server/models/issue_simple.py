# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.issue_pull_request import IssuePullRequest
from openapi_server.models.label import Label
from openapi_server.models.nullable_integration import NullableIntegration
from openapi_server.models.nullable_milestone import NullableMilestone
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server.models.repository import Repository
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class IssueSimple(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_lock_reason: str=None, assignee: NullableSimpleUser=None, assignees: List[SimpleUser]=None, author_association: AuthorAssociation=None, body: str=None, body_html: str=None, body_text: str=None, closed_at: datetime=None, comments: int=None, comments_url: str=None, created_at: datetime=None, events_url: str=None, html_url: str=None, id: int=None, labels: List[Label]=None, labels_url: str=None, locked: bool=None, milestone: NullableMilestone=None, node_id: str=None, number: int=None, performed_via_github_app: NullableIntegration=None, pull_request: IssuePullRequest=None, repository: Repository=None, repository_url: str=None, state: str=None, timeline_url: str=None, title: str=None, updated_at: datetime=None, url: str=None, user: NullableSimpleUser=None):
        """IssueSimple - a model defined in OpenAPI

        :param active_lock_reason: The active_lock_reason of this IssueSimple.
        :param assignee: The assignee of this IssueSimple.
        :param assignees: The assignees of this IssueSimple.
        :param author_association: The author_association of this IssueSimple.
        :param body: The body of this IssueSimple.
        :param body_html: The body_html of this IssueSimple.
        :param body_text: The body_text of this IssueSimple.
        :param closed_at: The closed_at of this IssueSimple.
        :param comments: The comments of this IssueSimple.
        :param comments_url: The comments_url of this IssueSimple.
        :param created_at: The created_at of this IssueSimple.
        :param events_url: The events_url of this IssueSimple.
        :param html_url: The html_url of this IssueSimple.
        :param id: The id of this IssueSimple.
        :param labels: The labels of this IssueSimple.
        :param labels_url: The labels_url of this IssueSimple.
        :param locked: The locked of this IssueSimple.
        :param milestone: The milestone of this IssueSimple.
        :param node_id: The node_id of this IssueSimple.
        :param number: The number of this IssueSimple.
        :param performed_via_github_app: The performed_via_github_app of this IssueSimple.
        :param pull_request: The pull_request of this IssueSimple.
        :param repository: The repository of this IssueSimple.
        :param repository_url: The repository_url of this IssueSimple.
        :param state: The state of this IssueSimple.
        :param timeline_url: The timeline_url of this IssueSimple.
        :param title: The title of this IssueSimple.
        :param updated_at: The updated_at of this IssueSimple.
        :param url: The url of this IssueSimple.
        :param user: The user of this IssueSimple.
        """
        self.openapi_types = {
            'active_lock_reason': str,
            'assignee': NullableSimpleUser,
            'assignees': List[SimpleUser],
            'author_association': AuthorAssociation,
            'body': str,
            'body_html': str,
            'body_text': str,
            'closed_at': datetime,
            'comments': int,
            'comments_url': str,
            'created_at': datetime,
            'events_url': str,
            'html_url': str,
            'id': int,
            'labels': List[Label],
            'labels_url': str,
            'locked': bool,
            'milestone': NullableMilestone,
            'node_id': str,
            'number': int,
            'performed_via_github_app': NullableIntegration,
            'pull_request': IssuePullRequest,
            'repository': Repository,
            'repository_url': str,
            'state': str,
            'timeline_url': str,
            'title': str,
            'updated_at': datetime,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'active_lock_reason': 'active_lock_reason',
            'assignee': 'assignee',
            'assignees': 'assignees',
            'author_association': 'author_association',
            'body': 'body',
            'body_html': 'body_html',
            'body_text': 'body_text',
            'closed_at': 'closed_at',
            'comments': 'comments',
            'comments_url': 'comments_url',
            'created_at': 'created_at',
            'events_url': 'events_url',
            'html_url': 'html_url',
            'id': 'id',
            'labels': 'labels',
            'labels_url': 'labels_url',
            'locked': 'locked',
            'milestone': 'milestone',
            'node_id': 'node_id',
            'number': 'number',
            'performed_via_github_app': 'performed_via_github_app',
            'pull_request': 'pull_request',
            'repository': 'repository',
            'repository_url': 'repository_url',
            'state': 'state',
            'timeline_url': 'timeline_url',
            'title': 'title',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._active_lock_reason = active_lock_reason
        self._assignee = assignee
        self._assignees = assignees
        self._author_association = author_association
        self._body = body
        self._body_html = body_html
        self._body_text = body_text
        self._closed_at = closed_at
        self._comments = comments
        self._comments_url = comments_url
        self._created_at = created_at
        self._events_url = events_url
        self._html_url = html_url
        self._id = id
        self._labels = labels
        self._labels_url = labels_url
        self._locked = locked
        self._milestone = milestone
        self._node_id = node_id
        self._number = number
        self._performed_via_github_app = performed_via_github_app
        self._pull_request = pull_request
        self._repository = repository
        self._repository_url = repository_url
        self._state = state
        self._timeline_url = timeline_url
        self._title = title
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueSimple':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The issue-simple of this IssueSimple.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_lock_reason(self):
        """Gets the active_lock_reason of this IssueSimple.


        :return: The active_lock_reason of this IssueSimple.
        :rtype: str
        """
        return self._active_lock_reason

    @active_lock_reason.setter
    def active_lock_reason(self, active_lock_reason):
        """Sets the active_lock_reason of this IssueSimple.


        :param active_lock_reason: The active_lock_reason of this IssueSimple.
        :type active_lock_reason: str
        """

        self._active_lock_reason = active_lock_reason

    @property
    def assignee(self):
        """Gets the assignee of this IssueSimple.


        :return: The assignee of this IssueSimple.
        :rtype: NullableSimpleUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this IssueSimple.


        :param assignee: The assignee of this IssueSimple.
        :type assignee: NullableSimpleUser
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee

    @property
    def assignees(self):
        """Gets the assignees of this IssueSimple.


        :return: The assignees of this IssueSimple.
        :rtype: List[SimpleUser]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this IssueSimple.


        :param assignees: The assignees of this IssueSimple.
        :type assignees: List[SimpleUser]
        """

        self._assignees = assignees

    @property
    def author_association(self):
        """Gets the author_association of this IssueSimple.


        :return: The author_association of this IssueSimple.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this IssueSimple.


        :param author_association: The author_association of this IssueSimple.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def body(self):
        """Gets the body of this IssueSimple.


        :return: The body of this IssueSimple.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IssueSimple.


        :param body: The body of this IssueSimple.
        :type body: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this IssueSimple.


        :return: The body_html of this IssueSimple.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this IssueSimple.


        :param body_html: The body_html of this IssueSimple.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def body_text(self):
        """Gets the body_text of this IssueSimple.


        :return: The body_text of this IssueSimple.
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this IssueSimple.


        :param body_text: The body_text of this IssueSimple.
        :type body_text: str
        """

        self._body_text = body_text

    @property
    def closed_at(self):
        """Gets the closed_at of this IssueSimple.


        :return: The closed_at of this IssueSimple.
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this IssueSimple.


        :param closed_at: The closed_at of this IssueSimple.
        :type closed_at: datetime
        """
        if closed_at is None:
            raise ValueError("Invalid value for `closed_at`, must not be `None`")

        self._closed_at = closed_at

    @property
    def comments(self):
        """Gets the comments of this IssueSimple.


        :return: The comments of this IssueSimple.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IssueSimple.


        :param comments: The comments of this IssueSimple.
        :type comments: int
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def comments_url(self):
        """Gets the comments_url of this IssueSimple.


        :return: The comments_url of this IssueSimple.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this IssueSimple.


        :param comments_url: The comments_url of this IssueSimple.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def created_at(self):
        """Gets the created_at of this IssueSimple.


        :return: The created_at of this IssueSimple.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IssueSimple.


        :param created_at: The created_at of this IssueSimple.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def events_url(self):
        """Gets the events_url of this IssueSimple.


        :return: The events_url of this IssueSimple.
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this IssueSimple.


        :param events_url: The events_url of this IssueSimple.
        :type events_url: str
        """
        if events_url is None:
            raise ValueError("Invalid value for `events_url`, must not be `None`")

        self._events_url = events_url

    @property
    def html_url(self):
        """Gets the html_url of this IssueSimple.


        :return: The html_url of this IssueSimple.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this IssueSimple.


        :param html_url: The html_url of this IssueSimple.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this IssueSimple.


        :return: The id of this IssueSimple.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IssueSimple.


        :param id: The id of this IssueSimple.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this IssueSimple.


        :return: The labels of this IssueSimple.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IssueSimple.


        :param labels: The labels of this IssueSimple.
        :type labels: List[Label]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def labels_url(self):
        """Gets the labels_url of this IssueSimple.


        :return: The labels_url of this IssueSimple.
        :rtype: str
        """
        return self._labels_url

    @labels_url.setter
    def labels_url(self, labels_url):
        """Sets the labels_url of this IssueSimple.


        :param labels_url: The labels_url of this IssueSimple.
        :type labels_url: str
        """
        if labels_url is None:
            raise ValueError("Invalid value for `labels_url`, must not be `None`")

        self._labels_url = labels_url

    @property
    def locked(self):
        """Gets the locked of this IssueSimple.


        :return: The locked of this IssueSimple.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this IssueSimple.


        :param locked: The locked of this IssueSimple.
        :type locked: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")

        self._locked = locked

    @property
    def milestone(self):
        """Gets the milestone of this IssueSimple.


        :return: The milestone of this IssueSimple.
        :rtype: NullableMilestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this IssueSimple.


        :param milestone: The milestone of this IssueSimple.
        :type milestone: NullableMilestone
        """
        if milestone is None:
            raise ValueError("Invalid value for `milestone`, must not be `None`")

        self._milestone = milestone

    @property
    def node_id(self):
        """Gets the node_id of this IssueSimple.


        :return: The node_id of this IssueSimple.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this IssueSimple.


        :param node_id: The node_id of this IssueSimple.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this IssueSimple.


        :return: The number of this IssueSimple.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IssueSimple.


        :param number: The number of this IssueSimple.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def performed_via_github_app(self):
        """Gets the performed_via_github_app of this IssueSimple.


        :return: The performed_via_github_app of this IssueSimple.
        :rtype: NullableIntegration
        """
        return self._performed_via_github_app

    @performed_via_github_app.setter
    def performed_via_github_app(self, performed_via_github_app):
        """Sets the performed_via_github_app of this IssueSimple.


        :param performed_via_github_app: The performed_via_github_app of this IssueSimple.
        :type performed_via_github_app: NullableIntegration
        """

        self._performed_via_github_app = performed_via_github_app

    @property
    def pull_request(self):
        """Gets the pull_request of this IssueSimple.


        :return: The pull_request of this IssueSimple.
        :rtype: IssuePullRequest
        """
        return self._pull_request

    @pull_request.setter
    def pull_request(self, pull_request):
        """Sets the pull_request of this IssueSimple.


        :param pull_request: The pull_request of this IssueSimple.
        :type pull_request: IssuePullRequest
        """

        self._pull_request = pull_request

    @property
    def repository(self):
        """Gets the repository of this IssueSimple.


        :return: The repository of this IssueSimple.
        :rtype: Repository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this IssueSimple.


        :param repository: The repository of this IssueSimple.
        :type repository: Repository
        """

        self._repository = repository

    @property
    def repository_url(self):
        """Gets the repository_url of this IssueSimple.


        :return: The repository_url of this IssueSimple.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this IssueSimple.


        :param repository_url: The repository_url of this IssueSimple.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def state(self):
        """Gets the state of this IssueSimple.


        :return: The state of this IssueSimple.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssueSimple.


        :param state: The state of this IssueSimple.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def timeline_url(self):
        """Gets the timeline_url of this IssueSimple.


        :return: The timeline_url of this IssueSimple.
        :rtype: str
        """
        return self._timeline_url

    @timeline_url.setter
    def timeline_url(self, timeline_url):
        """Sets the timeline_url of this IssueSimple.


        :param timeline_url: The timeline_url of this IssueSimple.
        :type timeline_url: str
        """

        self._timeline_url = timeline_url

    @property
    def title(self):
        """Gets the title of this IssueSimple.


        :return: The title of this IssueSimple.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueSimple.


        :param title: The title of this IssueSimple.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this IssueSimple.


        :return: The updated_at of this IssueSimple.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IssueSimple.


        :param updated_at: The updated_at of this IssueSimple.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this IssueSimple.


        :return: The url of this IssueSimple.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IssueSimple.


        :param url: The url of this IssueSimple.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this IssueSimple.


        :return: The user of this IssueSimple.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this IssueSimple.


        :param user: The user of this IssueSimple.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
