# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseGistOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_gists: int=None, public_gists: int=None, total_gists: int=None):
        """EnterpriseGistOverview - a model defined in OpenAPI

        :param private_gists: The private_gists of this EnterpriseGistOverview.
        :param public_gists: The public_gists of this EnterpriseGistOverview.
        :param total_gists: The total_gists of this EnterpriseGistOverview.
        """
        self.openapi_types = {
            'private_gists': int,
            'public_gists': int,
            'total_gists': int
        }

        self.attribute_map = {
            'private_gists': 'private_gists',
            'public_gists': 'public_gists',
            'total_gists': 'total_gists'
        }

        self._private_gists = private_gists
        self._public_gists = public_gists
        self._total_gists = total_gists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseGistOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-gist-overview of this EnterpriseGistOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_gists(self):
        """Gets the private_gists of this EnterpriseGistOverview.


        :return: The private_gists of this EnterpriseGistOverview.
        :rtype: int
        """
        return self._private_gists

    @private_gists.setter
    def private_gists(self, private_gists):
        """Sets the private_gists of this EnterpriseGistOverview.


        :param private_gists: The private_gists of this EnterpriseGistOverview.
        :type private_gists: int
        """
        if private_gists is None:
            raise ValueError("Invalid value for `private_gists`, must not be `None`")

        self._private_gists = private_gists

    @property
    def public_gists(self):
        """Gets the public_gists of this EnterpriseGistOverview.


        :return: The public_gists of this EnterpriseGistOverview.
        :rtype: int
        """
        return self._public_gists

    @public_gists.setter
    def public_gists(self, public_gists):
        """Sets the public_gists of this EnterpriseGistOverview.


        :param public_gists: The public_gists of this EnterpriseGistOverview.
        :type public_gists: int
        """
        if public_gists is None:
            raise ValueError("Invalid value for `public_gists`, must not be `None`")

        self._public_gists = public_gists

    @property
    def total_gists(self):
        """Gets the total_gists of this EnterpriseGistOverview.


        :return: The total_gists of this EnterpriseGistOverview.
        :rtype: int
        """
        return self._total_gists

    @total_gists.setter
    def total_gists(self, total_gists):
        """Sets the total_gists of this EnterpriseGistOverview.


        :param total_gists: The total_gists of this EnterpriseGistOverview.
        :type total_gists: int
        """
        if total_gists is None:
            raise ValueError("Invalid value for `total_gists`, must not be `None`")

        self._total_gists = total_gists
