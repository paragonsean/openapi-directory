/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.IssueComment;
import org.openapitools.client.model.IssueEvent;
import org.openapitools.client.model.IssueEventForIssue;
import org.openapitools.client.model.IssueSimple;
import org.openapitools.client.model.IssuesAddAssigneesRequest;
import org.openapitools.client.model.IssuesCreateLabelRequest;
import org.openapitools.client.model.IssuesCreateMilestoneRequest;
import org.openapitools.client.model.IssuesCreateRequest;
import org.openapitools.client.model.IssuesLockRequest;
import org.openapitools.client.model.IssuesRemoveAssigneesRequest;
import org.openapitools.client.model.IssuesSetLabelsRequest;
import org.openapitools.client.model.IssuesUpdateCommentRequest;
import org.openapitools.client.model.IssuesUpdateMilestoneRequest;
import org.openapitools.client.model.IssuesUpdateRequest;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.Milestone;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.TimelineIssueEvents;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssuesApi
 */
@Disabled
public class IssuesApiTest {

    private final IssuesApi api = new IssuesApi();

    /**
     * Add assignees to an issue
     *
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesAddAssigneesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesAddAssigneesRequest issuesAddAssigneesRequest = null;
        IssueSimple response = api.issuesAddAssignees(owner, repo, issueNumber, issuesAddAssigneesRequest);
        // TODO: test validations
    }

    /**
     * Add labels to an issue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesAddLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesSetLabelsRequest issuesSetLabelsRequest = null;
        List<Label> response = api.issuesAddLabels(owner, repo, issueNumber, issuesSetLabelsRequest);
        // TODO: test validations
    }

    /**
     * Check if a user can be assigned
     *
     * Checks if a user has permission to be assigned to an issue in this repository.  If the &#x60;assignee&#x60; can be assigned to issues in the repository, a &#x60;204&#x60; header with no content is returned.  Otherwise a &#x60;404&#x60; status code is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesCheckUserCanBeAssignedTest() throws ApiException {
        String owner = null;
        String repo = null;
        String assignee = null;
        api.issuesCheckUserCanBeAssigned(owner, repo, assignee);
        // TODO: test validations
    }

    /**
     * Create an issue
     *
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a &#x60;410 Gone&#x60; status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesCreateTest() throws ApiException {
        String owner = null;
        String repo = null;
        IssuesCreateRequest issuesCreateRequest = null;
        Issue response = api.issuesCreate(owner, repo, issuesCreateRequest);
        // TODO: test validations
    }

    /**
     * Create an issue comment
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \&quot;[Secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\&quot; and \&quot;[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\&quot; for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesCreateCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesUpdateCommentRequest issuesUpdateCommentRequest = null;
        IssueComment response = api.issuesCreateComment(owner, repo, issueNumber, issuesUpdateCommentRequest);
        // TODO: test validations
    }

    /**
     * Create a label
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesCreateLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        IssuesCreateLabelRequest issuesCreateLabelRequest = null;
        Label response = api.issuesCreateLabel(owner, repo, issuesCreateLabelRequest);
        // TODO: test validations
    }

    /**
     * Create a milestone
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesCreateMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        IssuesCreateMilestoneRequest issuesCreateMilestoneRequest = null;
        Milestone response = api.issuesCreateMilestone(owner, repo, issuesCreateMilestoneRequest);
        // TODO: test validations
    }

    /**
     * Delete an issue comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesDeleteCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        api.issuesDeleteComment(owner, repo, commentId);
        // TODO: test validations
    }

    /**
     * Delete a label
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesDeleteLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        api.issuesDeleteLabel(owner, repo, name);
        // TODO: test validations
    }

    /**
     * Delete a milestone
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesDeleteMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer milestoneNumber = null;
        api.issuesDeleteMilestone(owner, repo, milestoneNumber);
        // TODO: test validations
    }

    /**
     * Get an issue
     *
     * The API returns a [&#x60;301 Moved Permanently&#x60; status](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a &#x60;404 Not Found&#x60; status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a &#x60;410 Gone&#x60; status. To receive webhook events for transferred and deleted issues, subscribe to the [&#x60;issues&#x60;](https://docs.github.com/enterprise-server@2.18/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesGetTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        Issue response = api.issuesGet(owner, repo, issueNumber);
        // TODO: test validations
    }

    /**
     * Get an issue comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesGetCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        IssueComment response = api.issuesGetComment(owner, repo, commentId);
        // TODO: test validations
    }

    /**
     * Get an issue event
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesGetEventTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer eventId = null;
        IssueEvent response = api.issuesGetEvent(owner, repo, eventId);
        // TODO: test validations
    }

    /**
     * Get a label
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesGetLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        Label response = api.issuesGetLabel(owner, repo, name);
        // TODO: test validations
    }

    /**
     * Get a milestone
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesGetMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer milestoneNumber = null;
        Milestone response = api.issuesGetMilestone(owner, repo, milestoneNumber);
        // TODO: test validations
    }

    /**
     * List issues assigned to the authenticated user
     *
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the &#x60;filter&#x60; query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListTest() throws ApiException {
        String filter = null;
        String state = null;
        String labels = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Boolean collab = null;
        Boolean orgs = null;
        Boolean owned = null;
        Boolean pulls = null;
        Integer perPage = null;
        Integer page = null;
        List<Issue> response = api.issuesList(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, perPage, page);
        // TODO: test validations
    }

    /**
     * List assignees
     *
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListAssigneesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<SimpleUser> response = api.issuesListAssignees(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List issue comments
     *
     * Issue Comments are ordered by ascending ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<IssueComment> response = api.issuesListComments(owner, repo, issueNumber, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List issue comments for a repository
     *
     * By default, Issue Comments are ordered by ascending ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListCommentsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<IssueComment> response = api.issuesListCommentsForRepo(owner, repo, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List issue events
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListEventsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<IssueEventForIssue> response = api.issuesListEvents(owner, repo, issueNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List issue events for a repository
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListEventsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<IssueEvent> response = api.issuesListEventsForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List timeline events for an issue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListEventsForTimelineTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<TimelineIssueEvents> response = api.issuesListEventsForTimeline(owner, repo, issueNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List user account issues assigned to the authenticated user
     *
     * List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListForAuthenticatedUserTest() throws ApiException {
        String filter = null;
        String state = null;
        String labels = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<Issue> response = api.issuesListForAuthenticatedUser(filter, state, labels, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List organization issues assigned to the authenticated user
     *
     * List issues in an organization assigned to the authenticated user.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListForOrgTest() throws ApiException {
        String org = null;
        String filter = null;
        String state = null;
        String labels = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<Issue> response = api.issuesListForOrg(org, filter, state, labels, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List repository issues
     *
     * List issues in a repository.  **Note**: GitHub&#39;s REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \&quot;Issues\&quot; endpoints may return both issues and pull requests in the response. You can identify pull requests by the &#x60;pull_request&#x60; key. Be aware that the &#x60;id&#x60; of a pull request returned from \&quot;Issues\&quot; endpoints will be an _issue id_. To find out the pull request id, use the \&quot;[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\&quot; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        String milestone = null;
        String state = null;
        String assignee = null;
        String creator = null;
        String mentioned = null;
        String labels = null;
        String sort = null;
        String direction = null;
        OffsetDateTime since = null;
        Integer perPage = null;
        Integer page = null;
        List<IssueSimple> response = api.issuesListForRepo(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, perPage, page);
        // TODO: test validations
    }

    /**
     * List labels for issues in a milestone
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListLabelsForMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer milestoneNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<Label> response = api.issuesListLabelsForMilestone(owner, repo, milestoneNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List labels for a repository
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListLabelsForRepoTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer perPage = null;
        Integer page = null;
        List<Label> response = api.issuesListLabelsForRepo(owner, repo, perPage, page);
        // TODO: test validations
    }

    /**
     * List labels for an issue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListLabelsOnIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        Integer perPage = null;
        Integer page = null;
        List<Label> response = api.issuesListLabelsOnIssue(owner, repo, issueNumber, perPage, page);
        // TODO: test validations
    }

    /**
     * List milestones
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesListMilestonesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String sort = null;
        String direction = null;
        Integer perPage = null;
        Integer page = null;
        List<Milestone> response = api.issuesListMilestones(owner, repo, state, sort, direction, perPage, page);
        // TODO: test validations
    }

    /**
     * Lock an issue
     *
     * Users with push access can lock an issue or pull request&#39;s conversation.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesLockTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesLockRequest issuesLockRequest = null;
        api.issuesLock(owner, repo, issueNumber, issuesLockRequest);
        // TODO: test validations
    }

    /**
     * Remove all labels from an issue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesRemoveAllLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        api.issuesRemoveAllLabels(owner, repo, issueNumber);
        // TODO: test validations
    }

    /**
     * Remove assignees from an issue
     *
     * Removes one or more assignees from an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesRemoveAssigneesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesRemoveAssigneesRequest issuesRemoveAssigneesRequest = null;
        IssueSimple response = api.issuesRemoveAssignees(owner, repo, issueNumber, issuesRemoveAssigneesRequest);
        // TODO: test validations
    }

    /**
     * Remove a label from an issue
     *
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a &#x60;404 Not Found&#x60; status if the label does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesRemoveLabelTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        String name = null;
        List<Label> response = api.issuesRemoveLabel(owner, repo, issueNumber, name);
        // TODO: test validations
    }

    /**
     * Set labels for an issue
     *
     * Removes any previous labels and sets the new labels for an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesSetLabelsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesSetLabelsRequest issuesSetLabelsRequest = null;
        List<Label> response = api.issuesSetLabels(owner, repo, issueNumber, issuesSetLabelsRequest);
        // TODO: test validations
    }

    /**
     * Unlock an issue
     *
     * Users with push access can unlock an issue&#39;s conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesUnlockTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        api.issuesUnlock(owner, repo, issueNumber);
        // TODO: test validations
    }

    /**
     * Update an issue
     *
     * Issue owners and users with push access can edit an issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesUpdateTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        IssuesUpdateRequest issuesUpdateRequest = null;
        Issue response = api.issuesUpdate(owner, repo, issueNumber, issuesUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update an issue comment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesUpdateCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        IssuesUpdateCommentRequest issuesUpdateCommentRequest = null;
        IssueComment response = api.issuesUpdateComment(owner, repo, commentId, issuesUpdateCommentRequest);
        // TODO: test validations
    }

    /**
     * Update a milestone
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issuesUpdateMilestoneTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer milestoneNumber = null;
        IssuesUpdateMilestoneRequest issuesUpdateMilestoneRequest = null;
        Milestone response = api.issuesUpdateMilestone(owner, repo, milestoneNumber, issuesUpdateMilestoneRequest);
        // TODO: test validations
    }

}
