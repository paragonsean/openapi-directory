/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.ReactionsCreateForCommitCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueCommentRequest;
import org.openapitools.client.model.ReactionsCreateForIssueRequest;
import org.openapitools.client.model.ReactionsCreateForPullRequestReviewCommentRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionCommentRequest;
import org.openapitools.client.model.ReactionsCreateForTeamDiscussionRequest;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReactionsApi
 */
@Disabled
public class ReactionsApiTest {

    private final ReactionsApi api = new ReactionsApi();

    /**
     * Create reaction for a commit comment
     *
     * Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@2.18/rest/reference/repos#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForCommitCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        ReactionsCreateForCommitCommentRequest reactionsCreateForCommitCommentRequest = null;
        Reaction response = api.reactionsCreateForCommitComment(owner, repo, commentId, reactionsCreateForCommitCommentRequest);
        // TODO: test validations
    }

    /**
     * Create reaction for an issue
     *
     * Create a reaction to an [issue](https://docs.github.com/enterprise-server@2.18/rest/reference/issues/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        ReactionsCreateForIssueRequest reactionsCreateForIssueRequest = null;
        Reaction response = api.reactionsCreateForIssue(owner, repo, issueNumber, reactionsCreateForIssueRequest);
        // TODO: test validations
    }

    /**
     * Create reaction for an issue comment
     *
     * Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@2.18/rest/reference/issues#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForIssueCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        ReactionsCreateForIssueCommentRequest reactionsCreateForIssueCommentRequest = null;
        Reaction response = api.reactionsCreateForIssueComment(owner, repo, commentId, reactionsCreateForIssueCommentRequest);
        // TODO: test validations
    }

    /**
     * Create reaction for a pull request review comment
     *
     * Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#comments). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForPullRequestReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        ReactionsCreateForPullRequestReviewCommentRequest reactionsCreateForPullRequestReviewCommentRequest = null;
        Reaction response = api.reactionsCreateForPullRequestReviewComment(owner, repo, commentId, reactionsCreateForPullRequestReviewCommentRequest);
        // TODO: test validations
    }

    /**
     * Create reaction for a team discussion
     *
     * Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussions). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.18/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForTeamDiscussionTest() throws ApiException {
        String accept = null;
        Integer teamId = null;
        Integer discussionNumber = null;
        ReactionsCreateForTeamDiscussionRequest reactionsCreateForTeamDiscussionRequest = null;
        Reaction response = api.reactionsCreateForTeamDiscussion(accept, teamId, discussionNumber, reactionsCreateForTeamDiscussionRequest);
        // TODO: test validations
    }

    /**
     * Create reaction for a team discussion comment
     *
     * Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.18/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsCreateForTeamDiscussionCommentTest() throws ApiException {
        String accept = null;
        Integer teamId = null;
        Integer discussionNumber = null;
        Integer commentNumber = null;
        ReactionsCreateForTeamDiscussionCommentRequest reactionsCreateForTeamDiscussionCommentRequest = null;
        Reaction response = api.reactionsCreateForTeamDiscussionComment(accept, teamId, discussionNumber, commentNumber, reactionsCreateForTeamDiscussionCommentRequest);
        // TODO: test validations
    }

    /**
     * Delete a reaction
     *
     * OAuth access tokens require the &#x60;write:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.18/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussion-comments).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsDeleteTest() throws ApiException {
        String accept = null;
        Integer reactionId = null;
        api.reactionsDelete(accept, reactionId);
        // TODO: test validations
    }

    /**
     * List reactions for a commit comment
     *
     * List the reactions to a [commit comment](https://docs.github.com/enterprise-server@2.18/rest/reference/repos#comments).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForCommitCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForCommitComment(owner, repo, commentId, content, perPage, page);
        // TODO: test validations
    }

    /**
     * List reactions for an issue
     *
     * List the reactions to an [issue](https://docs.github.com/enterprise-server@2.18/rest/reference/issues).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForIssueTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer issueNumber = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForIssue(owner, repo, issueNumber, content, perPage, page);
        // TODO: test validations
    }

    /**
     * List reactions for an issue comment
     *
     * List the reactions to an [issue comment](https://docs.github.com/enterprise-server@2.18/rest/reference/issues#comments).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForIssueCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForIssueComment(owner, repo, commentId, content, perPage, page);
        // TODO: test validations
    }

    /**
     * List reactions for a pull request review comment
     *
     * List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#review-comments).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForPullRequestReviewCommentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer commentId = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForPullRequestReviewComment(owner, repo, commentId, content, perPage, page);
        // TODO: test validations
    }

    /**
     * List reactions for a team discussion
     *
     * List the reactions to a [team discussion](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussions). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.18/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForTeamDiscussionTest() throws ApiException {
        String accept = null;
        Integer teamId = null;
        Integer discussionNumber = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForTeamDiscussion(accept, teamId, discussionNumber, content, perPage, page);
        // TODO: test validations
    }

    /**
     * List reactions for a team discussion comment
     *
     * List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@2.18/rest/reference/teams#discussion-comments). OAuth access tokens require the &#x60;read:discussion&#x60; [scope](https://docs.github.com/enterprise-server@2.18/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactionsListForTeamDiscussionCommentTest() throws ApiException {
        String accept = null;
        Integer teamId = null;
        Integer discussionNumber = null;
        Integer commentNumber = null;
        String content = null;
        Integer perPage = null;
        Integer page = null;
        List<Reaction> response = api.reactionsListForTeamDiscussionComment(accept, teamId, discussionNumber, commentNumber, content, perPage, page);
        // TODO: test validations
    }

}
