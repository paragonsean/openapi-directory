/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppsCreateContentAttachmentRequest;
import org.openapitools.client.model.AppsCreateFromManifest201Response;
import org.openapitools.client.model.AppsCreateInstallationAccessTokenRequest;
import org.openapitools.client.model.AppsGetInstallation415Response;
import org.openapitools.client.model.AppsListInstallationReposForAuthenticatedUser200Response;
import org.openapitools.client.model.AppsListInstallationsForAuthenticatedUser200Response;
import org.openapitools.client.model.AppsListReposAccessibleToInstallation200Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.ContentReferenceAttachment;
import org.openapitools.client.model.InstallationGhes2;
import org.openapitools.client.model.InstallationToken;
import org.openapitools.client.model.Integration;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.ValidationErrorSimple;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    /**
     * Add a repository to an app installation
     *
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.18/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.18/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsAddRepoToInstallationTest() throws ApiException {
        Integer installationId = null;
        Integer repositoryId = null;
        api.appsAddRepoToInstallation(installationId, repositoryId);
        // TODO: test validations
    }

    /**
     * Create a content attachment
     *
     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the &#x60;id&#x60; and &#x60;repository&#x60; &#x60;full_name&#x60; of the content reference from the [&#x60;content_reference&#x60; event](https://docs.github.com/enterprise-server@2.18/webhooks/event-payloads/#content_reference) to create an attachment.  The app must create a content attachment within six hours of the content reference URL being posted. See \&quot;[Using content attachments](https://docs.github.com/enterprise-server@2.18/apps/using-content-attachments/)\&quot; for details about content attachments.  You must use an [installation access token](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateContentAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer contentReferenceId = null;
        AppsCreateContentAttachmentRequest appsCreateContentAttachmentRequest = null;
        ContentReferenceAttachment response = api.appsCreateContentAttachment(owner, repo, contentReferenceId, appsCreateContentAttachmentRequest);
        // TODO: test validations
    }

    /**
     * Create a GitHub App from a manifest
     *
     * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary &#x60;code&#x60; used to retrieve the GitHub App&#39;s &#x60;id&#x60;, &#x60;pem&#x60; (private key), and &#x60;webhook_secret&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateFromManifestTest() throws ApiException {
        String code = null;
        Object body = null;
        AppsCreateFromManifest201Response response = api.appsCreateFromManifest(code, body);
        // TODO: test validations
    }

    /**
     * Create an installation access token for an app
     *
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app&#39;s installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of &#x60;401 - Unauthorized&#x60;, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the &#x60;repository_ids&#x60; when creating the token. When you omit &#x60;repository_ids&#x60;, the response does not contain the &#x60;repositories&#x60; key.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsCreateInstallationAccessTokenTest() throws ApiException {
        String accept = null;
        Integer installationId = null;
        AppsCreateInstallationAccessTokenRequest appsCreateInstallationAccessTokenRequest = null;
        InstallationToken response = api.appsCreateInstallationAccessToken(accept, installationId, appsCreateInstallationAccessTokenRequest);
        // TODO: test validations
    }

    /**
     * Delete an installation for the authenticated app
     *
     * Uninstalls a GitHub App on a user, organization, or business account. You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsDeleteInstallationTest() throws ApiException {
        String accept = null;
        Integer installationId = null;
        api.appsDeleteInstallation(accept, installationId);
        // TODO: test validations
    }

    /**
     * Get the authenticated app
     *
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the &#x60;installations_count&#x60; in the response. For more details about your app&#39;s installations, see the \&quot;[List installations for the authenticated app](https://docs.github.com/enterprise-server@2.18/rest/reference/apps#list-installations-for-the-authenticated-app)\&quot; endpoint.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetAuthenticatedTest() throws ApiException {
        Integration response = api.appsGetAuthenticated();
        // TODO: test validations
    }

    /**
     * Get an app
     *
     * **Note**: The &#x60;:app_slug&#x60; is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., &#x60;https://github.com/settings/apps/:app_slug&#x60;).  If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetBySlugTest() throws ApiException {
        String appSlug = null;
        Integration response = api.appsGetBySlug(appSlug);
        // TODO: test validations
    }

    /**
     * Get an installation for the authenticated app
     *
     * Enables an authenticated GitHub App to find an installation&#39;s information using the installation id. The installation&#39;s account type (&#x60;target_type&#x60;) will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetInstallationTest() throws ApiException {
        String accept = null;
        Integer installationId = null;
        InstallationGhes2 response = api.appsGetInstallation(accept, installationId);
        // TODO: test validations
    }

    /**
     * Get an organization installation for the authenticated app
     *
     * Enables an authenticated GitHub App to find the organization&#39;s installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetOrgInstallationTest() throws ApiException {
        String accept = null;
        String org = null;
        InstallationGhes2 response = api.appsGetOrgInstallation(accept, org);
        // TODO: test validations
    }

    /**
     * Get a repository installation for the authenticated app
     *
     * Enables an authenticated GitHub App to find the repository&#39;s installation information. The installation&#39;s account type will be either an organization or a user account, depending which account the repository belongs to.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetRepoInstallationTest() throws ApiException {
        String accept = null;
        String owner = null;
        String repo = null;
        InstallationGhes2 response = api.appsGetRepoInstallation(accept, owner, repo);
        // TODO: test validations
    }

    /**
     * Get a user installation for the authenticated app
     *
     * Enables an authenticated GitHub App to find the user’s installation information.  You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsGetUserInstallationTest() throws ApiException {
        String accept = null;
        String username = null;
        InstallationGhes2 response = api.appsGetUserInstallation(accept, username);
        // TODO: test validations
    }

    /**
     * List repositories accessible to the user access token
     *
     * List repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access for an installation.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The access the user has to each repository is included in the hash under the &#x60;permissions&#x60; key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListInstallationReposForAuthenticatedUserTest() throws ApiException {
        String accept = null;
        Integer installationId = null;
        Integer perPage = null;
        Integer page = null;
        AppsListInstallationReposForAuthenticatedUser200Response response = api.appsListInstallationReposForAuthenticatedUser(accept, installationId, perPage, page);
        // TODO: test validations
    }

    /**
     * List installations for the authenticated app
     *
     * You must use a [JWT](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.  The permissions the installation has are included under the &#x60;permissions&#x60; key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListInstallationsTest() throws ApiException {
        String accept = null;
        Integer perPage = null;
        Integer page = null;
        List<InstallationGhes2> response = api.appsListInstallations(accept, perPage, page);
        // TODO: test validations
    }

    /**
     * List app installations accessible to the user access token
     *
     * Lists installations of your GitHub App that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.  You can find the permissions for the installation under the &#x60;permissions&#x60; key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListInstallationsForAuthenticatedUserTest() throws ApiException {
        String accept = null;
        Integer perPage = null;
        Integer page = null;
        AppsListInstallationsForAuthenticatedUser200Response response = api.appsListInstallationsForAuthenticatedUser(accept, perPage, page);
        // TODO: test validations
    }

    /**
     * List repositories accessible to the app installation
     *
     * List repositories that an app installation can access.  You must use an [installation access token](https://docs.github.com/enterprise-server@2.18/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsListReposAccessibleToInstallationTest() throws ApiException {
        String accept = null;
        Integer perPage = null;
        Integer page = null;
        AppsListReposAccessibleToInstallation200Response response = api.appsListReposAccessibleToInstallation(accept, perPage, page);
        // TODO: test validations
    }

    /**
     * Remove a repository from an app installation
     *
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.  You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@2.18/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@2.18/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsRemoveRepoFromInstallationTest() throws ApiException {
        Integer installationId = null;
        Integer repositoryId = null;
        api.appsRemoveRepoFromInstallation(installationId, repositoryId);
        // TODO: test validations
    }

}
