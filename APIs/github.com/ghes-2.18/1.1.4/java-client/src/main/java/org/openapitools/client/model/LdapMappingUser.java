/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LdapMappingUserPlan;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ldap Private User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:06.767787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LdapMappingUser {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private URI avatarUrl;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private String blog;

  public static final String SERIALIZED_NAME_BUSINESS_PLUS = "business_plus";
  @SerializedName(SERIALIZED_NAME_BUSINESS_PLUS)
  private Boolean businessPlus;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private Integer collaborators;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISK_USAGE = "disk_usage";
  @SerializedName(SERIALIZED_NAME_DISK_USAGE)
  private Integer diskUsage;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EVENTS_URL = "events_url";
  @SerializedName(SERIALIZED_NAME_EVENTS_URL)
  private String eventsUrl;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private Integer followers;

  public static final String SERIALIZED_NAME_FOLLOWERS_URL = "followers_url";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS_URL)
  private URI followersUrl;

  public static final String SERIALIZED_NAME_FOLLOWING = "following";
  @SerializedName(SERIALIZED_NAME_FOLLOWING)
  private Integer following;

  public static final String SERIALIZED_NAME_FOLLOWING_URL = "following_url";
  @SerializedName(SERIALIZED_NAME_FOLLOWING_URL)
  private String followingUrl;

  public static final String SERIALIZED_NAME_GISTS_URL = "gists_url";
  @SerializedName(SERIALIZED_NAME_GISTS_URL)
  private String gistsUrl;

  public static final String SERIALIZED_NAME_GRAVATAR_ID = "gravatar_id";
  @SerializedName(SERIALIZED_NAME_GRAVATAR_ID)
  private String gravatarId;

  public static final String SERIALIZED_NAME_HIREABLE = "hireable";
  @SerializedName(SERIALIZED_NAME_HIREABLE)
  private Boolean hireable;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LDAP_DN = "ldap_dn";
  @SerializedName(SERIALIZED_NAME_LDAP_DN)
  private String ldapDn;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_ORGANIZATIONS_URL = "organizations_url";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS_URL)
  private URI organizationsUrl;

  public static final String SERIALIZED_NAME_OWNED_PRIVATE_REPOS = "owned_private_repos";
  @SerializedName(SERIALIZED_NAME_OWNED_PRIVATE_REPOS)
  private Integer ownedPrivateRepos;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private LdapMappingUserPlan plan;

  public static final String SERIALIZED_NAME_PRIVATE_GISTS = "private_gists";
  @SerializedName(SERIALIZED_NAME_PRIVATE_GISTS)
  private Integer privateGists;

  public static final String SERIALIZED_NAME_PUBLIC_GISTS = "public_gists";
  @SerializedName(SERIALIZED_NAME_PUBLIC_GISTS)
  private Integer publicGists;

  public static final String SERIALIZED_NAME_PUBLIC_REPOS = "public_repos";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REPOS)
  private Integer publicRepos;

  public static final String SERIALIZED_NAME_RECEIVED_EVENTS_URL = "received_events_url";
  @SerializedName(SERIALIZED_NAME_RECEIVED_EVENTS_URL)
  private URI receivedEventsUrl;

  public static final String SERIALIZED_NAME_REPOS_URL = "repos_url";
  @SerializedName(SERIALIZED_NAME_REPOS_URL)
  private URI reposUrl;

  public static final String SERIALIZED_NAME_SITE_ADMIN = "site_admin";
  @SerializedName(SERIALIZED_NAME_SITE_ADMIN)
  private Boolean siteAdmin;

  public static final String SERIALIZED_NAME_STARRED_URL = "starred_url";
  @SerializedName(SERIALIZED_NAME_STARRED_URL)
  private String starredUrl;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS_URL = "subscriptions_url";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS_URL)
  private URI subscriptionsUrl;

  public static final String SERIALIZED_NAME_SUSPENDED_AT = "suspended_at";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_AT)
  private OffsetDateTime suspendedAt;

  public static final String SERIALIZED_NAME_TOTAL_PRIVATE_REPOS = "total_private_repos";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRIVATE_REPOS)
  private Integer totalPrivateRepos;

  public static final String SERIALIZED_NAME_TWITTER_USERNAME = "twitter_username";
  @SerializedName(SERIALIZED_NAME_TWITTER_USERNAME)
  private String twitterUsername;

  public static final String SERIALIZED_NAME_TWO_FACTOR_AUTHENTICATION = "two_factor_authentication";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_AUTHENTICATION)
  private Boolean twoFactorAuthentication;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public LdapMappingUser() {
  }

  public LdapMappingUser avatarUrl(URI avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nonnull
  public URI getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(URI avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public LdapMappingUser bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * Get bio
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public LdapMappingUser blog(String blog) {
    this.blog = blog;
    return this;
  }

  /**
   * Get blog
   * @return blog
   */
  @javax.annotation.Nullable
  public String getBlog() {
    return blog;
  }

  public void setBlog(String blog) {
    this.blog = blog;
  }


  public LdapMappingUser businessPlus(Boolean businessPlus) {
    this.businessPlus = businessPlus;
    return this;
  }

  /**
   * Get businessPlus
   * @return businessPlus
   */
  @javax.annotation.Nullable
  public Boolean getBusinessPlus() {
    return businessPlus;
  }

  public void setBusinessPlus(Boolean businessPlus) {
    this.businessPlus = businessPlus;
  }


  public LdapMappingUser collaborators(Integer collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  /**
   * Get collaborators
   * @return collaborators
   */
  @javax.annotation.Nonnull
  public Integer getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(Integer collaborators) {
    this.collaborators = collaborators;
  }


  public LdapMappingUser company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public LdapMappingUser createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LdapMappingUser diskUsage(Integer diskUsage) {
    this.diskUsage = diskUsage;
    return this;
  }

  /**
   * Get diskUsage
   * @return diskUsage
   */
  @javax.annotation.Nonnull
  public Integer getDiskUsage() {
    return diskUsage;
  }

  public void setDiskUsage(Integer diskUsage) {
    this.diskUsage = diskUsage;
  }


  public LdapMappingUser email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public LdapMappingUser eventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
    return this;
  }

  /**
   * Get eventsUrl
   * @return eventsUrl
   */
  @javax.annotation.Nonnull
  public String getEventsUrl() {
    return eventsUrl;
  }

  public void setEventsUrl(String eventsUrl) {
    this.eventsUrl = eventsUrl;
  }


  public LdapMappingUser followers(Integer followers) {
    this.followers = followers;
    return this;
  }

  /**
   * Get followers
   * @return followers
   */
  @javax.annotation.Nonnull
  public Integer getFollowers() {
    return followers;
  }

  public void setFollowers(Integer followers) {
    this.followers = followers;
  }


  public LdapMappingUser followersUrl(URI followersUrl) {
    this.followersUrl = followersUrl;
    return this;
  }

  /**
   * Get followersUrl
   * @return followersUrl
   */
  @javax.annotation.Nonnull
  public URI getFollowersUrl() {
    return followersUrl;
  }

  public void setFollowersUrl(URI followersUrl) {
    this.followersUrl = followersUrl;
  }


  public LdapMappingUser following(Integer following) {
    this.following = following;
    return this;
  }

  /**
   * Get following
   * @return following
   */
  @javax.annotation.Nonnull
  public Integer getFollowing() {
    return following;
  }

  public void setFollowing(Integer following) {
    this.following = following;
  }


  public LdapMappingUser followingUrl(String followingUrl) {
    this.followingUrl = followingUrl;
    return this;
  }

  /**
   * Get followingUrl
   * @return followingUrl
   */
  @javax.annotation.Nonnull
  public String getFollowingUrl() {
    return followingUrl;
  }

  public void setFollowingUrl(String followingUrl) {
    this.followingUrl = followingUrl;
  }


  public LdapMappingUser gistsUrl(String gistsUrl) {
    this.gistsUrl = gistsUrl;
    return this;
  }

  /**
   * Get gistsUrl
   * @return gistsUrl
   */
  @javax.annotation.Nonnull
  public String getGistsUrl() {
    return gistsUrl;
  }

  public void setGistsUrl(String gistsUrl) {
    this.gistsUrl = gistsUrl;
  }


  public LdapMappingUser gravatarId(String gravatarId) {
    this.gravatarId = gravatarId;
    return this;
  }

  /**
   * Get gravatarId
   * @return gravatarId
   */
  @javax.annotation.Nullable
  public String getGravatarId() {
    return gravatarId;
  }

  public void setGravatarId(String gravatarId) {
    this.gravatarId = gravatarId;
  }


  public LdapMappingUser hireable(Boolean hireable) {
    this.hireable = hireable;
    return this;
  }

  /**
   * Get hireable
   * @return hireable
   */
  @javax.annotation.Nullable
  public Boolean getHireable() {
    return hireable;
  }

  public void setHireable(Boolean hireable) {
    this.hireable = hireable;
  }


  public LdapMappingUser htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public LdapMappingUser id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LdapMappingUser ldapDn(String ldapDn) {
    this.ldapDn = ldapDn;
    return this;
  }

  /**
   * Get ldapDn
   * @return ldapDn
   */
  @javax.annotation.Nullable
  public String getLdapDn() {
    return ldapDn;
  }

  public void setLdapDn(String ldapDn) {
    this.ldapDn = ldapDn;
  }


  public LdapMappingUser location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public LdapMappingUser login(String login) {
    this.login = login;
    return this;
  }

  /**
   * Get login
   * @return login
   */
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public LdapMappingUser name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LdapMappingUser nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public LdapMappingUser organizationsUrl(URI organizationsUrl) {
    this.organizationsUrl = organizationsUrl;
    return this;
  }

  /**
   * Get organizationsUrl
   * @return organizationsUrl
   */
  @javax.annotation.Nonnull
  public URI getOrganizationsUrl() {
    return organizationsUrl;
  }

  public void setOrganizationsUrl(URI organizationsUrl) {
    this.organizationsUrl = organizationsUrl;
  }


  public LdapMappingUser ownedPrivateRepos(Integer ownedPrivateRepos) {
    this.ownedPrivateRepos = ownedPrivateRepos;
    return this;
  }

  /**
   * Get ownedPrivateRepos
   * @return ownedPrivateRepos
   */
  @javax.annotation.Nonnull
  public Integer getOwnedPrivateRepos() {
    return ownedPrivateRepos;
  }

  public void setOwnedPrivateRepos(Integer ownedPrivateRepos) {
    this.ownedPrivateRepos = ownedPrivateRepos;
  }


  public LdapMappingUser plan(LdapMappingUserPlan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public LdapMappingUserPlan getPlan() {
    return plan;
  }

  public void setPlan(LdapMappingUserPlan plan) {
    this.plan = plan;
  }


  public LdapMappingUser privateGists(Integer privateGists) {
    this.privateGists = privateGists;
    return this;
  }

  /**
   * Get privateGists
   * @return privateGists
   */
  @javax.annotation.Nonnull
  public Integer getPrivateGists() {
    return privateGists;
  }

  public void setPrivateGists(Integer privateGists) {
    this.privateGists = privateGists;
  }


  public LdapMappingUser publicGists(Integer publicGists) {
    this.publicGists = publicGists;
    return this;
  }

  /**
   * Get publicGists
   * @return publicGists
   */
  @javax.annotation.Nonnull
  public Integer getPublicGists() {
    return publicGists;
  }

  public void setPublicGists(Integer publicGists) {
    this.publicGists = publicGists;
  }


  public LdapMappingUser publicRepos(Integer publicRepos) {
    this.publicRepos = publicRepos;
    return this;
  }

  /**
   * Get publicRepos
   * @return publicRepos
   */
  @javax.annotation.Nonnull
  public Integer getPublicRepos() {
    return publicRepos;
  }

  public void setPublicRepos(Integer publicRepos) {
    this.publicRepos = publicRepos;
  }


  public LdapMappingUser receivedEventsUrl(URI receivedEventsUrl) {
    this.receivedEventsUrl = receivedEventsUrl;
    return this;
  }

  /**
   * Get receivedEventsUrl
   * @return receivedEventsUrl
   */
  @javax.annotation.Nonnull
  public URI getReceivedEventsUrl() {
    return receivedEventsUrl;
  }

  public void setReceivedEventsUrl(URI receivedEventsUrl) {
    this.receivedEventsUrl = receivedEventsUrl;
  }


  public LdapMappingUser reposUrl(URI reposUrl) {
    this.reposUrl = reposUrl;
    return this;
  }

  /**
   * Get reposUrl
   * @return reposUrl
   */
  @javax.annotation.Nonnull
  public URI getReposUrl() {
    return reposUrl;
  }

  public void setReposUrl(URI reposUrl) {
    this.reposUrl = reposUrl;
  }


  public LdapMappingUser siteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
    return this;
  }

  /**
   * Get siteAdmin
   * @return siteAdmin
   */
  @javax.annotation.Nonnull
  public Boolean getSiteAdmin() {
    return siteAdmin;
  }

  public void setSiteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
  }


  public LdapMappingUser starredUrl(String starredUrl) {
    this.starredUrl = starredUrl;
    return this;
  }

  /**
   * Get starredUrl
   * @return starredUrl
   */
  @javax.annotation.Nonnull
  public String getStarredUrl() {
    return starredUrl;
  }

  public void setStarredUrl(String starredUrl) {
    this.starredUrl = starredUrl;
  }


  public LdapMappingUser subscriptionsUrl(URI subscriptionsUrl) {
    this.subscriptionsUrl = subscriptionsUrl;
    return this;
  }

  /**
   * Get subscriptionsUrl
   * @return subscriptionsUrl
   */
  @javax.annotation.Nonnull
  public URI getSubscriptionsUrl() {
    return subscriptionsUrl;
  }

  public void setSubscriptionsUrl(URI subscriptionsUrl) {
    this.subscriptionsUrl = subscriptionsUrl;
  }


  public LdapMappingUser suspendedAt(OffsetDateTime suspendedAt) {
    this.suspendedAt = suspendedAt;
    return this;
  }

  /**
   * Get suspendedAt
   * @return suspendedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSuspendedAt() {
    return suspendedAt;
  }

  public void setSuspendedAt(OffsetDateTime suspendedAt) {
    this.suspendedAt = suspendedAt;
  }


  public LdapMappingUser totalPrivateRepos(Integer totalPrivateRepos) {
    this.totalPrivateRepos = totalPrivateRepos;
    return this;
  }

  /**
   * Get totalPrivateRepos
   * @return totalPrivateRepos
   */
  @javax.annotation.Nonnull
  public Integer getTotalPrivateRepos() {
    return totalPrivateRepos;
  }

  public void setTotalPrivateRepos(Integer totalPrivateRepos) {
    this.totalPrivateRepos = totalPrivateRepos;
  }


  public LdapMappingUser twitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
    return this;
  }

  /**
   * Get twitterUsername
   * @return twitterUsername
   */
  @javax.annotation.Nullable
  public String getTwitterUsername() {
    return twitterUsername;
  }

  public void setTwitterUsername(String twitterUsername) {
    this.twitterUsername = twitterUsername;
  }


  public LdapMappingUser twoFactorAuthentication(Boolean twoFactorAuthentication) {
    this.twoFactorAuthentication = twoFactorAuthentication;
    return this;
  }

  /**
   * Get twoFactorAuthentication
   * @return twoFactorAuthentication
   */
  @javax.annotation.Nonnull
  public Boolean getTwoFactorAuthentication() {
    return twoFactorAuthentication;
  }

  public void setTwoFactorAuthentication(Boolean twoFactorAuthentication) {
    this.twoFactorAuthentication = twoFactorAuthentication;
  }


  public LdapMappingUser type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public LdapMappingUser updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LdapMappingUser url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdapMappingUser ldapMappingUser = (LdapMappingUser) o;
    return Objects.equals(this.avatarUrl, ldapMappingUser.avatarUrl) &&
        Objects.equals(this.bio, ldapMappingUser.bio) &&
        Objects.equals(this.blog, ldapMappingUser.blog) &&
        Objects.equals(this.businessPlus, ldapMappingUser.businessPlus) &&
        Objects.equals(this.collaborators, ldapMappingUser.collaborators) &&
        Objects.equals(this.company, ldapMappingUser.company) &&
        Objects.equals(this.createdAt, ldapMappingUser.createdAt) &&
        Objects.equals(this.diskUsage, ldapMappingUser.diskUsage) &&
        Objects.equals(this.email, ldapMappingUser.email) &&
        Objects.equals(this.eventsUrl, ldapMappingUser.eventsUrl) &&
        Objects.equals(this.followers, ldapMappingUser.followers) &&
        Objects.equals(this.followersUrl, ldapMappingUser.followersUrl) &&
        Objects.equals(this.following, ldapMappingUser.following) &&
        Objects.equals(this.followingUrl, ldapMappingUser.followingUrl) &&
        Objects.equals(this.gistsUrl, ldapMappingUser.gistsUrl) &&
        Objects.equals(this.gravatarId, ldapMappingUser.gravatarId) &&
        Objects.equals(this.hireable, ldapMappingUser.hireable) &&
        Objects.equals(this.htmlUrl, ldapMappingUser.htmlUrl) &&
        Objects.equals(this.id, ldapMappingUser.id) &&
        Objects.equals(this.ldapDn, ldapMappingUser.ldapDn) &&
        Objects.equals(this.location, ldapMappingUser.location) &&
        Objects.equals(this.login, ldapMappingUser.login) &&
        Objects.equals(this.name, ldapMappingUser.name) &&
        Objects.equals(this.nodeId, ldapMappingUser.nodeId) &&
        Objects.equals(this.organizationsUrl, ldapMappingUser.organizationsUrl) &&
        Objects.equals(this.ownedPrivateRepos, ldapMappingUser.ownedPrivateRepos) &&
        Objects.equals(this.plan, ldapMappingUser.plan) &&
        Objects.equals(this.privateGists, ldapMappingUser.privateGists) &&
        Objects.equals(this.publicGists, ldapMappingUser.publicGists) &&
        Objects.equals(this.publicRepos, ldapMappingUser.publicRepos) &&
        Objects.equals(this.receivedEventsUrl, ldapMappingUser.receivedEventsUrl) &&
        Objects.equals(this.reposUrl, ldapMappingUser.reposUrl) &&
        Objects.equals(this.siteAdmin, ldapMappingUser.siteAdmin) &&
        Objects.equals(this.starredUrl, ldapMappingUser.starredUrl) &&
        Objects.equals(this.subscriptionsUrl, ldapMappingUser.subscriptionsUrl) &&
        Objects.equals(this.suspendedAt, ldapMappingUser.suspendedAt) &&
        Objects.equals(this.totalPrivateRepos, ldapMappingUser.totalPrivateRepos) &&
        Objects.equals(this.twitterUsername, ldapMappingUser.twitterUsername) &&
        Objects.equals(this.twoFactorAuthentication, ldapMappingUser.twoFactorAuthentication) &&
        Objects.equals(this.type, ldapMappingUser.type) &&
        Objects.equals(this.updatedAt, ldapMappingUser.updatedAt) &&
        Objects.equals(this.url, ldapMappingUser.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, bio, blog, businessPlus, collaborators, company, createdAt, diskUsage, email, eventsUrl, followers, followersUrl, following, followingUrl, gistsUrl, gravatarId, hireable, htmlUrl, id, ldapDn, location, login, name, nodeId, organizationsUrl, ownedPrivateRepos, plan, privateGists, publicGists, publicRepos, receivedEventsUrl, reposUrl, siteAdmin, starredUrl, subscriptionsUrl, suspendedAt, totalPrivateRepos, twitterUsername, twoFactorAuthentication, type, updatedAt, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdapMappingUser {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    businessPlus: ").append(toIndentedString(businessPlus)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    diskUsage: ").append(toIndentedString(diskUsage)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    eventsUrl: ").append(toIndentedString(eventsUrl)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    followersUrl: ").append(toIndentedString(followersUrl)).append("\n");
    sb.append("    following: ").append(toIndentedString(following)).append("\n");
    sb.append("    followingUrl: ").append(toIndentedString(followingUrl)).append("\n");
    sb.append("    gistsUrl: ").append(toIndentedString(gistsUrl)).append("\n");
    sb.append("    gravatarId: ").append(toIndentedString(gravatarId)).append("\n");
    sb.append("    hireable: ").append(toIndentedString(hireable)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ldapDn: ").append(toIndentedString(ldapDn)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    organizationsUrl: ").append(toIndentedString(organizationsUrl)).append("\n");
    sb.append("    ownedPrivateRepos: ").append(toIndentedString(ownedPrivateRepos)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    privateGists: ").append(toIndentedString(privateGists)).append("\n");
    sb.append("    publicGists: ").append(toIndentedString(publicGists)).append("\n");
    sb.append("    publicRepos: ").append(toIndentedString(publicRepos)).append("\n");
    sb.append("    receivedEventsUrl: ").append(toIndentedString(receivedEventsUrl)).append("\n");
    sb.append("    reposUrl: ").append(toIndentedString(reposUrl)).append("\n");
    sb.append("    siteAdmin: ").append(toIndentedString(siteAdmin)).append("\n");
    sb.append("    starredUrl: ").append(toIndentedString(starredUrl)).append("\n");
    sb.append("    subscriptionsUrl: ").append(toIndentedString(subscriptionsUrl)).append("\n");
    sb.append("    suspendedAt: ").append(toIndentedString(suspendedAt)).append("\n");
    sb.append("    totalPrivateRepos: ").append(toIndentedString(totalPrivateRepos)).append("\n");
    sb.append("    twitterUsername: ").append(toIndentedString(twitterUsername)).append("\n");
    sb.append("    twoFactorAuthentication: ").append(toIndentedString(twoFactorAuthentication)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_url");
    openapiFields.add("bio");
    openapiFields.add("blog");
    openapiFields.add("business_plus");
    openapiFields.add("collaborators");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("disk_usage");
    openapiFields.add("email");
    openapiFields.add("events_url");
    openapiFields.add("followers");
    openapiFields.add("followers_url");
    openapiFields.add("following");
    openapiFields.add("following_url");
    openapiFields.add("gists_url");
    openapiFields.add("gravatar_id");
    openapiFields.add("hireable");
    openapiFields.add("html_url");
    openapiFields.add("id");
    openapiFields.add("ldap_dn");
    openapiFields.add("location");
    openapiFields.add("login");
    openapiFields.add("name");
    openapiFields.add("node_id");
    openapiFields.add("organizations_url");
    openapiFields.add("owned_private_repos");
    openapiFields.add("plan");
    openapiFields.add("private_gists");
    openapiFields.add("public_gists");
    openapiFields.add("public_repos");
    openapiFields.add("received_events_url");
    openapiFields.add("repos_url");
    openapiFields.add("site_admin");
    openapiFields.add("starred_url");
    openapiFields.add("subscriptions_url");
    openapiFields.add("suspended_at");
    openapiFields.add("total_private_repos");
    openapiFields.add("twitter_username");
    openapiFields.add("two_factor_authentication");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatar_url");
    openapiRequiredFields.add("bio");
    openapiRequiredFields.add("blog");
    openapiRequiredFields.add("collaborators");
    openapiRequiredFields.add("company");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("disk_usage");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("events_url");
    openapiRequiredFields.add("followers");
    openapiRequiredFields.add("followers_url");
    openapiRequiredFields.add("following");
    openapiRequiredFields.add("following_url");
    openapiRequiredFields.add("gists_url");
    openapiRequiredFields.add("gravatar_id");
    openapiRequiredFields.add("hireable");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("organizations_url");
    openapiRequiredFields.add("owned_private_repos");
    openapiRequiredFields.add("private_gists");
    openapiRequiredFields.add("public_gists");
    openapiRequiredFields.add("public_repos");
    openapiRequiredFields.add("received_events_url");
    openapiRequiredFields.add("repos_url");
    openapiRequiredFields.add("site_admin");
    openapiRequiredFields.add("starred_url");
    openapiRequiredFields.add("subscriptions_url");
    openapiRequiredFields.add("total_private_repos");
    openapiRequiredFields.add("two_factor_authentication");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LdapMappingUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LdapMappingUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdapMappingUser is not found in the empty JSON string", LdapMappingUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LdapMappingUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LdapMappingUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdapMappingUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) && !jsonObj.get("blog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blog").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("events_url").toString()));
      }
      if (!jsonObj.get("followers_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followers_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followers_url").toString()));
      }
      if (!jsonObj.get("following_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `following_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("following_url").toString()));
      }
      if (!jsonObj.get("gists_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gists_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gists_url").toString()));
      }
      if ((jsonObj.get("gravatar_id") != null && !jsonObj.get("gravatar_id").isJsonNull()) && !jsonObj.get("gravatar_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gravatar_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gravatar_id").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if ((jsonObj.get("ldap_dn") != null && !jsonObj.get("ldap_dn").isJsonNull()) && !jsonObj.get("ldap_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_dn").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if (!jsonObj.get("organizations_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizations_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizations_url").toString()));
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        LdapMappingUserPlan.validateJsonElement(jsonObj.get("plan"));
      }
      if (!jsonObj.get("received_events_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `received_events_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("received_events_url").toString()));
      }
      if (!jsonObj.get("repos_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repos_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repos_url").toString()));
      }
      if (!jsonObj.get("starred_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starred_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starred_url").toString()));
      }
      if (!jsonObj.get("subscriptions_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptions_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptions_url").toString()));
      }
      if ((jsonObj.get("twitter_username") != null && !jsonObj.get("twitter_username").isJsonNull()) && !jsonObj.get("twitter_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_username").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdapMappingUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdapMappingUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdapMappingUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdapMappingUser.class));

       return (TypeAdapter<T>) new TypeAdapter<LdapMappingUser>() {
           @Override
           public void write(JsonWriter out, LdapMappingUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LdapMappingUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LdapMappingUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LdapMappingUser
   * @throws IOException if the JSON string is invalid with respect to LdapMappingUser
   */
  public static LdapMappingUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdapMappingUser.class);
  }

  /**
   * Convert an instance of LdapMappingUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

