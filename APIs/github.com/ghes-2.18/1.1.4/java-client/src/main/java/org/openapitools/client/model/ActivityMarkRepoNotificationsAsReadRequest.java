/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityMarkRepoNotificationsAsReadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:06.767787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityMarkRepoNotificationsAsReadRequest {
  public static final String SERIALIZED_NAME_LAST_READ_AT = "last_read_at";
  @SerializedName(SERIALIZED_NAME_LAST_READ_AT)
  private OffsetDateTime lastReadAt;

  public ActivityMarkRepoNotificationsAsReadRequest() {
  }

  public ActivityMarkRepoNotificationsAsReadRequest lastReadAt(OffsetDateTime lastReadAt) {
    this.lastReadAt = lastReadAt;
    return this;
  }

  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. Default: The current timestamp.
   * @return lastReadAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReadAt() {
    return lastReadAt;
  }

  public void setLastReadAt(OffsetDateTime lastReadAt) {
    this.lastReadAt = lastReadAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest = (ActivityMarkRepoNotificationsAsReadRequest) o;
    return Objects.equals(this.lastReadAt, activityMarkRepoNotificationsAsReadRequest.lastReadAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastReadAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityMarkRepoNotificationsAsReadRequest {\n");
    sb.append("    lastReadAt: ").append(toIndentedString(lastReadAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_read_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityMarkRepoNotificationsAsReadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityMarkRepoNotificationsAsReadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityMarkRepoNotificationsAsReadRequest is not found in the empty JSON string", ActivityMarkRepoNotificationsAsReadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityMarkRepoNotificationsAsReadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityMarkRepoNotificationsAsReadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityMarkRepoNotificationsAsReadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityMarkRepoNotificationsAsReadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityMarkRepoNotificationsAsReadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityMarkRepoNotificationsAsReadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityMarkRepoNotificationsAsReadRequest>() {
           @Override
           public void write(JsonWriter out, ActivityMarkRepoNotificationsAsReadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityMarkRepoNotificationsAsReadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityMarkRepoNotificationsAsReadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityMarkRepoNotificationsAsReadRequest
   * @throws IOException if the JSON string is invalid with respect to ActivityMarkRepoNotificationsAsReadRequest
   */
  public static ActivityMarkRepoNotificationsAsReadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityMarkRepoNotificationsAsReadRequest.class);
  }

  /**
   * Convert an instance of ActivityMarkRepoNotificationsAsReadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

