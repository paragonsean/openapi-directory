/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.ActivityListReposStarredByUser200Response;
import org.openapitools.client.model.ActivityListStargazersForRepo200Response;
import org.openapitools.client.model.ActivityMarkNotificationsAsRead202Response;
import org.openapitools.client.model.ActivityMarkNotificationsAsReadRequest;
import org.openapitools.client.model.ActivityMarkRepoNotificationsAsReadRequest;
import org.openapitools.client.model.ActivitySetRepoSubscriptionRequest;
import org.openapitools.client.model.ActivitySetThreadSubscriptionRequest;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.EnterpriseAdminUpdateOrgName202Response;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Feed;
import org.openapitools.client.model.MinimalRepository;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Repository;
import org.openapitools.client.model.RepositorySubscription;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.StarredRepository;
import org.openapitools.client.model.Thread;
import org.openapitools.client.model.ThreadSubscription;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activityCheckRepoIsStarredByAuthenticatedUser
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if this repository is starred by you </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if this repository is not starred by you </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user">Check if a repository is starred by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityCheckRepoIsStarredByAuthenticatedUserCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityCheckRepoIsStarredByAuthenticatedUserValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityCheckRepoIsStarredByAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityCheckRepoIsStarredByAuthenticatedUser(Async)");
        }

        return activityCheckRepoIsStarredByAuthenticatedUserCall(owner, repo, _callback);

    }

    /**
     * Check if a repository is starred by the authenticated user
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if this repository is starred by you </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if this repository is not starred by you </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user">Check if a repository is starred by the authenticated user Documentation</a>
     */
    public void activityCheckRepoIsStarredByAuthenticatedUser(String owner, String repo) throws ApiException {
        activityCheckRepoIsStarredByAuthenticatedUserWithHttpInfo(owner, repo);
    }

    /**
     * Check if a repository is starred by the authenticated user
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if this repository is starred by you </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if this repository is not starred by you </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user">Check if a repository is starred by the authenticated user Documentation</a>
     */
    public ApiResponse<Void> activityCheckRepoIsStarredByAuthenticatedUserWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = activityCheckRepoIsStarredByAuthenticatedUserValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a repository is starred by the authenticated user (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response if this repository is starred by you </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if this repository is not starred by you </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user">Check if a repository is starred by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityCheckRepoIsStarredByAuthenticatedUserAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityCheckRepoIsStarredByAuthenticatedUserValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityDeleteRepoSubscription
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription">Delete a repository subscription Documentation</a>
     */
    public okhttp3.Call activityDeleteRepoSubscriptionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityDeleteRepoSubscriptionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityDeleteRepoSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityDeleteRepoSubscription(Async)");
        }

        return activityDeleteRepoSubscriptionCall(owner, repo, _callback);

    }

    /**
     * Delete a repository subscription
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository&#39;s subscription manually](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription).
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription">Delete a repository subscription Documentation</a>
     */
    public void activityDeleteRepoSubscription(String owner, String repo) throws ApiException {
        activityDeleteRepoSubscriptionWithHttpInfo(owner, repo);
    }

    /**
     * Delete a repository subscription
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository&#39;s subscription manually](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription).
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription">Delete a repository subscription Documentation</a>
     */
    public ApiResponse<Void> activityDeleteRepoSubscriptionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = activityDeleteRepoSubscriptionValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository subscription (asynchronously)
     * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository&#39;s subscription manually](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription).
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription">Delete a repository subscription Documentation</a>
     */
    public okhttp3.Call activityDeleteRepoSubscriptionAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityDeleteRepoSubscriptionValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityDeleteThreadSubscription
     * @param threadId thread_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription">Delete a thread subscription Documentation</a>
     */
    public okhttp3.Call activityDeleteThreadSubscriptionCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{thread_id}/subscription"
            .replace("{" + "thread_id" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityDeleteThreadSubscriptionValidateBeforeCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling activityDeleteThreadSubscription(Async)");
        }

        return activityDeleteThreadSubscriptionCall(threadId, _callback);

    }

    /**
     * Delete a thread subscription
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription) endpoint and set &#x60;ignore&#x60; to &#x60;true&#x60;.
     * @param threadId thread_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription">Delete a thread subscription Documentation</a>
     */
    public void activityDeleteThreadSubscription(Integer threadId) throws ApiException {
        activityDeleteThreadSubscriptionWithHttpInfo(threadId);
    }

    /**
     * Delete a thread subscription
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription) endpoint and set &#x60;ignore&#x60; to &#x60;true&#x60;.
     * @param threadId thread_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription">Delete a thread subscription Documentation</a>
     */
    public ApiResponse<Void> activityDeleteThreadSubscriptionWithHttpInfo(Integer threadId) throws ApiException {
        okhttp3.Call localVarCall = activityDeleteThreadSubscriptionValidateBeforeCall(threadId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a thread subscription (asynchronously)
     * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription) endpoint and set &#x60;ignore&#x60; to &#x60;true&#x60;.
     * @param threadId thread_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription">Delete a thread subscription Documentation</a>
     */
    public okhttp3.Call activityDeleteThreadSubscriptionAsync(Integer threadId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityDeleteThreadSubscriptionValidateBeforeCall(threadId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityGetFeeds
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-feeds">Get feeds Documentation</a>
     */
    public okhttp3.Call activityGetFeedsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityGetFeedsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return activityGetFeedsCall(_callback);

    }

    /**
     * Get feeds
     * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:  *   **Timeline**: The GitHub Enterprise Server global public timeline *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#hypermedia) *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.  **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@2.18/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     * @return Feed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-feeds">Get feeds Documentation</a>
     */
    public Feed activityGetFeeds() throws ApiException {
        ApiResponse<Feed> localVarResp = activityGetFeedsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get feeds
     * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:  *   **Timeline**: The GitHub Enterprise Server global public timeline *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#hypermedia) *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.  **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@2.18/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     * @return ApiResponse&lt;Feed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-feeds">Get feeds Documentation</a>
     */
    public ApiResponse<Feed> activityGetFeedsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = activityGetFeedsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Feed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get feeds (asynchronously)
     * GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:  *   **Timeline**: The GitHub Enterprise Server global public timeline *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#hypermedia) *   **Current user public**: The public timeline for the authenticated user *   **Current user**: The private timeline for the authenticated user *   **Current user actor**: The private timeline for activity created by the authenticated user *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of. *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.  **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@2.18/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-feeds">Get feeds Documentation</a>
     */
    public okhttp3.Call activityGetFeedsAsync(final ApiCallback<Feed> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityGetFeedsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Feed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityGetRepoSubscription
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if you subscribe to the repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if you don&#39;t subscribe to the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription">Get a repository subscription Documentation</a>
     */
    public okhttp3.Call activityGetRepoSubscriptionCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityGetRepoSubscriptionValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityGetRepoSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityGetRepoSubscription(Async)");
        }

        return activityGetRepoSubscriptionCall(owner, repo, _callback);

    }

    /**
     * Get a repository subscription
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return RepositorySubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if you subscribe to the repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if you don&#39;t subscribe to the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription">Get a repository subscription Documentation</a>
     */
    public RepositorySubscription activityGetRepoSubscription(String owner, String repo) throws ApiException {
        ApiResponse<RepositorySubscription> localVarResp = activityGetRepoSubscriptionWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository subscription
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;RepositorySubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if you subscribe to the repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if you don&#39;t subscribe to the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription">Get a repository subscription Documentation</a>
     */
    public ApiResponse<RepositorySubscription> activityGetRepoSubscriptionWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = activityGetRepoSubscriptionValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<RepositorySubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository subscription (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> if you subscribe to the repository </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if you don&#39;t subscribe to the repository </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription">Get a repository subscription Documentation</a>
     */
    public okhttp3.Call activityGetRepoSubscriptionAsync(String owner, String repo, final ApiCallback<RepositorySubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityGetRepoSubscriptionValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<RepositorySubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityGetThread
     * @param threadId thread_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread">Get a thread Documentation</a>
     */
    public okhttp3.Call activityGetThreadCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{thread_id}"
            .replace("{" + "thread_id" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityGetThreadValidateBeforeCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling activityGetThread(Async)");
        }

        return activityGetThreadCall(threadId, _callback);

    }

    /**
     * Get a thread
     * 
     * @param threadId thread_id parameter (required)
     * @return Thread
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread">Get a thread Documentation</a>
     */
    public Thread activityGetThread(Integer threadId) throws ApiException {
        ApiResponse<Thread> localVarResp = activityGetThreadWithHttpInfo(threadId);
        return localVarResp.getData();
    }

    /**
     * Get a thread
     * 
     * @param threadId thread_id parameter (required)
     * @return ApiResponse&lt;Thread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread">Get a thread Documentation</a>
     */
    public ApiResponse<Thread> activityGetThreadWithHttpInfo(Integer threadId) throws ApiException {
        okhttp3.Call localVarCall = activityGetThreadValidateBeforeCall(threadId, null);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a thread (asynchronously)
     * 
     * @param threadId thread_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread">Get a thread Documentation</a>
     */
    public okhttp3.Call activityGetThreadAsync(Integer threadId, final ApiCallback<Thread> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityGetThreadValidateBeforeCall(threadId, _callback);
        Type localVarReturnType = new TypeToken<Thread>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityGetThreadSubscriptionForAuthenticatedUser
     * @param threadId thread_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user">Get a thread subscription for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityGetThreadSubscriptionForAuthenticatedUserCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{thread_id}/subscription"
            .replace("{" + "thread_id" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityGetThreadSubscriptionForAuthenticatedUserValidateBeforeCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling activityGetThreadSubscriptionForAuthenticatedUser(Async)");
        }

        return activityGetThreadSubscriptionForAuthenticatedUserCall(threadId, _callback);

    }

    /**
     * Get a thread subscription for the authenticated user
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription).  Note that subscriptions are only generated if a user is participating in a conversation--for example, they&#39;ve replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     * @param threadId thread_id parameter (required)
     * @return ThreadSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user">Get a thread subscription for the authenticated user Documentation</a>
     */
    public ThreadSubscription activityGetThreadSubscriptionForAuthenticatedUser(Integer threadId) throws ApiException {
        ApiResponse<ThreadSubscription> localVarResp = activityGetThreadSubscriptionForAuthenticatedUserWithHttpInfo(threadId);
        return localVarResp.getData();
    }

    /**
     * Get a thread subscription for the authenticated user
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription).  Note that subscriptions are only generated if a user is participating in a conversation--for example, they&#39;ve replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     * @param threadId thread_id parameter (required)
     * @return ApiResponse&lt;ThreadSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user">Get a thread subscription for the authenticated user Documentation</a>
     */
    public ApiResponse<ThreadSubscription> activityGetThreadSubscriptionForAuthenticatedUserWithHttpInfo(Integer threadId) throws ApiException {
        okhttp3.Call localVarCall = activityGetThreadSubscriptionForAuthenticatedUserValidateBeforeCall(threadId, null);
        Type localVarReturnType = new TypeToken<ThreadSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a thread subscription for the authenticated user (asynchronously)
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-repository-subscription).  Note that subscriptions are only generated if a user is participating in a conversation--for example, they&#39;ve replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     * @param threadId thread_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user">Get a thread subscription for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityGetThreadSubscriptionForAuthenticatedUserAsync(Integer threadId, final ApiCallback<ThreadSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityGetThreadSubscriptionForAuthenticatedUserValidateBeforeCall(threadId, _callback);
        Type localVarReturnType = new TypeToken<ThreadSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListEventsForAuthenticatedUser
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-for-the-authenticated-user">List events for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListEventsForAuthenticatedUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/events"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListEventsForAuthenticatedUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListEventsForAuthenticatedUser(Async)");
        }

        return activityListEventsForAuthenticatedUserCall(username, perPage, page, _callback);

    }

    /**
     * List events for the authenticated user
     * If you are authenticated as the given user, you will see your private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-for-the-authenticated-user">List events for the authenticated user Documentation</a>
     */
    public List<Event> activityListEventsForAuthenticatedUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListEventsForAuthenticatedUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List events for the authenticated user
     * If you are authenticated as the given user, you will see your private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-for-the-authenticated-user">List events for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Event>> activityListEventsForAuthenticatedUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListEventsForAuthenticatedUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List events for the authenticated user (asynchronously)
     * If you are authenticated as the given user, you will see your private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-for-the-authenticated-user">List events for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListEventsForAuthenticatedUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListEventsForAuthenticatedUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListNotificationsForAuthenticatedUser
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user">List notifications for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListNotificationsForAuthenticatedUserCall(Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (participating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating", participating));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListNotificationsForAuthenticatedUserValidateBeforeCall(Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return activityListNotificationsForAuthenticatedUserCall(all, participating, since, before, perPage, page, _callback);

    }

    /**
     * List notifications for the authenticated user
     * List all notifications for the current user, sorted by most recently updated.
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Thread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user">List notifications for the authenticated user Documentation</a>
     */
    public List<Thread> activityListNotificationsForAuthenticatedUser(Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Thread>> localVarResp = activityListNotificationsForAuthenticatedUserWithHttpInfo(all, participating, since, before, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List notifications for the authenticated user
     * List all notifications for the current user, sorted by most recently updated.
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Thread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user">List notifications for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Thread>> activityListNotificationsForAuthenticatedUserWithHttpInfo(Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListNotificationsForAuthenticatedUserValidateBeforeCall(all, participating, since, before, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Thread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List notifications for the authenticated user (asynchronously)
     * List all notifications for the current user, sorted by most recently updated.
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user">List notifications for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListNotificationsForAuthenticatedUserAsync(Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback<List<Thread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListNotificationsForAuthenticatedUserValidateBeforeCall(all, participating, since, before, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Thread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListOrgEventsForAuthenticatedUser
     * @param username  (required)
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-organization-events-for-the-authenticated-user">List organization events for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListOrgEventsForAuthenticatedUserCall(String username, String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/events/orgs/{org}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListOrgEventsForAuthenticatedUserValidateBeforeCall(String username, String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListOrgEventsForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling activityListOrgEventsForAuthenticatedUser(Async)");
        }

        return activityListOrgEventsForAuthenticatedUserCall(username, org, perPage, page, _callback);

    }

    /**
     * List organization events for the authenticated user
     * This is the user&#39;s organization dashboard. You must be authenticated as the user to view this.
     * @param username  (required)
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-organization-events-for-the-authenticated-user">List organization events for the authenticated user Documentation</a>
     */
    public List<Event> activityListOrgEventsForAuthenticatedUser(String username, String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListOrgEventsForAuthenticatedUserWithHttpInfo(username, org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization events for the authenticated user
     * This is the user&#39;s organization dashboard. You must be authenticated as the user to view this.
     * @param username  (required)
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-organization-events-for-the-authenticated-user">List organization events for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Event>> activityListOrgEventsForAuthenticatedUserWithHttpInfo(String username, String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListOrgEventsForAuthenticatedUserValidateBeforeCall(username, org, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization events for the authenticated user (asynchronously)
     * This is the user&#39;s organization dashboard. You must be authenticated as the user to view this.
     * @param username  (required)
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-organization-events-for-the-authenticated-user">List organization events for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListOrgEventsForAuthenticatedUserAsync(String username, String org, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListOrgEventsForAuthenticatedUserValidateBeforeCall(username, org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListPublicEvents
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events">List public events Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListPublicEventsValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return activityListPublicEventsCall(perPage, page, _callback);

    }

    /**
     * List public events
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events">List public events Documentation</a>
     */
    public List<Event> activityListPublicEvents(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListPublicEventsWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public events
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events">List public events Documentation</a>
     */
    public ApiResponse<List<Event>> activityListPublicEventsWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListPublicEventsValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public events (asynchronously)
     * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events">List public events Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsAsync(Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListPublicEventsValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListPublicEventsForRepoNetwork
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-network-of-repositories">List public events for a network of repositories Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsForRepoNetworkCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/networks/{owner}/{repo}/events"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListPublicEventsForRepoNetworkValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityListPublicEventsForRepoNetwork(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityListPublicEventsForRepoNetwork(Async)");
        }

        return activityListPublicEventsForRepoNetworkCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List public events for a network of repositories
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-network-of-repositories">List public events for a network of repositories Documentation</a>
     */
    public List<Event> activityListPublicEventsForRepoNetwork(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListPublicEventsForRepoNetworkWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public events for a network of repositories
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-network-of-repositories">List public events for a network of repositories Documentation</a>
     */
    public ApiResponse<List<Event>> activityListPublicEventsForRepoNetworkWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListPublicEventsForRepoNetworkValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public events for a network of repositories (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 301 </td><td> Moved permanently </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-network-of-repositories">List public events for a network of repositories Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsForRepoNetworkAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListPublicEventsForRepoNetworkValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListPublicEventsForUser
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-user">List public events for a user Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/events/public"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListPublicEventsForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListPublicEventsForUser(Async)");
        }

        return activityListPublicEventsForUserCall(username, perPage, page, _callback);

    }

    /**
     * List public events for a user
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-user">List public events for a user Documentation</a>
     */
    public List<Event> activityListPublicEventsForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListPublicEventsForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public events for a user
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-user">List public events for a user Documentation</a>
     */
    public ApiResponse<List<Event>> activityListPublicEventsForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListPublicEventsForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public events for a user (asynchronously)
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-for-a-user">List public events for a user Documentation</a>
     */
    public okhttp3.Call activityListPublicEventsForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListPublicEventsForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListPublicOrgEvents
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-organization-events">List public organization events Documentation</a>
     */
    public okhttp3.Call activityListPublicOrgEventsCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/events"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListPublicOrgEventsValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling activityListPublicOrgEvents(Async)");
        }

        return activityListPublicOrgEventsCall(org, perPage, page, _callback);

    }

    /**
     * List public organization events
     * 
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-organization-events">List public organization events Documentation</a>
     */
    public List<Event> activityListPublicOrgEvents(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListPublicOrgEventsWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public organization events
     * 
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-organization-events">List public organization events Documentation</a>
     */
    public ApiResponse<List<Event>> activityListPublicOrgEventsWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListPublicOrgEventsValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public organization events (asynchronously)
     * 
     * @param org  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-organization-events">List public organization events Documentation</a>
     */
    public okhttp3.Call activityListPublicOrgEventsAsync(String org, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListPublicOrgEventsValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListReceivedEventsForUser
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-received-by-the-authenticated-user">List events received by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListReceivedEventsForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/received_events"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListReceivedEventsForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListReceivedEventsForUser(Async)");
        }

        return activityListReceivedEventsForUserCall(username, perPage, page, _callback);

    }

    /**
     * List events received by the authenticated user
     * These are events that you&#39;ve received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-received-by-the-authenticated-user">List events received by the authenticated user Documentation</a>
     */
    public List<Event> activityListReceivedEventsForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListReceivedEventsForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List events received by the authenticated user
     * These are events that you&#39;ve received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-received-by-the-authenticated-user">List events received by the authenticated user Documentation</a>
     */
    public ApiResponse<List<Event>> activityListReceivedEventsForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListReceivedEventsForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List events received by the authenticated user (asynchronously)
     * These are events that you&#39;ve received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you&#39;ll only see public events.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-events-received-by-the-authenticated-user">List events received by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListReceivedEventsForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListReceivedEventsForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListReceivedPublicEventsForUser
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-received-by-a-user">List public events received by a user Documentation</a>
     */
    public okhttp3.Call activityListReceivedPublicEventsForUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/received_events/public"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListReceivedPublicEventsForUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListReceivedPublicEventsForUser(Async)");
        }

        return activityListReceivedPublicEventsForUserCall(username, perPage, page, _callback);

    }

    /**
     * List public events received by a user
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-received-by-a-user">List public events received by a user Documentation</a>
     */
    public List<Event> activityListReceivedPublicEventsForUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListReceivedPublicEventsForUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List public events received by a user
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-received-by-a-user">List public events received by a user Documentation</a>
     */
    public ApiResponse<List<Event>> activityListReceivedPublicEventsForUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListReceivedPublicEventsForUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List public events received by a user (asynchronously)
     * 
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-public-events-received-by-a-user">List public events received by a user Documentation</a>
     */
    public okhttp3.Call activityListReceivedPublicEventsForUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListReceivedPublicEventsForUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListRepoEvents
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-events">List repository events Documentation</a>
     */
    public okhttp3.Call activityListRepoEventsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/events"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListRepoEventsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityListRepoEvents(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityListRepoEvents(Async)");
        }

        return activityListRepoEventsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository events
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-events">List repository events Documentation</a>
     */
    public List<Event> activityListRepoEvents(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Event>> localVarResp = activityListRepoEventsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository events
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-events">List repository events Documentation</a>
     */
    public ApiResponse<List<Event>> activityListRepoEventsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListRepoEventsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository events (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-events">List repository events Documentation</a>
     */
    public okhttp3.Call activityListRepoEventsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListRepoEventsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListRepoNotificationsForAuthenticatedUser
     * @param owner  (required)
     * @param repo  (required)
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user">List repository notifications for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListRepoNotificationsForAuthenticatedUserCall(String owner, String repo, Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/notifications"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (participating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participating", participating));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListRepoNotificationsForAuthenticatedUserValidateBeforeCall(String owner, String repo, Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityListRepoNotificationsForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityListRepoNotificationsForAuthenticatedUser(Async)");
        }

        return activityListRepoNotificationsForAuthenticatedUserCall(owner, repo, all, participating, since, before, perPage, page, _callback);

    }

    /**
     * List repository notifications for the authenticated user
     * List all notifications for the current user.
     * @param owner  (required)
     * @param repo  (required)
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Thread&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user">List repository notifications for the authenticated user Documentation</a>
     */
    public List<Thread> activityListRepoNotificationsForAuthenticatedUser(String owner, String repo, Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Thread>> localVarResp = activityListRepoNotificationsForAuthenticatedUserWithHttpInfo(owner, repo, all, participating, since, before, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository notifications for the authenticated user
     * List all notifications for the current user.
     * @param owner  (required)
     * @param repo  (required)
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Thread&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user">List repository notifications for the authenticated user Documentation</a>
     */
    public ApiResponse<List<Thread>> activityListRepoNotificationsForAuthenticatedUserWithHttpInfo(String owner, String repo, Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListRepoNotificationsForAuthenticatedUserValidateBeforeCall(owner, repo, all, participating, since, before, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Thread>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository notifications for the authenticated user (asynchronously)
     * List all notifications for the current user.
     * @param owner  (required)
     * @param repo  (required)
     * @param all If &#x60;true&#x60;, show notifications marked as read. (optional, default to false)
     * @param participating If &#x60;true&#x60;, only shows notifications in which the user is directly participating or mentioned. (optional, default to false)
     * @param since Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param before Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user">List repository notifications for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListRepoNotificationsForAuthenticatedUserAsync(String owner, String repo, Boolean all, Boolean participating, OffsetDateTime since, OffsetDateTime before, Integer perPage, Integer page, final ApiCallback<List<Thread>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListRepoNotificationsForAuthenticatedUserValidateBeforeCall(owner, repo, all, participating, since, before, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Thread>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListReposStarredByAuthenticatedUser
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-the-authenticated-user">List repositories starred by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListReposStarredByAuthenticatedUserCall(String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.github.v3.star+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListReposStarredByAuthenticatedUserValidateBeforeCall(String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return activityListReposStarredByAuthenticatedUserCall(sort, direction, perPage, page, _callback);

    }

    /**
     * List repositories starred by the authenticated user
     * Lists repositories the authenticated user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-the-authenticated-user">List repositories starred by the authenticated user Documentation</a>
     */
    public List<Repository> activityListReposStarredByAuthenticatedUser(String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<Repository>> localVarResp = activityListReposStarredByAuthenticatedUserWithHttpInfo(sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories starred by the authenticated user
     * Lists repositories the authenticated user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-the-authenticated-user">List repositories starred by the authenticated user Documentation</a>
     */
    public ApiResponse<List<Repository>> activityListReposStarredByAuthenticatedUserWithHttpInfo(String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListReposStarredByAuthenticatedUserValidateBeforeCall(sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories starred by the authenticated user (asynchronously)
     * Lists repositories the authenticated user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-the-authenticated-user">List repositories starred by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListReposStarredByAuthenticatedUserAsync(String sort, String direction, Integer perPage, Integer page, final ApiCallback<List<Repository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListReposStarredByAuthenticatedUserValidateBeforeCall(sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListReposStarredByUser
     * @param username  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-a-user">List repositories starred by a user Documentation</a>
     */
    public okhttp3.Call activityListReposStarredByUserCall(String username, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/starred"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListReposStarredByUserValidateBeforeCall(String username, String sort, String direction, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListReposStarredByUser(Async)");
        }

        return activityListReposStarredByUserCall(username, sort, direction, perPage, page, _callback);

    }

    /**
     * List repositories starred by a user
     * Lists repositories a user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param username  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActivityListReposStarredByUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-a-user">List repositories starred by a user Documentation</a>
     */
    public ActivityListReposStarredByUser200Response activityListReposStarredByUser(String username, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActivityListReposStarredByUser200Response> localVarResp = activityListReposStarredByUserWithHttpInfo(username, sort, direction, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories starred by a user
     * Lists repositories a user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param username  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActivityListReposStarredByUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-a-user">List repositories starred by a user Documentation</a>
     */
    public ApiResponse<ActivityListReposStarredByUser200Response> activityListReposStarredByUserWithHttpInfo(String username, String sort, String direction, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListReposStarredByUserValidateBeforeCall(username, sort, direction, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActivityListReposStarredByUser200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories starred by a user (asynchronously)
     * Lists repositories a user has starred.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param username  (required)
     * @param sort One of &#x60;created&#x60; (when the repository was starred) or &#x60;updated&#x60; (when it was last pushed to). (optional, default to created)
     * @param direction One of &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending). (optional, default to desc)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-starred-by-a-user">List repositories starred by a user Documentation</a>
     */
    public okhttp3.Call activityListReposStarredByUserAsync(String username, String sort, String direction, Integer perPage, Integer page, final ApiCallback<ActivityListReposStarredByUser200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListReposStarredByUserValidateBeforeCall(username, sort, direction, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActivityListReposStarredByUser200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListReposWatchedByUser
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-a-user">List repositories watched by a user Documentation</a>
     */
    public okhttp3.Call activityListReposWatchedByUserCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/subscriptions"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListReposWatchedByUserValidateBeforeCall(String username, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling activityListReposWatchedByUser(Async)");
        }

        return activityListReposWatchedByUserCall(username, perPage, page, _callback);

    }

    /**
     * List repositories watched by a user
     * Lists repositories a user is watching.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-a-user">List repositories watched by a user Documentation</a>
     */
    public List<MinimalRepository> activityListReposWatchedByUser(String username, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = activityListReposWatchedByUserWithHttpInfo(username, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories watched by a user
     * Lists repositories a user is watching.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-a-user">List repositories watched by a user Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> activityListReposWatchedByUserWithHttpInfo(String username, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListReposWatchedByUserValidateBeforeCall(username, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories watched by a user (asynchronously)
     * Lists repositories a user is watching.
     * @param username  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-a-user">List repositories watched by a user Documentation</a>
     */
    public okhttp3.Call activityListReposWatchedByUserAsync(String username, Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListReposWatchedByUserValidateBeforeCall(username, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListStargazersForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-stargazers">List stargazers Documentation</a>
     */
    public okhttp3.Call activityListStargazersForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/stargazers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListStargazersForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityListStargazersForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityListStargazersForRepo(Async)");
        }

        return activityListStargazersForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List stargazers
     * Lists the people that have starred the repository.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActivityListStargazersForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-stargazers">List stargazers Documentation</a>
     */
    public ActivityListStargazersForRepo200Response activityListStargazersForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActivityListStargazersForRepo200Response> localVarResp = activityListStargazersForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List stargazers
     * Lists the people that have starred the repository.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActivityListStargazersForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-stargazers">List stargazers Documentation</a>
     */
    public ApiResponse<ActivityListStargazersForRepo200Response> activityListStargazersForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListStargazersForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActivityListStargazersForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List stargazers (asynchronously)
     * Lists the people that have starred the repository.  You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@2.18/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 422 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-stargazers">List stargazers Documentation</a>
     */
    public okhttp3.Call activityListStargazersForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActivityListStargazersForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListStargazersForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActivityListStargazersForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListWatchedReposForAuthenticatedUser
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-the-authenticated-user">List repositories watched by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListWatchedReposForAuthenticatedUserCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListWatchedReposForAuthenticatedUserValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return activityListWatchedReposForAuthenticatedUserCall(perPage, page, _callback);

    }

    /**
     * List repositories watched by the authenticated user
     * Lists repositories the authenticated user is watching.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;MinimalRepository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-the-authenticated-user">List repositories watched by the authenticated user Documentation</a>
     */
    public List<MinimalRepository> activityListWatchedReposForAuthenticatedUser(Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<MinimalRepository>> localVarResp = activityListWatchedReposForAuthenticatedUserWithHttpInfo(perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repositories watched by the authenticated user
     * Lists repositories the authenticated user is watching.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;MinimalRepository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-the-authenticated-user">List repositories watched by the authenticated user Documentation</a>
     */
    public ApiResponse<List<MinimalRepository>> activityListWatchedReposForAuthenticatedUserWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListWatchedReposForAuthenticatedUserValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repositories watched by the authenticated user (asynchronously)
     * Lists repositories the authenticated user is watching.
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repositories-watched-by-the-authenticated-user">List repositories watched by the authenticated user Documentation</a>
     */
    public okhttp3.Call activityListWatchedReposForAuthenticatedUserAsync(Integer perPage, Integer page, final ApiCallback<List<MinimalRepository>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListWatchedReposForAuthenticatedUserValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<MinimalRepository>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityListWatchersForRepo
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-watchers">List watchers Documentation</a>
     */
    public okhttp3.Call activityListWatchersForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscribers"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityListWatchersForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityListWatchersForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityListWatchersForRepo(Async)");
        }

        return activityListWatchersForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List watchers
     * Lists the people watching the specified repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return List&lt;SimpleUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-watchers">List watchers Documentation</a>
     */
    public List<SimpleUser> activityListWatchersForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<List<SimpleUser>> localVarResp = activityListWatchersForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List watchers
     * Lists the people watching the specified repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;List&lt;SimpleUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-watchers">List watchers Documentation</a>
     */
    public ApiResponse<List<SimpleUser>> activityListWatchersForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = activityListWatchersForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List watchers (asynchronously)
     * Lists the people watching the specified repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param perPage Results per page (max 100) (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-watchers">List watchers Documentation</a>
     */
    public okhttp3.Call activityListWatchersForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<List<SimpleUser>> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityListWatchersForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<List<SimpleUser>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityMarkNotificationsAsRead
     * @param activityMarkNotificationsAsReadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-notifications-as-read">Mark notifications as read Documentation</a>
     */
    public okhttp3.Call activityMarkNotificationsAsReadCall(ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityMarkNotificationsAsReadRequest;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityMarkNotificationsAsReadValidateBeforeCall(ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        return activityMarkNotificationsAsReadCall(activityMarkNotificationsAsReadRequest, _callback);

    }

    /**
     * Mark notifications as read
     * Marks all notifications as \&quot;read\&quot; removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param activityMarkNotificationsAsReadRequest  (optional)
     * @return ActivityMarkNotificationsAsRead202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-notifications-as-read">Mark notifications as read Documentation</a>
     */
    public ActivityMarkNotificationsAsRead202Response activityMarkNotificationsAsRead(ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest) throws ApiException {
        ApiResponse<ActivityMarkNotificationsAsRead202Response> localVarResp = activityMarkNotificationsAsReadWithHttpInfo(activityMarkNotificationsAsReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark notifications as read
     * Marks all notifications as \&quot;read\&quot; removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param activityMarkNotificationsAsReadRequest  (optional)
     * @return ApiResponse&lt;ActivityMarkNotificationsAsRead202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-notifications-as-read">Mark notifications as read Documentation</a>
     */
    public ApiResponse<ActivityMarkNotificationsAsRead202Response> activityMarkNotificationsAsReadWithHttpInfo(ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest) throws ApiException {
        okhttp3.Call localVarCall = activityMarkNotificationsAsReadValidateBeforeCall(activityMarkNotificationsAsReadRequest, null);
        Type localVarReturnType = new TypeToken<ActivityMarkNotificationsAsRead202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark notifications as read (asynchronously)
     * Marks all notifications as \&quot;read\&quot; removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param activityMarkNotificationsAsReadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-notifications-as-read">Mark notifications as read Documentation</a>
     */
    public okhttp3.Call activityMarkNotificationsAsReadAsync(ActivityMarkNotificationsAsReadRequest activityMarkNotificationsAsReadRequest, final ApiCallback<ActivityMarkNotificationsAsRead202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityMarkNotificationsAsReadValidateBeforeCall(activityMarkNotificationsAsReadRequest, _callback);
        Type localVarReturnType = new TypeToken<ActivityMarkNotificationsAsRead202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityMarkRepoNotificationsAsRead
     * @param owner  (required)
     * @param repo  (required)
     * @param activityMarkRepoNotificationsAsReadRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-repository-notifications-as-read">Mark repository notifications as read Documentation</a>
     */
    public okhttp3.Call activityMarkRepoNotificationsAsReadCall(String owner, String repo, ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityMarkRepoNotificationsAsReadRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/notifications"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityMarkRepoNotificationsAsReadValidateBeforeCall(String owner, String repo, ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityMarkRepoNotificationsAsRead(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityMarkRepoNotificationsAsRead(Async)");
        }

        return activityMarkRepoNotificationsAsReadCall(owner, repo, activityMarkRepoNotificationsAsReadRequest, _callback);

    }

    /**
     * Mark repository notifications as read
     * Marks all notifications in a repository as \&quot;read\&quot; removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param activityMarkRepoNotificationsAsReadRequest  (optional)
     * @return EnterpriseAdminUpdateOrgName202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-repository-notifications-as-read">Mark repository notifications as read Documentation</a>
     */
    public EnterpriseAdminUpdateOrgName202Response activityMarkRepoNotificationsAsRead(String owner, String repo, ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest) throws ApiException {
        ApiResponse<EnterpriseAdminUpdateOrgName202Response> localVarResp = activityMarkRepoNotificationsAsReadWithHttpInfo(owner, repo, activityMarkRepoNotificationsAsReadRequest);
        return localVarResp.getData();
    }

    /**
     * Mark repository notifications as read
     * Marks all notifications in a repository as \&quot;read\&quot; removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param activityMarkRepoNotificationsAsReadRequest  (optional)
     * @return ApiResponse&lt;EnterpriseAdminUpdateOrgName202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-repository-notifications-as-read">Mark repository notifications as read Documentation</a>
     */
    public ApiResponse<EnterpriseAdminUpdateOrgName202Response> activityMarkRepoNotificationsAsReadWithHttpInfo(String owner, String repo, ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest) throws ApiException {
        okhttp3.Call localVarCall = activityMarkRepoNotificationsAsReadValidateBeforeCall(owner, repo, activityMarkRepoNotificationsAsReadRequest, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark repository notifications as read (asynchronously)
     * Marks all notifications in a repository as \&quot;read\&quot; removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a &#x60;202 Accepted&#x60; status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \&quot;read.\&quot; To check whether any \&quot;unread\&quot; notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter &#x60;all&#x3D;false&#x60;.
     * @param owner  (required)
     * @param repo  (required)
     * @param activityMarkRepoNotificationsAsReadRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-repository-notifications-as-read">Mark repository notifications as read Documentation</a>
     */
    public okhttp3.Call activityMarkRepoNotificationsAsReadAsync(String owner, String repo, ActivityMarkRepoNotificationsAsReadRequest activityMarkRepoNotificationsAsReadRequest, final ApiCallback<EnterpriseAdminUpdateOrgName202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityMarkRepoNotificationsAsReadValidateBeforeCall(owner, repo, activityMarkRepoNotificationsAsReadRequest, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminUpdateOrgName202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityMarkThreadAsRead
     * @param threadId thread_id parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-a-thread-as-read">Mark a thread as read Documentation</a>
     */
    public okhttp3.Call activityMarkThreadAsReadCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/threads/{thread_id}"
            .replace("{" + "thread_id" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityMarkThreadAsReadValidateBeforeCall(Integer threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling activityMarkThreadAsRead(Async)");
        }

        return activityMarkThreadAsReadCall(threadId, _callback);

    }

    /**
     * Mark a thread as read
     * 
     * @param threadId thread_id parameter (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-a-thread-as-read">Mark a thread as read Documentation</a>
     */
    public void activityMarkThreadAsRead(Integer threadId) throws ApiException {
        activityMarkThreadAsReadWithHttpInfo(threadId);
    }

    /**
     * Mark a thread as read
     * 
     * @param threadId thread_id parameter (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-a-thread-as-read">Mark a thread as read Documentation</a>
     */
    public ApiResponse<Void> activityMarkThreadAsReadWithHttpInfo(Integer threadId) throws ApiException {
        okhttp3.Call localVarCall = activityMarkThreadAsReadValidateBeforeCall(threadId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Mark a thread as read (asynchronously)
     * 
     * @param threadId thread_id parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 205 </td><td> Reset Content </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#mark-a-thread-as-read">Mark a thread as read Documentation</a>
     */
    public okhttp3.Call activityMarkThreadAsReadAsync(Integer threadId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityMarkThreadAsReadValidateBeforeCall(threadId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitySetRepoSubscription
     * @param owner  (required)
     * @param repo  (required)
     * @param activitySetRepoSubscriptionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription">Set a repository subscription Documentation</a>
     */
    public okhttp3.Call activitySetRepoSubscriptionCall(String owner, String repo, ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activitySetRepoSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/subscription"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitySetRepoSubscriptionValidateBeforeCall(String owner, String repo, ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activitySetRepoSubscription(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activitySetRepoSubscription(Async)");
        }

        return activitySetRepoSubscriptionCall(owner, repo, activitySetRepoSubscriptionRequest, _callback);

    }

    /**
     * Set a repository subscription
     * If you would like to watch a repository, set &#x60;subscribed&#x60; to &#x60;true&#x60;. If you would like to ignore notifications made within a repository, set &#x60;ignored&#x60; to &#x60;true&#x60;. If you would like to stop watching a repository, [delete the repository&#39;s subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription) completely.
     * @param owner  (required)
     * @param repo  (required)
     * @param activitySetRepoSubscriptionRequest  (optional)
     * @return RepositorySubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription">Set a repository subscription Documentation</a>
     */
    public RepositorySubscription activitySetRepoSubscription(String owner, String repo, ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest) throws ApiException {
        ApiResponse<RepositorySubscription> localVarResp = activitySetRepoSubscriptionWithHttpInfo(owner, repo, activitySetRepoSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Set a repository subscription
     * If you would like to watch a repository, set &#x60;subscribed&#x60; to &#x60;true&#x60;. If you would like to ignore notifications made within a repository, set &#x60;ignored&#x60; to &#x60;true&#x60;. If you would like to stop watching a repository, [delete the repository&#39;s subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription) completely.
     * @param owner  (required)
     * @param repo  (required)
     * @param activitySetRepoSubscriptionRequest  (optional)
     * @return ApiResponse&lt;RepositorySubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription">Set a repository subscription Documentation</a>
     */
    public ApiResponse<RepositorySubscription> activitySetRepoSubscriptionWithHttpInfo(String owner, String repo, ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = activitySetRepoSubscriptionValidateBeforeCall(owner, repo, activitySetRepoSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<RepositorySubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a repository subscription (asynchronously)
     * If you would like to watch a repository, set &#x60;subscribed&#x60; to &#x60;true&#x60;. If you would like to ignore notifications made within a repository, set &#x60;ignored&#x60; to &#x60;true&#x60;. If you would like to stop watching a repository, [delete the repository&#39;s subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-repository-subscription) completely.
     * @param owner  (required)
     * @param repo  (required)
     * @param activitySetRepoSubscriptionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-repository-subscription">Set a repository subscription Documentation</a>
     */
    public okhttp3.Call activitySetRepoSubscriptionAsync(String owner, String repo, ActivitySetRepoSubscriptionRequest activitySetRepoSubscriptionRequest, final ApiCallback<RepositorySubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitySetRepoSubscriptionValidateBeforeCall(owner, repo, activitySetRepoSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<RepositorySubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activitySetThreadSubscription
     * @param threadId thread_id parameter (required)
     * @param activitySetThreadSubscriptionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription">Set a thread subscription Documentation</a>
     */
    public okhttp3.Call activitySetThreadSubscriptionCall(Integer threadId, ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activitySetThreadSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/notifications/threads/{thread_id}/subscription"
            .replace("{" + "thread_id" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activitySetThreadSubscriptionValidateBeforeCall(Integer threadId, ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling activitySetThreadSubscription(Async)");
        }

        return activitySetThreadSubscriptionCall(threadId, activitySetThreadSubscriptionRequest, _callback);

    }

    /**
     * Set a thread subscription
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.  You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.  Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription) endpoint.
     * @param threadId thread_id parameter (required)
     * @param activitySetThreadSubscriptionRequest  (optional)
     * @return ThreadSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription">Set a thread subscription Documentation</a>
     */
    public ThreadSubscription activitySetThreadSubscription(Integer threadId, ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest) throws ApiException {
        ApiResponse<ThreadSubscription> localVarResp = activitySetThreadSubscriptionWithHttpInfo(threadId, activitySetThreadSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Set a thread subscription
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.  You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.  Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription) endpoint.
     * @param threadId thread_id parameter (required)
     * @param activitySetThreadSubscriptionRequest  (optional)
     * @return ApiResponse&lt;ThreadSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription">Set a thread subscription Documentation</a>
     */
    public ApiResponse<ThreadSubscription> activitySetThreadSubscriptionWithHttpInfo(Integer threadId, ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = activitySetThreadSubscriptionValidateBeforeCall(threadId, activitySetThreadSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<ThreadSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a thread subscription (asynchronously)
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.  You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.  Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@2.18/rest/reference/activity#delete-a-thread-subscription) endpoint.
     * @param threadId thread_id parameter (required)
     * @param activitySetThreadSubscriptionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#set-a-thread-subscription">Set a thread subscription Documentation</a>
     */
    public okhttp3.Call activitySetThreadSubscriptionAsync(Integer threadId, ActivitySetThreadSubscriptionRequest activitySetThreadSubscriptionRequest, final ApiCallback<ThreadSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = activitySetThreadSubscriptionValidateBeforeCall(threadId, activitySetThreadSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<ThreadSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityStarRepoForAuthenticatedUser
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#star-a-repository-for-the-authenticated-user">Star a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityStarRepoForAuthenticatedUserCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityStarRepoForAuthenticatedUserValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityStarRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityStarRepoForAuthenticatedUser(Async)");
        }

        return activityStarRepoForAuthenticatedUserCall(owner, repo, _callback);

    }

    /**
     * Star a repository for the authenticated user
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#star-a-repository-for-the-authenticated-user">Star a repository for the authenticated user Documentation</a>
     */
    public void activityStarRepoForAuthenticatedUser(String owner, String repo) throws ApiException {
        activityStarRepoForAuthenticatedUserWithHttpInfo(owner, repo);
    }

    /**
     * Star a repository for the authenticated user
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#star-a-repository-for-the-authenticated-user">Star a repository for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> activityStarRepoForAuthenticatedUserWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = activityStarRepoForAuthenticatedUserValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Star a repository for the authenticated user (asynchronously)
     * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\&quot;
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#star-a-repository-for-the-authenticated-user">Star a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityStarRepoForAuthenticatedUserAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityStarRepoForAuthenticatedUserValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for activityUnstarRepoForAuthenticatedUser
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#unstar-a-repository-for-the-authenticated-user">Unstar a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityUnstarRepoForAuthenticatedUserCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/starred/{owner}/{repo}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activityUnstarRepoForAuthenticatedUserValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling activityUnstarRepoForAuthenticatedUser(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling activityUnstarRepoForAuthenticatedUser(Async)");
        }

        return activityUnstarRepoForAuthenticatedUserCall(owner, repo, _callback);

    }

    /**
     * Unstar a repository for the authenticated user
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#unstar-a-repository-for-the-authenticated-user">Unstar a repository for the authenticated user Documentation</a>
     */
    public void activityUnstarRepoForAuthenticatedUser(String owner, String repo) throws ApiException {
        activityUnstarRepoForAuthenticatedUserWithHttpInfo(owner, repo);
    }

    /**
     * Unstar a repository for the authenticated user
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#unstar-a-repository-for-the-authenticated-user">Unstar a repository for the authenticated user Documentation</a>
     */
    public ApiResponse<Void> activityUnstarRepoForAuthenticatedUserWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = activityUnstarRepoForAuthenticatedUserValidateBeforeCall(owner, repo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unstar a repository for the authenticated user (asynchronously)
     * 
     * @param owner  (required)
     * @param repo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Not modified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requires authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@2.18/rest/reference/activity#unstar-a-repository-for-the-authenticated-user">Unstar a repository for the authenticated user Documentation</a>
     */
    public okhttp3.Call activityUnstarRepoForAuthenticatedUserAsync(String owner, String repo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activityUnstarRepoForAuthenticatedUserValidateBeforeCall(owner, repo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
