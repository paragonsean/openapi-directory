/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseSettingsEnterpriseLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:06.767787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseSettingsEnterpriseLicense {
  public static final String SERIALIZED_NAME_CLUSTER_SUPPORT = "cluster_support";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SUPPORT)
  private Boolean clusterSupport;

  public static final String SERIALIZED_NAME_EVALUATION = "evaluation";
  @SerializedName(SERIALIZED_NAME_EVALUATION)
  private Boolean evaluation;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expire_at";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private String expireAt;

  public static final String SERIALIZED_NAME_PERPETUAL = "perpetual";
  @SerializedName(SERIALIZED_NAME_PERPETUAL)
  private Boolean perpetual;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private Integer seats;

  public static final String SERIALIZED_NAME_SSH_ALLOWED = "ssh_allowed";
  @SerializedName(SERIALIZED_NAME_SSH_ALLOWED)
  private Boolean sshAllowed;

  public static final String SERIALIZED_NAME_SUPPORT_KEY = "support_key";
  @SerializedName(SERIALIZED_NAME_SUPPORT_KEY)
  private String supportKey;

  public static final String SERIALIZED_NAME_UNLIMITED_SEATING = "unlimited_seating";
  @SerializedName(SERIALIZED_NAME_UNLIMITED_SEATING)
  private Boolean unlimitedSeating;

  public EnterpriseSettingsEnterpriseLicense() {
  }

  public EnterpriseSettingsEnterpriseLicense clusterSupport(Boolean clusterSupport) {
    this.clusterSupport = clusterSupport;
    return this;
  }

  /**
   * Get clusterSupport
   * @return clusterSupport
   */
  @javax.annotation.Nullable
  public Boolean getClusterSupport() {
    return clusterSupport;
  }

  public void setClusterSupport(Boolean clusterSupport) {
    this.clusterSupport = clusterSupport;
  }


  public EnterpriseSettingsEnterpriseLicense evaluation(Boolean evaluation) {
    this.evaluation = evaluation;
    return this;
  }

  /**
   * Get evaluation
   * @return evaluation
   */
  @javax.annotation.Nullable
  public Boolean getEvaluation() {
    return evaluation;
  }

  public void setEvaluation(Boolean evaluation) {
    this.evaluation = evaluation;
  }


  public EnterpriseSettingsEnterpriseLicense expireAt(String expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Get expireAt
   * @return expireAt
   */
  @javax.annotation.Nullable
  public String getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(String expireAt) {
    this.expireAt = expireAt;
  }


  public EnterpriseSettingsEnterpriseLicense perpetual(Boolean perpetual) {
    this.perpetual = perpetual;
    return this;
  }

  /**
   * Get perpetual
   * @return perpetual
   */
  @javax.annotation.Nullable
  public Boolean getPerpetual() {
    return perpetual;
  }

  public void setPerpetual(Boolean perpetual) {
    this.perpetual = perpetual;
  }


  public EnterpriseSettingsEnterpriseLicense seats(Integer seats) {
    this.seats = seats;
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public Integer getSeats() {
    return seats;
  }

  public void setSeats(Integer seats) {
    this.seats = seats;
  }


  public EnterpriseSettingsEnterpriseLicense sshAllowed(Boolean sshAllowed) {
    this.sshAllowed = sshAllowed;
    return this;
  }

  /**
   * Get sshAllowed
   * @return sshAllowed
   */
  @javax.annotation.Nullable
  public Boolean getSshAllowed() {
    return sshAllowed;
  }

  public void setSshAllowed(Boolean sshAllowed) {
    this.sshAllowed = sshAllowed;
  }


  public EnterpriseSettingsEnterpriseLicense supportKey(String supportKey) {
    this.supportKey = supportKey;
    return this;
  }

  /**
   * Get supportKey
   * @return supportKey
   */
  @javax.annotation.Nullable
  public String getSupportKey() {
    return supportKey;
  }

  public void setSupportKey(String supportKey) {
    this.supportKey = supportKey;
  }


  public EnterpriseSettingsEnterpriseLicense unlimitedSeating(Boolean unlimitedSeating) {
    this.unlimitedSeating = unlimitedSeating;
    return this;
  }

  /**
   * Get unlimitedSeating
   * @return unlimitedSeating
   */
  @javax.annotation.Nullable
  public Boolean getUnlimitedSeating() {
    return unlimitedSeating;
  }

  public void setUnlimitedSeating(Boolean unlimitedSeating) {
    this.unlimitedSeating = unlimitedSeating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseSettingsEnterpriseLicense enterpriseSettingsEnterpriseLicense = (EnterpriseSettingsEnterpriseLicense) o;
    return Objects.equals(this.clusterSupport, enterpriseSettingsEnterpriseLicense.clusterSupport) &&
        Objects.equals(this.evaluation, enterpriseSettingsEnterpriseLicense.evaluation) &&
        Objects.equals(this.expireAt, enterpriseSettingsEnterpriseLicense.expireAt) &&
        Objects.equals(this.perpetual, enterpriseSettingsEnterpriseLicense.perpetual) &&
        Objects.equals(this.seats, enterpriseSettingsEnterpriseLicense.seats) &&
        Objects.equals(this.sshAllowed, enterpriseSettingsEnterpriseLicense.sshAllowed) &&
        Objects.equals(this.supportKey, enterpriseSettingsEnterpriseLicense.supportKey) &&
        Objects.equals(this.unlimitedSeating, enterpriseSettingsEnterpriseLicense.unlimitedSeating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterSupport, evaluation, expireAt, perpetual, seats, sshAllowed, supportKey, unlimitedSeating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseSettingsEnterpriseLicense {\n");
    sb.append("    clusterSupport: ").append(toIndentedString(clusterSupport)).append("\n");
    sb.append("    evaluation: ").append(toIndentedString(evaluation)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    perpetual: ").append(toIndentedString(perpetual)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    sshAllowed: ").append(toIndentedString(sshAllowed)).append("\n");
    sb.append("    supportKey: ").append(toIndentedString(supportKey)).append("\n");
    sb.append("    unlimitedSeating: ").append(toIndentedString(unlimitedSeating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster_support");
    openapiFields.add("evaluation");
    openapiFields.add("expire_at");
    openapiFields.add("perpetual");
    openapiFields.add("seats");
    openapiFields.add("ssh_allowed");
    openapiFields.add("support_key");
    openapiFields.add("unlimited_seating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseSettingsEnterpriseLicense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseSettingsEnterpriseLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseSettingsEnterpriseLicense is not found in the empty JSON string", EnterpriseSettingsEnterpriseLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseSettingsEnterpriseLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseSettingsEnterpriseLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expire_at") != null && !jsonObj.get("expire_at").isJsonNull()) && !jsonObj.get("expire_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expire_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expire_at").toString()));
      }
      if ((jsonObj.get("support_key") != null && !jsonObj.get("support_key").isJsonNull()) && !jsonObj.get("support_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `support_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("support_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseSettingsEnterpriseLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseSettingsEnterpriseLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseSettingsEnterpriseLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseSettingsEnterpriseLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseSettingsEnterpriseLicense>() {
           @Override
           public void write(JsonWriter out, EnterpriseSettingsEnterpriseLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseSettingsEnterpriseLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseSettingsEnterpriseLicense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseSettingsEnterpriseLicense
   * @throws IOException if the JSON string is invalid with respect to EnterpriseSettingsEnterpriseLicense
   */
  public static EnterpriseSettingsEnterpriseLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseSettingsEnterpriseLicense.class);
  }

  /**
   * Convert an instance of EnterpriseSettingsEnterpriseLicense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

