/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LabeledIssueEventLabel;
import org.openapitools.client.model.NullableIntegration;
import org.openapitools.client.model.SimpleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Labeled Issue Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:06.767787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabeledIssueEvent {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private SimpleUser actor;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commit_id";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_COMMIT_URL = "commit_url";
  @SerializedName(SERIALIZED_NAME_COMMIT_URL)
  private String commitUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private LabeledIssueEventLabel label;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP = "performed_via_github_app";
  @SerializedName(SERIALIZED_NAME_PERFORMED_VIA_GITHUB_APP)
  private NullableIntegration performedViaGithubApp;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public LabeledIssueEvent() {
  }

  public LabeledIssueEvent actor(SimpleUser actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nonnull
  public SimpleUser getActor() {
    return actor;
  }

  public void setActor(SimpleUser actor) {
    this.actor = actor;
  }


  public LabeledIssueEvent commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public LabeledIssueEvent commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

  /**
   * Get commitUrl
   * @return commitUrl
   */
  @javax.annotation.Nullable
  public String getCommitUrl() {
    return commitUrl;
  }

  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public LabeledIssueEvent createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public LabeledIssueEvent event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nonnull
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  public LabeledIssueEvent id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LabeledIssueEvent label(LabeledIssueEventLabel label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nonnull
  public LabeledIssueEventLabel getLabel() {
    return label;
  }

  public void setLabel(LabeledIssueEventLabel label) {
    this.label = label;
  }


  public LabeledIssueEvent nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public LabeledIssueEvent performedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
    return this;
  }

  /**
   * Get performedViaGithubApp
   * @return performedViaGithubApp
   */
  @javax.annotation.Nullable
  public NullableIntegration getPerformedViaGithubApp() {
    return performedViaGithubApp;
  }

  public void setPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
    this.performedViaGithubApp = performedViaGithubApp;
  }


  public LabeledIssueEvent url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabeledIssueEvent labeledIssueEvent = (LabeledIssueEvent) o;
    return Objects.equals(this.actor, labeledIssueEvent.actor) &&
        Objects.equals(this.commitId, labeledIssueEvent.commitId) &&
        Objects.equals(this.commitUrl, labeledIssueEvent.commitUrl) &&
        Objects.equals(this.createdAt, labeledIssueEvent.createdAt) &&
        Objects.equals(this.event, labeledIssueEvent.event) &&
        Objects.equals(this.id, labeledIssueEvent.id) &&
        Objects.equals(this.label, labeledIssueEvent.label) &&
        Objects.equals(this.nodeId, labeledIssueEvent.nodeId) &&
        Objects.equals(this.performedViaGithubApp, labeledIssueEvent.performedViaGithubApp) &&
        Objects.equals(this.url, labeledIssueEvent.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, commitId, commitUrl, createdAt, event, id, label, nodeId, performedViaGithubApp, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabeledIssueEvent {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    performedViaGithubApp: ").append(toIndentedString(performedViaGithubApp)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("commit_id");
    openapiFields.add("commit_url");
    openapiFields.add("created_at");
    openapiFields.add("event");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("node_id");
    openapiFields.add("performed_via_github_app");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actor");
    openapiRequiredFields.add("commit_id");
    openapiRequiredFields.add("commit_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("performed_via_github_app");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabeledIssueEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabeledIssueEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabeledIssueEvent is not found in the empty JSON string", LabeledIssueEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabeledIssueEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabeledIssueEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LabeledIssueEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `actor`
      SimpleUser.validateJsonElement(jsonObj.get("actor"));
      if ((jsonObj.get("commit_id") != null && !jsonObj.get("commit_id").isJsonNull()) && !jsonObj.get("commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_id").toString()));
      }
      if ((jsonObj.get("commit_url") != null && !jsonObj.get("commit_url").isJsonNull()) && !jsonObj.get("commit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_url").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the required field `label`
      LabeledIssueEventLabel.validateJsonElement(jsonObj.get("label"));
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the required field `performed_via_github_app`
      NullableIntegration.validateJsonElement(jsonObj.get("performed_via_github_app"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabeledIssueEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabeledIssueEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabeledIssueEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabeledIssueEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<LabeledIssueEvent>() {
           @Override
           public void write(JsonWriter out, LabeledIssueEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabeledIssueEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabeledIssueEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabeledIssueEvent
   * @throws IOException if the JSON string is invalid with respect to LabeledIssueEvent
   */
  public static LabeledIssueEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabeledIssueEvent.class);
  }

  /**
   * Convert an instance of LabeledIssueEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

