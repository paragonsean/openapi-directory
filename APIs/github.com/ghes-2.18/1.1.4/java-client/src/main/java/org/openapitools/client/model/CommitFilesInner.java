/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommitFilesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:06.767787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitFilesInner {
  public static final String SERIALIZED_NAME_ADDITIONS = "additions";
  @SerializedName(SERIALIZED_NAME_ADDITIONS)
  private Integer additions;

  public static final String SERIALIZED_NAME_BLOB_URL = "blob_url";
  @SerializedName(SERIALIZED_NAME_BLOB_URL)
  private String blobUrl;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private Integer changes;

  public static final String SERIALIZED_NAME_CONTENTS_URL = "contents_url";
  @SerializedName(SERIALIZED_NAME_CONTENTS_URL)
  private String contentsUrl;

  public static final String SERIALIZED_NAME_DELETIONS = "deletions";
  @SerializedName(SERIALIZED_NAME_DELETIONS)
  private Integer deletions;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  private String patch;

  public static final String SERIALIZED_NAME_PREVIOUS_FILENAME = "previous_filename";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_FILENAME)
  private String previousFilename;

  public static final String SERIALIZED_NAME_RAW_URL = "raw_url";
  @SerializedName(SERIALIZED_NAME_RAW_URL)
  private String rawUrl;

  public static final String SERIALIZED_NAME_SHA = "sha";
  @SerializedName(SERIALIZED_NAME_SHA)
  private String sha;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public CommitFilesInner() {
  }

  public CommitFilesInner additions(Integer additions) {
    this.additions = additions;
    return this;
  }

  /**
   * Get additions
   * @return additions
   */
  @javax.annotation.Nullable
  public Integer getAdditions() {
    return additions;
  }

  public void setAdditions(Integer additions) {
    this.additions = additions;
  }


  public CommitFilesInner blobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
    return this;
  }

  /**
   * Get blobUrl
   * @return blobUrl
   */
  @javax.annotation.Nullable
  public String getBlobUrl() {
    return blobUrl;
  }

  public void setBlobUrl(String blobUrl) {
    this.blobUrl = blobUrl;
  }


  public CommitFilesInner changes(Integer changes) {
    this.changes = changes;
    return this;
  }

  /**
   * Get changes
   * @return changes
   */
  @javax.annotation.Nullable
  public Integer getChanges() {
    return changes;
  }

  public void setChanges(Integer changes) {
    this.changes = changes;
  }


  public CommitFilesInner contentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
    return this;
  }

  /**
   * Get contentsUrl
   * @return contentsUrl
   */
  @javax.annotation.Nullable
  public String getContentsUrl() {
    return contentsUrl;
  }

  public void setContentsUrl(String contentsUrl) {
    this.contentsUrl = contentsUrl;
  }


  public CommitFilesInner deletions(Integer deletions) {
    this.deletions = deletions;
    return this;
  }

  /**
   * Get deletions
   * @return deletions
   */
  @javax.annotation.Nullable
  public Integer getDeletions() {
    return deletions;
  }

  public void setDeletions(Integer deletions) {
    this.deletions = deletions;
  }


  public CommitFilesInner filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public CommitFilesInner patch(String patch) {
    this.patch = patch;
    return this;
  }

  /**
   * Get patch
   * @return patch
   */
  @javax.annotation.Nullable
  public String getPatch() {
    return patch;
  }

  public void setPatch(String patch) {
    this.patch = patch;
  }


  public CommitFilesInner previousFilename(String previousFilename) {
    this.previousFilename = previousFilename;
    return this;
  }

  /**
   * Get previousFilename
   * @return previousFilename
   */
  @javax.annotation.Nullable
  public String getPreviousFilename() {
    return previousFilename;
  }

  public void setPreviousFilename(String previousFilename) {
    this.previousFilename = previousFilename;
  }


  public CommitFilesInner rawUrl(String rawUrl) {
    this.rawUrl = rawUrl;
    return this;
  }

  /**
   * Get rawUrl
   * @return rawUrl
   */
  @javax.annotation.Nullable
  public String getRawUrl() {
    return rawUrl;
  }

  public void setRawUrl(String rawUrl) {
    this.rawUrl = rawUrl;
  }


  public CommitFilesInner sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * Get sha
   * @return sha
   */
  @javax.annotation.Nullable
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }


  public CommitFilesInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitFilesInner commitFilesInner = (CommitFilesInner) o;
    return Objects.equals(this.additions, commitFilesInner.additions) &&
        Objects.equals(this.blobUrl, commitFilesInner.blobUrl) &&
        Objects.equals(this.changes, commitFilesInner.changes) &&
        Objects.equals(this.contentsUrl, commitFilesInner.contentsUrl) &&
        Objects.equals(this.deletions, commitFilesInner.deletions) &&
        Objects.equals(this.filename, commitFilesInner.filename) &&
        Objects.equals(this.patch, commitFilesInner.patch) &&
        Objects.equals(this.previousFilename, commitFilesInner.previousFilename) &&
        Objects.equals(this.rawUrl, commitFilesInner.rawUrl) &&
        Objects.equals(this.sha, commitFilesInner.sha) &&
        Objects.equals(this.status, commitFilesInner.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additions, blobUrl, changes, contentsUrl, deletions, filename, patch, previousFilename, rawUrl, sha, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitFilesInner {\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("    blobUrl: ").append(toIndentedString(blobUrl)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    contentsUrl: ").append(toIndentedString(contentsUrl)).append("\n");
    sb.append("    deletions: ").append(toIndentedString(deletions)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("    previousFilename: ").append(toIndentedString(previousFilename)).append("\n");
    sb.append("    rawUrl: ").append(toIndentedString(rawUrl)).append("\n");
    sb.append("    sha: ").append(toIndentedString(sha)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additions");
    openapiFields.add("blob_url");
    openapiFields.add("changes");
    openapiFields.add("contents_url");
    openapiFields.add("deletions");
    openapiFields.add("filename");
    openapiFields.add("patch");
    openapiFields.add("previous_filename");
    openapiFields.add("raw_url");
    openapiFields.add("sha");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitFilesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitFilesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitFilesInner is not found in the empty JSON string", CommitFilesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitFilesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitFilesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blob_url") != null && !jsonObj.get("blob_url").isJsonNull()) && !jsonObj.get("blob_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob_url").toString()));
      }
      if ((jsonObj.get("contents_url") != null && !jsonObj.get("contents_url").isJsonNull()) && !jsonObj.get("contents_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_url").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("patch") != null && !jsonObj.get("patch").isJsonNull()) && !jsonObj.get("patch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch").toString()));
      }
      if ((jsonObj.get("previous_filename") != null && !jsonObj.get("previous_filename").isJsonNull()) && !jsonObj.get("previous_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_filename").toString()));
      }
      if ((jsonObj.get("raw_url") != null && !jsonObj.get("raw_url").isJsonNull()) && !jsonObj.get("raw_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_url").toString()));
      }
      if ((jsonObj.get("sha") != null && !jsonObj.get("sha").isJsonNull()) && !jsonObj.get("sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitFilesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitFilesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitFilesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitFilesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitFilesInner>() {
           @Override
           public void write(JsonWriter out, CommitFilesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitFilesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitFilesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitFilesInner
   * @throws IOException if the JSON string is invalid with respect to CommitFilesInner
   */
  public static CommitFilesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitFilesInner.class);
  }

  /**
   * Convert an instance of CommitFilesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

