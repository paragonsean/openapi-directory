/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivityListPublicEvents503Response from '../model/ActivityListPublicEvents503Response';
import BasicError from '../model/BasicError';
import Issue from '../model/Issue';
import IssueComment from '../model/IssueComment';
import IssueEvent from '../model/IssueEvent';
import IssueEventForIssue from '../model/IssueEventForIssue';
import IssueSimple from '../model/IssueSimple';
import IssuesAddAssigneesRequest from '../model/IssuesAddAssigneesRequest';
import IssuesCreateLabelRequest from '../model/IssuesCreateLabelRequest';
import IssuesCreateMilestoneRequest from '../model/IssuesCreateMilestoneRequest';
import IssuesCreateRequest from '../model/IssuesCreateRequest';
import IssuesLockRequest from '../model/IssuesLockRequest';
import IssuesRemoveAssigneesRequest from '../model/IssuesRemoveAssigneesRequest';
import IssuesSetLabelsRequest from '../model/IssuesSetLabelsRequest';
import IssuesUpdateCommentRequest from '../model/IssuesUpdateCommentRequest';
import IssuesUpdateMilestoneRequest from '../model/IssuesUpdateMilestoneRequest';
import IssuesUpdateRequest from '../model/IssuesUpdateRequest';
import Label from '../model/Label';
import Milestone from '../model/Milestone';
import SimpleUser from '../model/SimpleUser';
import TimelineIssueEvents from '../model/TimelineIssueEvents';
import ValidationError from '../model/ValidationError';

/**
* Issues service.
* @module api/IssuesApi
* @version 1.1.4
*/
export default class IssuesApi {

    /**
    * Constructs a new IssuesApi. 
    * @alias module:api/IssuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issuesAddAssignees operation.
     * @callback module:api/IssuesApi~issuesAddAssigneesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add assignees to an issue
     * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesAddAssigneesRequest} [issuesAddAssigneesRequest] 
     * @param {module:api/IssuesApi~issuesAddAssigneesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueSimple}
     */
    issuesAddAssignees(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesAddAssigneesRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesAddAssignees");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesAddAssignees");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesAddAssignees");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueSimple;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/assignees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesAddLabels operation.
     * @callback module:api/IssuesApi~issuesAddLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add labels to an issue
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesSetLabelsRequest} [issuesSetLabelsRequest] 
     * @param {module:api/IssuesApi~issuesAddLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesAddLabels(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesSetLabelsRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesAddLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesAddLabels");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesAddLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCheckUserCanBeAssigned operation.
     * @callback module:api/IssuesApi~issuesCheckUserCanBeAssignedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user can be assigned
     * Checks if a user has permission to be assigned to an issue in this repository.  If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.  Otherwise a `404` status code is returned.
     * @param {String} owner 
     * @param {String} repo 
     * @param {String} assignee 
     * @param {module:api/IssuesApi~issuesCheckUserCanBeAssignedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesCheckUserCanBeAssigned(owner, repo, assignee, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesCheckUserCanBeAssigned");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesCheckUserCanBeAssigned");
      }
      // verify the required parameter 'assignee' is set
      if (assignee === undefined || assignee === null) {
        throw new Error("Missing the required parameter 'assignee' when calling issuesCheckUserCanBeAssigned");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'assignee': assignee
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/assignees/{assignee}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCreate operation.
     * @callback module:api/IssuesApi~issuesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.  This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:model/IssuesCreateRequest} issuesCreateRequest 
     * @param {module:api/IssuesApi~issuesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issuesCreate(owner, repo, issuesCreateRequest, callback) {
      let postBody = issuesCreateRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesCreate");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesCreate");
      }
      // verify the required parameter 'issuesCreateRequest' is set
      if (issuesCreateRequest === undefined || issuesCreateRequest === null) {
        throw new Error("Missing the required parameter 'issuesCreateRequest' when calling issuesCreate");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCreateComment operation.
     * @callback module:api/IssuesApi~issuesCreateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue comment
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See \"[Secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#secondary-rate-limits)\" and \"[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@2.18/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)\" for details.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {module:model/IssuesUpdateCommentRequest} issuesUpdateCommentRequest 
     * @param {module:api/IssuesApi~issuesCreateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueComment}
     */
    issuesCreateComment(owner, repo, issueNumber, issuesUpdateCommentRequest, callback) {
      let postBody = issuesUpdateCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesCreateComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesCreateComment");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesCreateComment");
      }
      // verify the required parameter 'issuesUpdateCommentRequest' is set
      if (issuesUpdateCommentRequest === undefined || issuesUpdateCommentRequest === null) {
        throw new Error("Missing the required parameter 'issuesUpdateCommentRequest' when calling issuesCreateComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCreateLabel operation.
     * @callback module:api/IssuesApi~issuesCreateLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a label
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:model/IssuesCreateLabelRequest} issuesCreateLabelRequest 
     * @param {module:api/IssuesApi~issuesCreateLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    issuesCreateLabel(owner, repo, issuesCreateLabelRequest, callback) {
      let postBody = issuesCreateLabelRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesCreateLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesCreateLabel");
      }
      // verify the required parameter 'issuesCreateLabelRequest' is set
      if (issuesCreateLabelRequest === undefined || issuesCreateLabelRequest === null) {
        throw new Error("Missing the required parameter 'issuesCreateLabelRequest' when calling issuesCreateLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesCreateMilestone operation.
     * @callback module:api/IssuesApi~issuesCreateMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a milestone
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {module:model/IssuesCreateMilestoneRequest} issuesCreateMilestoneRequest 
     * @param {module:api/IssuesApi~issuesCreateMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issuesCreateMilestone(owner, repo, issuesCreateMilestoneRequest, callback) {
      let postBody = issuesCreateMilestoneRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesCreateMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesCreateMilestone");
      }
      // verify the required parameter 'issuesCreateMilestoneRequest' is set
      if (issuesCreateMilestoneRequest === undefined || issuesCreateMilestoneRequest === null) {
        throw new Error("Missing the required parameter 'issuesCreateMilestoneRequest' when calling issuesCreateMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDeleteComment operation.
     * @callback module:api/IssuesApi~issuesDeleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue comment
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:api/IssuesApi~issuesDeleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesDeleteComment(owner, repo, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesDeleteComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesDeleteComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling issuesDeleteComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDeleteLabel operation.
     * @callback module:api/IssuesApi~issuesDeleteLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {String} name 
     * @param {module:api/IssuesApi~issuesDeleteLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesDeleteLabel(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesDeleteLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesDeleteLabel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling issuesDeleteLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesDeleteMilestone operation.
     * @callback module:api/IssuesApi~issuesDeleteMilestoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a milestone
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} milestoneNumber milestone_number parameter
     * @param {module:api/IssuesApi~issuesDeleteMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesDeleteMilestone(owner, repo, milestoneNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesDeleteMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesDeleteMilestone");
      }
      // verify the required parameter 'milestoneNumber' is set
      if (milestoneNumber === undefined || milestoneNumber === null) {
        throw new Error("Missing the required parameter 'milestoneNumber' when calling issuesDeleteMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'milestone_number': milestoneNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{milestone_number}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGet operation.
     * @callback module:api/IssuesApi~issuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue
     * The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://docs.github.com/enterprise-server@2.18/webhooks/event-payloads/#issues) webhook.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\" endpoint.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {module:api/IssuesApi~issuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issuesGet(owner, repo, issueNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesGet");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesGet");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesGet");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetComment operation.
     * @callback module:api/IssuesApi~issuesGetCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue comment
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:api/IssuesApi~issuesGetCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueComment}
     */
    issuesGetComment(owner, repo, commentId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesGetComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesGetComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling issuesGetComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetEvent operation.
     * @callback module:api/IssuesApi~issuesGetEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue event
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} eventId 
     * @param {module:api/IssuesApi~issuesGetEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueEvent}
     */
    issuesGetEvent(owner, repo, eventId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesGetEvent");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesGetEvent");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling issuesGetEvent");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueEvent;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/events/{event_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetLabel operation.
     * @callback module:api/IssuesApi~issuesGetLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a label
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {String} name 
     * @param {module:api/IssuesApi~issuesGetLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    issuesGetLabel(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesGetLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesGetLabel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling issuesGetLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesGetMilestone operation.
     * @callback module:api/IssuesApi~issuesGetMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a milestone
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} milestoneNumber milestone_number parameter
     * @param {module:api/IssuesApi~issuesGetMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issuesGetMilestone(owner, repo, milestoneNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesGetMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesGetMilestone");
      }
      // verify the required parameter 'milestoneNumber' is set
      if (milestoneNumber === undefined || milestoneNumber === null) {
        throw new Error("Missing the required parameter 'milestoneNumber' when calling issuesGetMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'milestone_number': milestoneNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{milestone_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesList operation.
     * @callback module:api/IssuesApi~issuesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issues assigned to the authenticated user
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not necessarily assigned to you.   **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\" endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'assigned')] Indicates which sorts of issues to return. Can be one of:   \\* `assigned`: Issues assigned to you   \\* `created`: Issues created by you   \\* `mentioned`: Issues mentioning you   \\* `subscribed`: Issues you're subscribed to updates for   \\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
     * @param {module:model/String} [state = 'open')] Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param {String} [labels] A list of comma separated label names. Example: `bug,ui,@high`
     * @param {module:model/String} [sort = 'created')] What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Boolean} [collab] 
     * @param {Boolean} [orgs] 
     * @param {Boolean} [owned] 
     * @param {Boolean} [pulls] 
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issuesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'state': opts['state'],
        'labels': opts['labels'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'collab': opts['collab'],
        'orgs': opts['orgs'],
        'owned': opts['owned'],
        'pulls': opts['pulls'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListAssignees operation.
     * @callback module:api/IssuesApi~issuesListAssigneesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List assignees
     * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListAssigneesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    issuesListAssignees(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListAssignees");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListAssignees");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/assignees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListComments operation.
     * @callback module:api/IssuesApi~issuesListCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issue comments
     * Issue Comments are ordered by ascending ID.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueComment>}
     */
    issuesListComments(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListComments");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesListComments");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListCommentsForRepo operation.
     * @callback module:api/IssuesApi~issuesListCommentsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueComment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issue comments for a repository
     * By default, Issue Comments are ordered by ascending ID.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'created')] One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
     * @param {module:model/String} [direction] Either `asc` or `desc`. Ignored without the `sort` parameter.
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListCommentsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueComment>}
     */
    issuesListCommentsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListCommentsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListCommentsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueComment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListEvents operation.
     * @callback module:api/IssuesApi~issuesListEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueEventForIssue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issue events
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueEventForIssue>}
     */
    issuesListEvents(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListEvents");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListEvents");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesListEvents");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueEventForIssue];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListEventsForRepo operation.
     * @callback module:api/IssuesApi~issuesListEventsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issue events for a repository
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListEventsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueEvent>}
     */
    issuesListEventsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListEventsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListEventsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueEvent];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListEventsForTimeline operation.
     * @callback module:api/IssuesApi~issuesListEventsForTimelineCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimelineIssueEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List timeline events for an issue
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListEventsForTimelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimelineIssueEvents>}
     */
    issuesListEventsForTimeline(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListEventsForTimeline");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListEventsForTimeline");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesListEventsForTimeline");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimelineIssueEvents];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListForAuthenticatedUser operation.
     * @callback module:api/IssuesApi~issuesListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user account issues assigned to the authenticated user
     * List issues across owned and member repositories assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\" endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'assigned')] Indicates which sorts of issues to return. Can be one of:   \\* `assigned`: Issues assigned to you   \\* `created`: Issues created by you   \\* `mentioned`: Issues mentioning you   \\* `subscribed`: Issues you're subscribed to updates for   \\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
     * @param {module:model/String} [state = 'open')] Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param {String} [labels] A list of comma separated label names. Example: `bug,ui,@high`
     * @param {module:model/String} [sort = 'created')] What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issuesListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'state': opts['state'],
        'labels': opts['labels'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/user/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListForOrg operation.
     * @callback module:api/IssuesApi~issuesListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization issues assigned to the authenticated user
     * List issues in an organization assigned to the authenticated user.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\" endpoint.
     * @param {String} org 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'assigned')] Indicates which sorts of issues to return. Can be one of:   \\* `assigned`: Issues assigned to you   \\* `created`: Issues created by you   \\* `mentioned`: Issues mentioning you   \\* `subscribed`: Issues you're subscribed to updates for   \\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
     * @param {module:model/String} [state = 'open')] Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param {String} [labels] A list of comma separated label names. Example: `bug,ui,@high`
     * @param {module:model/String} [sort = 'created')] What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    issuesListForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling issuesListForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'filter': opts['filter'],
        'state': opts['state'],
        'labels': opts['labels'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Issue];
      return this.apiClient.callApi(
        '/orgs/{org}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListForRepo operation.
     * @callback module:api/IssuesApi~issuesListForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository issues
     * List issues in a repository.  **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://docs.github.com/enterprise-server@2.18/rest/reference/pulls#list-pull-requests)\" endpoint.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {String} [milestone] If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
     * @param {module:model/String} [state = 'open')] Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
     * @param {String} [assignee] Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
     * @param {String} [creator] The user that created the issue.
     * @param {String} [mentioned] A user that's mentioned in the issue.
     * @param {String} [labels] A list of comma separated label names. Example: `bug,ui,@high`
     * @param {module:model/String} [sort = 'created')] What to sort results by. Can be either `created`, `updated`, `comments`.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {Date} [since] Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueSimple>}
     */
    issuesListForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'milestone': opts['milestone'],
        'state': opts['state'],
        'assignee': opts['assignee'],
        'creator': opts['creator'],
        'mentioned': opts['mentioned'],
        'labels': opts['labels'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'since': opts['since'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueSimple];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListLabelsForMilestone operation.
     * @callback module:api/IssuesApi~issuesListLabelsForMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels for issues in a milestone
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} milestoneNumber milestone_number parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListLabelsForMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesListLabelsForMilestone(owner, repo, milestoneNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListLabelsForMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListLabelsForMilestone");
      }
      // verify the required parameter 'milestoneNumber' is set
      if (milestoneNumber === undefined || milestoneNumber === null) {
        throw new Error("Missing the required parameter 'milestoneNumber' when calling issuesListLabelsForMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'milestone_number': milestoneNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{milestone_number}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListLabelsForRepo operation.
     * @callback module:api/IssuesApi~issuesListLabelsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels for a repository
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListLabelsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesListLabelsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListLabelsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListLabelsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListLabelsOnIssue operation.
     * @callback module:api/IssuesApi~issuesListLabelsOnIssueCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels for an issue
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListLabelsOnIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesListLabelsOnIssue(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListLabelsOnIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListLabelsOnIssue");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesListLabelsOnIssue");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesListMilestones operation.
     * @callback module:api/IssuesApi~issuesListMilestonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Milestone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List milestones
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'open')] The state of the milestone. Either `open`, `closed`, or `all`.
     * @param {module:model/String} [sort = 'due_on')] What to sort results by. Either `due_on` or `completeness`.
     * @param {module:model/String} [direction = 'asc')] The direction of the sort. Either `asc` or `desc`.
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/IssuesApi~issuesListMilestonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Milestone>}
     */
    issuesListMilestones(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesListMilestones");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesListMilestones");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Milestone];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesLock operation.
     * @callback module:api/IssuesApi~issuesLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock an issue
     * Users with push access can lock an issue or pull request's conversation.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesLockRequest} [issuesLockRequest] 
     * @param {module:api/IssuesApi~issuesLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesLock(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesLockRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesLock");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesLock");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesLock");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/lock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemoveAllLabels operation.
     * @callback module:api/IssuesApi~issuesRemoveAllLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all labels from an issue
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {module:api/IssuesApi~issuesRemoveAllLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesRemoveAllLabels(owner, repo, issueNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesRemoveAllLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesRemoveAllLabels");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesRemoveAllLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemoveAssignees operation.
     * @callback module:api/IssuesApi~issuesRemoveAssigneesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove assignees from an issue
     * Removes one or more assignees from an issue.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesRemoveAssigneesRequest} [issuesRemoveAssigneesRequest] 
     * @param {module:api/IssuesApi~issuesRemoveAssigneesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueSimple}
     */
    issuesRemoveAssignees(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesRemoveAssigneesRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesRemoveAssignees");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesRemoveAssignees");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesRemoveAssignees");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueSimple;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/assignees', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesRemoveLabel operation.
     * @callback module:api/IssuesApi~issuesRemoveLabelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a label from an issue
     * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {String} name 
     * @param {module:api/IssuesApi~issuesRemoveLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesRemoveLabel(owner, repo, issueNumber, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesRemoveLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesRemoveLabel");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesRemoveLabel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling issuesRemoveLabel");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesSetLabels operation.
     * @callback module:api/IssuesApi~issuesSetLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set labels for an issue
     * Removes any previous labels and sets the new labels for an issue.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesSetLabelsRequest} [issuesSetLabelsRequest] 
     * @param {module:api/IssuesApi~issuesSetLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    issuesSetLabels(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesSetLabelsRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesSetLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesSetLabels");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesSetLabels");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesUnlock operation.
     * @callback module:api/IssuesApi~issuesUnlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock an issue
     * Users with push access can unlock an issue's conversation.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {module:api/IssuesApi~issuesUnlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuesUnlock(owner, repo, issueNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesUnlock");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesUnlock");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesUnlock");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesUpdate operation.
     * @callback module:api/IssuesApi~issuesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an issue
     * Issue owners and users with push access can edit an issue.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} issueNumber issue_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesUpdateRequest} [issuesUpdateRequest] 
     * @param {module:api/IssuesApi~issuesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    issuesUpdate(owner, repo, issueNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesUpdateRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesUpdate");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesUpdate");
      }
      // verify the required parameter 'issueNumber' is set
      if (issueNumber === undefined || issueNumber === null) {
        throw new Error("Missing the required parameter 'issueNumber' when calling issuesUpdate");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'issue_number': issueNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{issue_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesUpdateComment operation.
     * @callback module:api/IssuesApi~issuesUpdateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an issue comment
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} commentId comment_id parameter
     * @param {module:model/IssuesUpdateCommentRequest} issuesUpdateCommentRequest 
     * @param {module:api/IssuesApi~issuesUpdateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueComment}
     */
    issuesUpdateComment(owner, repo, commentId, issuesUpdateCommentRequest, callback) {
      let postBody = issuesUpdateCommentRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesUpdateComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesUpdateComment");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling issuesUpdateComment");
      }
      // verify the required parameter 'issuesUpdateCommentRequest' is set
      if (issuesUpdateCommentRequest === undefined || issuesUpdateCommentRequest === null) {
        throw new Error("Missing the required parameter 'issuesUpdateCommentRequest' when calling issuesUpdateComment");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueComment;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuesUpdateMilestone operation.
     * @callback module:api/IssuesApi~issuesUpdateMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a milestone
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} milestoneNumber milestone_number parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/IssuesUpdateMilestoneRequest} [issuesUpdateMilestoneRequest] 
     * @param {module:api/IssuesApi~issuesUpdateMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    issuesUpdateMilestone(owner, repo, milestoneNumber, opts, callback) {
      opts = opts || {};
      let postBody = opts['issuesUpdateMilestoneRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuesUpdateMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuesUpdateMilestone");
      }
      // verify the required parameter 'milestoneNumber' is set
      if (milestoneNumber === undefined || milestoneNumber === null) {
        throw new Error("Missing the required parameter 'milestoneNumber' when calling issuesUpdateMilestone");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'milestone_number': milestoneNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{milestone_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
