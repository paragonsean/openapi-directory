/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Authorization from '../model/Authorization';
import ConfigurationStatus from '../model/ConfigurationStatus';
import EnterpriseAdminCreateGlobalWebhookRequest from '../model/EnterpriseAdminCreateGlobalWebhookRequest';
import EnterpriseAdminCreateImpersonationOAuthTokenRequest from '../model/EnterpriseAdminCreateImpersonationOAuthTokenRequest';
import EnterpriseAdminCreateOrgRequest from '../model/EnterpriseAdminCreateOrgRequest';
import EnterpriseAdminCreatePreReceiveEnvironmentRequest from '../model/EnterpriseAdminCreatePreReceiveEnvironmentRequest';
import EnterpriseAdminCreatePreReceiveHookRequest from '../model/EnterpriseAdminCreatePreReceiveHookRequest';
import EnterpriseAdminCreateUserRequest from '../model/EnterpriseAdminCreateUserRequest';
import EnterpriseAdminDeletePreReceiveEnvironment422Response from '../model/EnterpriseAdminDeletePreReceiveEnvironment422Response';
import EnterpriseAdminSuspendUserRequest from '../model/EnterpriseAdminSuspendUserRequest';
import EnterpriseAdminSyncLdapMappingForTeam201Response from '../model/EnterpriseAdminSyncLdapMappingForTeam201Response';
import EnterpriseAdminUnsuspendUserRequest from '../model/EnterpriseAdminUnsuspendUserRequest';
import EnterpriseAdminUpdateGlobalWebhookRequest from '../model/EnterpriseAdminUpdateGlobalWebhookRequest';
import EnterpriseAdminUpdateLdapMappingForTeamRequest from '../model/EnterpriseAdminUpdateLdapMappingForTeamRequest';
import EnterpriseAdminUpdateOrgName202Response from '../model/EnterpriseAdminUpdateOrgName202Response';
import EnterpriseAdminUpdateOrgNameRequest from '../model/EnterpriseAdminUpdateOrgNameRequest';
import EnterpriseAdminUpdatePreReceiveEnvironmentRequest from '../model/EnterpriseAdminUpdatePreReceiveEnvironmentRequest';
import EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest from '../model/EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest';
import EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest from '../model/EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest';
import EnterpriseAdminUpdatePreReceiveHookRequest from '../model/EnterpriseAdminUpdatePreReceiveHookRequest';
import EnterpriseAdminUpdateUsernameForUserRequest from '../model/EnterpriseAdminUpdateUsernameForUserRequest';
import EnterpriseCommentOverview from '../model/EnterpriseCommentOverview';
import EnterpriseGistOverview from '../model/EnterpriseGistOverview';
import EnterpriseHookOverview from '../model/EnterpriseHookOverview';
import EnterpriseIssueOverview from '../model/EnterpriseIssueOverview';
import EnterpriseMilestoneOverview from '../model/EnterpriseMilestoneOverview';
import EnterpriseOrganizationOverview from '../model/EnterpriseOrganizationOverview';
import EnterpriseOverview from '../model/EnterpriseOverview';
import EnterprisePageOverview from '../model/EnterprisePageOverview';
import EnterprisePullRequestOverview from '../model/EnterprisePullRequestOverview';
import EnterpriseRepositoryOverview from '../model/EnterpriseRepositoryOverview';
import EnterpriseSettings from '../model/EnterpriseSettings';
import EnterpriseUserOverview from '../model/EnterpriseUserOverview';
import GlobalHook from '../model/GlobalHook';
import GlobalHook2 from '../model/GlobalHook2';
import LdapMappingTeam from '../model/LdapMappingTeam';
import LdapMappingUser from '../model/LdapMappingUser';
import LicenseInfo from '../model/LicenseInfo';
import MaintenanceStatus from '../model/MaintenanceStatus';
import OrgPreReceiveHook from '../model/OrgPreReceiveHook';
import OrganizationSimple from '../model/OrganizationSimple';
import PreReceiveEnvironment from '../model/PreReceiveEnvironment';
import PreReceiveEnvironmentDownloadStatus from '../model/PreReceiveEnvironmentDownloadStatus';
import PreReceiveHook from '../model/PreReceiveHook';
import PublicKeyFull from '../model/PublicKeyFull';
import RepositoryPreReceiveHook from '../model/RepositoryPreReceiveHook';
import SimpleUser from '../model/SimpleUser';
import SshKey from '../model/SshKey';

/**
* EnterpriseAdmin service.
* @module api/EnterpriseAdminApi
* @version 1.1.4
*/
export default class EnterpriseAdminApi {

    /**
    * Constructs a new EnterpriseAdminApi. 
    * @alias module:api/EnterpriseAdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the enterpriseAdminAddAuthorizedSshKey operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminAddAuthorizedSshKeyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SshKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an authorized SSH key
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {String} authorizedKey The public SSH key.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminAddAuthorizedSshKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SshKey>}
     */
    enterpriseAdminAddAuthorizedSshKey(authorizedKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorizedKey' is set
      if (authorizedKey === undefined || authorizedKey === null) {
        throw new Error("Missing the required parameter 'authorizedKey' when calling enterpriseAdminAddAuthorizedSshKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'authorized_key': authorizedKey
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [SshKey];
      return this.apiClient.callApi(
        '/setup/api/settings/authorized-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreateEnterpriseServerLicense operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreateEnterpriseServerLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GitHub license
     * When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.  Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.  When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:  1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password. 2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.  **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {String} license The content of your _.ghl_ license file.
     * @param {Object} opts Optional parameters
     * @param {String} [password] You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter.
     * @param {String} [settings] An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#get-settings).
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreateEnterpriseServerLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminCreateEnterpriseServerLicense(license, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling enterpriseAdminCreateEnterpriseServerLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'license': license,
        'password': opts['password'],
        'settings': opts['settings']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/api/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreateGlobalWebhook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreateGlobalWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a global webhook
     * 
     * @param {String} accept This API is under preview and subject to change.
     * @param {module:model/EnterpriseAdminCreateGlobalWebhookRequest} enterpriseAdminCreateGlobalWebhookRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreateGlobalWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalHook}
     */
    enterpriseAdminCreateGlobalWebhook(accept, enterpriseAdminCreateGlobalWebhookRequest, callback) {
      let postBody = enterpriseAdminCreateGlobalWebhookRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminCreateGlobalWebhook");
      }
      // verify the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' is set
      if (enterpriseAdminCreateGlobalWebhookRequest === undefined || enterpriseAdminCreateGlobalWebhookRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminCreateGlobalWebhookRequest' when calling enterpriseAdminCreateGlobalWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalHook;
      return this.apiClient.callApi(
        '/admin/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreateImpersonationOAuthToken operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreateImpersonationOAuthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an impersonation OAuth token
     * 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminCreateImpersonationOAuthTokenRequest} [enterpriseAdminCreateImpersonationOAuthTokenRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreateImpersonationOAuthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorization}
     */
    enterpriseAdminCreateImpersonationOAuthToken(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminCreateImpersonationOAuthTokenRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminCreateImpersonationOAuthToken");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorization;
      return this.apiClient.callApi(
        '/admin/users/{username}/authorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreateOrg operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreateOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationSimple} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization
     * 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminCreateOrgRequest} [enterpriseAdminCreateOrgRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreateOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationSimple}
     */
    enterpriseAdminCreateOrg(opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminCreateOrgRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationSimple;
      return this.apiClient.callApi(
        '/admin/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreatePreReceiveEnvironment operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreatePreReceiveEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pre-receive environment
     * 
     * @param {module:model/EnterpriseAdminCreatePreReceiveEnvironmentRequest} enterpriseAdminCreatePreReceiveEnvironmentRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreatePreReceiveEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveEnvironment}
     */
    enterpriseAdminCreatePreReceiveEnvironment(enterpriseAdminCreatePreReceiveEnvironmentRequest, callback) {
      let postBody = enterpriseAdminCreatePreReceiveEnvironmentRequest;
      // verify the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' is set
      if (enterpriseAdminCreatePreReceiveEnvironmentRequest === undefined || enterpriseAdminCreatePreReceiveEnvironmentRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminCreatePreReceiveEnvironmentRequest' when calling enterpriseAdminCreatePreReceiveEnvironment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreReceiveEnvironment;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreatePreReceiveHook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreatePreReceiveHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pre-receive hook
     * 
     * @param {module:model/EnterpriseAdminCreatePreReceiveHookRequest} enterpriseAdminCreatePreReceiveHookRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreatePreReceiveHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveHook}
     */
    enterpriseAdminCreatePreReceiveHook(enterpriseAdminCreatePreReceiveHookRequest, callback) {
      let postBody = enterpriseAdminCreatePreReceiveHookRequest;
      // verify the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' is set
      if (enterpriseAdminCreatePreReceiveHookRequest === undefined || enterpriseAdminCreatePreReceiveHookRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminCreatePreReceiveHookRequest' when calling enterpriseAdminCreatePreReceiveHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreReceiveHook;
      return this.apiClient.callApi(
        '/admin/pre-receive-hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminCreateUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.  The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `\"octo_cat\"` as the login, a user named `\"octo-cat\"` will be created.  If the login name or email address is already associated with an account, the server will return a `422` response.
     * @param {module:model/EnterpriseAdminCreateUserRequest} enterpriseAdminCreateUserRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleUser}
     */
    enterpriseAdminCreateUser(enterpriseAdminCreateUserRequest, callback) {
      let postBody = enterpriseAdminCreateUserRequest;
      // verify the required parameter 'enterpriseAdminCreateUserRequest' is set
      if (enterpriseAdminCreateUserRequest === undefined || enterpriseAdminCreateUserRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminCreateUserRequest' when calling enterpriseAdminCreateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleUser;
      return this.apiClient.callApi(
        '/admin/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeleteGlobalWebhook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeleteGlobalWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a global webhook
     * 
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} hookId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeleteGlobalWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeleteGlobalWebhook(accept, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminDeleteGlobalWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling enterpriseAdminDeleteGlobalWebhook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/hooks/{hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeleteImpersonationOAuthToken operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeleteImpersonationOAuthTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an impersonation OAuth token
     * 
     * @param {String} username 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeleteImpersonationOAuthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeleteImpersonationOAuthToken(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminDeleteImpersonationOAuthToken");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/users/{username}/authorizations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeletePersonalAccessToken operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeletePersonalAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a personal access token
     * Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
     * @param {Number} tokenId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeletePersonalAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeletePersonalAccessToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling enterpriseAdminDeletePersonalAccessToken");
      }

      let pathParams = {
        'token_id': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/tokens/{token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeletePreReceiveEnvironment operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeletePreReceiveEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pre-receive environment
     * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.  The possible error messages are:  *   _Cannot modify or delete the default environment_ *   _Cannot delete environment that has hooks_ *   _Cannot delete environment when download is in progress_
     * @param {Number} preReceiveEnvironmentId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeletePreReceiveEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeletePreReceiveEnvironment(preReceiveEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveEnvironmentId' is set
      if (preReceiveEnvironmentId === undefined || preReceiveEnvironmentId === null) {
        throw new Error("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminDeletePreReceiveEnvironment");
      }

      let pathParams = {
        'pre_receive_environment_id': preReceiveEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments/{pre_receive_environment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeletePreReceiveHook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeletePreReceiveHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pre-receive hook
     * 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeletePreReceiveHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeletePreReceiveHook(preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminDeletePreReceiveHook");
      }

      let pathParams = {
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/pre-receive-hooks/{pre_receive_hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeletePublicKey operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeletePublicKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public key
     * 
     * @param {String} keyIds 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeletePublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeletePublicKey(keyIds, callback) {
      let postBody = null;
      // verify the required parameter 'keyIds' is set
      if (keyIds === undefined || keyIds === null) {
        throw new Error("Missing the required parameter 'keyIds' when calling enterpriseAdminDeletePublicKey");
      }

      let pathParams = {
        'key_ids': keyIds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/keys/{key_ids}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDeleteUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#suspend-a-user) is often a better option.  You can delete any user account except your own.
     * @param {String} username 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDeleteUser(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminDeleteUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminDemoteSiteAdministrator operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminDemoteSiteAdministratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demote a site administrator
     * You can demote any user account except your own.
     * @param {String} username 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminDemoteSiteAdministratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminDemoteSiteAdministrator(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminDemoteSiteAdministrator");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/site_admin', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminEnableOrDisableMaintenanceMode operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminEnableOrDisableMaintenanceModeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaintenanceStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable maintenance mode
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {String} maintenance A JSON string with the attributes `enabled` and `when`.  The possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.  The possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminEnableOrDisableMaintenanceModeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MaintenanceStatus}
     */
    enterpriseAdminEnableOrDisableMaintenanceMode(maintenance, callback) {
      let postBody = null;
      // verify the required parameter 'maintenance' is set
      if (maintenance === undefined || maintenance === null) {
        throw new Error("Missing the required parameter 'maintenance' when calling enterpriseAdminEnableOrDisableMaintenanceMode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'maintenance': maintenance
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = MaintenanceStatus;
      return this.apiClient.callApi(
        '/setup/api/maintenance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetAllAuthorizedSshKeys operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetAllAuthorizedSshKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SshKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all authorized SSH keys
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetAllAuthorizedSshKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SshKey>}
     */
    enterpriseAdminGetAllAuthorizedSshKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SshKey];
      return this.apiClient.callApi(
        '/setup/api/settings/authorized-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetAllStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetAllStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetAllStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseOverview}
     */
    enterpriseAdminGetAllStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetCommentStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetCommentStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseCommentOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comment statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetCommentStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseCommentOverview}
     */
    enterpriseAdminGetCommentStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseCommentOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetConfigurationStatus operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetConfigurationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the configuration status
     * This endpoint allows you to check the status of the most recent configuration process:  Note that you may need to wait several seconds after you start a process before you can check its status.  The different statuses are:  | Status        | Description                       | | ------------- | --------------------------------- | | `PENDING`     | The job has not started yet       | | `CONFIGURING` | The job is running                | | `DONE`        | The job has finished correctly    | | `FAILED`      | The job has finished unexpectedly |
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetConfigurationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStatus}
     */
    enterpriseAdminGetConfigurationStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationStatus;
      return this.apiClient.callApi(
        '/setup/api/configcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetDownloadStatusForPreReceiveEnvironment operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveEnvironmentDownloadStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the download status for a pre-receive environment
     * In addition to seeing the download status at the \"[Get a pre-receive environment](#get-a-pre-receive-environment)\" endpoint, there is also this separate endpoint for just the download status.
     * @param {Number} preReceiveEnvironmentId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetDownloadStatusForPreReceiveEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveEnvironmentDownloadStatus}
     */
    enterpriseAdminGetDownloadStatusForPreReceiveEnvironment(preReceiveEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveEnvironmentId' is set
      if (preReceiveEnvironmentId === undefined || preReceiveEnvironmentId === null) {
        throw new Error("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetDownloadStatusForPreReceiveEnvironment");
      }

      let pathParams = {
        'pre_receive_environment_id': preReceiveEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreReceiveEnvironmentDownloadStatus;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetGlobalWebhook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetGlobalWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a global webhook
     * 
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} hookId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetGlobalWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalHook}
     */
    enterpriseAdminGetGlobalWebhook(accept, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminGetGlobalWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling enterpriseAdminGetGlobalWebhook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalHook;
      return this.apiClient.callApi(
        '/admin/hooks/{hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetHooksStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetHooksStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseHookOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hooks statistics
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetHooksStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseHookOverview}
     */
    enterpriseAdminGetHooksStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseHookOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetIssueStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetIssueStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseIssueOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetIssueStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseIssueOverview}
     */
    enterpriseAdminGetIssueStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseIssueOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetLicenseInformation operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetLicenseInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get license information
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetLicenseInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseInfo}
     */
    enterpriseAdminGetLicenseInformation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseInfo;
      return this.apiClient.callApi(
        '/enterprise/settings/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetMaintenanceStatus operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetMaintenanceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MaintenanceStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the maintenance status
     * Check your installation's maintenance status:
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetMaintenanceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MaintenanceStatus}
     */
    enterpriseAdminGetMaintenanceStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MaintenanceStatus;
      return this.apiClient.callApi(
        '/setup/api/maintenance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetMilestoneStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetMilestoneStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseMilestoneOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get milestone statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetMilestoneStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseMilestoneOverview}
     */
    enterpriseAdminGetMilestoneStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseMilestoneOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetOrgStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetOrgStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseOrganizationOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetOrgStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseOrganizationOverview}
     */
    enterpriseAdminGetOrgStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseOrganizationOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPagesStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPagesStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterprisePageOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pages statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPagesStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterprisePageOverview}
     */
    enterpriseAdminGetPagesStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterprisePageOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPreReceiveEnvironment operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-receive environment
     * 
     * @param {Number} preReceiveEnvironmentId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveEnvironment}
     */
    enterpriseAdminGetPreReceiveEnvironment(preReceiveEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveEnvironmentId' is set
      if (preReceiveEnvironmentId === undefined || preReceiveEnvironmentId === null) {
        throw new Error("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminGetPreReceiveEnvironment");
      }

      let pathParams = {
        'pre_receive_environment_id': preReceiveEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreReceiveEnvironment;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments/{pre_receive_environment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPreReceiveHook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-receive hook
     * 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveHook}
     */
    enterpriseAdminGetPreReceiveHook(preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHook");
      }

      let pathParams = {
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreReceiveHook;
      return this.apiClient.callApi(
        '/admin/pre-receive-hooks/{pre_receive_hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPreReceiveHookForOrg operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-receive hook for an organization
     * 
     * @param {String} org 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgPreReceiveHook}
     */
    enterpriseAdminGetPreReceiveHookForOrg(org, preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling enterpriseAdminGetPreReceiveHookForOrg");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForOrg");
      }

      let pathParams = {
        'org': org,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgPreReceiveHook;
      return this.apiClient.callApi(
        '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPreReceiveHookForRepo operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-receive hook for a repository
     * 
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPreReceiveHookForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryPreReceiveHook}
     */
    enterpriseAdminGetPreReceiveHookForRepo(owner, repo, preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling enterpriseAdminGetPreReceiveHookForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling enterpriseAdminGetPreReceiveHookForRepo");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminGetPreReceiveHookForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepositoryPreReceiveHook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetPullRequestStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetPullRequestStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterprisePullRequestOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pull request statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetPullRequestStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterprisePullRequestOverview}
     */
    enterpriseAdminGetPullRequestStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterprisePullRequestOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/pulls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetRepoStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetRepoStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseRepositoryOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository statistics
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetRepoStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseRepositoryOverview}
     */
    enterpriseAdminGetRepoStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseRepositoryOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetSettings operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get settings
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseSettings}
     */
    enterpriseAdminGetSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseSettings;
      return this.apiClient.callApi(
        '/setup/api/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminGetUserStats operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminGetUserStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseUserOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminGetUserStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseUserOverview}
     */
    enterpriseAdminGetUserStats(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseUserOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListGlobalWebhooks operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListGlobalWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GlobalHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List global webhooks
     * 
     * @param {String} accept This API is under preview and subject to change.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListGlobalWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GlobalHook>}
     */
    enterpriseAdminListGlobalWebhooks(accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminListGlobalWebhooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GlobalHook];
      return this.apiClient.callApi(
        '/admin/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPersonalAccessTokens operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPersonalAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Authorization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List personal access tokens
     * Lists personal access tokens for all users, including admin users.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPersonalAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Authorization>}
     */
    enterpriseAdminListPersonalAccessTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Authorization];
      return this.apiClient.callApi(
        '/admin/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPreReceiveEnvironments operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PreReceiveEnvironment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pre-receive environments
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {module:model/String} [sort = 'created')] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PreReceiveEnvironment>}
     */
    enterpriseAdminListPreReceiveEnvironments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PreReceiveEnvironment];
      return this.apiClient.callApi(
        '/admin/pre-receive-environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPreReceiveHooks operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PreReceiveHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pre-receive hooks
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {module:model/String} [sort = 'created')] One of `created` (when the repository was starred) or `updated` (when it was last pushed to) or `name`.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PreReceiveHook>}
     */
    enterpriseAdminListPreReceiveHooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PreReceiveHook];
      return this.apiClient.callApi(
        '/admin/pre-receive-hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPreReceiveHooksForOrg operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgPreReceiveHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pre-receive hooks for an organization
     * List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
     * @param {String} org 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {module:model/String} [sort = 'created')] The sort order for the response collection.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgPreReceiveHook>}
     */
    enterpriseAdminListPreReceiveHooksForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling enterpriseAdminListPreReceiveHooksForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgPreReceiveHook];
      return this.apiClient.callApi(
        '/orgs/{org}/pre-receive-hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPreReceiveHooksForRepo operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryPreReceiveHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pre-receive hooks for a repository
     * List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {module:model/String} [sort = 'created')] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPreReceiveHooksForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryPreReceiveHook>}
     */
    enterpriseAdminListPreReceiveHooksForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling enterpriseAdminListPreReceiveHooksForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling enterpriseAdminListPreReceiveHooksForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'direction': opts['direction'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RepositoryPreReceiveHook];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pre-receive-hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminListPublicKeys operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminListPublicKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicKeyFull>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public keys
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] Results per page (max 100)
     * @param {Number} [page = 1)] Page number of the results to fetch.
     * @param {module:model/String} [direction = 'desc')] One of `asc` (ascending) or `desc` (descending).
     * @param {module:model/String} [sort = 'created')] 
     * @param {String} [since] Only show public keys accessed after the given time.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminListPublicKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicKeyFull>}
     */
    enterpriseAdminListPublicKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'direction': opts['direction'],
        'sort': opts['sort'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicKeyFull];
      return this.apiClient.callApi(
        '/admin/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminPingGlobalWebhook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminPingGlobalWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping a global webhook
     * This will trigger a [ping event](https://docs.github.com/enterprise-server@2.18/webhooks/#ping-event) to be sent to the webhook.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} hookId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminPingGlobalWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminPingGlobalWebhook(accept, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminPingGlobalWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling enterpriseAdminPingGlobalWebhook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/admin/hooks/{hook_id}/pings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminPromoteUserToBeSiteAdministrator operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminPromoteUserToBeSiteAdministratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Promote a user to be a site administrator
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {String} username 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminPromoteUserToBeSiteAdministratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminPromoteUserToBeSiteAdministrator(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminPromoteUserToBeSiteAdministrator");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/site_admin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminRemoveAuthorizedSshKey operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminRemoveAuthorizedSshKeyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SshKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an authorized SSH key
     * **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {String} authorizedKey The public SSH key.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminRemoveAuthorizedSshKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SshKey>}
     */
    enterpriseAdminRemoveAuthorizedSshKey(authorizedKey, callback) {
      let postBody = null;
      // verify the required parameter 'authorizedKey' is set
      if (authorizedKey === undefined || authorizedKey === null) {
        throw new Error("Missing the required parameter 'authorizedKey' when calling enterpriseAdminRemoveAuthorizedSshKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'authorized_key': authorizedKey
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [SshKey];
      return this.apiClient.callApi(
        '/setup/api/settings/authorized-keys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminRemovePreReceiveHookEnforcementForOrg operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminRemovePreReceiveHookEnforcementForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove pre-receive hook enforcement for an organization
     * Removes any overrides for this hook at the org level for this org.
     * @param {String} org 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminRemovePreReceiveHookEnforcementForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgPreReceiveHook}
     */
    enterpriseAdminRemovePreReceiveHookEnforcementForOrg(org, preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForOrg");
      }

      let pathParams = {
        'org': org,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgPreReceiveHook;
      return this.apiClient.callApi(
        '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminRemovePreReceiveHookEnforcementForRepo operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminRemovePreReceiveHookEnforcementForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove pre-receive hook enforcement for a repository
     * Deletes any overridden enforcement on this repository for the specified hook.  Responds with effective values inherited from owner and/or global level.
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminRemovePreReceiveHookEnforcementForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryPreReceiveHook}
     */
    enterpriseAdminRemovePreReceiveHookEnforcementForRepo(owner, repo, preReceiveHookId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminRemovePreReceiveHookEnforcementForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepositoryPreReceiveHook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminSetSettings operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminSetSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set settings
     * For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#get-settings).  **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {String} settings A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@2.18/rest/reference/enterprise-admin#get-settings).
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminSetSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminSetSettings(settings, callback) {
      let postBody = null;
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling enterpriseAdminSetSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'settings': settings
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/api/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminStartConfigurationProcess operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminStartConfigurationProcessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a configuration process
     * This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminStartConfigurationProcessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminStartConfigurationProcess(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/api/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminStartPreReceiveEnvironmentDownload operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminStartPreReceiveEnvironmentDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveEnvironmentDownloadStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a pre-receive environment download
     * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.  If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.  The possible error messages are:  * _Cannot modify or delete the default environment_ * _Can not start a new download when a download is in progress_
     * @param {Number} preReceiveEnvironmentId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminStartPreReceiveEnvironmentDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveEnvironmentDownloadStatus}
     */
    enterpriseAdminStartPreReceiveEnvironmentDownload(preReceiveEnvironmentId, callback) {
      let postBody = null;
      // verify the required parameter 'preReceiveEnvironmentId' is set
      if (preReceiveEnvironmentId === undefined || preReceiveEnvironmentId === null) {
        throw new Error("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminStartPreReceiveEnvironmentDownload");
      }

      let pathParams = {
        'pre_receive_environment_id': preReceiveEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreReceiveEnvironmentDownloadStatus;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments/{pre_receive_environment_id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminSuspendUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminSuspendUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.  You can suspend any user account except your own.  Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@2.18/rest/overview/resources-in-the-rest-api#http-verbs).\"
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminSuspendUserRequest} [enterpriseAdminSuspendUserRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminSuspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminSuspendUser(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminSuspendUserRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminSuspendUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/suspended', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminSyncLdapMappingForTeam operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminSyncLdapMappingForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminSyncLdapMappingForTeam201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync LDAP mapping for a team
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param {Number} teamId 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminSyncLdapMappingForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminSyncLdapMappingForTeam201Response}
     */
    enterpriseAdminSyncLdapMappingForTeam(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling enterpriseAdminSyncLdapMappingForTeam");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminSyncLdapMappingForTeam201Response;
      return this.apiClient.callApi(
        '/admin/ldap/teams/{team_id}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminSyncLdapMappingForUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminSyncLdapMappingForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminSyncLdapMappingForTeam201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync LDAP mapping for a user
     * Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
     * @param {String} username 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminSyncLdapMappingForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminSyncLdapMappingForTeam201Response}
     */
    enterpriseAdminSyncLdapMappingForUser(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminSyncLdapMappingForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminSyncLdapMappingForTeam201Response;
      return this.apiClient.callApi(
        '/admin/ldap/users/{username}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUnsuspendUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUnsuspendUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsuspend a user
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUnsuspendUserRequest} [enterpriseAdminUnsuspendUserRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUnsuspendUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminUnsuspendUser(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUnsuspendUserRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminUnsuspendUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/suspended', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdateGlobalWebhook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdateGlobalWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalHook2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a global webhook
     * Parameters that are not provided will be overwritten with the default value or removed if no default exists.
     * @param {String} accept This API is under preview and subject to change.
     * @param {Number} hookId 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdateGlobalWebhookRequest} [enterpriseAdminUpdateGlobalWebhookRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdateGlobalWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalHook2}
     */
    enterpriseAdminUpdateGlobalWebhook(accept, hookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdateGlobalWebhookRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling enterpriseAdminUpdateGlobalWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling enterpriseAdminUpdateGlobalWebhook");
      }

      let pathParams = {
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
        'accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalHook2;
      return this.apiClient.callApi(
        '/admin/hooks/{hook_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdateLdapMappingForTeam operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdateLdapMappingForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LdapMappingTeam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update LDAP mapping for a team
     * Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://help.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@2.18/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.  If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
     * @param {Number} teamId 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdateLdapMappingForTeamRequest} [enterpriseAdminUpdateLdapMappingForTeamRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdateLdapMappingForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LdapMappingTeam}
     */
    enterpriseAdminUpdateLdapMappingForTeam(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdateLdapMappingForTeamRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling enterpriseAdminUpdateLdapMappingForTeam");
      }

      let pathParams = {
        'team_id': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LdapMappingTeam;
      return this.apiClient.callApi(
        '/admin/ldap/teams/{team_id}/mapping', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdateLdapMappingForUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdateLdapMappingForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LdapMappingUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update LDAP mapping for a user
     * 
     * @param {String} username 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdateLdapMappingForTeamRequest} [enterpriseAdminUpdateLdapMappingForTeamRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdateLdapMappingForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LdapMappingUser}
     */
    enterpriseAdminUpdateLdapMappingForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdateLdapMappingForTeamRequest'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminUpdateLdapMappingForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LdapMappingUser;
      return this.apiClient.callApi(
        '/admin/ldap/users/{username}/mapping', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdateOrgName operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdateOrgNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminUpdateOrgName202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization name
     * 
     * @param {String} org 
     * @param {module:model/EnterpriseAdminUpdateOrgNameRequest} enterpriseAdminUpdateOrgNameRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdateOrgNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminUpdateOrgName202Response}
     */
    enterpriseAdminUpdateOrgName(org, enterpriseAdminUpdateOrgNameRequest, callback) {
      let postBody = enterpriseAdminUpdateOrgNameRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling enterpriseAdminUpdateOrgName");
      }
      // verify the required parameter 'enterpriseAdminUpdateOrgNameRequest' is set
      if (enterpriseAdminUpdateOrgNameRequest === undefined || enterpriseAdminUpdateOrgNameRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminUpdateOrgNameRequest' when calling enterpriseAdminUpdateOrgName");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminUpdateOrgName202Response;
      return this.apiClient.callApi(
        '/admin/organizations/{org}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdatePreReceiveEnvironment operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pre-receive environment
     * You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
     * @param {Number} preReceiveEnvironmentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdatePreReceiveEnvironmentRequest} [enterpriseAdminUpdatePreReceiveEnvironmentRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveEnvironment}
     */
    enterpriseAdminUpdatePreReceiveEnvironment(preReceiveEnvironmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdatePreReceiveEnvironmentRequest'];
      // verify the required parameter 'preReceiveEnvironmentId' is set
      if (preReceiveEnvironmentId === undefined || preReceiveEnvironmentId === null) {
        throw new Error("Missing the required parameter 'preReceiveEnvironmentId' when calling enterpriseAdminUpdatePreReceiveEnvironment");
      }

      let pathParams = {
        'pre_receive_environment_id': preReceiveEnvironmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreReceiveEnvironment;
      return this.apiClient.callApi(
        '/admin/pre-receive-environments/{pre_receive_environment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdatePreReceiveHook operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pre-receive hook
     * 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdatePreReceiveHookRequest} [enterpriseAdminUpdatePreReceiveHookRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreReceiveHook}
     */
    enterpriseAdminUpdatePreReceiveHook(preReceiveHookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdatePreReceiveHookRequest'];
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHook");
      }

      let pathParams = {
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreReceiveHook;
      return this.apiClient.callApi(
        '/admin/pre-receive-hooks/{pre_receive_hook_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdatePreReceiveHookEnforcementForOrg operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pre-receive hook enforcement for an organization
     * For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
     * @param {String} org 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest} [enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookEnforcementForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgPreReceiveHook}
     */
    enterpriseAdminUpdatePreReceiveHookEnforcementForOrg(org, preReceiveHookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdatePreReceiveHookEnforcementForOrgRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForOrg");
      }

      let pathParams = {
        'org': org,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgPreReceiveHook;
      return this.apiClient.callApi(
        '/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdatePreReceiveHookEnforcementForRepo operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryPreReceiveHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pre-receive hook enforcement for a repository
     * For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
     * @param {String} owner 
     * @param {String} repo 
     * @param {Number} preReceiveHookId pre_receive_hook_id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest} [enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest] 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdatePreReceiveHookEnforcementForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryPreReceiveHook}
     */
    enterpriseAdminUpdatePreReceiveHookEnforcementForRepo(owner, repo, preReceiveHookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['enterpriseAdminUpdatePreReceiveHookEnforcementForRepoRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo");
      }
      // verify the required parameter 'preReceiveHookId' is set
      if (preReceiveHookId === undefined || preReceiveHookId === null) {
        throw new Error("Missing the required parameter 'preReceiveHookId' when calling enterpriseAdminUpdatePreReceiveHookEnforcementForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pre_receive_hook_id': preReceiveHookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryPreReceiveHook;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpdateUsernameForUser operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpdateUsernameForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseAdminUpdateOrgName202Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the username for a user
     * 
     * @param {String} username 
     * @param {module:model/EnterpriseAdminUpdateUsernameForUserRequest} enterpriseAdminUpdateUsernameForUserRequest 
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpdateUsernameForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseAdminUpdateOrgName202Response}
     */
    enterpriseAdminUpdateUsernameForUser(username, enterpriseAdminUpdateUsernameForUserRequest, callback) {
      let postBody = enterpriseAdminUpdateUsernameForUserRequest;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling enterpriseAdminUpdateUsernameForUser");
      }
      // verify the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' is set
      if (enterpriseAdminUpdateUsernameForUserRequest === undefined || enterpriseAdminUpdateUsernameForUserRequest === null) {
        throw new Error("Missing the required parameter 'enterpriseAdminUpdateUsernameForUserRequest' when calling enterpriseAdminUpdateUsernameForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnterpriseAdminUpdateOrgName202Response;
      return this.apiClient.callApi(
        '/admin/users/{username}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseAdminUpgradeLicense operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseAdminUpgradeLicenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a license
     * This API upgrades your license and also triggers the configuration process.  **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
     * @param {Object} opts Optional parameters
     * @param {String} [license] The content of your new _.ghl_ license file.
     * @param {module:api/EnterpriseAdminApi~enterpriseAdminUpgradeLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enterpriseAdminUpgradeLicense(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'license': opts['license']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/setup/api/upgrade', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enterpriseStatsGistsGet operation.
     * @callback module:api/EnterpriseAdminApi~enterpriseStatsGistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnterpriseGistOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gist statistics
     * 
     * @param {module:api/EnterpriseAdminApi~enterpriseStatsGistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnterpriseGistOverview}
     */
    enterpriseStatsGistsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnterpriseGistOverview;
      return this.apiClient.callApi(
        '/enterprise/stats/gists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
