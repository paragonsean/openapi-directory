/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppPermissions from './AppPermissions';
import SimpleUser from './SimpleUser';

/**
 * The NullableScopedInstallation model module.
 * @module model/NullableScopedInstallation
 * @version 1.1.4
 */
class NullableScopedInstallation {
    /**
     * Constructs a new <code>NullableScopedInstallation</code>.
     * @alias module:model/NullableScopedInstallation
     * @param account {module:model/SimpleUser} 
     * @param permissions {module:model/AppPermissions} 
     * @param repositoriesUrl {String} 
     * @param repositorySelection {module:model/NullableScopedInstallation.RepositorySelectionEnum} Describe whether all repositories have been selected or there's a selection involved
     * @param singleFileName {String} 
     */
    constructor(account, permissions, repositoriesUrl, repositorySelection, singleFileName) { 
        
        NullableScopedInstallation.initialize(this, account, permissions, repositoriesUrl, repositorySelection, singleFileName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, permissions, repositoriesUrl, repositorySelection, singleFileName) { 
        obj['account'] = account;
        obj['permissions'] = permissions;
        obj['repositories_url'] = repositoriesUrl;
        obj['repository_selection'] = repositorySelection;
        obj['single_file_name'] = singleFileName;
    }

    /**
     * Constructs a <code>NullableScopedInstallation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NullableScopedInstallation} obj Optional instance to populate.
     * @return {module:model/NullableScopedInstallation} The populated <code>NullableScopedInstallation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NullableScopedInstallation();

            if (data.hasOwnProperty('account')) {
                obj['account'] = SimpleUser.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('has_multiple_single_files')) {
                obj['has_multiple_single_files'] = ApiClient.convertToType(data['has_multiple_single_files'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = AppPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('repositories_url')) {
                obj['repositories_url'] = ApiClient.convertToType(data['repositories_url'], 'String');
            }
            if (data.hasOwnProperty('repository_selection')) {
                obj['repository_selection'] = ApiClient.convertToType(data['repository_selection'], 'String');
            }
            if (data.hasOwnProperty('single_file_name')) {
                obj['single_file_name'] = ApiClient.convertToType(data['single_file_name'], 'String');
            }
            if (data.hasOwnProperty('single_file_paths')) {
                obj['single_file_paths'] = ApiClient.convertToType(data['single_file_paths'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NullableScopedInstallation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NullableScopedInstallation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NullableScopedInstallation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account`
        if (data['account']) { // data not null
          SimpleUser.validateJSON(data['account']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          AppPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['repositories_url'] && !(typeof data['repositories_url'] === 'string' || data['repositories_url'] instanceof String)) {
            throw new Error("Expected the field `repositories_url` to be a primitive type in the JSON string but got " + data['repositories_url']);
        }
        // ensure the json data is a string
        if (data['repository_selection'] && !(typeof data['repository_selection'] === 'string' || data['repository_selection'] instanceof String)) {
            throw new Error("Expected the field `repository_selection` to be a primitive type in the JSON string but got " + data['repository_selection']);
        }
        // ensure the json data is a string
        if (data['single_file_name'] && !(typeof data['single_file_name'] === 'string' || data['single_file_name'] instanceof String)) {
            throw new Error("Expected the field `single_file_name` to be a primitive type in the JSON string but got " + data['single_file_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['single_file_paths'])) {
            throw new Error("Expected the field `single_file_paths` to be an array in the JSON data but got " + data['single_file_paths']);
        }

        return true;
    }


}

NullableScopedInstallation.RequiredProperties = ["account", "permissions", "repositories_url", "repository_selection", "single_file_name"];

/**
 * @member {module:model/SimpleUser} account
 */
NullableScopedInstallation.prototype['account'] = undefined;

/**
 * @member {Boolean} has_multiple_single_files
 */
NullableScopedInstallation.prototype['has_multiple_single_files'] = undefined;

/**
 * @member {module:model/AppPermissions} permissions
 */
NullableScopedInstallation.prototype['permissions'] = undefined;

/**
 * @member {String} repositories_url
 */
NullableScopedInstallation.prototype['repositories_url'] = undefined;

/**
 * Describe whether all repositories have been selected or there's a selection involved
 * @member {module:model/NullableScopedInstallation.RepositorySelectionEnum} repository_selection
 */
NullableScopedInstallation.prototype['repository_selection'] = undefined;

/**
 * @member {String} single_file_name
 */
NullableScopedInstallation.prototype['single_file_name'] = undefined;

/**
 * @member {Array.<String>} single_file_paths
 */
NullableScopedInstallation.prototype['single_file_paths'] = undefined;





/**
 * Allowed values for the <code>repository_selection</code> property.
 * @enum {String}
 * @readonly
 */
NullableScopedInstallation['RepositorySelectionEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "selected"
     * @const
     */
    "selected": "selected"
};



export default NullableScopedInstallation;

