/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizationWithUserUser from './AuthorizationWithUserUser';
import LegacyReviewCommentLinks from './LegacyReviewCommentLinks';

/**
 * The LegacyReviewComment model module.
 * @module model/LegacyReviewComment
 * @version 1.1.4
 */
class LegacyReviewComment {
    /**
     * Constructs a new <code>LegacyReviewComment</code>.
     * @alias module:model/LegacyReviewComment
     */
    constructor() { 
        
        LegacyReviewComment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegacyReviewComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegacyReviewComment} obj Optional instance to populate.
     * @return {module:model/LegacyReviewComment} The populated <code>LegacyReviewComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegacyReviewComment();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LegacyReviewCommentLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('diff_hunk')) {
                obj['diff_hunk'] = ApiClient.convertToType(data['diff_hunk'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('in_reply_to_id')) {
                obj['in_reply_to_id'] = ApiClient.convertToType(data['in_reply_to_id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('original_commit_id')) {
                obj['original_commit_id'] = ApiClient.convertToType(data['original_commit_id'], 'String');
            }
            if (data.hasOwnProperty('original_position')) {
                obj['original_position'] = ApiClient.convertToType(data['original_position'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('pull_request_review_id')) {
                obj['pull_request_review_id'] = ApiClient.convertToType(data['pull_request_review_id'], 'Number');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = AuthorizationWithUserUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegacyReviewComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegacyReviewComment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          LegacyReviewCommentLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['author_association'] && !(typeof data['author_association'] === 'string' || data['author_association'] instanceof String)) {
            throw new Error("Expected the field `author_association` to be a primitive type in the JSON string but got " + data['author_association']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['diff_hunk'] && !(typeof data['diff_hunk'] === 'string' || data['diff_hunk'] instanceof String)) {
            throw new Error("Expected the field `diff_hunk` to be a primitive type in the JSON string but got " + data['diff_hunk']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['original_commit_id'] && !(typeof data['original_commit_id'] === 'string' || data['original_commit_id'] instanceof String)) {
            throw new Error("Expected the field `original_commit_id` to be a primitive type in the JSON string but got " + data['original_commit_id']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          AuthorizationWithUserUser.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/LegacyReviewCommentLinks} _links
 */
LegacyReviewComment.prototype['_links'] = undefined;

/**
 * @member {String} author_association
 */
LegacyReviewComment.prototype['author_association'] = undefined;

/**
 * @member {String} body
 */
LegacyReviewComment.prototype['body'] = undefined;

/**
 * @member {String} commit_id
 */
LegacyReviewComment.prototype['commit_id'] = undefined;

/**
 * @member {String} created_at
 */
LegacyReviewComment.prototype['created_at'] = undefined;

/**
 * @member {String} diff_hunk
 */
LegacyReviewComment.prototype['diff_hunk'] = undefined;

/**
 * @member {String} html_url
 */
LegacyReviewComment.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
LegacyReviewComment.prototype['id'] = undefined;

/**
 * @member {Number} in_reply_to_id
 */
LegacyReviewComment.prototype['in_reply_to_id'] = undefined;

/**
 * @member {String} node_id
 */
LegacyReviewComment.prototype['node_id'] = undefined;

/**
 * @member {String} original_commit_id
 */
LegacyReviewComment.prototype['original_commit_id'] = undefined;

/**
 * @member {Number} original_position
 */
LegacyReviewComment.prototype['original_position'] = undefined;

/**
 * @member {String} path
 */
LegacyReviewComment.prototype['path'] = undefined;

/**
 * @member {Number} position
 */
LegacyReviewComment.prototype['position'] = undefined;

/**
 * @member {Number} pull_request_review_id
 */
LegacyReviewComment.prototype['pull_request_review_id'] = undefined;

/**
 * @member {String} pull_request_url
 */
LegacyReviewComment.prototype['pull_request_url'] = undefined;

/**
 * @member {String} updated_at
 */
LegacyReviewComment.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
LegacyReviewComment.prototype['url'] = undefined;

/**
 * @member {module:model/AuthorizationWithUserUser} user
 */
LegacyReviewComment.prototype['user'] = undefined;






export default LegacyReviewComment;

