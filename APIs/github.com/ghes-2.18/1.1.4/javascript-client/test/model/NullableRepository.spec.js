/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.NullableRepository();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NullableRepository', function() {
    it('should create an instance of NullableRepository', function() {
      // uncomment below and update the code to test NullableRepository
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be.a(GitHubV3RestApi.NullableRepository);
    });

    it('should have the property allowForking (base name: "allow_forking")', function() {
      // uncomment below and update the code to test the property allowForking
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property allowMergeCommit (base name: "allow_merge_commit")', function() {
      // uncomment below and update the code to test the property allowMergeCommit
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property allowRebaseMerge (base name: "allow_rebase_merge")', function() {
      // uncomment below and update the code to test the property allowRebaseMerge
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property allowSquashMerge (base name: "allow_squash_merge")', function() {
      // uncomment below and update the code to test the property allowSquashMerge
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property anonymousAccessEnabled (base name: "anonymous_access_enabled")', function() {
      // uncomment below and update the code to test the property anonymousAccessEnabled
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property archiveUrl (base name: "archive_url")', function() {
      // uncomment below and update the code to test the property archiveUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property archived (base name: "archived")', function() {
      // uncomment below and update the code to test the property archived
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property assigneesUrl (base name: "assignees_url")', function() {
      // uncomment below and update the code to test the property assigneesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property blobsUrl (base name: "blobs_url")', function() {
      // uncomment below and update the code to test the property blobsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property branchesUrl (base name: "branches_url")', function() {
      // uncomment below and update the code to test the property branchesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property cloneUrl (base name: "clone_url")', function() {
      // uncomment below and update the code to test the property cloneUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property collaboratorsUrl (base name: "collaborators_url")', function() {
      // uncomment below and update the code to test the property collaboratorsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property commentsUrl (base name: "comments_url")', function() {
      // uncomment below and update the code to test the property commentsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property commitsUrl (base name: "commits_url")', function() {
      // uncomment below and update the code to test the property commitsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property compareUrl (base name: "compare_url")', function() {
      // uncomment below and update the code to test the property compareUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property contentsUrl (base name: "contents_url")', function() {
      // uncomment below and update the code to test the property contentsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property contributorsUrl (base name: "contributors_url")', function() {
      // uncomment below and update the code to test the property contributorsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property defaultBranch (base name: "default_branch")', function() {
      // uncomment below and update the code to test the property defaultBranch
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property deploymentsUrl (base name: "deployments_url")', function() {
      // uncomment below and update the code to test the property deploymentsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property downloadsUrl (base name: "downloads_url")', function() {
      // uncomment below and update the code to test the property downloadsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property eventsUrl (base name: "events_url")', function() {
      // uncomment below and update the code to test the property eventsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property fork (base name: "fork")', function() {
      // uncomment below and update the code to test the property fork
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property forks (base name: "forks")', function() {
      // uncomment below and update the code to test the property forks
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property forksCount (base name: "forks_count")', function() {
      // uncomment below and update the code to test the property forksCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property forksUrl (base name: "forks_url")', function() {
      // uncomment below and update the code to test the property forksUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property fullName (base name: "full_name")', function() {
      // uncomment below and update the code to test the property fullName
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property gitCommitsUrl (base name: "git_commits_url")', function() {
      // uncomment below and update the code to test the property gitCommitsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property gitRefsUrl (base name: "git_refs_url")', function() {
      // uncomment below and update the code to test the property gitRefsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property gitTagsUrl (base name: "git_tags_url")', function() {
      // uncomment below and update the code to test the property gitTagsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property gitUrl (base name: "git_url")', function() {
      // uncomment below and update the code to test the property gitUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hasDownloads (base name: "has_downloads")', function() {
      // uncomment below and update the code to test the property hasDownloads
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hasIssues (base name: "has_issues")', function() {
      // uncomment below and update the code to test the property hasIssues
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hasPages (base name: "has_pages")', function() {
      // uncomment below and update the code to test the property hasPages
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hasProjects (base name: "has_projects")', function() {
      // uncomment below and update the code to test the property hasProjects
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hasWiki (base name: "has_wiki")', function() {
      // uncomment below and update the code to test the property hasWiki
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property homepage (base name: "homepage")', function() {
      // uncomment below and update the code to test the property homepage
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property hooksUrl (base name: "hooks_url")', function() {
      // uncomment below and update the code to test the property hooksUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property htmlUrl (base name: "html_url")', function() {
      // uncomment below and update the code to test the property htmlUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property isTemplate (base name: "is_template")', function() {
      // uncomment below and update the code to test the property isTemplate
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property issueCommentUrl (base name: "issue_comment_url")', function() {
      // uncomment below and update the code to test the property issueCommentUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property issueEventsUrl (base name: "issue_events_url")', function() {
      // uncomment below and update the code to test the property issueEventsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property issuesUrl (base name: "issues_url")', function() {
      // uncomment below and update the code to test the property issuesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property keysUrl (base name: "keys_url")', function() {
      // uncomment below and update the code to test the property keysUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property labelsUrl (base name: "labels_url")', function() {
      // uncomment below and update the code to test the property labelsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property languagesUrl (base name: "languages_url")', function() {
      // uncomment below and update the code to test the property languagesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property masterBranch (base name: "master_branch")', function() {
      // uncomment below and update the code to test the property masterBranch
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property mergesUrl (base name: "merges_url")', function() {
      // uncomment below and update the code to test the property mergesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property milestonesUrl (base name: "milestones_url")', function() {
      // uncomment below and update the code to test the property milestonesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property mirrorUrl (base name: "mirror_url")', function() {
      // uncomment below and update the code to test the property mirrorUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property networkCount (base name: "network_count")', function() {
      // uncomment below and update the code to test the property networkCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "node_id")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property notificationsUrl (base name: "notifications_url")', function() {
      // uncomment below and update the code to test the property notificationsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property openIssues (base name: "open_issues")', function() {
      // uncomment below and update the code to test the property openIssues
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property openIssuesCount (base name: "open_issues_count")', function() {
      // uncomment below and update the code to test the property openIssuesCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property _private (base name: "private")', function() {
      // uncomment below and update the code to test the property _private
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property pullsUrl (base name: "pulls_url")', function() {
      // uncomment below and update the code to test the property pullsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property pushedAt (base name: "pushed_at")', function() {
      // uncomment below and update the code to test the property pushedAt
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property releasesUrl (base name: "releases_url")', function() {
      // uncomment below and update the code to test the property releasesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property sshUrl (base name: "ssh_url")', function() {
      // uncomment below and update the code to test the property sshUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property stargazersCount (base name: "stargazers_count")', function() {
      // uncomment below and update the code to test the property stargazersCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property stargazersUrl (base name: "stargazers_url")', function() {
      // uncomment below and update the code to test the property stargazersUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property starredAt (base name: "starred_at")', function() {
      // uncomment below and update the code to test the property starredAt
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property statusesUrl (base name: "statuses_url")', function() {
      // uncomment below and update the code to test the property statusesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property subscribersCount (base name: "subscribers_count")', function() {
      // uncomment below and update the code to test the property subscribersCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property subscribersUrl (base name: "subscribers_url")', function() {
      // uncomment below and update the code to test the property subscribersUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionUrl (base name: "subscription_url")', function() {
      // uncomment below and update the code to test the property subscriptionUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property svnUrl (base name: "svn_url")', function() {
      // uncomment below and update the code to test the property svnUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property tagsUrl (base name: "tags_url")', function() {
      // uncomment below and update the code to test the property tagsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property teamsUrl (base name: "teams_url")', function() {
      // uncomment below and update the code to test the property teamsUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property templateRepository (base name: "template_repository")', function() {
      // uncomment below and update the code to test the property templateRepository
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property topics (base name: "topics")', function() {
      // uncomment below and update the code to test the property topics
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property treesUrl (base name: "trees_url")', function() {
      // uncomment below and update the code to test the property treesUrl
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property watchers (base name: "watchers")', function() {
      // uncomment below and update the code to test the property watchers
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

    it('should have the property watchersCount (base name: "watchers_count")', function() {
      // uncomment below and update the code to test the property watchersCount
      //var instance = new GitHubV3RestApi.NullableRepository();
      //expect(instance).to.be();
    });

  });

}));
