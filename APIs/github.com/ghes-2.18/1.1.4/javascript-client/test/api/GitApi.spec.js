/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.GitApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GitApi', function() {
    describe('gitCreateBlob', function() {
      it('should call gitCreateBlob successfully', function(done) {
        //uncomment below and update the code to test gitCreateBlob
        //instance.gitCreateBlob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitCreateCommit', function() {
      it('should call gitCreateCommit successfully', function(done) {
        //uncomment below and update the code to test gitCreateCommit
        //instance.gitCreateCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitCreateRef', function() {
      it('should call gitCreateRef successfully', function(done) {
        //uncomment below and update the code to test gitCreateRef
        //instance.gitCreateRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitCreateTag', function() {
      it('should call gitCreateTag successfully', function(done) {
        //uncomment below and update the code to test gitCreateTag
        //instance.gitCreateTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitCreateTree', function() {
      it('should call gitCreateTree successfully', function(done) {
        //uncomment below and update the code to test gitCreateTree
        //instance.gitCreateTree(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitDeleteRef', function() {
      it('should call gitDeleteRef successfully', function(done) {
        //uncomment below and update the code to test gitDeleteRef
        //instance.gitDeleteRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitGetAllRefs', function() {
      it('should call gitGetAllRefs successfully', function(done) {
        //uncomment below and update the code to test gitGetAllRefs
        //instance.gitGetAllRefs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitGetBlob', function() {
      it('should call gitGetBlob successfully', function(done) {
        //uncomment below and update the code to test gitGetBlob
        //instance.gitGetBlob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitGetCommit', function() {
      it('should call gitGetCommit successfully', function(done) {
        //uncomment below and update the code to test gitGetCommit
        //instance.gitGetCommit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitGetTag', function() {
      it('should call gitGetTag successfully', function(done) {
        //uncomment below and update the code to test gitGetTag
        //instance.gitGetTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitGetTree', function() {
      it('should call gitGetTree successfully', function(done) {
        //uncomment below and update the code to test gitGetTree
        //instance.gitGetTree(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gitUpdateRef', function() {
      it('should call gitUpdateRef successfully', function(done) {
        //uncomment below and update the code to test gitUpdateRef
        //instance.gitUpdateRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
