/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.ActivityApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ActivityApi', function() {
    describe('activityCheckRepoIsStarredByAuthenticatedUser', function() {
      it('should call activityCheckRepoIsStarredByAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityCheckRepoIsStarredByAuthenticatedUser
        //instance.activityCheckRepoIsStarredByAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityDeleteRepoSubscription', function() {
      it('should call activityDeleteRepoSubscription successfully', function(done) {
        //uncomment below and update the code to test activityDeleteRepoSubscription
        //instance.activityDeleteRepoSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityDeleteThreadSubscription', function() {
      it('should call activityDeleteThreadSubscription successfully', function(done) {
        //uncomment below and update the code to test activityDeleteThreadSubscription
        //instance.activityDeleteThreadSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityGetFeeds', function() {
      it('should call activityGetFeeds successfully', function(done) {
        //uncomment below and update the code to test activityGetFeeds
        //instance.activityGetFeeds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityGetRepoSubscription', function() {
      it('should call activityGetRepoSubscription successfully', function(done) {
        //uncomment below and update the code to test activityGetRepoSubscription
        //instance.activityGetRepoSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityGetThread', function() {
      it('should call activityGetThread successfully', function(done) {
        //uncomment below and update the code to test activityGetThread
        //instance.activityGetThread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityGetThreadSubscriptionForAuthenticatedUser', function() {
      it('should call activityGetThreadSubscriptionForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityGetThreadSubscriptionForAuthenticatedUser
        //instance.activityGetThreadSubscriptionForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListEventsForAuthenticatedUser', function() {
      it('should call activityListEventsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListEventsForAuthenticatedUser
        //instance.activityListEventsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListNotificationsForAuthenticatedUser', function() {
      it('should call activityListNotificationsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListNotificationsForAuthenticatedUser
        //instance.activityListNotificationsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListOrgEventsForAuthenticatedUser', function() {
      it('should call activityListOrgEventsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListOrgEventsForAuthenticatedUser
        //instance.activityListOrgEventsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListPublicEvents', function() {
      it('should call activityListPublicEvents successfully', function(done) {
        //uncomment below and update the code to test activityListPublicEvents
        //instance.activityListPublicEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListPublicEventsForRepoNetwork', function() {
      it('should call activityListPublicEventsForRepoNetwork successfully', function(done) {
        //uncomment below and update the code to test activityListPublicEventsForRepoNetwork
        //instance.activityListPublicEventsForRepoNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListPublicEventsForUser', function() {
      it('should call activityListPublicEventsForUser successfully', function(done) {
        //uncomment below and update the code to test activityListPublicEventsForUser
        //instance.activityListPublicEventsForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListPublicOrgEvents', function() {
      it('should call activityListPublicOrgEvents successfully', function(done) {
        //uncomment below and update the code to test activityListPublicOrgEvents
        //instance.activityListPublicOrgEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListReceivedEventsForUser', function() {
      it('should call activityListReceivedEventsForUser successfully', function(done) {
        //uncomment below and update the code to test activityListReceivedEventsForUser
        //instance.activityListReceivedEventsForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListReceivedPublicEventsForUser', function() {
      it('should call activityListReceivedPublicEventsForUser successfully', function(done) {
        //uncomment below and update the code to test activityListReceivedPublicEventsForUser
        //instance.activityListReceivedPublicEventsForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListRepoEvents', function() {
      it('should call activityListRepoEvents successfully', function(done) {
        //uncomment below and update the code to test activityListRepoEvents
        //instance.activityListRepoEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListRepoNotificationsForAuthenticatedUser', function() {
      it('should call activityListRepoNotificationsForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListRepoNotificationsForAuthenticatedUser
        //instance.activityListRepoNotificationsForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListReposStarredByAuthenticatedUser', function() {
      it('should call activityListReposStarredByAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListReposStarredByAuthenticatedUser
        //instance.activityListReposStarredByAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListReposStarredByUser', function() {
      it('should call activityListReposStarredByUser successfully', function(done) {
        //uncomment below and update the code to test activityListReposStarredByUser
        //instance.activityListReposStarredByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListReposWatchedByUser', function() {
      it('should call activityListReposWatchedByUser successfully', function(done) {
        //uncomment below and update the code to test activityListReposWatchedByUser
        //instance.activityListReposWatchedByUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListStargazersForRepo', function() {
      it('should call activityListStargazersForRepo successfully', function(done) {
        //uncomment below and update the code to test activityListStargazersForRepo
        //instance.activityListStargazersForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListWatchedReposForAuthenticatedUser', function() {
      it('should call activityListWatchedReposForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityListWatchedReposForAuthenticatedUser
        //instance.activityListWatchedReposForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityListWatchersForRepo', function() {
      it('should call activityListWatchersForRepo successfully', function(done) {
        //uncomment below and update the code to test activityListWatchersForRepo
        //instance.activityListWatchersForRepo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityMarkNotificationsAsRead', function() {
      it('should call activityMarkNotificationsAsRead successfully', function(done) {
        //uncomment below and update the code to test activityMarkNotificationsAsRead
        //instance.activityMarkNotificationsAsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityMarkRepoNotificationsAsRead', function() {
      it('should call activityMarkRepoNotificationsAsRead successfully', function(done) {
        //uncomment below and update the code to test activityMarkRepoNotificationsAsRead
        //instance.activityMarkRepoNotificationsAsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityMarkThreadAsRead', function() {
      it('should call activityMarkThreadAsRead successfully', function(done) {
        //uncomment below and update the code to test activityMarkThreadAsRead
        //instance.activityMarkThreadAsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activitySetRepoSubscription', function() {
      it('should call activitySetRepoSubscription successfully', function(done) {
        //uncomment below and update the code to test activitySetRepoSubscription
        //instance.activitySetRepoSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activitySetThreadSubscription', function() {
      it('should call activitySetThreadSubscription successfully', function(done) {
        //uncomment below and update the code to test activitySetThreadSubscription
        //instance.activitySetThreadSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityStarRepoForAuthenticatedUser', function() {
      it('should call activityStarRepoForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityStarRepoForAuthenticatedUser
        //instance.activityStarRepoForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activityUnstarRepoForAuthenticatedUser', function() {
      it('should call activityUnstarRepoForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test activityUnstarRepoForAuthenticatedUser
        //instance.activityUnstarRepoForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
