/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitHubV3RestApi);
  }
}(this, function(expect, GitHubV3RestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitHubV3RestApi.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('usersAddEmailForAuthenticated', function() {
      it('should call usersAddEmailForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersAddEmailForAuthenticated
        //instance.usersAddEmailForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCheckFollowingForUser', function() {
      it('should call usersCheckFollowingForUser successfully', function(done) {
        //uncomment below and update the code to test usersCheckFollowingForUser
        //instance.usersCheckFollowingForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCheckPersonIsFollowedByAuthenticated', function() {
      it('should call usersCheckPersonIsFollowedByAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersCheckPersonIsFollowedByAuthenticated
        //instance.usersCheckPersonIsFollowedByAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCreateGpgKeyForAuthenticated', function() {
      it('should call usersCreateGpgKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersCreateGpgKeyForAuthenticated
        //instance.usersCreateGpgKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersCreatePublicSshKeyForAuthenticated', function() {
      it('should call usersCreatePublicSshKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersCreatePublicSshKeyForAuthenticated
        //instance.usersCreatePublicSshKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteEmailForAuthenticated', function() {
      it('should call usersDeleteEmailForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersDeleteEmailForAuthenticated
        //instance.usersDeleteEmailForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteGpgKeyForAuthenticated', function() {
      it('should call usersDeleteGpgKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersDeleteGpgKeyForAuthenticated
        //instance.usersDeleteGpgKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeletePublicSshKeyForAuthenticated', function() {
      it('should call usersDeletePublicSshKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersDeletePublicSshKeyForAuthenticated
        //instance.usersDeletePublicSshKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersFollow', function() {
      it('should call usersFollow successfully', function(done) {
        //uncomment below and update the code to test usersFollow
        //instance.usersFollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetAuthenticated', function() {
      it('should call usersGetAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersGetAuthenticated
        //instance.usersGetAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetByUsername', function() {
      it('should call usersGetByUsername successfully', function(done) {
        //uncomment below and update the code to test usersGetByUsername
        //instance.usersGetByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetContextForUser', function() {
      it('should call usersGetContextForUser successfully', function(done) {
        //uncomment below and update the code to test usersGetContextForUser
        //instance.usersGetContextForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetGpgKeyForAuthenticated', function() {
      it('should call usersGetGpgKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersGetGpgKeyForAuthenticated
        //instance.usersGetGpgKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetPublicSshKeyForAuthenticated', function() {
      it('should call usersGetPublicSshKeyForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersGetPublicSshKeyForAuthenticated
        //instance.usersGetPublicSshKeyForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersList', function() {
      it('should call usersList successfully', function(done) {
        //uncomment below and update the code to test usersList
        //instance.usersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListEmailsForAuthenticated', function() {
      it('should call usersListEmailsForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersListEmailsForAuthenticated
        //instance.usersListEmailsForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowedByAuthenticated', function() {
      it('should call usersListFollowedByAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersListFollowedByAuthenticated
        //instance.usersListFollowedByAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowersForAuthenticatedUser', function() {
      it('should call usersListFollowersForAuthenticatedUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowersForAuthenticatedUser
        //instance.usersListFollowersForAuthenticatedUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowersForUser', function() {
      it('should call usersListFollowersForUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowersForUser
        //instance.usersListFollowersForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListFollowingForUser', function() {
      it('should call usersListFollowingForUser successfully', function(done) {
        //uncomment below and update the code to test usersListFollowingForUser
        //instance.usersListFollowingForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListGpgKeysForAuthenticated', function() {
      it('should call usersListGpgKeysForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersListGpgKeysForAuthenticated
        //instance.usersListGpgKeysForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListGpgKeysForUser', function() {
      it('should call usersListGpgKeysForUser successfully', function(done) {
        //uncomment below and update the code to test usersListGpgKeysForUser
        //instance.usersListGpgKeysForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicEmailsForAuthenticated', function() {
      it('should call usersListPublicEmailsForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersListPublicEmailsForAuthenticated
        //instance.usersListPublicEmailsForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicKeysForUser', function() {
      it('should call usersListPublicKeysForUser successfully', function(done) {
        //uncomment below and update the code to test usersListPublicKeysForUser
        //instance.usersListPublicKeysForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersListPublicSshKeysForAuthenticated', function() {
      it('should call usersListPublicSshKeysForAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersListPublicSshKeysForAuthenticated
        //instance.usersListPublicSshKeysForAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUnfollow', function() {
      it('should call usersUnfollow successfully', function(done) {
        //uncomment below and update the code to test usersUnfollow
        //instance.usersUnfollow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUpdateAuthenticated', function() {
      it('should call usersUpdateAuthenticated successfully', function(done) {
        //uncomment below and update the code to test usersUpdateAuthenticated
        //instance.usersUpdateAuthenticated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
