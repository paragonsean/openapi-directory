/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorization_with_user_app.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorization_with_user_app::OAIAuthorization_with_user_app(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorization_with_user_app::OAIAuthorization_with_user_app() {
    this->initializeModel();
}

OAIAuthorization_with_user_app::~OAIAuthorization_with_user_app() {}

void OAIAuthorization_with_user_app::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAuthorization_with_user_app::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorization_with_user_app::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAuthorization_with_user_app::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorization_with_user_app::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAuthorization_with_user_app::getClientId() const {
    return m_client_id;
}
void OAIAuthorization_with_user_app::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAuthorization_with_user_app::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAuthorization_with_user_app::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAuthorization_with_user_app::getName() const {
    return m_name;
}
void OAIAuthorization_with_user_app::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthorization_with_user_app::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthorization_with_user_app::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAuthorization_with_user_app::getUrl() const {
    return m_url;
}
void OAIAuthorization_with_user_app::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAuthorization_with_user_app::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAuthorization_with_user_app::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAuthorization_with_user_app::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorization_with_user_app::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
