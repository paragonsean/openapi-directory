/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReaction_rollup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReaction_rollup::OAIReaction_rollup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReaction_rollup::OAIReaction_rollup() {
    this->initializeModel();
}

OAIReaction_rollup::~OAIReaction_rollup() {}

void OAIReaction_rollup::initializeModel() {

    m_r_1_isSet = false;
    m_r_1_isValid = false;

    m__1_isSet = false;
    m__1_isValid = false;

    m_confused_isSet = false;
    m_confused_isValid = false;

    m_eyes_isSet = false;
    m_eyes_isValid = false;

    m_heart_isSet = false;
    m_heart_isValid = false;

    m_hooray_isSet = false;
    m_hooray_isValid = false;

    m_laugh_isSet = false;
    m_laugh_isValid = false;

    m_rocket_isSet = false;
    m_rocket_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIReaction_rollup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReaction_rollup::fromJsonObject(QJsonObject json) {

    m_r_1_isValid = ::OpenAPI::fromJsonValue(m_r_1, json[QString("+1")]);
    m_r_1_isSet = !json[QString("+1")].isNull() && m_r_1_isValid;

    m__1_isValid = ::OpenAPI::fromJsonValue(m__1, json[QString("-1")]);
    m__1_isSet = !json[QString("-1")].isNull() && m__1_isValid;

    m_confused_isValid = ::OpenAPI::fromJsonValue(m_confused, json[QString("confused")]);
    m_confused_isSet = !json[QString("confused")].isNull() && m_confused_isValid;

    m_eyes_isValid = ::OpenAPI::fromJsonValue(m_eyes, json[QString("eyes")]);
    m_eyes_isSet = !json[QString("eyes")].isNull() && m_eyes_isValid;

    m_heart_isValid = ::OpenAPI::fromJsonValue(m_heart, json[QString("heart")]);
    m_heart_isSet = !json[QString("heart")].isNull() && m_heart_isValid;

    m_hooray_isValid = ::OpenAPI::fromJsonValue(m_hooray, json[QString("hooray")]);
    m_hooray_isSet = !json[QString("hooray")].isNull() && m_hooray_isValid;

    m_laugh_isValid = ::OpenAPI::fromJsonValue(m_laugh, json[QString("laugh")]);
    m_laugh_isSet = !json[QString("laugh")].isNull() && m_laugh_isValid;

    m_rocket_isValid = ::OpenAPI::fromJsonValue(m_rocket, json[QString("rocket")]);
    m_rocket_isSet = !json[QString("rocket")].isNull() && m_rocket_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIReaction_rollup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReaction_rollup::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1_isSet) {
        obj.insert(QString("+1"), ::OpenAPI::toJsonValue(m_r_1));
    }
    if (m__1_isSet) {
        obj.insert(QString("-1"), ::OpenAPI::toJsonValue(m__1));
    }
    if (m_confused_isSet) {
        obj.insert(QString("confused"), ::OpenAPI::toJsonValue(m_confused));
    }
    if (m_eyes_isSet) {
        obj.insert(QString("eyes"), ::OpenAPI::toJsonValue(m_eyes));
    }
    if (m_heart_isSet) {
        obj.insert(QString("heart"), ::OpenAPI::toJsonValue(m_heart));
    }
    if (m_hooray_isSet) {
        obj.insert(QString("hooray"), ::OpenAPI::toJsonValue(m_hooray));
    }
    if (m_laugh_isSet) {
        obj.insert(QString("laugh"), ::OpenAPI::toJsonValue(m_laugh));
    }
    if (m_rocket_isSet) {
        obj.insert(QString("rocket"), ::OpenAPI::toJsonValue(m_rocket));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint32 OAIReaction_rollup::getR1() const {
    return m_r_1;
}
void OAIReaction_rollup::setR1(const qint32 &r_1) {
    m_r_1 = r_1;
    m_r_1_isSet = true;
}

bool OAIReaction_rollup::is_r_1_Set() const{
    return m_r_1_isSet;
}

bool OAIReaction_rollup::is_r_1_Valid() const{
    return m_r_1_isValid;
}

qint32 OAIReaction_rollup::get1() const {
    return m__1;
}
void OAIReaction_rollup::set1(const qint32 &_1) {
    m__1 = _1;
    m__1_isSet = true;
}

bool OAIReaction_rollup::is__1_Set() const{
    return m__1_isSet;
}

bool OAIReaction_rollup::is__1_Valid() const{
    return m__1_isValid;
}

qint32 OAIReaction_rollup::getConfused() const {
    return m_confused;
}
void OAIReaction_rollup::setConfused(const qint32 &confused) {
    m_confused = confused;
    m_confused_isSet = true;
}

bool OAIReaction_rollup::is_confused_Set() const{
    return m_confused_isSet;
}

bool OAIReaction_rollup::is_confused_Valid() const{
    return m_confused_isValid;
}

qint32 OAIReaction_rollup::getEyes() const {
    return m_eyes;
}
void OAIReaction_rollup::setEyes(const qint32 &eyes) {
    m_eyes = eyes;
    m_eyes_isSet = true;
}

bool OAIReaction_rollup::is_eyes_Set() const{
    return m_eyes_isSet;
}

bool OAIReaction_rollup::is_eyes_Valid() const{
    return m_eyes_isValid;
}

qint32 OAIReaction_rollup::getHeart() const {
    return m_heart;
}
void OAIReaction_rollup::setHeart(const qint32 &heart) {
    m_heart = heart;
    m_heart_isSet = true;
}

bool OAIReaction_rollup::is_heart_Set() const{
    return m_heart_isSet;
}

bool OAIReaction_rollup::is_heart_Valid() const{
    return m_heart_isValid;
}

qint32 OAIReaction_rollup::getHooray() const {
    return m_hooray;
}
void OAIReaction_rollup::setHooray(const qint32 &hooray) {
    m_hooray = hooray;
    m_hooray_isSet = true;
}

bool OAIReaction_rollup::is_hooray_Set() const{
    return m_hooray_isSet;
}

bool OAIReaction_rollup::is_hooray_Valid() const{
    return m_hooray_isValid;
}

qint32 OAIReaction_rollup::getLaugh() const {
    return m_laugh;
}
void OAIReaction_rollup::setLaugh(const qint32 &laugh) {
    m_laugh = laugh;
    m_laugh_isSet = true;
}

bool OAIReaction_rollup::is_laugh_Set() const{
    return m_laugh_isSet;
}

bool OAIReaction_rollup::is_laugh_Valid() const{
    return m_laugh_isValid;
}

qint32 OAIReaction_rollup::getRocket() const {
    return m_rocket;
}
void OAIReaction_rollup::setRocket(const qint32 &rocket) {
    m_rocket = rocket;
    m_rocket_isSet = true;
}

bool OAIReaction_rollup::is_rocket_Set() const{
    return m_rocket_isSet;
}

bool OAIReaction_rollup::is_rocket_Valid() const{
    return m_rocket_isValid;
}

qint32 OAIReaction_rollup::getTotalCount() const {
    return m_total_count;
}
void OAIReaction_rollup::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIReaction_rollup::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIReaction_rollup::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAIReaction_rollup::getUrl() const {
    return m_url;
}
void OAIReaction_rollup::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReaction_rollup::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReaction_rollup::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIReaction_rollup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eyes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooray_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_laugh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rocket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReaction_rollup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_1_isValid && m__1_isValid && m_confused_isValid && m_eyes_isValid && m_heart_isValid && m_hooray_isValid && m_laugh_isValid && m_rocket_isValid && m_total_count_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
