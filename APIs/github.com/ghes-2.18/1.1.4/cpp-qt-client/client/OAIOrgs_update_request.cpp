/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgs_update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgs_update_request::OAIOrgs_update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgs_update_request::OAIOrgs_update_request() {
    this->initializeModel();
}

OAIOrgs_update_request::~OAIOrgs_update_request() {}

void OAIOrgs_update_request::initializeModel() {

    m_billing_email_isSet = false;
    m_billing_email_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_default_repository_permission_isSet = false;
    m_default_repository_permission_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_has_organization_projects_isSet = false;
    m_has_organization_projects_isValid = false;

    m_has_repository_projects_isSet = false;
    m_has_repository_projects_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_members_allowed_repository_creation_type_isSet = false;
    m_members_allowed_repository_creation_type_isValid = false;

    m_members_can_create_internal_repositories_isSet = false;
    m_members_can_create_internal_repositories_isValid = false;

    m_members_can_create_private_repositories_isSet = false;
    m_members_can_create_private_repositories_isValid = false;

    m_members_can_create_public_repositories_isSet = false;
    m_members_can_create_public_repositories_isValid = false;

    m_members_can_create_repositories_isSet = false;
    m_members_can_create_repositories_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_twitter_username_isSet = false;
    m_twitter_username_isValid = false;
}

void OAIOrgs_update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgs_update_request::fromJsonObject(QJsonObject json) {

    m_billing_email_isValid = ::OpenAPI::fromJsonValue(m_billing_email, json[QString("billing_email")]);
    m_billing_email_isSet = !json[QString("billing_email")].isNull() && m_billing_email_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_default_repository_permission_isValid = ::OpenAPI::fromJsonValue(m_default_repository_permission, json[QString("default_repository_permission")]);
    m_default_repository_permission_isSet = !json[QString("default_repository_permission")].isNull() && m_default_repository_permission_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_has_organization_projects_isValid = ::OpenAPI::fromJsonValue(m_has_organization_projects, json[QString("has_organization_projects")]);
    m_has_organization_projects_isSet = !json[QString("has_organization_projects")].isNull() && m_has_organization_projects_isValid;

    m_has_repository_projects_isValid = ::OpenAPI::fromJsonValue(m_has_repository_projects, json[QString("has_repository_projects")]);
    m_has_repository_projects_isSet = !json[QString("has_repository_projects")].isNull() && m_has_repository_projects_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_members_allowed_repository_creation_type_isValid = ::OpenAPI::fromJsonValue(m_members_allowed_repository_creation_type, json[QString("members_allowed_repository_creation_type")]);
    m_members_allowed_repository_creation_type_isSet = !json[QString("members_allowed_repository_creation_type")].isNull() && m_members_allowed_repository_creation_type_isValid;

    m_members_can_create_internal_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_internal_repositories, json[QString("members_can_create_internal_repositories")]);
    m_members_can_create_internal_repositories_isSet = !json[QString("members_can_create_internal_repositories")].isNull() && m_members_can_create_internal_repositories_isValid;

    m_members_can_create_private_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_private_repositories, json[QString("members_can_create_private_repositories")]);
    m_members_can_create_private_repositories_isSet = !json[QString("members_can_create_private_repositories")].isNull() && m_members_can_create_private_repositories_isValid;

    m_members_can_create_public_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_public_repositories, json[QString("members_can_create_public_repositories")]);
    m_members_can_create_public_repositories_isSet = !json[QString("members_can_create_public_repositories")].isNull() && m_members_can_create_public_repositories_isValid;

    m_members_can_create_repositories_isValid = ::OpenAPI::fromJsonValue(m_members_can_create_repositories, json[QString("members_can_create_repositories")]);
    m_members_can_create_repositories_isSet = !json[QString("members_can_create_repositories")].isNull() && m_members_can_create_repositories_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_twitter_username_isValid = ::OpenAPI::fromJsonValue(m_twitter_username, json[QString("twitter_username")]);
    m_twitter_username_isSet = !json[QString("twitter_username")].isNull() && m_twitter_username_isValid;
}

QString OAIOrgs_update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgs_update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_email_isSet) {
        obj.insert(QString("billing_email"), ::OpenAPI::toJsonValue(m_billing_email));
    }
    if (m_blog_isSet) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_default_repository_permission_isSet) {
        obj.insert(QString("default_repository_permission"), ::OpenAPI::toJsonValue(m_default_repository_permission));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_has_organization_projects_isSet) {
        obj.insert(QString("has_organization_projects"), ::OpenAPI::toJsonValue(m_has_organization_projects));
    }
    if (m_has_repository_projects_isSet) {
        obj.insert(QString("has_repository_projects"), ::OpenAPI::toJsonValue(m_has_repository_projects));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_members_allowed_repository_creation_type_isSet) {
        obj.insert(QString("members_allowed_repository_creation_type"), ::OpenAPI::toJsonValue(m_members_allowed_repository_creation_type));
    }
    if (m_members_can_create_internal_repositories_isSet) {
        obj.insert(QString("members_can_create_internal_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_internal_repositories));
    }
    if (m_members_can_create_private_repositories_isSet) {
        obj.insert(QString("members_can_create_private_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_private_repositories));
    }
    if (m_members_can_create_public_repositories_isSet) {
        obj.insert(QString("members_can_create_public_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_public_repositories));
    }
    if (m_members_can_create_repositories_isSet) {
        obj.insert(QString("members_can_create_repositories"), ::OpenAPI::toJsonValue(m_members_can_create_repositories));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_twitter_username_isSet) {
        obj.insert(QString("twitter_username"), ::OpenAPI::toJsonValue(m_twitter_username));
    }
    return obj;
}

QString OAIOrgs_update_request::getBillingEmail() const {
    return m_billing_email;
}
void OAIOrgs_update_request::setBillingEmail(const QString &billing_email) {
    m_billing_email = billing_email;
    m_billing_email_isSet = true;
}

bool OAIOrgs_update_request::is_billing_email_Set() const{
    return m_billing_email_isSet;
}

bool OAIOrgs_update_request::is_billing_email_Valid() const{
    return m_billing_email_isValid;
}

QString OAIOrgs_update_request::getBlog() const {
    return m_blog;
}
void OAIOrgs_update_request::setBlog(const QString &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIOrgs_update_request::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIOrgs_update_request::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIOrgs_update_request::getCompany() const {
    return m_company;
}
void OAIOrgs_update_request::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIOrgs_update_request::is_company_Set() const{
    return m_company_isSet;
}

bool OAIOrgs_update_request::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIOrgs_update_request::getDefaultRepositoryPermission() const {
    return m_default_repository_permission;
}
void OAIOrgs_update_request::setDefaultRepositoryPermission(const QString &default_repository_permission) {
    m_default_repository_permission = default_repository_permission;
    m_default_repository_permission_isSet = true;
}

bool OAIOrgs_update_request::is_default_repository_permission_Set() const{
    return m_default_repository_permission_isSet;
}

bool OAIOrgs_update_request::is_default_repository_permission_Valid() const{
    return m_default_repository_permission_isValid;
}

QString OAIOrgs_update_request::getDescription() const {
    return m_description;
}
void OAIOrgs_update_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrgs_update_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrgs_update_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOrgs_update_request::getEmail() const {
    return m_email;
}
void OAIOrgs_update_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrgs_update_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrgs_update_request::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIOrgs_update_request::isHasOrganizationProjects() const {
    return m_has_organization_projects;
}
void OAIOrgs_update_request::setHasOrganizationProjects(const bool &has_organization_projects) {
    m_has_organization_projects = has_organization_projects;
    m_has_organization_projects_isSet = true;
}

bool OAIOrgs_update_request::is_has_organization_projects_Set() const{
    return m_has_organization_projects_isSet;
}

bool OAIOrgs_update_request::is_has_organization_projects_Valid() const{
    return m_has_organization_projects_isValid;
}

bool OAIOrgs_update_request::isHasRepositoryProjects() const {
    return m_has_repository_projects;
}
void OAIOrgs_update_request::setHasRepositoryProjects(const bool &has_repository_projects) {
    m_has_repository_projects = has_repository_projects;
    m_has_repository_projects_isSet = true;
}

bool OAIOrgs_update_request::is_has_repository_projects_Set() const{
    return m_has_repository_projects_isSet;
}

bool OAIOrgs_update_request::is_has_repository_projects_Valid() const{
    return m_has_repository_projects_isValid;
}

QString OAIOrgs_update_request::getLocation() const {
    return m_location;
}
void OAIOrgs_update_request::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIOrgs_update_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAIOrgs_update_request::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIOrgs_update_request::getMembersAllowedRepositoryCreationType() const {
    return m_members_allowed_repository_creation_type;
}
void OAIOrgs_update_request::setMembersAllowedRepositoryCreationType(const QString &members_allowed_repository_creation_type) {
    m_members_allowed_repository_creation_type = members_allowed_repository_creation_type;
    m_members_allowed_repository_creation_type_isSet = true;
}

bool OAIOrgs_update_request::is_members_allowed_repository_creation_type_Set() const{
    return m_members_allowed_repository_creation_type_isSet;
}

bool OAIOrgs_update_request::is_members_allowed_repository_creation_type_Valid() const{
    return m_members_allowed_repository_creation_type_isValid;
}

bool OAIOrgs_update_request::isMembersCanCreateInternalRepositories() const {
    return m_members_can_create_internal_repositories;
}
void OAIOrgs_update_request::setMembersCanCreateInternalRepositories(const bool &members_can_create_internal_repositories) {
    m_members_can_create_internal_repositories = members_can_create_internal_repositories;
    m_members_can_create_internal_repositories_isSet = true;
}

bool OAIOrgs_update_request::is_members_can_create_internal_repositories_Set() const{
    return m_members_can_create_internal_repositories_isSet;
}

bool OAIOrgs_update_request::is_members_can_create_internal_repositories_Valid() const{
    return m_members_can_create_internal_repositories_isValid;
}

bool OAIOrgs_update_request::isMembersCanCreatePrivateRepositories() const {
    return m_members_can_create_private_repositories;
}
void OAIOrgs_update_request::setMembersCanCreatePrivateRepositories(const bool &members_can_create_private_repositories) {
    m_members_can_create_private_repositories = members_can_create_private_repositories;
    m_members_can_create_private_repositories_isSet = true;
}

bool OAIOrgs_update_request::is_members_can_create_private_repositories_Set() const{
    return m_members_can_create_private_repositories_isSet;
}

bool OAIOrgs_update_request::is_members_can_create_private_repositories_Valid() const{
    return m_members_can_create_private_repositories_isValid;
}

bool OAIOrgs_update_request::isMembersCanCreatePublicRepositories() const {
    return m_members_can_create_public_repositories;
}
void OAIOrgs_update_request::setMembersCanCreatePublicRepositories(const bool &members_can_create_public_repositories) {
    m_members_can_create_public_repositories = members_can_create_public_repositories;
    m_members_can_create_public_repositories_isSet = true;
}

bool OAIOrgs_update_request::is_members_can_create_public_repositories_Set() const{
    return m_members_can_create_public_repositories_isSet;
}

bool OAIOrgs_update_request::is_members_can_create_public_repositories_Valid() const{
    return m_members_can_create_public_repositories_isValid;
}

bool OAIOrgs_update_request::isMembersCanCreateRepositories() const {
    return m_members_can_create_repositories;
}
void OAIOrgs_update_request::setMembersCanCreateRepositories(const bool &members_can_create_repositories) {
    m_members_can_create_repositories = members_can_create_repositories;
    m_members_can_create_repositories_isSet = true;
}

bool OAIOrgs_update_request::is_members_can_create_repositories_Set() const{
    return m_members_can_create_repositories_isSet;
}

bool OAIOrgs_update_request::is_members_can_create_repositories_Valid() const{
    return m_members_can_create_repositories_isValid;
}

QString OAIOrgs_update_request::getName() const {
    return m_name;
}
void OAIOrgs_update_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrgs_update_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrgs_update_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrgs_update_request::getTwitterUsername() const {
    return m_twitter_username;
}
void OAIOrgs_update_request::setTwitterUsername(const QString &twitter_username) {
    m_twitter_username = twitter_username;
    m_twitter_username_isSet = true;
}

bool OAIOrgs_update_request::is_twitter_username_Set() const{
    return m_twitter_username_isSet;
}

bool OAIOrgs_update_request::is_twitter_username_Valid() const{
    return m_twitter_username_isValid;
}

bool OAIOrgs_update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_repository_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_organization_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_repository_projects_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_allowed_repository_creation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_internal_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_private_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_public_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members_can_create_repositories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgs_update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
