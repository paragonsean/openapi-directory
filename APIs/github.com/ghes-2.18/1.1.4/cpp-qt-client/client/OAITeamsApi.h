/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIFull_repository.h"
#include "OAIMinimal_repository.h"
#include "OAIOrgs_remove_outside_collaborator_422_response.h"
#include "OAISimple_user.h"
#include "OAITeam.h"
#include "OAITeam_2.h"
#include "OAITeam_discussion.h"
#include "OAITeam_discussion_comment.h"
#include "OAITeam_full.h"
#include "OAITeam_membership.h"
#include "OAITeam_project.h"
#include "OAITeams_add_or_update_membership_for_user_request.h"
#include "OAITeams_add_or_update_project_permissions_request.h"
#include "OAITeams_add_or_update_repo_permissions_request.h"
#include "OAITeams_create_discussion_comment_request.h"
#include "OAITeams_create_discussion_request.h"
#include "OAITeams_create_request.h"
#include "OAITeams_update_discussion_request.h"
#include "OAITeams_update_request.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_addMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_teams_add_or_update_membership_for_user_request OAITeams_add_or_update_membership_for_user_request [optional]
    */
    virtual void teams_addOrUpdateMembershipForUser(const qint32 &team_id, const QString &username, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_request> &oai_teams_add_or_update_membership_for_user_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_membership_for_user_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    * @param[in]  oai_teams_add_or_update_project_permissions_request OAITeams_add_or_update_project_permissions_request [optional]
    */
    virtual void teams_addOrUpdateProjectPermissions(const QString &accept, const qint32 &team_id, const qint32 &project_id, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_request> &oai_teams_add_or_update_project_permissions_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_project_permissions_request>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_teams_add_or_update_repo_permissions_request OAITeams_add_or_update_repo_permissions_request [optional]
    */
    virtual void teams_addOrUpdateRepoPermissions(const qint32 &team_id, const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_request> &oai_teams_add_or_update_repo_permissions_request = ::OpenAPI::OptionalParam<OAITeams_add_or_update_repo_permissions_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    */
    virtual void teams_checkPermissionsForProject(const QString &accept, const qint32 &team_id, const qint32 &project_id);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void teams_checkPermissionsForRepo(const qint32 &team_id, const QString &owner, const QString &repo);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_teams_create_request OAITeams_create_request [required]
    */
    virtual void teams_create(const QString &org, const OAITeams_create_request &oai_teams_create_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  oai_teams_create_discussion_request OAITeams_create_discussion_request [required]
    */
    virtual void teams_createDiscussion(const QString &accept, const qint32 &team_id, const OAITeams_create_discussion_request &oai_teams_create_discussion_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_request OAITeams_create_discussion_comment_request [required]
    */
    virtual void teams_createDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const OAITeams_create_discussion_comment_request &oai_teams_create_discussion_comment_request);

    /**
    * @param[in]  team_id qint32 [required]
    */
    virtual void teams_delete(const qint32 &team_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    */
    virtual void teams_deleteDiscussion(const QString &accept, const qint32 &team_id, const qint32 &discussion_number);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    virtual void teams_deleteDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  team_id qint32 [required]
    */
    virtual void teams_get(const qint32 &team_id);

    /**
    * @param[in]  org QString [required]
    * @param[in]  team_slug QString [required]
    */
    virtual void teams_getByName(const QString &org, const QString &team_slug);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    */
    virtual void teams_getDiscussion(const QString &accept, const qint32 &team_id, const qint32 &discussion_number);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    */
    virtual void teams_getDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_getMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    virtual void teams_getMembershipForUser(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  org QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_list(const QString &org, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listChild(const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listDiscussionComments(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listDiscussions(const QString &accept, const qint32 &team_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listForAuthenticatedUser(const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  role QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listMembers(const qint32 &team_id, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listProjects(const QString &accept, const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void teams_listRepos(const qint32 &team_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void teams_removeMemberLegacy(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  username QString [required]
    */
    virtual void teams_removeMembershipForUser(const qint32 &team_id, const QString &username);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  project_id qint32 [required]
    */
    virtual void teams_removeProject(const qint32 &team_id, const qint32 &project_id);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void teams_removeRepo(const qint32 &team_id, const QString &owner, const QString &repo);

    /**
    * @param[in]  team_id qint32 [required]
    * @param[in]  oai_teams_update_request OAITeams_update_request [optional]
    */
    virtual void teams_update(const qint32 &team_id, const ::OpenAPI::OptionalParam<OAITeams_update_request> &oai_teams_update_request = ::OpenAPI::OptionalParam<OAITeams_update_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  oai_teams_update_discussion_request OAITeams_update_discussion_request [optional]
    */
    virtual void teams_updateDiscussion(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const ::OpenAPI::OptionalParam<OAITeams_update_discussion_request> &oai_teams_update_discussion_request = ::OpenAPI::OptionalParam<OAITeams_update_discussion_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  team_id qint32 [required]
    * @param[in]  discussion_number qint32 [required]
    * @param[in]  comment_number qint32 [required]
    * @param[in]  oai_teams_create_discussion_comment_request OAITeams_create_discussion_comment_request [required]
    */
    virtual void teams_updateDiscussionComment(const QString &accept, const qint32 &team_id, const qint32 &discussion_number, const qint32 &comment_number, const OAITeams_create_discussion_comment_request &oai_teams_create_discussion_comment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teams_addMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateProjectPermissionsCallback(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForProjectCallback(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForRepoCallback(OAIHttpRequestWorker *worker);
    void teams_createCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionCallback(OAIHttpRequestWorker *worker);
    void teams_createDiscussionCommentCallback(OAIHttpRequestWorker *worker);
    void teams_deleteCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCallback(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCommentCallback(OAIHttpRequestWorker *worker);
    void teams_getCallback(OAIHttpRequestWorker *worker);
    void teams_getByNameCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionCallback(OAIHttpRequestWorker *worker);
    void teams_getDiscussionCommentCallback(OAIHttpRequestWorker *worker);
    void teams_getMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_getMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void teams_listCallback(OAIHttpRequestWorker *worker);
    void teams_listChildCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionCommentsCallback(OAIHttpRequestWorker *worker);
    void teams_listDiscussionsCallback(OAIHttpRequestWorker *worker);
    void teams_listForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void teams_listMembersCallback(OAIHttpRequestWorker *worker);
    void teams_listProjectsCallback(OAIHttpRequestWorker *worker);
    void teams_listReposCallback(OAIHttpRequestWorker *worker);
    void teams_removeMemberLegacyCallback(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserCallback(OAIHttpRequestWorker *worker);
    void teams_removeProjectCallback(OAIHttpRequestWorker *worker);
    void teams_removeRepoCallback(OAIHttpRequestWorker *worker);
    void teams_updateCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionCallback(OAIHttpRequestWorker *worker);
    void teams_updateDiscussionCommentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teams_addMemberLegacySignal();
    void teams_addOrUpdateMembershipForUserSignal(OAITeam_membership summary);
    void teams_addOrUpdateProjectPermissionsSignal();
    void teams_addOrUpdateRepoPermissionsSignal();
    void teams_checkPermissionsForProjectSignal(OAITeam_project summary);
    void teams_checkPermissionsForRepoSignal(OAIMinimal_repository summary);
    void teams_createSignal(OAITeam_full summary);
    void teams_createDiscussionSignal(OAITeam_discussion summary);
    void teams_createDiscussionCommentSignal(OAITeam_discussion_comment summary);
    void teams_deleteSignal();
    void teams_deleteDiscussionSignal();
    void teams_deleteDiscussionCommentSignal();
    void teams_getSignal(OAITeam_full summary);
    void teams_getByNameSignal(OAITeam_full summary);
    void teams_getDiscussionSignal(OAITeam_discussion summary);
    void teams_getDiscussionCommentSignal(OAITeam_discussion_comment summary);
    void teams_getMemberLegacySignal();
    void teams_getMembershipForUserSignal(OAITeam_membership summary);
    void teams_listSignal(QList<OAITeam> summary);
    void teams_listChildSignal(QList<OAITeam_2> summary);
    void teams_listDiscussionCommentsSignal(QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionsSignal(QList<OAITeam_discussion> summary);
    void teams_listForAuthenticatedUserSignal(QList<OAITeam_full> summary);
    void teams_listMembersSignal(QList<OAISimple_user> summary);
    void teams_listProjectsSignal(QList<OAITeam_project> summary);
    void teams_listReposSignal(QList<OAIMinimal_repository> summary);
    void teams_removeMemberLegacySignal();
    void teams_removeMembershipForUserSignal();
    void teams_removeProjectSignal();
    void teams_removeRepoSignal();
    void teams_updateSignal(OAITeam_full summary);
    void teams_updateDiscussionSignal(OAITeam_discussion summary);
    void teams_updateDiscussionCommentSignal(OAITeam_discussion_comment summary);


    void teams_addMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateMembershipForUserSignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_addOrUpdateProjectPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void teams_addOrUpdateRepoPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void teams_checkPermissionsForProjectSignalFull(OAIHttpRequestWorker *worker, OAITeam_project summary);
    void teams_checkPermissionsForRepoSignalFull(OAIHttpRequestWorker *worker, OAIMinimal_repository summary);
    void teams_createSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_createDiscussionSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_createDiscussionCommentSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_deleteSignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionSignalFull(OAIHttpRequestWorker *worker);
    void teams_deleteDiscussionCommentSignalFull(OAIHttpRequestWorker *worker);
    void teams_getSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_getByNameSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_getDiscussionSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_getDiscussionCommentSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);
    void teams_getMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_getMembershipForUserSignalFull(OAIHttpRequestWorker *worker, OAITeam_membership summary);
    void teams_listSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void teams_listChildSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_2> summary);
    void teams_listDiscussionCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion_comment> summary);
    void teams_listDiscussionsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_discussion> summary);
    void teams_listForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_full> summary);
    void teams_listMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void teams_listProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam_project> summary);
    void teams_listReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIMinimal_repository> summary);
    void teams_removeMemberLegacySignalFull(OAIHttpRequestWorker *worker);
    void teams_removeMembershipForUserSignalFull(OAIHttpRequestWorker *worker);
    void teams_removeProjectSignalFull(OAIHttpRequestWorker *worker);
    void teams_removeRepoSignalFull(OAIHttpRequestWorker *worker);
    void teams_updateSignalFull(OAIHttpRequestWorker *worker, OAITeam_full summary);
    void teams_updateDiscussionSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion summary);
    void teams_updateDiscussionCommentSignalFull(OAIHttpRequestWorker *worker, OAITeam_discussion_comment summary);

    Q_DECL_DEPRECATED_X("Use teams_addMemberLegacySignalError() instead")
    void teams_addMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserSignalError() instead")
    void teams_addOrUpdateMembershipForUserSignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserSignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsSignalError() instead")
    void teams_addOrUpdateProjectPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsSignalError() instead")
    void teams_addOrUpdateRepoPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectSignalError() instead")
    void teams_checkPermissionsForProjectSignalE(OAITeam_project summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectSignalError(OAITeam_project summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoSignalError() instead")
    void teams_checkPermissionsForRepoSignalE(OAIMinimal_repository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoSignalError(OAIMinimal_repository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createSignalError() instead")
    void teams_createSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionSignalError() instead")
    void teams_createDiscussionSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentSignalError() instead")
    void teams_createDiscussionCommentSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteSignalError() instead")
    void teams_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionSignalError() instead")
    void teams_deleteDiscussionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentSignalError() instead")
    void teams_deleteDiscussionCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getSignalError() instead")
    void teams_getSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getByNameSignalError() instead")
    void teams_getByNameSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getByNameSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionSignalError() instead")
    void teams_getDiscussionSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentSignalError() instead")
    void teams_getDiscussionCommentSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMemberLegacySignalError() instead")
    void teams_getMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserSignalError() instead")
    void teams_getMembershipForUserSignalE(OAITeam_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserSignalError(OAITeam_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listSignalError() instead")
    void teams_listSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildSignalError() instead")
    void teams_listChildSignalE(QList<OAITeam_2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildSignalError(QList<OAITeam_2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsSignalError() instead")
    void teams_listDiscussionCommentsSignalE(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsSignalError(QList<OAITeam_discussion_comment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsSignalError() instead")
    void teams_listDiscussionsSignalE(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsSignalError(QList<OAITeam_discussion> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listForAuthenticatedUserSignalError() instead")
    void teams_listForAuthenticatedUserSignalE(QList<OAITeam_full> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listForAuthenticatedUserSignalError(QList<OAITeam_full> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersSignalError() instead")
    void teams_listMembersSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsSignalError() instead")
    void teams_listProjectsSignalE(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsSignalError(QList<OAITeam_project> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposSignalError() instead")
    void teams_listReposSignalE(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposSignalError(QList<OAIMinimal_repository> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMemberLegacySignalError() instead")
    void teams_removeMemberLegacySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMemberLegacySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserSignalError() instead")
    void teams_removeMembershipForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectSignalError() instead")
    void teams_removeProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoSignalError() instead")
    void teams_removeRepoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateSignalError() instead")
    void teams_updateSignalE(OAITeam_full summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateSignalError(OAITeam_full summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionSignalError() instead")
    void teams_updateDiscussionSignalE(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionSignalError(OAITeam_discussion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentSignalError() instead")
    void teams_updateDiscussionCommentSignalE(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentSignalError(OAITeam_discussion_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teams_addMemberLegacySignalErrorFull() instead")
    void teams_addMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateMembershipForUserSignalErrorFull() instead")
    void teams_addOrUpdateMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateProjectPermissionsSignalErrorFull() instead")
    void teams_addOrUpdateProjectPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateProjectPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_addOrUpdateRepoPermissionsSignalErrorFull() instead")
    void teams_addOrUpdateRepoPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_addOrUpdateRepoPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForProjectSignalErrorFull() instead")
    void teams_checkPermissionsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_checkPermissionsForRepoSignalErrorFull() instead")
    void teams_checkPermissionsForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_checkPermissionsForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createSignalErrorFull() instead")
    void teams_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionSignalErrorFull() instead")
    void teams_createDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_createDiscussionCommentSignalErrorFull() instead")
    void teams_createDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_createDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteSignalErrorFull() instead")
    void teams_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionSignalErrorFull() instead")
    void teams_deleteDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_deleteDiscussionCommentSignalErrorFull() instead")
    void teams_deleteDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_deleteDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getSignalErrorFull() instead")
    void teams_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getByNameSignalErrorFull() instead")
    void teams_getByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionSignalErrorFull() instead")
    void teams_getDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getDiscussionCommentSignalErrorFull() instead")
    void teams_getDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMemberLegacySignalErrorFull() instead")
    void teams_getMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_getMembershipForUserSignalErrorFull() instead")
    void teams_getMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_getMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listSignalErrorFull() instead")
    void teams_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listChildSignalErrorFull() instead")
    void teams_listChildSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listChildSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionCommentsSignalErrorFull() instead")
    void teams_listDiscussionCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listDiscussionsSignalErrorFull() instead")
    void teams_listDiscussionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listDiscussionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listForAuthenticatedUserSignalErrorFull() instead")
    void teams_listForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listMembersSignalErrorFull() instead")
    void teams_listMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listProjectsSignalErrorFull() instead")
    void teams_listProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_listReposSignalErrorFull() instead")
    void teams_listReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_listReposSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMemberLegacySignalErrorFull() instead")
    void teams_removeMemberLegacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMemberLegacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeMembershipForUserSignalErrorFull() instead")
    void teams_removeMembershipForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeMembershipForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeProjectSignalErrorFull() instead")
    void teams_removeProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_removeRepoSignalErrorFull() instead")
    void teams_removeRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_removeRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateSignalErrorFull() instead")
    void teams_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionSignalErrorFull() instead")
    void teams_updateDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teams_updateDiscussionCommentSignalErrorFull() instead")
    void teams_updateDiscussionCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teams_updateDiscussionCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
