/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimple_commit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimple_commit::OAISimple_commit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimple_commit::OAISimple_commit() {
    this->initializeModel();
}

OAISimple_commit::~OAISimple_commit() {}

void OAISimple_commit::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_tree_id_isSet = false;
    m_tree_id_isValid = false;
}

void OAISimple_commit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimple_commit::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_tree_id_isValid = ::OpenAPI::fromJsonValue(m_tree_id, json[QString("tree_id")]);
    m_tree_id_isSet = !json[QString("tree_id")].isNull() && m_tree_id_isValid;
}

QString OAISimple_commit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimple_commit::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_tree_id_isSet) {
        obj.insert(QString("tree_id"), ::OpenAPI::toJsonValue(m_tree_id));
    }
    return obj;
}

OAISimple_commit_author OAISimple_commit::getAuthor() const {
    return m_author;
}
void OAISimple_commit::setAuthor(const OAISimple_commit_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAISimple_commit::is_author_Set() const{
    return m_author_isSet;
}

bool OAISimple_commit::is_author_Valid() const{
    return m_author_isValid;
}

OAISimple_commit_author OAISimple_commit::getCommitter() const {
    return m_committer;
}
void OAISimple_commit::setCommitter(const OAISimple_commit_author &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAISimple_commit::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAISimple_commit::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAISimple_commit::getId() const {
    return m_id;
}
void OAISimple_commit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimple_commit::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimple_commit::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISimple_commit::getMessage() const {
    return m_message;
}
void OAISimple_commit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISimple_commit::is_message_Set() const{
    return m_message_isSet;
}

bool OAISimple_commit::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAISimple_commit::getTimestamp() const {
    return m_timestamp;
}
void OAISimple_commit::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISimple_commit::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISimple_commit::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISimple_commit::getTreeId() const {
    return m_tree_id;
}
void OAISimple_commit::setTreeId(const QString &tree_id) {
    m_tree_id = tree_id;
    m_tree_id_isSet = true;
}

bool OAISimple_commit::is_tree_id_Set() const{
    return m_tree_id_isSet;
}

bool OAISimple_commit::is_tree_id_Valid() const{
    return m_tree_id_isValid;
}

bool OAISimple_commit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimple_commit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_isValid && m_committer_isValid && m_id_isValid && m_message_isValid && m_timestamp_isValid && m_tree_id_isValid && true;
}

} // namespace OpenAPI
