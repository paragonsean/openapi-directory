/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_request::OAIPull_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_request::OAIPull_request() {
    this->initializeModel();
}

OAIPull_request::~OAIPull_request() {}

void OAIPull_request::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_active_lock_reason_isSet = false;
    m_active_lock_reason_isValid = false;

    m_additions_isSet = false;
    m_additions_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_assignees_isSet = false;
    m_assignees_isValid = false;

    m_author_association_isSet = false;
    m_author_association_isValid = false;

    m_base_isSet = false;
    m_base_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_changed_files_isSet = false;
    m_changed_files_isValid = false;

    m_closed_at_isSet = false;
    m_closed_at_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_comments_url_isSet = false;
    m_comments_url_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_commits_url_isSet = false;
    m_commits_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deletions_isSet = false;
    m_deletions_isValid = false;

    m_diff_url_isSet = false;
    m_diff_url_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_head_isSet = false;
    m_head_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_url_isSet = false;
    m_issue_url_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_maintainer_can_modify_isSet = false;
    m_maintainer_can_modify_isValid = false;

    m_merge_commit_sha_isSet = false;
    m_merge_commit_sha_isValid = false;

    m_mergeable_isSet = false;
    m_mergeable_isValid = false;

    m_mergeable_state_isSet = false;
    m_mergeable_state_isValid = false;

    m_merged_isSet = false;
    m_merged_isValid = false;

    m_merged_at_isSet = false;
    m_merged_at_isValid = false;

    m_merged_by_isSet = false;
    m_merged_by_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_patch_url_isSet = false;
    m_patch_url_isValid = false;

    m_rebaseable_isSet = false;
    m_rebaseable_isValid = false;

    m_requested_reviewers_isSet = false;
    m_requested_reviewers_isValid = false;

    m_requested_teams_isSet = false;
    m_requested_teams_isValid = false;

    m_review_comment_url_isSet = false;
    m_review_comment_url_isValid = false;

    m_review_comments_isSet = false;
    m_review_comments_isValid = false;

    m_review_comments_url_isSet = false;
    m_review_comments_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_statuses_url_isSet = false;
    m_statuses_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPull_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_request::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_active_lock_reason_isValid = ::OpenAPI::fromJsonValue(m_active_lock_reason, json[QString("active_lock_reason")]);
    m_active_lock_reason_isSet = !json[QString("active_lock_reason")].isNull() && m_active_lock_reason_isValid;

    m_additions_isValid = ::OpenAPI::fromJsonValue(m_additions, json[QString("additions")]);
    m_additions_isSet = !json[QString("additions")].isNull() && m_additions_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_assignees_isValid = ::OpenAPI::fromJsonValue(m_assignees, json[QString("assignees")]);
    m_assignees_isSet = !json[QString("assignees")].isNull() && m_assignees_isValid;

    m_author_association_isValid = ::OpenAPI::fromJsonValue(m_author_association, json[QString("author_association")]);
    m_author_association_isSet = !json[QString("author_association")].isNull() && m_author_association_isValid;

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_changed_files_isValid = ::OpenAPI::fromJsonValue(m_changed_files, json[QString("changed_files")]);
    m_changed_files_isSet = !json[QString("changed_files")].isNull() && m_changed_files_isValid;

    m_closed_at_isValid = ::OpenAPI::fromJsonValue(m_closed_at, json[QString("closed_at")]);
    m_closed_at_isSet = !json[QString("closed_at")].isNull() && m_closed_at_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_comments_url_isValid = ::OpenAPI::fromJsonValue(m_comments_url, json[QString("comments_url")]);
    m_comments_url_isSet = !json[QString("comments_url")].isNull() && m_comments_url_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_commits_url_isValid = ::OpenAPI::fromJsonValue(m_commits_url, json[QString("commits_url")]);
    m_commits_url_isSet = !json[QString("commits_url")].isNull() && m_commits_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deletions_isValid = ::OpenAPI::fromJsonValue(m_deletions, json[QString("deletions")]);
    m_deletions_isSet = !json[QString("deletions")].isNull() && m_deletions_isValid;

    m_diff_url_isValid = ::OpenAPI::fromJsonValue(m_diff_url, json[QString("diff_url")]);
    m_diff_url_isSet = !json[QString("diff_url")].isNull() && m_diff_url_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_head_isValid = ::OpenAPI::fromJsonValue(m_head, json[QString("head")]);
    m_head_isSet = !json[QString("head")].isNull() && m_head_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_url_isValid = ::OpenAPI::fromJsonValue(m_issue_url, json[QString("issue_url")]);
    m_issue_url_isSet = !json[QString("issue_url")].isNull() && m_issue_url_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_maintainer_can_modify_isValid = ::OpenAPI::fromJsonValue(m_maintainer_can_modify, json[QString("maintainer_can_modify")]);
    m_maintainer_can_modify_isSet = !json[QString("maintainer_can_modify")].isNull() && m_maintainer_can_modify_isValid;

    m_merge_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_merge_commit_sha, json[QString("merge_commit_sha")]);
    m_merge_commit_sha_isSet = !json[QString("merge_commit_sha")].isNull() && m_merge_commit_sha_isValid;

    m_mergeable_isValid = ::OpenAPI::fromJsonValue(m_mergeable, json[QString("mergeable")]);
    m_mergeable_isSet = !json[QString("mergeable")].isNull() && m_mergeable_isValid;

    m_mergeable_state_isValid = ::OpenAPI::fromJsonValue(m_mergeable_state, json[QString("mergeable_state")]);
    m_mergeable_state_isSet = !json[QString("mergeable_state")].isNull() && m_mergeable_state_isValid;

    m_merged_isValid = ::OpenAPI::fromJsonValue(m_merged, json[QString("merged")]);
    m_merged_isSet = !json[QString("merged")].isNull() && m_merged_isValid;

    m_merged_at_isValid = ::OpenAPI::fromJsonValue(m_merged_at, json[QString("merged_at")]);
    m_merged_at_isSet = !json[QString("merged_at")].isNull() && m_merged_at_isValid;

    m_merged_by_isValid = ::OpenAPI::fromJsonValue(m_merged_by, json[QString("merged_by")]);
    m_merged_by_isSet = !json[QString("merged_by")].isNull() && m_merged_by_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_patch_url_isValid = ::OpenAPI::fromJsonValue(m_patch_url, json[QString("patch_url")]);
    m_patch_url_isSet = !json[QString("patch_url")].isNull() && m_patch_url_isValid;

    m_rebaseable_isValid = ::OpenAPI::fromJsonValue(m_rebaseable, json[QString("rebaseable")]);
    m_rebaseable_isSet = !json[QString("rebaseable")].isNull() && m_rebaseable_isValid;

    m_requested_reviewers_isValid = ::OpenAPI::fromJsonValue(m_requested_reviewers, json[QString("requested_reviewers")]);
    m_requested_reviewers_isSet = !json[QString("requested_reviewers")].isNull() && m_requested_reviewers_isValid;

    m_requested_teams_isValid = ::OpenAPI::fromJsonValue(m_requested_teams, json[QString("requested_teams")]);
    m_requested_teams_isSet = !json[QString("requested_teams")].isNull() && m_requested_teams_isValid;

    m_review_comment_url_isValid = ::OpenAPI::fromJsonValue(m_review_comment_url, json[QString("review_comment_url")]);
    m_review_comment_url_isSet = !json[QString("review_comment_url")].isNull() && m_review_comment_url_isValid;

    m_review_comments_isValid = ::OpenAPI::fromJsonValue(m_review_comments, json[QString("review_comments")]);
    m_review_comments_isSet = !json[QString("review_comments")].isNull() && m_review_comments_isValid;

    m_review_comments_url_isValid = ::OpenAPI::fromJsonValue(m_review_comments_url, json[QString("review_comments_url")]);
    m_review_comments_url_isSet = !json[QString("review_comments_url")].isNull() && m_review_comments_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_statuses_url_isValid = ::OpenAPI::fromJsonValue(m_statuses_url, json[QString("statuses_url")]);
    m_statuses_url_isSet = !json[QString("statuses_url")].isNull() && m_statuses_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPull_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_request::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_active_lock_reason_isSet) {
        obj.insert(QString("active_lock_reason"), ::OpenAPI::toJsonValue(m_active_lock_reason));
    }
    if (m_additions_isSet) {
        obj.insert(QString("additions"), ::OpenAPI::toJsonValue(m_additions));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_assignees.size() > 0) {
        obj.insert(QString("assignees"), ::OpenAPI::toJsonValue(m_assignees));
    }
    if (m_author_association.isSet()) {
        obj.insert(QString("author_association"), ::OpenAPI::toJsonValue(m_author_association));
    }
    if (m_base.isSet()) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_changed_files_isSet) {
        obj.insert(QString("changed_files"), ::OpenAPI::toJsonValue(m_changed_files));
    }
    if (m_closed_at_isSet) {
        obj.insert(QString("closed_at"), ::OpenAPI::toJsonValue(m_closed_at));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_comments_url_isSet) {
        obj.insert(QString("comments_url"), ::OpenAPI::toJsonValue(m_comments_url));
    }
    if (m_commits_isSet) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_commits_url_isSet) {
        obj.insert(QString("commits_url"), ::OpenAPI::toJsonValue(m_commits_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deletions_isSet) {
        obj.insert(QString("deletions"), ::OpenAPI::toJsonValue(m_deletions));
    }
    if (m_diff_url_isSet) {
        obj.insert(QString("diff_url"), ::OpenAPI::toJsonValue(m_diff_url));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_head.isSet()) {
        obj.insert(QString("head"), ::OpenAPI::toJsonValue(m_head));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_url_isSet) {
        obj.insert(QString("issue_url"), ::OpenAPI::toJsonValue(m_issue_url));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_maintainer_can_modify_isSet) {
        obj.insert(QString("maintainer_can_modify"), ::OpenAPI::toJsonValue(m_maintainer_can_modify));
    }
    if (m_merge_commit_sha_isSet) {
        obj.insert(QString("merge_commit_sha"), ::OpenAPI::toJsonValue(m_merge_commit_sha));
    }
    if (m_mergeable_isSet) {
        obj.insert(QString("mergeable"), ::OpenAPI::toJsonValue(m_mergeable));
    }
    if (m_mergeable_state_isSet) {
        obj.insert(QString("mergeable_state"), ::OpenAPI::toJsonValue(m_mergeable_state));
    }
    if (m_merged_isSet) {
        obj.insert(QString("merged"), ::OpenAPI::toJsonValue(m_merged));
    }
    if (m_merged_at_isSet) {
        obj.insert(QString("merged_at"), ::OpenAPI::toJsonValue(m_merged_at));
    }
    if (m_merged_by.isSet()) {
        obj.insert(QString("merged_by"), ::OpenAPI::toJsonValue(m_merged_by));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_patch_url_isSet) {
        obj.insert(QString("patch_url"), ::OpenAPI::toJsonValue(m_patch_url));
    }
    if (m_rebaseable_isSet) {
        obj.insert(QString("rebaseable"), ::OpenAPI::toJsonValue(m_rebaseable));
    }
    if (m_requested_reviewers.size() > 0) {
        obj.insert(QString("requested_reviewers"), ::OpenAPI::toJsonValue(m_requested_reviewers));
    }
    if (m_requested_teams.size() > 0) {
        obj.insert(QString("requested_teams"), ::OpenAPI::toJsonValue(m_requested_teams));
    }
    if (m_review_comment_url_isSet) {
        obj.insert(QString("review_comment_url"), ::OpenAPI::toJsonValue(m_review_comment_url));
    }
    if (m_review_comments_isSet) {
        obj.insert(QString("review_comments"), ::OpenAPI::toJsonValue(m_review_comments));
    }
    if (m_review_comments_url_isSet) {
        obj.insert(QString("review_comments_url"), ::OpenAPI::toJsonValue(m_review_comments_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_statuses_url_isSet) {
        obj.insert(QString("statuses_url"), ::OpenAPI::toJsonValue(m_statuses_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIPull_request__links OAIPull_request::getLinks() const {
    return m__links;
}
void OAIPull_request::setLinks(const OAIPull_request__links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPull_request::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPull_request::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIPull_request::getActiveLockReason() const {
    return m_active_lock_reason;
}
void OAIPull_request::setActiveLockReason(const QString &active_lock_reason) {
    m_active_lock_reason = active_lock_reason;
    m_active_lock_reason_isSet = true;
}

bool OAIPull_request::is_active_lock_reason_Set() const{
    return m_active_lock_reason_isSet;
}

bool OAIPull_request::is_active_lock_reason_Valid() const{
    return m_active_lock_reason_isValid;
}

qint32 OAIPull_request::getAdditions() const {
    return m_additions;
}
void OAIPull_request::setAdditions(const qint32 &additions) {
    m_additions = additions;
    m_additions_isSet = true;
}

bool OAIPull_request::is_additions_Set() const{
    return m_additions_isSet;
}

bool OAIPull_request::is_additions_Valid() const{
    return m_additions_isValid;
}

OAINullable_simple_user OAIPull_request::getAssignee() const {
    return m_assignee;
}
void OAIPull_request::setAssignee(const OAINullable_simple_user &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIPull_request::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIPull_request::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QList<OAISimple_user> OAIPull_request::getAssignees() const {
    return m_assignees;
}
void OAIPull_request::setAssignees(const QList<OAISimple_user> &assignees) {
    m_assignees = assignees;
    m_assignees_isSet = true;
}

bool OAIPull_request::is_assignees_Set() const{
    return m_assignees_isSet;
}

bool OAIPull_request::is_assignees_Valid() const{
    return m_assignees_isValid;
}

OAIAuthor_association OAIPull_request::getAuthorAssociation() const {
    return m_author_association;
}
void OAIPull_request::setAuthorAssociation(const OAIAuthor_association &author_association) {
    m_author_association = author_association;
    m_author_association_isSet = true;
}

bool OAIPull_request::is_author_association_Set() const{
    return m_author_association_isSet;
}

bool OAIPull_request::is_author_association_Valid() const{
    return m_author_association_isValid;
}

OAIPull_request_base OAIPull_request::getBase() const {
    return m_base;
}
void OAIPull_request::setBase(const OAIPull_request_base &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIPull_request::is_base_Set() const{
    return m_base_isSet;
}

bool OAIPull_request::is_base_Valid() const{
    return m_base_isValid;
}

QString OAIPull_request::getBody() const {
    return m_body;
}
void OAIPull_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIPull_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAIPull_request::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIPull_request::getChangedFiles() const {
    return m_changed_files;
}
void OAIPull_request::setChangedFiles(const qint32 &changed_files) {
    m_changed_files = changed_files;
    m_changed_files_isSet = true;
}

bool OAIPull_request::is_changed_files_Set() const{
    return m_changed_files_isSet;
}

bool OAIPull_request::is_changed_files_Valid() const{
    return m_changed_files_isValid;
}

QDateTime OAIPull_request::getClosedAt() const {
    return m_closed_at;
}
void OAIPull_request::setClosedAt(const QDateTime &closed_at) {
    m_closed_at = closed_at;
    m_closed_at_isSet = true;
}

bool OAIPull_request::is_closed_at_Set() const{
    return m_closed_at_isSet;
}

bool OAIPull_request::is_closed_at_Valid() const{
    return m_closed_at_isValid;
}

qint32 OAIPull_request::getComments() const {
    return m_comments;
}
void OAIPull_request::setComments(const qint32 &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPull_request::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPull_request::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIPull_request::getCommentsUrl() const {
    return m_comments_url;
}
void OAIPull_request::setCommentsUrl(const QString &comments_url) {
    m_comments_url = comments_url;
    m_comments_url_isSet = true;
}

bool OAIPull_request::is_comments_url_Set() const{
    return m_comments_url_isSet;
}

bool OAIPull_request::is_comments_url_Valid() const{
    return m_comments_url_isValid;
}

qint32 OAIPull_request::getCommits() const {
    return m_commits;
}
void OAIPull_request::setCommits(const qint32 &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIPull_request::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIPull_request::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAIPull_request::getCommitsUrl() const {
    return m_commits_url;
}
void OAIPull_request::setCommitsUrl(const QString &commits_url) {
    m_commits_url = commits_url;
    m_commits_url_isSet = true;
}

bool OAIPull_request::is_commits_url_Set() const{
    return m_commits_url_isSet;
}

bool OAIPull_request::is_commits_url_Valid() const{
    return m_commits_url_isValid;
}

QDateTime OAIPull_request::getCreatedAt() const {
    return m_created_at;
}
void OAIPull_request::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPull_request::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPull_request::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIPull_request::getDeletions() const {
    return m_deletions;
}
void OAIPull_request::setDeletions(const qint32 &deletions) {
    m_deletions = deletions;
    m_deletions_isSet = true;
}

bool OAIPull_request::is_deletions_Set() const{
    return m_deletions_isSet;
}

bool OAIPull_request::is_deletions_Valid() const{
    return m_deletions_isValid;
}

QString OAIPull_request::getDiffUrl() const {
    return m_diff_url;
}
void OAIPull_request::setDiffUrl(const QString &diff_url) {
    m_diff_url = diff_url;
    m_diff_url_isSet = true;
}

bool OAIPull_request::is_diff_url_Set() const{
    return m_diff_url_isSet;
}

bool OAIPull_request::is_diff_url_Valid() const{
    return m_diff_url_isValid;
}

bool OAIPull_request::isDraft() const {
    return m_draft;
}
void OAIPull_request::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIPull_request::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIPull_request::is_draft_Valid() const{
    return m_draft_isValid;
}

OAIPull_request_head OAIPull_request::getHead() const {
    return m_head;
}
void OAIPull_request::setHead(const OAIPull_request_head &head) {
    m_head = head;
    m_head_isSet = true;
}

bool OAIPull_request::is_head_Set() const{
    return m_head_isSet;
}

bool OAIPull_request::is_head_Valid() const{
    return m_head_isValid;
}

QString OAIPull_request::getHtmlUrl() const {
    return m_html_url;
}
void OAIPull_request::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPull_request::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPull_request::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIPull_request::getId() const {
    return m_id;
}
void OAIPull_request::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPull_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPull_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPull_request::getIssueUrl() const {
    return m_issue_url;
}
void OAIPull_request::setIssueUrl(const QString &issue_url) {
    m_issue_url = issue_url;
    m_issue_url_isSet = true;
}

bool OAIPull_request::is_issue_url_Set() const{
    return m_issue_url_isSet;
}

bool OAIPull_request::is_issue_url_Valid() const{
    return m_issue_url_isValid;
}

QList<OAIIssue_search_result_item_labels_inner> OAIPull_request::getLabels() const {
    return m_labels;
}
void OAIPull_request::setLabels(const QList<OAIIssue_search_result_item_labels_inner> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPull_request::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPull_request::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIPull_request::isLocked() const {
    return m_locked;
}
void OAIPull_request::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIPull_request::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIPull_request::is_locked_Valid() const{
    return m_locked_isValid;
}

bool OAIPull_request::isMaintainerCanModify() const {
    return m_maintainer_can_modify;
}
void OAIPull_request::setMaintainerCanModify(const bool &maintainer_can_modify) {
    m_maintainer_can_modify = maintainer_can_modify;
    m_maintainer_can_modify_isSet = true;
}

bool OAIPull_request::is_maintainer_can_modify_Set() const{
    return m_maintainer_can_modify_isSet;
}

bool OAIPull_request::is_maintainer_can_modify_Valid() const{
    return m_maintainer_can_modify_isValid;
}

QString OAIPull_request::getMergeCommitSha() const {
    return m_merge_commit_sha;
}
void OAIPull_request::setMergeCommitSha(const QString &merge_commit_sha) {
    m_merge_commit_sha = merge_commit_sha;
    m_merge_commit_sha_isSet = true;
}

bool OAIPull_request::is_merge_commit_sha_Set() const{
    return m_merge_commit_sha_isSet;
}

bool OAIPull_request::is_merge_commit_sha_Valid() const{
    return m_merge_commit_sha_isValid;
}

bool OAIPull_request::isMergeable() const {
    return m_mergeable;
}
void OAIPull_request::setMergeable(const bool &mergeable) {
    m_mergeable = mergeable;
    m_mergeable_isSet = true;
}

bool OAIPull_request::is_mergeable_Set() const{
    return m_mergeable_isSet;
}

bool OAIPull_request::is_mergeable_Valid() const{
    return m_mergeable_isValid;
}

QString OAIPull_request::getMergeableState() const {
    return m_mergeable_state;
}
void OAIPull_request::setMergeableState(const QString &mergeable_state) {
    m_mergeable_state = mergeable_state;
    m_mergeable_state_isSet = true;
}

bool OAIPull_request::is_mergeable_state_Set() const{
    return m_mergeable_state_isSet;
}

bool OAIPull_request::is_mergeable_state_Valid() const{
    return m_mergeable_state_isValid;
}

bool OAIPull_request::isMerged() const {
    return m_merged;
}
void OAIPull_request::setMerged(const bool &merged) {
    m_merged = merged;
    m_merged_isSet = true;
}

bool OAIPull_request::is_merged_Set() const{
    return m_merged_isSet;
}

bool OAIPull_request::is_merged_Valid() const{
    return m_merged_isValid;
}

QDateTime OAIPull_request::getMergedAt() const {
    return m_merged_at;
}
void OAIPull_request::setMergedAt(const QDateTime &merged_at) {
    m_merged_at = merged_at;
    m_merged_at_isSet = true;
}

bool OAIPull_request::is_merged_at_Set() const{
    return m_merged_at_isSet;
}

bool OAIPull_request::is_merged_at_Valid() const{
    return m_merged_at_isValid;
}

OAINullable_simple_user OAIPull_request::getMergedBy() const {
    return m_merged_by;
}
void OAIPull_request::setMergedBy(const OAINullable_simple_user &merged_by) {
    m_merged_by = merged_by;
    m_merged_by_isSet = true;
}

bool OAIPull_request::is_merged_by_Set() const{
    return m_merged_by_isSet;
}

bool OAIPull_request::is_merged_by_Valid() const{
    return m_merged_by_isValid;
}

OAINullable_milestone OAIPull_request::getMilestone() const {
    return m_milestone;
}
void OAIPull_request::setMilestone(const OAINullable_milestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIPull_request::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIPull_request::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIPull_request::getNodeId() const {
    return m_node_id;
}
void OAIPull_request::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIPull_request::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIPull_request::is_node_id_Valid() const{
    return m_node_id_isValid;
}

qint32 OAIPull_request::getNumber() const {
    return m_number;
}
void OAIPull_request::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPull_request::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPull_request::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPull_request::getPatchUrl() const {
    return m_patch_url;
}
void OAIPull_request::setPatchUrl(const QString &patch_url) {
    m_patch_url = patch_url;
    m_patch_url_isSet = true;
}

bool OAIPull_request::is_patch_url_Set() const{
    return m_patch_url_isSet;
}

bool OAIPull_request::is_patch_url_Valid() const{
    return m_patch_url_isValid;
}

bool OAIPull_request::isRebaseable() const {
    return m_rebaseable;
}
void OAIPull_request::setRebaseable(const bool &rebaseable) {
    m_rebaseable = rebaseable;
    m_rebaseable_isSet = true;
}

bool OAIPull_request::is_rebaseable_Set() const{
    return m_rebaseable_isSet;
}

bool OAIPull_request::is_rebaseable_Valid() const{
    return m_rebaseable_isValid;
}

QList<OAISimple_user> OAIPull_request::getRequestedReviewers() const {
    return m_requested_reviewers;
}
void OAIPull_request::setRequestedReviewers(const QList<OAISimple_user> &requested_reviewers) {
    m_requested_reviewers = requested_reviewers;
    m_requested_reviewers_isSet = true;
}

bool OAIPull_request::is_requested_reviewers_Set() const{
    return m_requested_reviewers_isSet;
}

bool OAIPull_request::is_requested_reviewers_Valid() const{
    return m_requested_reviewers_isValid;
}

QList<OAITeam_simple> OAIPull_request::getRequestedTeams() const {
    return m_requested_teams;
}
void OAIPull_request::setRequestedTeams(const QList<OAITeam_simple> &requested_teams) {
    m_requested_teams = requested_teams;
    m_requested_teams_isSet = true;
}

bool OAIPull_request::is_requested_teams_Set() const{
    return m_requested_teams_isSet;
}

bool OAIPull_request::is_requested_teams_Valid() const{
    return m_requested_teams_isValid;
}

QString OAIPull_request::getReviewCommentUrl() const {
    return m_review_comment_url;
}
void OAIPull_request::setReviewCommentUrl(const QString &review_comment_url) {
    m_review_comment_url = review_comment_url;
    m_review_comment_url_isSet = true;
}

bool OAIPull_request::is_review_comment_url_Set() const{
    return m_review_comment_url_isSet;
}

bool OAIPull_request::is_review_comment_url_Valid() const{
    return m_review_comment_url_isValid;
}

qint32 OAIPull_request::getReviewComments() const {
    return m_review_comments;
}
void OAIPull_request::setReviewComments(const qint32 &review_comments) {
    m_review_comments = review_comments;
    m_review_comments_isSet = true;
}

bool OAIPull_request::is_review_comments_Set() const{
    return m_review_comments_isSet;
}

bool OAIPull_request::is_review_comments_Valid() const{
    return m_review_comments_isValid;
}

QString OAIPull_request::getReviewCommentsUrl() const {
    return m_review_comments_url;
}
void OAIPull_request::setReviewCommentsUrl(const QString &review_comments_url) {
    m_review_comments_url = review_comments_url;
    m_review_comments_url_isSet = true;
}

bool OAIPull_request::is_review_comments_url_Set() const{
    return m_review_comments_url_isSet;
}

bool OAIPull_request::is_review_comments_url_Valid() const{
    return m_review_comments_url_isValid;
}

QString OAIPull_request::getState() const {
    return m_state;
}
void OAIPull_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPull_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPull_request::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPull_request::getStatusesUrl() const {
    return m_statuses_url;
}
void OAIPull_request::setStatusesUrl(const QString &statuses_url) {
    m_statuses_url = statuses_url;
    m_statuses_url_isSet = true;
}

bool OAIPull_request::is_statuses_url_Set() const{
    return m_statuses_url_isSet;
}

bool OAIPull_request::is_statuses_url_Valid() const{
    return m_statuses_url_isValid;
}

QString OAIPull_request::getTitle() const {
    return m_title;
}
void OAIPull_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPull_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPull_request::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPull_request::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPull_request::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPull_request::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPull_request::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPull_request::getUrl() const {
    return m_url;
}
void OAIPull_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPull_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPull_request::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAIPull_request::getUser() const {
    return m_user;
}
void OAIPull_request::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPull_request::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPull_request::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPull_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_lock_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer_can_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mergeable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mergeable_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebaseable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_reviewers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comments_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_additions_isValid && m_assignee_isValid && m_author_association_isValid && m_base_isValid && m_body_isValid && m_changed_files_isValid && m_closed_at_isValid && m_comments_isValid && m_comments_url_isValid && m_commits_isValid && m_commits_url_isValid && m_created_at_isValid && m_deletions_isValid && m_diff_url_isValid && m_head_isValid && m_html_url_isValid && m_id_isValid && m_issue_url_isValid && m_labels_isValid && m_locked_isValid && m_maintainer_can_modify_isValid && m_merge_commit_sha_isValid && m_mergeable_isValid && m_mergeable_state_isValid && m_merged_isValid && m_merged_at_isValid && m_merged_by_isValid && m_milestone_isValid && m_node_id_isValid && m_number_isValid && m_patch_url_isValid && m_review_comment_url_isValid && m_review_comments_isValid && m_review_comments_url_isValid && m_state_isValid && m_statuses_url_isValid && m_title_isValid && m_updated_at_isValid && m_url_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
