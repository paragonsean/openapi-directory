/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_get_installation_415_response.h"
#include "OAIBasic_error.h"
#include "OAIObject.h"
#include "OAIOrgs_update_422_response.h"
#include "OAIProject.h"
#include "OAIProject_card.h"
#include "OAIProject_column.h"
#include "OAIProjects_add_collaborator_request.h"
#include "OAIProjects_create_card_request.h"
#include "OAIProjects_create_for_authenticated_user_request.h"
#include "OAIProjects_create_for_org_request.h"
#include "OAIProjects_delete_card_403_response.h"
#include "OAIProjects_move_card_403_response.h"
#include "OAIProjects_move_card_503_response.h"
#include "OAIProjects_move_card_request.h"
#include "OAIProjects_move_column_request.h"
#include "OAIProjects_update_card_request.h"
#include "OAIProjects_update_column_request.h"
#include "OAIProjects_update_request.h"
#include "OAIRepository_collaborator_permission.h"
#include "OAISimple_user.h"
#include "OAIValidation_error.h"
#include "OAIValidation_error_simple.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  username QString [required]
    * @param[in]  oai_projects_add_collaborator_request OAIProjects_add_collaborator_request [optional]
    */
    virtual void projects_addCollaborator(const qint32 &project_id, const QString &username, const ::OpenAPI::OptionalParam<OAIProjects_add_collaborator_request> &oai_projects_add_collaborator_request = ::OpenAPI::OptionalParam<OAIProjects_add_collaborator_request>());

    /**
    * @param[in]  column_id qint32 [required]
    * @param[in]  oai_projects_create_card_request OAIProjects_create_card_request [required]
    */
    virtual void projects_createCard(const qint32 &column_id, const OAIProjects_create_card_request &oai_projects_create_card_request);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  oai_projects_update_column_request OAIProjects_update_column_request [required]
    */
    virtual void projects_createColumn(const qint32 &project_id, const OAIProjects_update_column_request &oai_projects_update_column_request);

    /**
    * @param[in]  oai_projects_create_for_authenticated_user_request OAIProjects_create_for_authenticated_user_request [required]
    */
    virtual void projects_createForAuthenticatedUser(const OAIProjects_create_for_authenticated_user_request &oai_projects_create_for_authenticated_user_request);

    /**
    * @param[in]  org QString [required]
    * @param[in]  oai_projects_create_for_org_request OAIProjects_create_for_org_request [required]
    */
    virtual void projects_createForOrg(const QString &org, const OAIProjects_create_for_org_request &oai_projects_create_for_org_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_projects_create_for_org_request OAIProjects_create_for_org_request [required]
    */
    virtual void projects_createForRepo(const QString &owner, const QString &repo, const OAIProjects_create_for_org_request &oai_projects_create_for_org_request);

    /**
    * @param[in]  project_id qint32 [required]
    */
    virtual void projects_delete(const qint32 &project_id);

    /**
    * @param[in]  card_id qint32 [required]
    */
    virtual void projects_deleteCard(const qint32 &card_id);

    /**
    * @param[in]  column_id qint32 [required]
    */
    virtual void projects_deleteColumn(const qint32 &column_id);

    /**
    * @param[in]  project_id qint32 [required]
    */
    virtual void projects_get(const qint32 &project_id);

    /**
    * @param[in]  card_id qint32 [required]
    */
    virtual void projects_getCard(const qint32 &card_id);

    /**
    * @param[in]  column_id qint32 [required]
    */
    virtual void projects_getColumn(const qint32 &column_id);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  username QString [required]
    */
    virtual void projects_getPermissionForUser(const qint32 &project_id, const QString &username);

    /**
    * @param[in]  column_id qint32 [required]
    * @param[in]  archived_state QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listCards(const qint32 &column_id, const ::OpenAPI::OptionalParam<QString> &archived_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  affiliation QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listCollaborators(const qint32 &project_id, const ::OpenAPI::OptionalParam<QString> &affiliation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listColumns(const qint32 &project_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listForOrg(const QString &org, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listForRepo(const QString &owner, const QString &repo, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  state QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void projects_listForUser(const QString &username, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  card_id qint32 [required]
    * @param[in]  oai_projects_move_card_request OAIProjects_move_card_request [required]
    */
    virtual void projects_moveCard(const qint32 &card_id, const OAIProjects_move_card_request &oai_projects_move_card_request);

    /**
    * @param[in]  column_id qint32 [required]
    * @param[in]  oai_projects_move_column_request OAIProjects_move_column_request [required]
    */
    virtual void projects_moveColumn(const qint32 &column_id, const OAIProjects_move_column_request &oai_projects_move_column_request);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  username QString [required]
    */
    virtual void projects_removeCollaborator(const qint32 &project_id, const QString &username);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  oai_projects_update_request OAIProjects_update_request [optional]
    */
    virtual void projects_update(const qint32 &project_id, const ::OpenAPI::OptionalParam<OAIProjects_update_request> &oai_projects_update_request = ::OpenAPI::OptionalParam<OAIProjects_update_request>());

    /**
    * @param[in]  card_id qint32 [required]
    * @param[in]  oai_projects_update_card_request OAIProjects_update_card_request [optional]
    */
    virtual void projects_updateCard(const qint32 &card_id, const ::OpenAPI::OptionalParam<OAIProjects_update_card_request> &oai_projects_update_card_request = ::OpenAPI::OptionalParam<OAIProjects_update_card_request>());

    /**
    * @param[in]  column_id qint32 [required]
    * @param[in]  oai_projects_update_column_request OAIProjects_update_column_request [required]
    */
    virtual void projects_updateColumn(const qint32 &column_id, const OAIProjects_update_column_request &oai_projects_update_column_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projects_addCollaboratorCallback(OAIHttpRequestWorker *worker);
    void projects_createCardCallback(OAIHttpRequestWorker *worker);
    void projects_createColumnCallback(OAIHttpRequestWorker *worker);
    void projects_createForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void projects_createForOrgCallback(OAIHttpRequestWorker *worker);
    void projects_createForRepoCallback(OAIHttpRequestWorker *worker);
    void projects_deleteCallback(OAIHttpRequestWorker *worker);
    void projects_deleteCardCallback(OAIHttpRequestWorker *worker);
    void projects_deleteColumnCallback(OAIHttpRequestWorker *worker);
    void projects_getCallback(OAIHttpRequestWorker *worker);
    void projects_getCardCallback(OAIHttpRequestWorker *worker);
    void projects_getColumnCallback(OAIHttpRequestWorker *worker);
    void projects_getPermissionForUserCallback(OAIHttpRequestWorker *worker);
    void projects_listCardsCallback(OAIHttpRequestWorker *worker);
    void projects_listCollaboratorsCallback(OAIHttpRequestWorker *worker);
    void projects_listColumnsCallback(OAIHttpRequestWorker *worker);
    void projects_listForOrgCallback(OAIHttpRequestWorker *worker);
    void projects_listForRepoCallback(OAIHttpRequestWorker *worker);
    void projects_listForUserCallback(OAIHttpRequestWorker *worker);
    void projects_moveCardCallback(OAIHttpRequestWorker *worker);
    void projects_moveColumnCallback(OAIHttpRequestWorker *worker);
    void projects_removeCollaboratorCallback(OAIHttpRequestWorker *worker);
    void projects_updateCallback(OAIHttpRequestWorker *worker);
    void projects_updateCardCallback(OAIHttpRequestWorker *worker);
    void projects_updateColumnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projects_addCollaboratorSignal();
    void projects_createCardSignal(OAIProject_card summary);
    void projects_createColumnSignal(OAIProject_column summary);
    void projects_createForAuthenticatedUserSignal(OAIProject summary);
    void projects_createForOrgSignal(OAIProject summary);
    void projects_createForRepoSignal(OAIProject summary);
    void projects_deleteSignal();
    void projects_deleteCardSignal();
    void projects_deleteColumnSignal();
    void projects_getSignal(OAIProject summary);
    void projects_getCardSignal(OAIProject_card summary);
    void projects_getColumnSignal(OAIProject_column summary);
    void projects_getPermissionForUserSignal(OAIRepository_collaborator_permission summary);
    void projects_listCardsSignal(QList<OAIProject_card> summary);
    void projects_listCollaboratorsSignal(QList<OAISimple_user> summary);
    void projects_listColumnsSignal(QList<OAIProject_column> summary);
    void projects_listForOrgSignal(QList<OAIProject> summary);
    void projects_listForRepoSignal(QList<OAIProject> summary);
    void projects_listForUserSignal(QList<OAIProject> summary);
    void projects_moveCardSignal(OAIObject summary);
    void projects_moveColumnSignal(OAIObject summary);
    void projects_removeCollaboratorSignal();
    void projects_updateSignal(OAIProject summary);
    void projects_updateCardSignal(OAIProject_card summary);
    void projects_updateColumnSignal(OAIProject_column summary);


    void projects_addCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void projects_createCardSignalFull(OAIHttpRequestWorker *worker, OAIProject_card summary);
    void projects_createColumnSignalFull(OAIHttpRequestWorker *worker, OAIProject_column summary);
    void projects_createForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projects_createForOrgSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projects_createForRepoSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projects_deleteSignalFull(OAIHttpRequestWorker *worker);
    void projects_deleteCardSignalFull(OAIHttpRequestWorker *worker);
    void projects_deleteColumnSignalFull(OAIHttpRequestWorker *worker);
    void projects_getSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projects_getCardSignalFull(OAIHttpRequestWorker *worker, OAIProject_card summary);
    void projects_getColumnSignalFull(OAIHttpRequestWorker *worker, OAIProject_column summary);
    void projects_getPermissionForUserSignalFull(OAIHttpRequestWorker *worker, OAIRepository_collaborator_permission summary);
    void projects_listCardsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject_card> summary);
    void projects_listCollaboratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAISimple_user> summary);
    void projects_listColumnsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject_column> summary);
    void projects_listForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void projects_listForRepoSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void projects_listForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void projects_moveCardSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void projects_moveColumnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void projects_removeCollaboratorSignalFull(OAIHttpRequestWorker *worker);
    void projects_updateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projects_updateCardSignalFull(OAIHttpRequestWorker *worker, OAIProject_card summary);
    void projects_updateColumnSignalFull(OAIHttpRequestWorker *worker, OAIProject_column summary);

    Q_DECL_DEPRECATED_X("Use projects_addCollaboratorSignalError() instead")
    void projects_addCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projects_addCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createCardSignalError() instead")
    void projects_createCardSignalE(OAIProject_card summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createCardSignalError(OAIProject_card summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createColumnSignalError() instead")
    void projects_createColumnSignalE(OAIProject_column summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createColumnSignalError(OAIProject_column summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForAuthenticatedUserSignalError() instead")
    void projects_createForAuthenticatedUserSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForAuthenticatedUserSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForOrgSignalError() instead")
    void projects_createForOrgSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForOrgSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForRepoSignalError() instead")
    void projects_createForRepoSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForRepoSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteSignalError() instead")
    void projects_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteCardSignalError() instead")
    void projects_deleteCardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteCardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteColumnSignalError() instead")
    void projects_deleteColumnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteColumnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getSignalError() instead")
    void projects_getSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getCardSignalError() instead")
    void projects_getCardSignalE(OAIProject_card summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getCardSignalError(OAIProject_card summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getColumnSignalError() instead")
    void projects_getColumnSignalE(OAIProject_column summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getColumnSignalError(OAIProject_column summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getPermissionForUserSignalError() instead")
    void projects_getPermissionForUserSignalE(OAIRepository_collaborator_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getPermissionForUserSignalError(OAIRepository_collaborator_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listCardsSignalError() instead")
    void projects_listCardsSignalE(QList<OAIProject_card> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listCardsSignalError(QList<OAIProject_card> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listCollaboratorsSignalError() instead")
    void projects_listCollaboratorsSignalE(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listCollaboratorsSignalError(QList<OAISimple_user> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listColumnsSignalError() instead")
    void projects_listColumnsSignalE(QList<OAIProject_column> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listColumnsSignalError(QList<OAIProject_column> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForOrgSignalError() instead")
    void projects_listForOrgSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForOrgSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForRepoSignalError() instead")
    void projects_listForRepoSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForRepoSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForUserSignalError() instead")
    void projects_listForUserSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForUserSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_moveCardSignalError() instead")
    void projects_moveCardSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_moveCardSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_moveColumnSignalError() instead")
    void projects_moveColumnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_moveColumnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_removeCollaboratorSignalError() instead")
    void projects_removeCollaboratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projects_removeCollaboratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateSignalError() instead")
    void projects_updateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateCardSignalError() instead")
    void projects_updateCardSignalE(OAIProject_card summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateCardSignalError(OAIProject_card summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateColumnSignalError() instead")
    void projects_updateColumnSignalE(OAIProject_column summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateColumnSignalError(OAIProject_column summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projects_addCollaboratorSignalErrorFull() instead")
    void projects_addCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_addCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createCardSignalErrorFull() instead")
    void projects_createCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createColumnSignalErrorFull() instead")
    void projects_createColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForAuthenticatedUserSignalErrorFull() instead")
    void projects_createForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForOrgSignalErrorFull() instead")
    void projects_createForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_createForRepoSignalErrorFull() instead")
    void projects_createForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_createForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteSignalErrorFull() instead")
    void projects_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteCardSignalErrorFull() instead")
    void projects_deleteCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_deleteColumnSignalErrorFull() instead")
    void projects_deleteColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_deleteColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getSignalErrorFull() instead")
    void projects_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getCardSignalErrorFull() instead")
    void projects_getCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getColumnSignalErrorFull() instead")
    void projects_getColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_getPermissionForUserSignalErrorFull() instead")
    void projects_getPermissionForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_getPermissionForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listCardsSignalErrorFull() instead")
    void projects_listCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listCollaboratorsSignalErrorFull() instead")
    void projects_listCollaboratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listCollaboratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listColumnsSignalErrorFull() instead")
    void projects_listColumnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listColumnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForOrgSignalErrorFull() instead")
    void projects_listForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForRepoSignalErrorFull() instead")
    void projects_listForRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_listForUserSignalErrorFull() instead")
    void projects_listForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_listForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_moveCardSignalErrorFull() instead")
    void projects_moveCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_moveCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_moveColumnSignalErrorFull() instead")
    void projects_moveColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_moveColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_removeCollaboratorSignalErrorFull() instead")
    void projects_removeCollaboratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_removeCollaboratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateSignalErrorFull() instead")
    void projects_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateCardSignalErrorFull() instead")
    void projects_updateCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projects_updateColumnSignalErrorFull() instead")
    void projects_updateColumnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projects_updateColumnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
