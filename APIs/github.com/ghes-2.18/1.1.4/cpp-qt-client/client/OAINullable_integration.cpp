/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINullable_integration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINullable_integration::OAINullable_integration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINullable_integration::OAINullable_integration() {
    this->initializeModel();
}

OAINullable_integration::~OAINullable_integration() {}

void OAINullable_integration::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installations_count_isSet = false;
    m_installations_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_pem_isSet = false;
    m_pem_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_webhook_secret_isSet = false;
    m_webhook_secret_isValid = false;
}

void OAINullable_integration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINullable_integration::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("external_url")]);
    m_external_url_isSet = !json[QString("external_url")].isNull() && m_external_url_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installations_count_isValid = ::OpenAPI::fromJsonValue(m_installations_count, json[QString("installations_count")]);
    m_installations_count_isSet = !json[QString("installations_count")].isNull() && m_installations_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_pem_isValid = ::OpenAPI::fromJsonValue(m_pem, json[QString("pem")]);
    m_pem_isSet = !json[QString("pem")].isNull() && m_pem_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_webhook_secret_isValid = ::OpenAPI::fromJsonValue(m_webhook_secret, json[QString("webhook_secret")]);
    m_webhook_secret_isSet = !json[QString("webhook_secret")].isNull() && m_webhook_secret_isValid;
}

QString OAINullable_integration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINullable_integration::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("external_url"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installations_count_isSet) {
        obj.insert(QString("installations_count"), ::OpenAPI::toJsonValue(m_installations_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_pem_isSet) {
        obj.insert(QString("pem"), ::OpenAPI::toJsonValue(m_pem));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_webhook_secret_isSet) {
        obj.insert(QString("webhook_secret"), ::OpenAPI::toJsonValue(m_webhook_secret));
    }
    return obj;
}

QString OAINullable_integration::getClientId() const {
    return m_client_id;
}
void OAINullable_integration::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAINullable_integration::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAINullable_integration::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAINullable_integration::getClientSecret() const {
    return m_client_secret;
}
void OAINullable_integration::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAINullable_integration::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAINullable_integration::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QDateTime OAINullable_integration::getCreatedAt() const {
    return m_created_at;
}
void OAINullable_integration::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINullable_integration::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINullable_integration::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINullable_integration::getDescription() const {
    return m_description;
}
void OAINullable_integration::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINullable_integration::is_description_Set() const{
    return m_description_isSet;
}

bool OAINullable_integration::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAINullable_integration::getEvents() const {
    return m_events;
}
void OAINullable_integration::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAINullable_integration::is_events_Set() const{
    return m_events_isSet;
}

bool OAINullable_integration::is_events_Valid() const{
    return m_events_isValid;
}

QString OAINullable_integration::getExternalUrl() const {
    return m_external_url;
}
void OAINullable_integration::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAINullable_integration::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAINullable_integration::is_external_url_Valid() const{
    return m_external_url_isValid;
}

QString OAINullable_integration::getHtmlUrl() const {
    return m_html_url;
}
void OAINullable_integration::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAINullable_integration::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAINullable_integration::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAINullable_integration::getId() const {
    return m_id;
}
void OAINullable_integration::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINullable_integration::is_id_Set() const{
    return m_id_isSet;
}

bool OAINullable_integration::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAINullable_integration::getInstallationsCount() const {
    return m_installations_count;
}
void OAINullable_integration::setInstallationsCount(const qint32 &installations_count) {
    m_installations_count = installations_count;
    m_installations_count_isSet = true;
}

bool OAINullable_integration::is_installations_count_Set() const{
    return m_installations_count_isSet;
}

bool OAINullable_integration::is_installations_count_Valid() const{
    return m_installations_count_isValid;
}

QString OAINullable_integration::getName() const {
    return m_name;
}
void OAINullable_integration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINullable_integration::is_name_Set() const{
    return m_name_isSet;
}

bool OAINullable_integration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINullable_integration::getNodeId() const {
    return m_node_id;
}
void OAINullable_integration::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINullable_integration::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINullable_integration::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINullable_simple_user OAINullable_integration::getOwner() const {
    return m_owner;
}
void OAINullable_integration::setOwner(const OAINullable_simple_user &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAINullable_integration::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAINullable_integration::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAINullable_integration::getPem() const {
    return m_pem;
}
void OAINullable_integration::setPem(const QString &pem) {
    m_pem = pem;
    m_pem_isSet = true;
}

bool OAINullable_integration::is_pem_Set() const{
    return m_pem_isSet;
}

bool OAINullable_integration::is_pem_Valid() const{
    return m_pem_isValid;
}

OAIIntegration_permissions OAINullable_integration::getPermissions() const {
    return m_permissions;
}
void OAINullable_integration::setPermissions(const OAIIntegration_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAINullable_integration::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINullable_integration::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QDateTime OAINullable_integration::getUpdatedAt() const {
    return m_updated_at;
}
void OAINullable_integration::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINullable_integration::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINullable_integration::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAINullable_integration::getWebhookSecret() const {
    return m_webhook_secret;
}
void OAINullable_integration::setWebhookSecret(const QString &webhook_secret) {
    m_webhook_secret = webhook_secret;
    m_webhook_secret_isSet = true;
}

bool OAINullable_integration::is_webhook_secret_Set() const{
    return m_webhook_secret_isSet;
}

bool OAINullable_integration::is_webhook_secret_Valid() const{
    return m_webhook_secret_isValid;
}

bool OAINullable_integration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installations_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINullable_integration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_events_isValid && m_external_url_isValid && m_html_url_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_owner_isValid && m_permissions_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
