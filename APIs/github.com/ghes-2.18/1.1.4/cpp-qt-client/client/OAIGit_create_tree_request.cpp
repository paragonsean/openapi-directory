/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_create_tree_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_create_tree_request::OAIGit_create_tree_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_create_tree_request::OAIGit_create_tree_request() {
    this->initializeModel();
}

OAIGit_create_tree_request::~OAIGit_create_tree_request() {}

void OAIGit_create_tree_request::initializeModel() {

    m_base_tree_isSet = false;
    m_base_tree_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;
}

void OAIGit_create_tree_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_create_tree_request::fromJsonObject(QJsonObject json) {

    m_base_tree_isValid = ::OpenAPI::fromJsonValue(m_base_tree, json[QString("base_tree")]);
    m_base_tree_isSet = !json[QString("base_tree")].isNull() && m_base_tree_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;
}

QString OAIGit_create_tree_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_create_tree_request::asJsonObject() const {
    QJsonObject obj;
    if (m_base_tree_isSet) {
        obj.insert(QString("base_tree"), ::OpenAPI::toJsonValue(m_base_tree));
    }
    if (m_tree.size() > 0) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    return obj;
}

QString OAIGit_create_tree_request::getBaseTree() const {
    return m_base_tree;
}
void OAIGit_create_tree_request::setBaseTree(const QString &base_tree) {
    m_base_tree = base_tree;
    m_base_tree_isSet = true;
}

bool OAIGit_create_tree_request::is_base_tree_Set() const{
    return m_base_tree_isSet;
}

bool OAIGit_create_tree_request::is_base_tree_Valid() const{
    return m_base_tree_isValid;
}

QList<OAIGit_create_tree_request_tree_inner> OAIGit_create_tree_request::getTree() const {
    return m_tree;
}
void OAIGit_create_tree_request::setTree(const QList<OAIGit_create_tree_request_tree_inner> &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIGit_create_tree_request::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIGit_create_tree_request::is_tree_Valid() const{
    return m_tree_isValid;
}

bool OAIGit_create_tree_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_tree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_create_tree_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tree_isValid && true;
}

} // namespace OpenAPI
