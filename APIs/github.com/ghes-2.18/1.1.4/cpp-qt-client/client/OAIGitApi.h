/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGitApi_H
#define OAI_OAIGitApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_error.h"
#include "OAIBlob.h"
#include "OAIGit_commit.h"
#include "OAIGit_create_blob_request.h"
#include "OAIGit_create_commit_request.h"
#include "OAIGit_create_ref_request.h"
#include "OAIGit_create_tag_request.h"
#include "OAIGit_create_tree_request.h"
#include "OAIGit_ref.h"
#include "OAIGit_tag.h"
#include "OAIGit_tree.h"
#include "OAIGit_update_ref_request.h"
#include "OAIShort_blob.h"
#include "OAIValidation_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGitApi : public QObject {
    Q_OBJECT

public:
    OAIGitApi(const int timeOut = 0);
    ~OAIGitApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_git_create_blob_request OAIGit_create_blob_request [required]
    */
    virtual void git_createBlob(const QString &owner, const QString &repo, const OAIGit_create_blob_request &oai_git_create_blob_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_git_create_commit_request OAIGit_create_commit_request [required]
    */
    virtual void git_createCommit(const QString &owner, const QString &repo, const OAIGit_create_commit_request &oai_git_create_commit_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_git_create_ref_request OAIGit_create_ref_request [required]
    */
    virtual void git_createRef(const QString &owner, const QString &repo, const OAIGit_create_ref_request &oai_git_create_ref_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_git_create_tag_request OAIGit_create_tag_request [required]
    */
    virtual void git_createTag(const QString &owner, const QString &repo, const OAIGit_create_tag_request &oai_git_create_tag_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  oai_git_create_tree_request OAIGit_create_tree_request [required]
    */
    virtual void git_createTree(const QString &owner, const QString &repo, const OAIGit_create_tree_request &oai_git_create_tree_request);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    */
    virtual void git_deleteRef(const QString &owner, const QString &repo, const QString &ref);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void git_getAllRefs(const QString &owner, const QString &repo, const QString &r_namespace, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  file_sha QString [required]
    */
    virtual void git_getBlob(const QString &owner, const QString &repo, const QString &file_sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  commit_sha QString [required]
    */
    virtual void git_getCommit(const QString &owner, const QString &repo, const QString &commit_sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tag_sha QString [required]
    */
    virtual void git_getTag(const QString &owner, const QString &repo, const QString &tag_sha);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  tree_sha QString [required]
    * @param[in]  recursive QString [optional]
    */
    virtual void git_getTree(const QString &owner, const QString &repo, const QString &tree_sha, const ::OpenAPI::OptionalParam<QString> &recursive = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  ref QString [required]
    * @param[in]  oai_git_update_ref_request OAIGit_update_ref_request [required]
    */
    virtual void git_updateRef(const QString &owner, const QString &repo, const QString &ref, const OAIGit_update_ref_request &oai_git_update_ref_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void git_createBlobCallback(OAIHttpRequestWorker *worker);
    void git_createCommitCallback(OAIHttpRequestWorker *worker);
    void git_createRefCallback(OAIHttpRequestWorker *worker);
    void git_createTagCallback(OAIHttpRequestWorker *worker);
    void git_createTreeCallback(OAIHttpRequestWorker *worker);
    void git_deleteRefCallback(OAIHttpRequestWorker *worker);
    void git_getAllRefsCallback(OAIHttpRequestWorker *worker);
    void git_getBlobCallback(OAIHttpRequestWorker *worker);
    void git_getCommitCallback(OAIHttpRequestWorker *worker);
    void git_getTagCallback(OAIHttpRequestWorker *worker);
    void git_getTreeCallback(OAIHttpRequestWorker *worker);
    void git_updateRefCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void git_createBlobSignal(OAIShort_blob summary);
    void git_createCommitSignal(OAIGit_commit summary);
    void git_createRefSignal(OAIGit_ref summary);
    void git_createTagSignal(OAIGit_tag summary);
    void git_createTreeSignal(OAIGit_tree summary);
    void git_deleteRefSignal();
    void git_getAllRefsSignal(QList<OAIGit_ref> summary);
    void git_getBlobSignal(OAIBlob summary);
    void git_getCommitSignal(OAIGit_commit summary);
    void git_getTagSignal(OAIGit_tag summary);
    void git_getTreeSignal(OAIGit_tree summary);
    void git_updateRefSignal(OAIGit_ref summary);


    void git_createBlobSignalFull(OAIHttpRequestWorker *worker, OAIShort_blob summary);
    void git_createCommitSignalFull(OAIHttpRequestWorker *worker, OAIGit_commit summary);
    void git_createRefSignalFull(OAIHttpRequestWorker *worker, OAIGit_ref summary);
    void git_createTagSignalFull(OAIHttpRequestWorker *worker, OAIGit_tag summary);
    void git_createTreeSignalFull(OAIHttpRequestWorker *worker, OAIGit_tree summary);
    void git_deleteRefSignalFull(OAIHttpRequestWorker *worker);
    void git_getAllRefsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGit_ref> summary);
    void git_getBlobSignalFull(OAIHttpRequestWorker *worker, OAIBlob summary);
    void git_getCommitSignalFull(OAIHttpRequestWorker *worker, OAIGit_commit summary);
    void git_getTagSignalFull(OAIHttpRequestWorker *worker, OAIGit_tag summary);
    void git_getTreeSignalFull(OAIHttpRequestWorker *worker, OAIGit_tree summary);
    void git_updateRefSignalFull(OAIHttpRequestWorker *worker, OAIGit_ref summary);

    Q_DECL_DEPRECATED_X("Use git_createBlobSignalError() instead")
    void git_createBlobSignalE(OAIShort_blob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createBlobSignalError(OAIShort_blob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createCommitSignalError() instead")
    void git_createCommitSignalE(OAIGit_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createCommitSignalError(OAIGit_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createRefSignalError() instead")
    void git_createRefSignalE(OAIGit_ref summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createRefSignalError(OAIGit_ref summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createTagSignalError() instead")
    void git_createTagSignalE(OAIGit_tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createTagSignalError(OAIGit_tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createTreeSignalError() instead")
    void git_createTreeSignalE(OAIGit_tree summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createTreeSignalError(OAIGit_tree summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_deleteRefSignalError() instead")
    void git_deleteRefSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void git_deleteRefSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getAllRefsSignalError() instead")
    void git_getAllRefsSignalE(QList<OAIGit_ref> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getAllRefsSignalError(QList<OAIGit_ref> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getBlobSignalError() instead")
    void git_getBlobSignalE(OAIBlob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getBlobSignalError(OAIBlob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getCommitSignalError() instead")
    void git_getCommitSignalE(OAIGit_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getCommitSignalError(OAIGit_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getTagSignalError() instead")
    void git_getTagSignalE(OAIGit_tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getTagSignalError(OAIGit_tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getTreeSignalError() instead")
    void git_getTreeSignalE(OAIGit_tree summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getTreeSignalError(OAIGit_tree summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_updateRefSignalError() instead")
    void git_updateRefSignalE(OAIGit_ref summary, QNetworkReply::NetworkError error_type, QString error_str);
    void git_updateRefSignalError(OAIGit_ref summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use git_createBlobSignalErrorFull() instead")
    void git_createBlobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createBlobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createCommitSignalErrorFull() instead")
    void git_createCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createRefSignalErrorFull() instead")
    void git_createRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createTagSignalErrorFull() instead")
    void git_createTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_createTreeSignalErrorFull() instead")
    void git_createTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_createTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_deleteRefSignalErrorFull() instead")
    void git_deleteRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_deleteRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getAllRefsSignalErrorFull() instead")
    void git_getAllRefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getAllRefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getBlobSignalErrorFull() instead")
    void git_getBlobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getBlobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getCommitSignalErrorFull() instead")
    void git_getCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getTagSignalErrorFull() instead")
    void git_getTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_getTreeSignalErrorFull() instead")
    void git_getTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_getTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use git_updateRefSignalErrorFull() instead")
    void git_updateRefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void git_updateRefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
