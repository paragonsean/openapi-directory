/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_commit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_commit::OAIGit_commit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_commit::OAIGit_commit() {
    this->initializeModel();
}

OAIGit_commit::~OAIGit_commit() {}

void OAIGit_commit::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_committer_isSet = false;
    m_committer_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAIGit_commit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_commit::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_committer_isValid = ::OpenAPI::fromJsonValue(m_committer, json[QString("committer")]);
    m_committer_isSet = !json[QString("committer")].isNull() && m_committer_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAIGit_commit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_commit::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_committer.isSet()) {
        obj.insert(QString("committer"), ::OpenAPI::toJsonValue(m_committer));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_tree.isSet()) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

OAIGit_commit_author OAIGit_commit::getAuthor() const {
    return m_author;
}
void OAIGit_commit::setAuthor(const OAIGit_commit_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIGit_commit::is_author_Set() const{
    return m_author_isSet;
}

bool OAIGit_commit::is_author_Valid() const{
    return m_author_isValid;
}

OAIGit_commit_author OAIGit_commit::getCommitter() const {
    return m_committer;
}
void OAIGit_commit::setCommitter(const OAIGit_commit_author &committer) {
    m_committer = committer;
    m_committer_isSet = true;
}

bool OAIGit_commit::is_committer_Set() const{
    return m_committer_isSet;
}

bool OAIGit_commit::is_committer_Valid() const{
    return m_committer_isValid;
}

QString OAIGit_commit::getHtmlUrl() const {
    return m_html_url;
}
void OAIGit_commit::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIGit_commit::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIGit_commit::is_html_url_Valid() const{
    return m_html_url_isValid;
}

QString OAIGit_commit::getMessage() const {
    return m_message;
}
void OAIGit_commit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGit_commit::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGit_commit::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGit_commit::getNodeId() const {
    return m_node_id;
}
void OAIGit_commit::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIGit_commit::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIGit_commit::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<OAIGit_commit_parents_inner> OAIGit_commit::getParents() const {
    return m_parents;
}
void OAIGit_commit::setParents(const QList<OAIGit_commit_parents_inner> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAIGit_commit::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAIGit_commit::is_parents_Valid() const{
    return m_parents_isValid;
}

QString OAIGit_commit::getSha() const {
    return m_sha;
}
void OAIGit_commit::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIGit_commit::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIGit_commit::is_sha_Valid() const{
    return m_sha_isValid;
}

OAIGit_commit_tree OAIGit_commit::getTree() const {
    return m_tree;
}
void OAIGit_commit::setTree(const OAIGit_commit_tree &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIGit_commit::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIGit_commit::is_tree_Valid() const{
    return m_tree_isValid;
}

QString OAIGit_commit::getUrl() const {
    return m_url;
}
void OAIGit_commit::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGit_commit::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGit_commit::is_url_Valid() const{
    return m_url_isValid;
}

OAIGit_commit_verification OAIGit_commit::getVerification() const {
    return m_verification;
}
void OAIGit_commit::setVerification(const OAIGit_commit_verification &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAIGit_commit::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAIGit_commit::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAIGit_commit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_committer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_commit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_author_isValid && m_committer_isValid && m_html_url_isValid && m_message_isValid && m_node_id_isValid && m_parents_isValid && m_sha_isValid && m_tree_isValid && m_url_isValid && m_verification_isValid && true;
}

} // namespace OpenAPI
