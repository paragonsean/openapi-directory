/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuthorization_with_user.h
 *
 * 
 */

#ifndef OAIAuthorization_with_user_H
#define OAIAuthorization_with_user_H

#include <QJsonObject>

#include "OAIAuthorization_with_user_app.h"
#include "OAIAuthorization_with_user_user.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthorization_with_user_app;
class OAIAuthorization_with_user_user;

class OAIAuthorization_with_user : public OAIObject {
public:
    OAIAuthorization_with_user();
    OAIAuthorization_with_user(QString json);
    ~OAIAuthorization_with_user() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAuthorization_with_user_app getApp() const;
    void setApp(const OAIAuthorization_with_user_app &app);
    bool is_app_Set() const;
    bool is_app_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getFingerprint() const;
    void setFingerprint(const QString &fingerprint);
    bool is_fingerprint_Set() const;
    bool is_fingerprint_Valid() const;

    QString getHashedToken() const;
    void setHashedToken(const QString &hashed_token);
    bool is_hashed_token_Set() const;
    bool is_hashed_token_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QString getNoteUrl() const;
    void setNoteUrl(const QString &note_url);
    bool is_note_url_Set() const;
    bool is_note_url_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getTokenLastEight() const;
    void setTokenLastEight(const QString &token_last_eight);
    bool is_token_last_eight_Set() const;
    bool is_token_last_eight_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAIAuthorization_with_user_user getUser() const;
    void setUser(const OAIAuthorization_with_user_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAuthorization_with_user_app m_app;
    bool m_app_isSet;
    bool m_app_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_fingerprint;
    bool m_fingerprint_isSet;
    bool m_fingerprint_isValid;

    QString m_hashed_token;
    bool m_hashed_token_isSet;
    bool m_hashed_token_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QString m_note_url;
    bool m_note_url_isSet;
    bool m_note_url_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString m_token_last_eight;
    bool m_token_last_eight_isSet;
    bool m_token_last_eight_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAIAuthorization_with_user_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuthorization_with_user)

#endif // OAIAuthorization_with_user_H
