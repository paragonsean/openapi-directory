/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApps_create_content_attachment_request.h"
#include "OAIApps_create_from_manifest_201_response.h"
#include "OAIApps_create_installation_access_token_request.h"
#include "OAIApps_get_installation_415_response.h"
#include "OAIApps_list_installation_repos_for_authenticated_user_200_response.h"
#include "OAIApps_list_installations_for_authenticated_user_200_response.h"
#include "OAIApps_list_repos_accessible_to_installation_200_response.h"
#include "OAIBasic_error.h"
#include "OAIContent_reference_attachment.h"
#include "OAIInstallation_ghes_2.h"
#include "OAIInstallation_token.h"
#include "OAIIntegration.h"
#include "OAIObject.h"
#include "OAIValidation_error.h"
#include "OAIValidation_error_simple.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void apps_addRepoToInstallation(const qint32 &installation_id, const qint32 &repository_id);

    /**
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    * @param[in]  content_reference_id qint32 [required]
    * @param[in]  oai_apps_create_content_attachment_request OAIApps_create_content_attachment_request [required]
    */
    virtual void apps_createContentAttachment(const QString &owner, const QString &repo, const qint32 &content_reference_id, const OAIApps_create_content_attachment_request &oai_apps_create_content_attachment_request);

    /**
    * @param[in]  code QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void apps_createFromManifest(const QString &code, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  installation_id qint32 [required]
    * @param[in]  oai_apps_create_installation_access_token_request OAIApps_create_installation_access_token_request [optional]
    */
    virtual void apps_createInstallationAccessToken(const QString &accept, const qint32 &installation_id, const ::OpenAPI::OptionalParam<OAIApps_create_installation_access_token_request> &oai_apps_create_installation_access_token_request = ::OpenAPI::OptionalParam<OAIApps_create_installation_access_token_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_deleteInstallation(const QString &accept, const qint32 &installation_id);


    virtual void apps_getAuthenticated();

    /**
    * @param[in]  app_slug QString [required]
    */
    virtual void apps_getBySlug(const QString &app_slug);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  installation_id qint32 [required]
    */
    virtual void apps_getInstallation(const QString &accept, const qint32 &installation_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  org QString [required]
    */
    virtual void apps_getOrgInstallation(const QString &accept, const QString &org);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  owner QString [required]
    * @param[in]  repo QString [required]
    */
    virtual void apps_getRepoInstallation(const QString &accept, const QString &owner, const QString &repo);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  username QString [required]
    */
    virtual void apps_getUserInstallation(const QString &accept, const QString &username);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  installation_id qint32 [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listInstallationReposForAuthenticatedUser(const QString &accept, const qint32 &installation_id, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listInstallations(const QString &accept, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listInstallationsForAuthenticatedUser(const QString &accept, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void apps_listReposAccessibleToInstallation(const QString &accept, const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  installation_id qint32 [required]
    * @param[in]  repository_id qint32 [required]
    */
    virtual void apps_removeRepoFromInstallation(const qint32 &installation_id, const qint32 &repository_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apps_addRepoToInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_createContentAttachmentCallback(OAIHttpRequestWorker *worker);
    void apps_createFromManifestCallback(OAIHttpRequestWorker *worker);
    void apps_createInstallationAccessTokenCallback(OAIHttpRequestWorker *worker);
    void apps_deleteInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getAuthenticatedCallback(OAIHttpRequestWorker *worker);
    void apps_getBySlugCallback(OAIHttpRequestWorker *worker);
    void apps_getInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getOrgInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getRepoInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_getUserInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationReposForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationsCallback(OAIHttpRequestWorker *worker);
    void apps_listInstallationsForAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void apps_listReposAccessibleToInstallationCallback(OAIHttpRequestWorker *worker);
    void apps_removeRepoFromInstallationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apps_addRepoToInstallationSignal();
    void apps_createContentAttachmentSignal(OAIContent_reference_attachment summary);
    void apps_createFromManifestSignal(OAIApps_create_from_manifest_201_response summary);
    void apps_createInstallationAccessTokenSignal(OAIInstallation_token summary);
    void apps_deleteInstallationSignal();
    void apps_getAuthenticatedSignal(OAIIntegration summary);
    void apps_getBySlugSignal(OAIIntegration summary);
    void apps_getInstallationSignal(OAIInstallation_ghes_2 summary);
    void apps_getOrgInstallationSignal(OAIInstallation_ghes_2 summary);
    void apps_getRepoInstallationSignal(OAIInstallation_ghes_2 summary);
    void apps_getUserInstallationSignal(OAIInstallation_ghes_2 summary);
    void apps_listInstallationReposForAuthenticatedUserSignal(OAIApps_list_installation_repos_for_authenticated_user_200_response summary);
    void apps_listInstallationsSignal(QList<OAIInstallation_ghes_2> summary);
    void apps_listInstallationsForAuthenticatedUserSignal(OAIApps_list_installations_for_authenticated_user_200_response summary);
    void apps_listReposAccessibleToInstallationSignal(OAIApps_list_repos_accessible_to_installation_200_response summary);
    void apps_removeRepoFromInstallationSignal();


    void apps_addRepoToInstallationSignalFull(OAIHttpRequestWorker *worker);
    void apps_createContentAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIContent_reference_attachment summary);
    void apps_createFromManifestSignalFull(OAIHttpRequestWorker *worker, OAIApps_create_from_manifest_201_response summary);
    void apps_createInstallationAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_token summary);
    void apps_deleteInstallationSignalFull(OAIHttpRequestWorker *worker);
    void apps_getAuthenticatedSignalFull(OAIHttpRequestWorker *worker, OAIIntegration summary);
    void apps_getBySlugSignalFull(OAIHttpRequestWorker *worker, OAIIntegration summary);
    void apps_getInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_ghes_2 summary);
    void apps_getOrgInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_ghes_2 summary);
    void apps_getRepoInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_ghes_2 summary);
    void apps_getUserInstallationSignalFull(OAIHttpRequestWorker *worker, OAIInstallation_ghes_2 summary);
    void apps_listInstallationReposForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_installation_repos_for_authenticated_user_200_response summary);
    void apps_listInstallationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstallation_ghes_2> summary);
    void apps_listInstallationsForAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_installations_for_authenticated_user_200_response summary);
    void apps_listReposAccessibleToInstallationSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_repos_accessible_to_installation_200_response summary);
    void apps_removeRepoFromInstallationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apps_addRepoToInstallationSignalError() instead")
    void apps_addRepoToInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_addRepoToInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createContentAttachmentSignalError() instead")
    void apps_createContentAttachmentSignalE(OAIContent_reference_attachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createContentAttachmentSignalError(OAIContent_reference_attachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createFromManifestSignalError() instead")
    void apps_createFromManifestSignalE(OAIApps_create_from_manifest_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createFromManifestSignalError(OAIApps_create_from_manifest_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createInstallationAccessTokenSignalError() instead")
    void apps_createInstallationAccessTokenSignalE(OAIInstallation_token summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createInstallationAccessTokenSignalError(OAIInstallation_token summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteInstallationSignalError() instead")
    void apps_deleteInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getAuthenticatedSignalError() instead")
    void apps_getAuthenticatedSignalE(OAIIntegration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getAuthenticatedSignalError(OAIIntegration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getBySlugSignalError() instead")
    void apps_getBySlugSignalE(OAIIntegration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getBySlugSignalError(OAIIntegration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getInstallationSignalError() instead")
    void apps_getInstallationSignalE(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getInstallationSignalError(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getOrgInstallationSignalError() instead")
    void apps_getOrgInstallationSignalE(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getOrgInstallationSignalError(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getRepoInstallationSignalError() instead")
    void apps_getRepoInstallationSignalE(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getRepoInstallationSignalError(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getUserInstallationSignalError() instead")
    void apps_getUserInstallationSignalE(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getUserInstallationSignalError(OAIInstallation_ghes_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationReposForAuthenticatedUserSignalError() instead")
    void apps_listInstallationReposForAuthenticatedUserSignalE(OAIApps_list_installation_repos_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationReposForAuthenticatedUserSignalError(OAIApps_list_installation_repos_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsSignalError() instead")
    void apps_listInstallationsSignalE(QList<OAIInstallation_ghes_2> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsSignalError(QList<OAIInstallation_ghes_2> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsForAuthenticatedUserSignalError() instead")
    void apps_listInstallationsForAuthenticatedUserSignalE(OAIApps_list_installations_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsForAuthenticatedUserSignalError(OAIApps_list_installations_for_authenticated_user_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listReposAccessibleToInstallationSignalError() instead")
    void apps_listReposAccessibleToInstallationSignalE(OAIApps_list_repos_accessible_to_installation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listReposAccessibleToInstallationSignalError(OAIApps_list_repos_accessible_to_installation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_removeRepoFromInstallationSignalError() instead")
    void apps_removeRepoFromInstallationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apps_removeRepoFromInstallationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apps_addRepoToInstallationSignalErrorFull() instead")
    void apps_addRepoToInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_addRepoToInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createContentAttachmentSignalErrorFull() instead")
    void apps_createContentAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createContentAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createFromManifestSignalErrorFull() instead")
    void apps_createFromManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createFromManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_createInstallationAccessTokenSignalErrorFull() instead")
    void apps_createInstallationAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_createInstallationAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_deleteInstallationSignalErrorFull() instead")
    void apps_deleteInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_deleteInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getAuthenticatedSignalErrorFull() instead")
    void apps_getAuthenticatedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getAuthenticatedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getBySlugSignalErrorFull() instead")
    void apps_getBySlugSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getBySlugSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getInstallationSignalErrorFull() instead")
    void apps_getInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getOrgInstallationSignalErrorFull() instead")
    void apps_getOrgInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getOrgInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getRepoInstallationSignalErrorFull() instead")
    void apps_getRepoInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getRepoInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_getUserInstallationSignalErrorFull() instead")
    void apps_getUserInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_getUserInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationReposForAuthenticatedUserSignalErrorFull() instead")
    void apps_listInstallationReposForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationReposForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsSignalErrorFull() instead")
    void apps_listInstallationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listInstallationsForAuthenticatedUserSignalErrorFull() instead")
    void apps_listInstallationsForAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listInstallationsForAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_listReposAccessibleToInstallationSignalErrorFull() instead")
    void apps_listReposAccessibleToInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_listReposAccessibleToInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apps_removeRepoFromInstallationSignalErrorFull() instead")
    void apps_removeRepoFromInstallationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apps_removeRepoFromInstallationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
