/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_settings_enterprise_ldap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_settings_enterprise_ldap::OAIEnterprise_settings_enterprise_ldap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_settings_enterprise_ldap::OAIEnterprise_settings_enterprise_ldap() {
    this->initializeModel();
}

OAIEnterprise_settings_enterprise_ldap::~OAIEnterprise_settings_enterprise_ldap() {}

void OAIEnterprise_settings_enterprise_ldap::initializeModel() {

    m_admin_group_isSet = false;
    m_admin_group_isValid = false;

    m_base_isSet = false;
    m_base_isValid = false;

    m_bind_dn_isSet = false;
    m_bind_dn_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_posix_support_isSet = false;
    m_posix_support_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_reconciliation_isSet = false;
    m_reconciliation_isValid = false;

    m_recursive_group_search_isSet = false;
    m_recursive_group_search_isValid = false;

    m_search_strategy_isSet = false;
    m_search_strategy_isValid = false;

    m_sync_enabled_isSet = false;
    m_sync_enabled_isValid = false;

    m_team_sync_interval_isSet = false;
    m_team_sync_interval_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_user_groups_isSet = false;
    m_user_groups_isValid = false;

    m_user_sync_emails_isSet = false;
    m_user_sync_emails_isValid = false;

    m_user_sync_interval_isSet = false;
    m_user_sync_interval_isValid = false;

    m_user_sync_keys_isSet = false;
    m_user_sync_keys_isValid = false;

    m_virtual_attribute_enabled_isSet = false;
    m_virtual_attribute_enabled_isValid = false;
}

void OAIEnterprise_settings_enterprise_ldap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_settings_enterprise_ldap::fromJsonObject(QJsonObject json) {

    m_admin_group_isValid = ::OpenAPI::fromJsonValue(m_admin_group, json[QString("admin_group")]);
    m_admin_group_isSet = !json[QString("admin_group")].isNull() && m_admin_group_isValid;

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_bind_dn_isValid = ::OpenAPI::fromJsonValue(m_bind_dn, json[QString("bind_dn")]);
    m_bind_dn_isSet = !json[QString("bind_dn")].isNull() && m_bind_dn_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_posix_support_isValid = ::OpenAPI::fromJsonValue(m_posix_support, json[QString("posix_support")]);
    m_posix_support_isSet = !json[QString("posix_support")].isNull() && m_posix_support_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_reconciliation_isValid = ::OpenAPI::fromJsonValue(m_reconciliation, json[QString("reconciliation")]);
    m_reconciliation_isSet = !json[QString("reconciliation")].isNull() && m_reconciliation_isValid;

    m_recursive_group_search_isValid = ::OpenAPI::fromJsonValue(m_recursive_group_search, json[QString("recursive_group_search")]);
    m_recursive_group_search_isSet = !json[QString("recursive_group_search")].isNull() && m_recursive_group_search_isValid;

    m_search_strategy_isValid = ::OpenAPI::fromJsonValue(m_search_strategy, json[QString("search_strategy")]);
    m_search_strategy_isSet = !json[QString("search_strategy")].isNull() && m_search_strategy_isValid;

    m_sync_enabled_isValid = ::OpenAPI::fromJsonValue(m_sync_enabled, json[QString("sync_enabled")]);
    m_sync_enabled_isSet = !json[QString("sync_enabled")].isNull() && m_sync_enabled_isValid;

    m_team_sync_interval_isValid = ::OpenAPI::fromJsonValue(m_team_sync_interval, json[QString("team_sync_interval")]);
    m_team_sync_interval_isSet = !json[QString("team_sync_interval")].isNull() && m_team_sync_interval_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_user_groups_isValid = ::OpenAPI::fromJsonValue(m_user_groups, json[QString("user_groups")]);
    m_user_groups_isSet = !json[QString("user_groups")].isNull() && m_user_groups_isValid;

    m_user_sync_emails_isValid = ::OpenAPI::fromJsonValue(m_user_sync_emails, json[QString("user_sync_emails")]);
    m_user_sync_emails_isSet = !json[QString("user_sync_emails")].isNull() && m_user_sync_emails_isValid;

    m_user_sync_interval_isValid = ::OpenAPI::fromJsonValue(m_user_sync_interval, json[QString("user_sync_interval")]);
    m_user_sync_interval_isSet = !json[QString("user_sync_interval")].isNull() && m_user_sync_interval_isValid;

    m_user_sync_keys_isValid = ::OpenAPI::fromJsonValue(m_user_sync_keys, json[QString("user_sync_keys")]);
    m_user_sync_keys_isSet = !json[QString("user_sync_keys")].isNull() && m_user_sync_keys_isValid;

    m_virtual_attribute_enabled_isValid = ::OpenAPI::fromJsonValue(m_virtual_attribute_enabled, json[QString("virtual_attribute_enabled")]);
    m_virtual_attribute_enabled_isSet = !json[QString("virtual_attribute_enabled")].isNull() && m_virtual_attribute_enabled_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_settings_enterprise_ldap::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_group_isSet) {
        obj.insert(QString("admin_group"), ::OpenAPI::toJsonValue(m_admin_group));
    }
    if (m_base.size() > 0) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_bind_dn_isSet) {
        obj.insert(QString("bind_dn"), ::OpenAPI::toJsonValue(m_bind_dn));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_posix_support_isSet) {
        obj.insert(QString("posix_support"), ::OpenAPI::toJsonValue(m_posix_support));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_reconciliation.isSet()) {
        obj.insert(QString("reconciliation"), ::OpenAPI::toJsonValue(m_reconciliation));
    }
    if (m_recursive_group_search_isSet) {
        obj.insert(QString("recursive_group_search"), ::OpenAPI::toJsonValue(m_recursive_group_search));
    }
    if (m_search_strategy_isSet) {
        obj.insert(QString("search_strategy"), ::OpenAPI::toJsonValue(m_search_strategy));
    }
    if (m_sync_enabled_isSet) {
        obj.insert(QString("sync_enabled"), ::OpenAPI::toJsonValue(m_sync_enabled));
    }
    if (m_team_sync_interval_isSet) {
        obj.insert(QString("team_sync_interval"), ::OpenAPI::toJsonValue(m_team_sync_interval));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_user_groups.size() > 0) {
        obj.insert(QString("user_groups"), ::OpenAPI::toJsonValue(m_user_groups));
    }
    if (m_user_sync_emails_isSet) {
        obj.insert(QString("user_sync_emails"), ::OpenAPI::toJsonValue(m_user_sync_emails));
    }
    if (m_user_sync_interval_isSet) {
        obj.insert(QString("user_sync_interval"), ::OpenAPI::toJsonValue(m_user_sync_interval));
    }
    if (m_user_sync_keys_isSet) {
        obj.insert(QString("user_sync_keys"), ::OpenAPI::toJsonValue(m_user_sync_keys));
    }
    if (m_virtual_attribute_enabled_isSet) {
        obj.insert(QString("virtual_attribute_enabled"), ::OpenAPI::toJsonValue(m_virtual_attribute_enabled));
    }
    return obj;
}

QString OAIEnterprise_settings_enterprise_ldap::getAdminGroup() const {
    return m_admin_group;
}
void OAIEnterprise_settings_enterprise_ldap::setAdminGroup(const QString &admin_group) {
    m_admin_group = admin_group;
    m_admin_group_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_admin_group_Set() const{
    return m_admin_group_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_admin_group_Valid() const{
    return m_admin_group_isValid;
}

QList<QJsonValue> OAIEnterprise_settings_enterprise_ldap::getBase() const {
    return m_base;
}
void OAIEnterprise_settings_enterprise_ldap::setBase(const QList<QJsonValue> &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_base_Set() const{
    return m_base_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_base_Valid() const{
    return m_base_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getBindDn() const {
    return m_bind_dn;
}
void OAIEnterprise_settings_enterprise_ldap::setBindDn(const QString &bind_dn) {
    m_bind_dn = bind_dn;
    m_bind_dn_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_bind_dn_Set() const{
    return m_bind_dn_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_bind_dn_Valid() const{
    return m_bind_dn_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getHost() const {
    return m_host;
}
void OAIEnterprise_settings_enterprise_ldap::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_host_Set() const{
    return m_host_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getMethod() const {
    return m_method;
}
void OAIEnterprise_settings_enterprise_ldap::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_method_Set() const{
    return m_method_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getPassword() const {
    return m_password;
}
void OAIEnterprise_settings_enterprise_ldap::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIEnterprise_settings_enterprise_ldap::getPort() const {
    return m_port;
}
void OAIEnterprise_settings_enterprise_ldap::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_port_Set() const{
    return m_port_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isPosixSupport() const {
    return m_posix_support;
}
void OAIEnterprise_settings_enterprise_ldap::setPosixSupport(const bool &posix_support) {
    m_posix_support = posix_support;
    m_posix_support_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_posix_support_Set() const{
    return m_posix_support_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_posix_support_Valid() const{
    return m_posix_support_isValid;
}

OAIEnterprise_settings_enterprise_ldap_profile OAIEnterprise_settings_enterprise_ldap::getProfile() const {
    return m_profile;
}
void OAIEnterprise_settings_enterprise_ldap::setProfile(const OAIEnterprise_settings_enterprise_ldap_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIEnterprise_settings_enterprise_ldap_reconciliation OAIEnterprise_settings_enterprise_ldap::getReconciliation() const {
    return m_reconciliation;
}
void OAIEnterprise_settings_enterprise_ldap::setReconciliation(const OAIEnterprise_settings_enterprise_ldap_reconciliation &reconciliation) {
    m_reconciliation = reconciliation;
    m_reconciliation_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_reconciliation_Set() const{
    return m_reconciliation_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_reconciliation_Valid() const{
    return m_reconciliation_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isRecursiveGroupSearch() const {
    return m_recursive_group_search;
}
void OAIEnterprise_settings_enterprise_ldap::setRecursiveGroupSearch(const bool &recursive_group_search) {
    m_recursive_group_search = recursive_group_search;
    m_recursive_group_search_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_recursive_group_search_Set() const{
    return m_recursive_group_search_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_recursive_group_search_Valid() const{
    return m_recursive_group_search_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getSearchStrategy() const {
    return m_search_strategy;
}
void OAIEnterprise_settings_enterprise_ldap::setSearchStrategy(const QString &search_strategy) {
    m_search_strategy = search_strategy;
    m_search_strategy_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_search_strategy_Set() const{
    return m_search_strategy_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_search_strategy_Valid() const{
    return m_search_strategy_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isSyncEnabled() const {
    return m_sync_enabled;
}
void OAIEnterprise_settings_enterprise_ldap::setSyncEnabled(const bool &sync_enabled) {
    m_sync_enabled = sync_enabled;
    m_sync_enabled_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_sync_enabled_Set() const{
    return m_sync_enabled_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_sync_enabled_Valid() const{
    return m_sync_enabled_isValid;
}

qint32 OAIEnterprise_settings_enterprise_ldap::getTeamSyncInterval() const {
    return m_team_sync_interval;
}
void OAIEnterprise_settings_enterprise_ldap::setTeamSyncInterval(const qint32 &team_sync_interval) {
    m_team_sync_interval = team_sync_interval;
    m_team_sync_interval_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_team_sync_interval_Set() const{
    return m_team_sync_interval_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_team_sync_interval_Valid() const{
    return m_team_sync_interval_isValid;
}

QString OAIEnterprise_settings_enterprise_ldap::getUid() const {
    return m_uid;
}
void OAIEnterprise_settings_enterprise_ldap::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_uid_Valid() const{
    return m_uid_isValid;
}

QList<QJsonValue> OAIEnterprise_settings_enterprise_ldap::getUserGroups() const {
    return m_user_groups;
}
void OAIEnterprise_settings_enterprise_ldap::setUserGroups(const QList<QJsonValue> &user_groups) {
    m_user_groups = user_groups;
    m_user_groups_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_groups_Set() const{
    return m_user_groups_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_groups_Valid() const{
    return m_user_groups_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isUserSyncEmails() const {
    return m_user_sync_emails;
}
void OAIEnterprise_settings_enterprise_ldap::setUserSyncEmails(const bool &user_sync_emails) {
    m_user_sync_emails = user_sync_emails;
    m_user_sync_emails_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_emails_Set() const{
    return m_user_sync_emails_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_emails_Valid() const{
    return m_user_sync_emails_isValid;
}

qint32 OAIEnterprise_settings_enterprise_ldap::getUserSyncInterval() const {
    return m_user_sync_interval;
}
void OAIEnterprise_settings_enterprise_ldap::setUserSyncInterval(const qint32 &user_sync_interval) {
    m_user_sync_interval = user_sync_interval;
    m_user_sync_interval_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_interval_Set() const{
    return m_user_sync_interval_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_interval_Valid() const{
    return m_user_sync_interval_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isUserSyncKeys() const {
    return m_user_sync_keys;
}
void OAIEnterprise_settings_enterprise_ldap::setUserSyncKeys(const bool &user_sync_keys) {
    m_user_sync_keys = user_sync_keys;
    m_user_sync_keys_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_keys_Set() const{
    return m_user_sync_keys_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_user_sync_keys_Valid() const{
    return m_user_sync_keys_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isVirtualAttributeEnabled() const {
    return m_virtual_attribute_enabled;
}
void OAIEnterprise_settings_enterprise_ldap::setVirtualAttributeEnabled(const bool &virtual_attribute_enabled) {
    m_virtual_attribute_enabled = virtual_attribute_enabled;
    m_virtual_attribute_enabled_isSet = true;
}

bool OAIEnterprise_settings_enterprise_ldap::is_virtual_attribute_enabled_Set() const{
    return m_virtual_attribute_enabled_isSet;
}

bool OAIEnterprise_settings_enterprise_ldap::is_virtual_attribute_enabled_Valid() const{
    return m_virtual_attribute_enabled_isValid;
}

bool OAIEnterprise_settings_enterprise_ldap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bind_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_group_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_sync_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sync_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sync_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_sync_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_attribute_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_settings_enterprise_ldap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
