/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegration_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegration_permissions::OAIIntegration_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegration_permissions::OAIIntegration_permissions() {
    this->initializeModel();
}

OAIIntegration_permissions::~OAIIntegration_permissions() {}

void OAIIntegration_permissions::initializeModel() {

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIIntegration_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegration_permissions::fromJsonObject(QJsonObject json) {

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIIntegration_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegration_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_checks_isSet) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_contents_isSet) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_deployments_isSet) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_issues_isSet) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QString OAIIntegration_permissions::getChecks() const {
    return m_checks;
}
void OAIIntegration_permissions::setChecks(const QString &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAIIntegration_permissions::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAIIntegration_permissions::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAIIntegration_permissions::getContents() const {
    return m_contents;
}
void OAIIntegration_permissions::setContents(const QString &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAIIntegration_permissions::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAIIntegration_permissions::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAIIntegration_permissions::getDeployments() const {
    return m_deployments;
}
void OAIIntegration_permissions::setDeployments(const QString &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIIntegration_permissions::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIIntegration_permissions::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIIntegration_permissions::getIssues() const {
    return m_issues;
}
void OAIIntegration_permissions::setIssues(const QString &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIIntegration_permissions::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIIntegration_permissions::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIIntegration_permissions::getMetadata() const {
    return m_metadata;
}
void OAIIntegration_permissions::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIIntegration_permissions::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIIntegration_permissions::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIIntegration_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegration_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
