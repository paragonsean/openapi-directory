/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerification::OAIVerification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerification::OAIVerification() {
    this->initializeModel();
}

OAIVerification::~OAIVerification() {}

void OAIVerification::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIVerification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerification::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIVerification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerification::asJsonObject() const {
    QJsonObject obj;
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIVerification::getPayload() const {
    return m_payload;
}
void OAIVerification::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIVerification::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIVerification::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIVerification::getReason() const {
    return m_reason;
}
void OAIVerification::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIVerification::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIVerification::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIVerification::getSignature() const {
    return m_signature;
}
void OAIVerification::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIVerification::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIVerification::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIVerification::isVerified() const {
    return m_verified;
}
void OAIVerification::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIVerification::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIVerification::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIVerification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payload_isValid && m_reason_isValid && m_signature_isValid && m_verified_isValid && true;
}

} // namespace OpenAPI
