/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionsCreateOrUpdateOrgSecretRequest;
import org.openapitools.client.model.ActionsCreateOrUpdateRepoSecretRequest;
import org.openapitools.client.model.ActionsCreateSelfHostedRunnerGroupForOrgRequest;
import org.openapitools.client.model.ActionsCreateWorkflowDispatchRequest;
import org.openapitools.client.model.ActionsGetWorkflowWorkflowIdParameter;
import org.openapitools.client.model.ActionsListArtifactsForRepo200Response;
import org.openapitools.client.model.ActionsListJobsForWorkflowRun200Response;
import org.openapitools.client.model.ActionsListOrgSecrets200Response;
import org.openapitools.client.model.ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response;
import org.openapitools.client.model.ActionsListRepoSecrets200Response;
import org.openapitools.client.model.ActionsListRepoWorkflows200Response;
import org.openapitools.client.model.ActionsListSelectedReposForOrgSecret200Response;
import org.openapitools.client.model.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnerGroupsForOrg200Response;
import org.openapitools.client.model.ActionsListSelfHostedRunnersForOrg200Response;
import org.openapitools.client.model.ActionsListWorkflowRunsForRepo200Response;
import org.openapitools.client.model.ActionsOrganizationPermissions;
import org.openapitools.client.model.ActionsPublicKey;
import org.openapitools.client.model.ActionsRepositoryPermissions;
import org.openapitools.client.model.ActionsSecret;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsOrganizationRequest;
import org.openapitools.client.model.ActionsSetGithubActionsPermissionsRepositoryRequest;
import org.openapitools.client.model.ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest;
import org.openapitools.client.model.ActionsSetSelectedReposForOrgSecretRequest;
import org.openapitools.client.model.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
import org.openapitools.client.model.ActionsUpdateSelfHostedRunnerGroupForOrgRequest;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.AuthenticationToken;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response;
import org.openapitools.client.model.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;
import org.openapitools.client.model.Job;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationActionsSecret;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerApplication;
import org.openapitools.client.model.RunnerGroupsOrg;
import org.openapitools.client.model.SelectedActions;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowRun;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionsAddRepoAccessToSelfHostedRunnerGroupInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization">Add repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsAddRepoAccessToSelfHostedRunnerGroupInOrgCall(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        return actionsAddRepoAccessToSelfHostedRunnerGroupInOrgCall(org, runnerGroupId, repositoryId, _callback);

    }

    /**
     * Add repository access to a self-hosted runner group in an organization
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization">Add repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public void actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(String org, Integer runnerGroupId, Integer repositoryId) throws ApiException {
        actionsAddRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(org, runnerGroupId, repositoryId);
    }

    /**
     * Add repository access to a self-hosted runner group in an organization
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization">Add repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsAddRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(String org, Integer runnerGroupId, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add repository access to a self-hosted runner group in an organization (asynchronously)
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization">Add repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsAddRepoAccessToSelfHostedRunnerGroupInOrgAsync(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddSelectedRepoToOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddSelectedRepoToOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgSecret(Async)");
        }

        return actionsAddSelectedRepoToOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public void actionsAddSelectedRepoToOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        actionsAddSelectedRepoToOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsAddSelectedRepoToOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add selected repository to an organization secret (asynchronously)
     * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content when repository was added to the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type is not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-selected-repository-to-an-organization-secret">Add selected repository to an organization secret Documentation</a>
     */
    public okhttp3.Call actionsAddSelectedRepoToOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddSelectedRepoToOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsAddSelfHostedRunnerToGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization">Add a self-hosted runner to a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsAddSelfHostedRunnerToGroupForOrgCall(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsAddSelfHostedRunnerToGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsAddSelfHostedRunnerToGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsAddSelfHostedRunnerToGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsAddSelfHostedRunnerToGroupForOrg(Async)");
        }

        return actionsAddSelfHostedRunnerToGroupForOrgCall(org, runnerGroupId, runnerId, _callback);

    }

    /**
     * Add a self-hosted runner to a group for an organization
     * Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization">Add a self-hosted runner to a group for an organization Documentation</a>
     */
    public void actionsAddSelfHostedRunnerToGroupForOrg(String org, Integer runnerGroupId, Integer runnerId) throws ApiException {
        actionsAddSelfHostedRunnerToGroupForOrgWithHttpInfo(org, runnerGroupId, runnerId);
    }

    /**
     * Add a self-hosted runner to a group for an organization
     * Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization">Add a self-hosted runner to a group for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsAddSelfHostedRunnerToGroupForOrgWithHttpInfo(String org, Integer runnerGroupId, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsAddSelfHostedRunnerToGroupForOrgValidateBeforeCall(org, runnerGroupId, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a self-hosted runner to a group for an organization (asynchronously)
     * Adds a self-hosted runner to a runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization">Add a self-hosted runner to a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsAddSelfHostedRunnerToGroupForOrgAsync(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsAddSelfHostedRunnerToGroupForOrgValidateBeforeCall(org, runnerGroupId, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCancelWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public okhttp3.Call actionsCancelWorkflowRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCancelWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCancelWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCancelWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsCancelWorkflowRun(Async)");
        }

        return actionsCancelWorkflowRunCall(owner, repo, runId, _callback);

    }

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public Object actionsCancelWorkflowRun(String owner, String repo, Integer runId) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCancelWorkflowRunWithHttpInfo(owner, repo, runId);
        return localVarResp.getData();
    }

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public ApiResponse<Object> actionsCancelWorkflowRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsCancelWorkflowRunValidateBeforeCall(owner, repo, runId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a workflow run (asynchronously)
     * Cancels a workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#cancel-a-workflow-run">Cancel a workflow run Documentation</a>
     */
    public okhttp3.Call actionsCancelWorkflowRunAsync(String owner, String repo, Integer runId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCancelWorkflowRunValidateBeforeCall(owner, repo, runId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrUpdateOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateOrgSecretCall(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrUpdateOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrUpdateOrgSecretValidateBeforeCall(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        // verify the required parameter 'actionsCreateOrUpdateOrgSecretRequest' is set
        if (actionsCreateOrUpdateOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrUpdateOrgSecretRequest' when calling actionsCreateOrUpdateOrgSecret(Async)");
        }

        return actionsCreateOrUpdateOrgSecretCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, _callback);

    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public Object actionsCreateOrUpdateOrgSecret(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrUpdateOrgSecretWithHttpInfo(org, secretName, actionsCreateOrUpdateOrgSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrUpdateOrgSecretWithHttpInfo(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update an organization secret (asynchronously)
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret">Create or update an organization secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateOrgSecretAsync(String org, String secretName, ActionsCreateOrUpdateOrgSecretRequest actionsCreateOrUpdateOrgSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrUpdateOrgSecretValidateBeforeCall(org, secretName, actionsCreateOrUpdateOrgSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateOrUpdateRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateRepoSecretCall(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateOrUpdateRepoSecretRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateOrUpdateRepoSecretValidateBeforeCall(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        // verify the required parameter 'actionsCreateOrUpdateRepoSecretRequest' is set
        if (actionsCreateOrUpdateRepoSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateOrUpdateRepoSecretRequest' when calling actionsCreateOrUpdateRepoSecret(Async)");
        }

        return actionsCreateOrUpdateRepoSecretCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, _callback);

    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public Object actionsCreateOrUpdateRepoSecret(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest) throws ApiException {
        ApiResponse<Object> localVarResp = actionsCreateOrUpdateRepoSecretWithHttpInfo(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public ApiResponse<Object> actionsCreateOrUpdateRepoSecretWithHttpInfo(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a repository secret (asynchronously)
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.  #### Example encrypting a secret using Node.js  Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.  &#x60;&#x60;&#x60; const sodium &#x3D; require(&#39;tweetsodium&#39;);  const key &#x3D; \&quot;base64-encoded-public-key\&quot;; const value &#x3D; \&quot;plain-text-secret\&quot;;  // Convert the message and key to Uint8Array&#39;s (Buffer implements that interface) const messageBytes &#x3D; Buffer.from(value); const keyBytes &#x3D; Buffer.from(key, &#39;base64&#39;);  // Encrypt using LibSodium. const encryptedBytes &#x3D; sodium.seal(messageBytes, keyBytes);  // Base64 the encrypted secret const encrypted &#x3D; Buffer.from(encryptedBytes).toString(&#39;base64&#39;);  console.log(encrypted); &#x60;&#x60;&#x60;   #### Example encrypting a secret using Python  Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.  &#x60;&#x60;&#x60; from base64 import b64encode from nacl import encoding, public  def encrypt(public_key: str, secret_value: str) -&gt; str:   \&quot;\&quot;\&quot;Encrypt a Unicode string using the public key.\&quot;\&quot;\&quot;   public_key &#x3D; public.PublicKey(public_key.encode(\&quot;utf-8\&quot;), encoding.Base64Encoder())   sealed_box &#x3D; public.SealedBox(public_key)   encrypted &#x3D; sealed_box.encrypt(secret_value.encode(\&quot;utf-8\&quot;))   return b64encode(encrypted).decode(\&quot;utf-8\&quot;) &#x60;&#x60;&#x60;  #### Example encrypting a secret using C#  Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.  &#x60;&#x60;&#x60; var secretValue &#x3D; System.Text.Encoding.UTF8.GetBytes(\&quot;mySecret\&quot;); var publicKey &#x3D; Convert.FromBase64String(\&quot;2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU&#x3D;\&quot;);  var sealedPublicKeyBox &#x3D; Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);  Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox)); &#x60;&#x60;&#x60;  #### Example encrypting a secret using Ruby  Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.  &#x60;&#x60;&#x60;ruby require \&quot;rbnacl\&quot; require \&quot;base64\&quot;  key &#x3D; Base64.decode64(\&quot;+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0&#x3D;\&quot;) public_key &#x3D; RbNaCl::PublicKey.new(key)  box &#x3D; RbNaCl::Boxes::Sealed.from_public_key(public_key) encrypted_secret &#x3D; box.encrypt(\&quot;my_secret\&quot;)  # Print the base64 encoded secret puts Base64.strict_encode64(encrypted_secret) &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsCreateOrUpdateRepoSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response when creating a secret </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Response when updating a secret </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-a-repository-secret">Create or update a repository secret Documentation</a>
     */
    public okhttp3.Call actionsCreateOrUpdateRepoSecretAsync(String owner, String repo, String secretName, ActionsCreateOrUpdateRepoSecretRequest actionsCreateOrUpdateRepoSecretRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateOrUpdateRepoSecretValidateBeforeCall(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRegistrationTokenForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/registration-token"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRegistrationTokenForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateRegistrationTokenForOrg(Async)");
        }

        return actionsCreateRegistrationTokenForOrgCall(org, _callback);

    }

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public AuthenticationToken actionsCreateRegistrationTokenForOrg(String org) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRegistrationTokenForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRegistrationTokenForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a registration token for an organization (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using registration token  Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-an-organization">Create a registration token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForOrgAsync(String org, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRegistrationTokenForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/registration-token"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRegistrationTokenForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateRegistrationTokenForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateRegistrationTokenForRepo(Async)");
        }

        return actionsCreateRegistrationTokenForRepoCall(owner, repo, _callback);

    }

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public AuthenticationToken actionsCreateRegistrationTokenForRepo(String owner, String repo) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRegistrationTokenForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRegistrationTokenForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a registration token for a repository (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using registration token   Configure your self-hosted runner, replacing &#x60;TOKEN&#x60; with the registration token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-registration-token-for-a-repository">Create a registration token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRegistrationTokenForRepoAsync(String owner, String repo, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRegistrationTokenForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRemoveTokenForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/remove-token"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRemoveTokenForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateRemoveTokenForOrg(Async)");
        }

        return actionsCreateRemoveTokenForOrgCall(org, _callback);

    }

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public AuthenticationToken actionsCreateRemoveTokenForOrg(String org) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRemoveTokenForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRemoveTokenForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRemoveTokenForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a remove token for an organization (asynchronously)
     * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.  #### Example using remove token  To remove your self-hosted runner from an organization, replace &#x60;TOKEN&#x60; with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-an-organization">Create a remove token for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForOrgAsync(String org, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRemoveTokenForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateRemoveTokenForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/remove-token"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateRemoveTokenForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateRemoveTokenForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateRemoveTokenForRepo(Async)");
        }

        return actionsCreateRemoveTokenForRepoCall(owner, repo, _callback);

    }

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return AuthenticationToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public AuthenticationToken actionsCreateRemoveTokenForRepo(String owner, String repo) throws ApiException {
        ApiResponse<AuthenticationToken> localVarResp = actionsCreateRemoveTokenForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;AuthenticationToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public ApiResponse<AuthenticationToken> actionsCreateRemoveTokenForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateRemoveTokenForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a remove token for a repository (asynchronously)
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.  #### Example using remove token   To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-remove-token-for-a-repository">Create a remove token for a repository Documentation</a>
     */
    public okhttp3.Call actionsCreateRemoveTokenForRepoAsync(String owner, String repo, final ApiCallback<AuthenticationToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateRemoveTokenForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateSelfHostedRunnerGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateSelfHostedRunnerGroupForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization">Create a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateSelfHostedRunnerGroupForOrgCall(String org, ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateSelfHostedRunnerGroupForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateSelfHostedRunnerGroupForOrgValidateBeforeCall(String org, ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsCreateSelfHostedRunnerGroupForOrg(Async)");
        }

        // verify the required parameter 'actionsCreateSelfHostedRunnerGroupForOrgRequest' is set
        if (actionsCreateSelfHostedRunnerGroupForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateSelfHostedRunnerGroupForOrgRequest' when calling actionsCreateSelfHostedRunnerGroupForOrg(Async)");
        }

        return actionsCreateSelfHostedRunnerGroupForOrgCall(org, actionsCreateSelfHostedRunnerGroupForOrgRequest, _callback);

    }

    /**
     * Create a self-hosted runner group for an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateSelfHostedRunnerGroupForOrgRequest  (required)
     * @return RunnerGroupsOrg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization">Create a self-hosted runner group for an organization Documentation</a>
     */
    public RunnerGroupsOrg actionsCreateSelfHostedRunnerGroupForOrg(String org, ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest) throws ApiException {
        ApiResponse<RunnerGroupsOrg> localVarResp = actionsCreateSelfHostedRunnerGroupForOrgWithHttpInfo(org, actionsCreateSelfHostedRunnerGroupForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Create a self-hosted runner group for an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateSelfHostedRunnerGroupForOrgRequest  (required)
     * @return ApiResponse&lt;RunnerGroupsOrg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization">Create a self-hosted runner group for an organization Documentation</a>
     */
    public ApiResponse<RunnerGroupsOrg> actionsCreateSelfHostedRunnerGroupForOrgWithHttpInfo(String org, ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateSelfHostedRunnerGroupForOrgValidateBeforeCall(org, actionsCreateSelfHostedRunnerGroupForOrgRequest, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a self-hosted runner group for an organization (asynchronously)
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Creates a new self-hosted runner group for an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsCreateSelfHostedRunnerGroupForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization">Create a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsCreateSelfHostedRunnerGroupForOrgAsync(String org, ActionsCreateSelfHostedRunnerGroupForOrgRequest actionsCreateSelfHostedRunnerGroupForOrgRequest, final ApiCallback<RunnerGroupsOrg> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateSelfHostedRunnerGroupForOrgValidateBeforeCall(org, actionsCreateSelfHostedRunnerGroupForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsCreateWorkflowDispatch
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public okhttp3.Call actionsCreateWorkflowDispatchCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsCreateWorkflowDispatchRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsCreateWorkflowDispatchValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsCreateWorkflowDispatch(Async)");
        }

        // verify the required parameter 'actionsCreateWorkflowDispatchRequest' is set
        if (actionsCreateWorkflowDispatchRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsCreateWorkflowDispatchRequest' when calling actionsCreateWorkflowDispatch(Async)");
        }

        return actionsCreateWorkflowDispatchCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, _callback);

    }

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public void actionsCreateWorkflowDispatch(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest) throws ApiException {
        actionsCreateWorkflowDispatchWithHttpInfo(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest);
    }

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public ApiResponse<Void> actionsCreateWorkflowDispatchWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsCreateWorkflowDispatchValidateBeforeCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a workflow dispatch event (asynchronously)
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint. For more information, see \&quot;[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actionsCreateWorkflowDispatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-a-workflow-dispatch-event">Create a workflow dispatch event Documentation</a>
     */
    public okhttp3.Call actionsCreateWorkflowDispatchAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, ActionsCreateWorkflowDispatchRequest actionsCreateWorkflowDispatchRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsCreateWorkflowDispatchValidateBeforeCall(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public okhttp3.Call actionsDeleteArtifactCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsDeleteArtifact(Async)");
        }

        return actionsDeleteArtifactCall(owner, repo, artifactId, _callback);

    }

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public void actionsDeleteArtifact(String owner, String repo, Integer artifactId) throws ApiException {
        actionsDeleteArtifactWithHttpInfo(owner, repo, artifactId);
    }

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteArtifactWithHttpInfo(String owner, String repo, Integer artifactId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteArtifactValidateBeforeCall(owner, repo, artifactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an artifact (asynchronously)
     * Deletes an artifact for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-artifact">Delete an artifact Documentation</a>
     */
    public okhttp3.Call actionsDeleteArtifactAsync(String owner, String repo, Integer artifactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteArtifactValidateBeforeCall(owner, repo, artifactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsDeleteOrgSecret(Async)");
        }

        return actionsDeleteOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public void actionsDeleteOrgSecret(String org, String secretName) throws ApiException {
        actionsDeleteOrgSecretWithHttpInfo(org, secretName);
    }

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteOrgSecretValidateBeforeCall(org, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an organization secret (asynchronously)
     * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-an-organization-secret">Delete an organization secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteOrgSecretAsync(String org, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteOrgSecretValidateBeforeCall(org, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsDeleteRepoSecret(Async)");
        }

        return actionsDeleteRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public void actionsDeleteRepoSecret(String owner, String repo, String secretName) throws ApiException {
        actionsDeleteRepoSecretWithHttpInfo(owner, repo, secretName);
    }

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository secret (asynchronously)
     * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-repository-secret">Delete a repository secret Documentation</a>
     */
    public okhttp3.Call actionsDeleteRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteSelfHostedRunnerFromOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerFromOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromOrg(Async)");
        }

        return actionsDeleteSelfHostedRunnerFromOrgCall(org, runnerId, _callback);

    }

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public void actionsDeleteSelfHostedRunnerFromOrg(String org, Integer runnerId) throws ApiException {
        actionsDeleteSelfHostedRunnerFromOrgWithHttpInfo(org, runnerId);
    }

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteSelfHostedRunnerFromOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(org, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner from an organization (asynchronously)
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization">Delete a self-hosted runner from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromOrgAsync(String org, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromOrgValidateBeforeCall(org, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteSelfHostedRunnerFromRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromRepo(Async)");
        }

        return actionsDeleteSelfHostedRunnerFromRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public void actionsDeleteSelfHostedRunnerFromRepo(String owner, String repo, Integer runnerId) throws ApiException {
        actionsDeleteSelfHostedRunnerFromRepoWithHttpInfo(owner, repo, runnerId);
    }

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteSelfHostedRunnerFromRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(owner, repo, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner from a repository (asynchronously)
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository">Delete a self-hosted runner from a repository Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerFromRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerFromRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteSelfHostedRunnerGroupFromOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization">Delete a self-hosted runner group from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerGroupFromOrgCall(String org, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteSelfHostedRunnerGroupFromOrgValidateBeforeCall(String org, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerGroupFromOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsDeleteSelfHostedRunnerGroupFromOrg(Async)");
        }

        return actionsDeleteSelfHostedRunnerGroupFromOrgCall(org, runnerGroupId, _callback);

    }

    /**
     * Delete a self-hosted runner group from an organization
     * Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization">Delete a self-hosted runner group from an organization Documentation</a>
     */
    public void actionsDeleteSelfHostedRunnerGroupFromOrg(String org, Integer runnerGroupId) throws ApiException {
        actionsDeleteSelfHostedRunnerGroupFromOrgWithHttpInfo(org, runnerGroupId);
    }

    /**
     * Delete a self-hosted runner group from an organization
     * Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization">Delete a self-hosted runner group from an organization Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteSelfHostedRunnerGroupFromOrgWithHttpInfo(String org, Integer runnerGroupId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerGroupFromOrgValidateBeforeCall(org, runnerGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a self-hosted runner group from an organization (asynchronously)
     * Deletes a self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization">Delete a self-hosted runner group from an organization Documentation</a>
     */
    public okhttp3.Call actionsDeleteSelfHostedRunnerGroupFromOrgAsync(String org, Integer runnerGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteSelfHostedRunnerGroupFromOrgValidateBeforeCall(org, runnerGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRun(Async)");
        }

        return actionsDeleteWorkflowRunCall(owner, repo, runId, _callback);

    }

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public void actionsDeleteWorkflowRun(String owner, String repo, Integer runId) throws ApiException {
        actionsDeleteWorkflowRunWithHttpInfo(owner, repo, runId);
    }

    /**
     * Delete a workflow run
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteWorkflowRunWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteWorkflowRunValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a workflow run (asynchronously)
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-a-workflow-run">Delete a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteWorkflowRunValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDeleteWorkflowRunLogs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunLogsCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDeleteWorkflowRunLogsValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRunLogs(Async)");
        }

        return actionsDeleteWorkflowRunLogsCall(owner, repo, runId, _callback);

    }

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public void actionsDeleteWorkflowRunLogs(String owner, String repo, Integer runId) throws ApiException {
        actionsDeleteWorkflowRunLogsWithHttpInfo(owner, repo, runId);
    }

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public ApiResponse<Void> actionsDeleteWorkflowRunLogsWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDeleteWorkflowRunLogsValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete workflow run logs (asynchronously)
     * Deletes all logs for a workflow run. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#delete-workflow-run-logs">Delete workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDeleteWorkflowRunLogsAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDeleteWorkflowRunLogsValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDisableSelectedRepositoryGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsDisableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsDisableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        return actionsDisableSelectedRepositoryGithubActionsOrganizationCall(org, repositoryId, _callback);

    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public void actionsDisableSelectedRepositoryGithubActionsOrganization(String org, Integer repositoryId) throws ApiException {
        actionsDisableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(org, repositoryId);
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsDisableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(String org, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable a selected repository for GitHub Actions in an organization (asynchronously)
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization">Disable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsDisableSelectedRepositoryGithubActionsOrganizationAsync(String org, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDisableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDisableWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public okhttp3.Call actionsDisableWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDisableWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDisableWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDisableWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsDisableWorkflow(Async)");
        }

        return actionsDisableWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Disable a workflow
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public void actionsDisableWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        actionsDisableWorkflowWithHttpInfo(owner, repo, workflowId);
    }

    /**
     * Disable a workflow
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public ApiResponse<Void> actionsDisableWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsDisableWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable a workflow (asynchronously)
     * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#disable-a-workflow">Disable a workflow Documentation</a>
     */
    public okhttp3.Call actionsDisableWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDisableWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public okhttp3.Call actionsDownloadArtifactCall(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()))
            .replace("{" + "archive_format" + "}", localVarApiClient.escapeString(archiveFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsDownloadArtifact(Async)");
        }

        // verify the required parameter 'archiveFormat' is set
        if (archiveFormat == null) {
            throw new ApiException("Missing the required parameter 'archiveFormat' when calling actionsDownloadArtifact(Async)");
        }

        return actionsDownloadArtifactCall(owner, repo, artifactId, archiveFormat, _callback);

    }

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public void actionsDownloadArtifact(String owner, String repo, Integer artifactId, String archiveFormat) throws ApiException {
        actionsDownloadArtifactWithHttpInfo(owner, repo, artifactId, archiveFormat);
    }

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadArtifactWithHttpInfo(String owner, String repo, Integer artifactId, String archiveFormat) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadArtifactValidateBeforeCall(owner, repo, artifactId, archiveFormat, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download an artifact (asynchronously)
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param archiveFormat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 410 </td><td> Gone </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-an-artifact">Download an artifact Documentation</a>
     */
    public okhttp3.Call actionsDownloadArtifactAsync(String owner, String repo, Integer artifactId, String archiveFormat, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadArtifactValidateBeforeCall(owner, repo, artifactId, archiveFormat, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadJobLogsForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDownloadJobLogsForWorkflowRunCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling actionsDownloadJobLogsForWorkflowRun(Async)");
        }

        return actionsDownloadJobLogsForWorkflowRunCall(owner, repo, jobId, _callback);

    }

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public void actionsDownloadJobLogsForWorkflowRun(String owner, String repo, Integer jobId) throws ApiException {
        actionsDownloadJobLogsForWorkflowRunWithHttpInfo(owner, repo, jobId);
    }

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadJobLogsForWorkflowRunWithHttpInfo(String owner, String repo, Integer jobId) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(owner, repo, jobId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download job logs for a workflow run (asynchronously)
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-job-logs-for-a-workflow-run">Download job logs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsDownloadJobLogsForWorkflowRunAsync(String owner, String repo, Integer jobId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadJobLogsForWorkflowRunValidateBeforeCall(owner, repo, jobId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsDownloadWorkflowRunLogs
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunLogsCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/logs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsDownloadWorkflowRunLogsValidateBeforeCall(String owner, String repo, Integer runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunLogs(Async)");
        }

        return actionsDownloadWorkflowRunLogsCall(owner, repo, runId, _callback);

    }

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public void actionsDownloadWorkflowRunLogs(String owner, String repo, Integer runId) throws ApiException {
        actionsDownloadWorkflowRunLogsWithHttpInfo(owner, repo, runId);
    }

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public ApiResponse<Void> actionsDownloadWorkflowRunLogsWithHttpInfo(String owner, String repo, Integer runId) throws ApiException {
        okhttp3.Call localVarCall = actionsDownloadWorkflowRunLogsValidateBeforeCall(owner, repo, runId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download workflow run logs (asynchronously)
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 302 </td><td> Response </td><td>  * Location -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#download-workflow-run-logs">Download workflow run logs Documentation</a>
     */
    public okhttp3.Call actionsDownloadWorkflowRunLogsAsync(String owner, String repo, Integer runId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsDownloadWorkflowRunLogsValidateBeforeCall(owner, repo, runId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsEnableSelectedRepositoryGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(String org, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsEnableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsEnableSelectedRepositoryGithubActionsOrganization(Async)");
        }

        return actionsEnableSelectedRepositoryGithubActionsOrganizationCall(org, repositoryId, _callback);

    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public void actionsEnableSelectedRepositoryGithubActionsOrganization(String org, Integer repositoryId) throws ApiException {
        actionsEnableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(org, repositoryId);
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsEnableSelectedRepositoryGithubActionsOrganizationWithHttpInfo(String org, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a selected repository for GitHub Actions in an organization (asynchronously)
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization">Enable a selected repository for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsEnableSelectedRepositoryGithubActionsOrganizationAsync(String org, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsEnableSelectedRepositoryGithubActionsOrganizationValidateBeforeCall(org, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsEnableWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public okhttp3.Call actionsEnableWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsEnableWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsEnableWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsEnableWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsEnableWorkflow(Async)");
        }

        return actionsEnableWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Enable a workflow
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public void actionsEnableWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        actionsEnableWorkflowWithHttpInfo(owner, repo, workflowId);
    }

    /**
     * Enable a workflow
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public ApiResponse<Void> actionsEnableWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsEnableWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Enable a workflow (asynchronously)
     * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#enable-a-workflow">Enable a workflow Documentation</a>
     */
    public okhttp3.Call actionsEnableWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsEnableWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetAllowedActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsOrganizationCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/selected-actions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetAllowedActionsOrganizationValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetAllowedActionsOrganization(Async)");
        }

        return actionsGetAllowedActionsOrganizationCall(org, _callback);

    }

    /**
     * Get allowed actions for an organization
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return SelectedActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions for an organization Documentation</a>
     */
    public SelectedActions actionsGetAllowedActionsOrganization(String org) throws ApiException {
        ApiResponse<SelectedActions> localVarResp = actionsGetAllowedActionsOrganizationWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get allowed actions for an organization
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;SelectedActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions for an organization Documentation</a>
     */
    public ApiResponse<SelectedActions> actionsGetAllowedActionsOrganizationWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetAllowedActionsOrganizationValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed actions for an organization (asynchronously)
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-an-organization">Get allowed actions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsOrganizationAsync(String org, final ApiCallback<SelectedActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetAllowedActionsOrganizationValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetAllowedActionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetAllowedActionsRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetAllowedActionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetAllowedActionsRepository(Async)");
        }

        return actionsGetAllowedActionsRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get allowed actions for a repository
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return SelectedActions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions for a repository Documentation</a>
     */
    public SelectedActions actionsGetAllowedActionsRepository(String owner, String repo) throws ApiException {
        ApiResponse<SelectedActions> localVarResp = actionsGetAllowedActionsRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get allowed actions for a repository
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;SelectedActions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions for a repository Documentation</a>
     */
    public ApiResponse<SelectedActions> actionsGetAllowedActionsRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetAllowedActionsRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get allowed actions for a repository (asynchronously)
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-allowed-actions-for-a-repository">Get allowed actions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetAllowedActionsRepositoryAsync(String owner, String repo, final ApiCallback<SelectedActions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetAllowedActionsRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<SelectedActions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetArtifact
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public okhttp3.Call actionsGetArtifactCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "artifact_id" + "}", localVarApiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetArtifactValidateBeforeCall(String owner, String repo, Integer artifactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetArtifact(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetArtifact(Async)");
        }

        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling actionsGetArtifact(Async)");
        }

        return actionsGetArtifactCall(owner, repo, artifactId, _callback);

    }

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public Artifact actionsGetArtifact(String owner, String repo, Integer artifactId) throws ApiException {
        ApiResponse<Artifact> localVarResp = actionsGetArtifactWithHttpInfo(owner, repo, artifactId);
        return localVarResp.getData();
    }

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public ApiResponse<Artifact> actionsGetArtifactWithHttpInfo(String owner, String repo, Integer artifactId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetArtifactValidateBeforeCall(owner, repo, artifactId, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an artifact (asynchronously)
     * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param artifactId The unique identifier of the artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-artifact">Get an artifact Documentation</a>
     */
    public okhttp3.Call actionsGetArtifactAsync(String owner, String repo, Integer artifactId, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetArtifactValidateBeforeCall(owner, repo, artifactId, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsOrganizationCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetGithubActionsPermissionsOrganization(Async)");
        }

        return actionsGetGithubActionsPermissionsOrganizationCall(org, _callback);

    }

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsOrganizationPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public ActionsOrganizationPermissions actionsGetGithubActionsPermissionsOrganization(String org) throws ApiException {
        ApiResponse<ActionsOrganizationPermissions> localVarResp = actionsGetGithubActionsPermissionsOrganizationWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsOrganizationPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public ApiResponse<ActionsOrganizationPermissions> actionsGetGithubActionsPermissionsOrganizationWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsOrganizationPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions permissions for an organization (asynchronously)
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-an-organization">Get GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsOrganizationAsync(String org, final ApiCallback<ActionsOrganizationPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsOrganizationValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsOrganizationPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetGithubActionsPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsRepositoryCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetGithubActionsPermissionsRepository(Async)");
        }

        return actionsGetGithubActionsPermissionsRepositoryCall(owner, repo, _callback);

    }

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsRepositoryPermissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public ActionsRepositoryPermissions actionsGetGithubActionsPermissionsRepository(String owner, String repo) throws ApiException {
        ApiResponse<ActionsRepositoryPermissions> localVarResp = actionsGetGithubActionsPermissionsRepositoryWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsRepositoryPermissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public ApiResponse<ActionsRepositoryPermissions> actionsGetGithubActionsPermissionsRepositoryWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsRepositoryPermissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GitHub Actions permissions for a repository (asynchronously)
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-github-actions-permissions-for-a-repository">Get GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetGithubActionsPermissionsRepositoryAsync(String owner, String repo, final ApiCallback<ActionsRepositoryPermissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsRepositoryPermissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetJobForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetJobForWorkflowRunCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/jobs/{job_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetJobForWorkflowRunValidateBeforeCall(String owner, String repo, Integer jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetJobForWorkflowRun(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling actionsGetJobForWorkflowRun(Async)");
        }

        return actionsGetJobForWorkflowRunCall(owner, repo, jobId, _callback);

    }

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public Job actionsGetJobForWorkflowRun(String owner, String repo, Integer jobId) throws ApiException {
        ApiResponse<Job> localVarResp = actionsGetJobForWorkflowRunWithHttpInfo(owner, repo, jobId);
        return localVarResp.getData();
    }

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public ApiResponse<Job> actionsGetJobForWorkflowRunWithHttpInfo(String owner, String repo, Integer jobId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a job for a workflow run (asynchronously)
     * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param jobId The unique identifier of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-job-for-a-workflow-run">Get a job for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetJobForWorkflowRunAsync(String owner, String repo, Integer jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetJobForWorkflowRunValidateBeforeCall(owner, repo, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetOrgPublicKey
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call actionsGetOrgPublicKeyCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/public-key"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetOrgPublicKeyValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetOrgPublicKey(Async)");
        }

        return actionsGetOrgPublicKeyCall(org, _callback);

    }

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ActionsPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public ActionsPublicKey actionsGetOrgPublicKey(String org) throws ApiException {
        ApiResponse<ActionsPublicKey> localVarResp = actionsGetOrgPublicKeyWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public ApiResponse<ActionsPublicKey> actionsGetOrgPublicKeyWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsGetOrgPublicKeyValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization public key (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key">Get an organization public key Documentation</a>
     */
    public okhttp3.Call actionsGetOrgPublicKeyAsync(String org, final ApiCallback<ActionsPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetOrgPublicKeyValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call actionsGetOrgSecretCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetOrgSecretValidateBeforeCall(String org, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsGetOrgSecret(Async)");
        }

        return actionsGetOrgSecretCall(org, secretName, _callback);

    }

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return OrganizationActionsSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public OrganizationActionsSecret actionsGetOrgSecret(String org, String secretName) throws ApiException {
        ApiResponse<OrganizationActionsSecret> localVarResp = actionsGetOrgSecretWithHttpInfo(org, secretName);
        return localVarResp.getData();
    }

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;OrganizationActionsSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public ApiResponse<OrganizationActionsSecret> actionsGetOrgSecretWithHttpInfo(String org, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetOrgSecretValidateBeforeCall(org, secretName, null);
        Type localVarReturnType = new TypeToken<OrganizationActionsSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an organization secret (asynchronously)
     * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-secret">Get an organization secret Documentation</a>
     */
    public okhttp3.Call actionsGetOrgSecretAsync(String org, String secretName, final ApiCallback<OrganizationActionsSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetOrgSecretValidateBeforeCall(org, secretName, _callback);
        Type localVarReturnType = new TypeToken<OrganizationActionsSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoPublicKey
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call actionsGetRepoPublicKeyCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/public-key"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoPublicKeyValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetRepoPublicKey(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoPublicKey(Async)");
        }

        return actionsGetRepoPublicKeyCall(owner, repo, _callback);

    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ActionsPublicKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public ActionsPublicKey actionsGetRepoPublicKey(String owner, String repo) throws ApiException {
        ApiResponse<ActionsPublicKey> localVarResp = actionsGetRepoPublicKeyWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;ActionsPublicKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public ApiResponse<ActionsPublicKey> actionsGetRepoPublicKeyWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoPublicKeyValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository public key (asynchronously)
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key">Get a repository public key Documentation</a>
     */
    public okhttp3.Call actionsGetRepoPublicKeyAsync(String owner, String repo, final ApiCallback<ActionsPublicKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoPublicKeyValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<ActionsPublicKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetRepoSecret
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call actionsGetRepoSecretCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets/{secret_name}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetRepoSecretValidateBeforeCall(String owner, String repo, String secretName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetRepoSecret(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetRepoSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsGetRepoSecret(Async)");
        }

        return actionsGetRepoSecretCall(owner, repo, secretName, _callback);

    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ActionsSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public ActionsSecret actionsGetRepoSecret(String owner, String repo, String secretName) throws ApiException {
        ApiResponse<ActionsSecret> localVarResp = actionsGetRepoSecretWithHttpInfo(owner, repo, secretName);
        return localVarResp.getData();
    }

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @return ApiResponse&lt;ActionsSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public ApiResponse<ActionsSecret> actionsGetRepoSecretWithHttpInfo(String owner, String repo, String secretName) throws ApiException {
        okhttp3.Call localVarCall = actionsGetRepoSecretValidateBeforeCall(owner, repo, secretName, null);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository secret (asynchronously)
     * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-secret">Get a repository secret Documentation</a>
     */
    public okhttp3.Call actionsGetRepoSecretAsync(String owner, String repo, String secretName, final ApiCallback<ActionsSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetRepoSecretValidateBeforeCall(owner, repo, secretName, _callback);
        Type localVarReturnType = new TypeToken<ActionsSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetSelfHostedRunnerForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForOrgCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetSelfHostedRunnerForOrgValidateBeforeCall(String org, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForOrg(Async)");
        }

        return actionsGetSelfHostedRunnerForOrgCall(org, runnerId, _callback);

    }

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public Runner actionsGetSelfHostedRunnerForOrg(String org, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = actionsGetSelfHostedRunnerForOrgWithHttpInfo(org, runnerId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public ApiResponse<Runner> actionsGetSelfHostedRunnerForOrgWithHttpInfo(String org, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner for an organization (asynchronously)
     * Gets a specific self-hosted runner configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-an-organization">Get a self-hosted runner for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForOrgAsync(String org, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForOrgValidateBeforeCall(org, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetSelfHostedRunnerForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForRepoCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/{runner_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetSelfHostedRunnerForRepoValidateBeforeCall(String owner, String repo, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForRepo(Async)");
        }

        return actionsGetSelfHostedRunnerForRepoCall(owner, repo, runnerId, _callback);

    }

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public Runner actionsGetSelfHostedRunnerForRepo(String owner, String repo, Integer runnerId) throws ApiException {
        ApiResponse<Runner> localVarResp = actionsGetSelfHostedRunnerForRepoWithHttpInfo(owner, repo, runnerId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public ApiResponse<Runner> actionsGetSelfHostedRunnerForRepoWithHttpInfo(String owner, String repo, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner for a repository (asynchronously)
     * Gets a specific self-hosted runner configured in a repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-for-a-repository">Get a self-hosted runner for a repository Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerForRepoAsync(String owner, String repo, Integer runnerId, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerForRepoValidateBeforeCall(owner, repo, runnerId, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetSelfHostedRunnerGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization">Get a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerGroupForOrgCall(String org, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetSelfHostedRunnerGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsGetSelfHostedRunnerGroupForOrg(Async)");
        }

        return actionsGetSelfHostedRunnerGroupForOrgCall(org, runnerGroupId, _callback);

    }

    /**
     * Get a self-hosted runner group for an organization
     * Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return RunnerGroupsOrg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization">Get a self-hosted runner group for an organization Documentation</a>
     */
    public RunnerGroupsOrg actionsGetSelfHostedRunnerGroupForOrg(String org, Integer runnerGroupId) throws ApiException {
        ApiResponse<RunnerGroupsOrg> localVarResp = actionsGetSelfHostedRunnerGroupForOrgWithHttpInfo(org, runnerGroupId);
        return localVarResp.getData();
    }

    /**
     * Get a self-hosted runner group for an organization
     * Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @return ApiResponse&lt;RunnerGroupsOrg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization">Get a self-hosted runner group for an organization Documentation</a>
     */
    public ApiResponse<RunnerGroupsOrg> actionsGetSelfHostedRunnerGroupForOrgWithHttpInfo(String org, Integer runnerGroupId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerGroupForOrgValidateBeforeCall(org, runnerGroupId, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a self-hosted runner group for an organization (asynchronously)
     * Gets a specific self-hosted runner group for an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization">Get a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsGetSelfHostedRunnerGroupForOrgAsync(String org, Integer runnerGroupId, final ApiCallback<RunnerGroupsOrg> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetSelfHostedRunnerGroupForOrgValidateBeforeCall(org, runnerGroupId, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflow(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsGetWorkflow(Async)");
        }

        return actionsGetWorkflowCall(owner, repo, workflowId, _callback);

    }

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public Workflow actionsGetWorkflow(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        ApiResponse<Workflow> localVarResp = actionsGetWorkflowWithHttpInfo(owner, repo, workflowId);
        return localVarResp.getData();
    }

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public ApiResponse<Workflow> actionsGetWorkflowWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowValidateBeforeCall(owner, repo, workflowId, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workflow (asynchronously)
     * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow">Get a workflow Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowValidateBeforeCall(owner, repo, workflowId, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsGetWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunCall(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsGetWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsGetWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsGetWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsGetWorkflowRun(Async)");
        }

        return actionsGetWorkflowRunCall(owner, repo, runId, excludePullRequests, _callback);

    }

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return WorkflowRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public WorkflowRun actionsGetWorkflowRun(String owner, String repo, Integer runId, Boolean excludePullRequests) throws ApiException {
        ApiResponse<WorkflowRun> localVarResp = actionsGetWorkflowRunWithHttpInfo(owner, repo, runId, excludePullRequests);
        return localVarResp.getData();
    }

    /**
     * Get a workflow run
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ApiResponse&lt;WorkflowRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public ApiResponse<WorkflowRun> actionsGetWorkflowRunWithHttpInfo(String owner, String repo, Integer runId, Boolean excludePullRequests) throws ApiException {
        okhttp3.Call localVarCall = actionsGetWorkflowRunValidateBeforeCall(owner, repo, runId, excludePullRequests, null);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a workflow run (asynchronously)
     * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-workflow-run">Get a workflow run Documentation</a>
     */
    public okhttp3.Call actionsGetWorkflowRunAsync(String owner, String repo, Integer runId, Boolean excludePullRequests, final ApiCallback<WorkflowRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsGetWorkflowRunValidateBeforeCall(owner, repo, runId, excludePullRequests, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListArtifactsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public okhttp3.Call actionsListArtifactsForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/artifacts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListArtifactsForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListArtifactsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListArtifactsForRepo(Async)");
        }

        return actionsListArtifactsForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListArtifactsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public ActionsListArtifactsForRepo200Response actionsListArtifactsForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListArtifactsForRepo200Response> localVarResp = actionsListArtifactsForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListArtifactsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public ApiResponse<ActionsListArtifactsForRepo200Response> actionsListArtifactsForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListArtifactsForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List artifacts for a repository (asynchronously)
     * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-artifacts-for-a-repository">List artifacts for a repository Documentation</a>
     */
    public okhttp3.Call actionsListArtifactsForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListArtifactsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListArtifactsForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListJobsForWorkflowRun
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunCall(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListJobsForWorkflowRunValidateBeforeCall(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRun(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRun(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRun(Async)");
        }

        return actionsListJobsForWorkflowRunCall(owner, repo, runId, filter, perPage, page, _callback);

    }

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListJobsForWorkflowRun200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public ActionsListJobsForWorkflowRun200Response actionsListJobsForWorkflowRun(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListJobsForWorkflowRun200Response> localVarResp = actionsListJobsForWorkflowRunWithHttpInfo(owner, repo, runId, filter, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListJobsForWorkflowRun200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public ApiResponse<ActionsListJobsForWorkflowRun200Response> actionsListJobsForWorkflowRunWithHttpInfo(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunValidateBeforeCall(owner, repo, runId, filter, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRun200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List jobs for a workflow run (asynchronously)
     * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-jobs-for-a-workflow-run">List jobs for a workflow run Documentation</a>
     */
    public okhttp3.Call actionsListJobsForWorkflowRunAsync(String owner, String repo, Integer runId, String filter, Integer perPage, Integer page, final ApiCallback<ActionsListJobsForWorkflowRun200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListJobsForWorkflowRunValidateBeforeCall(owner, repo, runId, filter, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListJobsForWorkflowRun200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListOrgSecrets
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListOrgSecretsCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListOrgSecretsValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListOrgSecrets(Async)");
        }

        return actionsListOrgSecretsCall(org, perPage, page, _callback);

    }

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListOrgSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public ActionsListOrgSecrets200Response actionsListOrgSecrets(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListOrgSecrets200Response> localVarResp = actionsListOrgSecretsWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListOrgSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public ApiResponse<ActionsListOrgSecrets200Response> actionsListOrgSecretsWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListOrgSecretsValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListOrgSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization secrets (asynchronously)
     * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-organization-secrets">List organization secrets Documentation</a>
     */
    public okhttp3.Call actionsListOrgSecretsAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListOrgSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListOrgSecretsValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListOrgSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoAccessToSelfHostedRunnerGroupInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization">List repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsListRepoAccessToSelfHostedRunnerGroupInOrgCall(String org, Integer runnerGroupId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsListRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        return actionsListRepoAccessToSelfHostedRunnerGroupInOrgCall(org, runnerGroupId, page, perPage, _callback);

    }

    /**
     * List repository access to a self-hosted runner group in an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization">List repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response actionsListRepoAccessToSelfHostedRunnerGroupInOrg(String org, Integer runnerGroupId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response> localVarResp = actionsListRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(org, runnerGroupId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List repository access to a self-hosted runner group in an organization
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization">List repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public ApiResponse<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response> actionsListRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(String org, Integer runnerGroupId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository access to a self-hosted runner group in an organization (asynchronously)
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \&quot;[GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products).\&quot;  Lists the repositories with access to a self-hosted runner group configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization">List repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsListRepoAccessToSelfHostedRunnerGroupInOrgAsync(String org, Integer runnerGroupId, Integer page, Integer perPage, final ApiCallback<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoSecrets
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoSecretsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/secrets"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoSecretsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoSecrets(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoSecrets(Async)");
        }

        return actionsListRepoSecretsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoSecrets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public ActionsListRepoSecrets200Response actionsListRepoSecrets(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoSecrets200Response> localVarResp = actionsListRepoSecretsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoSecrets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public ApiResponse<ActionsListRepoSecrets200Response> actionsListRepoSecretsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoSecrets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository secrets (asynchronously)
     * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; repository permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-secrets">List repository secrets Documentation</a>
     */
    public okhttp3.Call actionsListRepoSecretsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoSecrets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoSecretsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoSecrets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRepoWorkflows
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoWorkflowsCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRepoWorkflowsValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRepoWorkflows(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRepoWorkflows(Async)");
        }

        return actionsListRepoWorkflowsCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListRepoWorkflows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public ActionsListRepoWorkflows200Response actionsListRepoWorkflows(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListRepoWorkflows200Response> localVarResp = actionsListRepoWorkflowsWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List repository workflows
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListRepoWorkflows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public ApiResponse<ActionsListRepoWorkflows200Response> actionsListRepoWorkflowsWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListRepoWorkflowsValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListRepoWorkflows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List repository workflows (asynchronously)
     * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-repository-workflows">List repository workflows Documentation</a>
     */
    public okhttp3.Call actionsListRepoWorkflowsAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListRepoWorkflows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRepoWorkflowsValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListRepoWorkflows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRunnerApplicationsForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForOrgCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners/downloads"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRunnerApplicationsForOrgValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListRunnerApplicationsForOrg(Async)");
        }

        return actionsListRunnerApplicationsForOrgCall(org, _callback);

    }

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return List&lt;RunnerApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public List<RunnerApplication> actionsListRunnerApplicationsForOrg(String org) throws ApiException {
        ApiResponse<List<RunnerApplication>> localVarResp = actionsListRunnerApplicationsForOrgWithHttpInfo(org);
        return localVarResp.getData();
    }

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @return ApiResponse&lt;List&lt;RunnerApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public ApiResponse<List<RunnerApplication>> actionsListRunnerApplicationsForOrgWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = actionsListRunnerApplicationsForOrgValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runner applications for an organization (asynchronously)
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-an-organization">List runner applications for an organization Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForOrgAsync(String org, final ApiCallback<List<RunnerApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRunnerApplicationsForOrgValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListRunnerApplicationsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForRepoCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners/downloads"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListRunnerApplicationsForRepoValidateBeforeCall(String owner, String repo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListRunnerApplicationsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListRunnerApplicationsForRepo(Async)");
        }

        return actionsListRunnerApplicationsForRepoCall(owner, repo, _callback);

    }

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return List&lt;RunnerApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public List<RunnerApplication> actionsListRunnerApplicationsForRepo(String owner, String repo) throws ApiException {
        ApiResponse<List<RunnerApplication>> localVarResp = actionsListRunnerApplicationsForRepoWithHttpInfo(owner, repo);
        return localVarResp.getData();
    }

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @return ApiResponse&lt;List&lt;RunnerApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public ApiResponse<List<RunnerApplication>> actionsListRunnerApplicationsForRepoWithHttpInfo(String owner, String repo) throws ApiException {
        okhttp3.Call localVarCall = actionsListRunnerApplicationsForRepoValidateBeforeCall(owner, repo, null);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List runner applications for a repository (asynchronously)
     * Lists binaries for the runner application that you can download and run.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-runner-applications-for-a-repository">List runner applications for a repository Documentation</a>
     */
    public okhttp3.Call actionsListRunnerApplicationsForRepoAsync(String owner, String repo, final ApiCallback<List<RunnerApplication>> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListRunnerApplicationsForRepoValidateBeforeCall(owner, repo, _callback);
        Type localVarReturnType = new TypeToken<List<RunnerApplication>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgSecretCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsListSelectedReposForOrgSecret(Async)");
        }

        return actionsListSelectedReposForOrgSecretCall(org, secretName, page, perPage, _callback);

    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ActionsListSelectedReposForOrgSecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ActionsListSelectedReposForOrgSecret200Response actionsListSelectedReposForOrgSecret(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ActionsListSelectedReposForOrgSecret200Response> localVarResp = actionsListSelectedReposForOrgSecretWithHttpInfo(org, secretName, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;ActionsListSelectedReposForOrgSecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<ActionsListSelectedReposForOrgSecret200Response> actionsListSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories for an organization secret (asynchronously)
     * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret">List selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsListSelectedReposForOrgSecretAsync(String org, String secretName, Integer page, Integer perPage, final ApiCallback<ActionsListSelectedReposForOrgSecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedReposForOrgSecretValidateBeforeCall(org, secretName, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedReposForOrgSecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelectedRepositoriesEnabledGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        return actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCall(org, perPage, page, _callback);

    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response actionsListSelectedRepositoriesEnabledGithubActionsOrganization(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> localVarResp = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> actionsListSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List selected repositories enabled for GitHub Actions in an organization (asynchronously)
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization">List selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelectedRepositoriesEnabledGithubActionsOrganizationAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnerGroupsForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization">List self-hosted runner groups for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnerGroupsForOrgCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnerGroupsForOrgValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelfHostedRunnerGroupsForOrg(Async)");
        }

        return actionsListSelfHostedRunnerGroupsForOrgCall(org, perPage, page, _callback);

    }

    /**
     * List self-hosted runner groups for an organization
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelfHostedRunnerGroupsForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization">List self-hosted runner groups for an organization Documentation</a>
     */
    public ActionsListSelfHostedRunnerGroupsForOrg200Response actionsListSelfHostedRunnerGroupsForOrg(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelfHostedRunnerGroupsForOrg200Response> localVarResp = actionsListSelfHostedRunnerGroupsForOrgWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runner groups for an organization
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelfHostedRunnerGroupsForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization">List self-hosted runner groups for an organization Documentation</a>
     */
    public ApiResponse<ActionsListSelfHostedRunnerGroupsForOrg200Response> actionsListSelfHostedRunnerGroupsForOrgWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnerGroupsForOrgValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnerGroupsForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runner groups for an organization (asynchronously)
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization">List self-hosted runner groups for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnerGroupsForOrgAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListSelfHostedRunnerGroupsForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnerGroupsForOrgValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnerGroupsForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnersForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForOrgCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runners"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnersForOrgValidateBeforeCall(String org, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersForOrg(Async)");
        }

        return actionsListSelfHostedRunnersForOrgCall(org, perPage, page, _callback);

    }

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelfHostedRunnersForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public ActionsListSelfHostedRunnersForOrg200Response actionsListSelfHostedRunnersForOrg(String org, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> localVarResp = actionsListSelfHostedRunnersForOrgWithHttpInfo(org, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelfHostedRunnersForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> actionsListSelfHostedRunnersForOrgWithHttpInfo(String org, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForOrgValidateBeforeCall(org, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners for an organization (asynchronously)
     * Lists all self-hosted runners configured in an organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-an-organization">List self-hosted runners for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForOrgAsync(String org, Integer perPage, Integer page, final ApiCallback<ActionsListSelfHostedRunnersForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForOrgValidateBeforeCall(org, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnersForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForRepoCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runners"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnersForRepoValidateBeforeCall(String owner, String repo, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListSelfHostedRunnersForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListSelfHostedRunnersForRepo(Async)");
        }

        return actionsListSelfHostedRunnersForRepoCall(owner, repo, perPage, page, _callback);

    }

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListSelfHostedRunnersForOrg200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public ActionsListSelfHostedRunnersForOrg200Response actionsListSelfHostedRunnersForRepo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> localVarResp = actionsListSelfHostedRunnersForRepoWithHttpInfo(owner, repo, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListSelfHostedRunnersForOrg200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public ApiResponse<ActionsListSelfHostedRunnersForOrg200Response> actionsListSelfHostedRunnersForRepoWithHttpInfo(String owner, String repo, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForRepoValidateBeforeCall(owner, repo, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners for a repository (asynchronously)
     * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-for-a-repository">List self-hosted runners for a repository Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersForRepoAsync(String owner, String repo, Integer perPage, Integer page, final ApiCallback<ActionsListSelfHostedRunnersForOrg200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnersForRepoValidateBeforeCall(owner, repo, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListSelfHostedRunnersForOrg200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListSelfHostedRunnersInGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization">List self-hosted runners in a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersInGroupForOrgCall(String org, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListSelfHostedRunnersInGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersInGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsListSelfHostedRunnersInGroupForOrg(Async)");
        }

        return actionsListSelfHostedRunnersInGroupForOrgCall(org, runnerGroupId, perPage, page, _callback);

    }

    /**
     * List self-hosted runners in a group for an organization
     * Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization">List self-hosted runners in a group for an organization Documentation</a>
     */
    public EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response actionsListSelfHostedRunnersInGroupForOrg(String org, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> localVarResp = actionsListSelfHostedRunnersInGroupForOrgWithHttpInfo(org, runnerGroupId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List self-hosted runners in a group for an organization
     * Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization">List self-hosted runners in a group for an organization Documentation</a>
     */
    public ApiResponse<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> actionsListSelfHostedRunnersInGroupForOrgWithHttpInfo(String org, Integer runnerGroupId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListSelfHostedRunnersInGroupForOrgValidateBeforeCall(org, runnerGroupId, perPage, page, null);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List self-hosted runners in a group for an organization (asynchronously)
     * Lists self-hosted runners that are in a specific organization group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization">List self-hosted runners in a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsListSelfHostedRunnersInGroupForOrgAsync(String org, Integer runnerGroupId, Integer perPage, Integer page, final ApiCallback<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListSelfHostedRunnersInGroupForOrgValidateBeforeCall(org, runnerGroupId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRunArtifacts
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunArtifactsCall(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunArtifactsValidateBeforeCall(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsListWorkflowRunArtifacts(Async)");
        }

        return actionsListWorkflowRunArtifactsCall(owner, repo, runId, perPage, page, _callback);

    }

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ActionsListArtifactsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public ActionsListArtifactsForRepo200Response actionsListWorkflowRunArtifacts(String owner, String repo, Integer runId, Integer perPage, Integer page) throws ApiException {
        ApiResponse<ActionsListArtifactsForRepo200Response> localVarResp = actionsListWorkflowRunArtifactsWithHttpInfo(owner, repo, runId, perPage, page);
        return localVarResp.getData();
    }

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @return ApiResponse&lt;ActionsListArtifactsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public ApiResponse<ActionsListArtifactsForRepo200Response> actionsListWorkflowRunArtifactsWithHttpInfo(String owner, String repo, Integer runId, Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunArtifactsValidateBeforeCall(owner, repo, runId, perPage, page, null);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow run artifacts (asynchronously)
     * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-run-artifacts">List workflow run artifacts Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunArtifactsAsync(String owner, String repo, Integer runId, Integer perPage, Integer page, final ApiCallback<ActionsListArtifactsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunArtifactsValidateBeforeCall(owner, repo, runId, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<ActionsListArtifactsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRuns
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs">List workflow runs Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "workflow_id" + "}", localVarApiClient.escapeString(workflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunsValidateBeforeCall(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRuns(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRuns(Async)");
        }

        // verify the required parameter 'workflowId' is set
        if (workflowId == null) {
            throw new ApiException("Missing the required parameter 'workflowId' when calling actionsListWorkflowRuns(Async)");
        }

        return actionsListWorkflowRunsCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, _callback);

    }

    /**
     * List workflow runs
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ActionsListWorkflowRunsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs">List workflow runs Documentation</a>
     */
    public ActionsListWorkflowRunsForRepo200Response actionsListWorkflowRuns(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests) throws ApiException {
        ApiResponse<ActionsListWorkflowRunsForRepo200Response> localVarResp = actionsListWorkflowRunsWithHttpInfo(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests);
        return localVarResp.getData();
    }

    /**
     * List workflow runs
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ApiResponse&lt;ActionsListWorkflowRunsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs">List workflow runs Documentation</a>
     */
    public ApiResponse<ActionsListWorkflowRunsForRepo200Response> actionsListWorkflowRunsWithHttpInfo(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunsValidateBeforeCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, null);
        Type localVarReturnType = new TypeToken<ActionsListWorkflowRunsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow runs (asynchronously)
     * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs">List workflow runs Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsAsync(String owner, String repo, ActionsGetWorkflowWorkflowIdParameter workflowId, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback<ActionsListWorkflowRunsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunsValidateBeforeCall(owner, repo, workflowId, actor, branch, event, status, perPage, page, created, excludePullRequests, _callback);
        Type localVarReturnType = new TypeToken<ActionsListWorkflowRunsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsListWorkflowRunsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsForRepoCall(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actor", actor));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (excludePullRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pull_requests", excludePullRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsListWorkflowRunsForRepoValidateBeforeCall(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsListWorkflowRunsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsListWorkflowRunsForRepo(Async)");
        }

        return actionsListWorkflowRunsForRepoCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, _callback);

    }

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ActionsListWorkflowRunsForRepo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public ActionsListWorkflowRunsForRepo200Response actionsListWorkflowRunsForRepo(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests) throws ApiException {
        ApiResponse<ActionsListWorkflowRunsForRepo200Response> localVarResp = actionsListWorkflowRunsForRepoWithHttpInfo(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests);
        return localVarResp.getData();
    }

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @return ApiResponse&lt;ActionsListWorkflowRunsForRepo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public ApiResponse<ActionsListWorkflowRunsForRepo200Response> actionsListWorkflowRunsForRepoWithHttpInfo(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests) throws ApiException {
        okhttp3.Call localVarCall = actionsListWorkflowRunsForRepoValidateBeforeCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, null);
        Type localVarReturnType = new TypeToken<ActionsListWorkflowRunsForRepo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List workflow runs for a repository (asynchronously)
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the &#x60;repo&#x60; scope. GitHub Apps must have the &#x60;actions:read&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
     * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
     * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
     * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub can set a status of &#x60;waiting&#x60; or &#x60;requested&#x60;. For a list of the possible &#x60;status&#x60; and &#x60;conclusion&#x60; options, see \&quot;[Create a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run).\&quot; (optional)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
     * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  * Link -  <br>  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-workflow-runs-for-a-repository">List workflow runs for a repository Documentation</a>
     */
    public okhttp3.Call actionsListWorkflowRunsForRepoAsync(String owner, String repo, String actor, String branch, String event, String status, Integer perPage, Integer page, OffsetDateTime created, Boolean excludePullRequests, final ApiCallback<ActionsListWorkflowRunsForRepo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsListWorkflowRunsForRepoValidateBeforeCall(owner, repo, actor, branch, event, status, perPage, page, created, excludePullRequests, _callback);
        Type localVarReturnType = new TypeToken<ActionsListWorkflowRunsForRepo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsReRunWorkflow
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowCall(String owner, String repo, Integer runId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "run_id" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsReRunWorkflowValidateBeforeCall(String owner, String repo, Integer runId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsReRunWorkflow(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsReRunWorkflow(Async)");
        }

        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling actionsReRunWorkflow(Async)");
        }

        return actionsReRunWorkflowCall(owner, repo, runId, body, _callback);

    }

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public Object actionsReRunWorkflow(String owner, String repo, Integer runId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = actionsReRunWorkflowWithHttpInfo(owner, repo, runId, body);
        return localVarResp.getData();
    }

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public ApiResponse<Object> actionsReRunWorkflowWithHttpInfo(String owner, String repo, Integer runId, Object body) throws ApiException {
        okhttp3.Call localVarCall = actionsReRunWorkflowValidateBeforeCall(owner, repo, runId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-run a workflow (asynchronously)
     * Re-runs your workflow run using its &#x60;id&#x60;. You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;actions:write&#x60; permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param runId The unique identifier of the workflow run. (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#re-run-a-workflow">Re-run a workflow Documentation</a>
     */
    public okhttp3.Call actionsReRunWorkflowAsync(String owner, String repo, Integer runId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsReRunWorkflowValidateBeforeCall(owner, repo, runId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization">Remove repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCall(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        return actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgCall(org, runnerGroupId, repositoryId, _callback);

    }

    /**
     * Remove repository access to a self-hosted runner group in an organization
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization">Remove repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public void actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(String org, Integer runnerGroupId, Integer repositoryId) throws ApiException {
        actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(org, runnerGroupId, repositoryId);
    }

    /**
     * Remove repository access to a self-hosted runner group in an organization
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization">Remove repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(String org, Integer runnerGroupId, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove repository access to a self-hosted runner group in an organization (asynchronously)
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have &#x60;visibility&#x60; set to &#x60;selected&#x60;. For more information, see \&quot;[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\&quot; You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param repositoryId The unique identifier of the repository. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization">Remove repository access to a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgAsync(String org, Integer runnerGroupId, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveSelectedRepoFromOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()))
            .replace("{" + "repository_id" + "}", localVarApiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(String org, String secretName, Integer repositoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgSecret(Async)");
        }

        return actionsRemoveSelectedRepoFromOrgSecretCall(org, secretName, repositoryId, _callback);

    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public void actionsRemoveSelectedRepoFromOrgSecret(String org, String secretName, Integer repositoryId) throws ApiException {
        actionsRemoveSelectedRepoFromOrgSecretWithHttpInfo(org, secretName, repositoryId);
    }

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveSelectedRepoFromOrgSecretWithHttpInfo(String org, String secretName, Integer repositoryId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove selected repository from an organization secret (asynchronously)
     * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param repositoryId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response when repository was removed from the selected list </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict when visibility type not set to selected </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret">Remove selected repository from an organization secret Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelectedRepoFromOrgSecretAsync(String org, String secretName, Integer repositoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveSelectedRepoFromOrgSecretValidateBeforeCall(org, secretName, repositoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsRemoveSelfHostedRunnerFromGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization">Remove a self-hosted runner from a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelfHostedRunnerFromGroupForOrgCall(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()))
            .replace("{" + "runner_id" + "}", localVarApiClient.escapeString(runnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsRemoveSelfHostedRunnerFromGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerId' is set
        if (runnerId == null) {
            throw new ApiException("Missing the required parameter 'runnerId' when calling actionsRemoveSelfHostedRunnerFromGroupForOrg(Async)");
        }

        return actionsRemoveSelfHostedRunnerFromGroupForOrgCall(org, runnerGroupId, runnerId, _callback);

    }

    /**
     * Remove a self-hosted runner from a group for an organization
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization">Remove a self-hosted runner from a group for an organization Documentation</a>
     */
    public void actionsRemoveSelfHostedRunnerFromGroupForOrg(String org, Integer runnerGroupId, Integer runnerId) throws ApiException {
        actionsRemoveSelfHostedRunnerFromGroupForOrgWithHttpInfo(org, runnerGroupId, runnerId);
    }

    /**
     * Remove a self-hosted runner from a group for an organization
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization">Remove a self-hosted runner from a group for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsRemoveSelfHostedRunnerFromGroupForOrgWithHttpInfo(String org, Integer runnerGroupId, Integer runnerId) throws ApiException {
        okhttp3.Call localVarCall = actionsRemoveSelfHostedRunnerFromGroupForOrgValidateBeforeCall(org, runnerGroupId, runnerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a self-hosted runner from a group for an organization (asynchronously)
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param runnerId Unique identifier of the self-hosted runner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization">Remove a self-hosted runner from a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsRemoveSelfHostedRunnerFromGroupForOrgAsync(String org, Integer runnerGroupId, Integer runnerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsRemoveSelfHostedRunnerFromGroupForOrgValidateBeforeCall(org, runnerGroupId, runnerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetAllowedActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsOrganizationCall(String org, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedActions;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/selected-actions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetAllowedActionsOrganizationValidateBeforeCall(String org, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetAllowedActionsOrganization(Async)");
        }

        return actionsSetAllowedActionsOrganizationCall(org, selectedActions, _callback);

    }

    /**
     * Set allowed actions for an organization
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions for an organization Documentation</a>
     */
    public void actionsSetAllowedActionsOrganization(String org, SelectedActions selectedActions) throws ApiException {
        actionsSetAllowedActionsOrganizationWithHttpInfo(org, selectedActions);
    }

    /**
     * Set allowed actions for an organization
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetAllowedActionsOrganizationWithHttpInfo(String org, SelectedActions selectedActions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetAllowedActionsOrganizationValidateBeforeCall(org, selectedActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set allowed actions for an organization (asynchronously)
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  If the organization belongs to an enterprise that has &#x60;selected&#x60; actions set at the enterprise level, then you cannot override any of the enterprise&#39;s allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories in the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-an-organization">Set allowed actions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsOrganizationAsync(String org, SelectedActions selectedActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetAllowedActionsOrganizationValidateBeforeCall(org, selectedActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetAllowedActionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsRepositoryCall(String owner, String repo, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedActions;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions/selected-actions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetAllowedActionsRepositoryValidateBeforeCall(String owner, String repo, SelectedActions selectedActions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetAllowedActionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetAllowedActionsRepository(Async)");
        }

        return actionsSetAllowedActionsRepositoryCall(owner, repo, selectedActions, _callback);

    }

    /**
     * Set allowed actions for a repository
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions for a repository Documentation</a>
     */
    public void actionsSetAllowedActionsRepository(String owner, String repo, SelectedActions selectedActions) throws ApiException {
        actionsSetAllowedActionsRepositoryWithHttpInfo(owner, repo, selectedActions);
    }

    /**
     * Set allowed actions for a repository
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions for a repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetAllowedActionsRepositoryWithHttpInfo(String owner, String repo, SelectedActions selectedActions) throws ApiException {
        okhttp3.Call localVarCall = actionsSetAllowedActionsRepositoryValidateBeforeCall(owner, repo, selectedActions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set allowed actions for a repository (asynchronously)
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  If the repository belongs to an organization or enterprise that has &#x60;selected&#x60; actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.  To use the &#x60;patterns_allowed&#x60; setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the &#x60;patterns_allowed&#x60; setting only applies to public repositories.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param selectedActions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-allowed-actions-for-a-repository">Set allowed actions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetAllowedActionsRepositoryAsync(String owner, String repo, SelectedActions selectedActions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetAllowedActionsRepositoryValidateBeforeCall(owner, repo, selectedActions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsPermissionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsOrganizationCall(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetGithubActionsPermissionsOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetGithubActionsPermissionsOrganization(Async)");
        }

        // verify the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' is set
        if (actionsSetGithubActionsPermissionsOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' when calling actionsSetGithubActionsPermissionsOrganization(Async)");
        }

        return actionsSetGithubActionsPermissionsOrganizationCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, _callback);

    }

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public void actionsSetGithubActionsPermissionsOrganization(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest) throws ApiException {
        actionsSetGithubActionsPermissionsOrganizationWithHttpInfo(org, actionsSetGithubActionsPermissionsOrganizationRequest);
    }

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsPermissionsOrganizationWithHttpInfo(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set GitHub Actions permissions for an organization (asynchronously)
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.  If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the organization.  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-an-organization">Set GitHub Actions permissions for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsOrganizationAsync(String org, ActionsSetGithubActionsPermissionsOrganizationRequest actionsSetGithubActionsPermissionsOrganizationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsOrganizationValidateBeforeCall(org, actionsSetGithubActionsPermissionsOrganizationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetGithubActionsPermissionsRepository
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsRepositoryCall(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetGithubActionsPermissionsRepositoryRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/actions/permissions"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        // verify the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' is set
        if (actionsSetGithubActionsPermissionsRepositoryRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' when calling actionsSetGithubActionsPermissionsRepository(Async)");
        }

        return actionsSetGithubActionsPermissionsRepositoryCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, _callback);

    }

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public void actionsSetGithubActionsPermissionsRepository(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest) throws ApiException {
        actionsSetGithubActionsPermissionsRepositoryWithHttpInfo(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest);
    }

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public ApiResponse<Void> actionsSetGithubActionsPermissionsRepositoryWithHttpInfo(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set GitHub Actions permissions for a repository (asynchronously)
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.  If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as &#x60;allowed_actions&#x60; to &#x60;selected&#x60; actions, then you cannot override them for the repository.  You must authenticate using an access token with the &#x60;repo&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; repository permission to use this API.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param actionsSetGithubActionsPermissionsRepositoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-github-actions-permissions-for-a-repository">Set GitHub Actions permissions for a repository Documentation</a>
     */
    public okhttp3.Call actionsSetGithubActionsPermissionsRepositoryAsync(String owner, String repo, ActionsSetGithubActionsPermissionsRepositoryRequest actionsSetGithubActionsPermissionsRepositoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetGithubActionsPermissionsRepositoryValidateBeforeCall(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetRepoAccessToSelfHostedRunnerGroupInOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization">Set repository access for a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetRepoAccessToSelfHostedRunnerGroupInOrgCall(String org, Integer runnerGroupId, ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(String org, Integer runnerGroupId, ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        // verify the required parameter 'actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest' is set
        if (actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest' when calling actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(Async)");
        }

        return actionsSetRepoAccessToSelfHostedRunnerGroupInOrgCall(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, _callback);

    }

    /**
     * Set repository access for a self-hosted runner group in an organization
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization">Set repository access for a self-hosted runner group in an organization Documentation</a>
     */
    public void actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(String org, Integer runnerGroupId, ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest) throws ApiException {
        actionsSetRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest);
    }

    /**
     * Set repository access for a self-hosted runner group in an organization
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization">Set repository access for a self-hosted runner group in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetRepoAccessToSelfHostedRunnerGroupInOrgWithHttpInfo(String org, Integer runnerGroupId, ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set repository access for a self-hosted runner group in an organization (asynchronously)
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization">Set repository access for a self-hosted runner group in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetRepoAccessToSelfHostedRunnerGroupInOrgAsync(String org, Integer runnerGroupId, ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetRepoAccessToSelfHostedRunnerGroupInOrgValidateBeforeCall(org, runnerGroupId, actionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedReposForOrgSecret
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgSecretCall(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedReposForOrgSecretRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/secrets/{secret_name}/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "secret_name" + "}", localVarApiClient.escapeString(secretName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedReposForOrgSecretValidateBeforeCall(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        // verify the required parameter 'actionsSetSelectedReposForOrgSecretRequest' is set
        if (actionsSetSelectedReposForOrgSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedReposForOrgSecretRequest' when calling actionsSetSelectedReposForOrgSecret(Async)");
        }

        return actionsSetSelectedReposForOrgSecretCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, _callback);

    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public void actionsSetSelectedReposForOrgSecret(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest) throws ApiException {
        actionsSetSelectedReposForOrgSecretWithHttpInfo(org, secretName, actionsSetSelectedReposForOrgSecretRequest);
    }

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedReposForOrgSecretWithHttpInfo(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories for an organization secret (asynchronously)
     * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;secrets&#x60; organization permission to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param secretName The name of the secret. (required)
     * @param actionsSetSelectedReposForOrgSecretRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret">Set selected repositories for an organization secret Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedReposForOrgSecretAsync(String org, String secretName, ActionsSetSelectedReposForOrgSecretRequest actionsSetSelectedReposForOrgSecretRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedReposForOrgSecretValidateBeforeCall(org, secretName, actionsSetSelectedReposForOrgSecretRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelectedRepositoriesEnabledGithubActionsOrganization
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCall(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/permissions/repositories"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        // verify the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' is set
        if (actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(Async)");
        }

        return actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, _callback);

    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public void actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) throws ApiException {
        actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest);
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationWithHttpInfo(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set selected repositories enabled for GitHub Actions in an organization (asynchronously)
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;administration&#x60; organization permission to use this API.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization">Set selected repositories enabled for GitHub Actions in an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationAsync(String org, ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationValidateBeforeCall(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsSetSelfHostedRunnersInGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization">Set self-hosted runners in a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelfHostedRunnersInGroupForOrgCall(String org, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsSetSelfHostedRunnersInGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsSetSelfHostedRunnersInGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsSetSelfHostedRunnersInGroupForOrg(Async)");
        }

        // verify the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' is set
        if (enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest == null) {
            throw new ApiException("Missing the required parameter 'enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest' when calling actionsSetSelfHostedRunnersInGroupForOrg(Async)");
        }

        return actionsSetSelfHostedRunnersInGroupForOrgCall(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, _callback);

    }

    /**
     * Set self-hosted runners in a group for an organization
     * Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization">Set self-hosted runners in a group for an organization Documentation</a>
     */
    public void actionsSetSelfHostedRunnersInGroupForOrg(String org, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) throws ApiException {
        actionsSetSelfHostedRunnersInGroupForOrgWithHttpInfo(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest);
    }

    /**
     * Set self-hosted runners in a group for an organization
     * Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization">Set self-hosted runners in a group for an organization Documentation</a>
     */
    public ApiResponse<Void> actionsSetSelfHostedRunnersInGroupForOrgWithHttpInfo(String org, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsSetSelfHostedRunnersInGroupForOrgValidateBeforeCall(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set self-hosted runners in a group for an organization (asynchronously)
     * Replaces the list of self-hosted runners that are part of an organization runner group. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization">Set self-hosted runners in a group for an organization Documentation</a>
     */
    public okhttp3.Call actionsSetSelfHostedRunnersInGroupForOrgAsync(String org, Integer runnerGroupId, EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsSetSelfHostedRunnersInGroupForOrgValidateBeforeCall(org, runnerGroupId, enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionsUpdateSelfHostedRunnerGroupForOrg
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsUpdateSelfHostedRunnerGroupForOrgRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization">Update a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsUpdateSelfHostedRunnerGroupForOrgCall(String org, Integer runnerGroupId, ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsUpdateSelfHostedRunnerGroupForOrgRequest;

        // create path and map variables
        String localVarPath = "/orgs/{org}/actions/runner-groups/{runner_group_id}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "runner_group_id" + "}", localVarApiClient.escapeString(runnerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionsUpdateSelfHostedRunnerGroupForOrgValidateBeforeCall(String org, Integer runnerGroupId, ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling actionsUpdateSelfHostedRunnerGroupForOrg(Async)");
        }

        // verify the required parameter 'runnerGroupId' is set
        if (runnerGroupId == null) {
            throw new ApiException("Missing the required parameter 'runnerGroupId' when calling actionsUpdateSelfHostedRunnerGroupForOrg(Async)");
        }

        // verify the required parameter 'actionsUpdateSelfHostedRunnerGroupForOrgRequest' is set
        if (actionsUpdateSelfHostedRunnerGroupForOrgRequest == null) {
            throw new ApiException("Missing the required parameter 'actionsUpdateSelfHostedRunnerGroupForOrgRequest' when calling actionsUpdateSelfHostedRunnerGroupForOrg(Async)");
        }

        return actionsUpdateSelfHostedRunnerGroupForOrgCall(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest, _callback);

    }

    /**
     * Update a self-hosted runner group for an organization
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsUpdateSelfHostedRunnerGroupForOrgRequest  (required)
     * @return RunnerGroupsOrg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization">Update a self-hosted runner group for an organization Documentation</a>
     */
    public RunnerGroupsOrg actionsUpdateSelfHostedRunnerGroupForOrg(String org, Integer runnerGroupId, ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest) throws ApiException {
        ApiResponse<RunnerGroupsOrg> localVarResp = actionsUpdateSelfHostedRunnerGroupForOrgWithHttpInfo(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest);
        return localVarResp.getData();
    }

    /**
     * Update a self-hosted runner group for an organization
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsUpdateSelfHostedRunnerGroupForOrgRequest  (required)
     * @return ApiResponse&lt;RunnerGroupsOrg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization">Update a self-hosted runner group for an organization Documentation</a>
     */
    public ApiResponse<RunnerGroupsOrg> actionsUpdateSelfHostedRunnerGroupForOrgWithHttpInfo(String org, Integer runnerGroupId, ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest) throws ApiException {
        okhttp3.Call localVarCall = actionsUpdateSelfHostedRunnerGroupForOrgValidateBeforeCall(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest, null);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a self-hosted runner group for an organization (asynchronously)
     * Updates the &#x60;name&#x60; and &#x60;visibility&#x60; of a self-hosted runner group in an organization. You must authenticate using an access token with the &#x60;admin:org&#x60; scope to use this endpoint.
     * @param org The organization name. The name is not case sensitive. (required)
     * @param runnerGroupId Unique identifier of the self-hosted runner group. (required)
     * @param actionsUpdateSelfHostedRunnerGroupForOrgRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization">Update a self-hosted runner group for an organization Documentation</a>
     */
    public okhttp3.Call actionsUpdateSelfHostedRunnerGroupForOrgAsync(String org, Integer runnerGroupId, ActionsUpdateSelfHostedRunnerGroupForOrgRequest actionsUpdateSelfHostedRunnerGroupForOrgRequest, final ApiCallback<RunnerGroupsOrg> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionsUpdateSelfHostedRunnerGroupForOrgValidateBeforeCall(org, runnerGroupId, actionsUpdateSelfHostedRunnerGroupForOrgRequest, _callback);
        Type localVarReturnType = new TypeToken<RunnerGroupsOrg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
