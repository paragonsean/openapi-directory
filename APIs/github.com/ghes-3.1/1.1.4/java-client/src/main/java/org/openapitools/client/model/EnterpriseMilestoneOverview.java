/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseMilestoneOverview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:04.504978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseMilestoneOverview {
  public static final String SERIALIZED_NAME_CLOSED_MILESTONES = "closed_milestones";
  @SerializedName(SERIALIZED_NAME_CLOSED_MILESTONES)
  private Integer closedMilestones;

  public static final String SERIALIZED_NAME_OPEN_MILESTONES = "open_milestones";
  @SerializedName(SERIALIZED_NAME_OPEN_MILESTONES)
  private Integer openMilestones;

  public static final String SERIALIZED_NAME_TOTAL_MILESTONES = "total_milestones";
  @SerializedName(SERIALIZED_NAME_TOTAL_MILESTONES)
  private Integer totalMilestones;

  public EnterpriseMilestoneOverview() {
  }

  public EnterpriseMilestoneOverview closedMilestones(Integer closedMilestones) {
    this.closedMilestones = closedMilestones;
    return this;
  }

  /**
   * Get closedMilestones
   * @return closedMilestones
   */
  @javax.annotation.Nonnull
  public Integer getClosedMilestones() {
    return closedMilestones;
  }

  public void setClosedMilestones(Integer closedMilestones) {
    this.closedMilestones = closedMilestones;
  }


  public EnterpriseMilestoneOverview openMilestones(Integer openMilestones) {
    this.openMilestones = openMilestones;
    return this;
  }

  /**
   * Get openMilestones
   * @return openMilestones
   */
  @javax.annotation.Nonnull
  public Integer getOpenMilestones() {
    return openMilestones;
  }

  public void setOpenMilestones(Integer openMilestones) {
    this.openMilestones = openMilestones;
  }


  public EnterpriseMilestoneOverview totalMilestones(Integer totalMilestones) {
    this.totalMilestones = totalMilestones;
    return this;
  }

  /**
   * Get totalMilestones
   * @return totalMilestones
   */
  @javax.annotation.Nonnull
  public Integer getTotalMilestones() {
    return totalMilestones;
  }

  public void setTotalMilestones(Integer totalMilestones) {
    this.totalMilestones = totalMilestones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseMilestoneOverview enterpriseMilestoneOverview = (EnterpriseMilestoneOverview) o;
    return Objects.equals(this.closedMilestones, enterpriseMilestoneOverview.closedMilestones) &&
        Objects.equals(this.openMilestones, enterpriseMilestoneOverview.openMilestones) &&
        Objects.equals(this.totalMilestones, enterpriseMilestoneOverview.totalMilestones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedMilestones, openMilestones, totalMilestones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseMilestoneOverview {\n");
    sb.append("    closedMilestones: ").append(toIndentedString(closedMilestones)).append("\n");
    sb.append("    openMilestones: ").append(toIndentedString(openMilestones)).append("\n");
    sb.append("    totalMilestones: ").append(toIndentedString(totalMilestones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_milestones");
    openapiFields.add("open_milestones");
    openapiFields.add("total_milestones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("closed_milestones");
    openapiRequiredFields.add("open_milestones");
    openapiRequiredFields.add("total_milestones");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseMilestoneOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseMilestoneOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseMilestoneOverview is not found in the empty JSON string", EnterpriseMilestoneOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseMilestoneOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseMilestoneOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnterpriseMilestoneOverview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseMilestoneOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseMilestoneOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseMilestoneOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseMilestoneOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseMilestoneOverview>() {
           @Override
           public void write(JsonWriter out, EnterpriseMilestoneOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseMilestoneOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseMilestoneOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseMilestoneOverview
   * @throws IOException if the JSON string is invalid with respect to EnterpriseMilestoneOverview
   */
  public static EnterpriseMilestoneOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseMilestoneOverview.class);
  }

  /**
   * Convert an instance of EnterpriseMilestoneOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

