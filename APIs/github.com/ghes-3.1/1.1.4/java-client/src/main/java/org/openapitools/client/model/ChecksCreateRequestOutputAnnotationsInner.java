/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChecksCreateRequestOutputAnnotationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:04.504978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChecksCreateRequestOutputAnnotationsInner {
  /**
   * The level of the annotation.
   */
  @JsonAdapter(AnnotationLevelEnum.Adapter.class)
  public enum AnnotationLevelEnum {
    NOTICE("notice"),
    
    WARNING("warning"),
    
    FAILURE("failure");

    private String value;

    AnnotationLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationLevelEnum fromValue(String value) {
      for (AnnotationLevelEnum b : AnnotationLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_LEVEL = "annotation_level";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_LEVEL)
  private AnnotationLevelEnum annotationLevel;

  public static final String SERIALIZED_NAME_END_COLUMN = "end_column";
  @SerializedName(SERIALIZED_NAME_END_COLUMN)
  private Integer endColumn;

  public static final String SERIALIZED_NAME_END_LINE = "end_line";
  @SerializedName(SERIALIZED_NAME_END_LINE)
  private Integer endLine;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RAW_DETAILS = "raw_details";
  @SerializedName(SERIALIZED_NAME_RAW_DETAILS)
  private String rawDetails;

  public static final String SERIALIZED_NAME_START_COLUMN = "start_column";
  @SerializedName(SERIALIZED_NAME_START_COLUMN)
  private Integer startColumn;

  public static final String SERIALIZED_NAME_START_LINE = "start_line";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private Integer startLine;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ChecksCreateRequestOutputAnnotationsInner() {
  }

  public ChecksCreateRequestOutputAnnotationsInner annotationLevel(AnnotationLevelEnum annotationLevel) {
    this.annotationLevel = annotationLevel;
    return this;
  }

  /**
   * The level of the annotation.
   * @return annotationLevel
   */
  @javax.annotation.Nonnull
  public AnnotationLevelEnum getAnnotationLevel() {
    return annotationLevel;
  }

  public void setAnnotationLevel(AnnotationLevelEnum annotationLevel) {
    this.annotationLevel = annotationLevel;
  }


  public ChecksCreateRequestOutputAnnotationsInner endColumn(Integer endColumn) {
    this.endColumn = endColumn;
    return this;
  }

  /**
   * The end column of the annotation. Annotations only support &#x60;start_column&#x60; and &#x60;end_column&#x60; on the same line. Omit this parameter if &#x60;start_line&#x60; and &#x60;end_line&#x60; have different values.
   * @return endColumn
   */
  @javax.annotation.Nullable
  public Integer getEndColumn() {
    return endColumn;
  }

  public void setEndColumn(Integer endColumn) {
    this.endColumn = endColumn;
  }


  public ChecksCreateRequestOutputAnnotationsInner endLine(Integer endLine) {
    this.endLine = endLine;
    return this;
  }

  /**
   * The end line of the annotation.
   * @return endLine
   */
  @javax.annotation.Nonnull
  public Integer getEndLine() {
    return endLine;
  }

  public void setEndLine(Integer endLine) {
    this.endLine = endLine;
  }


  public ChecksCreateRequestOutputAnnotationsInner message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A short description of the feedback for these lines of code. The maximum size is 64 KB.
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ChecksCreateRequestOutputAnnotationsInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of the file to add an annotation to. For example, &#x60;assets/css/main.css&#x60;.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ChecksCreateRequestOutputAnnotationsInner rawDetails(String rawDetails) {
    this.rawDetails = rawDetails;
    return this;
  }

  /**
   * Details about this annotation. The maximum size is 64 KB.
   * @return rawDetails
   */
  @javax.annotation.Nullable
  public String getRawDetails() {
    return rawDetails;
  }

  public void setRawDetails(String rawDetails) {
    this.rawDetails = rawDetails;
  }


  public ChecksCreateRequestOutputAnnotationsInner startColumn(Integer startColumn) {
    this.startColumn = startColumn;
    return this;
  }

  /**
   * The start column of the annotation. Annotations only support &#x60;start_column&#x60; and &#x60;end_column&#x60; on the same line. Omit this parameter if &#x60;start_line&#x60; and &#x60;end_line&#x60; have different values.
   * @return startColumn
   */
  @javax.annotation.Nullable
  public Integer getStartColumn() {
    return startColumn;
  }

  public void setStartColumn(Integer startColumn) {
    this.startColumn = startColumn;
  }


  public ChecksCreateRequestOutputAnnotationsInner startLine(Integer startLine) {
    this.startLine = startLine;
    return this;
  }

  /**
   * The start line of the annotation.
   * @return startLine
   */
  @javax.annotation.Nonnull
  public Integer getStartLine() {
    return startLine;
  }

  public void setStartLine(Integer startLine) {
    this.startLine = startLine;
  }


  public ChecksCreateRequestOutputAnnotationsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title that represents the annotation. The maximum size is 255 characters.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChecksCreateRequestOutputAnnotationsInner checksCreateRequestOutputAnnotationsInner = (ChecksCreateRequestOutputAnnotationsInner) o;
    return Objects.equals(this.annotationLevel, checksCreateRequestOutputAnnotationsInner.annotationLevel) &&
        Objects.equals(this.endColumn, checksCreateRequestOutputAnnotationsInner.endColumn) &&
        Objects.equals(this.endLine, checksCreateRequestOutputAnnotationsInner.endLine) &&
        Objects.equals(this.message, checksCreateRequestOutputAnnotationsInner.message) &&
        Objects.equals(this.path, checksCreateRequestOutputAnnotationsInner.path) &&
        Objects.equals(this.rawDetails, checksCreateRequestOutputAnnotationsInner.rawDetails) &&
        Objects.equals(this.startColumn, checksCreateRequestOutputAnnotationsInner.startColumn) &&
        Objects.equals(this.startLine, checksCreateRequestOutputAnnotationsInner.startLine) &&
        Objects.equals(this.title, checksCreateRequestOutputAnnotationsInner.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationLevel, endColumn, endLine, message, path, rawDetails, startColumn, startLine, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChecksCreateRequestOutputAnnotationsInner {\n");
    sb.append("    annotationLevel: ").append(toIndentedString(annotationLevel)).append("\n");
    sb.append("    endColumn: ").append(toIndentedString(endColumn)).append("\n");
    sb.append("    endLine: ").append(toIndentedString(endLine)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    rawDetails: ").append(toIndentedString(rawDetails)).append("\n");
    sb.append("    startColumn: ").append(toIndentedString(startColumn)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotation_level");
    openapiFields.add("end_column");
    openapiFields.add("end_line");
    openapiFields.add("message");
    openapiFields.add("path");
    openapiFields.add("raw_details");
    openapiFields.add("start_column");
    openapiFields.add("start_line");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("annotation_level");
    openapiRequiredFields.add("end_line");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("start_line");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChecksCreateRequestOutputAnnotationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChecksCreateRequestOutputAnnotationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChecksCreateRequestOutputAnnotationsInner is not found in the empty JSON string", ChecksCreateRequestOutputAnnotationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChecksCreateRequestOutputAnnotationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChecksCreateRequestOutputAnnotationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChecksCreateRequestOutputAnnotationsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("annotation_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotation_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotation_level").toString()));
      }
      // validate the required field `annotation_level`
      AnnotationLevelEnum.validateJsonElement(jsonObj.get("annotation_level"));
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("raw_details") != null && !jsonObj.get("raw_details").isJsonNull()) && !jsonObj.get("raw_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_details").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChecksCreateRequestOutputAnnotationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChecksCreateRequestOutputAnnotationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChecksCreateRequestOutputAnnotationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChecksCreateRequestOutputAnnotationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ChecksCreateRequestOutputAnnotationsInner>() {
           @Override
           public void write(JsonWriter out, ChecksCreateRequestOutputAnnotationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChecksCreateRequestOutputAnnotationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChecksCreateRequestOutputAnnotationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChecksCreateRequestOutputAnnotationsInner
   * @throws IOException if the JSON string is invalid with respect to ChecksCreateRequestOutputAnnotationsInner
   */
  public static ChecksCreateRequestOutputAnnotationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChecksCreateRequestOutputAnnotationsInner.class);
  }

  /**
   * Convert an instance of ChecksCreateRequestOutputAnnotationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

