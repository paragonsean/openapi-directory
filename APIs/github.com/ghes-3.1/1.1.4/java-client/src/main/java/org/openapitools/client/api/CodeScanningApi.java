/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivityListPublicEvents503Response;
import org.openapitools.client.model.BasicError;
import org.openapitools.client.model.CodeScanningAlert;
import org.openapitools.client.model.CodeScanningAlertInstance;
import org.openapitools.client.model.CodeScanningAlertItems;
import org.openapitools.client.model.CodeScanningAlertState;
import org.openapitools.client.model.CodeScanningAnalysis;
import org.openapitools.client.model.CodeScanningAnalysisDeletion;
import org.openapitools.client.model.CodeScanningSarifsReceipt;
import org.openapitools.client.model.CodeScanningSarifsStatus;
import org.openapitools.client.model.CodeScanningUpdateAlertRequest;
import org.openapitools.client.model.CodeScanningUploadSarifRequest;
import org.openapitools.client.model.ScimError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CodeScanningApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CodeScanningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodeScanningApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for codeScanningDeleteAnalysis
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param confirmDelete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository">Delete a code scanning analysis from a repository Documentation</a>
     */
    public okhttp3.Call codeScanningDeleteAnalysisCall(String owner, String repo, Integer analysisId, String confirmDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "analysis_id" + "}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm_delete", confirmDelete));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/scim+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningDeleteAnalysisValidateBeforeCall(String owner, String repo, Integer analysisId, String confirmDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningDeleteAnalysis(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningDeleteAnalysis(Async)");
        }

        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling codeScanningDeleteAnalysis(Async)");
        }

        return codeScanningDeleteAnalysisCall(owner, repo, analysisId, confirmDelete, _callback);

    }

    /**
     * Delete a code scanning analysis from a repository
     * Deletes a specified code scanning analysis from a repository. For private repositories, you must use an access token with the &#x60;repo&#x60; scope. For public repositories, you must use an access token with &#x60;public_repo&#x60; and &#x60;repo:security_events&#x60; scopes. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor.  **Note**: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1. You can delete analyses that were generated prior to installing this release, however, if you do so, you will lose information about fixed alerts for all such analyses, for the relevant code scanning tool. We recommend that you only delete analyses that were generated with earlier releases if you don&#39;t need the details of fixed alerts from pre-3.1 releases.  When you list the analyses for a repository, one or more will be identified as deletable in the response:  &#x60;&#x60;&#x60; \&quot;deletable\&quot;: true &#x60;&#x60;&#x60;  An analysis is deletable when it&#39;s the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values:  * &#x60;ref&#x60; * &#x60;tool&#x60; * &#x60;analysis_key&#x60; * &#x60;environment&#x60;  If you attempt to delete an analysis that is not the most recent in a set, you&#39;ll get a 400 response with the message:  &#x60;&#x60;&#x60; Analysis specified is not deletable. &#x60;&#x60;&#x60;  The response from a successful &#x60;DELETE&#x60; operation provides you with two alternative URLs for deleting the next analysis in the set (see the example default response below). Use the &#x60;next_analysis_url&#x60; URL if you want to avoid accidentally deleting the final analysis in the set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the &#x60;confirm_delete_url&#x60; URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set the value of &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60; in the 200 response is &#x60;null&#x60;.  As an example of the deletion process, let&#39;s imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You&#39;ve now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find the deletable analysis for one of the sets, step through deleting the analyses in that set, and then repeat the process for the second set. The procedure therefore consists of a nested loop:  **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found:    **Inner loop**:   * Delete the identified analysis.   * Parse the response for the value of &#x60;confirm_delete_url&#x60; and, if found, use this in the next iteration.  The above process assumes that you want to remove all trace of the tool&#39;s analyses from the GitHub user interface, for the specified repository, and it therefore uses the &#x60;confirm_delete_url&#x60; value. Alternatively, you could use the &#x60;next_analysis_url&#x60; value, which would leave the last analysis in each set undeleted to avoid removing a tool&#39;s analysis entirely.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param confirmDelete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60; (optional)
     * @return CodeScanningAnalysisDeletion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository">Delete a code scanning analysis from a repository Documentation</a>
     */
    public CodeScanningAnalysisDeletion codeScanningDeleteAnalysis(String owner, String repo, Integer analysisId, String confirmDelete) throws ApiException {
        ApiResponse<CodeScanningAnalysisDeletion> localVarResp = codeScanningDeleteAnalysisWithHttpInfo(owner, repo, analysisId, confirmDelete);
        return localVarResp.getData();
    }

    /**
     * Delete a code scanning analysis from a repository
     * Deletes a specified code scanning analysis from a repository. For private repositories, you must use an access token with the &#x60;repo&#x60; scope. For public repositories, you must use an access token with &#x60;public_repo&#x60; and &#x60;repo:security_events&#x60; scopes. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor.  **Note**: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1. You can delete analyses that were generated prior to installing this release, however, if you do so, you will lose information about fixed alerts for all such analyses, for the relevant code scanning tool. We recommend that you only delete analyses that were generated with earlier releases if you don&#39;t need the details of fixed alerts from pre-3.1 releases.  When you list the analyses for a repository, one or more will be identified as deletable in the response:  &#x60;&#x60;&#x60; \&quot;deletable\&quot;: true &#x60;&#x60;&#x60;  An analysis is deletable when it&#39;s the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values:  * &#x60;ref&#x60; * &#x60;tool&#x60; * &#x60;analysis_key&#x60; * &#x60;environment&#x60;  If you attempt to delete an analysis that is not the most recent in a set, you&#39;ll get a 400 response with the message:  &#x60;&#x60;&#x60; Analysis specified is not deletable. &#x60;&#x60;&#x60;  The response from a successful &#x60;DELETE&#x60; operation provides you with two alternative URLs for deleting the next analysis in the set (see the example default response below). Use the &#x60;next_analysis_url&#x60; URL if you want to avoid accidentally deleting the final analysis in the set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the &#x60;confirm_delete_url&#x60; URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set the value of &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60; in the 200 response is &#x60;null&#x60;.  As an example of the deletion process, let&#39;s imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You&#39;ve now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find the deletable analysis for one of the sets, step through deleting the analyses in that set, and then repeat the process for the second set. The procedure therefore consists of a nested loop:  **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found:    **Inner loop**:   * Delete the identified analysis.   * Parse the response for the value of &#x60;confirm_delete_url&#x60; and, if found, use this in the next iteration.  The above process assumes that you want to remove all trace of the tool&#39;s analyses from the GitHub user interface, for the specified repository, and it therefore uses the &#x60;confirm_delete_url&#x60; value. Alternatively, you could use the &#x60;next_analysis_url&#x60; value, which would leave the last analysis in each set undeleted to avoid removing a tool&#39;s analysis entirely.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param confirmDelete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60; (optional)
     * @return ApiResponse&lt;CodeScanningAnalysisDeletion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository">Delete a code scanning analysis from a repository Documentation</a>
     */
    public ApiResponse<CodeScanningAnalysisDeletion> codeScanningDeleteAnalysisWithHttpInfo(String owner, String repo, Integer analysisId, String confirmDelete) throws ApiException {
        okhttp3.Call localVarCall = codeScanningDeleteAnalysisValidateBeforeCall(owner, repo, analysisId, confirmDelete, null);
        Type localVarReturnType = new TypeToken<CodeScanningAnalysisDeletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a code scanning analysis from a repository (asynchronously)
     * Deletes a specified code scanning analysis from a repository. For private repositories, you must use an access token with the &#x60;repo&#x60; scope. For public repositories, you must use an access token with &#x60;public_repo&#x60; and &#x60;repo:security_events&#x60; scopes. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  You can delete one analysis at a time. To delete a series of analyses, start with the most recent analysis and work backwards. Conceptually, the process is similar to the undo function in a text editor.  **Note**: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1. You can delete analyses that were generated prior to installing this release, however, if you do so, you will lose information about fixed alerts for all such analyses, for the relevant code scanning tool. We recommend that you only delete analyses that were generated with earlier releases if you don&#39;t need the details of fixed alerts from pre-3.1 releases.  When you list the analyses for a repository, one or more will be identified as deletable in the response:  &#x60;&#x60;&#x60; \&quot;deletable\&quot;: true &#x60;&#x60;&#x60;  An analysis is deletable when it&#39;s the most recent in a set of analyses. Typically, a repository will have multiple sets of analyses for each enabled code scanning tool, where a set is determined by a unique combination of analysis values:  * &#x60;ref&#x60; * &#x60;tool&#x60; * &#x60;analysis_key&#x60; * &#x60;environment&#x60;  If you attempt to delete an analysis that is not the most recent in a set, you&#39;ll get a 400 response with the message:  &#x60;&#x60;&#x60; Analysis specified is not deletable. &#x60;&#x60;&#x60;  The response from a successful &#x60;DELETE&#x60; operation provides you with two alternative URLs for deleting the next analysis in the set (see the example default response below). Use the &#x60;next_analysis_url&#x60; URL if you want to avoid accidentally deleting the final analysis in the set. This is a useful option if you want to preserve at least one analysis for the specified tool in your repository. Use the &#x60;confirm_delete_url&#x60; URL if you are content to remove all analyses for a tool. When you delete the last analysis in a set the value of &#x60;next_analysis_url&#x60; and &#x60;confirm_delete_url&#x60; in the 200 response is &#x60;null&#x60;.  As an example of the deletion process, let&#39;s imagine that you added a workflow that configured a particular code scanning tool to analyze the code in a repository. This tool has added 15 analyses: 10 on the default branch, and another 5 on a topic branch. You therefore have two separate sets of analyses for this tool. You&#39;ve now decided that you want to remove all of the analyses for the tool. To do this you must make 15 separate deletion requests. To start, you must find the deletable analysis for one of the sets, step through deleting the analyses in that set, and then repeat the process for the second set. The procedure therefore consists of a nested loop:  **Outer loop**: * List the analyses for the repository, filtered by tool. * Parse this list to find a deletable analysis. If found:    **Inner loop**:   * Delete the identified analysis.   * Parse the response for the value of &#x60;confirm_delete_url&#x60; and, if found, use this in the next iteration.  The above process assumes that you want to remove all trace of the tool&#39;s analyses from the GitHub user interface, for the specified repository, and it therefore uses the &#x60;confirm_delete_url&#x60; value. Alternatively, you could use the &#x60;next_analysis_url&#x60; value, which would leave the last analysis in each set undeleted to avoid removing a tool&#39;s analysis entirely.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param confirmDelete Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to &#x60;true&#x60;, you&#39;ll get a 400 response with the message: &#x60;Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository">Delete a code scanning analysis from a repository Documentation</a>
     */
    public okhttp3.Call codeScanningDeleteAnalysisAsync(String owner, String repo, Integer analysisId, String confirmDelete, final ApiCallback<CodeScanningAnalysisDeletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningDeleteAnalysisValidateBeforeCall(owner, repo, analysisId, confirmDelete, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningAnalysisDeletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningGetAlert
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-alert">Get a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningGetAlertCall(String owner, String repo, Integer alertNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "alert_number" + "}", localVarApiClient.escapeString(alertNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningGetAlertValidateBeforeCall(String owner, String repo, Integer alertNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningGetAlert(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningGetAlert(Async)");
        }

        // verify the required parameter 'alertNumber' is set
        if (alertNumber == null) {
            throw new ApiException("Missing the required parameter 'alertNumber' when calling codeScanningGetAlert(Async)");
        }

        return codeScanningGetAlertCall(owner, repo, alertNumber, _callback);

    }

    /**
     * Get a code scanning alert
     * Gets a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by &#x60;instances_url&#x60;.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @return CodeScanningAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-alert">Get a code scanning alert Documentation</a>
     */
    public CodeScanningAlert codeScanningGetAlert(String owner, String repo, Integer alertNumber) throws ApiException {
        ApiResponse<CodeScanningAlert> localVarResp = codeScanningGetAlertWithHttpInfo(owner, repo, alertNumber);
        return localVarResp.getData();
    }

    /**
     * Get a code scanning alert
     * Gets a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by &#x60;instances_url&#x60;.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @return ApiResponse&lt;CodeScanningAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-alert">Get a code scanning alert Documentation</a>
     */
    public ApiResponse<CodeScanningAlert> codeScanningGetAlertWithHttpInfo(String owner, String repo, Integer alertNumber) throws ApiException {
        okhttp3.Call localVarCall = codeScanningGetAlertValidateBeforeCall(owner, repo, alertNumber, null);
        Type localVarReturnType = new TypeToken<CodeScanningAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a code scanning alert (asynchronously)
     * Gets a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by &#x60;instances_url&#x60;.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-alert">Get a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningGetAlertAsync(String owner, String repo, Integer alertNumber, final ApiCallback<CodeScanningAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningGetAlertValidateBeforeCall(owner, repo, alertNumber, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningGetAnalysis
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository">Get a code scanning analysis for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningGetAnalysisCall(String owner, String repo, Integer analysisId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "analysis_id" + "}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/json+sarif"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningGetAnalysisValidateBeforeCall(String owner, String repo, Integer analysisId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningGetAnalysis(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningGetAnalysis(Async)");
        }

        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling codeScanningGetAnalysis(Async)");
        }

        return codeScanningGetAnalysisCall(owner, repo, analysisId, _callback);

    }

    /**
     * Get a code scanning analysis for a repository
     * Gets a specified code scanning analysis for a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts.  The &#x60;rules_count&#x60; field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  If you use the Accept header &#x60;application/sarif+json&#x60;, the response contains the analysis data that was uploaded. This is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @return CodeScanningAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository">Get a code scanning analysis for a repository Documentation</a>
     */
    public CodeScanningAnalysis codeScanningGetAnalysis(String owner, String repo, Integer analysisId) throws ApiException {
        ApiResponse<CodeScanningAnalysis> localVarResp = codeScanningGetAnalysisWithHttpInfo(owner, repo, analysisId);
        return localVarResp.getData();
    }

    /**
     * Get a code scanning analysis for a repository
     * Gets a specified code scanning analysis for a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts.  The &#x60;rules_count&#x60; field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  If you use the Accept header &#x60;application/sarif+json&#x60;, the response contains the analysis data that was uploaded. This is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @return ApiResponse&lt;CodeScanningAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository">Get a code scanning analysis for a repository Documentation</a>
     */
    public ApiResponse<CodeScanningAnalysis> codeScanningGetAnalysisWithHttpInfo(String owner, String repo, Integer analysisId) throws ApiException {
        okhttp3.Call localVarCall = codeScanningGetAnalysisValidateBeforeCall(owner, repo, analysisId, null);
        Type localVarReturnType = new TypeToken<CodeScanningAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a code scanning analysis for a repository (asynchronously)
     * Gets a specified code scanning analysis for a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The default JSON response contains fields that describe the analysis. This includes the Git reference and commit SHA to which the analysis relates, the datetime of the analysis, the name of the code scanning tool, and the number of alerts.  The &#x60;rules_count&#x60; field in the default response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  If you use the Accept header &#x60;application/sarif+json&#x60;, the response contains the analysis data that was uploaded. This is formatted as [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param analysisId The ID of the analysis, as returned from the &#x60;GET /repos/{owner}/{repo}/code-scanning/analyses&#x60; operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository">Get a code scanning analysis for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningGetAnalysisAsync(String owner, String repo, Integer analysisId, final ApiCallback<CodeScanningAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningGetAnalysisValidateBeforeCall(owner, repo, analysisId, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningGetSarif
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param sarifId The SARIF ID obtained after uploading. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if the sarif id does not match any upload </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository">Get information about a SARIF upload Documentation</a>
     */
    public okhttp3.Call codeScanningGetSarifCall(String owner, String repo, String sarifId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "sarif_id" + "}", localVarApiClient.escapeString(sarifId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningGetSarifValidateBeforeCall(String owner, String repo, String sarifId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningGetSarif(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningGetSarif(Async)");
        }

        // verify the required parameter 'sarifId' is set
        if (sarifId == null) {
            throw new ApiException("Missing the required parameter 'sarifId' when calling codeScanningGetSarif(Async)");
        }

        return codeScanningGetSarifCall(owner, repo, sarifId, _callback);

    }

    /**
     * Get information about a SARIF upload
     * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \&quot;[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\&quot; You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param sarifId The SARIF ID obtained after uploading. (required)
     * @return CodeScanningSarifsStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if the sarif id does not match any upload </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository">Get information about a SARIF upload Documentation</a>
     */
    public CodeScanningSarifsStatus codeScanningGetSarif(String owner, String repo, String sarifId) throws ApiException {
        ApiResponse<CodeScanningSarifsStatus> localVarResp = codeScanningGetSarifWithHttpInfo(owner, repo, sarifId);
        return localVarResp.getData();
    }

    /**
     * Get information about a SARIF upload
     * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \&quot;[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\&quot; You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param sarifId The SARIF ID obtained after uploading. (required)
     * @return ApiResponse&lt;CodeScanningSarifsStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if the sarif id does not match any upload </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository">Get information about a SARIF upload Documentation</a>
     */
    public ApiResponse<CodeScanningSarifsStatus> codeScanningGetSarifWithHttpInfo(String owner, String repo, String sarifId) throws ApiException {
        okhttp3.Call localVarCall = codeScanningGetSarifValidateBeforeCall(owner, repo, sarifId, null);
        Type localVarReturnType = new TypeToken<CodeScanningSarifsStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about a SARIF upload (asynchronously)
     * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \&quot;[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository).\&quot; You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param sarifId The SARIF ID obtained after uploading. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found if the sarif id does not match any upload </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository">Get information about a SARIF upload Documentation</a>
     */
    public okhttp3.Call codeScanningGetSarifAsync(String owner, String repo, String sarifId, final ApiCallback<CodeScanningSarifsStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningGetSarifValidateBeforeCall(owner, repo, sarifId, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningSarifsStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningListAlertInstances
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert">List instances of a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningListAlertInstancesCall(String owner, String repo, Integer alertNumber, Integer page, Integer perPage, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "alert_number" + "}", localVarApiClient.escapeString(alertNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningListAlertInstancesValidateBeforeCall(String owner, String repo, Integer alertNumber, Integer page, Integer perPage, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningListAlertInstances(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningListAlertInstances(Async)");
        }

        // verify the required parameter 'alertNumber' is set
        if (alertNumber == null) {
            throw new ApiException("Missing the required parameter 'alertNumber' when calling codeScanningListAlertInstances(Async)");
        }

        return codeScanningListAlertInstancesCall(owner, repo, alertNumber, page, perPage, ref, _callback);

    }

    /**
     * List instances of a code scanning alert
     * Lists all instances of the specified code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @return List&lt;CodeScanningAlertInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert">List instances of a code scanning alert Documentation</a>
     */
    public List<CodeScanningAlertInstance> codeScanningListAlertInstances(String owner, String repo, Integer alertNumber, Integer page, Integer perPage, String ref) throws ApiException {
        ApiResponse<List<CodeScanningAlertInstance>> localVarResp = codeScanningListAlertInstancesWithHttpInfo(owner, repo, alertNumber, page, perPage, ref);
        return localVarResp.getData();
    }

    /**
     * List instances of a code scanning alert
     * Lists all instances of the specified code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @return ApiResponse&lt;List&lt;CodeScanningAlertInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert">List instances of a code scanning alert Documentation</a>
     */
    public ApiResponse<List<CodeScanningAlertInstance>> codeScanningListAlertInstancesWithHttpInfo(String owner, String repo, Integer alertNumber, Integer page, Integer perPage, String ref) throws ApiException {
        okhttp3.Call localVarCall = codeScanningListAlertInstancesValidateBeforeCall(owner, repo, alertNumber, page, perPage, ref, null);
        Type localVarReturnType = new TypeToken<List<CodeScanningAlertInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List instances of a code scanning alert (asynchronously)
     * Lists all instances of the specified code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert">List instances of a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningListAlertInstancesAsync(String owner, String repo, Integer alertNumber, Integer page, Integer perPage, String ref, final ApiCallback<List<CodeScanningAlertInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningListAlertInstancesValidateBeforeCall(owner, repo, alertNumber, page, perPage, ref, _callback);
        Type localVarReturnType = new TypeToken<List<CodeScanningAlertInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningListAlertsForRepo
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param state Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository">List code scanning alerts for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningListAlertsForRepoCall(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, CodeScanningAlertState state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/alerts"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toolName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tool_name", toolName));
        }

        if (toolGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tool_guid", toolGuid));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningListAlertsForRepoValidateBeforeCall(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, CodeScanningAlertState state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningListAlertsForRepo(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningListAlertsForRepo(Async)");
        }

        return codeScanningListAlertsForRepoCall(owner, repo, toolName, toolGuid, page, perPage, ref, state, _callback);

    }

    /**
     * List code scanning alerts for a repository
     * Lists all open code scanning alerts for the default branch (usually &#x60;main&#x60; or &#x60;master&#x60;). You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The response includes a &#x60;most_recent_instance&#x60; object. This provides details of the most recent instance of this alert for the default branch or for the specified Git reference (if you used &#x60;ref&#x60; in the request).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param state Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     * @return List&lt;CodeScanningAlertItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository">List code scanning alerts for a repository Documentation</a>
     */
    public List<CodeScanningAlertItems> codeScanningListAlertsForRepo(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, CodeScanningAlertState state) throws ApiException {
        ApiResponse<List<CodeScanningAlertItems>> localVarResp = codeScanningListAlertsForRepoWithHttpInfo(owner, repo, toolName, toolGuid, page, perPage, ref, state);
        return localVarResp.getData();
    }

    /**
     * List code scanning alerts for a repository
     * Lists all open code scanning alerts for the default branch (usually &#x60;main&#x60; or &#x60;master&#x60;). You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The response includes a &#x60;most_recent_instance&#x60; object. This provides details of the most recent instance of this alert for the default branch or for the specified Git reference (if you used &#x60;ref&#x60; in the request).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param state Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     * @return ApiResponse&lt;List&lt;CodeScanningAlertItems&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository">List code scanning alerts for a repository Documentation</a>
     */
    public ApiResponse<List<CodeScanningAlertItems>> codeScanningListAlertsForRepoWithHttpInfo(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, CodeScanningAlertState state) throws ApiException {
        okhttp3.Call localVarCall = codeScanningListAlertsForRepoValidateBeforeCall(owner, repo, toolName, toolGuid, page, perPage, ref, state, null);
        Type localVarReturnType = new TypeToken<List<CodeScanningAlertItems>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List code scanning alerts for a repository (asynchronously)
     * Lists all open code scanning alerts for the default branch (usually &#x60;main&#x60; or &#x60;master&#x60;). You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  The response includes a &#x60;most_recent_instance&#x60; object. This provides details of the most recent instance of this alert for the default branch or for the specified Git reference (if you used &#x60;ref&#x60; in the request).
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the results you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param state Set to &#x60;open&#x60;, &#x60;fixed&#x60;, or &#x60;dismissed&#x60; to list code scanning alerts in a specific state. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository">List code scanning alerts for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningListAlertsForRepoAsync(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, CodeScanningAlertState state, final ApiCallback<List<CodeScanningAlertItems>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningListAlertsForRepoValidateBeforeCall(owner, repo, toolName, toolGuid, page, perPage, ref, state, _callback);
        Type localVarReturnType = new TypeToken<List<CodeScanningAlertItems>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningListRecentAnalyses
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param sarifId Filter analyses belonging to the same SARIF upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository">List code scanning analyses for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningListRecentAnalysesCall(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, String sarifId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/analyses"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toolName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tool_name", toolName));
        }

        if (toolGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tool_guid", toolGuid));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (sarifId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sarif_id", sarifId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningListRecentAnalysesValidateBeforeCall(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, String sarifId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningListRecentAnalyses(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningListRecentAnalyses(Async)");
        }

        return codeScanningListRecentAnalysesCall(owner, repo, toolName, toolGuid, page, perPage, ref, sarifId, _callback);

    }

    /**
     * List code scanning analyses for a repository
     * Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to list the analyses you&#39;re interested in. By default 30 analyses are listed per page.  The &#x60;rules_count&#x60; field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param sarifId Filter analyses belonging to the same SARIF upload. (optional)
     * @return List&lt;CodeScanningAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository">List code scanning analyses for a repository Documentation</a>
     */
    public List<CodeScanningAnalysis> codeScanningListRecentAnalyses(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, String sarifId) throws ApiException {
        ApiResponse<List<CodeScanningAnalysis>> localVarResp = codeScanningListRecentAnalysesWithHttpInfo(owner, repo, toolName, toolGuid, page, perPage, ref, sarifId);
        return localVarResp.getData();
    }

    /**
     * List code scanning analyses for a repository
     * Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to list the analyses you&#39;re interested in. By default 30 analyses are listed per page.  The &#x60;rules_count&#x60; field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param sarifId Filter analyses belonging to the same SARIF upload. (optional)
     * @return ApiResponse&lt;List&lt;CodeScanningAnalysis&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository">List code scanning analyses for a repository Documentation</a>
     */
    public ApiResponse<List<CodeScanningAnalysis>> codeScanningListRecentAnalysesWithHttpInfo(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, String sarifId) throws ApiException {
        okhttp3.Call localVarCall = codeScanningListRecentAnalysesValidateBeforeCall(owner, repo, toolName, toolGuid, page, perPage, ref, sarifId, null);
        Type localVarReturnType = new TypeToken<List<CodeScanningAnalysis>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List code scanning analyses for a repository (asynchronously)
     * Lists the details of all code scanning analyses for a repository, starting with the most recent. The response is paginated and you can use the &#x60;page&#x60; and &#x60;per_page&#x60; parameters to list the analyses you&#39;re interested in. By default 30 analyses are listed per page.  The &#x60;rules_count&#x60; field in the response give the number of rules that were run in the analysis. For very old analyses this data is not available, and &#x60;0&#x60; is returned in this field.  You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; read permission to use this endpoint.  **Deprecation notice**: The &#x60;tool_name&#x60; field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the &#x60;tool&#x60; field.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param toolName The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either &#x60;tool_name&#x60; or &#x60;tool_guid&#x60;, but not both. (optional)
     * @param toolGuid The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either &#x60;tool_guid&#x60; or &#x60;tool_name&#x60;, but not both. (optional)
     * @param page Page number of the results to fetch. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param ref The Git reference for the analyses you want to list. The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/&lt;branch name&gt;&#x60; or simply &#x60;&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
     * @param sarifId Filter analyses belonging to the same SARIF upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if GitHub Advanced Security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository">List code scanning analyses for a repository Documentation</a>
     */
    public okhttp3.Call codeScanningListRecentAnalysesAsync(String owner, String repo, String toolName, String toolGuid, Integer page, Integer perPage, String ref, String sarifId, final ApiCallback<List<CodeScanningAnalysis>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningListRecentAnalysesValidateBeforeCall(owner, repo, toolName, toolGuid, page, perPage, ref, sarifId, _callback);
        Type localVarReturnType = new TypeToken<List<CodeScanningAnalysis>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningUpdateAlert
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param codeScanningUpdateAlertRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#update-a-code-scanning-alert">Update a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningUpdateAlertCall(String owner, String repo, Integer alertNumber, CodeScanningUpdateAlertRequest codeScanningUpdateAlertRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codeScanningUpdateAlertRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()))
            .replace("{" + "alert_number" + "}", localVarApiClient.escapeString(alertNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningUpdateAlertValidateBeforeCall(String owner, String repo, Integer alertNumber, CodeScanningUpdateAlertRequest codeScanningUpdateAlertRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningUpdateAlert(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningUpdateAlert(Async)");
        }

        // verify the required parameter 'alertNumber' is set
        if (alertNumber == null) {
            throw new ApiException("Missing the required parameter 'alertNumber' when calling codeScanningUpdateAlert(Async)");
        }

        // verify the required parameter 'codeScanningUpdateAlertRequest' is set
        if (codeScanningUpdateAlertRequest == null) {
            throw new ApiException("Missing the required parameter 'codeScanningUpdateAlertRequest' when calling codeScanningUpdateAlert(Async)");
        }

        return codeScanningUpdateAlertCall(owner, repo, alertNumber, codeScanningUpdateAlertRequest, _callback);

    }

    /**
     * Update a code scanning alert
     * Updates the status of a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param codeScanningUpdateAlertRequest  (required)
     * @return CodeScanningAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#update-a-code-scanning-alert">Update a code scanning alert Documentation</a>
     */
    public CodeScanningAlert codeScanningUpdateAlert(String owner, String repo, Integer alertNumber, CodeScanningUpdateAlertRequest codeScanningUpdateAlertRequest) throws ApiException {
        ApiResponse<CodeScanningAlert> localVarResp = codeScanningUpdateAlertWithHttpInfo(owner, repo, alertNumber, codeScanningUpdateAlertRequest);
        return localVarResp.getData();
    }

    /**
     * Update a code scanning alert
     * Updates the status of a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param codeScanningUpdateAlertRequest  (required)
     * @return ApiResponse&lt;CodeScanningAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#update-a-code-scanning-alert">Update a code scanning alert Documentation</a>
     */
    public ApiResponse<CodeScanningAlert> codeScanningUpdateAlertWithHttpInfo(String owner, String repo, Integer alertNumber, CodeScanningUpdateAlertRequest codeScanningUpdateAlertRequest) throws ApiException {
        okhttp3.Call localVarCall = codeScanningUpdateAlertValidateBeforeCall(owner, repo, alertNumber, codeScanningUpdateAlertRequest, null);
        Type localVarReturnType = new TypeToken<CodeScanningAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a code scanning alert (asynchronously)
     * Updates the status of a single code scanning alert. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the &#x60;number&#x60; field in the response from the &#x60;GET /repos/{owner}/{repo}/code-scanning/alerts&#x60; operation. (required)
     * @param codeScanningUpdateAlertRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#update-a-code-scanning-alert">Update a code scanning alert Documentation</a>
     */
    public okhttp3.Call codeScanningUpdateAlertAsync(String owner, String repo, Integer alertNumber, CodeScanningUpdateAlertRequest codeScanningUpdateAlertRequest, final ApiCallback<CodeScanningAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningUpdateAlertValidateBeforeCall(owner, repo, alertNumber, codeScanningUpdateAlertRequest, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codeScanningUploadSarif
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codeScanningUploadSarifRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request if the sarif field is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large if the sarif field is too large </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#upload-a-sarif-file">Upload an analysis as SARIF data Documentation</a>
     */
    public okhttp3.Call codeScanningUploadSarifCall(String owner, String repo, CodeScanningUploadSarifRequest codeScanningUploadSarifRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codeScanningUploadSarifRequest;

        // create path and map variables
        String localVarPath = "/repos/{owner}/{repo}/code-scanning/sarifs"
            .replace("{" + "owner" + "}", localVarApiClient.escapeString(owner.toString()))
            .replace("{" + "repo" + "}", localVarApiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codeScanningUploadSarifValidateBeforeCall(String owner, String repo, CodeScanningUploadSarifRequest codeScanningUploadSarifRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling codeScanningUploadSarif(Async)");
        }

        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling codeScanningUploadSarif(Async)");
        }

        // verify the required parameter 'codeScanningUploadSarifRequest' is set
        if (codeScanningUploadSarifRequest == null) {
            throw new ApiException("Missing the required parameter 'codeScanningUploadSarifRequest' when calling codeScanningUploadSarif(Async)");
        }

        return codeScanningUploadSarifCall(owner, repo, codeScanningUploadSarifRequest, _callback);

    }

    /**
     * Upload an analysis as SARIF data
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example &#x60;--ref refs/pull/42/merge&#x60; or &#x60;--ref refs/pull/42/head&#x60;, then the results appear as alerts in a pull request check. For more information, see \&quot;[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\&quot;  - If you upload to a branch, for example &#x60;--ref refs/heads/my-branch&#x60;, then the results appear in the **Security** tab for your repository. For more information, see \&quot;[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\&quot;  You must compress the SARIF-formatted analysis data that you want to upload, using &#x60;gzip&#x60;, and then encode it as a Base64 format string. For example:  &#x60;&#x60;&#x60; gzip -c analysis-data.sarif | base64 -w0 &#x60;&#x60;&#x60;  SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.  The &#x60;202 Accepted&#x60;, response includes an &#x60;id&#x60; value. You can use this ID to check the status of the upload by using this for the &#x60;/sarifs/{sarif_id}&#x60; endpoint. For more information, see \&quot;[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codeScanningUploadSarifRequest  (required)
     * @return CodeScanningSarifsReceipt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request if the sarif field is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large if the sarif field is too large </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#upload-a-sarif-file">Upload an analysis as SARIF data Documentation</a>
     */
    public CodeScanningSarifsReceipt codeScanningUploadSarif(String owner, String repo, CodeScanningUploadSarifRequest codeScanningUploadSarifRequest) throws ApiException {
        ApiResponse<CodeScanningSarifsReceipt> localVarResp = codeScanningUploadSarifWithHttpInfo(owner, repo, codeScanningUploadSarifRequest);
        return localVarResp.getData();
    }

    /**
     * Upload an analysis as SARIF data
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example &#x60;--ref refs/pull/42/merge&#x60; or &#x60;--ref refs/pull/42/head&#x60;, then the results appear as alerts in a pull request check. For more information, see \&quot;[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\&quot;  - If you upload to a branch, for example &#x60;--ref refs/heads/my-branch&#x60;, then the results appear in the **Security** tab for your repository. For more information, see \&quot;[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\&quot;  You must compress the SARIF-formatted analysis data that you want to upload, using &#x60;gzip&#x60;, and then encode it as a Base64 format string. For example:  &#x60;&#x60;&#x60; gzip -c analysis-data.sarif | base64 -w0 &#x60;&#x60;&#x60;  SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.  The &#x60;202 Accepted&#x60;, response includes an &#x60;id&#x60; value. You can use this ID to check the status of the upload by using this for the &#x60;/sarifs/{sarif_id}&#x60; endpoint. For more information, see \&quot;[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codeScanningUploadSarifRequest  (required)
     * @return ApiResponse&lt;CodeScanningSarifsReceipt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request if the sarif field is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large if the sarif field is too large </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#upload-a-sarif-file">Upload an analysis as SARIF data Documentation</a>
     */
    public ApiResponse<CodeScanningSarifsReceipt> codeScanningUploadSarifWithHttpInfo(String owner, String repo, CodeScanningUploadSarifRequest codeScanningUploadSarifRequest) throws ApiException {
        okhttp3.Call localVarCall = codeScanningUploadSarifValidateBeforeCall(owner, repo, codeScanningUploadSarifRequest, null);
        Type localVarReturnType = new TypeToken<CodeScanningSarifsReceipt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload an analysis as SARIF data (asynchronously)
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the &#x60;security_events&#x60; scope to use this endpoint. GitHub Apps must have the &#x60;security_events&#x60; write permission to use this endpoint.  There are two places where you can upload code scanning results.  - If you upload to a pull request, for example &#x60;--ref refs/pull/42/merge&#x60; or &#x60;--ref refs/pull/42/head&#x60;, then the results appear as alerts in a pull request check. For more information, see \&quot;[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests).\&quot;  - If you upload to a branch, for example &#x60;--ref refs/heads/my-branch&#x60;, then the results appear in the **Security** tab for your repository. For more information, see \&quot;[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository).\&quot;  You must compress the SARIF-formatted analysis data that you want to upload, using &#x60;gzip&#x60;, and then encode it as a Base64 format string. For example:  &#x60;&#x60;&#x60; gzip -c analysis-data.sarif | base64 -w0 &#x60;&#x60;&#x60;  SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.  The &#x60;202 Accepted&#x60;, response includes an &#x60;id&#x60; value. You can use this ID to check the status of the upload by using this for the &#x60;/sarifs/{sarif_id}&#x60; endpoint. For more information, see \&quot;[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload).\&quot;
     * @param owner The account owner of the repository. The name is not case sensitive. (required)
     * @param repo The name of the repository. The name is not case sensitive. (required)
     * @param codeScanningUploadSarifRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request if the sarif field is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Response if the repository is archived or if github advanced security is not enabled for this repository </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large if the sarif field is too large </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://docs.github.com/enterprise-server@3.1/rest/reference/code-scanning#upload-a-sarif-file">Upload an analysis as SARIF data Documentation</a>
     */
    public okhttp3.Call codeScanningUploadSarifAsync(String owner, String repo, CodeScanningUploadSarifRequest codeScanningUploadSarifRequest, final ApiCallback<CodeScanningSarifsReceipt> _callback) throws ApiException {

        okhttp3.Call localVarCall = codeScanningUploadSarifValidateBeforeCall(owner, repo, codeScanningUploadSarifRequest, _callback);
        Type localVarReturnType = new TypeToken<CodeScanningSarifsReceipt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
