/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NullableSimpleUser;
import org.openapitools.client.model.ReactionRollup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:07:04.504978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamDiscussion {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private NullableSimpleUser author;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_HTML = "body_html";
  @SerializedName(SERIALIZED_NAME_BODY_HTML)
  private String bodyHtml;

  public static final String SERIALIZED_NAME_BODY_VERSION = "body_version";
  @SerializedName(SERIALIZED_NAME_BODY_VERSION)
  private String bodyVersion;

  public static final String SERIALIZED_NAME_COMMENTS_COUNT = "comments_count";
  @SerializedName(SERIALIZED_NAME_COMMENTS_COUNT)
  private Integer commentsCount;

  public static final String SERIALIZED_NAME_COMMENTS_URL = "comments_url";
  @SerializedName(SERIALIZED_NAME_COMMENTS_URL)
  private URI commentsUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_LAST_EDITED_AT = "last_edited_at";
  @SerializedName(SERIALIZED_NAME_LAST_EDITED_AT)
  private OffsetDateTime lastEditedAt;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private ReactionRollup reactions;

  public static final String SERIALIZED_NAME_TEAM_URL = "team_url";
  @SerializedName(SERIALIZED_NAME_TEAM_URL)
  private URI teamUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public TeamDiscussion() {
  }

  public TeamDiscussion author(NullableSimpleUser author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public NullableSimpleUser getAuthor() {
    return author;
  }

  public void setAuthor(NullableSimpleUser author) {
    this.author = author;
  }


  public TeamDiscussion body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The main text of the discussion.
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public TeamDiscussion bodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
    return this;
  }

  /**
   * Get bodyHtml
   * @return bodyHtml
   */
  @javax.annotation.Nonnull
  public String getBodyHtml() {
    return bodyHtml;
  }

  public void setBodyHtml(String bodyHtml) {
    this.bodyHtml = bodyHtml;
  }


  public TeamDiscussion bodyVersion(String bodyVersion) {
    this.bodyVersion = bodyVersion;
    return this;
  }

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @return bodyVersion
   */
  @javax.annotation.Nonnull
  public String getBodyVersion() {
    return bodyVersion;
  }

  public void setBodyVersion(String bodyVersion) {
    this.bodyVersion = bodyVersion;
  }


  public TeamDiscussion commentsCount(Integer commentsCount) {
    this.commentsCount = commentsCount;
    return this;
  }

  /**
   * Get commentsCount
   * @return commentsCount
   */
  @javax.annotation.Nonnull
  public Integer getCommentsCount() {
    return commentsCount;
  }

  public void setCommentsCount(Integer commentsCount) {
    this.commentsCount = commentsCount;
  }


  public TeamDiscussion commentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
    return this;
  }

  /**
   * Get commentsUrl
   * @return commentsUrl
   */
  @javax.annotation.Nonnull
  public URI getCommentsUrl() {
    return commentsUrl;
  }

  public void setCommentsUrl(URI commentsUrl) {
    this.commentsUrl = commentsUrl;
  }


  public TeamDiscussion createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TeamDiscussion htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   * @return htmlUrl
   */
  @javax.annotation.Nonnull
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public TeamDiscussion lastEditedAt(OffsetDateTime lastEditedAt) {
    this.lastEditedAt = lastEditedAt;
    return this;
  }

  /**
   * Get lastEditedAt
   * @return lastEditedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastEditedAt() {
    return lastEditedAt;
  }

  public void setLastEditedAt(OffsetDateTime lastEditedAt) {
    this.lastEditedAt = lastEditedAt;
  }


  public TeamDiscussion nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public TeamDiscussion number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The unique sequence number of a team discussion.
   * @return number
   */
  @javax.annotation.Nonnull
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public TeamDiscussion pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @return pinned
   */
  @javax.annotation.Nonnull
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public TeamDiscussion _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   * @return _private
   */
  @javax.annotation.Nonnull
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public TeamDiscussion reactions(ReactionRollup reactions) {
    this.reactions = reactions;
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public ReactionRollup getReactions() {
    return reactions;
  }

  public void setReactions(ReactionRollup reactions) {
    this.reactions = reactions;
  }


  public TeamDiscussion teamUrl(URI teamUrl) {
    this.teamUrl = teamUrl;
    return this;
  }

  /**
   * Get teamUrl
   * @return teamUrl
   */
  @javax.annotation.Nonnull
  public URI getTeamUrl() {
    return teamUrl;
  }

  public void setTeamUrl(URI teamUrl) {
    this.teamUrl = teamUrl;
  }


  public TeamDiscussion title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the discussion.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TeamDiscussion updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TeamDiscussion url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamDiscussion teamDiscussion = (TeamDiscussion) o;
    return Objects.equals(this.author, teamDiscussion.author) &&
        Objects.equals(this.body, teamDiscussion.body) &&
        Objects.equals(this.bodyHtml, teamDiscussion.bodyHtml) &&
        Objects.equals(this.bodyVersion, teamDiscussion.bodyVersion) &&
        Objects.equals(this.commentsCount, teamDiscussion.commentsCount) &&
        Objects.equals(this.commentsUrl, teamDiscussion.commentsUrl) &&
        Objects.equals(this.createdAt, teamDiscussion.createdAt) &&
        Objects.equals(this.htmlUrl, teamDiscussion.htmlUrl) &&
        Objects.equals(this.lastEditedAt, teamDiscussion.lastEditedAt) &&
        Objects.equals(this.nodeId, teamDiscussion.nodeId) &&
        Objects.equals(this.number, teamDiscussion.number) &&
        Objects.equals(this.pinned, teamDiscussion.pinned) &&
        Objects.equals(this._private, teamDiscussion._private) &&
        Objects.equals(this.reactions, teamDiscussion.reactions) &&
        Objects.equals(this.teamUrl, teamDiscussion.teamUrl) &&
        Objects.equals(this.title, teamDiscussion.title) &&
        Objects.equals(this.updatedAt, teamDiscussion.updatedAt) &&
        Objects.equals(this.url, teamDiscussion.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, body, bodyHtml, bodyVersion, commentsCount, commentsUrl, createdAt, htmlUrl, lastEditedAt, nodeId, number, pinned, _private, reactions, teamUrl, title, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamDiscussion {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyHtml: ").append(toIndentedString(bodyHtml)).append("\n");
    sb.append("    bodyVersion: ").append(toIndentedString(bodyVersion)).append("\n");
    sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    lastEditedAt: ").append(toIndentedString(lastEditedAt)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    teamUrl: ").append(toIndentedString(teamUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("body");
    openapiFields.add("body_html");
    openapiFields.add("body_version");
    openapiFields.add("comments_count");
    openapiFields.add("comments_url");
    openapiFields.add("created_at");
    openapiFields.add("html_url");
    openapiFields.add("last_edited_at");
    openapiFields.add("node_id");
    openapiFields.add("number");
    openapiFields.add("pinned");
    openapiFields.add("private");
    openapiFields.add("reactions");
    openapiFields.add("team_url");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("author");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("body_html");
    openapiRequiredFields.add("body_version");
    openapiRequiredFields.add("comments_count");
    openapiRequiredFields.add("comments_url");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("html_url");
    openapiRequiredFields.add("last_edited_at");
    openapiRequiredFields.add("node_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("pinned");
    openapiRequiredFields.add("private");
    openapiRequiredFields.add("team_url");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamDiscussion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamDiscussion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamDiscussion is not found in the empty JSON string", TeamDiscussion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamDiscussion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamDiscussion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamDiscussion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `author`
      NullableSimpleUser.validateJsonElement(jsonObj.get("author"));
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("body_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_html").toString()));
      }
      if (!jsonObj.get("body_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_version").toString()));
      }
      if (!jsonObj.get("comments_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments_url").toString()));
      }
      if (!jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      if (!jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      // validate the optional field `reactions`
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull()) {
        ReactionRollup.validateJsonElement(jsonObj.get("reactions"));
      }
      if (!jsonObj.get("team_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_url").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamDiscussion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamDiscussion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamDiscussion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamDiscussion.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamDiscussion>() {
           @Override
           public void write(JsonWriter out, TeamDiscussion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamDiscussion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamDiscussion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamDiscussion
   * @throws IOException if the JSON string is invalid with respect to TeamDiscussion
   */
  public static TeamDiscussion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamDiscussion.class);
  }

  /**
   * Convert an instance of TeamDiscussion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

