/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICode_scanning_alert_rule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICode_scanning_alert_rule::OAICode_scanning_alert_rule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICode_scanning_alert_rule::OAICode_scanning_alert_rule() {
    this->initializeModel();
}

OAICode_scanning_alert_rule::~OAICode_scanning_alert_rule() {}

void OAICode_scanning_alert_rule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_help_isSet = false;
    m_help_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICode_scanning_alert_rule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICode_scanning_alert_rule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("full_description")]);
    m_full_description_isSet = !json[QString("full_description")].isNull() && m_full_description_isValid;

    m_help_isValid = ::OpenAPI::fromJsonValue(m_help, json[QString("help")]);
    m_help_isSet = !json[QString("help")].isNull() && m_help_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICode_scanning_alert_rule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICode_scanning_alert_rule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_full_description_isSet) {
        obj.insert(QString("full_description"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_help_isSet) {
        obj.insert(QString("help"), ::OpenAPI::toJsonValue(m_help));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICode_scanning_alert_rule::getDescription() const {
    return m_description;
}
void OAICode_scanning_alert_rule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICode_scanning_alert_rule::is_description_Set() const{
    return m_description_isSet;
}

bool OAICode_scanning_alert_rule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICode_scanning_alert_rule::getFullDescription() const {
    return m_full_description;
}
void OAICode_scanning_alert_rule::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAICode_scanning_alert_rule::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAICode_scanning_alert_rule::is_full_description_Valid() const{
    return m_full_description_isValid;
}

QString OAICode_scanning_alert_rule::getHelp() const {
    return m_help;
}
void OAICode_scanning_alert_rule::setHelp(const QString &help) {
    m_help = help;
    m_help_isSet = true;
}

bool OAICode_scanning_alert_rule::is_help_Set() const{
    return m_help_isSet;
}

bool OAICode_scanning_alert_rule::is_help_Valid() const{
    return m_help_isValid;
}

QString OAICode_scanning_alert_rule::getId() const {
    return m_id;
}
void OAICode_scanning_alert_rule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICode_scanning_alert_rule::is_id_Set() const{
    return m_id_isSet;
}

bool OAICode_scanning_alert_rule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICode_scanning_alert_rule::getName() const {
    return m_name;
}
void OAICode_scanning_alert_rule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICode_scanning_alert_rule::is_name_Set() const{
    return m_name_isSet;
}

bool OAICode_scanning_alert_rule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICode_scanning_alert_rule::getSeverity() const {
    return m_severity;
}
void OAICode_scanning_alert_rule::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICode_scanning_alert_rule::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICode_scanning_alert_rule::is_severity_Valid() const{
    return m_severity_isValid;
}

QList<QString> OAICode_scanning_alert_rule::getTags() const {
    return m_tags;
}
void OAICode_scanning_alert_rule::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICode_scanning_alert_rule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICode_scanning_alert_rule::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICode_scanning_alert_rule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICode_scanning_alert_rule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
