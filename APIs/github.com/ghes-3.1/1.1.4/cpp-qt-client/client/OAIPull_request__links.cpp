/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_request__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_request__links::OAIPull_request__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_request__links::OAIPull_request__links() {
    this->initializeModel();
}

OAIPull_request__links::~OAIPull_request__links() {}

void OAIPull_request__links::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_review_comment_isSet = false;
    m_review_comment_isValid = false;

    m_review_comments_isSet = false;
    m_review_comments_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;
}

void OAIPull_request__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_request__links::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_review_comment_isValid = ::OpenAPI::fromJsonValue(m_review_comment, json[QString("review_comment")]);
    m_review_comment_isSet = !json[QString("review_comment")].isNull() && m_review_comment_isValid;

    m_review_comments_isValid = ::OpenAPI::fromJsonValue(m_review_comments, json[QString("review_comments")]);
    m_review_comments_isSet = !json[QString("review_comments")].isNull() && m_review_comments_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;
}

QString OAIPull_request__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_request__links::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_commits.isSet()) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_review_comment.isSet()) {
        obj.insert(QString("review_comment"), ::OpenAPI::toJsonValue(m_review_comment));
    }
    if (m_review_comments.isSet()) {
        obj.insert(QString("review_comments"), ::OpenAPI::toJsonValue(m_review_comments));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_statuses.isSet()) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    return obj;
}

OAILink OAIPull_request__links::getComments() const {
    return m_comments;
}
void OAIPull_request__links::setComments(const OAILink &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPull_request__links::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPull_request__links::is_comments_Valid() const{
    return m_comments_isValid;
}

OAILink OAIPull_request__links::getCommits() const {
    return m_commits;
}
void OAIPull_request__links::setCommits(const OAILink &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIPull_request__links::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIPull_request__links::is_commits_Valid() const{
    return m_commits_isValid;
}

OAILink OAIPull_request__links::getHtml() const {
    return m_html;
}
void OAIPull_request__links::setHtml(const OAILink &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIPull_request__links::is_html_Set() const{
    return m_html_isSet;
}

bool OAIPull_request__links::is_html_Valid() const{
    return m_html_isValid;
}

OAILink OAIPull_request__links::getIssue() const {
    return m_issue;
}
void OAIPull_request__links::setIssue(const OAILink &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIPull_request__links::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIPull_request__links::is_issue_Valid() const{
    return m_issue_isValid;
}

OAILink OAIPull_request__links::getReviewComment() const {
    return m_review_comment;
}
void OAIPull_request__links::setReviewComment(const OAILink &review_comment) {
    m_review_comment = review_comment;
    m_review_comment_isSet = true;
}

bool OAIPull_request__links::is_review_comment_Set() const{
    return m_review_comment_isSet;
}

bool OAIPull_request__links::is_review_comment_Valid() const{
    return m_review_comment_isValid;
}

OAILink OAIPull_request__links::getReviewComments() const {
    return m_review_comments;
}
void OAIPull_request__links::setReviewComments(const OAILink &review_comments) {
    m_review_comments = review_comments;
    m_review_comments_isSet = true;
}

bool OAIPull_request__links::is_review_comments_Set() const{
    return m_review_comments_isSet;
}

bool OAIPull_request__links::is_review_comments_Valid() const{
    return m_review_comments_isValid;
}

OAILink OAIPull_request__links::getSelf() const {
    return m_self;
}
void OAIPull_request__links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIPull_request__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIPull_request__links::is_self_Valid() const{
    return m_self_isValid;
}

OAILink OAIPull_request__links::getStatuses() const {
    return m_statuses;
}
void OAIPull_request__links::setStatuses(const OAILink &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIPull_request__links::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIPull_request__links::is_statuses_Valid() const{
    return m_statuses_isValid;
}

bool OAIPull_request__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_request__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_commits_isValid && m_html_isValid && m_issue_isValid && m_review_comment_isValid && m_review_comments_isValid && m_self_isValid && m_statuses_isValid && true;
}

} // namespace OpenAPI
