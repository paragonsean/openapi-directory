/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssue.h
 *
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */

#ifndef OAIIssue_H
#define OAIIssue_H

#include <QJsonObject>

#include "OAIAuthor_association.h"
#include "OAIIssue_labels_inner.h"
#include "OAIIssue_pull_request.h"
#include "OAINullable_integration.h"
#include "OAINullable_milestone.h"
#include "OAINullable_simple_user.h"
#include "OAIReaction_rollup.h"
#include "OAIRepository.h"
#include "OAISimple_user.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINullable_simple_user;
class OAISimple_user;
class OAIIssue_labels_inner;
class OAINullable_milestone;
class OAINullable_integration;
class OAIIssue_pull_request;
class OAIReaction_rollup;
class OAIRepository;

class OAIIssue : public OAIObject {
public:
    OAIIssue();
    OAIIssue(QString json);
    ~OAIIssue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveLockReason() const;
    void setActiveLockReason(const QString &active_lock_reason);
    bool is_active_lock_reason_Set() const;
    bool is_active_lock_reason_Valid() const;

    OAINullable_simple_user getAssignee() const;
    void setAssignee(const OAINullable_simple_user &assignee);
    bool is_assignee_Set() const;
    bool is_assignee_Valid() const;

    QList<OAISimple_user> getAssignees() const;
    void setAssignees(const QList<OAISimple_user> &assignees);
    bool is_assignees_Set() const;
    bool is_assignees_Valid() const;

    OAIAuthor_association getAuthorAssociation() const;
    void setAuthorAssociation(const OAIAuthor_association &author_association);
    bool is_author_association_Set() const;
    bool is_author_association_Valid() const;

    QString getBody() const;
    void setBody(const QString &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    QString getBodyHtml() const;
    void setBodyHtml(const QString &body_html);
    bool is_body_html_Set() const;
    bool is_body_html_Valid() const;

    QString getBodyText() const;
    void setBodyText(const QString &body_text);
    bool is_body_text_Set() const;
    bool is_body_text_Valid() const;

    QDateTime getClosedAt() const;
    void setClosedAt(const QDateTime &closed_at);
    bool is_closed_at_Set() const;
    bool is_closed_at_Valid() const;

    OAINullable_simple_user getClosedBy() const;
    void setClosedBy(const OAINullable_simple_user &closed_by);
    bool is_closed_by_Set() const;
    bool is_closed_by_Valid() const;

    qint32 getComments() const;
    void setComments(const qint32 &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QString getCommentsUrl() const;
    void setCommentsUrl(const QString &comments_url);
    bool is_comments_url_Set() const;
    bool is_comments_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    bool isDraft() const;
    void setDraft(const bool &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    QString getEventsUrl() const;
    void setEventsUrl(const QString &events_url);
    bool is_events_url_Set() const;
    bool is_events_url_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIIssue_labels_inner> getLabels() const;
    void setLabels(const QList<OAIIssue_labels_inner> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getLabelsUrl() const;
    void setLabelsUrl(const QString &labels_url);
    bool is_labels_url_Set() const;
    bool is_labels_url_Valid() const;

    bool isLocked() const;
    void setLocked(const bool &locked);
    bool is_locked_Set() const;
    bool is_locked_Valid() const;

    OAINullable_milestone getMilestone() const;
    void setMilestone(const OAINullable_milestone &milestone);
    bool is_milestone_Set() const;
    bool is_milestone_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    OAINullable_integration getPerformedViaGithubApp() const;
    void setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app);
    bool is_performed_via_github_app_Set() const;
    bool is_performed_via_github_app_Valid() const;

    OAIIssue_pull_request getPullRequest() const;
    void setPullRequest(const OAIIssue_pull_request &pull_request);
    bool is_pull_request_Set() const;
    bool is_pull_request_Valid() const;

    OAIReaction_rollup getReactions() const;
    void setReactions(const OAIReaction_rollup &reactions);
    bool is_reactions_Set() const;
    bool is_reactions_Valid() const;

    OAIRepository getRepository() const;
    void setRepository(const OAIRepository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getRepositoryUrl() const;
    void setRepositoryUrl(const QString &repository_url);
    bool is_repository_url_Set() const;
    bool is_repository_url_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getTimelineUrl() const;
    void setTimelineUrl(const QString &timeline_url);
    bool is_timeline_url_Set() const;
    bool is_timeline_url_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAINullable_simple_user getUser() const;
    void setUser(const OAINullable_simple_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_lock_reason;
    bool m_active_lock_reason_isSet;
    bool m_active_lock_reason_isValid;

    OAINullable_simple_user m_assignee;
    bool m_assignee_isSet;
    bool m_assignee_isValid;

    QList<OAISimple_user> m_assignees;
    bool m_assignees_isSet;
    bool m_assignees_isValid;

    OAIAuthor_association m_author_association;
    bool m_author_association_isSet;
    bool m_author_association_isValid;

    QString m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    QString m_body_html;
    bool m_body_html_isSet;
    bool m_body_html_isValid;

    QString m_body_text;
    bool m_body_text_isSet;
    bool m_body_text_isValid;

    QDateTime m_closed_at;
    bool m_closed_at_isSet;
    bool m_closed_at_isValid;

    OAINullable_simple_user m_closed_by;
    bool m_closed_by_isSet;
    bool m_closed_by_isValid;

    qint32 m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QString m_comments_url;
    bool m_comments_url_isSet;
    bool m_comments_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    bool m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    QString m_events_url;
    bool m_events_url_isSet;
    bool m_events_url_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIIssue_labels_inner> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_labels_url;
    bool m_labels_url_isSet;
    bool m_labels_url_isValid;

    bool m_locked;
    bool m_locked_isSet;
    bool m_locked_isValid;

    OAINullable_milestone m_milestone;
    bool m_milestone_isSet;
    bool m_milestone_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    OAINullable_integration m_performed_via_github_app;
    bool m_performed_via_github_app_isSet;
    bool m_performed_via_github_app_isValid;

    OAIIssue_pull_request m_pull_request;
    bool m_pull_request_isSet;
    bool m_pull_request_isValid;

    OAIReaction_rollup m_reactions;
    bool m_reactions_isSet;
    bool m_reactions_isValid;

    OAIRepository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_repository_url;
    bool m_repository_url_isSet;
    bool m_repository_url_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_timeline_url;
    bool m_timeline_url_isSet;
    bool m_timeline_url_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAINullable_simple_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssue)

#endif // OAIIssue_H
