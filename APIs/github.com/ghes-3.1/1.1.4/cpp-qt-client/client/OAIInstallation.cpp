/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallation::OAIInstallation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallation::OAIInstallation() {
    this->initializeModel();
}

OAIInstallation::~OAIInstallation() {}

void OAIInstallation::initializeModel() {

    m_access_tokens_url_isSet = false;
    m_access_tokens_url_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_slug_isSet = false;
    m_app_slug_isValid = false;

    m_contact_email_isSet = false;
    m_contact_email_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_has_multiple_single_files_isSet = false;
    m_has_multiple_single_files_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_repositories_url_isSet = false;
    m_repositories_url_isValid = false;

    m_repository_selection_isSet = false;
    m_repository_selection_isValid = false;

    m_single_file_name_isSet = false;
    m_single_file_name_isValid = false;

    m_single_file_paths_isSet = false;
    m_single_file_paths_isValid = false;

    m_suspended_at_isSet = false;
    m_suspended_at_isValid = false;

    m_suspended_by_isSet = false;
    m_suspended_by_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInstallation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallation::fromJsonObject(QJsonObject json) {

    m_access_tokens_url_isValid = ::OpenAPI::fromJsonValue(m_access_tokens_url, json[QString("access_tokens_url")]);
    m_access_tokens_url_isSet = !json[QString("access_tokens_url")].isNull() && m_access_tokens_url_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_app_slug_isValid = ::OpenAPI::fromJsonValue(m_app_slug, json[QString("app_slug")]);
    m_app_slug_isSet = !json[QString("app_slug")].isNull() && m_app_slug_isValid;

    m_contact_email_isValid = ::OpenAPI::fromJsonValue(m_contact_email, json[QString("contact_email")]);
    m_contact_email_isSet = !json[QString("contact_email")].isNull() && m_contact_email_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_has_multiple_single_files_isValid = ::OpenAPI::fromJsonValue(m_has_multiple_single_files, json[QString("has_multiple_single_files")]);
    m_has_multiple_single_files_isSet = !json[QString("has_multiple_single_files")].isNull() && m_has_multiple_single_files_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_repositories_url_isValid = ::OpenAPI::fromJsonValue(m_repositories_url, json[QString("repositories_url")]);
    m_repositories_url_isSet = !json[QString("repositories_url")].isNull() && m_repositories_url_isValid;

    m_repository_selection_isValid = ::OpenAPI::fromJsonValue(m_repository_selection, json[QString("repository_selection")]);
    m_repository_selection_isSet = !json[QString("repository_selection")].isNull() && m_repository_selection_isValid;

    m_single_file_name_isValid = ::OpenAPI::fromJsonValue(m_single_file_name, json[QString("single_file_name")]);
    m_single_file_name_isSet = !json[QString("single_file_name")].isNull() && m_single_file_name_isValid;

    m_single_file_paths_isValid = ::OpenAPI::fromJsonValue(m_single_file_paths, json[QString("single_file_paths")]);
    m_single_file_paths_isSet = !json[QString("single_file_paths")].isNull() && m_single_file_paths_isValid;

    m_suspended_at_isValid = ::OpenAPI::fromJsonValue(m_suspended_at, json[QString("suspended_at")]);
    m_suspended_at_isSet = !json[QString("suspended_at")].isNull() && m_suspended_at_isValid;

    m_suspended_by_isValid = ::OpenAPI::fromJsonValue(m_suspended_by, json[QString("suspended_by")]);
    m_suspended_by_isSet = !json[QString("suspended_by")].isNull() && m_suspended_by_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("target_type")]);
    m_target_type_isSet = !json[QString("target_type")].isNull() && m_target_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIInstallation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallation::asJsonObject() const {
    QJsonObject obj;
    if (m_access_tokens_url_isSet) {
        obj.insert(QString("access_tokens_url"), ::OpenAPI::toJsonValue(m_access_tokens_url));
    }
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_slug_isSet) {
        obj.insert(QString("app_slug"), ::OpenAPI::toJsonValue(m_app_slug));
    }
    if (m_contact_email_isSet) {
        obj.insert(QString("contact_email"), ::OpenAPI::toJsonValue(m_contact_email));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_has_multiple_single_files_isSet) {
        obj.insert(QString("has_multiple_single_files"), ::OpenAPI::toJsonValue(m_has_multiple_single_files));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_repositories_url_isSet) {
        obj.insert(QString("repositories_url"), ::OpenAPI::toJsonValue(m_repositories_url));
    }
    if (m_repository_selection_isSet) {
        obj.insert(QString("repository_selection"), ::OpenAPI::toJsonValue(m_repository_selection));
    }
    if (m_single_file_name_isSet) {
        obj.insert(QString("single_file_name"), ::OpenAPI::toJsonValue(m_single_file_name));
    }
    if (m_single_file_paths.size() > 0) {
        obj.insert(QString("single_file_paths"), ::OpenAPI::toJsonValue(m_single_file_paths));
    }
    if (m_suspended_at_isSet) {
        obj.insert(QString("suspended_at"), ::OpenAPI::toJsonValue(m_suspended_at));
    }
    if (m_suspended_by.isSet()) {
        obj.insert(QString("suspended_by"), ::OpenAPI::toJsonValue(m_suspended_by));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("target_type"), ::OpenAPI::toJsonValue(m_target_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIInstallation::getAccessTokensUrl() const {
    return m_access_tokens_url;
}
void OAIInstallation::setAccessTokensUrl(const QString &access_tokens_url) {
    m_access_tokens_url = access_tokens_url;
    m_access_tokens_url_isSet = true;
}

bool OAIInstallation::is_access_tokens_url_Set() const{
    return m_access_tokens_url_isSet;
}

bool OAIInstallation::is_access_tokens_url_Valid() const{
    return m_access_tokens_url_isValid;
}

OAIInstallation_account OAIInstallation::getAccount() const {
    return m_account;
}
void OAIInstallation::setAccount(const OAIInstallation_account &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIInstallation::is_account_Set() const{
    return m_account_isSet;
}

bool OAIInstallation::is_account_Valid() const{
    return m_account_isValid;
}

qint32 OAIInstallation::getAppId() const {
    return m_app_id;
}
void OAIInstallation::setAppId(const qint32 &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIInstallation::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIInstallation::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIInstallation::getAppSlug() const {
    return m_app_slug;
}
void OAIInstallation::setAppSlug(const QString &app_slug) {
    m_app_slug = app_slug;
    m_app_slug_isSet = true;
}

bool OAIInstallation::is_app_slug_Set() const{
    return m_app_slug_isSet;
}

bool OAIInstallation::is_app_slug_Valid() const{
    return m_app_slug_isValid;
}

QString OAIInstallation::getContactEmail() const {
    return m_contact_email;
}
void OAIInstallation::setContactEmail(const QString &contact_email) {
    m_contact_email = contact_email;
    m_contact_email_isSet = true;
}

bool OAIInstallation::is_contact_email_Set() const{
    return m_contact_email_isSet;
}

bool OAIInstallation::is_contact_email_Valid() const{
    return m_contact_email_isValid;
}

QDateTime OAIInstallation::getCreatedAt() const {
    return m_created_at;
}
void OAIInstallation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInstallation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInstallation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIInstallation::getEvents() const {
    return m_events;
}
void OAIInstallation::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIInstallation::is_events_Set() const{
    return m_events_isSet;
}

bool OAIInstallation::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIInstallation::isHasMultipleSingleFiles() const {
    return m_has_multiple_single_files;
}
void OAIInstallation::setHasMultipleSingleFiles(const bool &has_multiple_single_files) {
    m_has_multiple_single_files = has_multiple_single_files;
    m_has_multiple_single_files_isSet = true;
}

bool OAIInstallation::is_has_multiple_single_files_Set() const{
    return m_has_multiple_single_files_isSet;
}

bool OAIInstallation::is_has_multiple_single_files_Valid() const{
    return m_has_multiple_single_files_isValid;
}

QString OAIInstallation::getHtmlUrl() const {
    return m_html_url;
}
void OAIInstallation::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIInstallation::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIInstallation::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIInstallation::getId() const {
    return m_id;
}
void OAIInstallation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstallation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstallation::is_id_Valid() const{
    return m_id_isValid;
}

OAIApp_permissions OAIInstallation::getPermissions() const {
    return m_permissions;
}
void OAIInstallation::setPermissions(const OAIApp_permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIInstallation::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIInstallation::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIInstallation::getRepositoriesUrl() const {
    return m_repositories_url;
}
void OAIInstallation::setRepositoriesUrl(const QString &repositories_url) {
    m_repositories_url = repositories_url;
    m_repositories_url_isSet = true;
}

bool OAIInstallation::is_repositories_url_Set() const{
    return m_repositories_url_isSet;
}

bool OAIInstallation::is_repositories_url_Valid() const{
    return m_repositories_url_isValid;
}

QString OAIInstallation::getRepositorySelection() const {
    return m_repository_selection;
}
void OAIInstallation::setRepositorySelection(const QString &repository_selection) {
    m_repository_selection = repository_selection;
    m_repository_selection_isSet = true;
}

bool OAIInstallation::is_repository_selection_Set() const{
    return m_repository_selection_isSet;
}

bool OAIInstallation::is_repository_selection_Valid() const{
    return m_repository_selection_isValid;
}

QString OAIInstallation::getSingleFileName() const {
    return m_single_file_name;
}
void OAIInstallation::setSingleFileName(const QString &single_file_name) {
    m_single_file_name = single_file_name;
    m_single_file_name_isSet = true;
}

bool OAIInstallation::is_single_file_name_Set() const{
    return m_single_file_name_isSet;
}

bool OAIInstallation::is_single_file_name_Valid() const{
    return m_single_file_name_isValid;
}

QList<QString> OAIInstallation::getSingleFilePaths() const {
    return m_single_file_paths;
}
void OAIInstallation::setSingleFilePaths(const QList<QString> &single_file_paths) {
    m_single_file_paths = single_file_paths;
    m_single_file_paths_isSet = true;
}

bool OAIInstallation::is_single_file_paths_Set() const{
    return m_single_file_paths_isSet;
}

bool OAIInstallation::is_single_file_paths_Valid() const{
    return m_single_file_paths_isValid;
}

QDateTime OAIInstallation::getSuspendedAt() const {
    return m_suspended_at;
}
void OAIInstallation::setSuspendedAt(const QDateTime &suspended_at) {
    m_suspended_at = suspended_at;
    m_suspended_at_isSet = true;
}

bool OAIInstallation::is_suspended_at_Set() const{
    return m_suspended_at_isSet;
}

bool OAIInstallation::is_suspended_at_Valid() const{
    return m_suspended_at_isValid;
}

OAINullable_simple_user OAIInstallation::getSuspendedBy() const {
    return m_suspended_by;
}
void OAIInstallation::setSuspendedBy(const OAINullable_simple_user &suspended_by) {
    m_suspended_by = suspended_by;
    m_suspended_by_isSet = true;
}

bool OAIInstallation::is_suspended_by_Set() const{
    return m_suspended_by_isSet;
}

bool OAIInstallation::is_suspended_by_Valid() const{
    return m_suspended_by_isValid;
}

qint32 OAIInstallation::getTargetId() const {
    return m_target_id;
}
void OAIInstallation::setTargetId(const qint32 &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIInstallation::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIInstallation::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIInstallation::getTargetType() const {
    return m_target_type;
}
void OAIInstallation::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIInstallation::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIInstallation::is_target_type_Valid() const{
    return m_target_type_isValid;
}

QDateTime OAIInstallation::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInstallation::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInstallation::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInstallation::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInstallation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_tokens_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_multiple_single_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_file_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_tokens_url_isValid && m_account_isValid && m_app_id_isValid && m_app_slug_isValid && m_created_at_isValid && m_events_isValid && m_html_url_isValid && m_id_isValid && m_permissions_isValid && m_repositories_url_isValid && m_repository_selection_isValid && m_single_file_name_isValid && m_suspended_at_isValid && m_suspended_by_isValid && m_target_id_isValid && m_target_type_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
