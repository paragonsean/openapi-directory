/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINullable_authorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINullable_authorization::OAINullable_authorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINullable_authorization::OAINullable_authorization() {
    this->initializeModel();
}

OAINullable_authorization::~OAINullable_authorization() {}

void OAINullable_authorization::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_hashed_token_isSet = false;
    m_hashed_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installation_isSet = false;
    m_installation_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_note_url_isSet = false;
    m_note_url_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_last_eight_isSet = false;
    m_token_last_eight_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINullable_authorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINullable_authorization::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_hashed_token_isValid = ::OpenAPI::fromJsonValue(m_hashed_token, json[QString("hashed_token")]);
    m_hashed_token_isSet = !json[QString("hashed_token")].isNull() && m_hashed_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installation_isValid = ::OpenAPI::fromJsonValue(m_installation, json[QString("installation")]);
    m_installation_isSet = !json[QString("installation")].isNull() && m_installation_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_note_url_isValid = ::OpenAPI::fromJsonValue(m_note_url, json[QString("note_url")]);
    m_note_url_isSet = !json[QString("note_url")].isNull() && m_note_url_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_last_eight_isValid = ::OpenAPI::fromJsonValue(m_token_last_eight, json[QString("token_last_eight")]);
    m_token_last_eight_isSet = !json[QString("token_last_eight")].isNull() && m_token_last_eight_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINullable_authorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINullable_authorization::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_hashed_token_isSet) {
        obj.insert(QString("hashed_token"), ::OpenAPI::toJsonValue(m_hashed_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installation.isSet()) {
        obj.insert(QString("installation"), ::OpenAPI::toJsonValue(m_installation));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_note_url_isSet) {
        obj.insert(QString("note_url"), ::OpenAPI::toJsonValue(m_note_url));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_last_eight_isSet) {
        obj.insert(QString("token_last_eight"), ::OpenAPI::toJsonValue(m_token_last_eight));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApplication_grant_app OAINullable_authorization::getApp() const {
    return m_app;
}
void OAINullable_authorization::setApp(const OAIApplication_grant_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAINullable_authorization::is_app_Set() const{
    return m_app_isSet;
}

bool OAINullable_authorization::is_app_Valid() const{
    return m_app_isValid;
}

QDateTime OAINullable_authorization::getCreatedAt() const {
    return m_created_at;
}
void OAINullable_authorization::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINullable_authorization::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINullable_authorization::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINullable_authorization::getFingerprint() const {
    return m_fingerprint;
}
void OAINullable_authorization::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAINullable_authorization::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAINullable_authorization::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAINullable_authorization::getHashedToken() const {
    return m_hashed_token;
}
void OAINullable_authorization::setHashedToken(const QString &hashed_token) {
    m_hashed_token = hashed_token;
    m_hashed_token_isSet = true;
}

bool OAINullable_authorization::is_hashed_token_Set() const{
    return m_hashed_token_isSet;
}

bool OAINullable_authorization::is_hashed_token_Valid() const{
    return m_hashed_token_isValid;
}

qint32 OAINullable_authorization::getId() const {
    return m_id;
}
void OAINullable_authorization::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINullable_authorization::is_id_Set() const{
    return m_id_isSet;
}

bool OAINullable_authorization::is_id_Valid() const{
    return m_id_isValid;
}

OAINullable_scoped_installation OAINullable_authorization::getInstallation() const {
    return m_installation;
}
void OAINullable_authorization::setInstallation(const OAINullable_scoped_installation &installation) {
    m_installation = installation;
    m_installation_isSet = true;
}

bool OAINullable_authorization::is_installation_Set() const{
    return m_installation_isSet;
}

bool OAINullable_authorization::is_installation_Valid() const{
    return m_installation_isValid;
}

QString OAINullable_authorization::getNote() const {
    return m_note;
}
void OAINullable_authorization::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAINullable_authorization::is_note_Set() const{
    return m_note_isSet;
}

bool OAINullable_authorization::is_note_Valid() const{
    return m_note_isValid;
}

QString OAINullable_authorization::getNoteUrl() const {
    return m_note_url;
}
void OAINullable_authorization::setNoteUrl(const QString &note_url) {
    m_note_url = note_url;
    m_note_url_isSet = true;
}

bool OAINullable_authorization::is_note_url_Set() const{
    return m_note_url_isSet;
}

bool OAINullable_authorization::is_note_url_Valid() const{
    return m_note_url_isValid;
}

QList<QString> OAINullable_authorization::getScopes() const {
    return m_scopes;
}
void OAINullable_authorization::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAINullable_authorization::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAINullable_authorization::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAINullable_authorization::getToken() const {
    return m_token;
}
void OAINullable_authorization::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAINullable_authorization::is_token_Set() const{
    return m_token_isSet;
}

bool OAINullable_authorization::is_token_Valid() const{
    return m_token_isValid;
}

QString OAINullable_authorization::getTokenLastEight() const {
    return m_token_last_eight;
}
void OAINullable_authorization::setTokenLastEight(const QString &token_last_eight) {
    m_token_last_eight = token_last_eight;
    m_token_last_eight_isSet = true;
}

bool OAINullable_authorization::is_token_last_eight_Set() const{
    return m_token_last_eight_isSet;
}

bool OAINullable_authorization::is_token_last_eight_Valid() const{
    return m_token_last_eight_isValid;
}

QDateTime OAINullable_authorization::getUpdatedAt() const {
    return m_updated_at;
}
void OAINullable_authorization::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINullable_authorization::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINullable_authorization::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAINullable_authorization::getUrl() const {
    return m_url;
}
void OAINullable_authorization::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINullable_authorization::is_url_Set() const{
    return m_url_isSet;
}

bool OAINullable_authorization::is_url_Valid() const{
    return m_url_isValid;
}

OAINullable_simple_user OAINullable_authorization::getUser() const {
    return m_user;
}
void OAINullable_authorization::setUser(const OAINullable_simple_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINullable_authorization::is_user_Set() const{
    return m_user_isSet;
}

bool OAINullable_authorization::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINullable_authorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashed_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_last_eight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINullable_authorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_isValid && m_created_at_isValid && m_fingerprint_isValid && m_hashed_token_isValid && m_id_isValid && m_note_isValid && m_note_url_isValid && m_scopes_isValid && m_token_isValid && m_token_last_eight_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
