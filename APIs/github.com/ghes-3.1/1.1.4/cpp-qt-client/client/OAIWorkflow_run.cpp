/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow_run.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow_run::OAIWorkflow_run(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow_run::OAIWorkflow_run() {
    this->initializeModel();
}

OAIWorkflow_run::~OAIWorkflow_run() {}

void OAIWorkflow_run::initializeModel() {

    m_artifacts_url_isSet = false;
    m_artifacts_url_isValid = false;

    m_cancel_url_isSet = false;
    m_cancel_url_isValid = false;

    m_check_suite_id_isSet = false;
    m_check_suite_id_isValid = false;

    m_check_suite_node_id_isSet = false;
    m_check_suite_node_id_isValid = false;

    m_check_suite_url_isSet = false;
    m_check_suite_url_isValid = false;

    m_conclusion_isSet = false;
    m_conclusion_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_head_branch_isSet = false;
    m_head_branch_isValid = false;

    m_head_commit_isSet = false;
    m_head_commit_isValid = false;

    m_head_repository_isSet = false;
    m_head_repository_isValid = false;

    m_head_repository_id_isSet = false;
    m_head_repository_id_isValid = false;

    m_head_sha_isSet = false;
    m_head_sha_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jobs_url_isSet = false;
    m_jobs_url_isValid = false;

    m_logs_url_isSet = false;
    m_logs_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_pull_requests_isSet = false;
    m_pull_requests_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_rerun_url_isSet = false;
    m_rerun_url_isValid = false;

    m_run_number_isSet = false;
    m_run_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;

    m_workflow_url_isSet = false;
    m_workflow_url_isValid = false;
}

void OAIWorkflow_run::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow_run::fromJsonObject(QJsonObject json) {

    m_artifacts_url_isValid = ::OpenAPI::fromJsonValue(m_artifacts_url, json[QString("artifacts_url")]);
    m_artifacts_url_isSet = !json[QString("artifacts_url")].isNull() && m_artifacts_url_isValid;

    m_cancel_url_isValid = ::OpenAPI::fromJsonValue(m_cancel_url, json[QString("cancel_url")]);
    m_cancel_url_isSet = !json[QString("cancel_url")].isNull() && m_cancel_url_isValid;

    m_check_suite_id_isValid = ::OpenAPI::fromJsonValue(m_check_suite_id, json[QString("check_suite_id")]);
    m_check_suite_id_isSet = !json[QString("check_suite_id")].isNull() && m_check_suite_id_isValid;

    m_check_suite_node_id_isValid = ::OpenAPI::fromJsonValue(m_check_suite_node_id, json[QString("check_suite_node_id")]);
    m_check_suite_node_id_isSet = !json[QString("check_suite_node_id")].isNull() && m_check_suite_node_id_isValid;

    m_check_suite_url_isValid = ::OpenAPI::fromJsonValue(m_check_suite_url, json[QString("check_suite_url")]);
    m_check_suite_url_isSet = !json[QString("check_suite_url")].isNull() && m_check_suite_url_isValid;

    m_conclusion_isValid = ::OpenAPI::fromJsonValue(m_conclusion, json[QString("conclusion")]);
    m_conclusion_isSet = !json[QString("conclusion")].isNull() && m_conclusion_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_head_branch_isValid = ::OpenAPI::fromJsonValue(m_head_branch, json[QString("head_branch")]);
    m_head_branch_isSet = !json[QString("head_branch")].isNull() && m_head_branch_isValid;

    m_head_commit_isValid = ::OpenAPI::fromJsonValue(m_head_commit, json[QString("head_commit")]);
    m_head_commit_isSet = !json[QString("head_commit")].isNull() && m_head_commit_isValid;

    m_head_repository_isValid = ::OpenAPI::fromJsonValue(m_head_repository, json[QString("head_repository")]);
    m_head_repository_isSet = !json[QString("head_repository")].isNull() && m_head_repository_isValid;

    m_head_repository_id_isValid = ::OpenAPI::fromJsonValue(m_head_repository_id, json[QString("head_repository_id")]);
    m_head_repository_id_isSet = !json[QString("head_repository_id")].isNull() && m_head_repository_id_isValid;

    m_head_sha_isValid = ::OpenAPI::fromJsonValue(m_head_sha, json[QString("head_sha")]);
    m_head_sha_isSet = !json[QString("head_sha")].isNull() && m_head_sha_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jobs_url_isValid = ::OpenAPI::fromJsonValue(m_jobs_url, json[QString("jobs_url")]);
    m_jobs_url_isSet = !json[QString("jobs_url")].isNull() && m_jobs_url_isValid;

    m_logs_url_isValid = ::OpenAPI::fromJsonValue(m_logs_url, json[QString("logs_url")]);
    m_logs_url_isSet = !json[QString("logs_url")].isNull() && m_logs_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_pull_requests, json[QString("pull_requests")]);
    m_pull_requests_isSet = !json[QString("pull_requests")].isNull() && m_pull_requests_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_rerun_url_isValid = ::OpenAPI::fromJsonValue(m_rerun_url, json[QString("rerun_url")]);
    m_rerun_url_isSet = !json[QString("rerun_url")].isNull() && m_rerun_url_isValid;

    m_run_number_isValid = ::OpenAPI::fromJsonValue(m_run_number, json[QString("run_number")]);
    m_run_number_isSet = !json[QString("run_number")].isNull() && m_run_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("workflow_id")]);
    m_workflow_id_isSet = !json[QString("workflow_id")].isNull() && m_workflow_id_isValid;

    m_workflow_url_isValid = ::OpenAPI::fromJsonValue(m_workflow_url, json[QString("workflow_url")]);
    m_workflow_url_isSet = !json[QString("workflow_url")].isNull() && m_workflow_url_isValid;
}

QString OAIWorkflow_run::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow_run::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts_url_isSet) {
        obj.insert(QString("artifacts_url"), ::OpenAPI::toJsonValue(m_artifacts_url));
    }
    if (m_cancel_url_isSet) {
        obj.insert(QString("cancel_url"), ::OpenAPI::toJsonValue(m_cancel_url));
    }
    if (m_check_suite_id_isSet) {
        obj.insert(QString("check_suite_id"), ::OpenAPI::toJsonValue(m_check_suite_id));
    }
    if (m_check_suite_node_id_isSet) {
        obj.insert(QString("check_suite_node_id"), ::OpenAPI::toJsonValue(m_check_suite_node_id));
    }
    if (m_check_suite_url_isSet) {
        obj.insert(QString("check_suite_url"), ::OpenAPI::toJsonValue(m_check_suite_url));
    }
    if (m_conclusion_isSet) {
        obj.insert(QString("conclusion"), ::OpenAPI::toJsonValue(m_conclusion));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_head_branch_isSet) {
        obj.insert(QString("head_branch"), ::OpenAPI::toJsonValue(m_head_branch));
    }
    if (m_head_commit.isSet()) {
        obj.insert(QString("head_commit"), ::OpenAPI::toJsonValue(m_head_commit));
    }
    if (m_head_repository.isSet()) {
        obj.insert(QString("head_repository"), ::OpenAPI::toJsonValue(m_head_repository));
    }
    if (m_head_repository_id_isSet) {
        obj.insert(QString("head_repository_id"), ::OpenAPI::toJsonValue(m_head_repository_id));
    }
    if (m_head_sha_isSet) {
        obj.insert(QString("head_sha"), ::OpenAPI::toJsonValue(m_head_sha));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jobs_url_isSet) {
        obj.insert(QString("jobs_url"), ::OpenAPI::toJsonValue(m_jobs_url));
    }
    if (m_logs_url_isSet) {
        obj.insert(QString("logs_url"), ::OpenAPI::toJsonValue(m_logs_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_pull_requests.size() > 0) {
        obj.insert(QString("pull_requests"), ::OpenAPI::toJsonValue(m_pull_requests));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_rerun_url_isSet) {
        obj.insert(QString("rerun_url"), ::OpenAPI::toJsonValue(m_rerun_url));
    }
    if (m_run_number_isSet) {
        obj.insert(QString("run_number"), ::OpenAPI::toJsonValue(m_run_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("workflow_id"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    if (m_workflow_url_isSet) {
        obj.insert(QString("workflow_url"), ::OpenAPI::toJsonValue(m_workflow_url));
    }
    return obj;
}

QString OAIWorkflow_run::getArtifactsUrl() const {
    return m_artifacts_url;
}
void OAIWorkflow_run::setArtifactsUrl(const QString &artifacts_url) {
    m_artifacts_url = artifacts_url;
    m_artifacts_url_isSet = true;
}

bool OAIWorkflow_run::is_artifacts_url_Set() const{
    return m_artifacts_url_isSet;
}

bool OAIWorkflow_run::is_artifacts_url_Valid() const{
    return m_artifacts_url_isValid;
}

QString OAIWorkflow_run::getCancelUrl() const {
    return m_cancel_url;
}
void OAIWorkflow_run::setCancelUrl(const QString &cancel_url) {
    m_cancel_url = cancel_url;
    m_cancel_url_isSet = true;
}

bool OAIWorkflow_run::is_cancel_url_Set() const{
    return m_cancel_url_isSet;
}

bool OAIWorkflow_run::is_cancel_url_Valid() const{
    return m_cancel_url_isValid;
}

qint32 OAIWorkflow_run::getCheckSuiteId() const {
    return m_check_suite_id;
}
void OAIWorkflow_run::setCheckSuiteId(const qint32 &check_suite_id) {
    m_check_suite_id = check_suite_id;
    m_check_suite_id_isSet = true;
}

bool OAIWorkflow_run::is_check_suite_id_Set() const{
    return m_check_suite_id_isSet;
}

bool OAIWorkflow_run::is_check_suite_id_Valid() const{
    return m_check_suite_id_isValid;
}

QString OAIWorkflow_run::getCheckSuiteNodeId() const {
    return m_check_suite_node_id;
}
void OAIWorkflow_run::setCheckSuiteNodeId(const QString &check_suite_node_id) {
    m_check_suite_node_id = check_suite_node_id;
    m_check_suite_node_id_isSet = true;
}

bool OAIWorkflow_run::is_check_suite_node_id_Set() const{
    return m_check_suite_node_id_isSet;
}

bool OAIWorkflow_run::is_check_suite_node_id_Valid() const{
    return m_check_suite_node_id_isValid;
}

QString OAIWorkflow_run::getCheckSuiteUrl() const {
    return m_check_suite_url;
}
void OAIWorkflow_run::setCheckSuiteUrl(const QString &check_suite_url) {
    m_check_suite_url = check_suite_url;
    m_check_suite_url_isSet = true;
}

bool OAIWorkflow_run::is_check_suite_url_Set() const{
    return m_check_suite_url_isSet;
}

bool OAIWorkflow_run::is_check_suite_url_Valid() const{
    return m_check_suite_url_isValid;
}

QString OAIWorkflow_run::getConclusion() const {
    return m_conclusion;
}
void OAIWorkflow_run::setConclusion(const QString &conclusion) {
    m_conclusion = conclusion;
    m_conclusion_isSet = true;
}

bool OAIWorkflow_run::is_conclusion_Set() const{
    return m_conclusion_isSet;
}

bool OAIWorkflow_run::is_conclusion_Valid() const{
    return m_conclusion_isValid;
}

QDateTime OAIWorkflow_run::getCreatedAt() const {
    return m_created_at;
}
void OAIWorkflow_run::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWorkflow_run::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWorkflow_run::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWorkflow_run::getEvent() const {
    return m_event;
}
void OAIWorkflow_run::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWorkflow_run::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWorkflow_run::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIWorkflow_run::getHeadBranch() const {
    return m_head_branch;
}
void OAIWorkflow_run::setHeadBranch(const QString &head_branch) {
    m_head_branch = head_branch;
    m_head_branch_isSet = true;
}

bool OAIWorkflow_run::is_head_branch_Set() const{
    return m_head_branch_isSet;
}

bool OAIWorkflow_run::is_head_branch_Valid() const{
    return m_head_branch_isValid;
}

OAINullable_simple_commit OAIWorkflow_run::getHeadCommit() const {
    return m_head_commit;
}
void OAIWorkflow_run::setHeadCommit(const OAINullable_simple_commit &head_commit) {
    m_head_commit = head_commit;
    m_head_commit_isSet = true;
}

bool OAIWorkflow_run::is_head_commit_Set() const{
    return m_head_commit_isSet;
}

bool OAIWorkflow_run::is_head_commit_Valid() const{
    return m_head_commit_isValid;
}

OAIMinimal_repository OAIWorkflow_run::getHeadRepository() const {
    return m_head_repository;
}
void OAIWorkflow_run::setHeadRepository(const OAIMinimal_repository &head_repository) {
    m_head_repository = head_repository;
    m_head_repository_isSet = true;
}

bool OAIWorkflow_run::is_head_repository_Set() const{
    return m_head_repository_isSet;
}

bool OAIWorkflow_run::is_head_repository_Valid() const{
    return m_head_repository_isValid;
}

qint32 OAIWorkflow_run::getHeadRepositoryId() const {
    return m_head_repository_id;
}
void OAIWorkflow_run::setHeadRepositoryId(const qint32 &head_repository_id) {
    m_head_repository_id = head_repository_id;
    m_head_repository_id_isSet = true;
}

bool OAIWorkflow_run::is_head_repository_id_Set() const{
    return m_head_repository_id_isSet;
}

bool OAIWorkflow_run::is_head_repository_id_Valid() const{
    return m_head_repository_id_isValid;
}

QString OAIWorkflow_run::getHeadSha() const {
    return m_head_sha;
}
void OAIWorkflow_run::setHeadSha(const QString &head_sha) {
    m_head_sha = head_sha;
    m_head_sha_isSet = true;
}

bool OAIWorkflow_run::is_head_sha_Set() const{
    return m_head_sha_isSet;
}

bool OAIWorkflow_run::is_head_sha_Valid() const{
    return m_head_sha_isValid;
}

QString OAIWorkflow_run::getHtmlUrl() const {
    return m_html_url;
}
void OAIWorkflow_run::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIWorkflow_run::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIWorkflow_run::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIWorkflow_run::getId() const {
    return m_id;
}
void OAIWorkflow_run::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkflow_run::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkflow_run::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWorkflow_run::getJobsUrl() const {
    return m_jobs_url;
}
void OAIWorkflow_run::setJobsUrl(const QString &jobs_url) {
    m_jobs_url = jobs_url;
    m_jobs_url_isSet = true;
}

bool OAIWorkflow_run::is_jobs_url_Set() const{
    return m_jobs_url_isSet;
}

bool OAIWorkflow_run::is_jobs_url_Valid() const{
    return m_jobs_url_isValid;
}

QString OAIWorkflow_run::getLogsUrl() const {
    return m_logs_url;
}
void OAIWorkflow_run::setLogsUrl(const QString &logs_url) {
    m_logs_url = logs_url;
    m_logs_url_isSet = true;
}

bool OAIWorkflow_run::is_logs_url_Set() const{
    return m_logs_url_isSet;
}

bool OAIWorkflow_run::is_logs_url_Valid() const{
    return m_logs_url_isValid;
}

QString OAIWorkflow_run::getName() const {
    return m_name;
}
void OAIWorkflow_run::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow_run::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow_run::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflow_run::getNodeId() const {
    return m_node_id;
}
void OAIWorkflow_run::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIWorkflow_run::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIWorkflow_run::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<OAIPull_request_minimal> OAIWorkflow_run::getPullRequests() const {
    return m_pull_requests;
}
void OAIWorkflow_run::setPullRequests(const QList<OAIPull_request_minimal> &pull_requests) {
    m_pull_requests = pull_requests;
    m_pull_requests_isSet = true;
}

bool OAIWorkflow_run::is_pull_requests_Set() const{
    return m_pull_requests_isSet;
}

bool OAIWorkflow_run::is_pull_requests_Valid() const{
    return m_pull_requests_isValid;
}

OAIMinimal_repository OAIWorkflow_run::getRepository() const {
    return m_repository;
}
void OAIWorkflow_run::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIWorkflow_run::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIWorkflow_run::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIWorkflow_run::getRerunUrl() const {
    return m_rerun_url;
}
void OAIWorkflow_run::setRerunUrl(const QString &rerun_url) {
    m_rerun_url = rerun_url;
    m_rerun_url_isSet = true;
}

bool OAIWorkflow_run::is_rerun_url_Set() const{
    return m_rerun_url_isSet;
}

bool OAIWorkflow_run::is_rerun_url_Valid() const{
    return m_rerun_url_isValid;
}

qint32 OAIWorkflow_run::getRunNumber() const {
    return m_run_number;
}
void OAIWorkflow_run::setRunNumber(const qint32 &run_number) {
    m_run_number = run_number;
    m_run_number_isSet = true;
}

bool OAIWorkflow_run::is_run_number_Set() const{
    return m_run_number_isSet;
}

bool OAIWorkflow_run::is_run_number_Valid() const{
    return m_run_number_isValid;
}

QString OAIWorkflow_run::getStatus() const {
    return m_status;
}
void OAIWorkflow_run::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflow_run::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflow_run::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIWorkflow_run::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWorkflow_run::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWorkflow_run::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWorkflow_run::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIWorkflow_run::getUrl() const {
    return m_url;
}
void OAIWorkflow_run::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWorkflow_run::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWorkflow_run::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIWorkflow_run::getWorkflowId() const {
    return m_workflow_id;
}
void OAIWorkflow_run::setWorkflowId(const qint32 &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIWorkflow_run::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIWorkflow_run::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

QString OAIWorkflow_run::getWorkflowUrl() const {
    return m_workflow_url;
}
void OAIWorkflow_run::setWorkflowUrl(const QString &workflow_url) {
    m_workflow_url = workflow_url;
    m_workflow_url_isSet = true;
}

bool OAIWorkflow_run::is_workflow_url_Set() const{
    return m_workflow_url_isSet;
}

bool OAIWorkflow_run::is_workflow_url_Valid() const{
    return m_workflow_url_isValid;
}

bool OAIWorkflow_run::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_suite_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_suite_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_suite_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rerun_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow_run::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artifacts_url_isValid && m_cancel_url_isValid && m_check_suite_url_isValid && m_conclusion_isValid && m_created_at_isValid && m_event_isValid && m_head_branch_isValid && m_head_commit_isValid && m_head_repository_isValid && m_head_sha_isValid && m_html_url_isValid && m_id_isValid && m_jobs_url_isValid && m_logs_url_isValid && m_node_id_isValid && m_pull_requests_isValid && m_repository_isValid && m_rerun_url_isValid && m_run_number_isValid && m_status_isValid && m_updated_at_isValid && m_url_isValid && m_workflow_id_isValid && m_workflow_url_isValid && true;
}

} // namespace OpenAPI
