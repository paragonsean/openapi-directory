/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstallation_token.h
 *
 * Authentication token for a GitHub App installed on a user or org.
 */

#ifndef OAIInstallation_token_H
#define OAIInstallation_token_H

#include <QJsonObject>

#include "OAIApp_permissions.h"
#include "OAIRepository.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApp_permissions;
class OAIRepository;

class OAIInstallation_token : public OAIObject {
public:
    OAIInstallation_token();
    OAIInstallation_token(QString json);
    ~OAIInstallation_token() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpiresAt() const;
    void setExpiresAt(const QString &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    bool isHasMultipleSingleFiles() const;
    void setHasMultipleSingleFiles(const bool &has_multiple_single_files);
    bool is_has_multiple_single_files_Set() const;
    bool is_has_multiple_single_files_Valid() const;

    OAIApp_permissions getPermissions() const;
    void setPermissions(const OAIApp_permissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QList<OAIRepository> getRepositories() const;
    void setRepositories(const QList<OAIRepository> &repositories);
    bool is_repositories_Set() const;
    bool is_repositories_Valid() const;

    QString getRepositorySelection() const;
    void setRepositorySelection(const QString &repository_selection);
    bool is_repository_selection_Set() const;
    bool is_repository_selection_Valid() const;

    QString getSingleFile() const;
    void setSingleFile(const QString &single_file);
    bool is_single_file_Set() const;
    bool is_single_file_Valid() const;

    QList<QString> getSingleFilePaths() const;
    void setSingleFilePaths(const QList<QString> &single_file_paths);
    bool is_single_file_paths_Set() const;
    bool is_single_file_paths_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    bool m_has_multiple_single_files;
    bool m_has_multiple_single_files_isSet;
    bool m_has_multiple_single_files_isValid;

    OAIApp_permissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QList<OAIRepository> m_repositories;
    bool m_repositories_isSet;
    bool m_repositories_isValid;

    QString m_repository_selection;
    bool m_repository_selection_isSet;
    bool m_repository_selection_isValid;

    QString m_single_file;
    bool m_single_file_isSet;
    bool m_single_file_isValid;

    QList<QString> m_single_file_paths;
    bool m_single_file_paths_isSet;
    bool m_single_file_paths_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstallation_token)

#endif // OAIInstallation_token_H
