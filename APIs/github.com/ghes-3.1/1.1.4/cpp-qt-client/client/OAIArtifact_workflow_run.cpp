/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifact_workflow_run.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifact_workflow_run::OAIArtifact_workflow_run(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifact_workflow_run::OAIArtifact_workflow_run() {
    this->initializeModel();
}

OAIArtifact_workflow_run::~OAIArtifact_workflow_run() {}

void OAIArtifact_workflow_run::initializeModel() {

    m_head_branch_isSet = false;
    m_head_branch_isValid = false;

    m_head_repository_id_isSet = false;
    m_head_repository_id_isValid = false;

    m_head_sha_isSet = false;
    m_head_sha_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_repository_id_isSet = false;
    m_repository_id_isValid = false;
}

void OAIArtifact_workflow_run::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifact_workflow_run::fromJsonObject(QJsonObject json) {

    m_head_branch_isValid = ::OpenAPI::fromJsonValue(m_head_branch, json[QString("head_branch")]);
    m_head_branch_isSet = !json[QString("head_branch")].isNull() && m_head_branch_isValid;

    m_head_repository_id_isValid = ::OpenAPI::fromJsonValue(m_head_repository_id, json[QString("head_repository_id")]);
    m_head_repository_id_isSet = !json[QString("head_repository_id")].isNull() && m_head_repository_id_isValid;

    m_head_sha_isValid = ::OpenAPI::fromJsonValue(m_head_sha, json[QString("head_sha")]);
    m_head_sha_isSet = !json[QString("head_sha")].isNull() && m_head_sha_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_repository_id_isValid = ::OpenAPI::fromJsonValue(m_repository_id, json[QString("repository_id")]);
    m_repository_id_isSet = !json[QString("repository_id")].isNull() && m_repository_id_isValid;
}

QString OAIArtifact_workflow_run::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifact_workflow_run::asJsonObject() const {
    QJsonObject obj;
    if (m_head_branch_isSet) {
        obj.insert(QString("head_branch"), ::OpenAPI::toJsonValue(m_head_branch));
    }
    if (m_head_repository_id_isSet) {
        obj.insert(QString("head_repository_id"), ::OpenAPI::toJsonValue(m_head_repository_id));
    }
    if (m_head_sha_isSet) {
        obj.insert(QString("head_sha"), ::OpenAPI::toJsonValue(m_head_sha));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_repository_id_isSet) {
        obj.insert(QString("repository_id"), ::OpenAPI::toJsonValue(m_repository_id));
    }
    return obj;
}

QString OAIArtifact_workflow_run::getHeadBranch() const {
    return m_head_branch;
}
void OAIArtifact_workflow_run::setHeadBranch(const QString &head_branch) {
    m_head_branch = head_branch;
    m_head_branch_isSet = true;
}

bool OAIArtifact_workflow_run::is_head_branch_Set() const{
    return m_head_branch_isSet;
}

bool OAIArtifact_workflow_run::is_head_branch_Valid() const{
    return m_head_branch_isValid;
}

qint32 OAIArtifact_workflow_run::getHeadRepositoryId() const {
    return m_head_repository_id;
}
void OAIArtifact_workflow_run::setHeadRepositoryId(const qint32 &head_repository_id) {
    m_head_repository_id = head_repository_id;
    m_head_repository_id_isSet = true;
}

bool OAIArtifact_workflow_run::is_head_repository_id_Set() const{
    return m_head_repository_id_isSet;
}

bool OAIArtifact_workflow_run::is_head_repository_id_Valid() const{
    return m_head_repository_id_isValid;
}

QString OAIArtifact_workflow_run::getHeadSha() const {
    return m_head_sha;
}
void OAIArtifact_workflow_run::setHeadSha(const QString &head_sha) {
    m_head_sha = head_sha;
    m_head_sha_isSet = true;
}

bool OAIArtifact_workflow_run::is_head_sha_Set() const{
    return m_head_sha_isSet;
}

bool OAIArtifact_workflow_run::is_head_sha_Valid() const{
    return m_head_sha_isValid;
}

qint32 OAIArtifact_workflow_run::getId() const {
    return m_id;
}
void OAIArtifact_workflow_run::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArtifact_workflow_run::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArtifact_workflow_run::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIArtifact_workflow_run::getRepositoryId() const {
    return m_repository_id;
}
void OAIArtifact_workflow_run::setRepositoryId(const qint32 &repository_id) {
    m_repository_id = repository_id;
    m_repository_id_isSet = true;
}

bool OAIArtifact_workflow_run::is_repository_id_Set() const{
    return m_repository_id_isSet;
}

bool OAIArtifact_workflow_run::is_repository_id_Valid() const{
    return m_repository_id_isValid;
}

bool OAIArtifact_workflow_run::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_head_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifact_workflow_run::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
