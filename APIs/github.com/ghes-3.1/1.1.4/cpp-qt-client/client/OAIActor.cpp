/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActor::OAIActor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActor::OAIActor() {
    this->initializeModel();
}

OAIActor::~OAIActor() {}

void OAIActor::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_display_login_isSet = false;
    m_display_login_isValid = false;

    m_gravatar_id_isSet = false;
    m_gravatar_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIActor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActor::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_display_login_isValid = ::OpenAPI::fromJsonValue(m_display_login, json[QString("display_login")]);
    m_display_login_isSet = !json[QString("display_login")].isNull() && m_display_login_isValid;

    m_gravatar_id_isValid = ::OpenAPI::fromJsonValue(m_gravatar_id, json[QString("gravatar_id")]);
    m_gravatar_id_isSet = !json[QString("gravatar_id")].isNull() && m_gravatar_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIActor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActor::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_display_login_isSet) {
        obj.insert(QString("display_login"), ::OpenAPI::toJsonValue(m_display_login));
    }
    if (m_gravatar_id_isSet) {
        obj.insert(QString("gravatar_id"), ::OpenAPI::toJsonValue(m_gravatar_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIActor::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIActor::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIActor::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIActor::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIActor::getDisplayLogin() const {
    return m_display_login;
}
void OAIActor::setDisplayLogin(const QString &display_login) {
    m_display_login = display_login;
    m_display_login_isSet = true;
}

bool OAIActor::is_display_login_Set() const{
    return m_display_login_isSet;
}

bool OAIActor::is_display_login_Valid() const{
    return m_display_login_isValid;
}

QString OAIActor::getGravatarId() const {
    return m_gravatar_id;
}
void OAIActor::setGravatarId(const QString &gravatar_id) {
    m_gravatar_id = gravatar_id;
    m_gravatar_id_isSet = true;
}

bool OAIActor::is_gravatar_id_Set() const{
    return m_gravatar_id_isSet;
}

bool OAIActor::is_gravatar_id_Valid() const{
    return m_gravatar_id_isValid;
}

qint32 OAIActor::getId() const {
    return m_id;
}
void OAIActor::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActor::getLogin() const {
    return m_login;
}
void OAIActor::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIActor::is_login_Set() const{
    return m_login_isSet;
}

bool OAIActor::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIActor::getUrl() const {
    return m_url;
}
void OAIActor::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActor::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActor::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIActor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_url_isValid && m_gravatar_id_isValid && m_id_isValid && m_login_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
