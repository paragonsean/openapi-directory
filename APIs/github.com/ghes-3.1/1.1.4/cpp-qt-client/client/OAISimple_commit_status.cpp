/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimple_commit_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimple_commit_status::OAISimple_commit_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimple_commit_status::OAISimple_commit_status() {
    this->initializeModel();
}

OAISimple_commit_status::~OAISimple_commit_status() {}

void OAISimple_commit_status::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISimple_commit_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimple_commit_status::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("target_url")]);
    m_target_url_isSet = !json[QString("target_url")].isNull() && m_target_url_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISimple_commit_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimple_commit_status::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("target_url"), ::OpenAPI::toJsonValue(m_target_url));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISimple_commit_status::getAvatarUrl() const {
    return m_avatar_url;
}
void OAISimple_commit_status::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAISimple_commit_status::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAISimple_commit_status::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAISimple_commit_status::getContext() const {
    return m_context;
}
void OAISimple_commit_status::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISimple_commit_status::is_context_Set() const{
    return m_context_isSet;
}

bool OAISimple_commit_status::is_context_Valid() const{
    return m_context_isValid;
}

QDateTime OAISimple_commit_status::getCreatedAt() const {
    return m_created_at;
}
void OAISimple_commit_status::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISimple_commit_status::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISimple_commit_status::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISimple_commit_status::getDescription() const {
    return m_description;
}
void OAISimple_commit_status::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISimple_commit_status::is_description_Set() const{
    return m_description_isSet;
}

bool OAISimple_commit_status::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISimple_commit_status::getId() const {
    return m_id;
}
void OAISimple_commit_status::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISimple_commit_status::is_id_Set() const{
    return m_id_isSet;
}

bool OAISimple_commit_status::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISimple_commit_status::getNodeId() const {
    return m_node_id;
}
void OAISimple_commit_status::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAISimple_commit_status::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAISimple_commit_status::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAISimple_commit_status::isRequired() const {
    return m_required;
}
void OAISimple_commit_status::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISimple_commit_status::is_required_Set() const{
    return m_required_isSet;
}

bool OAISimple_commit_status::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISimple_commit_status::getState() const {
    return m_state;
}
void OAISimple_commit_status::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISimple_commit_status::is_state_Set() const{
    return m_state_isSet;
}

bool OAISimple_commit_status::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISimple_commit_status::getTargetUrl() const {
    return m_target_url;
}
void OAISimple_commit_status::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAISimple_commit_status::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAISimple_commit_status::is_target_url_Valid() const{
    return m_target_url_isValid;
}

QDateTime OAISimple_commit_status::getUpdatedAt() const {
    return m_updated_at;
}
void OAISimple_commit_status::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISimple_commit_status::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISimple_commit_status::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAISimple_commit_status::getUrl() const {
    return m_url;
}
void OAISimple_commit_status::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISimple_commit_status::is_url_Set() const{
    return m_url_isSet;
}

bool OAISimple_commit_status::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISimple_commit_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimple_commit_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_url_isValid && m_context_isValid && m_created_at_isValid && m_description_isValid && m_id_isValid && m_node_id_isValid && m_state_isValid && m_target_url_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
