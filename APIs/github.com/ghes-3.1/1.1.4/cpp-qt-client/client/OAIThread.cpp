/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThread::OAIThread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThread::OAIThread() {
    this->initializeModel();
}

OAIThread::~OAIThread() {}

void OAIThread::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_read_at_isSet = false;
    m_last_read_at_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subscription_url_isSet = false;
    m_subscription_url_isValid = false;

    m_unread_isSet = false;
    m_unread_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIThread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThread::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_read_at_isValid = ::OpenAPI::fromJsonValue(m_last_read_at, json[QString("last_read_at")]);
    m_last_read_at_isSet = !json[QString("last_read_at")].isNull() && m_last_read_at_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subscription_url_isValid = ::OpenAPI::fromJsonValue(m_subscription_url, json[QString("subscription_url")]);
    m_subscription_url_isSet = !json[QString("subscription_url")].isNull() && m_subscription_url_isValid;

    m_unread_isValid = ::OpenAPI::fromJsonValue(m_unread, json[QString("unread")]);
    m_unread_isSet = !json[QString("unread")].isNull() && m_unread_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIThread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThread::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_read_at_isSet) {
        obj.insert(QString("last_read_at"), ::OpenAPI::toJsonValue(m_last_read_at));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subscription_url_isSet) {
        obj.insert(QString("subscription_url"), ::OpenAPI::toJsonValue(m_subscription_url));
    }
    if (m_unread_isSet) {
        obj.insert(QString("unread"), ::OpenAPI::toJsonValue(m_unread));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIThread::getId() const {
    return m_id;
}
void OAIThread::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIThread::is_id_Set() const{
    return m_id_isSet;
}

bool OAIThread::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIThread::getLastReadAt() const {
    return m_last_read_at;
}
void OAIThread::setLastReadAt(const QString &last_read_at) {
    m_last_read_at = last_read_at;
    m_last_read_at_isSet = true;
}

bool OAIThread::is_last_read_at_Set() const{
    return m_last_read_at_isSet;
}

bool OAIThread::is_last_read_at_Valid() const{
    return m_last_read_at_isValid;
}

QString OAIThread::getReason() const {
    return m_reason;
}
void OAIThread::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIThread::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIThread::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIMinimal_repository OAIThread::getRepository() const {
    return m_repository;
}
void OAIThread::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIThread::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIThread::is_repository_Valid() const{
    return m_repository_isValid;
}

OAIThread_subject OAIThread::getSubject() const {
    return m_subject;
}
void OAIThread::setSubject(const OAIThread_subject &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIThread::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIThread::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIThread::getSubscriptionUrl() const {
    return m_subscription_url;
}
void OAIThread::setSubscriptionUrl(const QString &subscription_url) {
    m_subscription_url = subscription_url;
    m_subscription_url_isSet = true;
}

bool OAIThread::is_subscription_url_Set() const{
    return m_subscription_url_isSet;
}

bool OAIThread::is_subscription_url_Valid() const{
    return m_subscription_url_isValid;
}

bool OAIThread::isUnread() const {
    return m_unread;
}
void OAIThread::setUnread(const bool &unread) {
    m_unread = unread;
    m_unread_isSet = true;
}

bool OAIThread::is_unread_Set() const{
    return m_unread_isSet;
}

bool OAIThread::is_unread_Valid() const{
    return m_unread_isValid;
}

QString OAIThread::getUpdatedAt() const {
    return m_updated_at;
}
void OAIThread::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIThread::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIThread::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIThread::getUrl() const {
    return m_url;
}
void OAIThread::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIThread::is_url_Set() const{
    return m_url_isSet;
}

bool OAIThread::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIThread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThread::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_last_read_at_isValid && m_reason_isValid && m_repository_isValid && m_subject_isValid && m_subscription_url_isValid && m_unread_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
