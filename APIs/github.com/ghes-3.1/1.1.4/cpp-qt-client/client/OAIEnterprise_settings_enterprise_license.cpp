/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_settings_enterprise_license.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_settings_enterprise_license::OAIEnterprise_settings_enterprise_license(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_settings_enterprise_license::OAIEnterprise_settings_enterprise_license() {
    this->initializeModel();
}

OAIEnterprise_settings_enterprise_license::~OAIEnterprise_settings_enterprise_license() {}

void OAIEnterprise_settings_enterprise_license::initializeModel() {

    m_cluster_support_isSet = false;
    m_cluster_support_isValid = false;

    m_evaluation_isSet = false;
    m_evaluation_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_perpetual_isSet = false;
    m_perpetual_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_ssh_allowed_isSet = false;
    m_ssh_allowed_isValid = false;

    m_support_key_isSet = false;
    m_support_key_isValid = false;

    m_unlimited_seating_isSet = false;
    m_unlimited_seating_isValid = false;
}

void OAIEnterprise_settings_enterprise_license::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_settings_enterprise_license::fromJsonObject(QJsonObject json) {

    m_cluster_support_isValid = ::OpenAPI::fromJsonValue(m_cluster_support, json[QString("cluster_support")]);
    m_cluster_support_isSet = !json[QString("cluster_support")].isNull() && m_cluster_support_isValid;

    m_evaluation_isValid = ::OpenAPI::fromJsonValue(m_evaluation, json[QString("evaluation")]);
    m_evaluation_isSet = !json[QString("evaluation")].isNull() && m_evaluation_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expire_at")]);
    m_expire_at_isSet = !json[QString("expire_at")].isNull() && m_expire_at_isValid;

    m_perpetual_isValid = ::OpenAPI::fromJsonValue(m_perpetual, json[QString("perpetual")]);
    m_perpetual_isSet = !json[QString("perpetual")].isNull() && m_perpetual_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_ssh_allowed_isValid = ::OpenAPI::fromJsonValue(m_ssh_allowed, json[QString("ssh_allowed")]);
    m_ssh_allowed_isSet = !json[QString("ssh_allowed")].isNull() && m_ssh_allowed_isValid;

    m_support_key_isValid = ::OpenAPI::fromJsonValue(m_support_key, json[QString("support_key")]);
    m_support_key_isSet = !json[QString("support_key")].isNull() && m_support_key_isValid;

    m_unlimited_seating_isValid = ::OpenAPI::fromJsonValue(m_unlimited_seating, json[QString("unlimited_seating")]);
    m_unlimited_seating_isSet = !json[QString("unlimited_seating")].isNull() && m_unlimited_seating_isValid;
}

QString OAIEnterprise_settings_enterprise_license::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_settings_enterprise_license::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_support_isSet) {
        obj.insert(QString("cluster_support"), ::OpenAPI::toJsonValue(m_cluster_support));
    }
    if (m_evaluation_isSet) {
        obj.insert(QString("evaluation"), ::OpenAPI::toJsonValue(m_evaluation));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expire_at"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_perpetual_isSet) {
        obj.insert(QString("perpetual"), ::OpenAPI::toJsonValue(m_perpetual));
    }
    if (m_seats_isSet) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_ssh_allowed_isSet) {
        obj.insert(QString("ssh_allowed"), ::OpenAPI::toJsonValue(m_ssh_allowed));
    }
    if (m_support_key_isSet) {
        obj.insert(QString("support_key"), ::OpenAPI::toJsonValue(m_support_key));
    }
    if (m_unlimited_seating_isSet) {
        obj.insert(QString("unlimited_seating"), ::OpenAPI::toJsonValue(m_unlimited_seating));
    }
    return obj;
}

bool OAIEnterprise_settings_enterprise_license::isClusterSupport() const {
    return m_cluster_support;
}
void OAIEnterprise_settings_enterprise_license::setClusterSupport(const bool &cluster_support) {
    m_cluster_support = cluster_support;
    m_cluster_support_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_cluster_support_Set() const{
    return m_cluster_support_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_cluster_support_Valid() const{
    return m_cluster_support_isValid;
}

bool OAIEnterprise_settings_enterprise_license::isEvaluation() const {
    return m_evaluation;
}
void OAIEnterprise_settings_enterprise_license::setEvaluation(const bool &evaluation) {
    m_evaluation = evaluation;
    m_evaluation_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_evaluation_Set() const{
    return m_evaluation_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_evaluation_Valid() const{
    return m_evaluation_isValid;
}

QString OAIEnterprise_settings_enterprise_license::getExpireAt() const {
    return m_expire_at;
}
void OAIEnterprise_settings_enterprise_license::setExpireAt(const QString &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

bool OAIEnterprise_settings_enterprise_license::isPerpetual() const {
    return m_perpetual;
}
void OAIEnterprise_settings_enterprise_license::setPerpetual(const bool &perpetual) {
    m_perpetual = perpetual;
    m_perpetual_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_perpetual_Set() const{
    return m_perpetual_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_perpetual_Valid() const{
    return m_perpetual_isValid;
}

qint32 OAIEnterprise_settings_enterprise_license::getSeats() const {
    return m_seats;
}
void OAIEnterprise_settings_enterprise_license::setSeats(const qint32 &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_seats_Valid() const{
    return m_seats_isValid;
}

bool OAIEnterprise_settings_enterprise_license::isSshAllowed() const {
    return m_ssh_allowed;
}
void OAIEnterprise_settings_enterprise_license::setSshAllowed(const bool &ssh_allowed) {
    m_ssh_allowed = ssh_allowed;
    m_ssh_allowed_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_ssh_allowed_Set() const{
    return m_ssh_allowed_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_ssh_allowed_Valid() const{
    return m_ssh_allowed_isValid;
}

QString OAIEnterprise_settings_enterprise_license::getSupportKey() const {
    return m_support_key;
}
void OAIEnterprise_settings_enterprise_license::setSupportKey(const QString &support_key) {
    m_support_key = support_key;
    m_support_key_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_support_key_Set() const{
    return m_support_key_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_support_key_Valid() const{
    return m_support_key_isValid;
}

bool OAIEnterprise_settings_enterprise_license::isUnlimitedSeating() const {
    return m_unlimited_seating;
}
void OAIEnterprise_settings_enterprise_license::setUnlimitedSeating(const bool &unlimited_seating) {
    m_unlimited_seating = unlimited_seating;
    m_unlimited_seating_isSet = true;
}

bool OAIEnterprise_settings_enterprise_license::is_unlimited_seating_Set() const{
    return m_unlimited_seating_isSet;
}

bool OAIEnterprise_settings_enterprise_license::is_unlimited_seating_Valid() const{
    return m_unlimited_seating_isValid;
}

bool OAIEnterprise_settings_enterprise_license::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perpetual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_seating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_settings_enterprise_license::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
