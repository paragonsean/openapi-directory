/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIState_change_issue_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIState_change_issue_event::OAIState_change_issue_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIState_change_issue_event::OAIState_change_issue_event() {
    this->initializeModel();
}

OAIState_change_issue_event::~OAIState_change_issue_event() {}

void OAIState_change_issue_event::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_performed_via_github_app_isSet = false;
    m_performed_via_github_app_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIState_change_issue_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIState_change_issue_event::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit_id")]);
    m_commit_id_isSet = !json[QString("commit_id")].isNull() && m_commit_id_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_performed_via_github_app_isValid = ::OpenAPI::fromJsonValue(m_performed_via_github_app, json[QString("performed_via_github_app")]);
    m_performed_via_github_app_isSet = !json[QString("performed_via_github_app")].isNull() && m_performed_via_github_app_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("state_reason")]);
    m_state_reason_isSet = !json[QString("state_reason")].isNull() && m_state_reason_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIState_change_issue_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIState_change_issue_event::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit_id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_performed_via_github_app.isSet()) {
        obj.insert(QString("performed_via_github_app"), ::OpenAPI::toJsonValue(m_performed_via_github_app));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("state_reason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAISimple_user OAIState_change_issue_event::getActor() const {
    return m_actor;
}
void OAIState_change_issue_event::setActor(const OAISimple_user &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIState_change_issue_event::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIState_change_issue_event::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIState_change_issue_event::getCommitId() const {
    return m_commit_id;
}
void OAIState_change_issue_event::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIState_change_issue_event::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIState_change_issue_event::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAIState_change_issue_event::getCommitUrl() const {
    return m_commit_url;
}
void OAIState_change_issue_event::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAIState_change_issue_event::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAIState_change_issue_event::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QString OAIState_change_issue_event::getCreatedAt() const {
    return m_created_at;
}
void OAIState_change_issue_event::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIState_change_issue_event::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIState_change_issue_event::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIState_change_issue_event::getEvent() const {
    return m_event;
}
void OAIState_change_issue_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIState_change_issue_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAIState_change_issue_event::is_event_Valid() const{
    return m_event_isValid;
}

qint32 OAIState_change_issue_event::getId() const {
    return m_id;
}
void OAIState_change_issue_event::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIState_change_issue_event::is_id_Set() const{
    return m_id_isSet;
}

bool OAIState_change_issue_event::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIState_change_issue_event::getNodeId() const {
    return m_node_id;
}
void OAIState_change_issue_event::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIState_change_issue_event::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIState_change_issue_event::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINullable_integration OAIState_change_issue_event::getPerformedViaGithubApp() const {
    return m_performed_via_github_app;
}
void OAIState_change_issue_event::setPerformedViaGithubApp(const OAINullable_integration &performed_via_github_app) {
    m_performed_via_github_app = performed_via_github_app;
    m_performed_via_github_app_isSet = true;
}

bool OAIState_change_issue_event::is_performed_via_github_app_Set() const{
    return m_performed_via_github_app_isSet;
}

bool OAIState_change_issue_event::is_performed_via_github_app_Valid() const{
    return m_performed_via_github_app_isValid;
}

QString OAIState_change_issue_event::getStateReason() const {
    return m_state_reason;
}
void OAIState_change_issue_event::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIState_change_issue_event::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIState_change_issue_event::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QString OAIState_change_issue_event::getUrl() const {
    return m_url;
}
void OAIState_change_issue_event::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIState_change_issue_event::is_url_Set() const{
    return m_url_isSet;
}

bool OAIState_change_issue_event::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIState_change_issue_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performed_via_github_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIState_change_issue_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actor_isValid && m_commit_id_isValid && m_commit_url_isValid && m_created_at_isValid && m_event_isValid && m_id_isValid && m_node_id_isValid && m_performed_via_github_app_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
