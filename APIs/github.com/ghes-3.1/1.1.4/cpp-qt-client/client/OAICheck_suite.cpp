/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck_suite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck_suite::OAICheck_suite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck_suite::OAICheck_suite() {
    this->initializeModel();
}

OAICheck_suite::~OAICheck_suite() {}

void OAICheck_suite::initializeModel() {

    m_after_isSet = false;
    m_after_isValid = false;

    m_app_isSet = false;
    m_app_isValid = false;

    m_before_isSet = false;
    m_before_isValid = false;

    m_check_runs_url_isSet = false;
    m_check_runs_url_isValid = false;

    m_conclusion_isSet = false;
    m_conclusion_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_head_branch_isSet = false;
    m_head_branch_isValid = false;

    m_head_commit_isSet = false;
    m_head_commit_isValid = false;

    m_head_sha_isSet = false;
    m_head_sha_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_check_runs_count_isSet = false;
    m_latest_check_runs_count_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_pull_requests_isSet = false;
    m_pull_requests_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_rerequestable_isSet = false;
    m_rerequestable_isValid = false;

    m_runs_rerequestable_isSet = false;
    m_runs_rerequestable_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICheck_suite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck_suite::fromJsonObject(QJsonObject json) {

    m_after_isValid = ::OpenAPI::fromJsonValue(m_after, json[QString("after")]);
    m_after_isSet = !json[QString("after")].isNull() && m_after_isValid;

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_before_isValid = ::OpenAPI::fromJsonValue(m_before, json[QString("before")]);
    m_before_isSet = !json[QString("before")].isNull() && m_before_isValid;

    m_check_runs_url_isValid = ::OpenAPI::fromJsonValue(m_check_runs_url, json[QString("check_runs_url")]);
    m_check_runs_url_isSet = !json[QString("check_runs_url")].isNull() && m_check_runs_url_isValid;

    m_conclusion_isValid = ::OpenAPI::fromJsonValue(m_conclusion, json[QString("conclusion")]);
    m_conclusion_isSet = !json[QString("conclusion")].isNull() && m_conclusion_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_head_branch_isValid = ::OpenAPI::fromJsonValue(m_head_branch, json[QString("head_branch")]);
    m_head_branch_isSet = !json[QString("head_branch")].isNull() && m_head_branch_isValid;

    m_head_commit_isValid = ::OpenAPI::fromJsonValue(m_head_commit, json[QString("head_commit")]);
    m_head_commit_isSet = !json[QString("head_commit")].isNull() && m_head_commit_isValid;

    m_head_sha_isValid = ::OpenAPI::fromJsonValue(m_head_sha, json[QString("head_sha")]);
    m_head_sha_isSet = !json[QString("head_sha")].isNull() && m_head_sha_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_check_runs_count_isValid = ::OpenAPI::fromJsonValue(m_latest_check_runs_count, json[QString("latest_check_runs_count")]);
    m_latest_check_runs_count_isSet = !json[QString("latest_check_runs_count")].isNull() && m_latest_check_runs_count_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_pull_requests_isValid = ::OpenAPI::fromJsonValue(m_pull_requests, json[QString("pull_requests")]);
    m_pull_requests_isSet = !json[QString("pull_requests")].isNull() && m_pull_requests_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_rerequestable_isValid = ::OpenAPI::fromJsonValue(m_rerequestable, json[QString("rerequestable")]);
    m_rerequestable_isSet = !json[QString("rerequestable")].isNull() && m_rerequestable_isValid;

    m_runs_rerequestable_isValid = ::OpenAPI::fromJsonValue(m_runs_rerequestable, json[QString("runs_rerequestable")]);
    m_runs_rerequestable_isSet = !json[QString("runs_rerequestable")].isNull() && m_runs_rerequestable_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICheck_suite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck_suite::asJsonObject() const {
    QJsonObject obj;
    if (m_after_isSet) {
        obj.insert(QString("after"), ::OpenAPI::toJsonValue(m_after));
    }
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_before_isSet) {
        obj.insert(QString("before"), ::OpenAPI::toJsonValue(m_before));
    }
    if (m_check_runs_url_isSet) {
        obj.insert(QString("check_runs_url"), ::OpenAPI::toJsonValue(m_check_runs_url));
    }
    if (m_conclusion_isSet) {
        obj.insert(QString("conclusion"), ::OpenAPI::toJsonValue(m_conclusion));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_head_branch_isSet) {
        obj.insert(QString("head_branch"), ::OpenAPI::toJsonValue(m_head_branch));
    }
    if (m_head_commit.isSet()) {
        obj.insert(QString("head_commit"), ::OpenAPI::toJsonValue(m_head_commit));
    }
    if (m_head_sha_isSet) {
        obj.insert(QString("head_sha"), ::OpenAPI::toJsonValue(m_head_sha));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_check_runs_count_isSet) {
        obj.insert(QString("latest_check_runs_count"), ::OpenAPI::toJsonValue(m_latest_check_runs_count));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_pull_requests.size() > 0) {
        obj.insert(QString("pull_requests"), ::OpenAPI::toJsonValue(m_pull_requests));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_rerequestable_isSet) {
        obj.insert(QString("rerequestable"), ::OpenAPI::toJsonValue(m_rerequestable));
    }
    if (m_runs_rerequestable_isSet) {
        obj.insert(QString("runs_rerequestable"), ::OpenAPI::toJsonValue(m_runs_rerequestable));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICheck_suite::getAfter() const {
    return m_after;
}
void OAICheck_suite::setAfter(const QString &after) {
    m_after = after;
    m_after_isSet = true;
}

bool OAICheck_suite::is_after_Set() const{
    return m_after_isSet;
}

bool OAICheck_suite::is_after_Valid() const{
    return m_after_isValid;
}

OAINullable_integration OAICheck_suite::getApp() const {
    return m_app;
}
void OAICheck_suite::setApp(const OAINullable_integration &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAICheck_suite::is_app_Set() const{
    return m_app_isSet;
}

bool OAICheck_suite::is_app_Valid() const{
    return m_app_isValid;
}

QString OAICheck_suite::getBefore() const {
    return m_before;
}
void OAICheck_suite::setBefore(const QString &before) {
    m_before = before;
    m_before_isSet = true;
}

bool OAICheck_suite::is_before_Set() const{
    return m_before_isSet;
}

bool OAICheck_suite::is_before_Valid() const{
    return m_before_isValid;
}

QString OAICheck_suite::getCheckRunsUrl() const {
    return m_check_runs_url;
}
void OAICheck_suite::setCheckRunsUrl(const QString &check_runs_url) {
    m_check_runs_url = check_runs_url;
    m_check_runs_url_isSet = true;
}

bool OAICheck_suite::is_check_runs_url_Set() const{
    return m_check_runs_url_isSet;
}

bool OAICheck_suite::is_check_runs_url_Valid() const{
    return m_check_runs_url_isValid;
}

QString OAICheck_suite::getConclusion() const {
    return m_conclusion;
}
void OAICheck_suite::setConclusion(const QString &conclusion) {
    m_conclusion = conclusion;
    m_conclusion_isSet = true;
}

bool OAICheck_suite::is_conclusion_Set() const{
    return m_conclusion_isSet;
}

bool OAICheck_suite::is_conclusion_Valid() const{
    return m_conclusion_isValid;
}

QDateTime OAICheck_suite::getCreatedAt() const {
    return m_created_at;
}
void OAICheck_suite::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICheck_suite::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICheck_suite::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICheck_suite::getHeadBranch() const {
    return m_head_branch;
}
void OAICheck_suite::setHeadBranch(const QString &head_branch) {
    m_head_branch = head_branch;
    m_head_branch_isSet = true;
}

bool OAICheck_suite::is_head_branch_Set() const{
    return m_head_branch_isSet;
}

bool OAICheck_suite::is_head_branch_Valid() const{
    return m_head_branch_isValid;
}

OAISimple_commit OAICheck_suite::getHeadCommit() const {
    return m_head_commit;
}
void OAICheck_suite::setHeadCommit(const OAISimple_commit &head_commit) {
    m_head_commit = head_commit;
    m_head_commit_isSet = true;
}

bool OAICheck_suite::is_head_commit_Set() const{
    return m_head_commit_isSet;
}

bool OAICheck_suite::is_head_commit_Valid() const{
    return m_head_commit_isValid;
}

QString OAICheck_suite::getHeadSha() const {
    return m_head_sha;
}
void OAICheck_suite::setHeadSha(const QString &head_sha) {
    m_head_sha = head_sha;
    m_head_sha_isSet = true;
}

bool OAICheck_suite::is_head_sha_Set() const{
    return m_head_sha_isSet;
}

bool OAICheck_suite::is_head_sha_Valid() const{
    return m_head_sha_isValid;
}

qint32 OAICheck_suite::getId() const {
    return m_id;
}
void OAICheck_suite::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheck_suite::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheck_suite::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICheck_suite::getLatestCheckRunsCount() const {
    return m_latest_check_runs_count;
}
void OAICheck_suite::setLatestCheckRunsCount(const qint32 &latest_check_runs_count) {
    m_latest_check_runs_count = latest_check_runs_count;
    m_latest_check_runs_count_isSet = true;
}

bool OAICheck_suite::is_latest_check_runs_count_Set() const{
    return m_latest_check_runs_count_isSet;
}

bool OAICheck_suite::is_latest_check_runs_count_Valid() const{
    return m_latest_check_runs_count_isValid;
}

QString OAICheck_suite::getNodeId() const {
    return m_node_id;
}
void OAICheck_suite::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICheck_suite::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICheck_suite::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<OAIPull_request_minimal> OAICheck_suite::getPullRequests() const {
    return m_pull_requests;
}
void OAICheck_suite::setPullRequests(const QList<OAIPull_request_minimal> &pull_requests) {
    m_pull_requests = pull_requests;
    m_pull_requests_isSet = true;
}

bool OAICheck_suite::is_pull_requests_Set() const{
    return m_pull_requests_isSet;
}

bool OAICheck_suite::is_pull_requests_Valid() const{
    return m_pull_requests_isValid;
}

OAIMinimal_repository OAICheck_suite::getRepository() const {
    return m_repository;
}
void OAICheck_suite::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICheck_suite::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICheck_suite::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAICheck_suite::isRerequestable() const {
    return m_rerequestable;
}
void OAICheck_suite::setRerequestable(const bool &rerequestable) {
    m_rerequestable = rerequestable;
    m_rerequestable_isSet = true;
}

bool OAICheck_suite::is_rerequestable_Set() const{
    return m_rerequestable_isSet;
}

bool OAICheck_suite::is_rerequestable_Valid() const{
    return m_rerequestable_isValid;
}

bool OAICheck_suite::isRunsRerequestable() const {
    return m_runs_rerequestable;
}
void OAICheck_suite::setRunsRerequestable(const bool &runs_rerequestable) {
    m_runs_rerequestable = runs_rerequestable;
    m_runs_rerequestable_isSet = true;
}

bool OAICheck_suite::is_runs_rerequestable_Set() const{
    return m_runs_rerequestable_isSet;
}

bool OAICheck_suite::is_runs_rerequestable_Valid() const{
    return m_runs_rerequestable_isValid;
}

QString OAICheck_suite::getStatus() const {
    return m_status;
}
void OAICheck_suite::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICheck_suite::is_status_Set() const{
    return m_status_isSet;
}

bool OAICheck_suite::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICheck_suite::getUpdatedAt() const {
    return m_updated_at;
}
void OAICheck_suite::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICheck_suite::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICheck_suite::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICheck_suite::getUrl() const {
    return m_url;
}
void OAICheck_suite::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICheck_suite::is_url_Set() const{
    return m_url_isSet;
}

bool OAICheck_suite::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICheck_suite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_runs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_check_runs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rerequestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs_rerequestable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck_suite::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_after_isValid && m_app_isValid && m_before_isValid && m_check_runs_url_isValid && m_conclusion_isValid && m_created_at_isValid && m_head_branch_isValid && m_head_commit_isValid && m_head_sha_isValid && m_id_isValid && m_latest_check_runs_count_isValid && m_node_id_isValid && m_pull_requests_isValid && m_repository_isValid && m_status_isValid && m_updated_at_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
