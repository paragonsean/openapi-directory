/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPre_receive_environment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPre_receive_environment::OAIPre_receive_environment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPre_receive_environment::OAIPre_receive_environment() {
    this->initializeModel();
}

OAIPre_receive_environment::~OAIPre_receive_environment() {}

void OAIPre_receive_environment::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_environment_isSet = false;
    m_default_environment_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_hooks_count_isSet = false;
    m_hooks_count_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPre_receive_environment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPre_receive_environment::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_environment_isValid = ::OpenAPI::fromJsonValue(m_default_environment, json[QString("default_environment")]);
    m_default_environment_isSet = !json[QString("default_environment")].isNull() && m_default_environment_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_hooks_count_isValid = ::OpenAPI::fromJsonValue(m_hooks_count, json[QString("hooks_count")]);
    m_hooks_count_isSet = !json[QString("hooks_count")].isNull() && m_hooks_count_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPre_receive_environment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPre_receive_environment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_environment_isSet) {
        obj.insert(QString("default_environment"), ::OpenAPI::toJsonValue(m_default_environment));
    }
    if (m_download.isSet()) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_hooks_count_isSet) {
        obj.insert(QString("hooks_count"), ::OpenAPI::toJsonValue(m_hooks_count));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPre_receive_environment::getCreatedAt() const {
    return m_created_at;
}
void OAIPre_receive_environment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPre_receive_environment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPre_receive_environment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIPre_receive_environment::isDefaultEnvironment() const {
    return m_default_environment;
}
void OAIPre_receive_environment::setDefaultEnvironment(const bool &default_environment) {
    m_default_environment = default_environment;
    m_default_environment_isSet = true;
}

bool OAIPre_receive_environment::is_default_environment_Set() const{
    return m_default_environment_isSet;
}

bool OAIPre_receive_environment::is_default_environment_Valid() const{
    return m_default_environment_isValid;
}

OAIPre_receive_environment_download OAIPre_receive_environment::getDownload() const {
    return m_download;
}
void OAIPre_receive_environment::setDownload(const OAIPre_receive_environment_download &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIPre_receive_environment::is_download_Set() const{
    return m_download_isSet;
}

bool OAIPre_receive_environment::is_download_Valid() const{
    return m_download_isValid;
}

qint32 OAIPre_receive_environment::getHooksCount() const {
    return m_hooks_count;
}
void OAIPre_receive_environment::setHooksCount(const qint32 &hooks_count) {
    m_hooks_count = hooks_count;
    m_hooks_count_isSet = true;
}

bool OAIPre_receive_environment::is_hooks_count_Set() const{
    return m_hooks_count_isSet;
}

bool OAIPre_receive_environment::is_hooks_count_Valid() const{
    return m_hooks_count_isValid;
}

QString OAIPre_receive_environment::getHtmlUrl() const {
    return m_html_url;
}
void OAIPre_receive_environment::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIPre_receive_environment::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIPre_receive_environment::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIPre_receive_environment::getId() const {
    return m_id;
}
void OAIPre_receive_environment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPre_receive_environment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPre_receive_environment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPre_receive_environment::getImageUrl() const {
    return m_image_url;
}
void OAIPre_receive_environment::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIPre_receive_environment::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIPre_receive_environment::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIPre_receive_environment::getName() const {
    return m_name;
}
void OAIPre_receive_environment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPre_receive_environment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPre_receive_environment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPre_receive_environment::getUrl() const {
    return m_url;
}
void OAIPre_receive_environment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPre_receive_environment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPre_receive_environment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPre_receive_environment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPre_receive_environment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
