/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBase_gist.h
 *
 * Base Gist
 */

#ifndef OAIBase_gist_H
#define OAIBase_gist_H

#include <QJsonObject>

#include "OAIBase_gist_files_value.h"
#include "OAINullable_simple_user.h"
#include "OAISimple_user.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBase_gist_files_value;
class OAISimple_user;
class OAINullable_simple_user;

class OAIBase_gist : public OAIObject {
public:
    OAIBase_gist();
    OAIBase_gist(QString json);
    ~OAIBase_gist() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getComments() const;
    void setComments(const qint32 &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QString getCommentsUrl() const;
    void setCommentsUrl(const QString &comments_url);
    bool is_comments_url_Set() const;
    bool is_comments_url_Valid() const;

    QString getCommitsUrl() const;
    void setCommitsUrl(const QString &commits_url);
    bool is_commits_url_Set() const;
    bool is_commits_url_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, OAIBase_gist_files_value> getFiles() const;
    void setFiles(const QMap<QString, OAIBase_gist_files_value> &files);
    bool is_files_Set() const;
    bool is_files_Valid() const;

    QList<QJsonValue> getForks() const;
    void setForks(const QList<QJsonValue> &forks);
    bool is_forks_Set() const;
    bool is_forks_Valid() const;

    QString getForksUrl() const;
    void setForksUrl(const QString &forks_url);
    bool is_forks_url_Set() const;
    bool is_forks_url_Valid() const;

    QString getGitPullUrl() const;
    void setGitPullUrl(const QString &git_pull_url);
    bool is_git_pull_url_Set() const;
    bool is_git_pull_url_Valid() const;

    QString getGitPushUrl() const;
    void setGitPushUrl(const QString &git_push_url);
    bool is_git_push_url_Set() const;
    bool is_git_push_url_Valid() const;

    QList<QJsonValue> getHistory() const;
    void setHistory(const QList<QJsonValue> &history);
    bool is_history_Set() const;
    bool is_history_Valid() const;

    QString getHtmlUrl() const;
    void setHtmlUrl(const QString &html_url);
    bool is_html_url_Set() const;
    bool is_html_url_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAISimple_user getOwner() const;
    void setOwner(const OAISimple_user &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    bool isRPublic() const;
    void setRPublic(const bool &r_public);
    bool is_r_public_Set() const;
    bool is_r_public_Valid() const;

    bool isTruncated() const;
    void setTruncated(const bool &truncated);
    bool is_truncated_Set() const;
    bool is_truncated_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAINullable_simple_user getUser() const;
    void setUser(const OAINullable_simple_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QString m_comments_url;
    bool m_comments_url_isSet;
    bool m_comments_url_isValid;

    QString m_commits_url;
    bool m_commits_url_isSet;
    bool m_commits_url_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, OAIBase_gist_files_value> m_files;
    bool m_files_isSet;
    bool m_files_isValid;

    QList<QJsonValue> m_forks;
    bool m_forks_isSet;
    bool m_forks_isValid;

    QString m_forks_url;
    bool m_forks_url_isSet;
    bool m_forks_url_isValid;

    QString m_git_pull_url;
    bool m_git_pull_url_isSet;
    bool m_git_pull_url_isValid;

    QString m_git_push_url;
    bool m_git_push_url_isSet;
    bool m_git_push_url_isValid;

    QList<QJsonValue> m_history;
    bool m_history_isSet;
    bool m_history_isValid;

    QString m_html_url;
    bool m_html_url_isSet;
    bool m_html_url_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAISimple_user m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    bool m_r_public;
    bool m_r_public_isSet;
    bool m_r_public_isValid;

    bool m_truncated;
    bool m_truncated_isSet;
    bool m_truncated_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAINullable_simple_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBase_gist)

#endif // OAIBase_gist_H
