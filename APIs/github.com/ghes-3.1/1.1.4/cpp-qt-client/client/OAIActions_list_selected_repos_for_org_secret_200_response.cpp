/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActions_list_selected_repos_for_org_secret_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActions_list_selected_repos_for_org_secret_200_response::OAIActions_list_selected_repos_for_org_secret_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActions_list_selected_repos_for_org_secret_200_response::OAIActions_list_selected_repos_for_org_secret_200_response() {
    this->initializeModel();
}

OAIActions_list_selected_repos_for_org_secret_200_response::~OAIActions_list_selected_repos_for_org_secret_200_response() {}

void OAIActions_list_selected_repos_for_org_secret_200_response::initializeModel() {

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIActions_list_selected_repos_for_org_secret_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActions_list_selected_repos_for_org_secret_200_response::fromJsonObject(QJsonObject json) {

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIActions_list_selected_repos_for_org_secret_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActions_list_selected_repos_for_org_secret_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIMinimal_repository> OAIActions_list_selected_repos_for_org_secret_200_response::getRepositories() const {
    return m_repositories;
}
void OAIActions_list_selected_repos_for_org_secret_200_response::setRepositories(const QList<OAIMinimal_repository> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::is_repositories_Valid() const{
    return m_repositories_isValid;
}

qint32 OAIActions_list_selected_repos_for_org_secret_200_response::getTotalCount() const {
    return m_total_count;
}
void OAIActions_list_selected_repos_for_org_secret_200_response::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActions_list_selected_repos_for_org_secret_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repositories_isValid && m_total_count_isValid && true;
}

} // namespace OpenAPI
