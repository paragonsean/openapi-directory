/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGit_create_blob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGit_create_blob_request::OAIGit_create_blob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGit_create_blob_request::OAIGit_create_blob_request() {
    this->initializeModel();
}

OAIGit_create_blob_request::~OAIGit_create_blob_request() {}

void OAIGit_create_blob_request::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;
}

void OAIGit_create_blob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGit_create_blob_request::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;
}

QString OAIGit_create_blob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGit_create_blob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    return obj;
}

QString OAIGit_create_blob_request::getContent() const {
    return m_content;
}
void OAIGit_create_blob_request::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGit_create_blob_request::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGit_create_blob_request::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIGit_create_blob_request::getEncoding() const {
    return m_encoding;
}
void OAIGit_create_blob_request::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIGit_create_blob_request::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIGit_create_blob_request::is_encoding_Valid() const{
    return m_encoding_isValid;
}

bool OAIGit_create_blob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGit_create_blob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && true;
}

} // namespace OpenAPI
