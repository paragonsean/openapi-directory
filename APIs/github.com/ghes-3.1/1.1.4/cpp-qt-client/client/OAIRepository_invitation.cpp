/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository_invitation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository_invitation::OAIRepository_invitation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository_invitation::OAIRepository_invitation() {
    this->initializeModel();
}

OAIRepository_invitation::~OAIRepository_invitation() {}

void OAIRepository_invitation::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invitee_isSet = false;
    m_invitee_isValid = false;

    m_inviter_isSet = false;
    m_inviter_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRepository_invitation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository_invitation::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invitee_isValid = ::OpenAPI::fromJsonValue(m_invitee, json[QString("invitee")]);
    m_invitee_isSet = !json[QString("invitee")].isNull() && m_invitee_isValid;

    m_inviter_isValid = ::OpenAPI::fromJsonValue(m_inviter, json[QString("inviter")]);
    m_inviter_isSet = !json[QString("inviter")].isNull() && m_inviter_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRepository_invitation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository_invitation::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invitee.isSet()) {
        obj.insert(QString("invitee"), ::OpenAPI::toJsonValue(m_invitee));
    }
    if (m_inviter.isSet()) {
        obj.insert(QString("inviter"), ::OpenAPI::toJsonValue(m_inviter));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDateTime OAIRepository_invitation::getCreatedAt() const {
    return m_created_at;
}
void OAIRepository_invitation::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRepository_invitation::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRepository_invitation::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIRepository_invitation::isExpired() const {
    return m_expired;
}
void OAIRepository_invitation::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIRepository_invitation::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIRepository_invitation::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAIRepository_invitation::getHtmlUrl() const {
    return m_html_url;
}
void OAIRepository_invitation::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIRepository_invitation::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIRepository_invitation::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIRepository_invitation::getId() const {
    return m_id;
}
void OAIRepository_invitation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepository_invitation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepository_invitation::is_id_Valid() const{
    return m_id_isValid;
}

OAINullable_simple_user OAIRepository_invitation::getInvitee() const {
    return m_invitee;
}
void OAIRepository_invitation::setInvitee(const OAINullable_simple_user &invitee) {
    m_invitee = invitee;
    m_invitee_isSet = true;
}

bool OAIRepository_invitation::is_invitee_Set() const{
    return m_invitee_isSet;
}

bool OAIRepository_invitation::is_invitee_Valid() const{
    return m_invitee_isValid;
}

OAINullable_simple_user OAIRepository_invitation::getInviter() const {
    return m_inviter;
}
void OAIRepository_invitation::setInviter(const OAINullable_simple_user &inviter) {
    m_inviter = inviter;
    m_inviter_isSet = true;
}

bool OAIRepository_invitation::is_inviter_Set() const{
    return m_inviter_isSet;
}

bool OAIRepository_invitation::is_inviter_Valid() const{
    return m_inviter_isValid;
}

QString OAIRepository_invitation::getNodeId() const {
    return m_node_id;
}
void OAIRepository_invitation::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIRepository_invitation::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIRepository_invitation::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIRepository_invitation::getPermissions() const {
    return m_permissions;
}
void OAIRepository_invitation::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRepository_invitation::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRepository_invitation::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIMinimal_repository OAIRepository_invitation::getRepository() const {
    return m_repository;
}
void OAIRepository_invitation::setRepository(const OAIMinimal_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIRepository_invitation::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIRepository_invitation::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIRepository_invitation::getUrl() const {
    return m_url;
}
void OAIRepository_invitation::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRepository_invitation::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRepository_invitation::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRepository_invitation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inviter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository_invitation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_html_url_isValid && m_id_isValid && m_invitee_isValid && m_inviter_isValid && m_node_id_isValid && m_permissions_isValid && m_repository_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
