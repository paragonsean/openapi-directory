/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_search_result_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_search_result_item::OAIUser_search_result_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_search_result_item::OAIUser_search_result_item() {
    this->initializeModel();
}

OAIUser_search_result_item::~OAIUser_search_result_item() {}

void OAIUser_search_result_item::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_events_url_isSet = false;
    m_events_url_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_followers_url_isSet = false;
    m_followers_url_isValid = false;

    m_following_isSet = false;
    m_following_isValid = false;

    m_following_url_isSet = false;
    m_following_url_isValid = false;

    m_gists_url_isSet = false;
    m_gists_url_isValid = false;

    m_gravatar_id_isSet = false;
    m_gravatar_id_isValid = false;

    m_hireable_isSet = false;
    m_hireable_isValid = false;

    m_html_url_isSet = false;
    m_html_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_organizations_url_isSet = false;
    m_organizations_url_isValid = false;

    m_public_gists_isSet = false;
    m_public_gists_isValid = false;

    m_public_repos_isSet = false;
    m_public_repos_isValid = false;

    m_received_events_url_isSet = false;
    m_received_events_url_isValid = false;

    m_repos_url_isSet = false;
    m_repos_url_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_site_admin_isSet = false;
    m_site_admin_isValid = false;

    m_starred_url_isSet = false;
    m_starred_url_isValid = false;

    m_subscriptions_url_isSet = false;
    m_subscriptions_url_isValid = false;

    m_suspended_at_isSet = false;
    m_suspended_at_isValid = false;

    m_text_matches_isSet = false;
    m_text_matches_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUser_search_result_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_search_result_item::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_events_url_isValid = ::OpenAPI::fromJsonValue(m_events_url, json[QString("events_url")]);
    m_events_url_isSet = !json[QString("events_url")].isNull() && m_events_url_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_followers_url_isValid = ::OpenAPI::fromJsonValue(m_followers_url, json[QString("followers_url")]);
    m_followers_url_isSet = !json[QString("followers_url")].isNull() && m_followers_url_isValid;

    m_following_isValid = ::OpenAPI::fromJsonValue(m_following, json[QString("following")]);
    m_following_isSet = !json[QString("following")].isNull() && m_following_isValid;

    m_following_url_isValid = ::OpenAPI::fromJsonValue(m_following_url, json[QString("following_url")]);
    m_following_url_isSet = !json[QString("following_url")].isNull() && m_following_url_isValid;

    m_gists_url_isValid = ::OpenAPI::fromJsonValue(m_gists_url, json[QString("gists_url")]);
    m_gists_url_isSet = !json[QString("gists_url")].isNull() && m_gists_url_isValid;

    m_gravatar_id_isValid = ::OpenAPI::fromJsonValue(m_gravatar_id, json[QString("gravatar_id")]);
    m_gravatar_id_isSet = !json[QString("gravatar_id")].isNull() && m_gravatar_id_isValid;

    m_hireable_isValid = ::OpenAPI::fromJsonValue(m_hireable, json[QString("hireable")]);
    m_hireable_isSet = !json[QString("hireable")].isNull() && m_hireable_isValid;

    m_html_url_isValid = ::OpenAPI::fromJsonValue(m_html_url, json[QString("html_url")]);
    m_html_url_isSet = !json[QString("html_url")].isNull() && m_html_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("node_id")]);
    m_node_id_isSet = !json[QString("node_id")].isNull() && m_node_id_isValid;

    m_organizations_url_isValid = ::OpenAPI::fromJsonValue(m_organizations_url, json[QString("organizations_url")]);
    m_organizations_url_isSet = !json[QString("organizations_url")].isNull() && m_organizations_url_isValid;

    m_public_gists_isValid = ::OpenAPI::fromJsonValue(m_public_gists, json[QString("public_gists")]);
    m_public_gists_isSet = !json[QString("public_gists")].isNull() && m_public_gists_isValid;

    m_public_repos_isValid = ::OpenAPI::fromJsonValue(m_public_repos, json[QString("public_repos")]);
    m_public_repos_isSet = !json[QString("public_repos")].isNull() && m_public_repos_isValid;

    m_received_events_url_isValid = ::OpenAPI::fromJsonValue(m_received_events_url, json[QString("received_events_url")]);
    m_received_events_url_isSet = !json[QString("received_events_url")].isNull() && m_received_events_url_isValid;

    m_repos_url_isValid = ::OpenAPI::fromJsonValue(m_repos_url, json[QString("repos_url")]);
    m_repos_url_isSet = !json[QString("repos_url")].isNull() && m_repos_url_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_site_admin_isValid = ::OpenAPI::fromJsonValue(m_site_admin, json[QString("site_admin")]);
    m_site_admin_isSet = !json[QString("site_admin")].isNull() && m_site_admin_isValid;

    m_starred_url_isValid = ::OpenAPI::fromJsonValue(m_starred_url, json[QString("starred_url")]);
    m_starred_url_isSet = !json[QString("starred_url")].isNull() && m_starred_url_isValid;

    m_subscriptions_url_isValid = ::OpenAPI::fromJsonValue(m_subscriptions_url, json[QString("subscriptions_url")]);
    m_subscriptions_url_isSet = !json[QString("subscriptions_url")].isNull() && m_subscriptions_url_isValid;

    m_suspended_at_isValid = ::OpenAPI::fromJsonValue(m_suspended_at, json[QString("suspended_at")]);
    m_suspended_at_isSet = !json[QString("suspended_at")].isNull() && m_suspended_at_isValid;

    m_text_matches_isValid = ::OpenAPI::fromJsonValue(m_text_matches, json[QString("text_matches")]);
    m_text_matches_isSet = !json[QString("text_matches")].isNull() && m_text_matches_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUser_search_result_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_search_result_item::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_blog_isSet) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_events_url_isSet) {
        obj.insert(QString("events_url"), ::OpenAPI::toJsonValue(m_events_url));
    }
    if (m_followers_isSet) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_followers_url_isSet) {
        obj.insert(QString("followers_url"), ::OpenAPI::toJsonValue(m_followers_url));
    }
    if (m_following_isSet) {
        obj.insert(QString("following"), ::OpenAPI::toJsonValue(m_following));
    }
    if (m_following_url_isSet) {
        obj.insert(QString("following_url"), ::OpenAPI::toJsonValue(m_following_url));
    }
    if (m_gists_url_isSet) {
        obj.insert(QString("gists_url"), ::OpenAPI::toJsonValue(m_gists_url));
    }
    if (m_gravatar_id_isSet) {
        obj.insert(QString("gravatar_id"), ::OpenAPI::toJsonValue(m_gravatar_id));
    }
    if (m_hireable_isSet) {
        obj.insert(QString("hireable"), ::OpenAPI::toJsonValue(m_hireable));
    }
    if (m_html_url_isSet) {
        obj.insert(QString("html_url"), ::OpenAPI::toJsonValue(m_html_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("node_id"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_organizations_url_isSet) {
        obj.insert(QString("organizations_url"), ::OpenAPI::toJsonValue(m_organizations_url));
    }
    if (m_public_gists_isSet) {
        obj.insert(QString("public_gists"), ::OpenAPI::toJsonValue(m_public_gists));
    }
    if (m_public_repos_isSet) {
        obj.insert(QString("public_repos"), ::OpenAPI::toJsonValue(m_public_repos));
    }
    if (m_received_events_url_isSet) {
        obj.insert(QString("received_events_url"), ::OpenAPI::toJsonValue(m_received_events_url));
    }
    if (m_repos_url_isSet) {
        obj.insert(QString("repos_url"), ::OpenAPI::toJsonValue(m_repos_url));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_site_admin_isSet) {
        obj.insert(QString("site_admin"), ::OpenAPI::toJsonValue(m_site_admin));
    }
    if (m_starred_url_isSet) {
        obj.insert(QString("starred_url"), ::OpenAPI::toJsonValue(m_starred_url));
    }
    if (m_subscriptions_url_isSet) {
        obj.insert(QString("subscriptions_url"), ::OpenAPI::toJsonValue(m_subscriptions_url));
    }
    if (m_suspended_at_isSet) {
        obj.insert(QString("suspended_at"), ::OpenAPI::toJsonValue(m_suspended_at));
    }
    if (m_text_matches.size() > 0) {
        obj.insert(QString("text_matches"), ::OpenAPI::toJsonValue(m_text_matches));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIUser_search_result_item::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser_search_result_item::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser_search_result_item::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser_search_result_item::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUser_search_result_item::getBio() const {
    return m_bio;
}
void OAIUser_search_result_item::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUser_search_result_item::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUser_search_result_item::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIUser_search_result_item::getBlog() const {
    return m_blog;
}
void OAIUser_search_result_item::setBlog(const QString &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIUser_search_result_item::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIUser_search_result_item::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIUser_search_result_item::getCompany() const {
    return m_company;
}
void OAIUser_search_result_item::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUser_search_result_item::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUser_search_result_item::is_company_Valid() const{
    return m_company_isValid;
}

QDateTime OAIUser_search_result_item::getCreatedAt() const {
    return m_created_at;
}
void OAIUser_search_result_item::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser_search_result_item::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser_search_result_item::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser_search_result_item::getEmail() const {
    return m_email;
}
void OAIUser_search_result_item::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser_search_result_item::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser_search_result_item::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser_search_result_item::getEventsUrl() const {
    return m_events_url;
}
void OAIUser_search_result_item::setEventsUrl(const QString &events_url) {
    m_events_url = events_url;
    m_events_url_isSet = true;
}

bool OAIUser_search_result_item::is_events_url_Set() const{
    return m_events_url_isSet;
}

bool OAIUser_search_result_item::is_events_url_Valid() const{
    return m_events_url_isValid;
}

qint32 OAIUser_search_result_item::getFollowers() const {
    return m_followers;
}
void OAIUser_search_result_item::setFollowers(const qint32 &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIUser_search_result_item::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIUser_search_result_item::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAIUser_search_result_item::getFollowersUrl() const {
    return m_followers_url;
}
void OAIUser_search_result_item::setFollowersUrl(const QString &followers_url) {
    m_followers_url = followers_url;
    m_followers_url_isSet = true;
}

bool OAIUser_search_result_item::is_followers_url_Set() const{
    return m_followers_url_isSet;
}

bool OAIUser_search_result_item::is_followers_url_Valid() const{
    return m_followers_url_isValid;
}

qint32 OAIUser_search_result_item::getFollowing() const {
    return m_following;
}
void OAIUser_search_result_item::setFollowing(const qint32 &following) {
    m_following = following;
    m_following_isSet = true;
}

bool OAIUser_search_result_item::is_following_Set() const{
    return m_following_isSet;
}

bool OAIUser_search_result_item::is_following_Valid() const{
    return m_following_isValid;
}

QString OAIUser_search_result_item::getFollowingUrl() const {
    return m_following_url;
}
void OAIUser_search_result_item::setFollowingUrl(const QString &following_url) {
    m_following_url = following_url;
    m_following_url_isSet = true;
}

bool OAIUser_search_result_item::is_following_url_Set() const{
    return m_following_url_isSet;
}

bool OAIUser_search_result_item::is_following_url_Valid() const{
    return m_following_url_isValid;
}

QString OAIUser_search_result_item::getGistsUrl() const {
    return m_gists_url;
}
void OAIUser_search_result_item::setGistsUrl(const QString &gists_url) {
    m_gists_url = gists_url;
    m_gists_url_isSet = true;
}

bool OAIUser_search_result_item::is_gists_url_Set() const{
    return m_gists_url_isSet;
}

bool OAIUser_search_result_item::is_gists_url_Valid() const{
    return m_gists_url_isValid;
}

QString OAIUser_search_result_item::getGravatarId() const {
    return m_gravatar_id;
}
void OAIUser_search_result_item::setGravatarId(const QString &gravatar_id) {
    m_gravatar_id = gravatar_id;
    m_gravatar_id_isSet = true;
}

bool OAIUser_search_result_item::is_gravatar_id_Set() const{
    return m_gravatar_id_isSet;
}

bool OAIUser_search_result_item::is_gravatar_id_Valid() const{
    return m_gravatar_id_isValid;
}

bool OAIUser_search_result_item::isHireable() const {
    return m_hireable;
}
void OAIUser_search_result_item::setHireable(const bool &hireable) {
    m_hireable = hireable;
    m_hireable_isSet = true;
}

bool OAIUser_search_result_item::is_hireable_Set() const{
    return m_hireable_isSet;
}

bool OAIUser_search_result_item::is_hireable_Valid() const{
    return m_hireable_isValid;
}

QString OAIUser_search_result_item::getHtmlUrl() const {
    return m_html_url;
}
void OAIUser_search_result_item::setHtmlUrl(const QString &html_url) {
    m_html_url = html_url;
    m_html_url_isSet = true;
}

bool OAIUser_search_result_item::is_html_url_Set() const{
    return m_html_url_isSet;
}

bool OAIUser_search_result_item::is_html_url_Valid() const{
    return m_html_url_isValid;
}

qint32 OAIUser_search_result_item::getId() const {
    return m_id;
}
void OAIUser_search_result_item::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser_search_result_item::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser_search_result_item::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser_search_result_item::getLocation() const {
    return m_location;
}
void OAIUser_search_result_item::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser_search_result_item::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser_search_result_item::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser_search_result_item::getLogin() const {
    return m_login;
}
void OAIUser_search_result_item::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUser_search_result_item::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUser_search_result_item::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUser_search_result_item::getName() const {
    return m_name;
}
void OAIUser_search_result_item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser_search_result_item::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser_search_result_item::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser_search_result_item::getNodeId() const {
    return m_node_id;
}
void OAIUser_search_result_item::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIUser_search_result_item::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIUser_search_result_item::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIUser_search_result_item::getOrganizationsUrl() const {
    return m_organizations_url;
}
void OAIUser_search_result_item::setOrganizationsUrl(const QString &organizations_url) {
    m_organizations_url = organizations_url;
    m_organizations_url_isSet = true;
}

bool OAIUser_search_result_item::is_organizations_url_Set() const{
    return m_organizations_url_isSet;
}

bool OAIUser_search_result_item::is_organizations_url_Valid() const{
    return m_organizations_url_isValid;
}

qint32 OAIUser_search_result_item::getPublicGists() const {
    return m_public_gists;
}
void OAIUser_search_result_item::setPublicGists(const qint32 &public_gists) {
    m_public_gists = public_gists;
    m_public_gists_isSet = true;
}

bool OAIUser_search_result_item::is_public_gists_Set() const{
    return m_public_gists_isSet;
}

bool OAIUser_search_result_item::is_public_gists_Valid() const{
    return m_public_gists_isValid;
}

qint32 OAIUser_search_result_item::getPublicRepos() const {
    return m_public_repos;
}
void OAIUser_search_result_item::setPublicRepos(const qint32 &public_repos) {
    m_public_repos = public_repos;
    m_public_repos_isSet = true;
}

bool OAIUser_search_result_item::is_public_repos_Set() const{
    return m_public_repos_isSet;
}

bool OAIUser_search_result_item::is_public_repos_Valid() const{
    return m_public_repos_isValid;
}

QString OAIUser_search_result_item::getReceivedEventsUrl() const {
    return m_received_events_url;
}
void OAIUser_search_result_item::setReceivedEventsUrl(const QString &received_events_url) {
    m_received_events_url = received_events_url;
    m_received_events_url_isSet = true;
}

bool OAIUser_search_result_item::is_received_events_url_Set() const{
    return m_received_events_url_isSet;
}

bool OAIUser_search_result_item::is_received_events_url_Valid() const{
    return m_received_events_url_isValid;
}

QString OAIUser_search_result_item::getReposUrl() const {
    return m_repos_url;
}
void OAIUser_search_result_item::setReposUrl(const QString &repos_url) {
    m_repos_url = repos_url;
    m_repos_url_isSet = true;
}

bool OAIUser_search_result_item::is_repos_url_Set() const{
    return m_repos_url_isSet;
}

bool OAIUser_search_result_item::is_repos_url_Valid() const{
    return m_repos_url_isValid;
}

double OAIUser_search_result_item::getScore() const {
    return m_score;
}
void OAIUser_search_result_item::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIUser_search_result_item::is_score_Set() const{
    return m_score_isSet;
}

bool OAIUser_search_result_item::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIUser_search_result_item::isSiteAdmin() const {
    return m_site_admin;
}
void OAIUser_search_result_item::setSiteAdmin(const bool &site_admin) {
    m_site_admin = site_admin;
    m_site_admin_isSet = true;
}

bool OAIUser_search_result_item::is_site_admin_Set() const{
    return m_site_admin_isSet;
}

bool OAIUser_search_result_item::is_site_admin_Valid() const{
    return m_site_admin_isValid;
}

QString OAIUser_search_result_item::getStarredUrl() const {
    return m_starred_url;
}
void OAIUser_search_result_item::setStarredUrl(const QString &starred_url) {
    m_starred_url = starred_url;
    m_starred_url_isSet = true;
}

bool OAIUser_search_result_item::is_starred_url_Set() const{
    return m_starred_url_isSet;
}

bool OAIUser_search_result_item::is_starred_url_Valid() const{
    return m_starred_url_isValid;
}

QString OAIUser_search_result_item::getSubscriptionsUrl() const {
    return m_subscriptions_url;
}
void OAIUser_search_result_item::setSubscriptionsUrl(const QString &subscriptions_url) {
    m_subscriptions_url = subscriptions_url;
    m_subscriptions_url_isSet = true;
}

bool OAIUser_search_result_item::is_subscriptions_url_Set() const{
    return m_subscriptions_url_isSet;
}

bool OAIUser_search_result_item::is_subscriptions_url_Valid() const{
    return m_subscriptions_url_isValid;
}

QDateTime OAIUser_search_result_item::getSuspendedAt() const {
    return m_suspended_at;
}
void OAIUser_search_result_item::setSuspendedAt(const QDateTime &suspended_at) {
    m_suspended_at = suspended_at;
    m_suspended_at_isSet = true;
}

bool OAIUser_search_result_item::is_suspended_at_Set() const{
    return m_suspended_at_isSet;
}

bool OAIUser_search_result_item::is_suspended_at_Valid() const{
    return m_suspended_at_isValid;
}

QList<OAISearch_result_text_matches_inner> OAIUser_search_result_item::getTextMatches() const {
    return m_text_matches;
}
void OAIUser_search_result_item::setTextMatches(const QList<OAISearch_result_text_matches_inner> &text_matches) {
    m_text_matches = text_matches;
    m_text_matches_isSet = true;
}

bool OAIUser_search_result_item::is_text_matches_Set() const{
    return m_text_matches_isSet;
}

bool OAIUser_search_result_item::is_text_matches_Valid() const{
    return m_text_matches_isValid;
}

QString OAIUser_search_result_item::getType() const {
    return m_type;
}
void OAIUser_search_result_item::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUser_search_result_item::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUser_search_result_item::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIUser_search_result_item::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUser_search_result_item::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUser_search_result_item::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUser_search_result_item::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIUser_search_result_item::getUrl() const {
    return m_url;
}
void OAIUser_search_result_item::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUser_search_result_item::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUser_search_result_item::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUser_search_result_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_following_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gists_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravatar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hireable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizations_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_gists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_events_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repos_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_search_result_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_url_isValid && m_events_url_isValid && m_followers_url_isValid && m_following_url_isValid && m_gists_url_isValid && m_gravatar_id_isValid && m_html_url_isValid && m_id_isValid && m_login_isValid && m_node_id_isValid && m_organizations_url_isValid && m_received_events_url_isValid && m_repos_url_isValid && m_score_isValid && m_site_admin_isValid && m_starred_url_isValid && m_subscriptions_url_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
