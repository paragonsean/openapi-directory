/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnterprise_settings_enterprise_collectd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnterprise_settings_enterprise_collectd::OAIEnterprise_settings_enterprise_collectd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnterprise_settings_enterprise_collectd::OAIEnterprise_settings_enterprise_collectd() {
    this->initializeModel();
}

OAIEnterprise_settings_enterprise_collectd::~OAIEnterprise_settings_enterprise_collectd() {}

void OAIEnterprise_settings_enterprise_collectd::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIEnterprise_settings_enterprise_collectd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnterprise_settings_enterprise_collectd::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIEnterprise_settings_enterprise_collectd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnterprise_settings_enterprise_collectd::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_isSet) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIEnterprise_settings_enterprise_collectd::isEnabled() const {
    return m_enabled;
}
void OAIEnterprise_settings_enterprise_collectd::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIEnterprise_settings_enterprise_collectd::getEncryption() const {
    return m_encryption;
}
void OAIEnterprise_settings_enterprise_collectd::setEncryption(const QString &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QString OAIEnterprise_settings_enterprise_collectd::getPassword() const {
    return m_password;
}
void OAIEnterprise_settings_enterprise_collectd::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIEnterprise_settings_enterprise_collectd::getPort() const {
    return m_port;
}
void OAIEnterprise_settings_enterprise_collectd::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_port_Set() const{
    return m_port_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIEnterprise_settings_enterprise_collectd::getServer() const {
    return m_server;
}
void OAIEnterprise_settings_enterprise_collectd::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_server_Set() const{
    return m_server_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIEnterprise_settings_enterprise_collectd::getUsername() const {
    return m_username;
}
void OAIEnterprise_settings_enterprise_collectd::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIEnterprise_settings_enterprise_collectd::is_username_Set() const{
    return m_username_isSet;
}

bool OAIEnterprise_settings_enterprise_collectd::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIEnterprise_settings_enterprise_collectd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnterprise_settings_enterprise_collectd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
