# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checks_create_request_actions_inner import ChecksCreateRequestActionsInner
from openapi_server.models.checks_create_request_one_of1 import ChecksCreateRequestOneOf1
from openapi_server.models.checks_update_request_any_of import ChecksUpdateRequestAnyOf
from openapi_server.models.checks_update_request_output import ChecksUpdateRequestOutput
from openapi_server import util


class ChecksUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[ChecksCreateRequestActionsInner]=None, completed_at: datetime=None, conclusion: str=None, details_url: str=None, external_id: str=None, name: str=None, output: ChecksUpdateRequestOutput=None, started_at: datetime=None, status: str=None):
        """ChecksUpdateRequest - a model defined in OpenAPI

        :param actions: The actions of this ChecksUpdateRequest.
        :param completed_at: The completed_at of this ChecksUpdateRequest.
        :param conclusion: The conclusion of this ChecksUpdateRequest.
        :param details_url: The details_url of this ChecksUpdateRequest.
        :param external_id: The external_id of this ChecksUpdateRequest.
        :param name: The name of this ChecksUpdateRequest.
        :param output: The output of this ChecksUpdateRequest.
        :param started_at: The started_at of this ChecksUpdateRequest.
        :param status: The status of this ChecksUpdateRequest.
        """
        self.openapi_types = {
            'actions': List[ChecksCreateRequestActionsInner],
            'completed_at': datetime,
            'conclusion': str,
            'details_url': str,
            'external_id': str,
            'name': str,
            'output': ChecksUpdateRequestOutput,
            'started_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'completed_at': 'completed_at',
            'conclusion': 'conclusion',
            'details_url': 'details_url',
            'external_id': 'external_id',
            'name': 'name',
            'output': 'output',
            'started_at': 'started_at',
            'status': 'status'
        }

        self._actions = actions
        self._completed_at = completed_at
        self._conclusion = conclusion
        self._details_url = details_url
        self._external_id = external_id
        self._name = name
        self._output = output
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChecksUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checks_update_request of this ChecksUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ChecksUpdateRequest.

        Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions).\"

        :return: The actions of this ChecksUpdateRequest.
        :rtype: List[ChecksCreateRequestActionsInner]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ChecksUpdateRequest.

        Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions).\"

        :param actions: The actions of this ChecksUpdateRequest.
        :type actions: List[ChecksCreateRequestActionsInner]
        """
        if actions is not None and len(actions) > 3:
            raise ValueError("Invalid value for `actions`, number of items must be less than or equal to `3`")

        self._actions = actions

    @property
    def completed_at(self):
        """Gets the completed_at of this ChecksUpdateRequest.

        The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The completed_at of this ChecksUpdateRequest.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ChecksUpdateRequest.

        The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param completed_at: The completed_at of this ChecksUpdateRequest.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def conclusion(self):
        """Gets the conclusion of this ChecksUpdateRequest.

        **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.  **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.

        :return: The conclusion of this ChecksUpdateRequest.
        :rtype: str
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """Sets the conclusion of this ChecksUpdateRequest.

        **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.  **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.

        :param conclusion: The conclusion of this ChecksUpdateRequest.
        :type conclusion: str
        """
        allowed_values = ["action_required", "cancelled", "failure", "neutral", "success", "skipped", "stale", "timed_out"]  # noqa: E501
        if conclusion not in allowed_values:
            raise ValueError(
                "Invalid value for `conclusion` ({0}), must be one of {1}"
                .format(conclusion, allowed_values)
            )

        self._conclusion = conclusion

    @property
    def details_url(self):
        """Gets the details_url of this ChecksUpdateRequest.

        The URL of the integrator's site that has the full details of the check.

        :return: The details_url of this ChecksUpdateRequest.
        :rtype: str
        """
        return self._details_url

    @details_url.setter
    def details_url(self, details_url):
        """Sets the details_url of this ChecksUpdateRequest.

        The URL of the integrator's site that has the full details of the check.

        :param details_url: The details_url of this ChecksUpdateRequest.
        :type details_url: str
        """

        self._details_url = details_url

    @property
    def external_id(self):
        """Gets the external_id of this ChecksUpdateRequest.

        A reference for the run on the integrator's system.

        :return: The external_id of this ChecksUpdateRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ChecksUpdateRequest.

        A reference for the run on the integrator's system.

        :param external_id: The external_id of this ChecksUpdateRequest.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this ChecksUpdateRequest.

        The name of the check. For example, \"code-coverage\".

        :return: The name of this ChecksUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChecksUpdateRequest.

        The name of the check. For example, \"code-coverage\".

        :param name: The name of this ChecksUpdateRequest.
        :type name: str
        """

        self._name = name

    @property
    def output(self):
        """Gets the output of this ChecksUpdateRequest.


        :return: The output of this ChecksUpdateRequest.
        :rtype: ChecksUpdateRequestOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this ChecksUpdateRequest.


        :param output: The output of this ChecksUpdateRequest.
        :type output: ChecksUpdateRequestOutput
        """

        self._output = output

    @property
    def started_at(self):
        """Gets the started_at of this ChecksUpdateRequest.

        This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The started_at of this ChecksUpdateRequest.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ChecksUpdateRequest.

        This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param started_at: The started_at of this ChecksUpdateRequest.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this ChecksUpdateRequest.

        The current status.

        :return: The status of this ChecksUpdateRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChecksUpdateRequest.

        The current status.

        :param status: The status of this ChecksUpdateRequest.
        :type status: str
        """
        allowed_values = ["queued", "in_progress", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
