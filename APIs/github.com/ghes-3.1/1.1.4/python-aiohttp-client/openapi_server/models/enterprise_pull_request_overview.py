# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterprisePullRequestOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mergeable_pulls: int=None, merged_pulls: int=None, total_pulls: int=None, unmergeable_pulls: int=None):
        """EnterprisePullRequestOverview - a model defined in OpenAPI

        :param mergeable_pulls: The mergeable_pulls of this EnterprisePullRequestOverview.
        :param merged_pulls: The merged_pulls of this EnterprisePullRequestOverview.
        :param total_pulls: The total_pulls of this EnterprisePullRequestOverview.
        :param unmergeable_pulls: The unmergeable_pulls of this EnterprisePullRequestOverview.
        """
        self.openapi_types = {
            'mergeable_pulls': int,
            'merged_pulls': int,
            'total_pulls': int,
            'unmergeable_pulls': int
        }

        self.attribute_map = {
            'mergeable_pulls': 'mergeable_pulls',
            'merged_pulls': 'merged_pulls',
            'total_pulls': 'total_pulls',
            'unmergeable_pulls': 'unmergeable_pulls'
        }

        self._mergeable_pulls = mergeable_pulls
        self._merged_pulls = merged_pulls
        self._total_pulls = total_pulls
        self._unmergeable_pulls = unmergeable_pulls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterprisePullRequestOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise-pull-request-overview of this EnterprisePullRequestOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mergeable_pulls(self):
        """Gets the mergeable_pulls of this EnterprisePullRequestOverview.


        :return: The mergeable_pulls of this EnterprisePullRequestOverview.
        :rtype: int
        """
        return self._mergeable_pulls

    @mergeable_pulls.setter
    def mergeable_pulls(self, mergeable_pulls):
        """Sets the mergeable_pulls of this EnterprisePullRequestOverview.


        :param mergeable_pulls: The mergeable_pulls of this EnterprisePullRequestOverview.
        :type mergeable_pulls: int
        """
        if mergeable_pulls is None:
            raise ValueError("Invalid value for `mergeable_pulls`, must not be `None`")

        self._mergeable_pulls = mergeable_pulls

    @property
    def merged_pulls(self):
        """Gets the merged_pulls of this EnterprisePullRequestOverview.


        :return: The merged_pulls of this EnterprisePullRequestOverview.
        :rtype: int
        """
        return self._merged_pulls

    @merged_pulls.setter
    def merged_pulls(self, merged_pulls):
        """Sets the merged_pulls of this EnterprisePullRequestOverview.


        :param merged_pulls: The merged_pulls of this EnterprisePullRequestOverview.
        :type merged_pulls: int
        """
        if merged_pulls is None:
            raise ValueError("Invalid value for `merged_pulls`, must not be `None`")

        self._merged_pulls = merged_pulls

    @property
    def total_pulls(self):
        """Gets the total_pulls of this EnterprisePullRequestOverview.


        :return: The total_pulls of this EnterprisePullRequestOverview.
        :rtype: int
        """
        return self._total_pulls

    @total_pulls.setter
    def total_pulls(self, total_pulls):
        """Sets the total_pulls of this EnterprisePullRequestOverview.


        :param total_pulls: The total_pulls of this EnterprisePullRequestOverview.
        :type total_pulls: int
        """
        if total_pulls is None:
            raise ValueError("Invalid value for `total_pulls`, must not be `None`")

        self._total_pulls = total_pulls

    @property
    def unmergeable_pulls(self):
        """Gets the unmergeable_pulls of this EnterprisePullRequestOverview.


        :return: The unmergeable_pulls of this EnterprisePullRequestOverview.
        :rtype: int
        """
        return self._unmergeable_pulls

    @unmergeable_pulls.setter
    def unmergeable_pulls(self, unmergeable_pulls):
        """Sets the unmergeable_pulls of this EnterprisePullRequestOverview.


        :param unmergeable_pulls: The unmergeable_pulls of this EnterprisePullRequestOverview.
        :type unmergeable_pulls: int
        """
        if unmergeable_pulls is None:
            raise ValueError("Invalid value for `unmergeable_pulls`, must not be `None`")

        self._unmergeable_pulls = unmergeable_pulls
