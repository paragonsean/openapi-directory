# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrgHookConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, insecure_ssl: str=None, secret: str=None, url: str=None):
        """OrgHookConfig - a model defined in OpenAPI

        :param content_type: The content_type of this OrgHookConfig.
        :param insecure_ssl: The insecure_ssl of this OrgHookConfig.
        :param secret: The secret of this OrgHookConfig.
        :param url: The url of this OrgHookConfig.
        """
        self.openapi_types = {
            'content_type': str,
            'insecure_ssl': str,
            'secret': str,
            'url': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'insecure_ssl': 'insecure_ssl',
            'secret': 'secret',
            'url': 'url'
        }

        self._content_type = content_type
        self._insecure_ssl = insecure_ssl
        self._secret = secret
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgHookConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The org_hook_config of this OrgHookConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this OrgHookConfig.


        :return: The content_type of this OrgHookConfig.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this OrgHookConfig.


        :param content_type: The content_type of this OrgHookConfig.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def insecure_ssl(self):
        """Gets the insecure_ssl of this OrgHookConfig.


        :return: The insecure_ssl of this OrgHookConfig.
        :rtype: str
        """
        return self._insecure_ssl

    @insecure_ssl.setter
    def insecure_ssl(self, insecure_ssl):
        """Sets the insecure_ssl of this OrgHookConfig.


        :param insecure_ssl: The insecure_ssl of this OrgHookConfig.
        :type insecure_ssl: str
        """

        self._insecure_ssl = insecure_ssl

    @property
    def secret(self):
        """Gets the secret of this OrgHookConfig.


        :return: The secret of this OrgHookConfig.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this OrgHookConfig.


        :param secret: The secret of this OrgHookConfig.
        :type secret: str
        """

        self._secret = secret

    @property
    def url(self):
        """Gets the url of this OrgHookConfig.


        :return: The url of this OrgHookConfig.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrgHookConfig.


        :param url: The url of this OrgHookConfig.
        :type url: str
        """

        self._url = url
