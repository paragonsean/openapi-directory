# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_permissions import AppPermissions
from openapi_server import util


class AppsScopeTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, permissions: AppPermissions=None, repositories: List[str]=None, repository_ids: List[int]=None, target: str=None, target_id: int=None):
        """AppsScopeTokenRequest - a model defined in OpenAPI

        :param access_token: The access_token of this AppsScopeTokenRequest.
        :param permissions: The permissions of this AppsScopeTokenRequest.
        :param repositories: The repositories of this AppsScopeTokenRequest.
        :param repository_ids: The repository_ids of this AppsScopeTokenRequest.
        :param target: The target of this AppsScopeTokenRequest.
        :param target_id: The target_id of this AppsScopeTokenRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'permissions': AppPermissions,
            'repositories': List[str],
            'repository_ids': List[int],
            'target': str,
            'target_id': int
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'permissions': 'permissions',
            'repositories': 'repositories',
            'repository_ids': 'repository_ids',
            'target': 'target',
            'target_id': 'target_id'
        }

        self._access_token = access_token
        self._permissions = permissions
        self._repositories = repositories
        self._repository_ids = repository_ids
        self._target = target
        self._target_id = target_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppsScopeTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apps_scope_token_request of this AppsScopeTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AppsScopeTokenRequest.

        The OAuth access token used to authenticate to the GitHub API.

        :return: The access_token of this AppsScopeTokenRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AppsScopeTokenRequest.

        The OAuth access token used to authenticate to the GitHub API.

        :param access_token: The access_token of this AppsScopeTokenRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def permissions(self):
        """Gets the permissions of this AppsScopeTokenRequest.


        :return: The permissions of this AppsScopeTokenRequest.
        :rtype: AppPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AppsScopeTokenRequest.


        :param permissions: The permissions of this AppsScopeTokenRequest.
        :type permissions: AppPermissions
        """

        self._permissions = permissions

    @property
    def repositories(self):
        """Gets the repositories of this AppsScopeTokenRequest.

        The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.

        :return: The repositories of this AppsScopeTokenRequest.
        :rtype: List[str]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this AppsScopeTokenRequest.

        The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.

        :param repositories: The repositories of this AppsScopeTokenRequest.
        :type repositories: List[str]
        """

        self._repositories = repositories

    @property
    def repository_ids(self):
        """Gets the repository_ids of this AppsScopeTokenRequest.

        The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.

        :return: The repository_ids of this AppsScopeTokenRequest.
        :rtype: List[int]
        """
        return self._repository_ids

    @repository_ids.setter
    def repository_ids(self, repository_ids):
        """Sets the repository_ids of this AppsScopeTokenRequest.

        The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.

        :param repository_ids: The repository_ids of this AppsScopeTokenRequest.
        :type repository_ids: List[int]
        """

        self._repository_ids = repository_ids

    @property
    def target(self):
        """Gets the target of this AppsScopeTokenRequest.

        The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.

        :return: The target of this AppsScopeTokenRequest.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AppsScopeTokenRequest.

        The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.

        :param target: The target of this AppsScopeTokenRequest.
        :type target: str
        """

        self._target = target

    @property
    def target_id(self):
        """Gets the target_id of this AppsScopeTokenRequest.

        The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.

        :return: The target_id of this AppsScopeTokenRequest.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this AppsScopeTokenRequest.

        The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.

        :param target_id: The target_id of this AppsScopeTokenRequest.
        :type target_id: int
        """

        self._target_id = target_id
