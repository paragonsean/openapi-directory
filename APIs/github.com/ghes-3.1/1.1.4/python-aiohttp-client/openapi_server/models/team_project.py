# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_user import SimpleUser
from openapi_server.models.team_project_permissions import TeamProjectPermissions
from openapi_server import util


class TeamProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, columns_url: str=None, created_at: str=None, creator: SimpleUser=None, html_url: str=None, id: int=None, name: str=None, node_id: str=None, number: int=None, organization_permission: str=None, owner_url: str=None, permissions: TeamProjectPermissions=None, private: bool=None, state: str=None, updated_at: str=None, url: str=None):
        """TeamProject - a model defined in OpenAPI

        :param body: The body of this TeamProject.
        :param columns_url: The columns_url of this TeamProject.
        :param created_at: The created_at of this TeamProject.
        :param creator: The creator of this TeamProject.
        :param html_url: The html_url of this TeamProject.
        :param id: The id of this TeamProject.
        :param name: The name of this TeamProject.
        :param node_id: The node_id of this TeamProject.
        :param number: The number of this TeamProject.
        :param organization_permission: The organization_permission of this TeamProject.
        :param owner_url: The owner_url of this TeamProject.
        :param permissions: The permissions of this TeamProject.
        :param private: The private of this TeamProject.
        :param state: The state of this TeamProject.
        :param updated_at: The updated_at of this TeamProject.
        :param url: The url of this TeamProject.
        """
        self.openapi_types = {
            'body': str,
            'columns_url': str,
            'created_at': str,
            'creator': SimpleUser,
            'html_url': str,
            'id': int,
            'name': str,
            'node_id': str,
            'number': int,
            'organization_permission': str,
            'owner_url': str,
            'permissions': TeamProjectPermissions,
            'private': bool,
            'state': str,
            'updated_at': str,
            'url': str
        }

        self.attribute_map = {
            'body': 'body',
            'columns_url': 'columns_url',
            'created_at': 'created_at',
            'creator': 'creator',
            'html_url': 'html_url',
            'id': 'id',
            'name': 'name',
            'node_id': 'node_id',
            'number': 'number',
            'organization_permission': 'organization_permission',
            'owner_url': 'owner_url',
            'permissions': 'permissions',
            'private': 'private',
            'state': 'state',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._body = body
        self._columns_url = columns_url
        self._created_at = created_at
        self._creator = creator
        self._html_url = html_url
        self._id = id
        self._name = name
        self._node_id = node_id
        self._number = number
        self._organization_permission = organization_permission
        self._owner_url = owner_url
        self._permissions = permissions
        self._private = private
        self._state = state
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-project of this TeamProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this TeamProject.


        :return: The body of this TeamProject.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TeamProject.


        :param body: The body of this TeamProject.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def columns_url(self):
        """Gets the columns_url of this TeamProject.


        :return: The columns_url of this TeamProject.
        :rtype: str
        """
        return self._columns_url

    @columns_url.setter
    def columns_url(self, columns_url):
        """Sets the columns_url of this TeamProject.


        :param columns_url: The columns_url of this TeamProject.
        :type columns_url: str
        """
        if columns_url is None:
            raise ValueError("Invalid value for `columns_url`, must not be `None`")

        self._columns_url = columns_url

    @property
    def created_at(self):
        """Gets the created_at of this TeamProject.


        :return: The created_at of this TeamProject.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamProject.


        :param created_at: The created_at of this TeamProject.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this TeamProject.


        :return: The creator of this TeamProject.
        :rtype: SimpleUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this TeamProject.


        :param creator: The creator of this TeamProject.
        :type creator: SimpleUser
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def html_url(self):
        """Gets the html_url of this TeamProject.


        :return: The html_url of this TeamProject.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TeamProject.


        :param html_url: The html_url of this TeamProject.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TeamProject.


        :return: The id of this TeamProject.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamProject.


        :param id: The id of this TeamProject.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this TeamProject.


        :return: The name of this TeamProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamProject.


        :param name: The name of this TeamProject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this TeamProject.


        :return: The node_id of this TeamProject.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TeamProject.


        :param node_id: The node_id of this TeamProject.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def number(self):
        """Gets the number of this TeamProject.


        :return: The number of this TeamProject.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TeamProject.


        :param number: The number of this TeamProject.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def organization_permission(self):
        """Gets the organization_permission of this TeamProject.

        The organization permission for this project. Only present when owner is an organization.

        :return: The organization_permission of this TeamProject.
        :rtype: str
        """
        return self._organization_permission

    @organization_permission.setter
    def organization_permission(self, organization_permission):
        """Sets the organization_permission of this TeamProject.

        The organization permission for this project. Only present when owner is an organization.

        :param organization_permission: The organization_permission of this TeamProject.
        :type organization_permission: str
        """

        self._organization_permission = organization_permission

    @property
    def owner_url(self):
        """Gets the owner_url of this TeamProject.


        :return: The owner_url of this TeamProject.
        :rtype: str
        """
        return self._owner_url

    @owner_url.setter
    def owner_url(self, owner_url):
        """Sets the owner_url of this TeamProject.


        :param owner_url: The owner_url of this TeamProject.
        :type owner_url: str
        """
        if owner_url is None:
            raise ValueError("Invalid value for `owner_url`, must not be `None`")

        self._owner_url = owner_url

    @property
    def permissions(self):
        """Gets the permissions of this TeamProject.


        :return: The permissions of this TeamProject.
        :rtype: TeamProjectPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this TeamProject.


        :param permissions: The permissions of this TeamProject.
        :type permissions: TeamProjectPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def private(self):
        """Gets the private of this TeamProject.

        Whether the project is private or not. Only present when owner is an organization.

        :return: The private of this TeamProject.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TeamProject.

        Whether the project is private or not. Only present when owner is an organization.

        :param private: The private of this TeamProject.
        :type private: bool
        """

        self._private = private

    @property
    def state(self):
        """Gets the state of this TeamProject.


        :return: The state of this TeamProject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TeamProject.


        :param state: The state of this TeamProject.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamProject.


        :return: The updated_at of this TeamProject.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamProject.


        :param updated_at: The updated_at of this TeamProject.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this TeamProject.


        :return: The url of this TeamProject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamProject.


        :param url: The url of this TeamProject.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
