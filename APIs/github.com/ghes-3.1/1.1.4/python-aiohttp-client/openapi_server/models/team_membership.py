# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: str='member', state: str=None, url: str=None):
        """TeamMembership - a model defined in OpenAPI

        :param role: The role of this TeamMembership.
        :param state: The state of this TeamMembership.
        :param url: The url of this TeamMembership.
        """
        self.openapi_types = {
            'role': str,
            'state': str,
            'url': str
        }

        self.attribute_map = {
            'role': 'role',
            'state': 'state',
            'url': 'url'
        }

        self._role = role
        self._state = state
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team-membership of this TeamMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this TeamMembership.

        The role of the user in the team.

        :return: The role of this TeamMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TeamMembership.

        The role of the user in the team.

        :param role: The role of this TeamMembership.
        :type role: str
        """
        allowed_values = ["member", "maintainer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def state(self):
        """Gets the state of this TeamMembership.

        The state of the user's membership in the team.

        :return: The state of this TeamMembership.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TeamMembership.

        The state of the user's membership in the team.

        :param state: The state of this TeamMembership.
        :type state: str
        """
        allowed_values = ["active", "pending"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def url(self):
        """Gets the url of this TeamMembership.


        :return: The url of this TeamMembership.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TeamMembership.


        :param url: The url of this TeamMembership.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
