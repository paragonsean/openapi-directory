# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CodeScanningUploadSarifRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkout_uri: str=None, commit_sha: str=None, ref: str=None, sarif: str=None, started_at: datetime=None, tool_name: str=None):
        """CodeScanningUploadSarifRequest - a model defined in OpenAPI

        :param checkout_uri: The checkout_uri of this CodeScanningUploadSarifRequest.
        :param commit_sha: The commit_sha of this CodeScanningUploadSarifRequest.
        :param ref: The ref of this CodeScanningUploadSarifRequest.
        :param sarif: The sarif of this CodeScanningUploadSarifRequest.
        :param started_at: The started_at of this CodeScanningUploadSarifRequest.
        :param tool_name: The tool_name of this CodeScanningUploadSarifRequest.
        """
        self.openapi_types = {
            'checkout_uri': str,
            'commit_sha': str,
            'ref': str,
            'sarif': str,
            'started_at': datetime,
            'tool_name': str
        }

        self.attribute_map = {
            'checkout_uri': 'checkout_uri',
            'commit_sha': 'commit_sha',
            'ref': 'ref',
            'sarif': 'sarif',
            'started_at': 'started_at',
            'tool_name': 'tool_name'
        }

        self._checkout_uri = checkout_uri
        self._commit_sha = commit_sha
        self._ref = ref
        self._sarif = sarif
        self._started_at = started_at
        self._tool_name = tool_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningUploadSarifRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code_scanning_upload_sarif_request of this CodeScanningUploadSarifRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkout_uri(self):
        """Gets the checkout_uri of this CodeScanningUploadSarifRequest.

        The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.

        :return: The checkout_uri of this CodeScanningUploadSarifRequest.
        :rtype: str
        """
        return self._checkout_uri

    @checkout_uri.setter
    def checkout_uri(self, checkout_uri):
        """Sets the checkout_uri of this CodeScanningUploadSarifRequest.

        The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.

        :param checkout_uri: The checkout_uri of this CodeScanningUploadSarifRequest.
        :type checkout_uri: str
        """

        self._checkout_uri = checkout_uri

    @property
    def commit_sha(self):
        """Gets the commit_sha of this CodeScanningUploadSarifRequest.

        The SHA of the commit to which the analysis you are uploading relates.

        :return: The commit_sha of this CodeScanningUploadSarifRequest.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this CodeScanningUploadSarifRequest.

        The SHA of the commit to which the analysis you are uploading relates.

        :param commit_sha: The commit_sha of this CodeScanningUploadSarifRequest.
        :type commit_sha: str
        """
        if commit_sha is None:
            raise ValueError("Invalid value for `commit_sha`, must not be `None`")
        if commit_sha is not None and len(commit_sha) > 40:
            raise ValueError("Invalid value for `commit_sha`, length must be less than or equal to `40`")
        if commit_sha is not None and len(commit_sha) < 40:
            raise ValueError("Invalid value for `commit_sha`, length must be greater than or equal to `40`")
        if commit_sha is not None and not re.search(r'^[0-9a-fA-F]+$', commit_sha):
            raise ValueError("Invalid value for `commit_sha`, must be a follow pattern or equal to `/^[0-9a-fA-F]+$/`")

        self._commit_sha = commit_sha

    @property
    def ref(self):
        """Gets the ref of this CodeScanningUploadSarifRequest.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :return: The ref of this CodeScanningUploadSarifRequest.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CodeScanningUploadSarifRequest.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :param ref: The ref of this CodeScanningUploadSarifRequest.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def sarif(self):
        """Gets the sarif of this CodeScanningUploadSarifRequest.

        A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning).\"

        :return: The sarif of this CodeScanningUploadSarifRequest.
        :rtype: str
        """
        return self._sarif

    @sarif.setter
    def sarif(self, sarif):
        """Sets the sarif of this CodeScanningUploadSarifRequest.

        A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning).\"

        :param sarif: The sarif of this CodeScanningUploadSarifRequest.
        :type sarif: str
        """
        if sarif is None:
            raise ValueError("Invalid value for `sarif`, must not be `None`")

        self._sarif = sarif

    @property
    def started_at(self):
        """Gets the started_at of this CodeScanningUploadSarifRequest.

        The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The started_at of this CodeScanningUploadSarifRequest.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CodeScanningUploadSarifRequest.

        The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param started_at: The started_at of this CodeScanningUploadSarifRequest.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def tool_name(self):
        """Gets the tool_name of this CodeScanningUploadSarifRequest.

        The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.

        :return: The tool_name of this CodeScanningUploadSarifRequest.
        :rtype: str
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this CodeScanningUploadSarifRequest.

        The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.

        :param tool_name: The tool_name of this CodeScanningUploadSarifRequest.
        :type tool_name: str
        """

        self._tool_name = tool_name
