# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_scanning_alert_classification import CodeScanningAlertClassification
from openapi_server.models.code_scanning_alert_instance_message import CodeScanningAlertInstanceMessage
from openapi_server.models.code_scanning_alert_location import CodeScanningAlertLocation
from openapi_server.models.code_scanning_alert_state import CodeScanningAlertState
from openapi_server import util


class CodeScanningAlertInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_key: str=None, category: str=None, classifications: List[CodeScanningAlertClassification]=None, commit_sha: str=None, environment: str=None, html_url: str=None, location: CodeScanningAlertLocation=None, message: CodeScanningAlertInstanceMessage=None, ref: str=None, state: CodeScanningAlertState=None):
        """CodeScanningAlertInstance - a model defined in OpenAPI

        :param analysis_key: The analysis_key of this CodeScanningAlertInstance.
        :param category: The category of this CodeScanningAlertInstance.
        :param classifications: The classifications of this CodeScanningAlertInstance.
        :param commit_sha: The commit_sha of this CodeScanningAlertInstance.
        :param environment: The environment of this CodeScanningAlertInstance.
        :param html_url: The html_url of this CodeScanningAlertInstance.
        :param location: The location of this CodeScanningAlertInstance.
        :param message: The message of this CodeScanningAlertInstance.
        :param ref: The ref of this CodeScanningAlertInstance.
        :param state: The state of this CodeScanningAlertInstance.
        """
        self.openapi_types = {
            'analysis_key': str,
            'category': str,
            'classifications': List[CodeScanningAlertClassification],
            'commit_sha': str,
            'environment': str,
            'html_url': str,
            'location': CodeScanningAlertLocation,
            'message': CodeScanningAlertInstanceMessage,
            'ref': str,
            'state': CodeScanningAlertState
        }

        self.attribute_map = {
            'analysis_key': 'analysis_key',
            'category': 'category',
            'classifications': 'classifications',
            'commit_sha': 'commit_sha',
            'environment': 'environment',
            'html_url': 'html_url',
            'location': 'location',
            'message': 'message',
            'ref': 'ref',
            'state': 'state'
        }

        self._analysis_key = analysis_key
        self._category = category
        self._classifications = classifications
        self._commit_sha = commit_sha
        self._environment = environment
        self._html_url = html_url
        self._location = location
        self._message = message
        self._ref = ref
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningAlertInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-alert-instance of this CodeScanningAlertInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_key(self):
        """Gets the analysis_key of this CodeScanningAlertInstance.

        Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.

        :return: The analysis_key of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._analysis_key

    @analysis_key.setter
    def analysis_key(self, analysis_key):
        """Sets the analysis_key of this CodeScanningAlertInstance.

        Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.

        :param analysis_key: The analysis_key of this CodeScanningAlertInstance.
        :type analysis_key: str
        """

        self._analysis_key = analysis_key

    @property
    def category(self):
        """Gets the category of this CodeScanningAlertInstance.

        Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.

        :return: The category of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CodeScanningAlertInstance.

        Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.

        :param category: The category of this CodeScanningAlertInstance.
        :type category: str
        """

        self._category = category

    @property
    def classifications(self):
        """Gets the classifications of this CodeScanningAlertInstance.

        Classifications that have been applied to the file that triggered the alert. For example identifying it as documentation, or a generated file.

        :return: The classifications of this CodeScanningAlertInstance.
        :rtype: List[CodeScanningAlertClassification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """Sets the classifications of this CodeScanningAlertInstance.

        Classifications that have been applied to the file that triggered the alert. For example identifying it as documentation, or a generated file.

        :param classifications: The classifications of this CodeScanningAlertInstance.
        :type classifications: List[CodeScanningAlertClassification]
        """

        self._classifications = classifications

    @property
    def commit_sha(self):
        """Gets the commit_sha of this CodeScanningAlertInstance.


        :return: The commit_sha of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this CodeScanningAlertInstance.


        :param commit_sha: The commit_sha of this CodeScanningAlertInstance.
        :type commit_sha: str
        """

        self._commit_sha = commit_sha

    @property
    def environment(self):
        """Gets the environment of this CodeScanningAlertInstance.

        Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.

        :return: The environment of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CodeScanningAlertInstance.

        Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.

        :param environment: The environment of this CodeScanningAlertInstance.
        :type environment: str
        """

        self._environment = environment

    @property
    def html_url(self):
        """Gets the html_url of this CodeScanningAlertInstance.


        :return: The html_url of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CodeScanningAlertInstance.


        :param html_url: The html_url of this CodeScanningAlertInstance.
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def location(self):
        """Gets the location of this CodeScanningAlertInstance.


        :return: The location of this CodeScanningAlertInstance.
        :rtype: CodeScanningAlertLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CodeScanningAlertInstance.


        :param location: The location of this CodeScanningAlertInstance.
        :type location: CodeScanningAlertLocation
        """

        self._location = location

    @property
    def message(self):
        """Gets the message of this CodeScanningAlertInstance.


        :return: The message of this CodeScanningAlertInstance.
        :rtype: CodeScanningAlertInstanceMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CodeScanningAlertInstance.


        :param message: The message of this CodeScanningAlertInstance.
        :type message: CodeScanningAlertInstanceMessage
        """

        self._message = message

    @property
    def ref(self):
        """Gets the ref of this CodeScanningAlertInstance.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :return: The ref of this CodeScanningAlertInstance.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CodeScanningAlertInstance.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :param ref: The ref of this CodeScanningAlertInstance.
        :type ref: str
        """

        self._ref = ref

    @property
    def state(self):
        """Gets the state of this CodeScanningAlertInstance.


        :return: The state of this CodeScanningAlertInstance.
        :rtype: CodeScanningAlertState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CodeScanningAlertInstance.


        :param state: The state of this CodeScanningAlertInstance.
        :type state: CodeScanningAlertState
        """

        self._state = state
