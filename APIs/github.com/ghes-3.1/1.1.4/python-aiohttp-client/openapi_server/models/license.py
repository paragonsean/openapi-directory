# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, conditions: List[str]=None, description: str=None, featured: bool=None, html_url: str=None, implementation: str=None, key: str=None, limitations: List[str]=None, name: str=None, node_id: str=None, permissions: List[str]=None, spdx_id: str=None, url: str=None):
        """License - a model defined in OpenAPI

        :param body: The body of this License.
        :param conditions: The conditions of this License.
        :param description: The description of this License.
        :param featured: The featured of this License.
        :param html_url: The html_url of this License.
        :param implementation: The implementation of this License.
        :param key: The key of this License.
        :param limitations: The limitations of this License.
        :param name: The name of this License.
        :param node_id: The node_id of this License.
        :param permissions: The permissions of this License.
        :param spdx_id: The spdx_id of this License.
        :param url: The url of this License.
        """
        self.openapi_types = {
            'body': str,
            'conditions': List[str],
            'description': str,
            'featured': bool,
            'html_url': str,
            'implementation': str,
            'key': str,
            'limitations': List[str],
            'name': str,
            'node_id': str,
            'permissions': List[str],
            'spdx_id': str,
            'url': str
        }

        self.attribute_map = {
            'body': 'body',
            'conditions': 'conditions',
            'description': 'description',
            'featured': 'featured',
            'html_url': 'html_url',
            'implementation': 'implementation',
            'key': 'key',
            'limitations': 'limitations',
            'name': 'name',
            'node_id': 'node_id',
            'permissions': 'permissions',
            'spdx_id': 'spdx_id',
            'url': 'url'
        }

        self._body = body
        self._conditions = conditions
        self._description = description
        self._featured = featured
        self._html_url = html_url
        self._implementation = implementation
        self._key = key
        self._limitations = limitations
        self._name = name
        self._node_id = node_id
        self._permissions = permissions
        self._spdx_id = spdx_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The license of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this License.


        :return: The body of this License.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this License.


        :param body: The body of this License.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def conditions(self):
        """Gets the conditions of this License.


        :return: The conditions of this License.
        :rtype: List[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this License.


        :param conditions: The conditions of this License.
        :type conditions: List[str]
        """
        if conditions is None:
            raise ValueError("Invalid value for `conditions`, must not be `None`")

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this License.


        :return: The description of this License.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this License.


        :param description: The description of this License.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def featured(self):
        """Gets the featured of this License.


        :return: The featured of this License.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this License.


        :param featured: The featured of this License.
        :type featured: bool
        """
        if featured is None:
            raise ValueError("Invalid value for `featured`, must not be `None`")

        self._featured = featured

    @property
    def html_url(self):
        """Gets the html_url of this License.


        :return: The html_url of this License.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this License.


        :param html_url: The html_url of this License.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def implementation(self):
        """Gets the implementation of this License.


        :return: The implementation of this License.
        :rtype: str
        """
        return self._implementation

    @implementation.setter
    def implementation(self, implementation):
        """Sets the implementation of this License.


        :param implementation: The implementation of this License.
        :type implementation: str
        """
        if implementation is None:
            raise ValueError("Invalid value for `implementation`, must not be `None`")

        self._implementation = implementation

    @property
    def key(self):
        """Gets the key of this License.


        :return: The key of this License.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this License.


        :param key: The key of this License.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def limitations(self):
        """Gets the limitations of this License.


        :return: The limitations of this License.
        :rtype: List[str]
        """
        return self._limitations

    @limitations.setter
    def limitations(self, limitations):
        """Sets the limitations of this License.


        :param limitations: The limitations of this License.
        :type limitations: List[str]
        """
        if limitations is None:
            raise ValueError("Invalid value for `limitations`, must not be `None`")

        self._limitations = limitations

    @property
    def name(self):
        """Gets the name of this License.


        :return: The name of this License.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this License.


        :return: The node_id of this License.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this License.


        :param node_id: The node_id of this License.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def permissions(self):
        """Gets the permissions of this License.


        :return: The permissions of this License.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this License.


        :param permissions: The permissions of this License.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def spdx_id(self):
        """Gets the spdx_id of this License.


        :return: The spdx_id of this License.
        :rtype: str
        """
        return self._spdx_id

    @spdx_id.setter
    def spdx_id(self, spdx_id):
        """Sets the spdx_id of this License.


        :param spdx_id: The spdx_id of this License.
        :type spdx_id: str
        """
        if spdx_id is None:
            raise ValueError("Invalid value for `spdx_id`, must not be `None`")

        self._spdx_id = spdx_id

    @property
    def url(self):
        """Gets the url of this License.


        :return: The url of this License.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this License.


        :param url: The url of this License.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
