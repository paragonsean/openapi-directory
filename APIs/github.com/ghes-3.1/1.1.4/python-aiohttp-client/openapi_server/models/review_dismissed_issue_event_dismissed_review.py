# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReviewDismissedIssueEventDismissedReview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dismissal_commit_id: str=None, dismissal_message: str=None, review_id: int=None, state: str=None):
        """ReviewDismissedIssueEventDismissedReview - a model defined in OpenAPI

        :param dismissal_commit_id: The dismissal_commit_id of this ReviewDismissedIssueEventDismissedReview.
        :param dismissal_message: The dismissal_message of this ReviewDismissedIssueEventDismissedReview.
        :param review_id: The review_id of this ReviewDismissedIssueEventDismissedReview.
        :param state: The state of this ReviewDismissedIssueEventDismissedReview.
        """
        self.openapi_types = {
            'dismissal_commit_id': str,
            'dismissal_message': str,
            'review_id': int,
            'state': str
        }

        self.attribute_map = {
            'dismissal_commit_id': 'dismissal_commit_id',
            'dismissal_message': 'dismissal_message',
            'review_id': 'review_id',
            'state': 'state'
        }

        self._dismissal_commit_id = dismissal_commit_id
        self._dismissal_message = dismissal_message
        self._review_id = review_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewDismissedIssueEventDismissedReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The review_dismissed_issue_event_dismissed_review of this ReviewDismissedIssueEventDismissedReview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dismissal_commit_id(self):
        """Gets the dismissal_commit_id of this ReviewDismissedIssueEventDismissedReview.


        :return: The dismissal_commit_id of this ReviewDismissedIssueEventDismissedReview.
        :rtype: str
        """
        return self._dismissal_commit_id

    @dismissal_commit_id.setter
    def dismissal_commit_id(self, dismissal_commit_id):
        """Sets the dismissal_commit_id of this ReviewDismissedIssueEventDismissedReview.


        :param dismissal_commit_id: The dismissal_commit_id of this ReviewDismissedIssueEventDismissedReview.
        :type dismissal_commit_id: str
        """

        self._dismissal_commit_id = dismissal_commit_id

    @property
    def dismissal_message(self):
        """Gets the dismissal_message of this ReviewDismissedIssueEventDismissedReview.


        :return: The dismissal_message of this ReviewDismissedIssueEventDismissedReview.
        :rtype: str
        """
        return self._dismissal_message

    @dismissal_message.setter
    def dismissal_message(self, dismissal_message):
        """Sets the dismissal_message of this ReviewDismissedIssueEventDismissedReview.


        :param dismissal_message: The dismissal_message of this ReviewDismissedIssueEventDismissedReview.
        :type dismissal_message: str
        """
        if dismissal_message is None:
            raise ValueError("Invalid value for `dismissal_message`, must not be `None`")

        self._dismissal_message = dismissal_message

    @property
    def review_id(self):
        """Gets the review_id of this ReviewDismissedIssueEventDismissedReview.


        :return: The review_id of this ReviewDismissedIssueEventDismissedReview.
        :rtype: int
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this ReviewDismissedIssueEventDismissedReview.


        :param review_id: The review_id of this ReviewDismissedIssueEventDismissedReview.
        :type review_id: int
        """
        if review_id is None:
            raise ValueError("Invalid value for `review_id`, must not be `None`")

        self._review_id = review_id

    @property
    def state(self):
        """Gets the state of this ReviewDismissedIssueEventDismissedReview.


        :return: The state of this ReviewDismissedIssueEventDismissedReview.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReviewDismissedIssueEventDismissedReview.


        :param state: The state of this ReviewDismissedIssueEventDismissedReview.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
