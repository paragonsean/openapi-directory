# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_scanning_analysis_tool import CodeScanningAnalysisTool
import re
from openapi_server import util


class CodeScanningAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_key: str=None, category: str=None, commit_sha: str=None, created_at: datetime=None, deletable: bool=None, environment: str=None, error: str=None, id: int=None, ref: str=None, results_count: int=None, rules_count: int=None, sarif_id: str=None, tool: CodeScanningAnalysisTool=None, tool_name: str=None, url: str=None, warning: str=None):
        """CodeScanningAnalysis - a model defined in OpenAPI

        :param analysis_key: The analysis_key of this CodeScanningAnalysis.
        :param category: The category of this CodeScanningAnalysis.
        :param commit_sha: The commit_sha of this CodeScanningAnalysis.
        :param created_at: The created_at of this CodeScanningAnalysis.
        :param deletable: The deletable of this CodeScanningAnalysis.
        :param environment: The environment of this CodeScanningAnalysis.
        :param error: The error of this CodeScanningAnalysis.
        :param id: The id of this CodeScanningAnalysis.
        :param ref: The ref of this CodeScanningAnalysis.
        :param results_count: The results_count of this CodeScanningAnalysis.
        :param rules_count: The rules_count of this CodeScanningAnalysis.
        :param sarif_id: The sarif_id of this CodeScanningAnalysis.
        :param tool: The tool of this CodeScanningAnalysis.
        :param tool_name: The tool_name of this CodeScanningAnalysis.
        :param url: The url of this CodeScanningAnalysis.
        :param warning: The warning of this CodeScanningAnalysis.
        """
        self.openapi_types = {
            'analysis_key': str,
            'category': str,
            'commit_sha': str,
            'created_at': datetime,
            'deletable': bool,
            'environment': str,
            'error': str,
            'id': int,
            'ref': str,
            'results_count': int,
            'rules_count': int,
            'sarif_id': str,
            'tool': CodeScanningAnalysisTool,
            'tool_name': str,
            'url': str,
            'warning': str
        }

        self.attribute_map = {
            'analysis_key': 'analysis_key',
            'category': 'category',
            'commit_sha': 'commit_sha',
            'created_at': 'created_at',
            'deletable': 'deletable',
            'environment': 'environment',
            'error': 'error',
            'id': 'id',
            'ref': 'ref',
            'results_count': 'results_count',
            'rules_count': 'rules_count',
            'sarif_id': 'sarif_id',
            'tool': 'tool',
            'tool_name': 'tool_name',
            'url': 'url',
            'warning': 'warning'
        }

        self._analysis_key = analysis_key
        self._category = category
        self._commit_sha = commit_sha
        self._created_at = created_at
        self._deletable = deletable
        self._environment = environment
        self._error = error
        self._id = id
        self._ref = ref
        self._results_count = results_count
        self._rules_count = rules_count
        self._sarif_id = sarif_id
        self._tool = tool
        self._tool_name = tool_name
        self._url = url
        self._warning = warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeScanningAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-scanning-analysis of this CodeScanningAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_key(self):
        """Gets the analysis_key of this CodeScanningAnalysis.

        Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.

        :return: The analysis_key of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._analysis_key

    @analysis_key.setter
    def analysis_key(self, analysis_key):
        """Sets the analysis_key of this CodeScanningAnalysis.

        Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.

        :param analysis_key: The analysis_key of this CodeScanningAnalysis.
        :type analysis_key: str
        """
        if analysis_key is None:
            raise ValueError("Invalid value for `analysis_key`, must not be `None`")

        self._analysis_key = analysis_key

    @property
    def category(self):
        """Gets the category of this CodeScanningAnalysis.

        Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.

        :return: The category of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CodeScanningAnalysis.

        Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.

        :param category: The category of this CodeScanningAnalysis.
        :type category: str
        """

        self._category = category

    @property
    def commit_sha(self):
        """Gets the commit_sha of this CodeScanningAnalysis.

        The SHA of the commit to which the analysis you are uploading relates.

        :return: The commit_sha of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._commit_sha

    @commit_sha.setter
    def commit_sha(self, commit_sha):
        """Sets the commit_sha of this CodeScanningAnalysis.

        The SHA of the commit to which the analysis you are uploading relates.

        :param commit_sha: The commit_sha of this CodeScanningAnalysis.
        :type commit_sha: str
        """
        if commit_sha is None:
            raise ValueError("Invalid value for `commit_sha`, must not be `None`")
        if commit_sha is not None and len(commit_sha) > 40:
            raise ValueError("Invalid value for `commit_sha`, length must be less than or equal to `40`")
        if commit_sha is not None and len(commit_sha) < 40:
            raise ValueError("Invalid value for `commit_sha`, length must be greater than or equal to `40`")
        if commit_sha is not None and not re.search(r'^[0-9a-fA-F]+$', commit_sha):
            raise ValueError("Invalid value for `commit_sha`, must be a follow pattern or equal to `/^[0-9a-fA-F]+$/`")

        self._commit_sha = commit_sha

    @property
    def created_at(self):
        """Gets the created_at of this CodeScanningAnalysis.

        The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :return: The created_at of this CodeScanningAnalysis.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CodeScanningAnalysis.

        The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.

        :param created_at: The created_at of this CodeScanningAnalysis.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def deletable(self):
        """Gets the deletable of this CodeScanningAnalysis.


        :return: The deletable of this CodeScanningAnalysis.
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this CodeScanningAnalysis.


        :param deletable: The deletable of this CodeScanningAnalysis.
        :type deletable: bool
        """
        if deletable is None:
            raise ValueError("Invalid value for `deletable`, must not be `None`")

        self._deletable = deletable

    @property
    def environment(self):
        """Gets the environment of this CodeScanningAnalysis.

        Identifies the variable values associated with the environment in which this analysis was performed.

        :return: The environment of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CodeScanningAnalysis.

        Identifies the variable values associated with the environment in which this analysis was performed.

        :param environment: The environment of this CodeScanningAnalysis.
        :type environment: str
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def error(self):
        """Gets the error of this CodeScanningAnalysis.


        :return: The error of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CodeScanningAnalysis.


        :param error: The error of this CodeScanningAnalysis.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def id(self):
        """Gets the id of this CodeScanningAnalysis.

        Unique identifier for this analysis.

        :return: The id of this CodeScanningAnalysis.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeScanningAnalysis.

        Unique identifier for this analysis.

        :param id: The id of this CodeScanningAnalysis.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ref(self):
        """Gets the ref of this CodeScanningAnalysis.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :return: The ref of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CodeScanningAnalysis.

        The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.

        :param ref: The ref of this CodeScanningAnalysis.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def results_count(self):
        """Gets the results_count of this CodeScanningAnalysis.

        The total number of results in the analysis.

        :return: The results_count of this CodeScanningAnalysis.
        :rtype: int
        """
        return self._results_count

    @results_count.setter
    def results_count(self, results_count):
        """Sets the results_count of this CodeScanningAnalysis.

        The total number of results in the analysis.

        :param results_count: The results_count of this CodeScanningAnalysis.
        :type results_count: int
        """
        if results_count is None:
            raise ValueError("Invalid value for `results_count`, must not be `None`")

        self._results_count = results_count

    @property
    def rules_count(self):
        """Gets the rules_count of this CodeScanningAnalysis.

        The total number of rules used in the analysis.

        :return: The rules_count of this CodeScanningAnalysis.
        :rtype: int
        """
        return self._rules_count

    @rules_count.setter
    def rules_count(self, rules_count):
        """Sets the rules_count of this CodeScanningAnalysis.

        The total number of rules used in the analysis.

        :param rules_count: The rules_count of this CodeScanningAnalysis.
        :type rules_count: int
        """
        if rules_count is None:
            raise ValueError("Invalid value for `rules_count`, must not be `None`")

        self._rules_count = rules_count

    @property
    def sarif_id(self):
        """Gets the sarif_id of this CodeScanningAnalysis.

        An identifier for the upload.

        :return: The sarif_id of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._sarif_id

    @sarif_id.setter
    def sarif_id(self, sarif_id):
        """Sets the sarif_id of this CodeScanningAnalysis.

        An identifier for the upload.

        :param sarif_id: The sarif_id of this CodeScanningAnalysis.
        :type sarif_id: str
        """
        if sarif_id is None:
            raise ValueError("Invalid value for `sarif_id`, must not be `None`")

        self._sarif_id = sarif_id

    @property
    def tool(self):
        """Gets the tool of this CodeScanningAnalysis.


        :return: The tool of this CodeScanningAnalysis.
        :rtype: CodeScanningAnalysisTool
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this CodeScanningAnalysis.


        :param tool: The tool of this CodeScanningAnalysis.
        :type tool: CodeScanningAnalysisTool
        """
        if tool is None:
            raise ValueError("Invalid value for `tool`, must not be `None`")

        self._tool = tool

    @property
    def tool_name(self):
        """Gets the tool_name of this CodeScanningAnalysis.


        :return: The tool_name of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this CodeScanningAnalysis.


        :param tool_name: The tool_name of this CodeScanningAnalysis.
        :type tool_name: str
        """

        self._tool_name = tool_name

    @property
    def url(self):
        """Gets the url of this CodeScanningAnalysis.

        The REST API URL of the analysis resource.

        :return: The url of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CodeScanningAnalysis.

        The REST API URL of the analysis resource.

        :param url: The url of this CodeScanningAnalysis.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def warning(self):
        """Gets the warning of this CodeScanningAnalysis.

        Warning generated when processing the analysis

        :return: The warning of this CodeScanningAnalysis.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this CodeScanningAnalysis.

        Warning generated when processing the analysis

        :param warning: The warning of this CodeScanningAnalysis.
        :type warning: str
        """
        if warning is None:
            raise ValueError("Invalid value for `warning`, must not be `None`")

        self._warning = warning
