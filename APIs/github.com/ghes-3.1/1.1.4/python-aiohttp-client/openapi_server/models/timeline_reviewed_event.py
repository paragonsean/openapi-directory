# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author_association import AuthorAssociation
from openapi_server.models.pull_request_review_links import PullRequestReviewLinks
from openapi_server.models.simple_user import SimpleUser
from openapi_server import util


class TimelineReviewedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PullRequestReviewLinks=None, author_association: AuthorAssociation=None, body: str=None, body_html: str=None, body_text: str=None, commit_id: str=None, event: str=None, html_url: str=None, id: int=None, node_id: str=None, pull_request_url: str=None, state: str=None, submitted_at: datetime=None, user: SimpleUser=None):
        """TimelineReviewedEvent - a model defined in OpenAPI

        :param links: The links of this TimelineReviewedEvent.
        :param author_association: The author_association of this TimelineReviewedEvent.
        :param body: The body of this TimelineReviewedEvent.
        :param body_html: The body_html of this TimelineReviewedEvent.
        :param body_text: The body_text of this TimelineReviewedEvent.
        :param commit_id: The commit_id of this TimelineReviewedEvent.
        :param event: The event of this TimelineReviewedEvent.
        :param html_url: The html_url of this TimelineReviewedEvent.
        :param id: The id of this TimelineReviewedEvent.
        :param node_id: The node_id of this TimelineReviewedEvent.
        :param pull_request_url: The pull_request_url of this TimelineReviewedEvent.
        :param state: The state of this TimelineReviewedEvent.
        :param submitted_at: The submitted_at of this TimelineReviewedEvent.
        :param user: The user of this TimelineReviewedEvent.
        """
        self.openapi_types = {
            'links': PullRequestReviewLinks,
            'author_association': AuthorAssociation,
            'body': str,
            'body_html': str,
            'body_text': str,
            'commit_id': str,
            'event': str,
            'html_url': str,
            'id': int,
            'node_id': str,
            'pull_request_url': str,
            'state': str,
            'submitted_at': datetime,
            'user': SimpleUser
        }

        self.attribute_map = {
            'links': '_links',
            'author_association': 'author_association',
            'body': 'body',
            'body_html': 'body_html',
            'body_text': 'body_text',
            'commit_id': 'commit_id',
            'event': 'event',
            'html_url': 'html_url',
            'id': 'id',
            'node_id': 'node_id',
            'pull_request_url': 'pull_request_url',
            'state': 'state',
            'submitted_at': 'submitted_at',
            'user': 'user'
        }

        self._links = links
        self._author_association = author_association
        self._body = body
        self._body_html = body_html
        self._body_text = body_text
        self._commit_id = commit_id
        self._event = event
        self._html_url = html_url
        self._id = id
        self._node_id = node_id
        self._pull_request_url = pull_request_url
        self._state = state
        self._submitted_at = submitted_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineReviewedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The timeline-reviewed-event of this TimelineReviewedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this TimelineReviewedEvent.


        :return: The links of this TimelineReviewedEvent.
        :rtype: PullRequestReviewLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TimelineReviewedEvent.


        :param links: The links of this TimelineReviewedEvent.
        :type links: PullRequestReviewLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def author_association(self):
        """Gets the author_association of this TimelineReviewedEvent.


        :return: The author_association of this TimelineReviewedEvent.
        :rtype: AuthorAssociation
        """
        return self._author_association

    @author_association.setter
    def author_association(self, author_association):
        """Sets the author_association of this TimelineReviewedEvent.


        :param author_association: The author_association of this TimelineReviewedEvent.
        :type author_association: AuthorAssociation
        """
        if author_association is None:
            raise ValueError("Invalid value for `author_association`, must not be `None`")

        self._author_association = author_association

    @property
    def body(self):
        """Gets the body of this TimelineReviewedEvent.

        The text of the review.

        :return: The body of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TimelineReviewedEvent.

        The text of the review.

        :param body: The body of this TimelineReviewedEvent.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this TimelineReviewedEvent.


        :return: The body_html of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this TimelineReviewedEvent.


        :param body_html: The body_html of this TimelineReviewedEvent.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def body_text(self):
        """Gets the body_text of this TimelineReviewedEvent.


        :return: The body_text of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._body_text

    @body_text.setter
    def body_text(self, body_text):
        """Sets the body_text of this TimelineReviewedEvent.


        :param body_text: The body_text of this TimelineReviewedEvent.
        :type body_text: str
        """

        self._body_text = body_text

    @property
    def commit_id(self):
        """Gets the commit_id of this TimelineReviewedEvent.

        A commit SHA for the review.

        :return: The commit_id of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this TimelineReviewedEvent.

        A commit SHA for the review.

        :param commit_id: The commit_id of this TimelineReviewedEvent.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def event(self):
        """Gets the event of this TimelineReviewedEvent.


        :return: The event of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TimelineReviewedEvent.


        :param event: The event of this TimelineReviewedEvent.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def html_url(self):
        """Gets the html_url of this TimelineReviewedEvent.


        :return: The html_url of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this TimelineReviewedEvent.


        :param html_url: The html_url of this TimelineReviewedEvent.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this TimelineReviewedEvent.

        Unique identifier of the review

        :return: The id of this TimelineReviewedEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimelineReviewedEvent.

        Unique identifier of the review

        :param id: The id of this TimelineReviewedEvent.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this TimelineReviewedEvent.


        :return: The node_id of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TimelineReviewedEvent.


        :param node_id: The node_id of this TimelineReviewedEvent.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def pull_request_url(self):
        """Gets the pull_request_url of this TimelineReviewedEvent.


        :return: The pull_request_url of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._pull_request_url

    @pull_request_url.setter
    def pull_request_url(self, pull_request_url):
        """Sets the pull_request_url of this TimelineReviewedEvent.


        :param pull_request_url: The pull_request_url of this TimelineReviewedEvent.
        :type pull_request_url: str
        """
        if pull_request_url is None:
            raise ValueError("Invalid value for `pull_request_url`, must not be `None`")

        self._pull_request_url = pull_request_url

    @property
    def state(self):
        """Gets the state of this TimelineReviewedEvent.


        :return: The state of this TimelineReviewedEvent.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TimelineReviewedEvent.


        :param state: The state of this TimelineReviewedEvent.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def submitted_at(self):
        """Gets the submitted_at of this TimelineReviewedEvent.


        :return: The submitted_at of this TimelineReviewedEvent.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this TimelineReviewedEvent.


        :param submitted_at: The submitted_at of this TimelineReviewedEvent.
        :type submitted_at: datetime
        """

        self._submitted_at = submitted_at

    @property
    def user(self):
        """Gets the user of this TimelineReviewedEvent.


        :return: The user of this TimelineReviewedEvent.
        :rtype: SimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TimelineReviewedEvent.


        :param user: The user of this TimelineReviewedEvent.
        :type user: SimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
