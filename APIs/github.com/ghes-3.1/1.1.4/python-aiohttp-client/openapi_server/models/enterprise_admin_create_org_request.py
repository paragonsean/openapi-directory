# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseAdminCreateOrgRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: str=None, login: str=None, profile_name: str=None):
        """EnterpriseAdminCreateOrgRequest - a model defined in OpenAPI

        :param admin: The admin of this EnterpriseAdminCreateOrgRequest.
        :param login: The login of this EnterpriseAdminCreateOrgRequest.
        :param profile_name: The profile_name of this EnterpriseAdminCreateOrgRequest.
        """
        self.openapi_types = {
            'admin': str,
            'login': str,
            'profile_name': str
        }

        self.attribute_map = {
            'admin': 'admin',
            'login': 'login',
            'profile_name': 'profile_name'
        }

        self._admin = admin
        self._login = login
        self._profile_name = profile_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseAdminCreateOrgRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_admin_create_org_request of this EnterpriseAdminCreateOrgRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this EnterpriseAdminCreateOrgRequest.

        The login of the user who will manage this organization.

        :return: The admin of this EnterpriseAdminCreateOrgRequest.
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this EnterpriseAdminCreateOrgRequest.

        The login of the user who will manage this organization.

        :param admin: The admin of this EnterpriseAdminCreateOrgRequest.
        :type admin: str
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")

        self._admin = admin

    @property
    def login(self):
        """Gets the login of this EnterpriseAdminCreateOrgRequest.

        The organization's username.

        :return: The login of this EnterpriseAdminCreateOrgRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this EnterpriseAdminCreateOrgRequest.

        The organization's username.

        :param login: The login of this EnterpriseAdminCreateOrgRequest.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def profile_name(self):
        """Gets the profile_name of this EnterpriseAdminCreateOrgRequest.

        The organization's display name.

        :return: The profile_name of this EnterpriseAdminCreateOrgRequest.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this EnterpriseAdminCreateOrgRequest.

        The organization's display name.

        :param profile_name: The profile_name of this EnterpriseAdminCreateOrgRequest.
        :type profile_name: str
        """

        self._profile_name = profile_name
