# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repos_create_deployment_request_payload import ReposCreateDeploymentRequestPayload
from openapi_server import util


class ReposCreateDeploymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_merge: bool=True, description: str='', environment: str='production', payload: ReposCreateDeploymentRequestPayload=None, production_environment: bool=None, ref: str=None, required_contexts: List[str]=None, task: str='deploy', transient_environment: bool=False):
        """ReposCreateDeploymentRequest - a model defined in OpenAPI

        :param auto_merge: The auto_merge of this ReposCreateDeploymentRequest.
        :param description: The description of this ReposCreateDeploymentRequest.
        :param environment: The environment of this ReposCreateDeploymentRequest.
        :param payload: The payload of this ReposCreateDeploymentRequest.
        :param production_environment: The production_environment of this ReposCreateDeploymentRequest.
        :param ref: The ref of this ReposCreateDeploymentRequest.
        :param required_contexts: The required_contexts of this ReposCreateDeploymentRequest.
        :param task: The task of this ReposCreateDeploymentRequest.
        :param transient_environment: The transient_environment of this ReposCreateDeploymentRequest.
        """
        self.openapi_types = {
            'auto_merge': bool,
            'description': str,
            'environment': str,
            'payload': ReposCreateDeploymentRequestPayload,
            'production_environment': bool,
            'ref': str,
            'required_contexts': List[str],
            'task': str,
            'transient_environment': bool
        }

        self.attribute_map = {
            'auto_merge': 'auto_merge',
            'description': 'description',
            'environment': 'environment',
            'payload': 'payload',
            'production_environment': 'production_environment',
            'ref': 'ref',
            'required_contexts': 'required_contexts',
            'task': 'task',
            'transient_environment': 'transient_environment'
        }

        self._auto_merge = auto_merge
        self._description = description
        self._environment = environment
        self._payload = payload
        self._production_environment = production_environment
        self._ref = ref
        self._required_contexts = required_contexts
        self._task = task
        self._transient_environment = transient_environment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReposCreateDeploymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repos_create_deployment_request of this ReposCreateDeploymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_merge(self):
        """Gets the auto_merge of this ReposCreateDeploymentRequest.

        Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.

        :return: The auto_merge of this ReposCreateDeploymentRequest.
        :rtype: bool
        """
        return self._auto_merge

    @auto_merge.setter
    def auto_merge(self, auto_merge):
        """Sets the auto_merge of this ReposCreateDeploymentRequest.

        Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.

        :param auto_merge: The auto_merge of this ReposCreateDeploymentRequest.
        :type auto_merge: bool
        """

        self._auto_merge = auto_merge

    @property
    def description(self):
        """Gets the description of this ReposCreateDeploymentRequest.

        Short description of the deployment.

        :return: The description of this ReposCreateDeploymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposCreateDeploymentRequest.

        Short description of the deployment.

        :param description: The description of this ReposCreateDeploymentRequest.
        :type description: str
        """

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this ReposCreateDeploymentRequest.

        Name for the target deployment environment (e.g., `production`, `staging`, `qa`).

        :return: The environment of this ReposCreateDeploymentRequest.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ReposCreateDeploymentRequest.

        Name for the target deployment environment (e.g., `production`, `staging`, `qa`).

        :param environment: The environment of this ReposCreateDeploymentRequest.
        :type environment: str
        """

        self._environment = environment

    @property
    def payload(self):
        """Gets the payload of this ReposCreateDeploymentRequest.


        :return: The payload of this ReposCreateDeploymentRequest.
        :rtype: ReposCreateDeploymentRequestPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ReposCreateDeploymentRequest.


        :param payload: The payload of this ReposCreateDeploymentRequest.
        :type payload: ReposCreateDeploymentRequestPayload
        """

        self._payload = payload

    @property
    def production_environment(self):
        """Gets the production_environment of this ReposCreateDeploymentRequest.

        Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.   **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.

        :return: The production_environment of this ReposCreateDeploymentRequest.
        :rtype: bool
        """
        return self._production_environment

    @production_environment.setter
    def production_environment(self, production_environment):
        """Sets the production_environment of this ReposCreateDeploymentRequest.

        Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.   **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.

        :param production_environment: The production_environment of this ReposCreateDeploymentRequest.
        :type production_environment: bool
        """

        self._production_environment = production_environment

    @property
    def ref(self):
        """Gets the ref of this ReposCreateDeploymentRequest.

        The ref to deploy. This can be a branch, tag, or SHA.

        :return: The ref of this ReposCreateDeploymentRequest.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this ReposCreateDeploymentRequest.

        The ref to deploy. This can be a branch, tag, or SHA.

        :param ref: The ref of this ReposCreateDeploymentRequest.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    @property
    def required_contexts(self):
        """Gets the required_contexts of this ReposCreateDeploymentRequest.

        The [status](https://docs.github.com/enterprise-server@3.1/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.

        :return: The required_contexts of this ReposCreateDeploymentRequest.
        :rtype: List[str]
        """
        return self._required_contexts

    @required_contexts.setter
    def required_contexts(self, required_contexts):
        """Sets the required_contexts of this ReposCreateDeploymentRequest.

        The [status](https://docs.github.com/enterprise-server@3.1/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.

        :param required_contexts: The required_contexts of this ReposCreateDeploymentRequest.
        :type required_contexts: List[str]
        """

        self._required_contexts = required_contexts

    @property
    def task(self):
        """Gets the task of this ReposCreateDeploymentRequest.

        Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).

        :return: The task of this ReposCreateDeploymentRequest.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ReposCreateDeploymentRequest.

        Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).

        :param task: The task of this ReposCreateDeploymentRequest.
        :type task: str
        """

        self._task = task

    @property
    def transient_environment(self):
        """Gets the transient_environment of this ReposCreateDeploymentRequest.

        Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`   **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.

        :return: The transient_environment of this ReposCreateDeploymentRequest.
        :rtype: bool
        """
        return self._transient_environment

    @transient_environment.setter
    def transient_environment(self, transient_environment):
        """Sets the transient_environment of this ReposCreateDeploymentRequest.

        Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`   **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.

        :param transient_environment: The transient_environment of this ReposCreateDeploymentRequest.
        :type transient_environment: bool
        """

        self._transient_environment = transient_environment
