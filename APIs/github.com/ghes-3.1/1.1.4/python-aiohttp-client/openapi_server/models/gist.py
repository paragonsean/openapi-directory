# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_gist_files_value import BaseGistFilesValue
from openapi_server.models.nullable_simple_user import NullableSimpleUser
from openapi_server import util


class Gist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: int=None, comments_url: str=None, commits_url: str=None, created_at: datetime=None, description: str=None, files: Dict[str, BaseGistFilesValue]=None, forks: List[object]=None, forks_url: str=None, git_pull_url: str=None, git_push_url: str=None, history: List[object]=None, html_url: str=None, id: str=None, node_id: str=None, owner: NullableSimpleUser=None, public: bool=None, truncated: bool=None, updated_at: datetime=None, url: str=None, user: NullableSimpleUser=None):
        """Gist - a model defined in OpenAPI

        :param comments: The comments of this Gist.
        :param comments_url: The comments_url of this Gist.
        :param commits_url: The commits_url of this Gist.
        :param created_at: The created_at of this Gist.
        :param description: The description of this Gist.
        :param files: The files of this Gist.
        :param forks: The forks of this Gist.
        :param forks_url: The forks_url of this Gist.
        :param git_pull_url: The git_pull_url of this Gist.
        :param git_push_url: The git_push_url of this Gist.
        :param history: The history of this Gist.
        :param html_url: The html_url of this Gist.
        :param id: The id of this Gist.
        :param node_id: The node_id of this Gist.
        :param owner: The owner of this Gist.
        :param public: The public of this Gist.
        :param truncated: The truncated of this Gist.
        :param updated_at: The updated_at of this Gist.
        :param url: The url of this Gist.
        :param user: The user of this Gist.
        """
        self.openapi_types = {
            'comments': int,
            'comments_url': str,
            'commits_url': str,
            'created_at': datetime,
            'description': str,
            'files': Dict[str, BaseGistFilesValue],
            'forks': List[object],
            'forks_url': str,
            'git_pull_url': str,
            'git_push_url': str,
            'history': List[object],
            'html_url': str,
            'id': str,
            'node_id': str,
            'owner': NullableSimpleUser,
            'public': bool,
            'truncated': bool,
            'updated_at': datetime,
            'url': str,
            'user': NullableSimpleUser
        }

        self.attribute_map = {
            'comments': 'comments',
            'comments_url': 'comments_url',
            'commits_url': 'commits_url',
            'created_at': 'created_at',
            'description': 'description',
            'files': 'files',
            'forks': 'forks',
            'forks_url': 'forks_url',
            'git_pull_url': 'git_pull_url',
            'git_push_url': 'git_push_url',
            'history': 'history',
            'html_url': 'html_url',
            'id': 'id',
            'node_id': 'node_id',
            'owner': 'owner',
            'public': 'public',
            'truncated': 'truncated',
            'updated_at': 'updated_at',
            'url': 'url',
            'user': 'user'
        }

        self._comments = comments
        self._comments_url = comments_url
        self._commits_url = commits_url
        self._created_at = created_at
        self._description = description
        self._files = files
        self._forks = forks
        self._forks_url = forks_url
        self._git_pull_url = git_pull_url
        self._git_push_url = git_push_url
        self._history = history
        self._html_url = html_url
        self._id = id
        self._node_id = node_id
        self._owner = owner
        self._public = public
        self._truncated = truncated
        self._updated_at = updated_at
        self._url = url
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gist of this Gist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this Gist.


        :return: The comments of this Gist.
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Gist.


        :param comments: The comments of this Gist.
        :type comments: int
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def comments_url(self):
        """Gets the comments_url of this Gist.


        :return: The comments_url of this Gist.
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this Gist.


        :param comments_url: The comments_url of this Gist.
        :type comments_url: str
        """
        if comments_url is None:
            raise ValueError("Invalid value for `comments_url`, must not be `None`")

        self._comments_url = comments_url

    @property
    def commits_url(self):
        """Gets the commits_url of this Gist.


        :return: The commits_url of this Gist.
        :rtype: str
        """
        return self._commits_url

    @commits_url.setter
    def commits_url(self, commits_url):
        """Sets the commits_url of this Gist.


        :param commits_url: The commits_url of this Gist.
        :type commits_url: str
        """
        if commits_url is None:
            raise ValueError("Invalid value for `commits_url`, must not be `None`")

        self._commits_url = commits_url

    @property
    def created_at(self):
        """Gets the created_at of this Gist.


        :return: The created_at of this Gist.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Gist.


        :param created_at: The created_at of this Gist.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Gist.


        :return: The description of this Gist.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Gist.


        :param description: The description of this Gist.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def files(self):
        """Gets the files of this Gist.


        :return: The files of this Gist.
        :rtype: Dict[str, BaseGistFilesValue]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Gist.


        :param files: The files of this Gist.
        :type files: Dict[str, BaseGistFilesValue]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files

    @property
    def forks(self):
        """Gets the forks of this Gist.


        :return: The forks of this Gist.
        :rtype: List[object]
        """
        return self._forks

    @forks.setter
    def forks(self, forks):
        """Sets the forks of this Gist.


        :param forks: The forks of this Gist.
        :type forks: List[object]
        """

        self._forks = forks

    @property
    def forks_url(self):
        """Gets the forks_url of this Gist.


        :return: The forks_url of this Gist.
        :rtype: str
        """
        return self._forks_url

    @forks_url.setter
    def forks_url(self, forks_url):
        """Sets the forks_url of this Gist.


        :param forks_url: The forks_url of this Gist.
        :type forks_url: str
        """
        if forks_url is None:
            raise ValueError("Invalid value for `forks_url`, must not be `None`")

        self._forks_url = forks_url

    @property
    def git_pull_url(self):
        """Gets the git_pull_url of this Gist.


        :return: The git_pull_url of this Gist.
        :rtype: str
        """
        return self._git_pull_url

    @git_pull_url.setter
    def git_pull_url(self, git_pull_url):
        """Sets the git_pull_url of this Gist.


        :param git_pull_url: The git_pull_url of this Gist.
        :type git_pull_url: str
        """
        if git_pull_url is None:
            raise ValueError("Invalid value for `git_pull_url`, must not be `None`")

        self._git_pull_url = git_pull_url

    @property
    def git_push_url(self):
        """Gets the git_push_url of this Gist.


        :return: The git_push_url of this Gist.
        :rtype: str
        """
        return self._git_push_url

    @git_push_url.setter
    def git_push_url(self, git_push_url):
        """Sets the git_push_url of this Gist.


        :param git_push_url: The git_push_url of this Gist.
        :type git_push_url: str
        """
        if git_push_url is None:
            raise ValueError("Invalid value for `git_push_url`, must not be `None`")

        self._git_push_url = git_push_url

    @property
    def history(self):
        """Gets the history of this Gist.


        :return: The history of this Gist.
        :rtype: List[object]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Gist.


        :param history: The history of this Gist.
        :type history: List[object]
        """

        self._history = history

    @property
    def html_url(self):
        """Gets the html_url of this Gist.


        :return: The html_url of this Gist.
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Gist.


        :param html_url: The html_url of this Gist.
        :type html_url: str
        """
        if html_url is None:
            raise ValueError("Invalid value for `html_url`, must not be `None`")

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Gist.


        :return: The id of this Gist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Gist.


        :param id: The id of this Gist.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this Gist.


        :return: The node_id of this Gist.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Gist.


        :param node_id: The node_id of this Gist.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def owner(self):
        """Gets the owner of this Gist.


        :return: The owner of this Gist.
        :rtype: NullableSimpleUser
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Gist.


        :param owner: The owner of this Gist.
        :type owner: NullableSimpleUser
        """

        self._owner = owner

    @property
    def public(self):
        """Gets the public of this Gist.


        :return: The public of this Gist.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Gist.


        :param public: The public of this Gist.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")

        self._public = public

    @property
    def truncated(self):
        """Gets the truncated of this Gist.


        :return: The truncated of this Gist.
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this Gist.


        :param truncated: The truncated of this Gist.
        :type truncated: bool
        """

        self._truncated = truncated

    @property
    def updated_at(self):
        """Gets the updated_at of this Gist.


        :return: The updated_at of this Gist.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Gist.


        :param updated_at: The updated_at of this Gist.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Gist.


        :return: The url of this Gist.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Gist.


        :param url: The url of this Gist.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this Gist.


        :return: The user of this Gist.
        :rtype: NullableSimpleUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Gist.


        :param user: The user of this Gist.
        :type user: NullableSimpleUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
