# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repository import Repository
from openapi_server import util


class ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repositories: List[Repository]=None, total_count: float=None):
        """ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response - a model defined in OpenAPI

        :param repositories: The repositories of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        :param total_count: The total_count of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        """
        self.openapi_types = {
            'repositories': List[Repository],
            'total_count': float
        }

        self.attribute_map = {
            'repositories': 'repositories',
            'total_count': 'total_count'
        }

        self._repositories = repositories
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_selected_repositories_enabled_github_actions_organization_200_response of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repositories(self):
        """Gets the repositories of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.


        :return: The repositories of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        :rtype: List[Repository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.


        :param repositories: The repositories of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        :type repositories: List[Repository]
        """
        if repositories is None:
            raise ValueError("Invalid value for `repositories`, must not be `None`")

        self._repositories = repositories

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.


        :return: The total_count of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.


        :param total_count: The total_count of this ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response.
        :type total_count: float
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
