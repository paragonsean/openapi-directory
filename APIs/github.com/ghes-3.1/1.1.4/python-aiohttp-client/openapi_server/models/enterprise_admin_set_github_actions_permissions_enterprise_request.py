# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_actions import AllowedActions
from openapi_server.models.enabled_organizations import EnabledOrganizations
from openapi_server import util


class EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_actions: AllowedActions=None, enabled_organizations: EnabledOrganizations=None):
        """EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest - a model defined in OpenAPI

        :param allowed_actions: The allowed_actions of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        :param enabled_organizations: The enabled_organizations of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        """
        self.openapi_types = {
            'allowed_actions': AllowedActions,
            'enabled_organizations': EnabledOrganizations
        }

        self.attribute_map = {
            'allowed_actions': 'allowed_actions',
            'enabled_organizations': 'enabled_organizations'
        }

        self._allowed_actions = allowed_actions
        self._enabled_organizations = enabled_organizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_admin_set_github_actions_permissions_enterprise_request of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.


        :return: The allowed_actions of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        :rtype: AllowedActions
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.


        :param allowed_actions: The allowed_actions of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        :type allowed_actions: AllowedActions
        """

        self._allowed_actions = allowed_actions

    @property
    def enabled_organizations(self):
        """Gets the enabled_organizations of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.


        :return: The enabled_organizations of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        :rtype: EnabledOrganizations
        """
        return self._enabled_organizations

    @enabled_organizations.setter
    def enabled_organizations(self, enabled_organizations):
        """Sets the enabled_organizations of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.


        :param enabled_organizations: The enabled_organizations of this EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest.
        :type enabled_organizations: EnabledOrganizations
        """
        if enabled_organizations is None:
            raise ValueError("Invalid value for `enabled_organizations`, must not be `None`")

        self._enabled_organizations = enabled_organizations
