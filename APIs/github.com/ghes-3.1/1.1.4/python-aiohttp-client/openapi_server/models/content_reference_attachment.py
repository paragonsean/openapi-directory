# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentReferenceAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, id: int=None, node_id: str=None, title: str=None):
        """ContentReferenceAttachment - a model defined in OpenAPI

        :param body: The body of this ContentReferenceAttachment.
        :param id: The id of this ContentReferenceAttachment.
        :param node_id: The node_id of this ContentReferenceAttachment.
        :param title: The title of this ContentReferenceAttachment.
        """
        self.openapi_types = {
            'body': str,
            'id': int,
            'node_id': str,
            'title': str
        }

        self.attribute_map = {
            'body': 'body',
            'id': 'id',
            'node_id': 'node_id',
            'title': 'title'
        }

        self._body = body
        self._id = id
        self._node_id = node_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentReferenceAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The content-reference-attachment of this ContentReferenceAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ContentReferenceAttachment.

        The body of the attachment

        :return: The body of this ContentReferenceAttachment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ContentReferenceAttachment.

        The body of the attachment

        :param body: The body of this ContentReferenceAttachment.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")
        if body is not None and len(body) > 262144:
            raise ValueError("Invalid value for `body`, length must be less than or equal to `262144`")

        self._body = body

    @property
    def id(self):
        """Gets the id of this ContentReferenceAttachment.

        The ID of the attachment

        :return: The id of this ContentReferenceAttachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentReferenceAttachment.

        The ID of the attachment

        :param id: The id of this ContentReferenceAttachment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def node_id(self):
        """Gets the node_id of this ContentReferenceAttachment.

        The node_id of the content attachment

        :return: The node_id of this ContentReferenceAttachment.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ContentReferenceAttachment.

        The node_id of the content attachment

        :param node_id: The node_id of this ContentReferenceAttachment.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def title(self):
        """Gets the title of this ContentReferenceAttachment.

        The title of the attachment

        :return: The title of this ContentReferenceAttachment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContentReferenceAttachment.

        The title of the attachment

        :param title: The title of this ContentReferenceAttachment.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")
        if title is not None and len(title) > 1024:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1024`")

        self._title = title
