# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationActionsSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, name: str=None, selected_repositories_url: str=None, updated_at: datetime=None, visibility: str=None):
        """OrganizationActionsSecret - a model defined in OpenAPI

        :param created_at: The created_at of this OrganizationActionsSecret.
        :param name: The name of this OrganizationActionsSecret.
        :param selected_repositories_url: The selected_repositories_url of this OrganizationActionsSecret.
        :param updated_at: The updated_at of this OrganizationActionsSecret.
        :param visibility: The visibility of this OrganizationActionsSecret.
        """
        self.openapi_types = {
            'created_at': datetime,
            'name': str,
            'selected_repositories_url': str,
            'updated_at': datetime,
            'visibility': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'name': 'name',
            'selected_repositories_url': 'selected_repositories_url',
            'updated_at': 'updated_at',
            'visibility': 'visibility'
        }

        self._created_at = created_at
        self._name = name
        self._selected_repositories_url = selected_repositories_url
        self._updated_at = updated_at
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationActionsSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organization-actions-secret of this OrganizationActionsSecret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this OrganizationActionsSecret.


        :return: The created_at of this OrganizationActionsSecret.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrganizationActionsSecret.


        :param created_at: The created_at of this OrganizationActionsSecret.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def name(self):
        """Gets the name of this OrganizationActionsSecret.

        The name of the secret.

        :return: The name of this OrganizationActionsSecret.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationActionsSecret.

        The name of the secret.

        :param name: The name of this OrganizationActionsSecret.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def selected_repositories_url(self):
        """Gets the selected_repositories_url of this OrganizationActionsSecret.


        :return: The selected_repositories_url of this OrganizationActionsSecret.
        :rtype: str
        """
        return self._selected_repositories_url

    @selected_repositories_url.setter
    def selected_repositories_url(self, selected_repositories_url):
        """Sets the selected_repositories_url of this OrganizationActionsSecret.


        :param selected_repositories_url: The selected_repositories_url of this OrganizationActionsSecret.
        :type selected_repositories_url: str
        """

        self._selected_repositories_url = selected_repositories_url

    @property
    def updated_at(self):
        """Gets the updated_at of this OrganizationActionsSecret.


        :return: The updated_at of this OrganizationActionsSecret.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrganizationActionsSecret.


        :param updated_at: The updated_at of this OrganizationActionsSecret.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def visibility(self):
        """Gets the visibility of this OrganizationActionsSecret.

        Visibility of a secret

        :return: The visibility of this OrganizationActionsSecret.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this OrganizationActionsSecret.

        Visibility of a secret

        :param visibility: The visibility of this OrganizationActionsSecret.
        :type visibility: str
        """
        allowed_values = ["all", "private", "selected"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
