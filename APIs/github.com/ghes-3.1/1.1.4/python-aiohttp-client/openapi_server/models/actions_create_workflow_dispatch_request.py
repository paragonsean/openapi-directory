# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionsCreateWorkflowDispatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inputs: Dict[str, str]=None, ref: str=None):
        """ActionsCreateWorkflowDispatchRequest - a model defined in OpenAPI

        :param inputs: The inputs of this ActionsCreateWorkflowDispatchRequest.
        :param ref: The ref of this ActionsCreateWorkflowDispatchRequest.
        """
        self.openapi_types = {
            'inputs': Dict[str, str],
            'ref': str
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'ref': 'ref'
        }

        self._inputs = inputs
        self._ref = ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsCreateWorkflowDispatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_create_workflow_dispatch_request of this ActionsCreateWorkflowDispatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """Gets the inputs of this ActionsCreateWorkflowDispatchRequest.

        Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.

        :return: The inputs of this ActionsCreateWorkflowDispatchRequest.
        :rtype: Dict[str, str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ActionsCreateWorkflowDispatchRequest.

        Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.

        :param inputs: The inputs of this ActionsCreateWorkflowDispatchRequest.
        :type inputs: Dict[str, str]
        """
        if inputs is not None and len(inputs) > 10:
            raise ValueError("Invalid value for `inputs`, number of items must be less than or equal to `10`")

        self._inputs = inputs

    @property
    def ref(self):
        """Gets the ref of this ActionsCreateWorkflowDispatchRequest.

        The git reference for the workflow. The reference can be a branch or tag name.

        :return: The ref of this ActionsCreateWorkflowDispatchRequest.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this ActionsCreateWorkflowDispatchRequest.

        The git reference for the workflow. The reference can be a branch or tag name.

        :param ref: The ref of this ActionsCreateWorkflowDispatchRequest.
        :type ref: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref
