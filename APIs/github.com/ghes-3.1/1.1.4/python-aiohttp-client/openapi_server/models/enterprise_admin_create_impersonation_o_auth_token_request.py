# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseAdminCreateImpersonationOAuthTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scopes: List[str]=None):
        """EnterpriseAdminCreateImpersonationOAuthTokenRequest - a model defined in OpenAPI

        :param scopes: The scopes of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.
        """
        self.openapi_types = {
            'scopes': List[str]
        }

        self.attribute_map = {
            'scopes': 'scopes'
        }

        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseAdminCreateImpersonationOAuthTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_admin_create_impersonation_o_auth_token_request of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scopes(self):
        """Gets the scopes of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.

        A list of [scopes](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        :return: The scopes of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.

        A list of [scopes](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

        :param scopes: The scopes of this EnterpriseAdminCreateImpersonationOAuthTokenRequest.
        :type scopes: List[str]
        """

        self._scopes = scopes
