# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnterpriseSettingsEnterpriseCollectd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, encryption: str=None, password: str=None, port: int=None, server: str=None, username: str=None):
        """EnterpriseSettingsEnterpriseCollectd - a model defined in OpenAPI

        :param enabled: The enabled of this EnterpriseSettingsEnterpriseCollectd.
        :param encryption: The encryption of this EnterpriseSettingsEnterpriseCollectd.
        :param password: The password of this EnterpriseSettingsEnterpriseCollectd.
        :param port: The port of this EnterpriseSettingsEnterpriseCollectd.
        :param server: The server of this EnterpriseSettingsEnterpriseCollectd.
        :param username: The username of this EnterpriseSettingsEnterpriseCollectd.
        """
        self.openapi_types = {
            'enabled': bool,
            'encryption': str,
            'password': str,
            'port': int,
            'server': str,
            'username': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'encryption': 'encryption',
            'password': 'password',
            'port': 'port',
            'server': 'server',
            'username': 'username'
        }

        self._enabled = enabled
        self._encryption = encryption
        self._password = password
        self._port = port
        self._server = server
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnterpriseSettingsEnterpriseCollectd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The enterprise_settings_enterprise_collectd of this EnterpriseSettingsEnterpriseCollectd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this EnterpriseSettingsEnterpriseCollectd.


        :return: The enabled of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EnterpriseSettingsEnterpriseCollectd.


        :param enabled: The enabled of this EnterpriseSettingsEnterpriseCollectd.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encryption(self):
        """Gets the encryption of this EnterpriseSettingsEnterpriseCollectd.


        :return: The encryption of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this EnterpriseSettingsEnterpriseCollectd.


        :param encryption: The encryption of this EnterpriseSettingsEnterpriseCollectd.
        :type encryption: str
        """

        self._encryption = encryption

    @property
    def password(self):
        """Gets the password of this EnterpriseSettingsEnterpriseCollectd.


        :return: The password of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EnterpriseSettingsEnterpriseCollectd.


        :param password: The password of this EnterpriseSettingsEnterpriseCollectd.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this EnterpriseSettingsEnterpriseCollectd.


        :return: The port of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EnterpriseSettingsEnterpriseCollectd.


        :param port: The port of this EnterpriseSettingsEnterpriseCollectd.
        :type port: int
        """

        self._port = port

    @property
    def server(self):
        """Gets the server of this EnterpriseSettingsEnterpriseCollectd.


        :return: The server of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this EnterpriseSettingsEnterpriseCollectd.


        :param server: The server of this EnterpriseSettingsEnterpriseCollectd.
        :type server: str
        """

        self._server = server

    @property
    def username(self):
        """Gets the username of this EnterpriseSettingsEnterpriseCollectd.


        :return: The username of this EnterpriseSettingsEnterpriseCollectd.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EnterpriseSettingsEnterpriseCollectd.


        :param username: The username of this EnterpriseSettingsEnterpriseCollectd.
        :type username: str
        """

        self._username = username
