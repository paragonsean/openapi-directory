# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow import Workflow
from openapi_server import util


class ActionsListRepoWorkflows200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_count: int=None, workflows: List[Workflow]=None):
        """ActionsListRepoWorkflows200Response - a model defined in OpenAPI

        :param total_count: The total_count of this ActionsListRepoWorkflows200Response.
        :param workflows: The workflows of this ActionsListRepoWorkflows200Response.
        """
        self.openapi_types = {
            'total_count': int,
            'workflows': List[Workflow]
        }

        self.attribute_map = {
            'total_count': 'total_count',
            'workflows': 'workflows'
        }

        self._total_count = total_count
        self._workflows = workflows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsListRepoWorkflows200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_list_repo_workflows_200_response of this ActionsListRepoWorkflows200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_count(self):
        """Gets the total_count of this ActionsListRepoWorkflows200Response.


        :return: The total_count of this ActionsListRepoWorkflows200Response.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActionsListRepoWorkflows200Response.


        :param total_count: The total_count of this ActionsListRepoWorkflows200Response.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    @property
    def workflows(self):
        """Gets the workflows of this ActionsListRepoWorkflows200Response.


        :return: The workflows of this ActionsListRepoWorkflows200Response.
        :rtype: List[Workflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this ActionsListRepoWorkflows200Response.


        :param workflows: The workflows of this ActionsListRepoWorkflows200Response.
        :type workflows: List[Workflow]
        """
        if workflows is None:
            raise ValueError("Invalid value for `workflows`, must not be `None`")

        self._workflows = workflows
