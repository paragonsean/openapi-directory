# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_actions import AllowedActions
from openapi_server.models.enabled_repositories import EnabledRepositories
from openapi_server import util


class ActionsSetGithubActionsPermissionsOrganizationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_actions: AllowedActions=None, enabled_repositories: EnabledRepositories=None):
        """ActionsSetGithubActionsPermissionsOrganizationRequest - a model defined in OpenAPI

        :param allowed_actions: The allowed_actions of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        :param enabled_repositories: The enabled_repositories of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        """
        self.openapi_types = {
            'allowed_actions': AllowedActions,
            'enabled_repositories': EnabledRepositories
        }

        self.attribute_map = {
            'allowed_actions': 'allowed_actions',
            'enabled_repositories': 'enabled_repositories'
        }

        self._allowed_actions = allowed_actions
        self._enabled_repositories = enabled_repositories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsSetGithubActionsPermissionsOrganizationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_set_github_actions_permissions_organization_request of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_actions(self):
        """Gets the allowed_actions of this ActionsSetGithubActionsPermissionsOrganizationRequest.


        :return: The allowed_actions of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        :rtype: AllowedActions
        """
        return self._allowed_actions

    @allowed_actions.setter
    def allowed_actions(self, allowed_actions):
        """Sets the allowed_actions of this ActionsSetGithubActionsPermissionsOrganizationRequest.


        :param allowed_actions: The allowed_actions of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        :type allowed_actions: AllowedActions
        """

        self._allowed_actions = allowed_actions

    @property
    def enabled_repositories(self):
        """Gets the enabled_repositories of this ActionsSetGithubActionsPermissionsOrganizationRequest.


        :return: The enabled_repositories of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        :rtype: EnabledRepositories
        """
        return self._enabled_repositories

    @enabled_repositories.setter
    def enabled_repositories(self, enabled_repositories):
        """Sets the enabled_repositories of this ActionsSetGithubActionsPermissionsOrganizationRequest.


        :param enabled_repositories: The enabled_repositories of this ActionsSetGithubActionsPermissionsOrganizationRequest.
        :type enabled_repositories: EnabledRepositories
        """
        if enabled_repositories is None:
            raise ValueError("Invalid value for `enabled_repositories`, must not be `None`")

        self._enabled_repositories = enabled_repositories
