/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssuesSetLabelsRequestOneOf model module.
 * @module model/IssuesSetLabelsRequestOneOf
 * @version 1.1.4
 */
class IssuesSetLabelsRequestOneOf {
    /**
     * Constructs a new <code>IssuesSetLabelsRequestOneOf</code>.
     * @alias module:model/IssuesSetLabelsRequestOneOf
     */
    constructor() { 
        
        IssuesSetLabelsRequestOneOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssuesSetLabelsRequestOneOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssuesSetLabelsRequestOneOf} obj Optional instance to populate.
     * @return {module:model/IssuesSetLabelsRequestOneOf} The populated <code>IssuesSetLabelsRequestOneOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssuesSetLabelsRequestOneOf();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssuesSetLabelsRequestOneOf</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssuesSetLabelsRequestOneOf</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }

        return true;
    }


}



/**
 * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#add-labels-to-an-issue).\"
 * @member {Array.<String>} labels
 */
IssuesSetLabelsRequestOneOf.prototype['labels'] = undefined;






export default IssuesSetLabelsRequestOneOf;

