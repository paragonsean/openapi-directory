/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';

/**
 * The AutoMerge model module.
 * @module model/AutoMerge
 * @version 1.1.4
 */
class AutoMerge {
    /**
     * Constructs a new <code>AutoMerge</code>.
     * The status of auto merging a pull request.
     * @alias module:model/AutoMerge
     * @param commitMessage {String} Commit message for the merge commit.
     * @param commitTitle {String} Title for the merge commit message.
     * @param enabledBy {module:model/SimpleUser} 
     * @param mergeMethod {module:model/AutoMerge.MergeMethodEnum} The merge method to use.
     */
    constructor(commitMessage, commitTitle, enabledBy, mergeMethod) { 
        
        AutoMerge.initialize(this, commitMessage, commitTitle, enabledBy, mergeMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commitMessage, commitTitle, enabledBy, mergeMethod) { 
        obj['commit_message'] = commitMessage;
        obj['commit_title'] = commitTitle;
        obj['enabled_by'] = enabledBy;
        obj['merge_method'] = mergeMethod;
    }

    /**
     * Constructs a <code>AutoMerge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoMerge} obj Optional instance to populate.
     * @return {module:model/AutoMerge} The populated <code>AutoMerge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoMerge();

            if (data.hasOwnProperty('commit_message')) {
                obj['commit_message'] = ApiClient.convertToType(data['commit_message'], 'String');
            }
            if (data.hasOwnProperty('commit_title')) {
                obj['commit_title'] = ApiClient.convertToType(data['commit_title'], 'String');
            }
            if (data.hasOwnProperty('enabled_by')) {
                obj['enabled_by'] = SimpleUser.constructFromObject(data['enabled_by']);
            }
            if (data.hasOwnProperty('merge_method')) {
                obj['merge_method'] = ApiClient.convertToType(data['merge_method'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoMerge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoMerge</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AutoMerge.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['commit_message'] && !(typeof data['commit_message'] === 'string' || data['commit_message'] instanceof String)) {
            throw new Error("Expected the field `commit_message` to be a primitive type in the JSON string but got " + data['commit_message']);
        }
        // ensure the json data is a string
        if (data['commit_title'] && !(typeof data['commit_title'] === 'string' || data['commit_title'] instanceof String)) {
            throw new Error("Expected the field `commit_title` to be a primitive type in the JSON string but got " + data['commit_title']);
        }
        // validate the optional field `enabled_by`
        if (data['enabled_by']) { // data not null
          SimpleUser.validateJSON(data['enabled_by']);
        }
        // ensure the json data is a string
        if (data['merge_method'] && !(typeof data['merge_method'] === 'string' || data['merge_method'] instanceof String)) {
            throw new Error("Expected the field `merge_method` to be a primitive type in the JSON string but got " + data['merge_method']);
        }

        return true;
    }


}

AutoMerge.RequiredProperties = ["commit_message", "commit_title", "enabled_by", "merge_method"];

/**
 * Commit message for the merge commit.
 * @member {String} commit_message
 */
AutoMerge.prototype['commit_message'] = undefined;

/**
 * Title for the merge commit message.
 * @member {String} commit_title
 */
AutoMerge.prototype['commit_title'] = undefined;

/**
 * @member {module:model/SimpleUser} enabled_by
 */
AutoMerge.prototype['enabled_by'] = undefined;

/**
 * The merge method to use.
 * @member {module:model/AutoMerge.MergeMethodEnum} merge_method
 */
AutoMerge.prototype['merge_method'] = undefined;





/**
 * Allowed values for the <code>merge_method</code> property.
 * @enum {String}
 * @readonly
 */
AutoMerge['MergeMethodEnum'] = {

    /**
     * value: "merge"
     * @const
     */
    "merge": "merge",

    /**
     * value: "squash"
     * @const
     */
    "squash": "squash",

    /**
     * value: "rebase"
     * @const
     */
    "rebase": "rebase"
};



export default AutoMerge;

