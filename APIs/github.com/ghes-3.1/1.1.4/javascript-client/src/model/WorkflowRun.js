/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MinimalRepository from './MinimalRepository';
import NullableSimpleCommit from './NullableSimpleCommit';
import PullRequestMinimal from './PullRequestMinimal';

/**
 * The WorkflowRun model module.
 * @module model/WorkflowRun
 * @version 1.1.4
 */
class WorkflowRun {
    /**
     * Constructs a new <code>WorkflowRun</code>.
     * An invocation of a workflow
     * @alias module:model/WorkflowRun
     * @param artifactsUrl {String} The URL to the artifacts for the workflow run.
     * @param cancelUrl {String} The URL to cancel the workflow run.
     * @param checkSuiteUrl {String} The URL to the associated check suite.
     * @param conclusion {String} 
     * @param createdAt {Date} 
     * @param event {String} 
     * @param headBranch {String} 
     * @param headCommit {module:model/NullableSimpleCommit} 
     * @param headRepository {module:model/MinimalRepository} 
     * @param headSha {String} The SHA of the head commit that points to the version of the workflow being run.
     * @param htmlUrl {String} 
     * @param id {Number} The ID of the workflow run.
     * @param jobsUrl {String} The URL to the jobs for the workflow run.
     * @param logsUrl {String} The URL to download the logs for the workflow run.
     * @param nodeId {String} 
     * @param pullRequests {Array.<module:model/PullRequestMinimal>} 
     * @param repository {module:model/MinimalRepository} 
     * @param rerunUrl {String} The URL to rerun the workflow run.
     * @param runNumber {Number} The auto incrementing run number for the workflow run.
     * @param status {String} 
     * @param updatedAt {Date} 
     * @param url {String} The URL to the workflow run.
     * @param workflowId {Number} The ID of the parent workflow.
     * @param workflowUrl {String} The URL to the workflow.
     */
    constructor(artifactsUrl, cancelUrl, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, nodeId, pullRequests, repository, rerunUrl, runNumber, status, updatedAt, url, workflowId, workflowUrl) { 
        
        WorkflowRun.initialize(this, artifactsUrl, cancelUrl, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, nodeId, pullRequests, repository, rerunUrl, runNumber, status, updatedAt, url, workflowId, workflowUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, artifactsUrl, cancelUrl, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, nodeId, pullRequests, repository, rerunUrl, runNumber, status, updatedAt, url, workflowId, workflowUrl) { 
        obj['artifacts_url'] = artifactsUrl;
        obj['cancel_url'] = cancelUrl;
        obj['check_suite_url'] = checkSuiteUrl;
        obj['conclusion'] = conclusion;
        obj['created_at'] = createdAt;
        obj['event'] = event;
        obj['head_branch'] = headBranch;
        obj['head_commit'] = headCommit;
        obj['head_repository'] = headRepository;
        obj['head_sha'] = headSha;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['jobs_url'] = jobsUrl;
        obj['logs_url'] = logsUrl;
        obj['node_id'] = nodeId;
        obj['pull_requests'] = pullRequests;
        obj['repository'] = repository;
        obj['rerun_url'] = rerunUrl;
        obj['run_number'] = runNumber;
        obj['status'] = status;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['workflow_id'] = workflowId;
        obj['workflow_url'] = workflowUrl;
    }

    /**
     * Constructs a <code>WorkflowRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowRun} obj Optional instance to populate.
     * @return {module:model/WorkflowRun} The populated <code>WorkflowRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowRun();

            if (data.hasOwnProperty('artifacts_url')) {
                obj['artifacts_url'] = ApiClient.convertToType(data['artifacts_url'], 'String');
            }
            if (data.hasOwnProperty('cancel_url')) {
                obj['cancel_url'] = ApiClient.convertToType(data['cancel_url'], 'String');
            }
            if (data.hasOwnProperty('check_suite_id')) {
                obj['check_suite_id'] = ApiClient.convertToType(data['check_suite_id'], 'Number');
            }
            if (data.hasOwnProperty('check_suite_node_id')) {
                obj['check_suite_node_id'] = ApiClient.convertToType(data['check_suite_node_id'], 'String');
            }
            if (data.hasOwnProperty('check_suite_url')) {
                obj['check_suite_url'] = ApiClient.convertToType(data['check_suite_url'], 'String');
            }
            if (data.hasOwnProperty('conclusion')) {
                obj['conclusion'] = ApiClient.convertToType(data['conclusion'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('head_branch')) {
                obj['head_branch'] = ApiClient.convertToType(data['head_branch'], 'String');
            }
            if (data.hasOwnProperty('head_commit')) {
                obj['head_commit'] = NullableSimpleCommit.constructFromObject(data['head_commit']);
            }
            if (data.hasOwnProperty('head_repository')) {
                obj['head_repository'] = MinimalRepository.constructFromObject(data['head_repository']);
            }
            if (data.hasOwnProperty('head_repository_id')) {
                obj['head_repository_id'] = ApiClient.convertToType(data['head_repository_id'], 'Number');
            }
            if (data.hasOwnProperty('head_sha')) {
                obj['head_sha'] = ApiClient.convertToType(data['head_sha'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jobs_url')) {
                obj['jobs_url'] = ApiClient.convertToType(data['jobs_url'], 'String');
            }
            if (data.hasOwnProperty('logs_url')) {
                obj['logs_url'] = ApiClient.convertToType(data['logs_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('pull_requests')) {
                obj['pull_requests'] = ApiClient.convertToType(data['pull_requests'], [PullRequestMinimal]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = MinimalRepository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('rerun_url')) {
                obj['rerun_url'] = ApiClient.convertToType(data['rerun_url'], 'String');
            }
            if (data.hasOwnProperty('run_number')) {
                obj['run_number'] = ApiClient.convertToType(data['run_number'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('workflow_id')) {
                obj['workflow_id'] = ApiClient.convertToType(data['workflow_id'], 'Number');
            }
            if (data.hasOwnProperty('workflow_url')) {
                obj['workflow_url'] = ApiClient.convertToType(data['workflow_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowRun</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowRun.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['artifacts_url'] && !(typeof data['artifacts_url'] === 'string' || data['artifacts_url'] instanceof String)) {
            throw new Error("Expected the field `artifacts_url` to be a primitive type in the JSON string but got " + data['artifacts_url']);
        }
        // ensure the json data is a string
        if (data['cancel_url'] && !(typeof data['cancel_url'] === 'string' || data['cancel_url'] instanceof String)) {
            throw new Error("Expected the field `cancel_url` to be a primitive type in the JSON string but got " + data['cancel_url']);
        }
        // ensure the json data is a string
        if (data['check_suite_node_id'] && !(typeof data['check_suite_node_id'] === 'string' || data['check_suite_node_id'] instanceof String)) {
            throw new Error("Expected the field `check_suite_node_id` to be a primitive type in the JSON string but got " + data['check_suite_node_id']);
        }
        // ensure the json data is a string
        if (data['check_suite_url'] && !(typeof data['check_suite_url'] === 'string' || data['check_suite_url'] instanceof String)) {
            throw new Error("Expected the field `check_suite_url` to be a primitive type in the JSON string but got " + data['check_suite_url']);
        }
        // ensure the json data is a string
        if (data['conclusion'] && !(typeof data['conclusion'] === 'string' || data['conclusion'] instanceof String)) {
            throw new Error("Expected the field `conclusion` to be a primitive type in the JSON string but got " + data['conclusion']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['head_branch'] && !(typeof data['head_branch'] === 'string' || data['head_branch'] instanceof String)) {
            throw new Error("Expected the field `head_branch` to be a primitive type in the JSON string but got " + data['head_branch']);
        }
        // validate the optional field `head_commit`
        if (data['head_commit']) { // data not null
          NullableSimpleCommit.validateJSON(data['head_commit']);
        }
        // validate the optional field `head_repository`
        if (data['head_repository']) { // data not null
          MinimalRepository.validateJSON(data['head_repository']);
        }
        // ensure the json data is a string
        if (data['head_sha'] && !(typeof data['head_sha'] === 'string' || data['head_sha'] instanceof String)) {
            throw new Error("Expected the field `head_sha` to be a primitive type in the JSON string but got " + data['head_sha']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['jobs_url'] && !(typeof data['jobs_url'] === 'string' || data['jobs_url'] instanceof String)) {
            throw new Error("Expected the field `jobs_url` to be a primitive type in the JSON string but got " + data['jobs_url']);
        }
        // ensure the json data is a string
        if (data['logs_url'] && !(typeof data['logs_url'] === 'string' || data['logs_url'] instanceof String)) {
            throw new Error("Expected the field `logs_url` to be a primitive type in the JSON string but got " + data['logs_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        if (data['pull_requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pull_requests'])) {
                throw new Error("Expected the field `pull_requests` to be an array in the JSON data but got " + data['pull_requests']);
            }
            // validate the optional field `pull_requests` (array)
            for (const item of data['pull_requests']) {
                PullRequestMinimal.validateJSON(item);
            };
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          MinimalRepository.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['rerun_url'] && !(typeof data['rerun_url'] === 'string' || data['rerun_url'] instanceof String)) {
            throw new Error("Expected the field `rerun_url` to be a primitive type in the JSON string but got " + data['rerun_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['workflow_url'] && !(typeof data['workflow_url'] === 'string' || data['workflow_url'] instanceof String)) {
            throw new Error("Expected the field `workflow_url` to be a primitive type in the JSON string but got " + data['workflow_url']);
        }

        return true;
    }


}

WorkflowRun.RequiredProperties = ["artifacts_url", "cancel_url", "check_suite_url", "conclusion", "created_at", "event", "head_branch", "head_commit", "head_repository", "head_sha", "html_url", "id", "jobs_url", "logs_url", "node_id", "pull_requests", "repository", "rerun_url", "run_number", "status", "updated_at", "url", "workflow_id", "workflow_url"];

/**
 * The URL to the artifacts for the workflow run.
 * @member {String} artifacts_url
 */
WorkflowRun.prototype['artifacts_url'] = undefined;

/**
 * The URL to cancel the workflow run.
 * @member {String} cancel_url
 */
WorkflowRun.prototype['cancel_url'] = undefined;

/**
 * The ID of the associated check suite.
 * @member {Number} check_suite_id
 */
WorkflowRun.prototype['check_suite_id'] = undefined;

/**
 * The node ID of the associated check suite.
 * @member {String} check_suite_node_id
 */
WorkflowRun.prototype['check_suite_node_id'] = undefined;

/**
 * The URL to the associated check suite.
 * @member {String} check_suite_url
 */
WorkflowRun.prototype['check_suite_url'] = undefined;

/**
 * @member {String} conclusion
 */
WorkflowRun.prototype['conclusion'] = undefined;

/**
 * @member {Date} created_at
 */
WorkflowRun.prototype['created_at'] = undefined;

/**
 * @member {String} event
 */
WorkflowRun.prototype['event'] = undefined;

/**
 * @member {String} head_branch
 */
WorkflowRun.prototype['head_branch'] = undefined;

/**
 * @member {module:model/NullableSimpleCommit} head_commit
 */
WorkflowRun.prototype['head_commit'] = undefined;

/**
 * @member {module:model/MinimalRepository} head_repository
 */
WorkflowRun.prototype['head_repository'] = undefined;

/**
 * @member {Number} head_repository_id
 */
WorkflowRun.prototype['head_repository_id'] = undefined;

/**
 * The SHA of the head commit that points to the version of the workflow being run.
 * @member {String} head_sha
 */
WorkflowRun.prototype['head_sha'] = undefined;

/**
 * @member {String} html_url
 */
WorkflowRun.prototype['html_url'] = undefined;

/**
 * The ID of the workflow run.
 * @member {Number} id
 */
WorkflowRun.prototype['id'] = undefined;

/**
 * The URL to the jobs for the workflow run.
 * @member {String} jobs_url
 */
WorkflowRun.prototype['jobs_url'] = undefined;

/**
 * The URL to download the logs for the workflow run.
 * @member {String} logs_url
 */
WorkflowRun.prototype['logs_url'] = undefined;

/**
 * The name of the workflow run.
 * @member {String} name
 */
WorkflowRun.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
WorkflowRun.prototype['node_id'] = undefined;

/**
 * @member {Array.<module:model/PullRequestMinimal>} pull_requests
 */
WorkflowRun.prototype['pull_requests'] = undefined;

/**
 * @member {module:model/MinimalRepository} repository
 */
WorkflowRun.prototype['repository'] = undefined;

/**
 * The URL to rerun the workflow run.
 * @member {String} rerun_url
 */
WorkflowRun.prototype['rerun_url'] = undefined;

/**
 * The auto incrementing run number for the workflow run.
 * @member {Number} run_number
 */
WorkflowRun.prototype['run_number'] = undefined;

/**
 * @member {String} status
 */
WorkflowRun.prototype['status'] = undefined;

/**
 * @member {Date} updated_at
 */
WorkflowRun.prototype['updated_at'] = undefined;

/**
 * The URL to the workflow run.
 * @member {String} url
 */
WorkflowRun.prototype['url'] = undefined;

/**
 * The ID of the parent workflow.
 * @member {Number} workflow_id
 */
WorkflowRun.prototype['workflow_id'] = undefined;

/**
 * The URL to the workflow.
 * @member {String} workflow_url
 */
WorkflowRun.prototype['workflow_url'] = undefined;






export default WorkflowRun;

