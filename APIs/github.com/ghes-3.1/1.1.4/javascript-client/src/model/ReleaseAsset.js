/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableSimpleUser from './NullableSimpleUser';

/**
 * The ReleaseAsset model module.
 * @module model/ReleaseAsset
 * @version 1.1.4
 */
class ReleaseAsset {
    /**
     * Constructs a new <code>ReleaseAsset</code>.
     * Data related to a release.
     * @alias module:model/ReleaseAsset
     * @param browserDownloadUrl {String} 
     * @param contentType {String} 
     * @param createdAt {Date} 
     * @param downloadCount {Number} 
     * @param id {Number} 
     * @param label {String} 
     * @param name {String} The file name of the asset.
     * @param nodeId {String} 
     * @param size {Number} 
     * @param state {module:model/ReleaseAsset.StateEnum} State of the release asset.
     * @param updatedAt {Date} 
     * @param uploader {module:model/NullableSimpleUser} 
     * @param url {String} 
     */
    constructor(browserDownloadUrl, contentType, createdAt, downloadCount, id, label, name, nodeId, size, state, updatedAt, uploader, url) { 
        
        ReleaseAsset.initialize(this, browserDownloadUrl, contentType, createdAt, downloadCount, id, label, name, nodeId, size, state, updatedAt, uploader, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, browserDownloadUrl, contentType, createdAt, downloadCount, id, label, name, nodeId, size, state, updatedAt, uploader, url) { 
        obj['browser_download_url'] = browserDownloadUrl;
        obj['content_type'] = contentType;
        obj['created_at'] = createdAt;
        obj['download_count'] = downloadCount;
        obj['id'] = id;
        obj['label'] = label;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['size'] = size;
        obj['state'] = state;
        obj['updated_at'] = updatedAt;
        obj['uploader'] = uploader;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ReleaseAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReleaseAsset} obj Optional instance to populate.
     * @return {module:model/ReleaseAsset} The populated <code>ReleaseAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReleaseAsset();

            if (data.hasOwnProperty('browser_download_url')) {
                obj['browser_download_url'] = ApiClient.convertToType(data['browser_download_url'], 'String');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('download_count')) {
                obj['download_count'] = ApiClient.convertToType(data['download_count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('uploader')) {
                obj['uploader'] = NullableSimpleUser.constructFromObject(data['uploader']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReleaseAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReleaseAsset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReleaseAsset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['browser_download_url'] && !(typeof data['browser_download_url'] === 'string' || data['browser_download_url'] instanceof String)) {
            throw new Error("Expected the field `browser_download_url` to be a primitive type in the JSON string but got " + data['browser_download_url']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `uploader`
        if (data['uploader']) { // data not null
          NullableSimpleUser.validateJSON(data['uploader']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ReleaseAsset.RequiredProperties = ["browser_download_url", "content_type", "created_at", "download_count", "id", "label", "name", "node_id", "size", "state", "updated_at", "uploader", "url"];

/**
 * @member {String} browser_download_url
 */
ReleaseAsset.prototype['browser_download_url'] = undefined;

/**
 * @member {String} content_type
 */
ReleaseAsset.prototype['content_type'] = undefined;

/**
 * @member {Date} created_at
 */
ReleaseAsset.prototype['created_at'] = undefined;

/**
 * @member {Number} download_count
 */
ReleaseAsset.prototype['download_count'] = undefined;

/**
 * @member {Number} id
 */
ReleaseAsset.prototype['id'] = undefined;

/**
 * @member {String} label
 */
ReleaseAsset.prototype['label'] = undefined;

/**
 * The file name of the asset.
 * @member {String} name
 */
ReleaseAsset.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
ReleaseAsset.prototype['node_id'] = undefined;

/**
 * @member {Number} size
 */
ReleaseAsset.prototype['size'] = undefined;

/**
 * State of the release asset.
 * @member {module:model/ReleaseAsset.StateEnum} state
 */
ReleaseAsset.prototype['state'] = undefined;

/**
 * @member {Date} updated_at
 */
ReleaseAsset.prototype['updated_at'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} uploader
 */
ReleaseAsset.prototype['uploader'] = undefined;

/**
 * @member {String} url
 */
ReleaseAsset.prototype['url'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ReleaseAsset['StateEnum'] = {

    /**
     * value: "uploaded"
     * @const
     */
    "uploaded": "uploaded",

    /**
     * value: "open"
     * @const
     */
    "open": "open"
};



export default ReleaseAsset;

