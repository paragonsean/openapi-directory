/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleCommitStatus model module.
 * @module model/SimpleCommitStatus
 * @version 1.1.4
 */
class SimpleCommitStatus {
    /**
     * Constructs a new <code>SimpleCommitStatus</code>.
     * @alias module:model/SimpleCommitStatus
     * @param avatarUrl {String} 
     * @param context {String} 
     * @param createdAt {Date} 
     * @param description {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param state {String} 
     * @param targetUrl {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     */
    constructor(avatarUrl, context, createdAt, description, id, nodeId, state, targetUrl, updatedAt, url) { 
        
        SimpleCommitStatus.initialize(this, avatarUrl, context, createdAt, description, id, nodeId, state, targetUrl, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, avatarUrl, context, createdAt, description, id, nodeId, state, targetUrl, updatedAt, url) { 
        obj['avatar_url'] = avatarUrl;
        obj['context'] = context;
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['state'] = state;
        obj['target_url'] = targetUrl;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>SimpleCommitStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleCommitStatus} obj Optional instance to populate.
     * @return {module:model/SimpleCommitStatus} The populated <code>SimpleCommitStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleCommitStatus();

            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target_url')) {
                obj['target_url'] = ApiClient.convertToType(data['target_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleCommitStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleCommitStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleCommitStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['target_url'] && !(typeof data['target_url'] === 'string' || data['target_url'] instanceof String)) {
            throw new Error("Expected the field `target_url` to be a primitive type in the JSON string but got " + data['target_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

SimpleCommitStatus.RequiredProperties = ["avatar_url", "context", "created_at", "description", "id", "node_id", "state", "target_url", "updated_at", "url"];

/**
 * @member {String} avatar_url
 */
SimpleCommitStatus.prototype['avatar_url'] = undefined;

/**
 * @member {String} context
 */
SimpleCommitStatus.prototype['context'] = undefined;

/**
 * @member {Date} created_at
 */
SimpleCommitStatus.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
SimpleCommitStatus.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
SimpleCommitStatus.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
SimpleCommitStatus.prototype['node_id'] = undefined;

/**
 * @member {Boolean} required
 */
SimpleCommitStatus.prototype['required'] = undefined;

/**
 * @member {String} state
 */
SimpleCommitStatus.prototype['state'] = undefined;

/**
 * @member {String} target_url
 */
SimpleCommitStatus.prototype['target_url'] = undefined;

/**
 * @member {Date} updated_at
 */
SimpleCommitStatus.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
SimpleCommitStatus.prototype['url'] = undefined;






export default SimpleCommitStatus;

