/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Verification model module.
 * @module model/Verification
 * @version 1.1.4
 */
class Verification {
    /**
     * Constructs a new <code>Verification</code>.
     * @alias module:model/Verification
     * @param payload {String} 
     * @param reason {String} 
     * @param signature {String} 
     * @param verified {Boolean} 
     */
    constructor(payload, reason, signature, verified) { 
        
        Verification.initialize(this, payload, reason, signature, verified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, payload, reason, signature, verified) { 
        obj['payload'] = payload;
        obj['reason'] = reason;
        obj['signature'] = signature;
        obj['verified'] = verified;
    }

    /**
     * Constructs a <code>Verification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Verification} obj Optional instance to populate.
     * @return {module:model/Verification} The populated <code>Verification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Verification();

            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Verification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Verification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Verification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['payload'] && !(typeof data['payload'] === 'string' || data['payload'] instanceof String)) {
            throw new Error("Expected the field `payload` to be a primitive type in the JSON string but got " + data['payload']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

Verification.RequiredProperties = ["payload", "reason", "signature", "verified"];

/**
 * @member {String} payload
 */
Verification.prototype['payload'] = undefined;

/**
 * @member {String} reason
 */
Verification.prototype['reason'] = undefined;

/**
 * @member {String} signature
 */
Verification.prototype['signature'] = undefined;

/**
 * @member {Boolean} verified
 */
Verification.prototype['verified'] = undefined;






export default Verification;

