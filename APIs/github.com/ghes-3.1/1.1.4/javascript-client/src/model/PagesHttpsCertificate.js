/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PagesHttpsCertificate model module.
 * @module model/PagesHttpsCertificate
 * @version 1.1.4
 */
class PagesHttpsCertificate {
    /**
     * Constructs a new <code>PagesHttpsCertificate</code>.
     * @alias module:model/PagesHttpsCertificate
     * @param description {String} 
     * @param domains {Array.<String>} Array of the domain set and its alternate name (if it is configured)
     * @param state {module:model/PagesHttpsCertificate.StateEnum} 
     */
    constructor(description, domains, state) { 
        
        PagesHttpsCertificate.initialize(this, description, domains, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, domains, state) { 
        obj['description'] = description;
        obj['domains'] = domains;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>PagesHttpsCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PagesHttpsCertificate} obj Optional instance to populate.
     * @return {module:model/PagesHttpsCertificate} The populated <code>PagesHttpsCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PagesHttpsCertificate();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PagesHttpsCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PagesHttpsCertificate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PagesHttpsCertificate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

PagesHttpsCertificate.RequiredProperties = ["description", "domains", "state"];

/**
 * @member {String} description
 */
PagesHttpsCertificate.prototype['description'] = undefined;

/**
 * Array of the domain set and its alternate name (if it is configured)
 * @member {Array.<String>} domains
 */
PagesHttpsCertificate.prototype['domains'] = undefined;

/**
 * @member {Date} expires_at
 */
PagesHttpsCertificate.prototype['expires_at'] = undefined;

/**
 * @member {module:model/PagesHttpsCertificate.StateEnum} state
 */
PagesHttpsCertificate.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PagesHttpsCertificate['StateEnum'] = {

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "authorization_created"
     * @const
     */
    "authorization_created": "authorization_created",

    /**
     * value: "authorization_pending"
     * @const
     */
    "authorization_pending": "authorization_pending",

    /**
     * value: "authorized"
     * @const
     */
    "authorized": "authorized",

    /**
     * value: "authorization_revoked"
     * @const
     */
    "authorization_revoked": "authorization_revoked",

    /**
     * value: "issued"
     * @const
     */
    "issued": "issued",

    /**
     * value: "uploaded"
     * @const
     */
    "uploaded": "uploaded",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "errored"
     * @const
     */
    "errored": "errored",

    /**
     * value: "bad_authz"
     * @const
     */
    "bad_authz": "bad_authz",

    /**
     * value: "destroy_pending"
     * @const
     */
    "destroy_pending": "destroy_pending",

    /**
     * value: "dns_changed"
     * @const
     */
    "dns_changed": "dns_changed"
};



export default PagesHttpsCertificate;

