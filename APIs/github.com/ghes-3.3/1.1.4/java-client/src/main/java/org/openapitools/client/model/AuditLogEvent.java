/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuditLogEventActorLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuditLogEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditLogEvent {
  public static final String SERIALIZED_NAME_AT_TIMESTAMP = "@timestamp";
  @SerializedName(SERIALIZED_NAME_AT_TIMESTAMP)
  private Integer atTimestamp;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "_document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ACTIVE_WAS = "active_was";
  @SerializedName(SERIALIZED_NAME_ACTIVE_WAS)
  private Boolean activeWas;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private String actor;

  public static final String SERIALIZED_NAME_ACTOR_ID = "actor_id";
  @SerializedName(SERIALIZED_NAME_ACTOR_ID)
  private Integer actorId;

  public static final String SERIALIZED_NAME_ACTOR_LOCATION = "actor_location";
  @SerializedName(SERIALIZED_NAME_ACTOR_LOCATION)
  private AuditLogEventActorLocation actorLocation;

  public static final String SERIALIZED_NAME_BLOCKED_USER = "blocked_user";
  @SerializedName(SERIALIZED_NAME_BLOCKED_USER)
  private String blockedUser;

  public static final String SERIALIZED_NAME_BUSINESS = "business";
  @SerializedName(SERIALIZED_NAME_BUSINESS)
  private String business;

  public static final String SERIALIZED_NAME_BUSINESS_ID = "business_id";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ID)
  private Integer businessId;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private List<Object> config = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG_WAS = "config_was";
  @SerializedName(SERIALIZED_NAME_CONFIG_WAS)
  private List<Object> configWas = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, Object> data = new HashMap<>();

  public static final String SERIALIZED_NAME_DEPLOY_KEY_FINGERPRINT = "deploy_key_fingerprint";
  @SerializedName(SERIALIZED_NAME_DEPLOY_KEY_FINGERPRINT)
  private String deployKeyFingerprint;

  public static final String SERIALIZED_NAME_EMOJI = "emoji";
  @SerializedName(SERIALIZED_NAME_EMOJI)
  private String emoji;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Object> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS_WERE = "events_were";
  @SerializedName(SERIALIZED_NAME_EVENTS_WERE)
  private List<Object> eventsWere = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_HOOK_ID = "hook_id";
  @SerializedName(SERIALIZED_NAME_HOOK_ID)
  private Integer hookId;

  public static final String SERIALIZED_NAME_LIMITED_AVAILABILITY = "limited_availability";
  @SerializedName(SERIALIZED_NAME_LIMITED_AVAILABILITY)
  private Boolean limitedAvailability;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OLD_USER = "old_user";
  @SerializedName(SERIALIZED_NAME_OLD_USER)
  private String oldUser;

  public static final String SERIALIZED_NAME_OPENSSH_PUBLIC_KEY = "openssh_public_key";
  @SerializedName(SERIALIZED_NAME_OPENSSH_PUBLIC_KEY)
  private String opensshPublicKey;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operation_type";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private String operationType;

  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private String org;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private Integer orgId;

  public static final String SERIALIZED_NAME_PREVIOUS_VISIBILITY = "previous_visibility";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_VISIBILITY)
  private String previousVisibility;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_REPO = "repo";
  @SerializedName(SERIALIZED_NAME_REPO)
  private String repo;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_REPOSITORY_PUBLIC = "repository_public";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_PUBLIC)
  private Boolean repositoryPublic;

  public static final String SERIALIZED_NAME_TARGET_LOGIN = "target_login";
  @SerializedName(SERIALIZED_NAME_TARGET_LOGIN)
  private String targetLogin;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TRANSPORT_PROTOCOL = "transport_protocol";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_PROTOCOL)
  private Integer transportProtocol;

  public static final String SERIALIZED_NAME_TRANSPORT_PROTOCOL_NAME = "transport_protocol_name";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_PROTOCOL_NAME)
  private String transportProtocolName;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public AuditLogEvent() {
  }

  public AuditLogEvent atTimestamp(Integer atTimestamp) {
    this.atTimestamp = atTimestamp;
    return this;
  }

  /**
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * @return atTimestamp
   */
  @javax.annotation.Nullable
  public Integer getAtTimestamp() {
    return atTimestamp;
  }

  public void setAtTimestamp(Integer atTimestamp) {
    this.atTimestamp = atTimestamp;
  }


  public AuditLogEvent documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * A unique identifier for an audit event.
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public AuditLogEvent action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The name of the action that was performed, for example &#x60;user.login&#x60; or &#x60;repo.create&#x60;.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public AuditLogEvent active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public AuditLogEvent activeWas(Boolean activeWas) {
    this.activeWas = activeWas;
    return this;
  }

  /**
   * Get activeWas
   * @return activeWas
   */
  @javax.annotation.Nullable
  public Boolean getActiveWas() {
    return activeWas;
  }

  public void setActiveWas(Boolean activeWas) {
    this.activeWas = activeWas;
  }


  public AuditLogEvent actor(String actor) {
    this.actor = actor;
    return this;
  }

  /**
   * The actor who performed the action.
   * @return actor
   */
  @javax.annotation.Nullable
  public String getActor() {
    return actor;
  }

  public void setActor(String actor) {
    this.actor = actor;
  }


  public AuditLogEvent actorId(Integer actorId) {
    this.actorId = actorId;
    return this;
  }

  /**
   * The id of the actor who performed the action.
   * @return actorId
   */
  @javax.annotation.Nullable
  public Integer getActorId() {
    return actorId;
  }

  public void setActorId(Integer actorId) {
    this.actorId = actorId;
  }


  public AuditLogEvent actorLocation(AuditLogEventActorLocation actorLocation) {
    this.actorLocation = actorLocation;
    return this;
  }

  /**
   * Get actorLocation
   * @return actorLocation
   */
  @javax.annotation.Nullable
  public AuditLogEventActorLocation getActorLocation() {
    return actorLocation;
  }

  public void setActorLocation(AuditLogEventActorLocation actorLocation) {
    this.actorLocation = actorLocation;
  }


  public AuditLogEvent blockedUser(String blockedUser) {
    this.blockedUser = blockedUser;
    return this;
  }

  /**
   * The username of the account being blocked.
   * @return blockedUser
   */
  @javax.annotation.Nullable
  public String getBlockedUser() {
    return blockedUser;
  }

  public void setBlockedUser(String blockedUser) {
    this.blockedUser = blockedUser;
  }


  public AuditLogEvent business(String business) {
    this.business = business;
    return this;
  }

  /**
   * Get business
   * @return business
   */
  @javax.annotation.Nullable
  public String getBusiness() {
    return business;
  }

  public void setBusiness(String business) {
    this.business = business;
  }


  public AuditLogEvent businessId(Integer businessId) {
    this.businessId = businessId;
    return this;
  }

  /**
   * Get businessId
   * @return businessId
   */
  @javax.annotation.Nullable
  public Integer getBusinessId() {
    return businessId;
  }

  public void setBusinessId(Integer businessId) {
    this.businessId = businessId;
  }


  public AuditLogEvent config(List<Object> config) {
    this.config = config;
    return this;
  }

  public AuditLogEvent addConfigItem(Object configItem) {
    if (this.config == null) {
      this.config = new ArrayList<>();
    }
    this.config.add(configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public List<Object> getConfig() {
    return config;
  }

  public void setConfig(List<Object> config) {
    this.config = config;
  }


  public AuditLogEvent configWas(List<Object> configWas) {
    this.configWas = configWas;
    return this;
  }

  public AuditLogEvent addConfigWasItem(Object configWasItem) {
    if (this.configWas == null) {
      this.configWas = new ArrayList<>();
    }
    this.configWas.add(configWasItem);
    return this;
  }

  /**
   * Get configWas
   * @return configWas
   */
  @javax.annotation.Nullable
  public List<Object> getConfigWas() {
    return configWas;
  }

  public void setConfigWas(List<Object> configWas) {
    this.configWas = configWas;
  }


  public AuditLogEvent contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public AuditLogEvent createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public AuditLogEvent data(Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public AuditLogEvent putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, Object> getData() {
    return data;
  }

  public void setData(Map<String, Object> data) {
    this.data = data;
  }


  public AuditLogEvent deployKeyFingerprint(String deployKeyFingerprint) {
    this.deployKeyFingerprint = deployKeyFingerprint;
    return this;
  }

  /**
   * Get deployKeyFingerprint
   * @return deployKeyFingerprint
   */
  @javax.annotation.Nullable
  public String getDeployKeyFingerprint() {
    return deployKeyFingerprint;
  }

  public void setDeployKeyFingerprint(String deployKeyFingerprint) {
    this.deployKeyFingerprint = deployKeyFingerprint;
  }


  public AuditLogEvent emoji(String emoji) {
    this.emoji = emoji;
    return this;
  }

  /**
   * Get emoji
   * @return emoji
   */
  @javax.annotation.Nullable
  public String getEmoji() {
    return emoji;
  }

  public void setEmoji(String emoji) {
    this.emoji = emoji;
  }


  public AuditLogEvent events(List<Object> events) {
    this.events = events;
    return this;
  }

  public AuditLogEvent addEventsItem(Object eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<Object> getEvents() {
    return events;
  }

  public void setEvents(List<Object> events) {
    this.events = events;
  }


  public AuditLogEvent eventsWere(List<Object> eventsWere) {
    this.eventsWere = eventsWere;
    return this;
  }

  public AuditLogEvent addEventsWereItem(Object eventsWereItem) {
    if (this.eventsWere == null) {
      this.eventsWere = new ArrayList<>();
    }
    this.eventsWere.add(eventsWereItem);
    return this;
  }

  /**
   * Get eventsWere
   * @return eventsWere
   */
  @javax.annotation.Nullable
  public List<Object> getEventsWere() {
    return eventsWere;
  }

  public void setEventsWere(List<Object> eventsWere) {
    this.eventsWere = eventsWere;
  }


  public AuditLogEvent explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Get explanation
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public AuditLogEvent fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Get fingerprint
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public AuditLogEvent hookId(Integer hookId) {
    this.hookId = hookId;
    return this;
  }

  /**
   * Get hookId
   * @return hookId
   */
  @javax.annotation.Nullable
  public Integer getHookId() {
    return hookId;
  }

  public void setHookId(Integer hookId) {
    this.hookId = hookId;
  }


  public AuditLogEvent limitedAvailability(Boolean limitedAvailability) {
    this.limitedAvailability = limitedAvailability;
    return this;
  }

  /**
   * Get limitedAvailability
   * @return limitedAvailability
   */
  @javax.annotation.Nullable
  public Boolean getLimitedAvailability() {
    return limitedAvailability;
  }

  public void setLimitedAvailability(Boolean limitedAvailability) {
    this.limitedAvailability = limitedAvailability;
  }


  public AuditLogEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public AuditLogEvent name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuditLogEvent oldUser(String oldUser) {
    this.oldUser = oldUser;
    return this;
  }

  /**
   * Get oldUser
   * @return oldUser
   */
  @javax.annotation.Nullable
  public String getOldUser() {
    return oldUser;
  }

  public void setOldUser(String oldUser) {
    this.oldUser = oldUser;
  }


  public AuditLogEvent opensshPublicKey(String opensshPublicKey) {
    this.opensshPublicKey = opensshPublicKey;
    return this;
  }

  /**
   * Get opensshPublicKey
   * @return opensshPublicKey
   */
  @javax.annotation.Nullable
  public String getOpensshPublicKey() {
    return opensshPublicKey;
  }

  public void setOpensshPublicKey(String opensshPublicKey) {
    this.opensshPublicKey = opensshPublicKey;
  }


  public AuditLogEvent operationType(String operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Get operationType
   * @return operationType
   */
  @javax.annotation.Nullable
  public String getOperationType() {
    return operationType;
  }

  public void setOperationType(String operationType) {
    this.operationType = operationType;
  }


  public AuditLogEvent org(String org) {
    this.org = org;
    return this;
  }

  /**
   * Get org
   * @return org
   */
  @javax.annotation.Nullable
  public String getOrg() {
    return org;
  }

  public void setOrg(String org) {
    this.org = org;
  }


  public AuditLogEvent orgId(Integer orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Get orgId
   * @return orgId
   */
  @javax.annotation.Nullable
  public Integer getOrgId() {
    return orgId;
  }

  public void setOrgId(Integer orgId) {
    this.orgId = orgId;
  }


  public AuditLogEvent previousVisibility(String previousVisibility) {
    this.previousVisibility = previousVisibility;
    return this;
  }

  /**
   * Get previousVisibility
   * @return previousVisibility
   */
  @javax.annotation.Nullable
  public String getPreviousVisibility() {
    return previousVisibility;
  }

  public void setPreviousVisibility(String previousVisibility) {
    this.previousVisibility = previousVisibility;
  }


  public AuditLogEvent readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public AuditLogEvent repo(String repo) {
    this.repo = repo;
    return this;
  }

  /**
   * The name of the repository.
   * @return repo
   */
  @javax.annotation.Nullable
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }


  public AuditLogEvent repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * The name of the repository.
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public AuditLogEvent repositoryPublic(Boolean repositoryPublic) {
    this.repositoryPublic = repositoryPublic;
    return this;
  }

  /**
   * Get repositoryPublic
   * @return repositoryPublic
   */
  @javax.annotation.Nullable
  public Boolean getRepositoryPublic() {
    return repositoryPublic;
  }

  public void setRepositoryPublic(Boolean repositoryPublic) {
    this.repositoryPublic = repositoryPublic;
  }


  public AuditLogEvent targetLogin(String targetLogin) {
    this.targetLogin = targetLogin;
    return this;
  }

  /**
   * Get targetLogin
   * @return targetLogin
   */
  @javax.annotation.Nullable
  public String getTargetLogin() {
    return targetLogin;
  }

  public void setTargetLogin(String targetLogin) {
    this.targetLogin = targetLogin;
  }


  public AuditLogEvent team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public AuditLogEvent transportProtocol(Integer transportProtocol) {
    this.transportProtocol = transportProtocol;
    return this;
  }

  /**
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   * @return transportProtocol
   */
  @javax.annotation.Nullable
  public Integer getTransportProtocol() {
    return transportProtocol;
  }

  public void setTransportProtocol(Integer transportProtocol) {
    this.transportProtocol = transportProtocol;
  }


  public AuditLogEvent transportProtocolName(String transportProtocolName) {
    this.transportProtocolName = transportProtocolName;
    return this;
  }

  /**
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   * @return transportProtocolName
   */
  @javax.annotation.Nullable
  public String getTransportProtocolName() {
    return transportProtocolName;
  }

  public void setTransportProtocolName(String transportProtocolName) {
    this.transportProtocolName = transportProtocolName;
  }


  public AuditLogEvent user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The user that was affected by the action performed (if available).
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public AuditLogEvent userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public AuditLogEvent visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The repository visibility, for example &#x60;public&#x60; or &#x60;private&#x60;.
   * @return visibility
   */
  @javax.annotation.Nullable
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLogEvent auditLogEvent = (AuditLogEvent) o;
    return Objects.equals(this.atTimestamp, auditLogEvent.atTimestamp) &&
        Objects.equals(this.documentId, auditLogEvent.documentId) &&
        Objects.equals(this.action, auditLogEvent.action) &&
        Objects.equals(this.active, auditLogEvent.active) &&
        Objects.equals(this.activeWas, auditLogEvent.activeWas) &&
        Objects.equals(this.actor, auditLogEvent.actor) &&
        Objects.equals(this.actorId, auditLogEvent.actorId) &&
        Objects.equals(this.actorLocation, auditLogEvent.actorLocation) &&
        Objects.equals(this.blockedUser, auditLogEvent.blockedUser) &&
        Objects.equals(this.business, auditLogEvent.business) &&
        Objects.equals(this.businessId, auditLogEvent.businessId) &&
        Objects.equals(this.config, auditLogEvent.config) &&
        Objects.equals(this.configWas, auditLogEvent.configWas) &&
        Objects.equals(this.contentType, auditLogEvent.contentType) &&
        Objects.equals(this.createdAt, auditLogEvent.createdAt) &&
        Objects.equals(this.data, auditLogEvent.data) &&
        Objects.equals(this.deployKeyFingerprint, auditLogEvent.deployKeyFingerprint) &&
        Objects.equals(this.emoji, auditLogEvent.emoji) &&
        Objects.equals(this.events, auditLogEvent.events) &&
        Objects.equals(this.eventsWere, auditLogEvent.eventsWere) &&
        Objects.equals(this.explanation, auditLogEvent.explanation) &&
        Objects.equals(this.fingerprint, auditLogEvent.fingerprint) &&
        Objects.equals(this.hookId, auditLogEvent.hookId) &&
        Objects.equals(this.limitedAvailability, auditLogEvent.limitedAvailability) &&
        Objects.equals(this.message, auditLogEvent.message) &&
        Objects.equals(this.name, auditLogEvent.name) &&
        Objects.equals(this.oldUser, auditLogEvent.oldUser) &&
        Objects.equals(this.opensshPublicKey, auditLogEvent.opensshPublicKey) &&
        Objects.equals(this.operationType, auditLogEvent.operationType) &&
        Objects.equals(this.org, auditLogEvent.org) &&
        Objects.equals(this.orgId, auditLogEvent.orgId) &&
        Objects.equals(this.previousVisibility, auditLogEvent.previousVisibility) &&
        Objects.equals(this.readOnly, auditLogEvent.readOnly) &&
        Objects.equals(this.repo, auditLogEvent.repo) &&
        Objects.equals(this.repository, auditLogEvent.repository) &&
        Objects.equals(this.repositoryPublic, auditLogEvent.repositoryPublic) &&
        Objects.equals(this.targetLogin, auditLogEvent.targetLogin) &&
        Objects.equals(this.team, auditLogEvent.team) &&
        Objects.equals(this.transportProtocol, auditLogEvent.transportProtocol) &&
        Objects.equals(this.transportProtocolName, auditLogEvent.transportProtocolName) &&
        Objects.equals(this.user, auditLogEvent.user) &&
        Objects.equals(this.userId, auditLogEvent.userId) &&
        Objects.equals(this.visibility, auditLogEvent.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atTimestamp, documentId, action, active, activeWas, actor, actorId, actorLocation, blockedUser, business, businessId, config, configWas, contentType, createdAt, data, deployKeyFingerprint, emoji, events, eventsWere, explanation, fingerprint, hookId, limitedAvailability, message, name, oldUser, opensshPublicKey, operationType, org, orgId, previousVisibility, readOnly, repo, repository, repositoryPublic, targetLogin, team, transportProtocol, transportProtocolName, user, userId, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLogEvent {\n");
    sb.append("    atTimestamp: ").append(toIndentedString(atTimestamp)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    activeWas: ").append(toIndentedString(activeWas)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    actorId: ").append(toIndentedString(actorId)).append("\n");
    sb.append("    actorLocation: ").append(toIndentedString(actorLocation)).append("\n");
    sb.append("    blockedUser: ").append(toIndentedString(blockedUser)).append("\n");
    sb.append("    business: ").append(toIndentedString(business)).append("\n");
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    configWas: ").append(toIndentedString(configWas)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    deployKeyFingerprint: ").append(toIndentedString(deployKeyFingerprint)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    eventsWere: ").append(toIndentedString(eventsWere)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    hookId: ").append(toIndentedString(hookId)).append("\n");
    sb.append("    limitedAvailability: ").append(toIndentedString(limitedAvailability)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oldUser: ").append(toIndentedString(oldUser)).append("\n");
    sb.append("    opensshPublicKey: ").append(toIndentedString(opensshPublicKey)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    previousVisibility: ").append(toIndentedString(previousVisibility)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    repositoryPublic: ").append(toIndentedString(repositoryPublic)).append("\n");
    sb.append("    targetLogin: ").append(toIndentedString(targetLogin)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    transportProtocol: ").append(toIndentedString(transportProtocol)).append("\n");
    sb.append("    transportProtocolName: ").append(toIndentedString(transportProtocolName)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@timestamp");
    openapiFields.add("_document_id");
    openapiFields.add("action");
    openapiFields.add("active");
    openapiFields.add("active_was");
    openapiFields.add("actor");
    openapiFields.add("actor_id");
    openapiFields.add("actor_location");
    openapiFields.add("blocked_user");
    openapiFields.add("business");
    openapiFields.add("business_id");
    openapiFields.add("config");
    openapiFields.add("config_was");
    openapiFields.add("content_type");
    openapiFields.add("created_at");
    openapiFields.add("data");
    openapiFields.add("deploy_key_fingerprint");
    openapiFields.add("emoji");
    openapiFields.add("events");
    openapiFields.add("events_were");
    openapiFields.add("explanation");
    openapiFields.add("fingerprint");
    openapiFields.add("hook_id");
    openapiFields.add("limited_availability");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("old_user");
    openapiFields.add("openssh_public_key");
    openapiFields.add("operation_type");
    openapiFields.add("org");
    openapiFields.add("org_id");
    openapiFields.add("previous_visibility");
    openapiFields.add("read_only");
    openapiFields.add("repo");
    openapiFields.add("repository");
    openapiFields.add("repository_public");
    openapiFields.add("target_login");
    openapiFields.add("team");
    openapiFields.add("transport_protocol");
    openapiFields.add("transport_protocol_name");
    openapiFields.add("user");
    openapiFields.add("user_id");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLogEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLogEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLogEvent is not found in the empty JSON string", AuditLogEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLogEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLogEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_document_id") != null && !jsonObj.get("_document_id").isJsonNull()) && !jsonObj.get("_document_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_document_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_document_id").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) && !jsonObj.get("actor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor").toString()));
      }
      // validate the optional field `actor_location`
      if (jsonObj.get("actor_location") != null && !jsonObj.get("actor_location").isJsonNull()) {
        AuditLogEventActorLocation.validateJsonElement(jsonObj.get("actor_location"));
      }
      if ((jsonObj.get("blocked_user") != null && !jsonObj.get("blocked_user").isJsonNull()) && !jsonObj.get("blocked_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocked_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocked_user").toString()));
      }
      if ((jsonObj.get("business") != null && !jsonObj.get("business").isJsonNull()) && !jsonObj.get("business").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `business` to be a primitive type in the JSON string but got `%s`", jsonObj.get("business").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull() && !jsonObj.get("config").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be an array in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("config_was") != null && !jsonObj.get("config_was").isJsonNull() && !jsonObj.get("config_was").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_was` to be an array in the JSON string but got `%s`", jsonObj.get("config_was").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("deploy_key_fingerprint") != null && !jsonObj.get("deploy_key_fingerprint").isJsonNull()) && !jsonObj.get("deploy_key_fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_key_fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_key_fingerprint").toString()));
      }
      if ((jsonObj.get("emoji") != null && !jsonObj.get("emoji").isJsonNull()) && !jsonObj.get("emoji").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emoji` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emoji").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull() && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events_were") != null && !jsonObj.get("events_were").isJsonNull() && !jsonObj.get("events_were").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events_were` to be an array in the JSON string but got `%s`", jsonObj.get("events_were").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("old_user") != null && !jsonObj.get("old_user").isJsonNull()) && !jsonObj.get("old_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_user").toString()));
      }
      if ((jsonObj.get("openssh_public_key") != null && !jsonObj.get("openssh_public_key").isJsonNull()) && !jsonObj.get("openssh_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openssh_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openssh_public_key").toString()));
      }
      if ((jsonObj.get("operation_type") != null && !jsonObj.get("operation_type").isJsonNull()) && !jsonObj.get("operation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation_type").toString()));
      }
      if ((jsonObj.get("org") != null && !jsonObj.get("org").isJsonNull()) && !jsonObj.get("org").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org").toString()));
      }
      if ((jsonObj.get("previous_visibility") != null && !jsonObj.get("previous_visibility").isJsonNull()) && !jsonObj.get("previous_visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_visibility").toString()));
      }
      if ((jsonObj.get("repo") != null && !jsonObj.get("repo").isJsonNull()) && !jsonObj.get("repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("target_login") != null && !jsonObj.get("target_login").isJsonNull()) && !jsonObj.get("target_login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_login").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("transport_protocol_name") != null && !jsonObj.get("transport_protocol_name").isJsonNull()) && !jsonObj.get("transport_protocol_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transport_protocol_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transport_protocol_name").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLogEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLogEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLogEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLogEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLogEvent>() {
           @Override
           public void write(JsonWriter out, AuditLogEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLogEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLogEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLogEvent
   * @throws IOException if the JSON string is invalid with respect to AuditLogEvent
   */
  public static AuditLogEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLogEvent.class);
  }

  /**
   * Convert an instance of AuditLogEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

