/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchResultTextMatchesInner;
import org.openapitools.client.model.TopicSearchResultItemAliasesInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Topic Search Result Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopicSearchResultItem {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<TopicSearchResultItemAliasesInner> aliases;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CURATED = "curated";
  @SerializedName(SERIALIZED_NAME_CURATED)
  private Boolean curated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private Boolean featured;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private URI logoUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private List<TopicSearchResultItemAliasesInner> related;

  public static final String SERIALIZED_NAME_RELEASED = "released";
  @SerializedName(SERIALIZED_NAME_RELEASED)
  private String released;

  public static final String SERIALIZED_NAME_REPOSITORY_COUNT = "repository_count";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_COUNT)
  private Integer repositoryCount;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "short_description";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_TEXT_MATCHES = "text_matches";
  @SerializedName(SERIALIZED_NAME_TEXT_MATCHES)
  private List<SearchResultTextMatchesInner> textMatches = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public TopicSearchResultItem() {
  }

  public TopicSearchResultItem aliases(List<TopicSearchResultItemAliasesInner> aliases) {
    this.aliases = aliases;
    return this;
  }

  public TopicSearchResultItem addAliasesItem(TopicSearchResultItemAliasesInner aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nullable
  public List<TopicSearchResultItemAliasesInner> getAliases() {
    return aliases;
  }

  public void setAliases(List<TopicSearchResultItemAliasesInner> aliases) {
    this.aliases = aliases;
  }


  public TopicSearchResultItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TopicSearchResultItem createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public TopicSearchResultItem curated(Boolean curated) {
    this.curated = curated;
    return this;
  }

  /**
   * Get curated
   * @return curated
   */
  @javax.annotation.Nonnull
  public Boolean getCurated() {
    return curated;
  }

  public void setCurated(Boolean curated) {
    this.curated = curated;
  }


  public TopicSearchResultItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TopicSearchResultItem displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TopicSearchResultItem featured(Boolean featured) {
    this.featured = featured;
    return this;
  }

  /**
   * Get featured
   * @return featured
   */
  @javax.annotation.Nonnull
  public Boolean getFeatured() {
    return featured;
  }

  public void setFeatured(Boolean featured) {
    this.featured = featured;
  }


  public TopicSearchResultItem logoUrl(URI logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public URI getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(URI logoUrl) {
    this.logoUrl = logoUrl;
  }


  public TopicSearchResultItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TopicSearchResultItem related(List<TopicSearchResultItemAliasesInner> related) {
    this.related = related;
    return this;
  }

  public TopicSearchResultItem addRelatedItem(TopicSearchResultItemAliasesInner relatedItem) {
    if (this.related == null) {
      this.related = new ArrayList<>();
    }
    this.related.add(relatedItem);
    return this;
  }

  /**
   * Get related
   * @return related
   */
  @javax.annotation.Nullable
  public List<TopicSearchResultItemAliasesInner> getRelated() {
    return related;
  }

  public void setRelated(List<TopicSearchResultItemAliasesInner> related) {
    this.related = related;
  }


  public TopicSearchResultItem released(String released) {
    this.released = released;
    return this;
  }

  /**
   * Get released
   * @return released
   */
  @javax.annotation.Nullable
  public String getReleased() {
    return released;
  }

  public void setReleased(String released) {
    this.released = released;
  }


  public TopicSearchResultItem repositoryCount(Integer repositoryCount) {
    this.repositoryCount = repositoryCount;
    return this;
  }

  /**
   * Get repositoryCount
   * @return repositoryCount
   */
  @javax.annotation.Nullable
  public Integer getRepositoryCount() {
    return repositoryCount;
  }

  public void setRepositoryCount(Integer repositoryCount) {
    this.repositoryCount = repositoryCount;
  }


  public TopicSearchResultItem score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public TopicSearchResultItem shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public TopicSearchResultItem textMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
    return this;
  }

  public TopicSearchResultItem addTextMatchesItem(SearchResultTextMatchesInner textMatchesItem) {
    if (this.textMatches == null) {
      this.textMatches = new ArrayList<>();
    }
    this.textMatches.add(textMatchesItem);
    return this;
  }

  /**
   * Get textMatches
   * @return textMatches
   */
  @javax.annotation.Nullable
  public List<SearchResultTextMatchesInner> getTextMatches() {
    return textMatches;
  }

  public void setTextMatches(List<SearchResultTextMatchesInner> textMatches) {
    this.textMatches = textMatches;
  }


  public TopicSearchResultItem updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopicSearchResultItem topicSearchResultItem = (TopicSearchResultItem) o;
    return Objects.equals(this.aliases, topicSearchResultItem.aliases) &&
        Objects.equals(this.createdAt, topicSearchResultItem.createdAt) &&
        Objects.equals(this.createdBy, topicSearchResultItem.createdBy) &&
        Objects.equals(this.curated, topicSearchResultItem.curated) &&
        Objects.equals(this.description, topicSearchResultItem.description) &&
        Objects.equals(this.displayName, topicSearchResultItem.displayName) &&
        Objects.equals(this.featured, topicSearchResultItem.featured) &&
        Objects.equals(this.logoUrl, topicSearchResultItem.logoUrl) &&
        Objects.equals(this.name, topicSearchResultItem.name) &&
        Objects.equals(this.related, topicSearchResultItem.related) &&
        Objects.equals(this.released, topicSearchResultItem.released) &&
        Objects.equals(this.repositoryCount, topicSearchResultItem.repositoryCount) &&
        Objects.equals(this.score, topicSearchResultItem.score) &&
        Objects.equals(this.shortDescription, topicSearchResultItem.shortDescription) &&
        Objects.equals(this.textMatches, topicSearchResultItem.textMatches) &&
        Objects.equals(this.updatedAt, topicSearchResultItem.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, createdAt, createdBy, curated, description, displayName, featured, logoUrl, name, related, released, repositoryCount, score, shortDescription, textMatches, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopicSearchResultItem {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    curated: ").append(toIndentedString(curated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    repositoryCount: ").append(toIndentedString(repositoryCount)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    textMatches: ").append(toIndentedString(textMatches)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("curated");
    openapiFields.add("description");
    openapiFields.add("display_name");
    openapiFields.add("featured");
    openapiFields.add("logo_url");
    openapiFields.add("name");
    openapiFields.add("related");
    openapiFields.add("released");
    openapiFields.add("repository_count");
    openapiFields.add("score");
    openapiFields.add("short_description");
    openapiFields.add("text_matches");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by");
    openapiRequiredFields.add("curated");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("featured");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("released");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("short_description");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopicSearchResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopicSearchResultItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopicSearchResultItem is not found in the empty JSON string", TopicSearchResultItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopicSearchResultItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopicSearchResultItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TopicSearchResultItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull()) {
        JsonArray jsonArrayaliases = jsonObj.getAsJsonArray("aliases");
        if (jsonArrayaliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
          }

          // validate the optional field `aliases` (array)
          for (int i = 0; i < jsonArrayaliases.size(); i++) {
            TopicSearchResultItemAliasesInner.validateJsonElement(jsonArrayaliases.get(i));
          };
        }
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("logo_url") != null && !jsonObj.get("logo_url").isJsonNull()) && !jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("related") != null && !jsonObj.get("related").isJsonNull()) {
        JsonArray jsonArrayrelated = jsonObj.getAsJsonArray("related");
        if (jsonArrayrelated != null) {
          // ensure the json data is an array
          if (!jsonObj.get("related").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `related` to be an array in the JSON string but got `%s`", jsonObj.get("related").toString()));
          }

          // validate the optional field `related` (array)
          for (int i = 0; i < jsonArrayrelated.size(); i++) {
            TopicSearchResultItemAliasesInner.validateJsonElement(jsonArrayrelated.get(i));
          };
        }
      }
      if ((jsonObj.get("released") != null && !jsonObj.get("released").isJsonNull()) && !jsonObj.get("released").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `released` to be a primitive type in the JSON string but got `%s`", jsonObj.get("released").toString()));
      }
      if ((jsonObj.get("short_description") != null && !jsonObj.get("short_description").isJsonNull()) && !jsonObj.get("short_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_description").toString()));
      }
      if (jsonObj.get("text_matches") != null && !jsonObj.get("text_matches").isJsonNull()) {
        JsonArray jsonArraytextMatches = jsonObj.getAsJsonArray("text_matches");
        if (jsonArraytextMatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_matches` to be an array in the JSON string but got `%s`", jsonObj.get("text_matches").toString()));
          }

          // validate the optional field `text_matches` (array)
          for (int i = 0; i < jsonArraytextMatches.size(); i++) {
            SearchResultTextMatchesInner.validateJsonElement(jsonArraytextMatches.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopicSearchResultItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopicSearchResultItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopicSearchResultItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopicSearchResultItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TopicSearchResultItem>() {
           @Override
           public void write(JsonWriter out, TopicSearchResultItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopicSearchResultItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopicSearchResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopicSearchResultItem
   * @throws IOException if the JSON string is invalid with respect to TopicSearchResultItem
   */
  public static TopicSearchResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopicSearchResultItem.class);
  }

  /**
   * Convert an instance of TopicSearchResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

