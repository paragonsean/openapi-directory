/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Integration;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.Team;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {
  public static final String SERIALIZED_NAME_APPS = "apps";
  @SerializedName(SERIALIZED_NAME_APPS)
  private List<Integration> apps = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<Team> teams = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAMS_URL = "teams_url";
  @SerializedName(SERIALIZED_NAME_TEAMS_URL)
  private URI teamsUrl;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<SimpleUser> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS_URL = "users_url";
  @SerializedName(SERIALIZED_NAME_USERS_URL)
  private URI usersUrl;

  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions() {
  }

  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions apps(List<Integration> apps) {
    this.apps = apps;
    return this;
  }

  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions addAppsItem(Integration appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

  /**
   * Get apps
   * @return apps
   */
  @javax.annotation.Nullable
  public List<Integration> getApps() {
    return apps;
  }

  public void setApps(List<Integration> apps) {
    this.apps = apps;
  }


  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions teams(List<Team> teams) {
    this.teams = teams;
    return this;
  }

  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions addTeamsItem(Team teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * Get teams
   * @return teams
   */
  @javax.annotation.Nonnull
  public List<Team> getTeams() {
    return teams;
  }

  public void setTeams(List<Team> teams) {
    this.teams = teams;
  }


  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions teamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
    return this;
  }

  /**
   * Get teamsUrl
   * @return teamsUrl
   */
  @javax.annotation.Nonnull
  public URI getTeamsUrl() {
    return teamsUrl;
  }

  public void setTeamsUrl(URI teamsUrl) {
    this.teamsUrl = teamsUrl;
  }


  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions users(List<SimpleUser> users) {
    this.users = users;
    return this;
  }

  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions addUsersItem(SimpleUser usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nonnull
  public List<SimpleUser> getUsers() {
    return users;
  }

  public void setUsers(List<SimpleUser> users) {
    this.users = users;
  }


  public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions usersUrl(URI usersUrl) {
    this.usersUrl = usersUrl;
    return this;
  }

  /**
   * Get usersUrl
   * @return usersUrl
   */
  @javax.annotation.Nonnull
  public URI getUsersUrl() {
    return usersUrl;
  }

  public void setUsersUrl(URI usersUrl) {
    this.usersUrl = usersUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions protectedBranchRequiredPullRequestReviewsDismissalRestrictions = (ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions) o;
    return Objects.equals(this.apps, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.apps) &&
        Objects.equals(this.teams, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.teams) &&
        Objects.equals(this.teamsUrl, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.teamsUrl) &&
        Objects.equals(this.url, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.url) &&
        Objects.equals(this.users, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.users) &&
        Objects.equals(this.usersUrl, protectedBranchRequiredPullRequestReviewsDismissalRestrictions.usersUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apps, teams, teamsUrl, url, users, usersUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions {\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    teamsUrl: ").append(toIndentedString(teamsUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    usersUrl: ").append(toIndentedString(usersUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apps");
    openapiFields.add("teams");
    openapiFields.add("teams_url");
    openapiFields.add("url");
    openapiFields.add("users");
    openapiFields.add("users_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("teams");
    openapiRequiredFields.add("teams_url");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("users");
    openapiRequiredFields.add("users_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions is not found in the empty JSON string", ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("apps") != null && !jsonObj.get("apps").isJsonNull()) {
        JsonArray jsonArrayapps = jsonObj.getAsJsonArray("apps");
        if (jsonArrayapps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apps` to be an array in the JSON string but got `%s`", jsonObj.get("apps").toString()));
          }

          // validate the optional field `apps` (array)
          for (int i = 0; i < jsonArrayapps.size(); i++) {
            Integration.validateJsonElement(jsonArrayapps.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
      }

      JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
      // validate the required field `teams` (array)
      for (int i = 0; i < jsonArrayteams.size(); i++) {
        Team.validateJsonElement(jsonArrayteams.get(i));
      };
      if (!jsonObj.get("teams_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teams_url").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }

      JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
      // validate the required field `users` (array)
      for (int i = 0; i < jsonArrayusers.size(); i++) {
        SimpleUser.validateJsonElement(jsonArrayusers.get(i));
      };
      if (!jsonObj.get("users_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions>() {
           @Override
           public void write(JsonWriter out, ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
   * @throws IOException if the JSON string is invalid with respect to ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions
   */
  public static ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions.class);
  }

  /**
   * Convert an instance of ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

