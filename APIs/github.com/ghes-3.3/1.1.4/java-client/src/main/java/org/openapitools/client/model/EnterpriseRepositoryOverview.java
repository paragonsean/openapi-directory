/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnterpriseRepositoryOverview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnterpriseRepositoryOverview {
  public static final String SERIALIZED_NAME_FORK_REPOS = "fork_repos";
  @SerializedName(SERIALIZED_NAME_FORK_REPOS)
  private Integer forkRepos;

  public static final String SERIALIZED_NAME_ORG_REPOS = "org_repos";
  @SerializedName(SERIALIZED_NAME_ORG_REPOS)
  private Integer orgRepos;

  public static final String SERIALIZED_NAME_ROOT_REPOS = "root_repos";
  @SerializedName(SERIALIZED_NAME_ROOT_REPOS)
  private Integer rootRepos;

  public static final String SERIALIZED_NAME_TOTAL_PUSHES = "total_pushes";
  @SerializedName(SERIALIZED_NAME_TOTAL_PUSHES)
  private Integer totalPushes;

  public static final String SERIALIZED_NAME_TOTAL_REPOS = "total_repos";
  @SerializedName(SERIALIZED_NAME_TOTAL_REPOS)
  private Integer totalRepos;

  public static final String SERIALIZED_NAME_TOTAL_WIKIS = "total_wikis";
  @SerializedName(SERIALIZED_NAME_TOTAL_WIKIS)
  private Integer totalWikis;

  public EnterpriseRepositoryOverview() {
  }

  public EnterpriseRepositoryOverview forkRepos(Integer forkRepos) {
    this.forkRepos = forkRepos;
    return this;
  }

  /**
   * Get forkRepos
   * @return forkRepos
   */
  @javax.annotation.Nonnull
  public Integer getForkRepos() {
    return forkRepos;
  }

  public void setForkRepos(Integer forkRepos) {
    this.forkRepos = forkRepos;
  }


  public EnterpriseRepositoryOverview orgRepos(Integer orgRepos) {
    this.orgRepos = orgRepos;
    return this;
  }

  /**
   * Get orgRepos
   * @return orgRepos
   */
  @javax.annotation.Nonnull
  public Integer getOrgRepos() {
    return orgRepos;
  }

  public void setOrgRepos(Integer orgRepos) {
    this.orgRepos = orgRepos;
  }


  public EnterpriseRepositoryOverview rootRepos(Integer rootRepos) {
    this.rootRepos = rootRepos;
    return this;
  }

  /**
   * Get rootRepos
   * @return rootRepos
   */
  @javax.annotation.Nonnull
  public Integer getRootRepos() {
    return rootRepos;
  }

  public void setRootRepos(Integer rootRepos) {
    this.rootRepos = rootRepos;
  }


  public EnterpriseRepositoryOverview totalPushes(Integer totalPushes) {
    this.totalPushes = totalPushes;
    return this;
  }

  /**
   * Get totalPushes
   * @return totalPushes
   */
  @javax.annotation.Nonnull
  public Integer getTotalPushes() {
    return totalPushes;
  }

  public void setTotalPushes(Integer totalPushes) {
    this.totalPushes = totalPushes;
  }


  public EnterpriseRepositoryOverview totalRepos(Integer totalRepos) {
    this.totalRepos = totalRepos;
    return this;
  }

  /**
   * Get totalRepos
   * @return totalRepos
   */
  @javax.annotation.Nonnull
  public Integer getTotalRepos() {
    return totalRepos;
  }

  public void setTotalRepos(Integer totalRepos) {
    this.totalRepos = totalRepos;
  }


  public EnterpriseRepositoryOverview totalWikis(Integer totalWikis) {
    this.totalWikis = totalWikis;
    return this;
  }

  /**
   * Get totalWikis
   * @return totalWikis
   */
  @javax.annotation.Nonnull
  public Integer getTotalWikis() {
    return totalWikis;
  }

  public void setTotalWikis(Integer totalWikis) {
    this.totalWikis = totalWikis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnterpriseRepositoryOverview enterpriseRepositoryOverview = (EnterpriseRepositoryOverview) o;
    return Objects.equals(this.forkRepos, enterpriseRepositoryOverview.forkRepos) &&
        Objects.equals(this.orgRepos, enterpriseRepositoryOverview.orgRepos) &&
        Objects.equals(this.rootRepos, enterpriseRepositoryOverview.rootRepos) &&
        Objects.equals(this.totalPushes, enterpriseRepositoryOverview.totalPushes) &&
        Objects.equals(this.totalRepos, enterpriseRepositoryOverview.totalRepos) &&
        Objects.equals(this.totalWikis, enterpriseRepositoryOverview.totalWikis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forkRepos, orgRepos, rootRepos, totalPushes, totalRepos, totalWikis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnterpriseRepositoryOverview {\n");
    sb.append("    forkRepos: ").append(toIndentedString(forkRepos)).append("\n");
    sb.append("    orgRepos: ").append(toIndentedString(orgRepos)).append("\n");
    sb.append("    rootRepos: ").append(toIndentedString(rootRepos)).append("\n");
    sb.append("    totalPushes: ").append(toIndentedString(totalPushes)).append("\n");
    sb.append("    totalRepos: ").append(toIndentedString(totalRepos)).append("\n");
    sb.append("    totalWikis: ").append(toIndentedString(totalWikis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fork_repos");
    openapiFields.add("org_repos");
    openapiFields.add("root_repos");
    openapiFields.add("total_pushes");
    openapiFields.add("total_repos");
    openapiFields.add("total_wikis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fork_repos");
    openapiRequiredFields.add("org_repos");
    openapiRequiredFields.add("root_repos");
    openapiRequiredFields.add("total_pushes");
    openapiRequiredFields.add("total_repos");
    openapiRequiredFields.add("total_wikis");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnterpriseRepositoryOverview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnterpriseRepositoryOverview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnterpriseRepositoryOverview is not found in the empty JSON string", EnterpriseRepositoryOverview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnterpriseRepositoryOverview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnterpriseRepositoryOverview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnterpriseRepositoryOverview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnterpriseRepositoryOverview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnterpriseRepositoryOverview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnterpriseRepositoryOverview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnterpriseRepositoryOverview.class));

       return (TypeAdapter<T>) new TypeAdapter<EnterpriseRepositoryOverview>() {
           @Override
           public void write(JsonWriter out, EnterpriseRepositoryOverview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnterpriseRepositoryOverview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnterpriseRepositoryOverview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnterpriseRepositoryOverview
   * @throws IOException if the JSON string is invalid with respect to EnterpriseRepositoryOverview
   */
  public static EnterpriseRepositoryOverview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnterpriseRepositoryOverview.class);
  }

  /**
   * Convert an instance of EnterpriseRepositoryOverview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

