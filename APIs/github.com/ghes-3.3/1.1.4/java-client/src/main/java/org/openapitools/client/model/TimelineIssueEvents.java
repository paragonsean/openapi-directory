/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddedToProjectIssueEvent;
import org.openapitools.client.model.AddedToProjectIssueEventProjectCard;
import org.openapitools.client.model.AuthorAssociation;
import org.openapitools.client.model.CommitComment;
import org.openapitools.client.model.ConvertedNoteToIssueIssueEvent;
import org.openapitools.client.model.DemilestonedIssueEvent;
import org.openapitools.client.model.DemilestonedIssueEventMilestone;
import org.openapitools.client.model.GitCommitAuthor;
import org.openapitools.client.model.GitCommitParentsInner;
import org.openapitools.client.model.GitCommitTree;
import org.openapitools.client.model.GitCommitVerification;
import org.openapitools.client.model.LabeledIssueEvent;
import org.openapitools.client.model.LabeledIssueEventLabel;
import org.openapitools.client.model.LockedIssueEvent;
import org.openapitools.client.model.MilestonedIssueEvent;
import org.openapitools.client.model.MovedColumnInProjectIssueEvent;
import org.openapitools.client.model.NullableIntegration;
import org.openapitools.client.model.PullRequestReviewLinks;
import org.openapitools.client.model.ReactionRollup;
import org.openapitools.client.model.RemovedFromProjectIssueEvent;
import org.openapitools.client.model.RenamedIssueEvent;
import org.openapitools.client.model.RenamedIssueEventRename;
import org.openapitools.client.model.ReviewDismissedIssueEvent;
import org.openapitools.client.model.ReviewDismissedIssueEventDismissedReview;
import org.openapitools.client.model.ReviewRequestRemovedIssueEvent;
import org.openapitools.client.model.ReviewRequestedIssueEvent;
import org.openapitools.client.model.SimpleUser;
import org.openapitools.client.model.StateChangeIssueEvent;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TimelineAssignedIssueEvent;
import org.openapitools.client.model.TimelineCommentEvent;
import org.openapitools.client.model.TimelineCommitCommentedEvent;
import org.openapitools.client.model.TimelineCommittedEvent;
import org.openapitools.client.model.TimelineCrossReferencedEvent;
import org.openapitools.client.model.TimelineCrossReferencedEventSource;
import org.openapitools.client.model.TimelineLineCommentedEvent;
import org.openapitools.client.model.TimelineReviewedEvent;
import org.openapitools.client.model.TimelineUnassignedIssueEvent;
import org.openapitools.client.model.UnlabeledIssueEvent;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimelineIssueEvents extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TimelineIssueEvents.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TimelineIssueEvents.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TimelineIssueEvents' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<LabeledIssueEvent> adapterLabeledIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(LabeledIssueEvent.class));
            final TypeAdapter<UnlabeledIssueEvent> adapterUnlabeledIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(UnlabeledIssueEvent.class));
            final TypeAdapter<MilestonedIssueEvent> adapterMilestonedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(MilestonedIssueEvent.class));
            final TypeAdapter<DemilestonedIssueEvent> adapterDemilestonedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(DemilestonedIssueEvent.class));
            final TypeAdapter<RenamedIssueEvent> adapterRenamedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(RenamedIssueEvent.class));
            final TypeAdapter<ReviewRequestedIssueEvent> adapterReviewRequestedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(ReviewRequestedIssueEvent.class));
            final TypeAdapter<ReviewRequestRemovedIssueEvent> adapterReviewRequestRemovedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(ReviewRequestRemovedIssueEvent.class));
            final TypeAdapter<ReviewDismissedIssueEvent> adapterReviewDismissedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(ReviewDismissedIssueEvent.class));
            final TypeAdapter<LockedIssueEvent> adapterLockedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(LockedIssueEvent.class));
            final TypeAdapter<AddedToProjectIssueEvent> adapterAddedToProjectIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(AddedToProjectIssueEvent.class));
            final TypeAdapter<MovedColumnInProjectIssueEvent> adapterMovedColumnInProjectIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(MovedColumnInProjectIssueEvent.class));
            final TypeAdapter<RemovedFromProjectIssueEvent> adapterRemovedFromProjectIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(RemovedFromProjectIssueEvent.class));
            final TypeAdapter<ConvertedNoteToIssueIssueEvent> adapterConvertedNoteToIssueIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(ConvertedNoteToIssueIssueEvent.class));
            final TypeAdapter<TimelineCommentEvent> adapterTimelineCommentEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineCommentEvent.class));
            final TypeAdapter<TimelineCrossReferencedEvent> adapterTimelineCrossReferencedEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineCrossReferencedEvent.class));
            final TypeAdapter<TimelineCommittedEvent> adapterTimelineCommittedEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineCommittedEvent.class));
            final TypeAdapter<TimelineReviewedEvent> adapterTimelineReviewedEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineReviewedEvent.class));
            final TypeAdapter<TimelineLineCommentedEvent> adapterTimelineLineCommentedEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineLineCommentedEvent.class));
            final TypeAdapter<TimelineCommitCommentedEvent> adapterTimelineCommitCommentedEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineCommitCommentedEvent.class));
            final TypeAdapter<TimelineAssignedIssueEvent> adapterTimelineAssignedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineAssignedIssueEvent.class));
            final TypeAdapter<TimelineUnassignedIssueEvent> adapterTimelineUnassignedIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(TimelineUnassignedIssueEvent.class));
            final TypeAdapter<StateChangeIssueEvent> adapterStateChangeIssueEvent = gson.getDelegateAdapter(this, TypeToken.get(StateChangeIssueEvent.class));

            return (TypeAdapter<T>) new TypeAdapter<TimelineIssueEvents>() {
                @Override
                public void write(JsonWriter out, TimelineIssueEvents value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `LabeledIssueEvent`
                    if (value.getActualInstance() instanceof LabeledIssueEvent) {
                        JsonElement element = adapterLabeledIssueEvent.toJsonTree((LabeledIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UnlabeledIssueEvent`
                    if (value.getActualInstance() instanceof UnlabeledIssueEvent) {
                        JsonElement element = adapterUnlabeledIssueEvent.toJsonTree((UnlabeledIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MilestonedIssueEvent`
                    if (value.getActualInstance() instanceof MilestonedIssueEvent) {
                        JsonElement element = adapterMilestonedIssueEvent.toJsonTree((MilestonedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DemilestonedIssueEvent`
                    if (value.getActualInstance() instanceof DemilestonedIssueEvent) {
                        JsonElement element = adapterDemilestonedIssueEvent.toJsonTree((DemilestonedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RenamedIssueEvent`
                    if (value.getActualInstance() instanceof RenamedIssueEvent) {
                        JsonElement element = adapterRenamedIssueEvent.toJsonTree((RenamedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReviewRequestedIssueEvent`
                    if (value.getActualInstance() instanceof ReviewRequestedIssueEvent) {
                        JsonElement element = adapterReviewRequestedIssueEvent.toJsonTree((ReviewRequestedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReviewRequestRemovedIssueEvent`
                    if (value.getActualInstance() instanceof ReviewRequestRemovedIssueEvent) {
                        JsonElement element = adapterReviewRequestRemovedIssueEvent.toJsonTree((ReviewRequestRemovedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReviewDismissedIssueEvent`
                    if (value.getActualInstance() instanceof ReviewDismissedIssueEvent) {
                        JsonElement element = adapterReviewDismissedIssueEvent.toJsonTree((ReviewDismissedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LockedIssueEvent`
                    if (value.getActualInstance() instanceof LockedIssueEvent) {
                        JsonElement element = adapterLockedIssueEvent.toJsonTree((LockedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddedToProjectIssueEvent`
                    if (value.getActualInstance() instanceof AddedToProjectIssueEvent) {
                        JsonElement element = adapterAddedToProjectIssueEvent.toJsonTree((AddedToProjectIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MovedColumnInProjectIssueEvent`
                    if (value.getActualInstance() instanceof MovedColumnInProjectIssueEvent) {
                        JsonElement element = adapterMovedColumnInProjectIssueEvent.toJsonTree((MovedColumnInProjectIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RemovedFromProjectIssueEvent`
                    if (value.getActualInstance() instanceof RemovedFromProjectIssueEvent) {
                        JsonElement element = adapterRemovedFromProjectIssueEvent.toJsonTree((RemovedFromProjectIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConvertedNoteToIssueIssueEvent`
                    if (value.getActualInstance() instanceof ConvertedNoteToIssueIssueEvent) {
                        JsonElement element = adapterConvertedNoteToIssueIssueEvent.toJsonTree((ConvertedNoteToIssueIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineCommentEvent`
                    if (value.getActualInstance() instanceof TimelineCommentEvent) {
                        JsonElement element = adapterTimelineCommentEvent.toJsonTree((TimelineCommentEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineCrossReferencedEvent`
                    if (value.getActualInstance() instanceof TimelineCrossReferencedEvent) {
                        JsonElement element = adapterTimelineCrossReferencedEvent.toJsonTree((TimelineCrossReferencedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineCommittedEvent`
                    if (value.getActualInstance() instanceof TimelineCommittedEvent) {
                        JsonElement element = adapterTimelineCommittedEvent.toJsonTree((TimelineCommittedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineReviewedEvent`
                    if (value.getActualInstance() instanceof TimelineReviewedEvent) {
                        JsonElement element = adapterTimelineReviewedEvent.toJsonTree((TimelineReviewedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineLineCommentedEvent`
                    if (value.getActualInstance() instanceof TimelineLineCommentedEvent) {
                        JsonElement element = adapterTimelineLineCommentedEvent.toJsonTree((TimelineLineCommentedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineCommitCommentedEvent`
                    if (value.getActualInstance() instanceof TimelineCommitCommentedEvent) {
                        JsonElement element = adapterTimelineCommitCommentedEvent.toJsonTree((TimelineCommitCommentedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineAssignedIssueEvent`
                    if (value.getActualInstance() instanceof TimelineAssignedIssueEvent) {
                        JsonElement element = adapterTimelineAssignedIssueEvent.toJsonTree((TimelineAssignedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TimelineUnassignedIssueEvent`
                    if (value.getActualInstance() instanceof TimelineUnassignedIssueEvent) {
                        JsonElement element = adapterTimelineUnassignedIssueEvent.toJsonTree((TimelineUnassignedIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `StateChangeIssueEvent`
                    if (value.getActualInstance() instanceof StateChangeIssueEvent) {
                        JsonElement element = adapterStateChangeIssueEvent.toJsonTree((StateChangeIssueEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent");
                }

                @Override
                public TimelineIssueEvents read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize LabeledIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LabeledIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterLabeledIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LabeledIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LabeledIssueEvent'", e);
                    }
                    // deserialize UnlabeledIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UnlabeledIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUnlabeledIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UnlabeledIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UnlabeledIssueEvent'", e);
                    }
                    // deserialize MilestonedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MilestonedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMilestonedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MilestonedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MilestonedIssueEvent'", e);
                    }
                    // deserialize DemilestonedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DemilestonedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterDemilestonedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DemilestonedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DemilestonedIssueEvent'", e);
                    }
                    // deserialize RenamedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RenamedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterRenamedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RenamedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RenamedIssueEvent'", e);
                    }
                    // deserialize ReviewRequestedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReviewRequestedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReviewRequestedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReviewRequestedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReviewRequestedIssueEvent'", e);
                    }
                    // deserialize ReviewRequestRemovedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReviewRequestRemovedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReviewRequestRemovedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReviewRequestRemovedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReviewRequestRemovedIssueEvent'", e);
                    }
                    // deserialize ReviewDismissedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReviewDismissedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReviewDismissedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReviewDismissedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReviewDismissedIssueEvent'", e);
                    }
                    // deserialize LockedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LockedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterLockedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LockedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LockedIssueEvent'", e);
                    }
                    // deserialize AddedToProjectIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddedToProjectIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddedToProjectIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddedToProjectIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddedToProjectIssueEvent'", e);
                    }
                    // deserialize MovedColumnInProjectIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MovedColumnInProjectIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMovedColumnInProjectIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MovedColumnInProjectIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MovedColumnInProjectIssueEvent'", e);
                    }
                    // deserialize RemovedFromProjectIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RemovedFromProjectIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterRemovedFromProjectIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RemovedFromProjectIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RemovedFromProjectIssueEvent'", e);
                    }
                    // deserialize ConvertedNoteToIssueIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConvertedNoteToIssueIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterConvertedNoteToIssueIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConvertedNoteToIssueIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConvertedNoteToIssueIssueEvent'", e);
                    }
                    // deserialize TimelineCommentEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineCommentEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineCommentEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineCommentEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineCommentEvent'", e);
                    }
                    // deserialize TimelineCrossReferencedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineCrossReferencedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineCrossReferencedEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineCrossReferencedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineCrossReferencedEvent'", e);
                    }
                    // deserialize TimelineCommittedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineCommittedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineCommittedEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineCommittedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineCommittedEvent'", e);
                    }
                    // deserialize TimelineReviewedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineReviewedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineReviewedEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineReviewedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineReviewedEvent'", e);
                    }
                    // deserialize TimelineLineCommentedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineLineCommentedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineLineCommentedEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineLineCommentedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineLineCommentedEvent'", e);
                    }
                    // deserialize TimelineCommitCommentedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineCommitCommentedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineCommitCommentedEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineCommitCommentedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineCommitCommentedEvent'", e);
                    }
                    // deserialize TimelineAssignedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineAssignedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineAssignedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineAssignedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineAssignedIssueEvent'", e);
                    }
                    // deserialize TimelineUnassignedIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TimelineUnassignedIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTimelineUnassignedIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TimelineUnassignedIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TimelineUnassignedIssueEvent'", e);
                    }
                    // deserialize StateChangeIssueEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StateChangeIssueEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterStateChangeIssueEvent;
                        TimelineIssueEvents ret = new TimelineIssueEvents();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StateChangeIssueEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StateChangeIssueEvent'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for TimelineIssueEvents: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TimelineIssueEvents() {
        super("anyOf", Boolean.FALSE);
    }

    public TimelineIssueEvents(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LabeledIssueEvent", LabeledIssueEvent.class);
        schemas.put("UnlabeledIssueEvent", UnlabeledIssueEvent.class);
        schemas.put("MilestonedIssueEvent", MilestonedIssueEvent.class);
        schemas.put("DemilestonedIssueEvent", DemilestonedIssueEvent.class);
        schemas.put("RenamedIssueEvent", RenamedIssueEvent.class);
        schemas.put("ReviewRequestedIssueEvent", ReviewRequestedIssueEvent.class);
        schemas.put("ReviewRequestRemovedIssueEvent", ReviewRequestRemovedIssueEvent.class);
        schemas.put("ReviewDismissedIssueEvent", ReviewDismissedIssueEvent.class);
        schemas.put("LockedIssueEvent", LockedIssueEvent.class);
        schemas.put("AddedToProjectIssueEvent", AddedToProjectIssueEvent.class);
        schemas.put("MovedColumnInProjectIssueEvent", MovedColumnInProjectIssueEvent.class);
        schemas.put("RemovedFromProjectIssueEvent", RemovedFromProjectIssueEvent.class);
        schemas.put("ConvertedNoteToIssueIssueEvent", ConvertedNoteToIssueIssueEvent.class);
        schemas.put("TimelineCommentEvent", TimelineCommentEvent.class);
        schemas.put("TimelineCrossReferencedEvent", TimelineCrossReferencedEvent.class);
        schemas.put("TimelineCommittedEvent", TimelineCommittedEvent.class);
        schemas.put("TimelineReviewedEvent", TimelineReviewedEvent.class);
        schemas.put("TimelineLineCommentedEvent", TimelineLineCommentedEvent.class);
        schemas.put("TimelineCommitCommentedEvent", TimelineCommitCommentedEvent.class);
        schemas.put("TimelineAssignedIssueEvent", TimelineAssignedIssueEvent.class);
        schemas.put("TimelineUnassignedIssueEvent", TimelineUnassignedIssueEvent.class);
        schemas.put("StateChangeIssueEvent", StateChangeIssueEvent.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TimelineIssueEvents.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof LabeledIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UnlabeledIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MilestonedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DemilestonedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RenamedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReviewRequestedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReviewRequestRemovedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReviewDismissedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LockedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddedToProjectIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MovedColumnInProjectIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RemovedFromProjectIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConvertedNoteToIssueIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineCommentEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineCrossReferencedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineCommittedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineReviewedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineLineCommentedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineCommitCommentedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineAssignedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TimelineUnassignedIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StateChangeIssueEvent) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent");
    }

    /**
     * Get the actual instance, which can be the following:
     * AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent
     *
     * @return The actual instance (AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `LabeledIssueEvent`. If the actual instance is not `LabeledIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LabeledIssueEvent`
     * @throws ClassCastException if the instance is not `LabeledIssueEvent`
     */
    public LabeledIssueEvent getLabeledIssueEvent() throws ClassCastException {
        return (LabeledIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UnlabeledIssueEvent`. If the actual instance is not `UnlabeledIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UnlabeledIssueEvent`
     * @throws ClassCastException if the instance is not `UnlabeledIssueEvent`
     */
    public UnlabeledIssueEvent getUnlabeledIssueEvent() throws ClassCastException {
        return (UnlabeledIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MilestonedIssueEvent`. If the actual instance is not `MilestonedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MilestonedIssueEvent`
     * @throws ClassCastException if the instance is not `MilestonedIssueEvent`
     */
    public MilestonedIssueEvent getMilestonedIssueEvent() throws ClassCastException {
        return (MilestonedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DemilestonedIssueEvent`. If the actual instance is not `DemilestonedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DemilestonedIssueEvent`
     * @throws ClassCastException if the instance is not `DemilestonedIssueEvent`
     */
    public DemilestonedIssueEvent getDemilestonedIssueEvent() throws ClassCastException {
        return (DemilestonedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RenamedIssueEvent`. If the actual instance is not `RenamedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RenamedIssueEvent`
     * @throws ClassCastException if the instance is not `RenamedIssueEvent`
     */
    public RenamedIssueEvent getRenamedIssueEvent() throws ClassCastException {
        return (RenamedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReviewRequestedIssueEvent`. If the actual instance is not `ReviewRequestedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReviewRequestedIssueEvent`
     * @throws ClassCastException if the instance is not `ReviewRequestedIssueEvent`
     */
    public ReviewRequestedIssueEvent getReviewRequestedIssueEvent() throws ClassCastException {
        return (ReviewRequestedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReviewRequestRemovedIssueEvent`. If the actual instance is not `ReviewRequestRemovedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReviewRequestRemovedIssueEvent`
     * @throws ClassCastException if the instance is not `ReviewRequestRemovedIssueEvent`
     */
    public ReviewRequestRemovedIssueEvent getReviewRequestRemovedIssueEvent() throws ClassCastException {
        return (ReviewRequestRemovedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReviewDismissedIssueEvent`. If the actual instance is not `ReviewDismissedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReviewDismissedIssueEvent`
     * @throws ClassCastException if the instance is not `ReviewDismissedIssueEvent`
     */
    public ReviewDismissedIssueEvent getReviewDismissedIssueEvent() throws ClassCastException {
        return (ReviewDismissedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LockedIssueEvent`. If the actual instance is not `LockedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LockedIssueEvent`
     * @throws ClassCastException if the instance is not `LockedIssueEvent`
     */
    public LockedIssueEvent getLockedIssueEvent() throws ClassCastException {
        return (LockedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddedToProjectIssueEvent`. If the actual instance is not `AddedToProjectIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddedToProjectIssueEvent`
     * @throws ClassCastException if the instance is not `AddedToProjectIssueEvent`
     */
    public AddedToProjectIssueEvent getAddedToProjectIssueEvent() throws ClassCastException {
        return (AddedToProjectIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MovedColumnInProjectIssueEvent`. If the actual instance is not `MovedColumnInProjectIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MovedColumnInProjectIssueEvent`
     * @throws ClassCastException if the instance is not `MovedColumnInProjectIssueEvent`
     */
    public MovedColumnInProjectIssueEvent getMovedColumnInProjectIssueEvent() throws ClassCastException {
        return (MovedColumnInProjectIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RemovedFromProjectIssueEvent`. If the actual instance is not `RemovedFromProjectIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RemovedFromProjectIssueEvent`
     * @throws ClassCastException if the instance is not `RemovedFromProjectIssueEvent`
     */
    public RemovedFromProjectIssueEvent getRemovedFromProjectIssueEvent() throws ClassCastException {
        return (RemovedFromProjectIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConvertedNoteToIssueIssueEvent`. If the actual instance is not `ConvertedNoteToIssueIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConvertedNoteToIssueIssueEvent`
     * @throws ClassCastException if the instance is not `ConvertedNoteToIssueIssueEvent`
     */
    public ConvertedNoteToIssueIssueEvent getConvertedNoteToIssueIssueEvent() throws ClassCastException {
        return (ConvertedNoteToIssueIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineCommentEvent`. If the actual instance is not `TimelineCommentEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineCommentEvent`
     * @throws ClassCastException if the instance is not `TimelineCommentEvent`
     */
    public TimelineCommentEvent getTimelineCommentEvent() throws ClassCastException {
        return (TimelineCommentEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineCrossReferencedEvent`. If the actual instance is not `TimelineCrossReferencedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineCrossReferencedEvent`
     * @throws ClassCastException if the instance is not `TimelineCrossReferencedEvent`
     */
    public TimelineCrossReferencedEvent getTimelineCrossReferencedEvent() throws ClassCastException {
        return (TimelineCrossReferencedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineCommittedEvent`. If the actual instance is not `TimelineCommittedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineCommittedEvent`
     * @throws ClassCastException if the instance is not `TimelineCommittedEvent`
     */
    public TimelineCommittedEvent getTimelineCommittedEvent() throws ClassCastException {
        return (TimelineCommittedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineReviewedEvent`. If the actual instance is not `TimelineReviewedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineReviewedEvent`
     * @throws ClassCastException if the instance is not `TimelineReviewedEvent`
     */
    public TimelineReviewedEvent getTimelineReviewedEvent() throws ClassCastException {
        return (TimelineReviewedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineLineCommentedEvent`. If the actual instance is not `TimelineLineCommentedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineLineCommentedEvent`
     * @throws ClassCastException if the instance is not `TimelineLineCommentedEvent`
     */
    public TimelineLineCommentedEvent getTimelineLineCommentedEvent() throws ClassCastException {
        return (TimelineLineCommentedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineCommitCommentedEvent`. If the actual instance is not `TimelineCommitCommentedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineCommitCommentedEvent`
     * @throws ClassCastException if the instance is not `TimelineCommitCommentedEvent`
     */
    public TimelineCommitCommentedEvent getTimelineCommitCommentedEvent() throws ClassCastException {
        return (TimelineCommitCommentedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineAssignedIssueEvent`. If the actual instance is not `TimelineAssignedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineAssignedIssueEvent`
     * @throws ClassCastException if the instance is not `TimelineAssignedIssueEvent`
     */
    public TimelineAssignedIssueEvent getTimelineAssignedIssueEvent() throws ClassCastException {
        return (TimelineAssignedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TimelineUnassignedIssueEvent`. If the actual instance is not `TimelineUnassignedIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TimelineUnassignedIssueEvent`
     * @throws ClassCastException if the instance is not `TimelineUnassignedIssueEvent`
     */
    public TimelineUnassignedIssueEvent getTimelineUnassignedIssueEvent() throws ClassCastException {
        return (TimelineUnassignedIssueEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `StateChangeIssueEvent`. If the actual instance is not `StateChangeIssueEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StateChangeIssueEvent`
     * @throws ClassCastException if the instance is not `StateChangeIssueEvent`
     */
    public StateChangeIssueEvent getStateChangeIssueEvent() throws ClassCastException {
        return (StateChangeIssueEvent)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TimelineIssueEvents
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with LabeledIssueEvent
        try {
            LabeledIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LabeledIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UnlabeledIssueEvent
        try {
            UnlabeledIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UnlabeledIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MilestonedIssueEvent
        try {
            MilestonedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MilestonedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DemilestonedIssueEvent
        try {
            DemilestonedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DemilestonedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RenamedIssueEvent
        try {
            RenamedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RenamedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReviewRequestedIssueEvent
        try {
            ReviewRequestedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReviewRequestedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReviewRequestRemovedIssueEvent
        try {
            ReviewRequestRemovedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReviewRequestRemovedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReviewDismissedIssueEvent
        try {
            ReviewDismissedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReviewDismissedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LockedIssueEvent
        try {
            LockedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LockedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddedToProjectIssueEvent
        try {
            AddedToProjectIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddedToProjectIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MovedColumnInProjectIssueEvent
        try {
            MovedColumnInProjectIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MovedColumnInProjectIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RemovedFromProjectIssueEvent
        try {
            RemovedFromProjectIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RemovedFromProjectIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConvertedNoteToIssueIssueEvent
        try {
            ConvertedNoteToIssueIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConvertedNoteToIssueIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineCommentEvent
        try {
            TimelineCommentEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineCommentEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineCrossReferencedEvent
        try {
            TimelineCrossReferencedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineCrossReferencedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineCommittedEvent
        try {
            TimelineCommittedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineCommittedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineReviewedEvent
        try {
            TimelineReviewedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineReviewedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineLineCommentedEvent
        try {
            TimelineLineCommentedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineLineCommentedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineCommitCommentedEvent
        try {
            TimelineCommitCommentedEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineCommitCommentedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineAssignedIssueEvent
        try {
            TimelineAssignedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineAssignedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TimelineUnassignedIssueEvent
        try {
            TimelineUnassignedIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TimelineUnassignedIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with StateChangeIssueEvent
        try {
            StateChangeIssueEvent.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for StateChangeIssueEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for TimelineIssueEvents with anyOf schemas: AddedToProjectIssueEvent, ConvertedNoteToIssueIssueEvent, DemilestonedIssueEvent, LabeledIssueEvent, LockedIssueEvent, MilestonedIssueEvent, MovedColumnInProjectIssueEvent, RemovedFromProjectIssueEvent, RenamedIssueEvent, ReviewDismissedIssueEvent, ReviewRequestRemovedIssueEvent, ReviewRequestedIssueEvent, StateChangeIssueEvent, TimelineAssignedIssueEvent, TimelineCommentEvent, TimelineCommitCommentedEvent, TimelineCommittedEvent, TimelineCrossReferencedEvent, TimelineLineCommentedEvent, TimelineReviewedEvent, TimelineUnassignedIssueEvent, UnlabeledIssueEvent. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of TimelineIssueEvents given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TimelineIssueEvents
     * @throws IOException if the JSON string is invalid with respect to TimelineIssueEvents
     */
    public static TimelineIssueEvents fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TimelineIssueEvents.class);
    }

    /**
     * Convert an instance of TimelineIssueEvents to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

