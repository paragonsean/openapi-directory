/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReposUpdateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReposUpdateRequest {
  public static final String SERIALIZED_NAME_ALLOW_FORKING = "allow_forking";
  @SerializedName(SERIALIZED_NAME_ALLOW_FORKING)
  private Boolean allowForking = false;

  public static final String SERIALIZED_NAME_ALLOW_MERGE_COMMIT = "allow_merge_commit";
  @SerializedName(SERIALIZED_NAME_ALLOW_MERGE_COMMIT)
  private Boolean allowMergeCommit = true;

  public static final String SERIALIZED_NAME_ALLOW_REBASE_MERGE = "allow_rebase_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_REBASE_MERGE)
  private Boolean allowRebaseMerge = true;

  public static final String SERIALIZED_NAME_ALLOW_SQUASH_MERGE = "allow_squash_merge";
  @SerializedName(SERIALIZED_NAME_ALLOW_SQUASH_MERGE)
  private Boolean allowSquashMerge = true;

  public static final String SERIALIZED_NAME_ALLOW_UPDATE_BRANCH = "allow_update_branch";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPDATE_BRANCH)
  private Boolean allowUpdateBranch = false;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = false;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE = "delete_branch_on_merge";
  @SerializedName(SERIALIZED_NAME_DELETE_BRANCH_ON_MERGE)
  private Boolean deleteBranchOnMerge = false;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_ISSUES = "has_issues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  private Boolean hasIssues = true;

  public static final String SERIALIZED_NAME_HAS_PROJECTS = "has_projects";
  @SerializedName(SERIALIZED_NAME_HAS_PROJECTS)
  private Boolean hasProjects = true;

  public static final String SERIALIZED_NAME_HAS_WIKI = "has_wiki";
  @SerializedName(SERIALIZED_NAME_HAS_WIKI)
  private Boolean hasWiki = true;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private String homepage;

  public static final String SERIALIZED_NAME_IS_TEMPLATE = "is_template";
  @SerializedName(SERIALIZED_NAME_IS_TEMPLATE)
  private Boolean isTemplate = false;

  /**
   * The default value for a merge commit message.  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(MergeCommitMessageEnum.Adapter.class)
  public enum MergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    PR_TITLE("PR_TITLE"),
    
    BLANK("BLANK");

    private String value;

    MergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitMessageEnum fromValue(String value) {
      for (MergeCommitMessageEnum b : MergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitMessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeCommitMessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_MESSAGE = "merge_commit_message";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_MESSAGE)
  private MergeCommitMessageEnum mergeCommitMessage;

  /**
   * The default value for a merge commit title.  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  @JsonAdapter(MergeCommitTitleEnum.Adapter.class)
  public enum MergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    MERGE_MESSAGE("MERGE_MESSAGE");

    private String value;

    MergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeCommitTitleEnum fromValue(String value) {
      for (MergeCommitTitleEnum b : MergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeCommitTitleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeCommitTitleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_COMMIT_TITLE = "merge_commit_title";
  @SerializedName(SERIALIZED_NAME_MERGE_COMMIT_TITLE)
  private MergeCommitTitleEnum mergeCommitTitle;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private = false;

  /**
   * The default value for a squash merge commit message:  - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   */
  @JsonAdapter(SquashMergeCommitMessageEnum.Adapter.class)
  public enum SquashMergeCommitMessageEnum {
    PR_BODY("PR_BODY"),
    
    COMMIT_MESSAGES("COMMIT_MESSAGES"),
    
    BLANK("BLANK");

    private String value;

    SquashMergeCommitMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitMessageEnum fromValue(String value) {
      for (SquashMergeCommitMessageEnum b : SquashMergeCommitMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitMessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SquashMergeCommitMessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE = "squash_merge_commit_message";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_MESSAGE)
  private SquashMergeCommitMessageEnum squashMergeCommitMessage;

  /**
   * The default value for a squash merge commit title:  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   */
  @JsonAdapter(SquashMergeCommitTitleEnum.Adapter.class)
  public enum SquashMergeCommitTitleEnum {
    PR_TITLE("PR_TITLE"),
    
    COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");

    private String value;

    SquashMergeCommitTitleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SquashMergeCommitTitleEnum fromValue(String value) {
      for (SquashMergeCommitTitleEnum b : SquashMergeCommitTitleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SquashMergeCommitTitleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SquashMergeCommitTitleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SquashMergeCommitTitleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SquashMergeCommitTitleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SquashMergeCommitTitleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE = "squash_merge_commit_title";
  @SerializedName(SERIALIZED_NAME_SQUASH_MERGE_COMMIT_TITLE)
  private SquashMergeCommitTitleEnum squashMergeCommitTitle;

  public static final String SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT = "use_squash_pr_title_as_default";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USE_SQUASH_PR_TITLE_AS_DEFAULT)
  private Boolean useSquashPrTitleAsDefault = false;

  /**
   * The visibility of the repository.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
  public enum VisibilityEnum {
    PUBLIC("public"),
    
    PRIVATE("private"),
    
    INTERNAL("internal");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public ReposUpdateRequest() {
  }

  public ReposUpdateRequest allowForking(Boolean allowForking) {
    this.allowForking = allowForking;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow private forks, or &#x60;false&#x60; to prevent private forks.
   * @return allowForking
   */
  @javax.annotation.Nullable
  public Boolean getAllowForking() {
    return allowForking;
  }

  public void setAllowForking(Boolean allowForking) {
    this.allowForking = allowForking;
  }


  public ReposUpdateRequest allowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits.
   * @return allowMergeCommit
   */
  @javax.annotation.Nullable
  public Boolean getAllowMergeCommit() {
    return allowMergeCommit;
  }

  public void setAllowMergeCommit(Boolean allowMergeCommit) {
    this.allowMergeCommit = allowMergeCommit;
  }


  public ReposUpdateRequest allowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging.
   * @return allowRebaseMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowRebaseMerge() {
    return allowRebaseMerge;
  }

  public void setAllowRebaseMerge(Boolean allowRebaseMerge) {
    this.allowRebaseMerge = allowRebaseMerge;
  }


  public ReposUpdateRequest allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging.
   * @return allowSquashMerge
   */
  @javax.annotation.Nullable
  public Boolean getAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }


  public ReposUpdateRequest allowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
   * @return allowUpdateBranch
   */
  @javax.annotation.Nullable
  public Boolean getAllowUpdateBranch() {
    return allowUpdateBranch;
  }

  public void setAllowUpdateBranch(Boolean allowUpdateBranch) {
    this.allowUpdateBranch = allowUpdateBranch;
  }


  public ReposUpdateRequest archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Whether to archive this repository. **Note**: You cannot unarchive repositories through the API.
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public ReposUpdateRequest defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Updates the default branch for this repository.
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public ReposUpdateRequest deleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow automatically deleting head branches when pull requests are merged, or &#x60;false&#x60; to prevent automatic deletion.
   * @return deleteBranchOnMerge
   */
  @javax.annotation.Nullable
  public Boolean getDeleteBranchOnMerge() {
    return deleteBranchOnMerge;
  }

  public void setDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
    this.deleteBranchOnMerge = deleteBranchOnMerge;
  }


  public ReposUpdateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of the repository.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReposUpdateRequest hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.
   * @return hasIssues
   */
  @javax.annotation.Nullable
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public ReposUpdateRequest hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to enable projects for this repository or &#x60;false&#x60; to disable them. **Note:** If you&#39;re creating a repository in an organization that has disabled repository projects, the default is &#x60;false&#x60;, and if you pass &#x60;true&#x60;, the API returns an error.
   * @return hasProjects
   */
  @javax.annotation.Nullable
  public Boolean getHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }


  public ReposUpdateRequest hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.
   * @return hasWiki
   */
  @javax.annotation.Nullable
  public Boolean getHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }


  public ReposUpdateRequest homepage(String homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * A URL with more information about the repository.
   * @return homepage
   */
  @javax.annotation.Nullable
  public String getHomepage() {
    return homepage;
  }

  public void setHomepage(String homepage) {
    this.homepage = homepage;
  }


  public ReposUpdateRequest isTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to make this repo available as a template repository or &#x60;false&#x60; to prevent it.
   * @return isTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTemplate() {
    return isTemplate;
  }

  public void setIsTemplate(Boolean isTemplate) {
    this.isTemplate = isTemplate;
  }


  public ReposUpdateRequest mergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
    return this;
  }

  /**
   * The default value for a merge commit message.  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return mergeCommitMessage
   */
  @javax.annotation.Nullable
  public MergeCommitMessageEnum getMergeCommitMessage() {
    return mergeCommitMessage;
  }

  public void setMergeCommitMessage(MergeCommitMessageEnum mergeCommitMessage) {
    this.mergeCommitMessage = mergeCommitMessage;
  }


  public ReposUpdateRequest mergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    this.mergeCommitTitle = mergeCommitTitle;
    return this;
  }

  /**
   * The default value for a merge commit title.  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;MERGE_MESSAGE&#x60; - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @return mergeCommitTitle
   */
  @javax.annotation.Nullable
  public MergeCommitTitleEnum getMergeCommitTitle() {
    return mergeCommitTitle;
  }

  public void setMergeCommitTitle(MergeCommitTitleEnum mergeCommitTitle) {
    this.mergeCommitTitle = mergeCommitTitle;
  }


  public ReposUpdateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the repository.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReposUpdateRequest _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Default: &#x60;false&#x60;.   **Note**: You will get a &#x60;422&#x60; error if the organization restricts [changing repository visibility](https://docs.github.com/enterprise-server@3.3/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   * @return _private
   */
  @javax.annotation.Nullable
  public Boolean getPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }


  public ReposUpdateRequest squashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    this.squashMergeCommitMessage = squashMergeCommitMessage;
    return this;
  }

  /**
   * The default value for a squash merge commit message:  - &#x60;PR_BODY&#x60; - default to the pull request&#39;s body. - &#x60;COMMIT_MESSAGES&#x60; - default to the branch&#39;s commit messages. - &#x60;BLANK&#x60; - default to a blank commit message.
   * @return squashMergeCommitMessage
   */
  @javax.annotation.Nullable
  public SquashMergeCommitMessageEnum getSquashMergeCommitMessage() {
    return squashMergeCommitMessage;
  }

  public void setSquashMergeCommitMessage(SquashMergeCommitMessageEnum squashMergeCommitMessage) {
    this.squashMergeCommitMessage = squashMergeCommitMessage;
  }


  public ReposUpdateRequest squashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    this.squashMergeCommitTitle = squashMergeCommitTitle;
    return this;
  }

  /**
   * The default value for a squash merge commit title:  - &#x60;PR_TITLE&#x60; - default to the pull request&#39;s title. - &#x60;COMMIT_OR_PR_TITLE&#x60; - default to the commit&#39;s title (if only one commit) or the pull request&#39;s title (when more than one commit).
   * @return squashMergeCommitTitle
   */
  @javax.annotation.Nullable
  public SquashMergeCommitTitleEnum getSquashMergeCommitTitle() {
    return squashMergeCommitTitle;
  }

  public void setSquashMergeCommitTitle(SquashMergeCommitTitleEnum squashMergeCommitTitle) {
    this.squashMergeCommitTitle = squashMergeCommitTitle;
  }


  @Deprecated
  public ReposUpdateRequest useSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
    return this;
  }

  /**
   * Either &#x60;true&#x60; to allow squash-merge commits to use pull request title, or &#x60;false&#x60; to use commit message. **This property has been deprecated. Please use &#x60;squash_merge_commit_title&#x60; instead.
   * @return useSquashPrTitleAsDefault
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getUseSquashPrTitleAsDefault() {
    return useSquashPrTitleAsDefault;
  }

  @Deprecated
  public void setUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
    this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
  }


  public ReposUpdateRequest visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The visibility of the repository.
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReposUpdateRequest reposUpdateRequest = (ReposUpdateRequest) o;
    return Objects.equals(this.allowForking, reposUpdateRequest.allowForking) &&
        Objects.equals(this.allowMergeCommit, reposUpdateRequest.allowMergeCommit) &&
        Objects.equals(this.allowRebaseMerge, reposUpdateRequest.allowRebaseMerge) &&
        Objects.equals(this.allowSquashMerge, reposUpdateRequest.allowSquashMerge) &&
        Objects.equals(this.allowUpdateBranch, reposUpdateRequest.allowUpdateBranch) &&
        Objects.equals(this.archived, reposUpdateRequest.archived) &&
        Objects.equals(this.defaultBranch, reposUpdateRequest.defaultBranch) &&
        Objects.equals(this.deleteBranchOnMerge, reposUpdateRequest.deleteBranchOnMerge) &&
        Objects.equals(this.description, reposUpdateRequest.description) &&
        Objects.equals(this.hasIssues, reposUpdateRequest.hasIssues) &&
        Objects.equals(this.hasProjects, reposUpdateRequest.hasProjects) &&
        Objects.equals(this.hasWiki, reposUpdateRequest.hasWiki) &&
        Objects.equals(this.homepage, reposUpdateRequest.homepage) &&
        Objects.equals(this.isTemplate, reposUpdateRequest.isTemplate) &&
        Objects.equals(this.mergeCommitMessage, reposUpdateRequest.mergeCommitMessage) &&
        Objects.equals(this.mergeCommitTitle, reposUpdateRequest.mergeCommitTitle) &&
        Objects.equals(this.name, reposUpdateRequest.name) &&
        Objects.equals(this._private, reposUpdateRequest._private) &&
        Objects.equals(this.squashMergeCommitMessage, reposUpdateRequest.squashMergeCommitMessage) &&
        Objects.equals(this.squashMergeCommitTitle, reposUpdateRequest.squashMergeCommitTitle) &&
        Objects.equals(this.useSquashPrTitleAsDefault, reposUpdateRequest.useSquashPrTitleAsDefault) &&
        Objects.equals(this.visibility, reposUpdateRequest.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowForking, allowMergeCommit, allowRebaseMerge, allowSquashMerge, allowUpdateBranch, archived, defaultBranch, deleteBranchOnMerge, description, hasIssues, hasProjects, hasWiki, homepage, isTemplate, mergeCommitMessage, mergeCommitTitle, name, _private, squashMergeCommitMessage, squashMergeCommitTitle, useSquashPrTitleAsDefault, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReposUpdateRequest {\n");
    sb.append("    allowForking: ").append(toIndentedString(allowForking)).append("\n");
    sb.append("    allowMergeCommit: ").append(toIndentedString(allowMergeCommit)).append("\n");
    sb.append("    allowRebaseMerge: ").append(toIndentedString(allowRebaseMerge)).append("\n");
    sb.append("    allowSquashMerge: ").append(toIndentedString(allowSquashMerge)).append("\n");
    sb.append("    allowUpdateBranch: ").append(toIndentedString(allowUpdateBranch)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    deleteBranchOnMerge: ").append(toIndentedString(deleteBranchOnMerge)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    hasProjects: ").append(toIndentedString(hasProjects)).append("\n");
    sb.append("    hasWiki: ").append(toIndentedString(hasWiki)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    isTemplate: ").append(toIndentedString(isTemplate)).append("\n");
    sb.append("    mergeCommitMessage: ").append(toIndentedString(mergeCommitMessage)).append("\n");
    sb.append("    mergeCommitTitle: ").append(toIndentedString(mergeCommitTitle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    squashMergeCommitMessage: ").append(toIndentedString(squashMergeCommitMessage)).append("\n");
    sb.append("    squashMergeCommitTitle: ").append(toIndentedString(squashMergeCommitTitle)).append("\n");
    sb.append("    useSquashPrTitleAsDefault: ").append(toIndentedString(useSquashPrTitleAsDefault)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_forking");
    openapiFields.add("allow_merge_commit");
    openapiFields.add("allow_rebase_merge");
    openapiFields.add("allow_squash_merge");
    openapiFields.add("allow_update_branch");
    openapiFields.add("archived");
    openapiFields.add("default_branch");
    openapiFields.add("delete_branch_on_merge");
    openapiFields.add("description");
    openapiFields.add("has_issues");
    openapiFields.add("has_projects");
    openapiFields.add("has_wiki");
    openapiFields.add("homepage");
    openapiFields.add("is_template");
    openapiFields.add("merge_commit_message");
    openapiFields.add("merge_commit_title");
    openapiFields.add("name");
    openapiFields.add("private");
    openapiFields.add("squash_merge_commit_message");
    openapiFields.add("squash_merge_commit_title");
    openapiFields.add("use_squash_pr_title_as_default");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReposUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReposUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReposUpdateRequest is not found in the empty JSON string", ReposUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReposUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReposUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) && !jsonObj.get("homepage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepage").toString()));
      }
      if ((jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) && !jsonObj.get("merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_message").toString()));
      }
      // validate the optional field `merge_commit_message`
      if (jsonObj.get("merge_commit_message") != null && !jsonObj.get("merge_commit_message").isJsonNull()) {
        MergeCommitMessageEnum.validateJsonElement(jsonObj.get("merge_commit_message"));
      }
      if ((jsonObj.get("merge_commit_title") != null && !jsonObj.get("merge_commit_title").isJsonNull()) && !jsonObj.get("merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_commit_title").toString()));
      }
      // validate the optional field `merge_commit_title`
      if (jsonObj.get("merge_commit_title") != null && !jsonObj.get("merge_commit_title").isJsonNull()) {
        MergeCommitTitleEnum.validateJsonElement(jsonObj.get("merge_commit_title"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("squash_merge_commit_message") != null && !jsonObj.get("squash_merge_commit_message").isJsonNull()) && !jsonObj.get("squash_merge_commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_message").toString()));
      }
      // validate the optional field `squash_merge_commit_message`
      if (jsonObj.get("squash_merge_commit_message") != null && !jsonObj.get("squash_merge_commit_message").isJsonNull()) {
        SquashMergeCommitMessageEnum.validateJsonElement(jsonObj.get("squash_merge_commit_message"));
      }
      if ((jsonObj.get("squash_merge_commit_title") != null && !jsonObj.get("squash_merge_commit_title").isJsonNull()) && !jsonObj.get("squash_merge_commit_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("squash_merge_commit_title").toString()));
      }
      // validate the optional field `squash_merge_commit_title`
      if (jsonObj.get("squash_merge_commit_title") != null && !jsonObj.get("squash_merge_commit_title").isJsonNull()) {
        SquashMergeCommitTitleEnum.validateJsonElement(jsonObj.get("squash_merge_commit_title"));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        VisibilityEnum.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReposUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReposUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReposUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReposUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReposUpdateRequest>() {
           @Override
           public void write(JsonWriter out, ReposUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReposUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReposUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReposUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to ReposUpdateRequest
   */
  public static ReposUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReposUpdateRequest.class);
  }

  /**
   * Convert an instance of ReposUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

