/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullsCreateReviewCommentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullsCreateReviewCommentRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commit_id";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_IN_REPLY_TO = "in_reply_to";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO)
  private Integer inReplyTo;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  /**
   * In a split diff view, the side of the diff that the pull request&#39;s changes appear on. Can be &#x60;LEFT&#x60; or &#x60;RIGHT&#x60;. Use &#x60;LEFT&#x60; for deletions that appear in red. Use &#x60;RIGHT&#x60; for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \&quot;[Diff view options](https://docs.github.com/enterprise-server@3.3/articles/about-comparing-branches-in-pull-requests#diff-view-options)\&quot; in the GitHub Help documentation.
   */
  @JsonAdapter(SideEnum.Adapter.class)
  public enum SideEnum {
    LEFT("LEFT"),
    
    RIGHT("RIGHT");

    private String value;

    SideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SideEnum fromValue(String value) {
      for (SideEnum b : SideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIDE = "side";
  @SerializedName(SERIALIZED_NAME_SIDE)
  private SideEnum side;

  public static final String SERIALIZED_NAME_START_LINE = "start_line";
  @SerializedName(SERIALIZED_NAME_START_LINE)
  private Integer startLine;

  /**
   * **Required when using multi-line comments unless using &#x60;in_reply_to&#x60;**. The &#x60;start_side&#x60; is the starting side of the diff that the comment applies to. Can be &#x60;LEFT&#x60; or &#x60;RIGHT&#x60;. To learn more about multi-line comments, see \&quot;[Commenting on a pull request](https://docs.github.com/enterprise-server@3.3/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\&quot; in the GitHub Help documentation. See &#x60;side&#x60; in this table for additional context.
   */
  @JsonAdapter(StartSideEnum.Adapter.class)
  public enum StartSideEnum {
    LEFT("LEFT"),
    
    RIGHT("RIGHT"),
    
    SIDE("side");

    private String value;

    StartSideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartSideEnum fromValue(String value) {
      for (StartSideEnum b : StartSideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartSideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartSideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartSideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartSideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StartSideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_START_SIDE = "start_side";
  @SerializedName(SERIALIZED_NAME_START_SIDE)
  private StartSideEnum startSide;

  public PullsCreateReviewCommentRequest() {
  }

  public PullsCreateReviewCommentRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The text of the review comment.
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PullsCreateReviewCommentRequest commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the &#x60;position&#x60;.
   * @return commitId
   */
  @javax.annotation.Nonnull
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public PullsCreateReviewCommentRequest inReplyTo(Integer inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  /**
   * The ID of the review comment to reply to. To find the ID of a review comment with [\&quot;List review comments on a pull request\&quot;](#list-review-comments-on-a-pull-request). When specified, all parameters other than &#x60;body&#x60; in the request body are ignored.
   * @return inReplyTo
   */
  @javax.annotation.Nullable
  public Integer getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(Integer inReplyTo) {
    this.inReplyTo = inReplyTo;
  }


  public PullsCreateReviewCommentRequest line(Integer line) {
    this.line = line;
    return this;
  }

  /**
   * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   * @return line
   */
  @javax.annotation.Nonnull
  public Integer getLine() {
    return line;
  }

  public void setLine(Integer line) {
    this.line = line;
  }


  public PullsCreateReviewCommentRequest path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The relative path to the file that necessitates a comment.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  @Deprecated
  public PullsCreateReviewCommentRequest position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * **This parameter is deprecated. Use &#x60;line&#x60; instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   * @return position
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  @Deprecated
  public void setPosition(Integer position) {
    this.position = position;
  }


  public PullsCreateReviewCommentRequest side(SideEnum side) {
    this.side = side;
    return this;
  }

  /**
   * In a split diff view, the side of the diff that the pull request&#39;s changes appear on. Can be &#x60;LEFT&#x60; or &#x60;RIGHT&#x60;. Use &#x60;LEFT&#x60; for deletions that appear in red. Use &#x60;RIGHT&#x60; for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \&quot;[Diff view options](https://docs.github.com/enterprise-server@3.3/articles/about-comparing-branches-in-pull-requests#diff-view-options)\&quot; in the GitHub Help documentation.
   * @return side
   */
  @javax.annotation.Nullable
  public SideEnum getSide() {
    return side;
  }

  public void setSide(SideEnum side) {
    this.side = side;
  }


  public PullsCreateReviewCommentRequest startLine(Integer startLine) {
    this.startLine = startLine;
    return this;
  }

  /**
   * **Required when using multi-line comments unless using &#x60;in_reply_to&#x60;**. The &#x60;start_line&#x60; is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \&quot;[Commenting on a pull request](https://docs.github.com/enterprise-server@3.3/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\&quot; in the GitHub Help documentation.
   * @return startLine
   */
  @javax.annotation.Nullable
  public Integer getStartLine() {
    return startLine;
  }

  public void setStartLine(Integer startLine) {
    this.startLine = startLine;
  }


  public PullsCreateReviewCommentRequest startSide(StartSideEnum startSide) {
    this.startSide = startSide;
    return this;
  }

  /**
   * **Required when using multi-line comments unless using &#x60;in_reply_to&#x60;**. The &#x60;start_side&#x60; is the starting side of the diff that the comment applies to. Can be &#x60;LEFT&#x60; or &#x60;RIGHT&#x60;. To learn more about multi-line comments, see \&quot;[Commenting on a pull request](https://docs.github.com/enterprise-server@3.3/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\&quot; in the GitHub Help documentation. See &#x60;side&#x60; in this table for additional context.
   * @return startSide
   */
  @javax.annotation.Nullable
  public StartSideEnum getStartSide() {
    return startSide;
  }

  public void setStartSide(StartSideEnum startSide) {
    this.startSide = startSide;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullsCreateReviewCommentRequest pullsCreateReviewCommentRequest = (PullsCreateReviewCommentRequest) o;
    return Objects.equals(this.body, pullsCreateReviewCommentRequest.body) &&
        Objects.equals(this.commitId, pullsCreateReviewCommentRequest.commitId) &&
        Objects.equals(this.inReplyTo, pullsCreateReviewCommentRequest.inReplyTo) &&
        Objects.equals(this.line, pullsCreateReviewCommentRequest.line) &&
        Objects.equals(this.path, pullsCreateReviewCommentRequest.path) &&
        Objects.equals(this.position, pullsCreateReviewCommentRequest.position) &&
        Objects.equals(this.side, pullsCreateReviewCommentRequest.side) &&
        Objects.equals(this.startLine, pullsCreateReviewCommentRequest.startLine) &&
        Objects.equals(this.startSide, pullsCreateReviewCommentRequest.startSide);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, commitId, inReplyTo, line, path, position, side, startLine, startSide);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullsCreateReviewCommentRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    side: ").append(toIndentedString(side)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    startSide: ").append(toIndentedString(startSide)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("commit_id");
    openapiFields.add("in_reply_to");
    openapiFields.add("line");
    openapiFields.add("path");
    openapiFields.add("position");
    openapiFields.add("side");
    openapiFields.add("start_line");
    openapiFields.add("start_side");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("commit_id");
    openapiRequiredFields.add("line");
    openapiRequiredFields.add("path");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullsCreateReviewCommentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullsCreateReviewCommentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullsCreateReviewCommentRequest is not found in the empty JSON string", PullsCreateReviewCommentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullsCreateReviewCommentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullsCreateReviewCommentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullsCreateReviewCommentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("commit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_id").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) && !jsonObj.get("side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("side").toString()));
      }
      // validate the optional field `side`
      if (jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) {
        SideEnum.validateJsonElement(jsonObj.get("side"));
      }
      if ((jsonObj.get("start_side") != null && !jsonObj.get("start_side").isJsonNull()) && !jsonObj.get("start_side").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_side` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_side").toString()));
      }
      // validate the optional field `start_side`
      if (jsonObj.get("start_side") != null && !jsonObj.get("start_side").isJsonNull()) {
        StartSideEnum.validateJsonElement(jsonObj.get("start_side"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullsCreateReviewCommentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullsCreateReviewCommentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullsCreateReviewCommentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullsCreateReviewCommentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullsCreateReviewCommentRequest>() {
           @Override
           public void write(JsonWriter out, PullsCreateReviewCommentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullsCreateReviewCommentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullsCreateReviewCommentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullsCreateReviewCommentRequest
   * @throws IOException if the JSON string is invalid with respect to PullsCreateReviewCommentRequest
   */
  public static PullsCreateReviewCommentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullsCreateReviewCommentRequest.class);
  }

  /**
   * Convert an instance of PullsCreateReviewCommentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

