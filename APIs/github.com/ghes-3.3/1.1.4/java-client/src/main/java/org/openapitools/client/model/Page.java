/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PagesHttpsCertificate;
import org.openapitools.client.model.PagesSourceHash;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for GitHub Pages for a repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Page {
  /**
   * The process in which the Page will be built.
   */
  @JsonAdapter(BuildTypeEnum.Adapter.class)
  public enum BuildTypeEnum {
    LEGACY("legacy"),
    
    WORKFLOW("workflow");

    private String value;

    BuildTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BuildTypeEnum fromValue(String value) {
      for (BuildTypeEnum b : BuildTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BuildTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BuildTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BuildTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BuildTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BuildTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUILD_TYPE = "build_type";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private BuildTypeEnum buildType;

  public static final String SERIALIZED_NAME_CNAME = "cname";
  @SerializedName(SERIALIZED_NAME_CNAME)
  private String cname;

  public static final String SERIALIZED_NAME_CUSTOM404 = "custom_404";
  @SerializedName(SERIALIZED_NAME_CUSTOM404)
  private Boolean custom404 = false;

  public static final String SERIALIZED_NAME_HTML_URL = "html_url";
  @SerializedName(SERIALIZED_NAME_HTML_URL)
  private URI htmlUrl;

  public static final String SERIALIZED_NAME_HTTPS_CERTIFICATE = "https_certificate";
  @SerializedName(SERIALIZED_NAME_HTTPS_CERTIFICATE)
  private PagesHttpsCertificate httpsCertificate;

  public static final String SERIALIZED_NAME_HTTPS_ENFORCED = "https_enforced";
  @SerializedName(SERIALIZED_NAME_HTTPS_ENFORCED)
  private Boolean httpsEnforced;

  public static final String SERIALIZED_NAME_PENDING_DOMAIN_UNVERIFIED_AT = "pending_domain_unverified_at";
  @SerializedName(SERIALIZED_NAME_PENDING_DOMAIN_UNVERIFIED_AT)
  private OffsetDateTime pendingDomainUnverifiedAt;

  /**
   * The state if the domain is verified
   */
  @JsonAdapter(ProtectedDomainStateEnum.Adapter.class)
  public enum ProtectedDomainStateEnum {
    PENDING("pending"),
    
    VERIFIED("verified"),
    
    UNVERIFIED("unverified");

    private String value;

    ProtectedDomainStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectedDomainStateEnum fromValue(String value) {
      for (ProtectedDomainStateEnum b : ProtectedDomainStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProtectedDomainStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectedDomainStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectedDomainStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectedDomainStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectedDomainStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTED_DOMAIN_STATE = "protected_domain_state";
  @SerializedName(SERIALIZED_NAME_PROTECTED_DOMAIN_STATE)
  private ProtectedDomainStateEnum protectedDomainState;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private PagesSourceHash source;

  /**
   * The status of the most recent build of the Page.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    BUILT("built"),
    
    BUILDING("building"),
    
    ERRORED("errored");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public Page() {
  }

  public Page buildType(BuildTypeEnum buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * The process in which the Page will be built.
   * @return buildType
   */
  @javax.annotation.Nullable
  public BuildTypeEnum getBuildType() {
    return buildType;
  }

  public void setBuildType(BuildTypeEnum buildType) {
    this.buildType = buildType;
  }


  public Page cname(String cname) {
    this.cname = cname;
    return this;
  }

  /**
   * The Pages site&#39;s custom domain
   * @return cname
   */
  @javax.annotation.Nullable
  public String getCname() {
    return cname;
  }

  public void setCname(String cname) {
    this.cname = cname;
  }


  public Page custom404(Boolean custom404) {
    this.custom404 = custom404;
    return this;
  }

  /**
   * Whether the Page has a custom 404 page.
   * @return custom404
   */
  @javax.annotation.Nonnull
  public Boolean getCustom404() {
    return custom404;
  }

  public void setCustom404(Boolean custom404) {
    this.custom404 = custom404;
  }


  public Page htmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * The web address the Page can be accessed from.
   * @return htmlUrl
   */
  @javax.annotation.Nullable
  public URI getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(URI htmlUrl) {
    this.htmlUrl = htmlUrl;
  }


  public Page httpsCertificate(PagesHttpsCertificate httpsCertificate) {
    this.httpsCertificate = httpsCertificate;
    return this;
  }

  /**
   * Get httpsCertificate
   * @return httpsCertificate
   */
  @javax.annotation.Nullable
  public PagesHttpsCertificate getHttpsCertificate() {
    return httpsCertificate;
  }

  public void setHttpsCertificate(PagesHttpsCertificate httpsCertificate) {
    this.httpsCertificate = httpsCertificate;
  }


  public Page httpsEnforced(Boolean httpsEnforced) {
    this.httpsEnforced = httpsEnforced;
    return this;
  }

  /**
   * Whether https is enabled on the domain
   * @return httpsEnforced
   */
  @javax.annotation.Nullable
  public Boolean getHttpsEnforced() {
    return httpsEnforced;
  }

  public void setHttpsEnforced(Boolean httpsEnforced) {
    this.httpsEnforced = httpsEnforced;
  }


  public Page pendingDomainUnverifiedAt(OffsetDateTime pendingDomainUnverifiedAt) {
    this.pendingDomainUnverifiedAt = pendingDomainUnverifiedAt;
    return this;
  }

  /**
   * The timestamp when a pending domain becomes unverified.
   * @return pendingDomainUnverifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPendingDomainUnverifiedAt() {
    return pendingDomainUnverifiedAt;
  }

  public void setPendingDomainUnverifiedAt(OffsetDateTime pendingDomainUnverifiedAt) {
    this.pendingDomainUnverifiedAt = pendingDomainUnverifiedAt;
  }


  public Page protectedDomainState(ProtectedDomainStateEnum protectedDomainState) {
    this.protectedDomainState = protectedDomainState;
    return this;
  }

  /**
   * The state if the domain is verified
   * @return protectedDomainState
   */
  @javax.annotation.Nullable
  public ProtectedDomainStateEnum getProtectedDomainState() {
    return protectedDomainState;
  }

  public void setProtectedDomainState(ProtectedDomainStateEnum protectedDomainState) {
    this.protectedDomainState = protectedDomainState;
  }


  public Page _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Whether the GitHub Pages site is publicly visible. If set to &#x60;true&#x60;, the site is accessible to anyone on the internet. If set to &#x60;false&#x60;, the site will only be accessible to users who have at least &#x60;read&#x60; access to the repository that published the site.
   * @return _public
   */
  @javax.annotation.Nonnull
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public Page source(PagesSourceHash source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public PagesSourceHash getSource() {
    return source;
  }

  public void setSource(PagesSourceHash source) {
    this.source = source;
  }


  public Page status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the most recent build of the Page.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Page url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The API address for accessing this Page resource.
   * @return url
   */
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Page page = (Page) o;
    return Objects.equals(this.buildType, page.buildType) &&
        Objects.equals(this.cname, page.cname) &&
        Objects.equals(this.custom404, page.custom404) &&
        Objects.equals(this.htmlUrl, page.htmlUrl) &&
        Objects.equals(this.httpsCertificate, page.httpsCertificate) &&
        Objects.equals(this.httpsEnforced, page.httpsEnforced) &&
        Objects.equals(this.pendingDomainUnverifiedAt, page.pendingDomainUnverifiedAt) &&
        Objects.equals(this.protectedDomainState, page.protectedDomainState) &&
        Objects.equals(this._public, page._public) &&
        Objects.equals(this.source, page.source) &&
        Objects.equals(this.status, page.status) &&
        Objects.equals(this.url, page.url);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildType, cname, custom404, htmlUrl, httpsCertificate, httpsEnforced, pendingDomainUnverifiedAt, protectedDomainState, _public, source, status, url);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Page {\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    cname: ").append(toIndentedString(cname)).append("\n");
    sb.append("    custom404: ").append(toIndentedString(custom404)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    httpsCertificate: ").append(toIndentedString(httpsCertificate)).append("\n");
    sb.append("    httpsEnforced: ").append(toIndentedString(httpsEnforced)).append("\n");
    sb.append("    pendingDomainUnverifiedAt: ").append(toIndentedString(pendingDomainUnverifiedAt)).append("\n");
    sb.append("    protectedDomainState: ").append(toIndentedString(protectedDomainState)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build_type");
    openapiFields.add("cname");
    openapiFields.add("custom_404");
    openapiFields.add("html_url");
    openapiFields.add("https_certificate");
    openapiFields.add("https_enforced");
    openapiFields.add("pending_domain_unverified_at");
    openapiFields.add("protected_domain_state");
    openapiFields.add("public");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cname");
    openapiRequiredFields.add("custom_404");
    openapiRequiredFields.add("public");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Page
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Page.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Page is not found in the empty JSON string", Page.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Page.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Page` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Page.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("build_type") != null && !jsonObj.get("build_type").isJsonNull()) && !jsonObj.get("build_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_type").toString()));
      }
      // validate the optional field `build_type`
      if (jsonObj.get("build_type") != null && !jsonObj.get("build_type").isJsonNull()) {
        BuildTypeEnum.validateJsonElement(jsonObj.get("build_type"));
      }
      if ((jsonObj.get("cname") != null && !jsonObj.get("cname").isJsonNull()) && !jsonObj.get("cname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cname").toString()));
      }
      if ((jsonObj.get("html_url") != null && !jsonObj.get("html_url").isJsonNull()) && !jsonObj.get("html_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_url").toString()));
      }
      // validate the optional field `https_certificate`
      if (jsonObj.get("https_certificate") != null && !jsonObj.get("https_certificate").isJsonNull()) {
        PagesHttpsCertificate.validateJsonElement(jsonObj.get("https_certificate"));
      }
      if ((jsonObj.get("protected_domain_state") != null && !jsonObj.get("protected_domain_state").isJsonNull()) && !jsonObj.get("protected_domain_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protected_domain_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protected_domain_state").toString()));
      }
      // validate the optional field `protected_domain_state`
      if (jsonObj.get("protected_domain_state") != null && !jsonObj.get("protected_domain_state").isJsonNull()) {
        ProtectedDomainStateEnum.validateJsonElement(jsonObj.get("protected_domain_state"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        PagesSourceHash.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Page.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Page' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Page> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Page.class));

       return (TypeAdapter<T>) new TypeAdapter<Page>() {
           @Override
           public void write(JsonWriter out, Page value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Page read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Page given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Page
   * @throws IOException if the JSON string is invalid with respect to Page
   */
  public static Page fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Page.class);
  }

  /**
   * Convert an instance of Page to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

