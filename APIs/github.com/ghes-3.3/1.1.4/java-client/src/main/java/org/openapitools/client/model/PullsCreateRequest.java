/*
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullsCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:08:22.800879-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullsCreateRequest {
  public static final String SERIALIZED_NAME_BASE = "base";
  @SerializedName(SERIALIZED_NAME_BASE)
  private String base;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_HEAD = "head";
  @SerializedName(SERIALIZED_NAME_HEAD)
  private String head;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private Integer issue;

  public static final String SERIALIZED_NAME_MAINTAINER_CAN_MODIFY = "maintainer_can_modify";
  @SerializedName(SERIALIZED_NAME_MAINTAINER_CAN_MODIFY)
  private Boolean maintainerCanModify;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PullsCreateRequest() {
  }

  public PullsCreateRequest base(String base) {
    this.base = base;
    return this;
  }

  /**
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   * @return base
   */
  @javax.annotation.Nonnull
  public String getBase() {
    return base;
  }

  public void setBase(String base) {
    this.base = base;
  }


  public PullsCreateRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The contents of the pull request.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PullsCreateRequest draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Indicates whether the pull request is a draft. See \&quot;[Draft Pull Requests](https://docs.github.com/enterprise-server@3.3/articles/about-pull-requests#draft-pull-requests)\&quot; in the GitHub Help documentation to learn more.
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public PullsCreateRequest head(String head) {
    this.head = head;
    return this;
  }

  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace &#x60;head&#x60; with a user like this: &#x60;username:branch&#x60;.
   * @return head
   */
  @javax.annotation.Nonnull
  public String getHead() {
    return head;
  }

  public void setHead(String head) {
    this.head = head;
  }


  public PullsCreateRequest issue(Integer issue) {
    this.issue = issue;
    return this;
  }

  /**
   * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless &#x60;title&#x60; is specified.
   * @return issue
   */
  @javax.annotation.Nullable
  public Integer getIssue() {
    return issue;
  }

  public void setIssue(Integer issue) {
    this.issue = issue;
  }


  public PullsCreateRequest maintainerCanModify(Boolean maintainerCanModify) {
    this.maintainerCanModify = maintainerCanModify;
    return this;
  }

  /**
   * Indicates whether [maintainers can modify](https://docs.github.com/enterprise-server@3.3/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   * @return maintainerCanModify
   */
  @javax.annotation.Nullable
  public Boolean getMaintainerCanModify() {
    return maintainerCanModify;
  }

  public void setMaintainerCanModify(Boolean maintainerCanModify) {
    this.maintainerCanModify = maintainerCanModify;
  }


  public PullsCreateRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the new pull request. Required unless &#x60;issue&#x60; is specified.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullsCreateRequest pullsCreateRequest = (PullsCreateRequest) o;
    return Objects.equals(this.base, pullsCreateRequest.base) &&
        Objects.equals(this.body, pullsCreateRequest.body) &&
        Objects.equals(this.draft, pullsCreateRequest.draft) &&
        Objects.equals(this.head, pullsCreateRequest.head) &&
        Objects.equals(this.issue, pullsCreateRequest.issue) &&
        Objects.equals(this.maintainerCanModify, pullsCreateRequest.maintainerCanModify) &&
        Objects.equals(this.title, pullsCreateRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base, body, draft, head, issue, maintainerCanModify, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullsCreateRequest {\n");
    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    head: ").append(toIndentedString(head)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    maintainerCanModify: ").append(toIndentedString(maintainerCanModify)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base");
    openapiFields.add("body");
    openapiFields.add("draft");
    openapiFields.add("head");
    openapiFields.add("issue");
    openapiFields.add("maintainer_can_modify");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base");
    openapiRequiredFields.add("head");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullsCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullsCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullsCreateRequest is not found in the empty JSON string", PullsCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullsCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullsCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullsCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("head").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullsCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullsCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullsCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullsCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullsCreateRequest>() {
           @Override
           public void write(JsonWriter out, PullsCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullsCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullsCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullsCreateRequest
   * @throws IOException if the JSON string is invalid with respect to PullsCreateRequest
   */
  public static PullsCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullsCreateRequest.class);
  }

  /**
   * Convert an instance of PullsCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

