# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionsReviewPendingDeploymentsForRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, environment_ids: List[int]=None, state: str=None):
        """ActionsReviewPendingDeploymentsForRunRequest - a model defined in OpenAPI

        :param comment: The comment of this ActionsReviewPendingDeploymentsForRunRequest.
        :param environment_ids: The environment_ids of this ActionsReviewPendingDeploymentsForRunRequest.
        :param state: The state of this ActionsReviewPendingDeploymentsForRunRequest.
        """
        self.openapi_types = {
            'comment': str,
            'environment_ids': List[int],
            'state': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'environment_ids': 'environment_ids',
            'state': 'state'
        }

        self._comment = comment
        self._environment_ids = environment_ids
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsReviewPendingDeploymentsForRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actions_review_pending_deployments_for_run_request of this ActionsReviewPendingDeploymentsForRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ActionsReviewPendingDeploymentsForRunRequest.

        A comment to accompany the deployment review

        :return: The comment of this ActionsReviewPendingDeploymentsForRunRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ActionsReviewPendingDeploymentsForRunRequest.

        A comment to accompany the deployment review

        :param comment: The comment of this ActionsReviewPendingDeploymentsForRunRequest.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def environment_ids(self):
        """Gets the environment_ids of this ActionsReviewPendingDeploymentsForRunRequest.

        The list of environment ids to approve or reject

        :return: The environment_ids of this ActionsReviewPendingDeploymentsForRunRequest.
        :rtype: List[int]
        """
        return self._environment_ids

    @environment_ids.setter
    def environment_ids(self, environment_ids):
        """Sets the environment_ids of this ActionsReviewPendingDeploymentsForRunRequest.

        The list of environment ids to approve or reject

        :param environment_ids: The environment_ids of this ActionsReviewPendingDeploymentsForRunRequest.
        :type environment_ids: List[int]
        """
        if environment_ids is None:
            raise ValueError("Invalid value for `environment_ids`, must not be `None`")

        self._environment_ids = environment_ids

    @property
    def state(self):
        """Gets the state of this ActionsReviewPendingDeploymentsForRunRequest.

        Whether to approve or reject deployment to the specified environments.

        :return: The state of this ActionsReviewPendingDeploymentsForRunRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ActionsReviewPendingDeploymentsForRunRequest.

        Whether to approve or reject deployment to the specified environments.

        :param state: The state of this ActionsReviewPendingDeploymentsForRunRequest.
        :type state: str
        """
        allowed_values = ["approved", "rejected"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
